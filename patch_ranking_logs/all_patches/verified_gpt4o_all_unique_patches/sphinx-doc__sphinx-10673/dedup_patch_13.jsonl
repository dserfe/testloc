{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 52ac0d3..02dada1 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -32,11 +32,17 @@ class TocTree:\n         if toctreenode.get('numbered'):\n             self.env.numbered_toctrees.add(docname)\n         includefiles = toctreenode['includefiles']\n+        special_files = {'genindex', 'modindex', 'search'}\n         for includefile in includefiles:\n             # note that if the included file is rebuilt, this one must be\n             # too (since the TOC of the included file could have changed)\n             self.env.files_to_rebuild.setdefault(includefile, set()).add(docname)\n+            # Handle special cases for genindex, modindex, and search\n+            if includefile in special_files:\n+                self.env.files_to_rebuild.setdefault(includefile, set()).add(includefile)\n         self.env.toctree_includes.setdefault(docname, []).extend(includefiles)\n+        # Ensure special files are always included\n+        self.env.toctree_includes.setdefault(docname, []).extend(special_files)\n \n     def resolve(self, docname: str, builder: \"Builder\", toctree: addnodes.toctree,\n                 prune: bool = True, maxdepth: int = 0, titles_only: bool = False,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 07fcee3..5462cf9 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -19,9 +19,13 @@ class TocTree:\n         if toctreenode.get('numbered'):\n             self.env.numbered_toctrees.add(docname)\n         includefiles = toctreenode['includefiles']\n+        special_files = {'genindex', 'modindex', 'search'}\n         for includefile in includefiles:\n             self.env.files_to_rebuild.setdefault(includefile, set()).add(docname)\n+            if includefile in special_files:\n+                self.env.files_to_rebuild.setdefault(includefile, set()).add(includefile)\n         self.env.toctree_includes.setdefault(docname, []).extend(includefiles)\n+        self.env.toctree_includes.setdefault(docname, []).extend(special_files)\n     def resolve(self, docname: str, builder: 'Builder', toctree: addnodes.toctree, prune: bool=True, maxdepth: int=0, titles_only: bool=False, collapse: bool=False, includehidden: bool=False) -> Optional[Element]:\n         if toctree.get('hidden', False) and (not includehidden):\n             return None\n", "normalized_occurrence": 1}
