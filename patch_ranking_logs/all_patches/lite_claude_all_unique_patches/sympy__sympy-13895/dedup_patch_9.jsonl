{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..4249389 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -312,6 +312,9 @@ class Pow(Expr):\n                     s = 1  # floor = 0\n                 elif fuzzy_not(im(b).is_zero) and abs(e) == 2:\n                     s = 1  # floor = 0\n+                elif b.is_negative:\n+                    # Don't simplify powers with negative base and non-integer exponent\n+                    s = None\n                 elif _half(other):\n                     s = exp(2*S.Pi*S.ImaginaryUnit*other*floor(\n                         S.Half - e*arg(b)/(2*S.Pi)))\n@@ -1581,4 +1584,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..81df5e9 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -164,6 +164,8 @@ class Pow(Expr):\n                     s = 1\n                 elif fuzzy_not(im(b).is_zero) and abs(e) == 2:\n                     s = 1\n+                elif b.is_negative:\n+                    s = None\n                 elif _half(other):\n                     s = exp(2 * S.Pi * S.ImaginaryUnit * other * floor(S.Half - e * arg(b) / (2 * S.Pi)))\n                     if s.is_real and _n2(sign(s) - s) == 0:\n", "normalized_occurrence": 1}
