{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..225c0ca 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -565,7 +565,7 @@ class ResolvedOuterRef(F):\n class OuterRef(F):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None,\n                            summarize=False, for_save=False, simple_col=False):\n-        if isinstance(self.name, self.__class__):\n+        if isinstance(self.name, self.__class__) or isinstance(self.name, ResolvedOuterRef):\n             return self.name\n         return ResolvedOuterRef(self.name)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..f1752ca 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -321,7 +321,7 @@ class ResolvedOuterRef(F):\n         return self\n class OuterRef(F):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False):\n-        if isinstance(self.name, self.__class__):\n+        if isinstance(self.name, self.__class__) or isinstance(self.name, ResolvedOuterRef):\n             return self.name\n         return ResolvedOuterRef(self.name)\n class Func(SQLiteNumericMixin, Expression):\n", "normalized_occurrence": 1}
