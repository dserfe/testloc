{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12096", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 654774e..899ca7e 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -507,7 +507,15 @@ class Function(Application, Expr):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                # First evaluate all arguments\n+                evaluated_args = [arg.evalf(prec) for arg in self.args]\n+                # Then evaluate the implementation with evaluated arguments\n+                result = self._imp_(*evaluated_args)\n+                # Convert to Float or evaluate further if needed\n+                if isinstance(result, (float, int)):\n+                    return Float(result, prec)\n+                else:\n+                    return result.evalf(prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex c09e75a..a2afc4a 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -181,7 +181,12 @@ class Function(Application, Expr):\n             func = getattr(mpmath, fname)\n         except (AttributeError, KeyError):\n             try:\n-                return Float(self._imp_(*self.args), prec)\n+                evaluated_args = [arg.evalf(prec) for arg in self.args]\n+                result = self._imp_(*evaluated_args)\n+                if isinstance(result, (float, int)):\n+                    return Float(result, prec)\n+                else:\n+                    return result.evalf(prec)\n             except (AttributeError, TypeError, ValueError):\n                 return\n         try:\n", "normalized_occurrence": 1}
