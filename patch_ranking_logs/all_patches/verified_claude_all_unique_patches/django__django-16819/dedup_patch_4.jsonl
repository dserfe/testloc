{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..73fd85d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1229,9 +1229,20 @@ class MigrationAutodetector:\n             added_indexes = [idx for idx in new_indexes if idx not in old_indexes]\n             removed_indexes = [idx for idx in old_indexes if idx not in new_indexes]\n             renamed_indexes = []\n-            # Find renamed indexes.\n+            altered_indexes = []\n+            # Find renamed and altered indexes\n             remove_from_added = []\n             remove_from_removed = []\n+            \n+            # First check for altered indexes (same name, different definition)\n+            for old_index in old_indexes:\n+                for new_index in new_indexes:\n+                    if old_index.name == new_index.name and old_index != new_index:\n+                        altered_indexes.append((old_index, new_index))\n+                        if new_index in added_indexes:\n+                            remove_from_added.append(new_index)\n+                        if old_index in removed_indexes:\n+                            remove_from_removed.append(old_index)\n             for new_index in added_indexes:\n                 new_index_dec = new_index.deconstruct()\n                 new_index_name = new_index_dec[2].pop(\"name\")\n@@ -1298,6 +1309,7 @@ class MigrationAutodetector:\n                         \"added_indexes\": added_indexes,\n                         \"removed_indexes\": removed_indexes,\n                         \"renamed_indexes\": renamed_indexes,\n+                        \"altered_indexes\": altered_indexes,\n                     }\n                 }\n             )\ndiff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 7088737..ddfe9bd 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -862,6 +862,59 @@ class AddIndex(IndexOperation):\n         return \"%s_%s\" % (self.model_name_lower, self.index.name.lower())\n \n \n+class AlterIndex(IndexOperation):\n+    \"\"\"Alter an index on a model.\"\"\"\n+\n+    def __init__(self, model_name, old_index, new_index):\n+        self.model_name = model_name\n+        self.old_index = old_index\n+        self.new_index = new_index\n+        if old_index.name != new_index.name:\n+            raise ValueError(\n+                \"AlterIndex operations require the old and new indexes to have \"\n+                \"the same name. %r and %r have different names.\" \n+                % (old_index, new_index)\n+            )\n+\n+    def state_forwards(self, app_label, state):\n+        state.remove_index(app_label, self.model_name_lower, self.old_index)\n+        state.add_index(app_label, self.model_name_lower, self.new_index)\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        model = to_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.remove_index(model, self.old_index)\n+            schema_editor.add_index(model, self.new_index)\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.remove_index(model, self.new_index)\n+            schema_editor.add_index(model, self.old_index)\n+\n+    def deconstruct(self):\n+        kwargs = {\n+            \"model_name\": self.model_name,\n+            \"old_index\": self.old_index,\n+            \"new_index\": self.new_index,\n+        }\n+        return (\n+            self.__class__.__qualname__,\n+            [],\n+            kwargs,\n+        )\n+\n+    def describe(self):\n+        return \"Alter index %s on model %s\" % (\n+            self.new_index.name,\n+            self.model_name,\n+        )\n+\n+    @property\n+    def migration_name_fragment(self):\n+        return \"alter_%s_%s\" % (self.model_name_lower, self.new_index.name.lower())\n+\n+\n class RemoveIndex(IndexOperation):\n     \"\"\"Remove an index from a model.\"\"\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..7e2d165 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -500,8 +500,17 @@ class MigrationAutodetector:\n             added_indexes = [idx for idx in new_indexes if idx not in old_indexes]\n             removed_indexes = [idx for idx in old_indexes if idx not in new_indexes]\n             renamed_indexes = []\n+            altered_indexes = []\n             remove_from_added = []\n             remove_from_removed = []\n+            for old_index in old_indexes:\n+                for new_index in new_indexes:\n+                    if old_index.name == new_index.name and old_index != new_index:\n+                        altered_indexes.append((old_index, new_index))\n+                        if new_index in added_indexes:\n+                            remove_from_added.append(new_index)\n+                        if old_index in removed_indexes:\n+                            remove_from_removed.append(old_index)\n             for new_index in added_indexes:\n                 new_index_dec = new_index.deconstruct()\n                 new_index_name = new_index_dec[2].pop('name')\n@@ -529,7 +538,7 @@ class MigrationAutodetector:\n                         self.renamed_index_together_values[index_together_app_label, index_together_model_name].append(removed_index_together)\n             added_indexes = [idx for idx in added_indexes if idx not in remove_from_added]\n             removed_indexes = [idx for idx in removed_indexes if idx not in remove_from_removed]\n-            self.altered_indexes.update({(app_label, model_name): {'added_indexes': added_indexes, 'removed_indexes': removed_indexes, 'renamed_indexes': renamed_indexes}})\n+            self.altered_indexes.update({(app_label, model_name): {'added_indexes': added_indexes, 'removed_indexes': removed_indexes, 'renamed_indexes': renamed_indexes, 'altered_indexes': altered_indexes}})\n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             dependencies = self._get_dependencies_for_model(app_label, model_name)\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+class AlterIndex(IndexOperation):\n+    def __init__(self, model_name, old_index, new_index):\n+        self.model_name = model_name\n+        self.old_index = old_index\n+        self.new_index = new_index\n+        if old_index.name != new_index.name:\n+            raise ValueError('AlterIndex operations require the old and new indexes to have the same name. %r and %r have different names.' % (old_index, new_index))\n+    def state_forwards(self, app_label, state):\n+        state.remove_index(app_label, self.model_name_lower, self.old_index)\n+        state.add_index(app_label, self.model_name_lower, self.new_index)\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        model = to_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.remove_index(model, self.old_index)\n+            schema_editor.add_index(model, self.new_index)\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.remove_index(model, self.new_index)\n+            schema_editor.add_index(model, self.old_index)\n+    def deconstruct(self):\n+        kwargs = {'model_name': self.model_name, 'old_index': self.old_index, 'new_index': self.new_index}\n+        return (self.__class__.__qualname__, [], kwargs)\n+    def describe(self):\n+        return 'Alter index %s on model %s' % (self.new_index.name, self.model_name)\n+    @property\n+    def migration_name_fragment(self):\n+        return 'alter_%s_%s' % (self.model_name_lower, self.new_index.name.lower())", "normalized_occurrence": 1}
