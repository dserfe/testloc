{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..ac04c0d 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3043,9 +3043,6 @@ class Figure(FigureBase):\n \n         self.__dict__ = state\n \n-        # re-initialise some of the unstored state information\n-        FigureCanvasBase(self)  # Set self.canvas.\n-\n         if restore_to_pylab:\n             # lazy import to avoid circularity\n             import matplotlib.pyplot as plt\n@@ -3055,6 +3052,10 @@ class Figure(FigureBase):\n             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n+        else:\n+            # Still need to attach a canvas\n+            import matplotlib.pyplot as plt\n+            canvas = plt._backend_mod.FigureCanvas(self)\n \n         self.stale = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..a4e55fe 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -961,7 +961,6 @@ class Figure(FigureBase):\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n-        FigureCanvasBase(self)\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n             import matplotlib._pylab_helpers as pylab_helpers\n@@ -970,6 +969,9 @@ class Figure(FigureBase):\n             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n+        else:\n+            import matplotlib.pyplot as plt\n+            canvas = plt._backend_mod.FigureCanvas(self)\n         self.stale = True\n     def add_axobserver(self, func):\n         self._axobservers.connect('_axes_change_event', lambda arg: func(arg))\n", "normalized_occurrence": 1}
