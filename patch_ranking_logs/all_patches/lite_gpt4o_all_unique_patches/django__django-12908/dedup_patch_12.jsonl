{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..2859e7f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -470,12 +470,17 @@ class SQLCompiler:\n                 raise\n         if not parts:\n             raise EmptyResultSet\n-        combinator_sql = self.connection.ops.set_operators[combinator]\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            combinator_sql = 'SELECT DISTINCT ON ({})'.format(', '.join(distinct_fields))\n+            combinator_sql += ' {} {}'.format(self.connection.ops.set_operators[combinator], 'ALL' if all and combinator == 'union' else '')\n+        else:\n+            combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = ['{} {}'.format(combinator_sql, ' '.join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..c13a2d1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -262,12 +262,17 @@ class SQLCompiler:\n                 raise\n         if not parts:\n             raise EmptyResultSet\n-        combinator_sql = self.connection.ops.set_operators[combinator]\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            combinator_sql = 'SELECT DISTINCT ON ({})'.format(', '.join(distinct_fields))\n+            combinator_sql += ' {} {}'.format(self.connection.ops.set_operators[combinator], 'ALL' if all and combinator == 'union' else '')\n+        else:\n+            combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = ['{} {}'.format(combinator_sql, ' '.join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "normalized_occurrence": 1}
