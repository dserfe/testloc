{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..3b872d7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2485,6 +2485,9 @@ class AutoFieldMixin:\n         if not prepared:\n             value = self.get_prep_value(value)\n             value = connection.ops.validate_autopk_value(value)\n+        # Ensure the value gets converted when coming back from the database\n+        if hasattr(self, 'from_db_value'):\n+            value = self.from_db_value(value, None, connection)\n         return value\n \n     def contribute_to_class(self, cls, name, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..c83e335 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1299,6 +1299,8 @@ class AutoFieldMixin:\n         if not prepared:\n             value = self.get_prep_value(value)\n             value = connection.ops.validate_autopk_value(value)\n+        if hasattr(self, 'from_db_value'):\n+            value = self.from_db_value(value, None, connection)\n         return value\n     def contribute_to_class(self, cls, name, **kwargs):\n         assert not cls._meta.auto_field, \"Model %s can't have more than one auto-generated field.\" % cls._meta.label\n", "normalized_occurrence": 1}
