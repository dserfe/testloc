{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..1737b83 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -191,9 +191,25 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n \n-        # Collect the parent links for multi-table inheritance.\n+        # Collect the parent links for multi-table inheritance,\n+        # and ensure parent_link fields are processed first.\n         parent_links = {}\n+        # Separate parent links and other fields for processing.\n+        parent_link_fields = [field for field in new_class._meta.local_fields if isinstance(field, OneToOneField) and field.parent_link]\n+        other_fields = [field for field in new_class._meta.local_fields if not (isinstance(field, OneToOneField) and field.parent_link)]\n+\n         for base in reversed([new_class] + parents):\n+            # Process parent_link fields first\n+            for field in parent_link_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n+\n+            # Then process other fields\n+            for field in other_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n             # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n                 continue\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..0d70bd5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -99,7 +99,17 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n         parent_links = {}\n+        parent_link_fields = [field for field in new_class._meta.local_fields if isinstance(field, OneToOneField) and field.parent_link]\n+        other_fields = [field for field in new_class._meta.local_fields if not (isinstance(field, OneToOneField) and field.parent_link)]\n         for base in reversed([new_class] + parents):\n+            for field in parent_link_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n+            for field in other_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n             if not hasattr(base, '_meta'):\n                 continue\n             if base != new_class and (not base._meta.abstract):\n", "normalized_occurrence": 1}
