{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..4351319 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,6 +355,11 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        # Ensure callable defaults are evaluated properly.\n+        for field_name, field in self.fields.items():\n+            initial_value = self.get_initial_for_field(field, field_name)\n+            if callable(initial_value):\n+                object_data[field_name] = initial_value\n         # if initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..9bef12d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,10 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        for field_name, field in self.fields.items():\n+            initial_value = self.get_initial_for_field(field, field_name)\n+            if callable(initial_value):\n+                object_data[field_name] = initial_value\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
