{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..cd57f87 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -606,6 +606,24 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            # Check if any field in unique_together already has unique=True\n+            old_together = getattr(old_model._meta, self.option_name, set())\n+            new_together = getattr(new_model._meta, self.option_name, set())\n+            \n+            # For fields being removed from unique_together\n+            for constraint in old_together - new_together:\n+                if len(constraint) == 1:\n+                    field = new_model._meta.get_field(constraint[0])\n+                    if field.unique or field.primary_key:\n+                        # Skip creating/removing unique_together for already unique fields\n+                        continue\n+            \n+            schema_editor.alter_unique_together(new_model, old_together, new_together)\n+\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_together = getattr(old_model._meta, self.option_name, set())\n+            new_together = getattr(new_model._meta, self.option_name, set())\n+            for constraint in old_together - new_together:\n+                if len(constraint) == 1:\n+                    field = new_model._meta.get_field(constraint[0])\n+                    if field.unique or field.primary_key:\n+                        continue\n+            schema_editor.alter_unique_together(new_model, old_together, new_together)", "normalized_occurrence": 1}
