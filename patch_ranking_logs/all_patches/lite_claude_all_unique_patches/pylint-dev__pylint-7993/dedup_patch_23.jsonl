{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7993", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 6c414e0..970972d 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,14 +175,19 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n-        for argument in arguments:\n-            if argument[0] not in MESSAGE_FIELDS:\n+        # Look for message fields between braces, ignoring doubled braces\n+        arguments = []\n+        for match in re.finditer(r\"(?<!{){([^{}]+?)(?::.*?)?}\", template):\n+            if not (match.start() > 0 and template[match.start()-1] == \"{\"):\n+                arguments.append((match.group(1), match.group()))\n+                \n+        for argument, full_match in arguments:\n+            if argument not in MESSAGE_FIELDS:\n                 warnings.warn(\n-                    f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n+                    f\"Don't recognize the argument '{argument}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n+                template = template.replace(full_match, \"\")\n         self._fixed_template = template\n \n     def write_message(self, msg: Message) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 3d6bc44..b4cdff4 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -66,11 +66,14 @@ class TextReporter(BaseReporter):\n         if template == self._template:\n             return\n         self._template = template\n-        arguments = re.findall('\\\\{(.+?)(:.*)?\\\\}', template)\n-        for argument in arguments:\n-            if argument[0] not in MESSAGE_FIELDS:\n-                warnings.warn(f\"Don't recognize the argument '{argument[0]}' in the --msg-template. Are you sure it is supported on the current version of pylint?\")\n-                template = re.sub('\\\\{' + argument[0] + '(:.*?)?\\\\}', '', template)\n+        arguments = []\n+        for match in re.finditer('(?<!{){([^{}]+?)(?::.*?)?}', template):\n+            if not (match.start() > 0 and template[match.start() - 1] == '{'):\n+                arguments.append((match.group(1), match.group()))\n+        for argument, full_match in arguments:\n+            if argument not in MESSAGE_FIELDS:\n+                warnings.warn(f\"Don't recognize the argument '{argument}' in the --msg-template. Are you sure it is supported on the current version of pylint?\")\n+                template = template.replace(full_match, '')\n         self._fixed_template = template\n     def write_message(self, msg: Message) -> None:\n         self_dict = asdict(msg)\n", "normalized_occurrence": 1}
