{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..6ed0d94 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,70 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self._default_call_handling_35(call)\n+                \n+            iter_arg = call.args[0]\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Extract the iterator and the condition from the comprehension\n+                elt = iter_arg.elt\n+                generators = iter_arg.generators\n+                \n+                # Create a for loop that checks each element\n+                target = generators[0].target\n+                iter_expr = generators[0].iter\n+                \n+                # Create the loop body with the condition\n+                if call.func.id == 'all':\n+                    test = elt\n+                else:  # any()\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                    \n+                loop_body = [ast.Assert(test=test, msg=None)]\n+                \n+                # Build the complete for loop\n+                new_node = ast.For(\n+                    target=target,\n+                    iter=iter_expr,\n+                    body=loop_body,\n+                    orelse=[]\n+                )\n+                \n+                return new_node, \"unrolled %s() call\" % call.func.id\n+            \n+        return self._default_call_handling_35(call)\n+        \n+    def _default_call_handling_35(self, call):\n+        \"\"\"Default handling for function calls in Python 3.5+\"\"\"\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n+        \"\"\"\n+        visit `ast.Call` nodes on Python3.5 and after\n+        \"\"\"\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1002,6 +1066,73 @@ warn_explicit(\n         visit `ast.Call nodes on 3.4 and below`\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self._default_call_handling_legacy(call)\n+                \n+            iter_arg = call.args[0]\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Extract the iterator and the condition from the comprehension\n+                elt = iter_arg.elt\n+                generators = iter_arg.generators\n+                \n+                # Create a for loop that checks each element\n+                target = generators[0].target\n+                iter_expr = generators[0].iter\n+                \n+                # Create the loop body with the condition\n+                if call.func.id == 'all':\n+                    test = elt\n+                else:  # any()\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                    \n+                loop_body = [ast.Assert(test=test, msg=None)]\n+                \n+                # Build the complete for loop\n+                new_node = ast.For(\n+                    target=target,\n+                    iter=iter_expr,\n+                    body=loop_body,\n+                    orelse=[]\n+                )\n+                \n+                return new_node, \"unrolled %s() call\" % call.func.id\n+            \n+        return self._default_call_handling_legacy(call)\n+        \n+    def _default_call_handling_legacy(self, call):\n+        \"\"\"Default handling for function calls in Python 3.4 and below\"\"\"\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        new_star = new_kwarg = None\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            new_args.append(res)\n+            arg_expls.append(expl)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            arg_expls.append(keyword.arg + \"=\" + expl)\n+        if call.starargs:\n+            new_star, expl = self.visit(call.starargs)\n+            arg_expls.append(\"*\" + expl)\n+        if call.kwargs:\n+            new_kwarg, expl = self.visit(call.kwargs)\n+            arg_expls.append(\"**\" + expl)\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n+        \"\"\"\n+        visit `ast.Call nodes on 3.4 and below`\n+        \"\"\"\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..b13b5f6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,46 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self._default_call_handling_35(call)\n+            iter_arg = call.args[0]\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                elt = iter_arg.elt\n+                generators = iter_arg.generators\n+                target = generators[0].target\n+                iter_expr = generators[0].iter\n+                if call.func.id == 'all':\n+                    test = elt\n+                else:\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                loop_body = [ast.Assert(test=test, msg=None)]\n+                new_node = ast.For(target=target, iter=iter_expr, body=loop_body, orelse=[])\n+                return (new_node, 'unrolled %s() call' % call.func.id)\n+        return self._default_call_handling_35(call)\n+    def _default_call_handling_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -570,6 +610,50 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_starred = ast.Starred(res, starred.ctx)\n         return (new_starred, '*' + expl)\n     def visit_Call_legacy(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self._default_call_handling_legacy(call)\n+            iter_arg = call.args[0]\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                elt = iter_arg.elt\n+                generators = iter_arg.generators\n+                target = generators[0].target\n+                iter_expr = generators[0].iter\n+                if call.func.id == 'all':\n+                    test = elt\n+                else:\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                loop_body = [ast.Assert(test=test, msg=None)]\n+                new_node = ast.For(target=target, iter=iter_expr, body=loop_body, orelse=[])\n+                return (new_node, 'unrolled %s() call' % call.func.id)\n+        return self._default_call_handling_legacy(call)\n+    def _default_call_handling_legacy(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        new_star = new_kwarg = None\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            new_args.append(res)\n+            arg_expls.append(expl)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            arg_expls.append(keyword.arg + '=' + expl)\n+        if call.starargs:\n+            new_star, expl = self.visit(call.starargs)\n+            arg_expls.append('*' + expl)\n+        if call.kwargs:\n+            new_kwarg, expl = self.visit(call.kwargs)\n+            arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
