{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..35c1bfa 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -257,14 +257,16 @@ class ModelFormOptions:\n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n+        # Get formfield_callback from class attributes or base classes\n         base_formfield_callback = None\n         for b in bases:\n             if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n \n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n-\n+        # First check if there's a formfield_callback in class attributes\n+        formfield_callback = attrs.pop(\"formfield_callback\", None)\n+        \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n         if bases == (BaseModelForm,):\n@@ -630,13 +632,18 @@ def modelform_factory(\n     # creating needs to inherit from the parent's inner meta.\n     bases = (form.Meta,) if hasattr(form, \"Meta\") else ()\n     Meta = type(\"Meta\", bases, attrs)\n-    if formfield_callback:\n+    \n+    # Only set formfield_callback if explicitly provided\n+    if formfield_callback is not None:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n+    \n     # Give this new form class a reasonable name.\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n+    if formfield_callback is not None:\n+        form_class_attrs[\"formfield_callback\"] = formfield_callback\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..55c9b11 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -114,7 +114,7 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        formfield_callback = attrs.pop('formfield_callback', None)\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n@@ -264,10 +264,12 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n         attrs['field_classes'] = field_classes\n     bases = (form.Meta,) if hasattr(form, 'Meta') else ()\n     Meta = type('Meta', bases, attrs)\n-    if formfield_callback:\n+    if formfield_callback is not None:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     class_name = model.__name__ + 'Form'\n-    form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}\n+    form_class_attrs = {'Meta': Meta}\n+    if formfield_callback is not None:\n+        form_class_attrs['formfield_callback'] = formfield_callback\n     if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:\n         raise ImproperlyConfigured(\"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     return type(form)(class_name, (form,), form_class_attrs)\n", "normalized_occurrence": 1}
