{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 400ae0b..8885cfc 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -621,6 +621,12 @@ class TerminalReporter(object):\n                     rep.toterminal(self._tw)\n \n     def _printcollecteditems(self, items):\n+        from _pytest.fixtures import scopes\n+\n+        def get_fixture_scope(fixturedef):\n+            if fixturedef.scope in scopes:\n+                return scopes[fixturedef.scope]\n+            return \"unknown\"\n         # to print out items and their parent collectors\n         # we take care to leave out Instances aka ()\n         # because later versions are going to get rid of them anyway\n@@ -650,11 +656,22 @@ class TerminalReporter(object):\n                     continue\n                 indent = (len(stack) - 1) * \"  \"\n                 self._tw.line(\"%s%s\" % (indent, col))\n+\n+                # Print fixture scope if available\n+                if hasattr(col, \"fixturenames\"):\n+                    for fixturename in col.fixturenames:\n+                        fixturedefs = self.session._fixturemanager.getfixturedefs(fixturename, col.nodeid)\n+                        self._tw.line(\"%s  %s %s\" % (indent, fixturename, self._print_fixture_scope(fixturedefs)))\n                 if self.config.option.verbose >= 1:\n                     if hasattr(col, \"_obj\") and col._obj.__doc__:\n                         for line in col._obj.__doc__.strip().splitlines():\n                             self._tw.line(\"%s%s\" % (indent + \"  \", line.strip()))\n \n+    def _print_fixture_scope(self, fixturedefs):\n+        if not fixturedefs:\n+            return \"\"\n+        return \"[scope: %s]\" % get_fixture_scope(fixturedefs[-1])\n+\n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n         outcome = yield\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 17fce8c..2795d2a 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -397,6 +397,11 @@ class TerminalReporter(object):\n                 for rep in self.stats.get('failed'):\n                     rep.toterminal(self._tw)\n     def _printcollecteditems(self, items):\n+        from _pytest.fixtures import scopes\n+        def get_fixture_scope(fixturedef):\n+            if fixturedef.scope in scopes:\n+                return scopes[fixturedef.scope]\n+            return 'unknown'\n         if self.config.option.verbose < 0:\n             if self.config.option.verbose < -1:\n                 counts = {}\n@@ -423,10 +428,18 @@ class TerminalReporter(object):\n                     continue\n                 indent = (len(stack) - 1) * '  '\n                 self._tw.line('%s%s' % (indent, col))\n+                if hasattr(col, 'fixturenames'):\n+                    for fixturename in col.fixturenames:\n+                        fixturedefs = self.session._fixturemanager.getfixturedefs(fixturename, col.nodeid)\n+                        self._tw.line('%s  %s %s' % (indent, fixturename, self._print_fixture_scope(fixturedefs)))\n                 if self.config.option.verbose >= 1:\n                     if hasattr(col, '_obj') and col._obj.__doc__:\n                         for line in col._obj.__doc__.strip().splitlines():\n                             self._tw.line('%s%s' % (indent + '  ', line.strip()))\n+    def _print_fixture_scope(self, fixturedefs):\n+        if not fixturedefs:\n+            return ''\n+        return '[scope: %s]' % get_fixture_scope(fixturedefs[-1])\n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n         outcome = (yield)\n", "normalized_occurrence": 1}
