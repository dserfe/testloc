{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..c597450 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2397,6 +2397,14 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n         elif (not isinstance(parent, ModuleDocumenter) and\n               not inspect.isroutine(member) and\n               not isinstance(member, type)):\n+            # Check if membername exists in parent class annotations\n+            if hasattr(parent, '__annotations__'):\n+                return True\n+            # Check parent class MRO for annotations\n+            if inspect.isclass(parent):\n+                for base in parent.__mro__[1:]:  # Skip the class itself\n+                    if hasattr(base, '__annotations__') and membername in base.__annotations__:\n+                        return True\n             return True\n         else:\n             return False\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..8c8b819 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1396,6 +1396,12 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin, TypeVarMi\n         if inspect.isattributedescriptor(member):\n             return True\n         elif not isinstance(parent, ModuleDocumenter) and (not inspect.isroutine(member)) and (not isinstance(member, type)):\n+            if hasattr(parent, '__annotations__'):\n+                return True\n+            if inspect.isclass(parent):\n+                for base in parent.__mro__[1:]:\n+                    if hasattr(base, '__annotations__') and membername in base.__annotations__:\n+                        return True\n             return True\n         else:\n             return False\n", "normalized_occurrence": 1}
