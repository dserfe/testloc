{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex d374ce0..58196cd 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -111,6 +111,8 @@ def contingency_matrix(labels_true, labels_pred, eps=None, sparse=False):\n     if eps is not None and sparse:\n         raise ValueError(\"Cannot set 'eps' when sparse=True\")\n \n+    labels_true = np.asarray(labels_true, dtype=np.str)\n+    labels_pred = np.asarray(labels_pred, dtype=np.str)\n     classes, class_idx = np.unique(labels_true, return_inverse=True)\n     clusters, cluster_idx = np.unique(labels_pred, return_inverse=True)\n     n_classes = classes.shape[0]\n@@ -617,7 +619,7 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n     \"\"\"\n     if contingency is None:\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n-        contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n+        contingency = contingency_matrix(labels_true, labels_pred, sparse=False)\n     else:\n         contingency = check_array(contingency,\n                                   accept_sparse=['csr', 'csc', 'coo'],\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 150db21..5694590 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -29,6 +29,8 @@ def _generalized_average(U, V, average_method):\n def contingency_matrix(labels_true, labels_pred, eps=None, sparse=False):\n     if eps is not None and sparse:\n         raise ValueError(\"Cannot set 'eps' when sparse=True\")\n+    labels_true = np.asarray(labels_true, dtype=np.str)\n+    labels_pred = np.asarray(labels_pred, dtype=np.str)\n     classes, class_idx = np.unique(labels_true, return_inverse=True)\n     clusters, cluster_idx = np.unique(labels_pred, return_inverse=True)\n     n_classes = classes.shape[0]\n@@ -80,7 +82,7 @@ def v_measure_score(labels_true, labels_pred, beta=1.0):\n def mutual_info_score(labels_true, labels_pred, contingency=None):\n     if contingency is None:\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n-        contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n+        contingency = contingency_matrix(labels_true, labels_pred, sparse=False)\n     else:\n         contingency = check_array(contingency, accept_sparse=['csr', 'csc', 'coo'], dtype=[int, np.int32, np.int64])\n     if isinstance(contingency, np.ndarray):\n", "normalized_occurrence": 1}
