{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..83036d7 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -564,11 +564,11 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n+        Respects ignore patterns specified in configuration.\n         \"\"\"\n         for something in files_or_modules:\n             if os.path.isdir(something) and not os.path.isfile(\n", "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..e02c47a 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -220,8 +220,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n         for msg in self.msgs_store.messages:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n             if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n                 skip_subtrees: list[str] = []\n", "normalized_occurrence": 1}
