{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..1bc1078 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -988,8 +988,38 @@ warn_explicit(\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            if call.func.id == \"all\":\n+                op = ast.And()\n+            else:\n+                op = ast.Or()\n+            \n+            elements = []\n+            for arg in call.args:\n+                if isinstance(arg, ast.GeneratorExp):\n+                    elements.extend(arg.elt for _ in range(len(arg.generators)))\n+                elif isinstance(arg, (ast.ListComp, ast.SetComp)):\n+                    elements.extend(arg.elt for _ in range(len(arg.generators)))\n+                else:\n+                    elements.append(arg)\n+            \n+            result_exprs = []\n+            explanations = []\n+            for elem in elements:\n+                res, expl = self.visit(elem)\n+                result_exprs.append(res)\n+                explanations.append(expl)\n+            \n+            boolop = ast.BoolOp(op, result_exprs)\n+            res = self.assign(boolop)\n+            expl = self.explanation_param(self.display(res))\n+            explanation = \"%s(%s)\" % (call.func.id, \", \".join(explanations))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (expl, expl, explanation)\n+            return res, outer_expl\n+        else:\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1024,8 +1054,38 @@ warn_explicit(\n         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            if call.func.id == \"all\":\n+                op = ast.And()\n+            else:\n+                op = ast.Or()\n+            \n+            elements = []\n+            for arg in call.args:\n+                if isinstance(arg, ast.GeneratorExp):\n+                    elements.extend(arg.elt for _ in range(len(arg.generators)))\n+                elif isinstance(arg, (ast.ListComp, ast.SetComp)):\n+                    elements.extend(arg.elt for _ in range(len(arg.generators)))\n+                else:\n+                    elements.append(arg)\n+            \n+            result_exprs = []\n+            explanations = []\n+            for elem in elements:\n+                res, expl = self.visit(elem)\n+                result_exprs.append(res)\n+                explanations.append(expl)\n+            \n+            boolop = ast.BoolOp(op, result_exprs)\n+            res = self.assign(boolop)\n+            expl = self.explanation_param(self.display(res))\n+            explanation = \"%s(%s)\" % (call.func.id, \", \".join(explanations))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (expl, expl, explanation)\n+            return res, outer_expl\n+        else:\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     # ast.Call signature changed on 3.5,\n     # conditionally change  which methods is named\n@@ -1081,4 +1141,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..e051d49 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -563,8 +563,35 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            if call.func.id == 'all':\n+                op = ast.And()\n+            else:\n+                op = ast.Or()\n+            elements = []\n+            for arg in call.args:\n+                if isinstance(arg, ast.GeneratorExp):\n+                    elements.extend((arg.elt for _ in range(len(arg.generators))))\n+                elif isinstance(arg, (ast.ListComp, ast.SetComp)):\n+                    elements.extend((arg.elt for _ in range(len(arg.generators))))\n+                else:\n+                    elements.append(arg)\n+            result_exprs = []\n+            explanations = []\n+            for elem in elements:\n+                res, expl = self.visit(elem)\n+                result_exprs.append(res)\n+                explanations.append(expl)\n+            boolop = ast.BoolOp(op, result_exprs)\n+            res = self.assign(boolop)\n+            expl = self.explanation_param(self.display(res))\n+            explanation = '%s(%s)' % (call.func.id, ', '.join(explanations))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (expl, expl, explanation)\n+            return (res, outer_expl)\n+        else:\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n@@ -593,8 +620,35 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            if call.func.id == 'all':\n+                op = ast.And()\n+            else:\n+                op = ast.Or()\n+            elements = []\n+            for arg in call.args:\n+                if isinstance(arg, ast.GeneratorExp):\n+                    elements.extend((arg.elt for _ in range(len(arg.generators))))\n+                elif isinstance(arg, (ast.ListComp, ast.SetComp)):\n+                    elements.extend((arg.elt for _ in range(len(arg.generators))))\n+                else:\n+                    elements.append(arg)\n+            result_exprs = []\n+            explanations = []\n+            for elem in elements:\n+                res, expl = self.visit(elem)\n+                result_exprs.append(res)\n+                explanations.append(expl)\n+            boolop = ast.BoolOp(op, result_exprs)\n+            res = self.assign(boolop)\n+            expl = self.explanation_param(self.display(res))\n+            explanation = '%s(%s)' % (call.func.id, ', '.join(explanations))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (expl, expl, explanation)\n+            return (res, outer_expl)\n+        else:\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     if sys.version_info >= (3, 5):\n         visit_Call = visit_Call_35\n     else:\n", "normalized_occurrence": 1}
