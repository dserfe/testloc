{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-26208", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex f9613d3..edbae75 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4016,7 +4016,13 @@ class _AxesBase(martist.Artist):\n         This helper function returns the new x and y bounds from the zoom\n         bbox. This a convenience method to abstract the bbox logic\n         out of the base setter.\n+\n+        For twinned axes, preserves the original data limits of each axis\n+        to prevent infinite bounds propagation.\n         \"\"\"\n+        # Store original bounds if this is a twinned axis\n+        orig_xbound = self.get_xbound() if twinx else None\n+        orig_ybound = self.get_ybound() if twiny else None\n         if len(bbox) == 3:\n             xp, yp, scl = bbox  # Zooming code\n             if scl == 0:  # Should not happen\n@@ -4057,10 +4063,11 @@ class _AxesBase(martist.Artist):\n         xmin, xmax = np.clip(sorted([startx, stopx]), xmin0, xmax0)\n         ymin, ymax = np.clip(sorted([starty, stopy]), ymin0, ymax0)\n         # Don't double-zoom twinned axes or if zooming only the other axis.\n+        # Use stored original bounds for twinned axes to prevent inf propagation\n         if twinx or mode == \"y\":\n-            xmin, xmax = xmin0, xmax0\n+            xmin, xmax = orig_xbound if orig_xbound is not None else (xmin0, xmax0)\n         if twiny or mode == \"x\":\n-            ymin, ymax = ymin0, ymax0\n+            ymin, ymax = orig_ybound if orig_ybound is not None else (ymin0, ymax0)\n \n         if direction == \"in\":\n             new_xbound = xmin, xmax\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eb9da84..76a3c0e 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1515,6 +1515,8 @@ class _AxesBase(martist.Artist):\n     def _set_view(self, view):\n         self.set(**view)\n     def _prepare_view_from_bbox(self, bbox, direction='in', mode=None, twinx=False, twiny=False):\n+        orig_xbound = self.get_xbound() if twinx else None\n+        orig_ybound = self.get_ybound() if twiny else None\n         if len(bbox) == 3:\n             xp, yp, scl = bbox\n             if scl == 0:\n@@ -1542,9 +1544,9 @@ class _AxesBase(martist.Artist):\n         xmin, xmax = np.clip(sorted([startx, stopx]), xmin0, xmax0)\n         ymin, ymax = np.clip(sorted([starty, stopy]), ymin0, ymax0)\n         if twinx or mode == 'y':\n-            xmin, xmax = (xmin0, xmax0)\n+            xmin, xmax = orig_xbound if orig_xbound is not None else (xmin0, xmax0)\n         if twiny or mode == 'x':\n-            ymin, ymax = (ymin0, ymax0)\n+            ymin, ymax = orig_ybound if orig_ybound is not None else (ymin0, ymax0)\n         if direction == 'in':\n             new_xbound = (xmin, xmax)\n             new_ybound = (ymin, ymax)\n", "normalized_occurrence": 1}
