{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..1f4c6b4 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -774,6 +774,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     \"\"\"\n     from sympy.matrices import (MatrixBase, Matrix, ImmutableMatrix,\n                                 SparseMatrix, ImmutableSparseMatrix)\n+    from sympy.matrices.expressions.matexpr import MatrixSymbol, matrix_symbols\n \n     if not list:\n         return _cse_homogeneous(exprs,\n@@ -807,6 +808,14 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     # Preprocess the expressions to give us better optimization opportunities.\n     reduced_exprs = [preprocess_for_cse(e, optimizations) for e in exprs]\n \n+    # Skip creating substitutions for entire MatrixSymbols when only elements are used\n+    def filter_matrix_substitutions(subs):\n+        # Keep substitutions that aren't just direct assignments of MatrixSymbols\n+        return [(sym, expr) for sym, expr in subs if not (\n+            isinstance(expr, MatrixSymbol) or\n+            (isinstance(expr, Symbol) and any(\n+                expr == m for m in matrix_symbols(exprs))))]\n+\n     if symbols is None:\n         symbols = numbered_symbols(cls=Symbol)\n     else:\n@@ -820,6 +829,9 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     # Main CSE algorithm.\n     replacements, reduced_exprs = tree_cse(reduced_exprs, symbols, opt_subs,\n                                            order, ignore)\n+    \n+    # Filter out unnecessary matrix symbol substitutions\n+    replacements = filter_matrix_substitutions(replacements)\n \n     # Postprocess the expressions to return the expressions to canonical form.\n     exprs = copy\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..0ad2d2d 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -304,6 +304,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n     return (replacements, reduced_exprs)\n def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canonical', ignore=(), list=True):\n     from sympy.matrices import MatrixBase, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix\n+    from sympy.matrices.expressions.matexpr import MatrixSymbol, matrix_symbols\n     if not list:\n         return _cse_homogeneous(exprs, symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order, ignore=ignore)\n     if isinstance(exprs, (int, float)):\n@@ -326,12 +327,15 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n     elif optimizations == 'basic':\n         optimizations = basic_optimizations\n     reduced_exprs = [preprocess_for_cse(e, optimizations) for e in exprs]\n+    def filter_matrix_substitutions(subs):\n+        return [(sym, expr) for sym, expr in subs if not (isinstance(expr, MatrixSymbol) or (isinstance(expr, Symbol) and any((expr == m for m in matrix_symbols(exprs)))))]\n     if symbols is None:\n         symbols = numbered_symbols(cls=Symbol)\n     else:\n         symbols = iter(symbols)\n     opt_subs = opt_cse(reduced_exprs, order)\n     replacements, reduced_exprs = tree_cse(reduced_exprs, symbols, opt_subs, order, ignore)\n+    replacements = filter_matrix_substitutions(replacements)\n     exprs = copy\n     for i, (sym, subtree) in enumerate(replacements):\n         subtree = postprocess_for_cse(subtree, optimizations)\n", "normalized_occurrence": 1}
