{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2148", "model_patch": "diff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 3c3e4e5..d2f5a97 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -35,6 +35,7 @@ class DeflateDecoder(object):\n             finally:\n                 self._data = None\n \n+import socket\n \n def _get_decoder(mode):\n     if mode == 'gzip':\n@@ -210,6 +211,9 @@ class HTTPResponse(io.IOBase):\n                 # This includes IncompleteRead.\n                 raise ProtocolError('Connection broken: %r' % e, e)\n \n+            except socket.error as e:\n+                raise ProtocolError('Connection broken: %r' % e, e)\n+\n             self._fp_bytes_read += len(data)\n \n             try:\n@@ -317,4 +321,4 @@ class HTTPResponse(io.IOBase):\n             return self._fp.flush()\n \n     def readable(self):\n-        return True\n+        return True\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 5140382..7c5e038 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -26,6 +26,7 @@ class DeflateDecoder(object):\n                 return self.decompress(self._data)\n             finally:\n                 self._data = None\n+import socket\n def _get_decoder(mode):\n     if mode == 'gzip':\n         return zlib.decompressobj(16 + zlib.MAX_WBITS)\n@@ -101,6 +102,8 @@ class HTTPResponse(io.IOBase):\n                 raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n             except HTTPException as e:\n                 raise ProtocolError('Connection broken: %r' % e, e)\n+            except socket.error as e:\n+                raise ProtocolError('Connection broken: %r' % e, e)\n             self._fp_bytes_read += len(data)\n             try:\n                 if decode_content and self._decoder:\n", "normalized_occurrence": 2}
