{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21847", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 9019221..40b3ac0 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -117,31 +117,19 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n             yield S.One\n             return\n         # Force to list in case of passed tuple or other incompatible collection\n-        variables = list(variables) + [S.One]\n-        if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n-        else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+        from sympy.core import Mul\n+        from sympy.utilities.iterables import multiset_partitions\n+\n+        def _monomial_key(monom):\n+            return sum(monom.values()), tuple(monom.get(v, 0) for v in variables)\n+\n+        def _generate_monomials():\n+            for total_degree in range(min_degree, max_degree + 1):\n+                for partition in multiset_partitions(total_degree, len(variables)):\n+                    monom = {var: exp for var, exp in zip(variables, partition)}\n+                    yield Mul(*(var**exp for var, exp in monom.items()))\n+\n+        yield from sorted(_generate_monomials(), key=_monomial_key)\n     else:\n         if any(min_degrees[i] > max_degrees[i] for i in range(n)):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 7c8de23..4de72ef 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -39,31 +39,16 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         if not variables or max_degree == 0:\n             yield S.One\n             return\n-        variables = list(variables) + [S.One]\n-        if all((variable.is_commutative for variable in variables)):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n-        else:\n-            monomials_list_non_comm = []\n-            for item in product(variables, repeat=max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_non_comm.append(Mul(*item))\n-            yield from set(monomials_list_non_comm)\n+        from sympy.core import Mul\n+        from sympy.utilities.iterables import multiset_partitions\n+        def _monomial_key(monom):\n+            return (sum(monom.values()), tuple((monom.get(v, 0) for v in variables)))\n+        def _generate_monomials():\n+            for total_degree in range(min_degree, max_degree + 1):\n+                for partition in multiset_partitions(total_degree, len(variables)):\n+                    monom = {var: exp for var, exp in zip(variables, partition)}\n+                    yield Mul(*(var ** exp for var, exp in monom.items()))\n+        yield from sorted(_generate_monomials(), key=_monomial_key)\n     else:\n         if any((min_degrees[i] > max_degrees[i] for i in range(n))):\n             raise ValueError('min_degrees[i] must be <= max_degrees[i] for all i')\n", "normalized_occurrence": 1}
