{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..2577b7e 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -51,7 +51,14 @@ class Q(tree.Node):\n         elif not self:\n             return copy.deepcopy(other)\n \n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+\n         obj = type(self)()\n+        self.children = [(key, make_pickleable(value)) for key, value in self.children]\n+        other.children = [(key, make_pickleable(value)) for key, value in other.children]\n         obj.connector = conn\n         obj.add(self, conn)\n         obj.add(other, conn)\n@@ -64,7 +71,14 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __invert__(self):\n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+\n         obj = type(self)()\n+        self.children = [(key, make_pickleable(value)) for key, value in self.children]\n+        other.children = [(key, make_pickleable(value)) for key, value in other.children]\n         obj.add(self, self.AND)\n         obj.negate()\n         return obj\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..f520b8f 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -24,7 +24,13 @@ class Q(tree.Node):\n             return copy.deepcopy(self)\n         elif not self:\n             return copy.deepcopy(other)\n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n         obj = type(self)()\n+        self.children = [(key, make_pickleable(value)) for key, value in self.children]\n+        other.children = [(key, make_pickleable(value)) for key, value in other.children]\n         obj.connector = conn\n         obj.add(self, conn)\n         obj.add(other, conn)\n@@ -34,7 +40,13 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __invert__(self):\n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n         obj = type(self)()\n+        self.children = [(key, make_pickleable(value)) for key, value in self.children]\n+        other.children = [(key, make_pickleable(value)) for key, value in other.children]\n         obj.add(self, self.AND)\n         obj.negate()\n         return obj\n", "normalized_occurrence": 1}
