{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..223d2a5 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -267,6 +267,9 @@ class Pow(Expr):\n         elif b.is_polar:  # e.g. exp_polar, besselj, var('p', polar=True)...\n             s = 1\n         elif e.is_real is not None:\n+            if b.is_negative:\n+                if other.is_Rational and not other.is_Integer:\n+                    return None  # Cannot simplify negative base with fractional power\n             # helper functions ===========================\n             def _half(e):\n                 \"\"\"Return True if the exponent has a literal 2 as the\n@@ -1581,4 +1584,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..38461ed 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -131,6 +131,9 @@ class Pow(Expr):\n         elif b.is_polar:\n             s = 1\n         elif e.is_real is not None:\n+            if b.is_negative:\n+                if other.is_Rational and (not other.is_Integer):\n+                    return None\n             def _half(e):\n                 if getattr(e, 'q', None) == 2:\n                     return True\n", "normalized_occurrence": 1}
