{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..9380347 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -358,6 +358,10 @@ def type_of_target(y, input_name=\"\"):\n             _assert_all_finite(data, input_name=input_name)\n             return \"continuous\" + suffix\n \n+    # Handle nullable pandas dtypes\n+    if y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"]:\n+        y = y.astype(y.dtype.name.lower())\n+\n     # Check multiclass\n     first_row = y[0] if not issparse(y) else y.getrow(0).data\n     if xp.unique_values(y).shape[0] > 2 or (y.ndim == 2 and len(first_row) > 1):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..4f0c486 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -102,6 +102,8 @@ def type_of_target(y, input_name=''):\n         if xp.any(data != data.astype(int)):\n             _assert_all_finite(data, input_name=input_name)\n             return 'continuous' + suffix\n+    if y.dtype.name in ['Int64', 'Float64', 'boolean']:\n+        y = y.astype(y.dtype.name.lower())\n     first_row = y[0] if not issparse(y) else y.getrow(0).data\n     if xp.unique_values(y).shape[0] > 2 or (y.ndim == 2 and len(first_row) > 1):\n         return 'multiclass' + suffix\n", "normalized_occurrence": 1}
