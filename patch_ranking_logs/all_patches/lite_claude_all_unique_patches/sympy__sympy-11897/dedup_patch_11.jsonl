{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..5954ca9 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -461,9 +461,16 @@ class LatexPrinter(Printer):\n             if expr.base.is_Function:\n                 return self._print(expr.base, \"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n-        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n-            # Things like 1/x\n+        elif expr.exp == -1 and expr.base.is_commutative:\n+            # Only transform x**-1 into 1/x\n             return self._print_Mul(expr)\n+        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n+            # Keep other negative exponents as-is\n+            if expr.base.is_Function:\n+                return self._print(expr.base, self._print(expr.exp))\n+            else:\n+                base = self.parenthesize(expr.base, PRECEDENCE['Pow'])\n+                return r\"%s^{%s}\" % (base, self._print(expr.exp))\n         else:\n             if expr.base.is_Function:\n                 return self._print(expr.base, self._print(expr.exp))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..4c3324d 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -242,8 +242,14 @@ class LatexPrinter(Printer):\n             if expr.base.is_Function:\n                 return self._print(expr.base, '%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n-        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n+        elif expr.exp == -1 and expr.base.is_commutative:\n             return self._print_Mul(expr)\n+        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n+            if expr.base.is_Function:\n+                return self._print(expr.base, self._print(expr.exp))\n+            else:\n+                base = self.parenthesize(expr.base, PRECEDENCE['Pow'])\n+                return '%s^{%s}' % (base, self._print(expr.exp))\n         elif expr.base.is_Function:\n             return self._print(expr.base, self._print(expr.exp))\n         else:\n", "normalized_occurrence": 1}
