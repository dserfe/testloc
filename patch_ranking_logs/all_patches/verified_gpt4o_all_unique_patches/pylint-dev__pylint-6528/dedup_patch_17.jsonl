{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..530df91 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -534,11 +534,10 @@ class PyLinter(\n     def should_analyze_file(modname: str, path: str, is_argument: bool = False) -> bool:\n         \"\"\"Returns whether a module should be checked.\n \n-        This implementation returns True for all python source file, indicating\n-        that all files should be linted.\n+        This implementation returns False for files matching the ignore patterns.\n \n-        Subclasses may override this method to indicate that modules satisfying\n-        certain conditions should not be linted.\n+        It checks against base names, paths, and additional provided conditions\n+        to determine if a file should be linted.\n \n         :param str modname: The name of the module to be checked.\n         :param str path: The full path to the source code of the module.\n@@ -558,11 +557,17 @@ class PyLinter(\n \n         This method is called before any linting is done.\n         \"\"\"\n-        # initialize msgs_state now that all messages have been registered into\n-        # the store\n-        for msg in self.msgs_store.messages:\n-            if not msg.may_be_emitted():\n-                self._msgs_state[msg.msgid] = False\n+        ignore_list = self.config.ignore\n+        ignore_list_re = self.config.ignore_patterns\n+        ignore_list_paths_re = self._ignore_paths\n+\n+        if (\n+            os.path.basename(path) in ignore_list\n+            or _is_in_ignore_list_re(os.path.basename(path), ignore_list_re)\n+            or _is_in_ignore_list_re(path, ignore_list_paths_re)\n+        ):\n+            return False\n+        return True\n \n     @staticmethod\n     def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..c0b833e 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -217,9 +217,12 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             return True\n         return path.endswith('.py')\n     def initialize(self) -> None:\n-        for msg in self.msgs_store.messages:\n-            if not msg.may_be_emitted():\n-                self._msgs_state[msg.msgid] = False\n+        ignore_list = self.config.ignore\n+        ignore_list_re = self.config.ignore_patterns\n+        ignore_list_paths_re = self._ignore_paths\n+        if os.path.basename(path) in ignore_list or _is_in_ignore_list_re(os.path.basename(path), ignore_list_re) or _is_in_ignore_list_re(path, ignore_list_paths_re):\n+            return False\n+        return True\n     @staticmethod\n     def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n", "normalized_occurrence": 1}
