{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..13309ce 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,20 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Clear annotations that aren't referenced in filters or ordering\n+        annotations = obj.annotation_select.copy()\n+        for alias in annotations:\n+            annotation = obj.annotations[alias]\n+            if not (\n+                annotation.refs_aggregate \n+                or obj.filter_is_sticky \n+                or obj.where.contains_aggregate\n+                or any(alias in ordering[1] for ordering in obj.order_by)\n+            ):\n+                obj.annotation_select.pop(alias, None)\n+                obj.annotations.pop(alias, None)\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..f11cd69 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,12 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        annotations = obj.annotation_select.copy()\n+        for alias in annotations:\n+            annotation = obj.annotations[alias]\n+            if not (annotation.refs_aggregate or obj.filter_is_sticky or obj.where.contains_aggregate or any((alias in ordering[1] for ordering in obj.order_by))):\n+                obj.annotation_select.pop(alias, None)\n+                obj.annotations.pop(alias, None)\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
