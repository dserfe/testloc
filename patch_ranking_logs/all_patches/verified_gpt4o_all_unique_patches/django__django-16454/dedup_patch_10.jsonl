{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..5db607f 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -57,6 +57,21 @@ class CommandParser(ArgumentParser):\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n \n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+\n+        def add_parser(name, **kwargs):\n+            if 'parser_class' not in kwargs:\n+                kwargs['parser_class'] = lambda **kwargs2: CommandParser(\n+                    missing_args_message=self.missing_args_message,\n+                    called_from_command_line=self.called_from_command_line,\n+                    **kwargs2\n+                )\n+            return subparsers.add_parser(name, **kwargs)\n+\n+        subparsers.add_parser = add_parser\n+        return subparsers\n+\n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n         if self.missing_args_message and not (\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        def add_parser(name, **kwargs):\n+            if 'parser_class' not in kwargs:\n+                kwargs['parser_class'] = lambda **kwargs2: CommandParser(missing_args_message=self.missing_args_message, called_from_command_line=self.called_from_command_line, **kwargs2)\n+            return subparsers.add_parser(name, **kwargs)\n+        subparsers.add_parser = add_parser\n+        return subparsers", "normalized_occurrence": 1}
