{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..1c43e09 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1521,6 +1521,17 @@ class PairGrid(Grid):\n         if func is histplot or func is kdeplot:\n             self._extract_legend_handles = True\n \n+        # Handle hue parameter passed directly in map call\n+        hue = kwargs.pop(\"hue\", None)\n+        if hue is not None:\n+            self._hue_var = \"_map_hue\"\n+            self.data[\"_map_hue\"] = hue\n+            self.hue_vals = self.data[\"_map_hue\"]\n+            self.hue_names = categorical_order(hue)\n+            self._hue_order = self.hue_names\n+            self._orig_palette = color_palette(n_colors=len(self.hue_names))\n+            self.palette = dict(zip(self.hue_names, self._orig_palette))\n+\n         kws = kwargs.copy()  # Use copy as we insert other kwargs\n         for i, j in indices:\n             x_var = self.x_vars[j]\n@@ -1529,8 +1540,13 @@ class PairGrid(Grid):\n             if ax is None:  # i.e. we are in corner mode\n                 continue\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n-        self._add_axis_labels()\n \n+        # Remove temporary hue variable from data\n+        if hue is not None:\n+            self.data = self.data.drop(columns=[\"_map_hue\"])\n+            self._hue_var = None\n+\n+        self._add_axis_labels()\n         if \"hue\" in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..01025ea 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -712,6 +712,15 @@ class PairGrid(Grid):\n         from .distributions import histplot, kdeplot\n         if func is histplot or func is kdeplot:\n             self._extract_legend_handles = True\n+        hue = kwargs.pop('hue', None)\n+        if hue is not None:\n+            self._hue_var = '_map_hue'\n+            self.data['_map_hue'] = hue\n+            self.hue_vals = self.data['_map_hue']\n+            self.hue_names = categorical_order(hue)\n+            self._hue_order = self.hue_names\n+            self._orig_palette = color_palette(n_colors=len(self.hue_names))\n+            self.palette = dict(zip(self.hue_names, self._orig_palette))\n         kws = kwargs.copy()\n         for i, j in indices:\n             x_var = self.x_vars[j]\n@@ -720,6 +729,9 @@ class PairGrid(Grid):\n             if ax is None:\n                 continue\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n+        if hue is not None:\n+            self.data = self.data.drop(columns=['_map_hue'])\n+            self._hue_var = None\n         self._add_axis_labels()\n         if 'hue' in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n", "normalized_occurrence": 1}
