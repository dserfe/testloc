{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..68e6070 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,15 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+def inherited_members_option(arg: Any) -> Union[str, Set[str]]:\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\n+    \n+    Returns 'object' to indicate all classes should be included, or\n+    a set of class names to include inheritance from.\n+    \"\"\"\n     if arg in (None, True):\n         return 'object'\n-    else:\n-        return arg\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -1710,7 +1713,14 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, list(members.values())\n+            if self.options.inherited_members == 'object':\n+                return False, list(members.values())\n+            else:\n+                # Filter members based on the specified base classes\n+                return False, [m for m in members.values()\n+                             if m.class_ == self.object or\n+                             (isinstance(m.class_, type) and\n+                              m.class_.__name__ in self.options.inherited_members)]\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..67a1528 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -55,11 +55,10 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return EMPTY\n     return {x.strip() for x in arg.split(',') if x.strip()}\n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[str, Set[str]]:\n     if arg in (None, True):\n         return 'object'\n-    else:\n-        return arg\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -980,7 +979,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+            if self.options.inherited_members == 'object':\n+                return (False, list(members.values()))\n+            else:\n+                return (False, [m for m in members.values() if m.class_ == self.object or (isinstance(m.class_, type) and m.class_.__name__ in self.options.inherited_members)])\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
