{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..1495458 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -108,11 +108,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if name == 'return':\n             continue\n \n+        # Split union types joined by '|'\n+        split_annotations = annotation.split(' | ')\n+        formatted_annotation = ' or '.join(split_annotations)\n+\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', formatted_annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -159,9 +163,13 @@ def augment_descriptions_with_types(\n         if name == 'return':\n             continue\n         if name in has_description and name not in has_type:\n+            # Split union types joined by '|'\n+            split_annotations = annotations[name].split(' | ')\n+            formatted_annotation = ' or '.join(split_annotations)\n+            \n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', formatted_annotation))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..2613069 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -76,11 +76,13 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        split_annotations = annotation.split(' | ')\n+        formatted_annotation = ' or '.join(split_annotations)\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_body('', nodes.paragraph('', formatted_annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -117,9 +119,11 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name == 'return':\n             continue\n         if name in has_description and name not in has_type:\n+            split_annotations = annotations[name].split(' | ')\n+            formatted_annotation = ' or '.join(split_annotations)\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', formatted_annotation))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n", "normalized_occurrence": 1}
