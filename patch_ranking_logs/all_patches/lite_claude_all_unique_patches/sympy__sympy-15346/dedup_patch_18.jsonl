{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..5e1543f 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -480,6 +480,25 @@ def trigsimp(expr, **opts):\n     except AttributeError:\n         pass\n \n+    # Special case for products of trig functions with rational arguments\n+    from sympy import expand_trig\n+    if isinstance(expr, Mul):\n+        args = expr.args\n+        trig_terms = [(i, arg) for i, arg in enumerate(args) \n+                     if isinstance(arg, (sin, cos)) and arg.args[0].is_Rational]\n+        if len(trig_terms) > 1:\n+            # Try to apply the cos(x-y) formula for rational arguments\n+            sin_terms = [(i, arg) for i, arg in trig_terms if isinstance(arg, sin)]\n+            cos_terms = [(i, arg) for i, arg in trig_terms if isinstance(arg, cos)]\n+            if len(sin_terms) == len(cos_terms) == 1:\n+                sin_arg = sin_terms[0][1].args[0]\n+                cos_arg = cos_terms[0][1].args[0]\n+                # Check if this matches sin(x)*sin(y) + cos(x)*cos(y) pattern\n+                remaining_terms = Mul(*[arg for i, arg in enumerate(args) \n+                                     if i not in (sin_terms[0][0], cos_terms[0][0])])\n+                if remaining_terms == 1:\n+                    return cos(sin_arg - cos_arg)\n+\n     old = opts.pop('old', False)\n     if not old:\n         opts.pop('deep', None)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..05d2e24 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -151,6 +151,19 @@ def trigsimp(expr, **opts):\n         return expr._eval_trigsimp(**opts)\n     except AttributeError:\n         pass\n+    from sympy import expand_trig\n+    if isinstance(expr, Mul):\n+        args = expr.args\n+        trig_terms = [(i, arg) for i, arg in enumerate(args) if isinstance(arg, (sin, cos)) and arg.args[0].is_Rational]\n+        if len(trig_terms) > 1:\n+            sin_terms = [(i, arg) for i, arg in trig_terms if isinstance(arg, sin)]\n+            cos_terms = [(i, arg) for i, arg in trig_terms if isinstance(arg, cos)]\n+            if len(sin_terms) == len(cos_terms) == 1:\n+                sin_arg = sin_terms[0][1].args[0]\n+                cos_arg = cos_terms[0][1].args[0]\n+                remaining_terms = Mul(*[arg for i, arg in enumerate(args) if i not in (sin_terms[0][0], cos_terms[0][0])])\n+                if remaining_terms == 1:\n+                    return cos(sin_arg - cos_arg)\n     old = opts.pop('old', False)\n     if not old:\n         opts.pop('deep', None)\n", "normalized_occurrence": 1}
