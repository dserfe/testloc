{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..c2825c5 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1546,10 +1546,9 @@ class PairGrid(Grid):\n         else:\n             plt.sca(ax)\n \n-        if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n+        axes_vars = [x_var, y_var]\n+        if self._hue_var is not None:\n+            axes_vars.append(self._hue_var)\n \n         if self._hue_var is not None and self._hue_var not in axes_vars:\n             axes_vars.append(self._hue_var)\n@@ -1581,10 +1580,9 @@ class PairGrid(Grid):\n         else:\n             plt.sca(ax)\n \n-        if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n+        axes_vars = [x_var, y_var]\n+        if self._hue_var is not None:\n+            axes_vars.append(self._hue_var)\n \n         hue_grouped = self.data.groupby(self.hue_vals)\n         for k, label_k in enumerate(self._hue_order):\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..8b96dc1 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -732,10 +732,9 @@ class PairGrid(Grid):\n             kwargs['ax'] = ax\n         else:\n             plt.sca(ax)\n-        if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n+        axes_vars = [x_var, y_var]\n+        if self._hue_var is not None:\n+            axes_vars.append(self._hue_var)\n         if self._hue_var is not None and self._hue_var not in axes_vars:\n             axes_vars.append(self._hue_var)\n         data = self.data[axes_vars]\n@@ -757,10 +756,9 @@ class PairGrid(Grid):\n             kwargs['ax'] = ax\n         else:\n             plt.sca(ax)\n-        if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n+        axes_vars = [x_var, y_var]\n+        if self._hue_var is not None:\n+            axes_vars.append(self._hue_var)\n         hue_grouped = self.data.groupby(self.hue_vals)\n         for k, label_k in enumerate(self._hue_order):\n             kws = kwargs.copy()\n", "normalized_occurrence": 1}
