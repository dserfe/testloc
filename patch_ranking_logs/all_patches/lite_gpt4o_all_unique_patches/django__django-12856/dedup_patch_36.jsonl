{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..ea88222 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -90,7 +90,13 @@ class UniqueConstraint(BaseConstraint):\n             raise ValueError(\n                 'UniqueConstraint.deferrable must be a Deferrable instance.'\n             )\n+        from django.core.exceptions import FieldDoesNotExist\n+\n         self.fields = tuple(fields)\n+        # Check if all fields exist in the model\n+        for field in self.fields:\n+            if not any(f.name == field for f in model._meta.get_fields()):\n+                raise FieldDoesNotExist(f\"Field '{field}' does not exist in the model '{model.__name__}'\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n@@ -150,4 +156,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 76d46f4..be8257d 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -61,7 +61,11 @@ class UniqueConstraint(BaseConstraint):\n             raise ValueError('UniqueConstraint with conditions cannot be deferred.')\n         if not isinstance(deferrable, (type(None), Deferrable)):\n             raise ValueError('UniqueConstraint.deferrable must be a Deferrable instance.')\n+        from django.core.exceptions import FieldDoesNotExist\n         self.fields = tuple(fields)\n+        for field in self.fields:\n+            if not any((f.name == field for f in model._meta.get_fields())):\n+                raise FieldDoesNotExist(f\"Field '{field}' does not exist in the model '{model.__name__}'\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n", "normalized_occurrence": 1}
