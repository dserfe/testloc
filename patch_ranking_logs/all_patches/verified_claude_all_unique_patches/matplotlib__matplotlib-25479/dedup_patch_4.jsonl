{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 79762f1..5e3dda2 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -203,9 +203,14 @@ class ColormapRegistry(Mapping):\n         if isinstance(cmap, colors.Colormap):\n             return cmap\n         if isinstance(cmap, str):\n-            _api.check_in_list(sorted(_colormaps), cmap=cmap)\n-            # otherwise, it must be a string so look it up\n-            return self[cmap]\n+            # First try to get the colormap by name directly\n+            try:\n+                return self[cmap]\n+            except KeyError as e:\n+                # If that fails, then check if it's a valid name at all\n+                _api.check_in_list(sorted(_colormaps), cmap=cmap)\n+                # If we get here, it means the name was valid but lookup failed\n+                raise e\n         raise TypeError(\n             'get_cmap expects None or an instance of a str or Colormap . ' +\n             f'you passed {cmap!r} of type {type(cmap)}'\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex aa7fbd0..2b5bb1c 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -53,8 +53,11 @@ class ColormapRegistry(Mapping):\n         if isinstance(cmap, colors.Colormap):\n             return cmap\n         if isinstance(cmap, str):\n-            _api.check_in_list(sorted(_colormaps), cmap=cmap)\n-            return self[cmap]\n+            try:\n+                return self[cmap]\n+            except KeyError as e:\n+                _api.check_in_list(sorted(_colormaps), cmap=cmap)\n+                raise e\n         raise TypeError('get_cmap expects None or an instance of a str or Colormap . ' + f'you passed {cmap!r} of type {type(cmap)}')\n _colormaps = ColormapRegistry(_gen_cmap_registry())\n globals().update(_colormaps)\n", "normalized_occurrence": 1}
