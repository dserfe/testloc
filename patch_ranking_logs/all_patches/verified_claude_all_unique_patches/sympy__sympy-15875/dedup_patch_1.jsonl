{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..1c04eb7 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,34 +536,43 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n+        real_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n                     z += 1\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    real_terms.append(a)\n                 else:\n                     return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            elif a.is_imaginary or (S.ImaginaryUnit*a).is_real:\n+                im_terms.append(a)\n             else:\n                 return\n+\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n+\n+        # If we only have real terms\n+        if not im_terms and real_terms:\n+            b = self.func(*real_terms)\n+            if b.is_zero:\n                 return True\n-            if im and not im_or_z:\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n+            return None\n+\n+        # If we have both real and imaginary terms, or just imaginary terms,\n+        # we need to be more careful\n+        real_sum = self.func(*real_terms) if real_terms else S.Zero\n+        im_sum = self.func(*im_terms) if im_terms else S.Zero\n+\n+        if real_sum.is_zero is False or im_sum.is_zero is False:\n             return False\n+        if real_sum.is_zero and im_sum.is_zero:\n+            return True\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..105c898 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,34 +290,36 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n+        real_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n                     z += 1\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    real_terms.append(a)\n                 else:\n                     return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+            elif a.is_imaginary or (S.ImaginaryUnit * a).is_real:\n+                im_terms.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n+        if not im_terms and real_terms:\n+            b = self.func(*real_terms)\n+            if b.is_zero:\n                 return True\n-            if im and (not im_or_z):\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n+            return None\n+        real_sum = self.func(*real_terms) if real_terms else S.Zero\n+        im_sum = self.func(*im_terms) if im_terms else S.Zero\n+        if real_sum.is_zero is False or im_sum.is_zero is False:\n             return False\n+        if real_sum.is_zero and im_sum.is_zero:\n+            return True\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
