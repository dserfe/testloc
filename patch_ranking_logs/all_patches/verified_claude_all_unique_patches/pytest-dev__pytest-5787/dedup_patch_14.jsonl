{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..ac92a53 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,28 +162,42 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n+            def process_traceback(tb):\n+                reprtraceback = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback[\"reprentries\"] = new_entries\n+                return reprtraceback\n+\n+            def process_crash(crash):\n+                return crash.__dict__.copy() if crash is not None else None\n+\n+            result = {\n+                \"reprcrash\": process_crash(rep.longrepr.reprcrash),\n+                \"reprtraceback\": process_traceback(rep.longrepr.reprtraceback),\n                 \"sections\": rep.longrepr.sections,\n             }\n \n+            # Handle chained exceptions\n+            if hasattr(rep.longrepr, \"chain\"):\n+                result[\"chain\"] = []\n+                for excinfo in rep.longrepr.chain:\n+                    result[\"chain\"].append({\n+                        \"reprcrash\": process_crash(excinfo.reprcrash),\n+                        \"reprtraceback\": process_traceback(excinfo.reprtraceback),\n+                        \"sections\": excinfo.sections,\n+                    })\n+\n+            return result\n+\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n@@ -257,6 +271,53 @@ class BaseReport:\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n+\n+                # Handle chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for excinfo in reportdict[\"longrepr\"][\"chain\"]:\n+                        reprtraceback = excinfo[\"reprtraceback\"]\n+                        reprcrash = excinfo[\"reprcrash\"]\n+                        \n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback[\"reprentries\"]:\n+                            data = entry_data[\"data\"]\n+                            entry_type = entry_data[\"type\"]\n+                            if entry_type == \"ReprEntry\":\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data[\"reprfuncargs\"]:\n+                                    reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                                if data[\"reprfileloc\"]:\n+                                    reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                                if data[\"reprlocals\"]:\n+                                    reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                                reprentry = ReprEntry(\n+                                    lines=data[\"lines\"],\n+                                    reprfuncargs=reprfuncargs,\n+                                    reprlocals=reprlocals,\n+                                    filelocrepr=reprfileloc,\n+                                    style=data[\"style\"],\n+                                )\n+                            elif entry_type == \"ReprEntryNative\":\n+                                reprentry = ReprEntryNative(data[\"lines\"])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                            \n+                        reprtraceback[\"reprentries\"] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**reprtraceback),\n+                            reprcrash=ReprFileLocation(**reprcrash) if reprcrash else None,\n+                        )\n+                        for section in excinfo[\"sections\"]:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    \n+                    exception_info.chain = chain\n+\n                 reportdict[\"longrepr\"] = exception_info\n \n         return cls(**reportdict)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..6dd47da 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,25 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def process_traceback(tb):\n+                reprtraceback = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback['reprentries'] = new_entries\n+                return reprtraceback\n+            def process_crash(crash):\n+                return crash.__dict__.copy() if crash is not None else None\n+            result = {'reprcrash': process_crash(rep.longrepr.reprcrash), 'reprtraceback': process_traceback(rep.longrepr.reprtraceback), 'sections': rep.longrepr.sections}\n+            if hasattr(rep.longrepr, 'chain'):\n+                result['chain'] = []\n+                for excinfo in rep.longrepr.chain:\n+                    result['chain'].append({'reprcrash': process_crash(excinfo.reprcrash), 'reprtraceback': process_traceback(excinfo.reprtraceback), 'sections': excinfo.sections})\n+            return result\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -133,6 +141,37 @@ class BaseReport:\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for excinfo in reportdict['longrepr']['chain']:\n+                        reprtraceback = excinfo['reprtraceback']\n+                        reprcrash = excinfo['reprcrash']\n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback['reprentries']:\n+                            data = entry_data['data']\n+                            entry_type = entry_data['type']\n+                            if entry_type == 'ReprEntry':\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data['reprfuncargs']:\n+                                    reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                                if data['reprfileloc']:\n+                                    reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                                if data['reprlocals']:\n+                                    reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                                reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                            elif entry_type == 'ReprEntryNative':\n+                                reprentry = ReprEntryNative(data['lines'])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        reprtraceback['reprentries'] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash) if reprcrash else None)\n+                        for section in excinfo['sections']:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n                 reportdict['longrepr'] = exception_info\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n", "normalized_occurrence": 1}
