{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 1c19fd6..f4b5b79 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -83,10 +83,25 @@ def python(expr, **settings):\n \n     if not len(renamings) == 0:\n         exprp = expr.subs(renamings)\n-    result += 'e = ' + printer._str(exprp)\n-    return result\n+    else:\n+        exprp = expr\n+        \n+    # First collect all symbols used in the expression\n+    symbols_in_expr = exprp.free_symbols\n+    result_lines = []\n+    \n+    # Add declarations for all symbols actually used in the expression\n+    for symbol in symbols_in_expr:\n+        symbol_str = printer._str(symbol)\n+        if symbol_str in printer.symbols:\n+            result_lines.append(f\"{symbol_str} = Symbol('{symbol_str}')\")\n+    \n+    # Add the expression assignment\n+    result_lines.append('e = ' + printer._str(exprp))\n+    \n+    return '\\n'.join(result_lines)\n \n \n def print_python(expr, **settings):\n     \"\"\"Print output of python() function\"\"\"\n-    print(python(expr, **settings))\n+    print(python(expr, **settings))\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..a4dd054 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -630,7 +630,7 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..6fc5d19 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -455,7 +455,7 @@ class StrPrinter(Printer):\n     def _print_Relational(self, expr):\n         charmap = {'==': 'Eq', '!=': 'Ne', ':=': 'Assignment', '+=': 'AddAugmentedAssignment', '-=': 'SubAugmentedAssignment', '*=': 'MulAugmentedAssignment', '/=': 'DivAugmentedAssignment', '%=': 'ModAugmentedAssignment'}\n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)), self._relationals.get(expr.rel_op) or expr.rel_op, self.parenthesize(expr.rhs, precedence(expr)))\n     def _print_ComplexRootOf(self, expr):\n         return 'CRootOf(%s, %d)' % (self._print_Add(expr.expr, order='lex'), expr.index)\ndiff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 2a63937..25001bd 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -51,7 +51,15 @@ def python(expr, **settings):\n         result += newfunctionname + \" = Function('\" + functionname + \"')\\n\"\n     if not len(renamings) == 0:\n         exprp = expr.subs(renamings)\n-    result += 'e = ' + printer._str(exprp)\n-    return result\n+    else:\n+        exprp = expr\n+    symbols_in_expr = exprp.free_symbols\n+    result_lines = []\n+    for symbol in symbols_in_expr:\n+        symbol_str = printer._str(symbol)\n+        if symbol_str in printer.symbols:\n+            result_lines.append(f\"{symbol_str} = Symbol('{symbol_str}')\")\n+    result_lines.append('e = ' + printer._str(exprp))\n+    return '\\n'.join(result_lines)\n def print_python(expr, **settings):\n     print(python(expr, **settings))\n\\ No newline at end of file\n", "normalized_occurrence": 1}
