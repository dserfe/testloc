{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..add9ead 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -182,7 +182,15 @@ class Point(GeometryEntity):\n         origin = Point([0]*len(self))\n         return Point.distance(origin, self)\n \n-    def __add__(self, other):\n+    def __mul__(self, other):\n+        \"\"\"Multiply point's coordinates by a factor.\"\"\"\n+        other = sympify(other)\n+        coords = [simplify(x * other) for x in self.args]\n+        return Point(coords, evaluate=False)\n+\n+    def __rmul__(self, other):\n+        \"\"\"Right multiply point's coordinates by a factor.\"\"\"\n+        return self.__mul__(other)\n         \"\"\"Add other to self by incrementing self's coordinates by\n         those of other.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..4831ef6 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -61,7 +61,12 @@ class Point(GeometryEntity):\n     def __abs__(self):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n-    def __add__(self, other):\n+    def __mul__(self, other):\n+        other = sympify(other)\n+        coords = [simplify(x * other) for x in self.args]\n+        return Point(coords, evaluate=False)\n+    def __rmul__(self, other):\n+        return self.__mul__(other)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "normalized_occurrence": 1}
