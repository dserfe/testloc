{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a6a3e97..c39acc4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,6 +1124,9 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        # Skip filterable check for model instances\n+        if hasattr(expression, '_meta'):\n+            return\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5b98027..7359aec 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -611,6 +611,8 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n     def check_filterable(self, expression):\n+        if hasattr(expression, '_meta'):\n+            return\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(expression.__class__.__name__ + ' is disallowed in the filter clause.')\n         if hasattr(expression, 'get_source_expressions'):\n", "normalized_occurrence": 8}
