{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..bfa98c0 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -147,7 +147,30 @@ def __getattr__(name):\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n+        version_parts = __version__.split('.')\n+        __version_info__ = tuple(map(int, version_parts[:3])) + tuple(version_parts[3:])\n         return __version__\n+\n+    if name == \"__version_info__\":\n+        import setuptools_scm\n+        global __version__, __version_info__  # cache it.\n+        # Only shell out to a git subprocess if really needed, and not on a\n+        # shallow clone, such as those used by CI, as the latter would trigger\n+        # a warning from setuptools_scm.\n+        root = Path(__file__).resolve().parents[2]\n+        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n+            __version__ = setuptools_scm.get_version(\n+                root=root,\n+                version_scheme=\"post-release\",\n+                local_scheme=\"node-and-date\",\n+                fallback_version=_version.version,\n+            )\n+        else:  # Get the version from the _version.py setuptools_scm file.\n+            __version__ = _version.version\n+\n+        version_parts = __version__.split('.')\n+        __version_info__ = tuple(map(int, version_parts[:3])) + tuple(version_parts[3:])\n+        return __version_info__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 4b4b135..6599188 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -34,7 +34,20 @@ def __getattr__(name):\n             __version__ = setuptools_scm.get_version(root=root, version_scheme='post-release', local_scheme='node-and-date', fallback_version=_version.version)\n         else:\n             __version__ = _version.version\n+        version_parts = __version__.split('.')\n+        __version_info__ = tuple(map(int, version_parts[:3])) + tuple(version_parts[3:])\n         return __version__\n+    if name == '__version_info__':\n+        import setuptools_scm\n+        global __version__, __version_info__\n+        root = Path(__file__).resolve().parents[2]\n+        if (root / '.git').exists() and (not (root / '.git/shallow').exists()):\n+            __version__ = setuptools_scm.get_version(root=root, version_scheme='post-release', local_scheme='node-and-date', fallback_version=_version.version)\n+        else:\n+            __version__ = _version.version\n+        version_parts = __version__.split('.')\n+        __version_info__ = tuple(map(int, version_parts[:3])) + tuple(version_parts[3:])\n+        return __version_info__\n     raise AttributeError(f'module {__name__!r} has no attribute {name!r}')\n def _check_versions():\n     from . import ft2font\n", "normalized_occurrence": 1}
