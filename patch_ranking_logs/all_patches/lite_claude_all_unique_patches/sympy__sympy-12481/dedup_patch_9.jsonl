{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..45b9093 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -896,10 +896,7 @@ class Permutation(Basic):\n \n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..56b6c7f 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -195,9 +195,7 @@ class Permutation(Basic):\n             args = [int(i) for i in args]\n         temp = flatten(args)\n         if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+            if not is_cycle:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n", "normalized_occurrence": 2}
