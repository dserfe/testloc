{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex a80d8e1..84eed34 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -276,12 +276,18 @@ class ModelBase(type):\n                     field = parent_links[base_key]\n                 elif not is_proxy:\n                     attr_name = \"%s_ptr\" % base._meta.model_name\n+                    # Check if this is a secondary parent in multi-table inheritance\n+                    is_secondary_parent = any(\n+                        isinstance(b, ModelBase) and not b._meta.abstract\n+                        for b in parents[:parents.index(base)]\n+                    ) if base in parents else False\n                     field = OneToOneField(\n                         base,\n                         on_delete=CASCADE,\n                         name=attr_name,\n                         auto_created=True,\n                         parent_link=True,\n+                        primary_key=not is_secondary_parent,\n                     )\n \n                     if attr_name in field_names:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a3bff1..50b86e1 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -126,7 +126,8 @@ class ModelBase(type):\n                     field = parent_links[base_key]\n                 elif not is_proxy:\n                     attr_name = '%s_ptr' % base._meta.model_name\n-                    field = OneToOneField(base, on_delete=CASCADE, name=attr_name, auto_created=True, parent_link=True)\n+                    is_secondary_parent = any((isinstance(b, ModelBase) and (not b._meta.abstract) for b in parents[:parents.index(base)])) if base in parents else False\n+                    field = OneToOneField(base, on_delete=CASCADE, name=attr_name, auto_created=True, parent_link=True, primary_key=not is_secondary_parent)\n                     if attr_name in field_names:\n                         raise FieldError(\"Auto-generated field '%s' in class %r for parent_link to base class %r clashes with declared field of the same name.\" % (attr_name, name, base.__name__))\n                     if not hasattr(new_class, attr_name):\n", "normalized_occurrence": 1}
