{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex a09f791..dc73c7d 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -422,8 +422,13 @@ class RelatedField(FieldCacheMixin, Field):\n         \"\"\"\n         Define the name that can be used to identify this related object in a\n         table-spanning query.\n+\n+        Special handling is provided for 'pk' to allow related field ordering.\n         \"\"\"\n-        return self.remote_field.related_query_name or self.remote_field.related_name or self.opts.model_name\n+        name = self.remote_field.related_query_name or self.remote_field.related_name or self.opts.model_name\n+        if name == 'pk':\n+            return self.remote_field.model._meta.pk.name\n+        return name\n \n     @property\n     def target_field(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f0a0935..3073254 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -169,7 +169,10 @@ class RelatedField(FieldCacheMixin, Field):\n         defaults.update(kwargs)\n         return super().formfield(**defaults)\n     def related_query_name(self):\n-        return self.remote_field.related_query_name or self.remote_field.related_name or self.opts.model_name\n+        name = self.remote_field.related_query_name or self.remote_field.related_name or self.opts.model_name\n+        if name == 'pk':\n+            return self.remote_field.model._meta.pk.name\n+        return name\n     @property\n     def target_field(self):\n         target_fields = self.get_path_info()[-1].target_fields\n", "normalized_occurrence": 1}
