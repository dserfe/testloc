{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12754", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 12ebcde..1278f69 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -402,6 +402,10 @@ class MigrationAutodetector:\n                 isinstance(operation, operations.RemoveField) and\n                 operation.model_name_lower == dependency[1].lower() and\n                 operation.name_lower == dependency[2].lower()\n+            ) or (\n+                # Make CreateModel that adds the same field depend on the field removal\n+                (isinstance(operation, operations.CreateModel) or isinstance(operation, operations.AddField)) and\n+                any(dependency[2] == x for x, y in getattr(operation, 'fields', [(operation.name, operation.field)]))\n             )\n         # Removed model\n         elif dependency[2] is None and dependency[3] is False:\n@@ -1326,4 +1330,4 @@ class MigrationAutodetector:\n         match = re.match(r'^\\d+', name)\n         if match:\n             return int(match[0])\n-        return None\n+        return None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex f799cd9..4108f50 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -213,7 +213,7 @@ class MigrationAutodetector:\n         elif dependency[2] is not None and dependency[3] is True:\n             return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower() and any((dependency[2] == x for x, y in operation.fields)) or (isinstance(operation, operations.AddField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower()))\n         elif dependency[2] is not None and dependency[3] is False:\n-            return isinstance(operation, operations.RemoveField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower())\n+            return isinstance(operation, operations.RemoveField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower()) or ((isinstance(operation, operations.CreateModel) or isinstance(operation, operations.AddField)) and any((dependency[2] == x for x, y in getattr(operation, 'fields', [(operation.name, operation.field)]))))\n         elif dependency[2] is None and dependency[3] is False:\n             return isinstance(operation, operations.DeleteModel) and operation.name_lower == dependency[1].lower()\n         elif dependency[2] is not None and dependency[3] == 'alter':\n", "normalized_occurrence": 1}
