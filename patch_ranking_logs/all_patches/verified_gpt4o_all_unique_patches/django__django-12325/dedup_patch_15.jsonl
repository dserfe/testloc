{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..7eb2e30 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -155,6 +155,23 @@ class ModelBase(type):\n         if is_proxy and base_meta and base_meta.swapped:\n             raise TypeError(\"%s cannot proxy the swapped model '%s'.\" % (name, base_meta.swapped))\n \n+        # Add remaining attributes (those with a contribute_to_class() method)\n+        # to the class.\n+        # Collect the parent links for multi-table inheritance.\n+        parent_links = {}\n+        for base in reversed([new_class] + parents):\n+            # Conceptually equivalent to `if base is Model`.\n+            if not hasattr(base, '_meta'):\n+                continue\n+            # Skip concrete parent classes.\n+            if base != new_class and not base._meta.abstract:\n+                continue\n+            # Locate OneToOneField instances.\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n+\n         # Add remaining attributes (those with a contribute_to_class() method)\n         # to the class.\n         for obj_name, obj in contributable_attrs.items():\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..d8adc44 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -76,6 +76,16 @@ class ModelBase(type):\n         is_proxy = new_class._meta.proxy\n         if is_proxy and base_meta and base_meta.swapped:\n             raise TypeError(\"%s cannot proxy the swapped model '%s'.\" % (name, base_meta.swapped))\n+        parent_links = {}\n+        for base in reversed([new_class] + parents):\n+            if not hasattr(base, '_meta'):\n+                continue\n+            if base != new_class and (not base._meta.abstract):\n+                continue\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    parent_links[make_model_tuple(related)] = field\n         for obj_name, obj in contributable_attrs.items():\n             new_class.add_to_class(obj_name, obj)\n         new_fields = chain(new_class._meta.local_fields, new_class._meta.local_many_to_many, new_class._meta.private_fields)\n", "normalized_occurrence": 1}
