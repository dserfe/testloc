{"model_name_or_path": "agentless", "instance_id": "django__django-13810", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2cbbab1..e31cfc3 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -85,8 +85,9 @@ class BaseHandler:\n                     self.adapt_method_mode(False, mw_instance.process_exception),\n                 )\n \n-            handler = convert_exception_to_response(mw_instance)\n-            handler_is_async = middleware_is_async\n+            if not isinstance(mw_instance, MiddlewareNotUsed):\n+                handler = convert_exception_to_response(mw_instance)\n+                handler_is_async = middleware_is_async\n \n         # Adapt the top of the stack, if needed.\n         handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex db9e015..e8a9c38 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -51,8 +51,9 @@ class BaseHandler:\n                 self._template_response_middleware.append(self.adapt_method_mode(is_async, mw_instance.process_template_response))\n             if hasattr(mw_instance, 'process_exception'):\n                 self._exception_middleware.append(self.adapt_method_mode(False, mw_instance.process_exception))\n-            handler = convert_exception_to_response(mw_instance)\n-            handler_is_async = middleware_is_async\n+            if not isinstance(mw_instance, MiddlewareNotUsed):\n+                handler = convert_exception_to_response(mw_instance)\n+                handler_is_async = middleware_is_async\n         handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n         self._middleware_chain = handler\n     def adapt_method_mode(self, is_async, method, method_is_async=None, debug=False, name=None):\n", "normalized_occurrence": 1}
