{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..3ce58c3 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,33 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if this is a local document reference\n+                if uri.startswith('#'):\n+                    # Fragment-only reference in the same document\n+                    if not any(node['ids'][0] == uri[1:] for node in self.env.get_doctree(docname).traverse(nodes.section)):\n+                        return 'broken', 'Anchor not found', 0\n+                    return 'working', '', 0\n+                else:\n+                    # Cross-document reference\n+                    try:\n+                        # Split anchor from target if present\n+                        if '#' in uri:\n+                            target, anchor = uri.split('#', 1)\n+                        else:\n+                            target, anchor = uri, None\n+                            \n+                        # Try to find the document\n+                        if target:\n+                            target_doc = self.env.get_doctree(target)\n+                            if not target_doc:\n+                                return 'broken', 'Document not found', 0\n+                            \n+                            # Check anchor if present\n+                            if anchor and not any(node['ids'][0] == anchor for node in target_doc.traverse(nodes.section)):\n+                                return 'broken', 'Anchor not found', 0\n+                        return 'working', '', 0\n+                    except Exception as exc:\n+                        return 'broken', str(exc), 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..00ec8dd 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,25 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    if not any((node['ids'][0] == uri[1:] for node in self.env.get_doctree(docname).traverse(nodes.section))):\n+                        return ('broken', 'Anchor not found', 0)\n+                    return ('working', '', 0)\n+                else:\n+                    try:\n+                        if '#' in uri:\n+                            target, anchor = uri.split('#', 1)\n+                        else:\n+                            target, anchor = (uri, None)\n+                        if target:\n+                            target_doc = self.env.get_doctree(target)\n+                            if not target_doc:\n+                                return ('broken', 'Document not found', 0)\n+                            if anchor and (not any((node['ids'][0] == anchor for node in target_doc.traverse(nodes.section)))):\n+                                return ('broken', 'Anchor not found', 0)\n+                        return ('working', '', 0)\n+                    except Exception as exc:\n+                        return ('broken', str(exc), 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
