{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..92afe98 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -688,13 +688,18 @@ class Response(object):\n         elif not isinstance(chunk_size, int):\n             raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n         # simulate reading small chunks of the content\n-        reused_chunks = iter_slices(self._content, chunk_size)\n-\n-        stream_chunks = generate()\n-\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n+        if self._content_consumed:\n+            # Content already consumed, so _content is available\n+            if decode_unicode and isinstance(self._content, bytes):\n+                # Decode the content first if needed\n+                content = self._content.decode(self.encoding or 'utf-8', 'replace')\n+            else:\n+                content = self._content\n+            chunks = iter_slices(content, chunk_size)\n+        else:\n+            chunks = generate()\n \n-        if decode_unicode:\n+        if decode_unicode and not self._content_consumed:\n             chunks = stream_decode_response_unicode(chunks, self)\n \n         return chunks\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..4e91c5b 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -356,10 +356,15 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n-        reused_chunks = iter_slices(self._content, chunk_size)\n-        stream_chunks = generate()\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n-        if decode_unicode:\n+        if self._content_consumed:\n+            if decode_unicode and isinstance(self._content, bytes):\n+                content = self._content.decode(self.encoding or 'utf-8', 'replace')\n+            else:\n+                content = self._content\n+            chunks = iter_slices(content, chunk_size)\n+        else:\n+            chunks = generate()\n+        if decode_unicode and (not self._content_consumed):\n             chunks = stream_decode_response_unicode(chunks, self)\n         return chunks\n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n", "normalized_occurrence": 1}
