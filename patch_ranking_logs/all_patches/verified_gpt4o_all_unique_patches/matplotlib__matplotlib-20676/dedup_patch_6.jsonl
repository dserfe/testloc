{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..3b0e917 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2331,10 +2331,23 @@ class SpanSelector(_SelectorWidget):\n     @extents.setter\n     def extents(self, extents):\n         # Update displayed shape\n+        old_extents = self.extents\n         self._draw_shape(*extents)\n+        new_extents = self.extents\n         if self._interactive:\n             # Update displayed handles\n             self._edge_handles.set_data(self.extents)\n+\n+        # Adjust axis limits only if necessary\n+        if self.direction == 'horizontal':\n+            x0, x1 = self.ax.get_xlim()\n+            if new_extents[0] < x0 or new_extents[1] > x1:\n+                self.ax.set_xlim(min(x0, new_extents[0]), max(x1, new_extents[1]))\n+        else:\n+            y0, y1 = self.ax.get_ylim()\n+            if new_extents[0] < y0 or new_extents[1] > y1:\n+                self.ax.set_ylim(min(y0, new_extents[0]), max(y1, new_extents[1]))\n+\n         self.set_visible(self.visible)\n         self.update()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..309e304 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1899,9 +1899,19 @@ class SpanSelector(_SelectorWidget):\n \n     @extents.setter\n     def extents(self, extents):\n+        old_extents = self.extents\n         self._draw_shape(*extents)\n+        new_extents = self.extents\n         if self._interactive:\n             self._edge_handles.set_data(self.extents)\n+        if self.direction == 'horizontal':\n+            x0, x1 = self.ax.get_xlim()\n+            if new_extents[0] < x0 or new_extents[1] > x1:\n+                self.ax.set_xlim(min(x0, new_extents[0]), max(x1, new_extents[1]))\n+        else:\n+            y0, y1 = self.ax.get_ylim()\n+            if new_extents[0] < y0 or new_extents[1] > y1:\n+                self.ax.set_ylim(min(y0, new_extents[0]), max(y1, new_extents[1]))\n         self.set_visible(self.visible)\n         self.update()\n \n", "normalized_occurrence": 1}
