{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..045b861 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -733,6 +733,14 @@ class Func(SQLiteNumericMixin, Expression):\n \n class Value(SQLiteNumericMixin, Expression):\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n+    \n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = [self.value]\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        return path, args, kwargs\n     # Provide a default value for `for_save` in order to allow unresolved\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n@@ -808,6 +816,14 @@ class Value(SQLiteNumericMixin, Expression):\n \n \n class RawSQL(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        return path, args, kwargs\n+\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -987,6 +1003,12 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n \n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n+    \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return path, args, kwargs\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n@@ -1053,6 +1075,17 @@ class When(Expression):\n \n \n class Case(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = []\n+        kwargs = {'default': self.default}\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        args.extend(self.cases)\n+        return path, args, kwargs\n+\n     \"\"\"\n     An SQL searched CASE expression:\n \n@@ -1192,6 +1225,12 @@ class Subquery(BaseExpression, Combinable):\n \n class Exists(Subquery):\n     template = 'EXISTS(%(subquery)s)'\n+    \n+    def deconstruct(self):\n+        path = 'django.db.models.Exists'\n+        args = [self.query]\n+        kwargs = {'negated': self.negated}\n+        return path, args, kwargs\n     output_field = fields.BooleanField()\n \n     def __init__(self, queryset, negated=False, **kwargs):\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = [self.value]\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = []\n+        kwargs = {'default': self.default}\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self._output_field_or_none\n+        args.extend(self.cases)\n+        return (path, args, kwargs)\n+    \"\\n    An SQL searched CASE expression:\\n\\n        CASE\\n            WHEN n > 0\\n                THEN 'positive'\\n            WHEN n < 0\\n                THEN 'negative'\\n            ELSE 'zero'\\n        END\\n    \"\n+    def deconstruct(self):\n+        path = 'django.db.models.Exists'\n+        args = [self.query]\n+        kwargs = {'negated': self.negated}\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
