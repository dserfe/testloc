{"model_name_or_path": "agentless", "instance_id": "django__django-11206", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex d5baf57..65030ed 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -28,9 +28,10 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     sign = ''\n     if isinstance(number, Decimal):\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n-        # scientific notation to avoid high memory usage in {:f}'.format().\n+        # scientific notation to avoid high memory usage in {:f}'.format(),\n+        # but only if decimal_pos is not specified.\n         _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n+        if abs(exponent) + len(digits) > 200 and decimal_pos is None:\n             number = '{:e}'.format(number)\n             coefficient, exponent = number.split('e')\n             # Format the coefficient.\n@@ -39,6 +40,10 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n                 thousand_sep, force_grouping, use_l10n,\n             )\n             return '{}e{}'.format(coefficient, exponent)\n+        elif abs(exponent) > decimal_pos:\n+            # If the number is smaller than what can be encoded using the\n+            # provided number of decimal positions, return 0.000...000.\n+            str_number = '0' + decimal_sep + '0' * decimal_pos\n         else:\n             str_number = '{:f}'.format(number)\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 0318af1..d8a7ada 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -10,11 +10,13 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', f\n     sign = ''\n     if isinstance(number, Decimal):\n         _, digits, exponent = number.as_tuple()\n-        if abs(exponent) + len(digits) > 200:\n+        if abs(exponent) + len(digits) > 200 and decimal_pos is None:\n             number = '{:e}'.format(number)\n             coefficient, exponent = number.split('e')\n             coefficient = format(coefficient, decimal_sep, decimal_pos, grouping, thousand_sep, force_grouping, use_l10n)\n             return '{}e{}'.format(coefficient, exponent)\n+        elif abs(exponent) > decimal_pos:\n+            str_number = '0' + decimal_sep + '0' * decimal_pos\n         else:\n             str_number = '{:f}'.format(number)\n     else:\n", "normalized_occurrence": 1}
