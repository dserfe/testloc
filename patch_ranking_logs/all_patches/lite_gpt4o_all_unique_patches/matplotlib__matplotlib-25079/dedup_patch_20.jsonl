{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..6722c87 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -583,6 +583,8 @@ class ScalarMappable:\n         in_init = self.cmap is None\n \n         self.cmap = _ensure_cmap(cmap)\n+        # Always set clim when norm is changed to ensure vmin and vmax are valid\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.changed()  # Things are not set up properly yet.\n \n@@ -611,11 +613,15 @@ class ScalarMappable:\n \n         in_init = self.norm is None\n         # Remove the current callback and connect to the new one\n+        # Always set clim when norm is changed to ensure vmin and vmax are valid\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n         self._id_norm = self.norm.callbacks.connect('changed',\n                                                     self.changed)\n+        # Always set clim when norm is changed to ensure vmin and vmax are valid\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.changed()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..e6746dc 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -169,6 +169,7 @@ class ScalarMappable:\n     def set_cmap(self, cmap):\n         in_init = self.cmap is None\n         self.cmap = _ensure_cmap(cmap)\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.changed()\n     @property\n@@ -188,10 +189,12 @@ class ScalarMappable:\n         if norm is self.norm:\n             return\n         in_init = self.norm is None\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n+        self.set_clim(self.norm.vmin, self.norm.vmax)\n         if not in_init:\n             self.changed()\n     def set_norm(self, norm):\n", "normalized_occurrence": 1}
