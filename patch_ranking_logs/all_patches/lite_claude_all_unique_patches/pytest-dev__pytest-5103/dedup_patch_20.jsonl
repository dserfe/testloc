{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..9523e8e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,37 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and len(call.args) == 1:\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Extract the iterator and condition from the comprehension\n+                elt = arg.elt\n+                for generator in arg.generators:\n+                    target = generator.target\n+                    iter = generator.iter\n+                    ifs = generator.ifs\n+                    \n+                    # Create a for loop that checks each item\n+                    if call.func.id == 'all':\n+                        # for x in iter: assert pred(x)\n+                        test = elt\n+                        msg = \"all() failed, found non-matching element\"\n+                    else:  # any\n+                        # for x in iter: if pred(x): return True; assert False\n+                        test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                        msg = \"any() failed, no matching elements found\"\n+                    \n+                    loop = ast.For(\n+                        target=target,\n+                        iter=iter,\n+                        body=[ast.Assert(test=test, msg=ast.Str(s=msg))],\n+                        orelse=[]\n+                    )\n+                    return loop, \"unrolled loop\"\n+\n+        # Normal handling for other calls\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1002,6 +1033,37 @@ warn_explicit(\n         visit `ast.Call nodes on 3.4 and below`\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and len(call.args) == 1:\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Extract the iterator and condition from the comprehension\n+                elt = arg.elt\n+                for generator in arg.generators:\n+                    target = generator.target\n+                    iter = generator.iter\n+                    ifs = generator.ifs\n+                    \n+                    # Create a for loop that checks each item\n+                    if call.func.id == 'all':\n+                        # for x in iter: assert pred(x)\n+                        test = elt\n+                        msg = \"all() failed, found non-matching element\"\n+                    else:  # any\n+                        # for x in iter: if pred(x): return True; assert False\n+                        test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                        msg = \"any() failed, no matching elements found\"\n+                    \n+                    loop = ast.For(\n+                        target=target,\n+                        iter=iter,\n+                        body=[ast.Assert(test=test, msg=ast.Str(s=msg))],\n+                        orelse=[]\n+                    )\n+                    return loop, \"unrolled loop\"\n+\n+        # Normal handling for other calls\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..187a87e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -545,6 +545,22 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (res, explanation)\n     def visit_Call_35(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1):\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                elt = arg.elt\n+                for generator in arg.generators:\n+                    target = generator.target\n+                    iter = generator.iter\n+                    ifs = generator.ifs\n+                    if call.func.id == 'all':\n+                        test = elt\n+                        msg = 'all() failed, found non-matching element'\n+                    else:\n+                        test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                        msg = 'any() failed, no matching elements found'\n+                    loop = ast.For(target=target, iter=iter, body=[ast.Assert(test=test, msg=ast.Str(s=msg))], orelse=[])\n+                    return (loop, 'unrolled loop')\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -571,6 +587,22 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (new_starred, '*' + expl)\n     def visit_Call_legacy(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1):\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                elt = arg.elt\n+                for generator in arg.generators:\n+                    target = generator.target\n+                    iter = generator.iter\n+                    ifs = generator.ifs\n+                    if call.func.id == 'all':\n+                        test = elt\n+                        msg = 'all() failed, found non-matching element'\n+                    else:\n+                        test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                        msg = 'any() failed, no matching elements found'\n+                    loop = ast.For(target=target, iter=iter, body=[ast.Assert(test=test, msg=ast.Str(s=msg))], orelse=[])\n+                    return (loop, 'unrolled loop')\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "normalized_occurrence": 1}
