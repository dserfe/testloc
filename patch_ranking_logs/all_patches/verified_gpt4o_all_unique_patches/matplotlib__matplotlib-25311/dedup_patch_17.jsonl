{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..62b33f5 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -73,7 +73,15 @@ class DraggableLegend(DraggableOffsetBox):\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n \n-    def finalize_offset(self):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Exclude non-picklable attributes\n+        del state[\"legend\"]\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None  # This will be restored by set_draggable() if necessary\n         if self._update == \"loc\":\n             self._update_loc(self.get_loc_in_canvas())\n         elif self._update == \"bbox\":\n@@ -1195,9 +1203,10 @@ class Legend(Artist):\n         \"\"\"\n         if state:\n             if self._draggable is None:\n-                self._draggable = DraggableLegend(self,\n-                                                  use_blit,\n-                                                  update=update)\n+                draggable = DraggableLegend(self, use_blit, update=update)\n+                if self._draggable is not None:\n+                    draggable.legend = self._draggable.legend\n+                self._draggable = draggable\n         else:\n             if self._draggable is not None:\n                 self._draggable.disconnect()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8070532..616de71 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -22,7 +22,13 @@ class DraggableLegend(DraggableOffsetBox):\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n-    def finalize_offset(self):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        del state['legend']\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None\n         if self._update == 'loc':\n             self._update_loc(self.get_loc_in_canvas())\n         elif self._update == 'bbox':\n@@ -423,7 +429,10 @@ class Legend(Artist):\n     def set_draggable(self, state, use_blit=False, update='loc'):\n         if state:\n             if self._draggable is None:\n-                self._draggable = DraggableLegend(self, use_blit, update=update)\n+                draggable = DraggableLegend(self, use_blit, update=update)\n+                if self._draggable is not None:\n+                    draggable.legend = self._draggable.legend\n+                self._draggable = draggable\n         else:\n             if self._draggable is not None:\n                 self._draggable.disconnect()\n", "normalized_occurrence": 1}
