{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8365", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex cae5caf..af7f609 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = get_user().replace(\"\\\\\", \"_\").replace(\"/\", \"_\") or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -125,7 +125,9 @@ class TempPathFactory:\n         return t\n \n \n-@final\n+def sanitize_username(username: str) -> str:\n+    \"\"\"Sanitize the username by replacing illegal characters for directory names.\"\"\"\n+    return username.replace(\"\\\\\", \"_\").replace(\"/\", \"_\")\n @attr.s(init=False)\n class TempdirFactory:\n     \"\"\"Backward comptibility wrapper that implements :class:``py.path.local``\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 6f08c0a..fc2e58e 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -57,7 +57,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get('PYTEST_DEBUG_TEMPROOT')\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or 'unknown'\n+            user = get_user().replace('\\\\', '_').replace('/', '_') or 'unknown'\n             rootdir = temproot.joinpath(f'pytest-of-{user}')\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(prefix='pytest-', root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT)\n@@ -65,7 +65,8 @@ class TempPathFactory:\n         self._basetemp = t = basetemp\n         self._trace('new basetemp', t)\n         return t\n-@final\n+def sanitize_username(username: str) -> str:\n+    return username.replace('\\\\', '_').replace('/', '_')\n @attr.s(init=False)\n class TempdirFactory:\n     _tmppath_factory = attr.ib(type=TempPathFactory)\n", "normalized_occurrence": 1}
