{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..433f23a 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1587,6 +1587,17 @@ class Rational(Number):\n \n     @cacheit\n     def __new__(cls, p, q=None, gcd=None):\n+        if isinstance(p, str) and q is not None:\n+            try:\n+                p = sympify(p)\n+            except (SympifyError, SyntaxError):\n+                pass  # error will raise below\n+            if isinstance(q, str):\n+                try:\n+                    q = sympify(q)\n+                except (SympifyError, SyntaxError):\n+                    pass  # error will raise below\n+\n         if q is None:\n             if isinstance(p, Rational):\n                 return p\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..6dad2f2 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1375,6 +1375,16 @@ class Rational(Number):\n \n     @cacheit\n     def __new__(cls, p, q=None, gcd=None):\n+        if isinstance(p, str) and q is not None:\n+            try:\n+                p = sympify(p)\n+            except (SympifyError, SyntaxError):\n+                pass\n+            if isinstance(q, str):\n+                try:\n+                    q = sympify(q)\n+                except (SympifyError, SyntaxError):\n+                    pass\n         if q is None:\n             if isinstance(p, Rational):\n                 return p\n", "normalized_occurrence": 1}
