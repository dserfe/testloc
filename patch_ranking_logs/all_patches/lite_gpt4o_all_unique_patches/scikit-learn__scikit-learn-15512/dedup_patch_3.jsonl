{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..1380b6e 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -219,11 +219,15 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         # Reduce labels to a sorted, gapless, list\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n+    if not unconverged:\n+        cluster_centers_indices = np.unique(I)\n+        labels = np.searchsorted(cluster_centers_indices, I)\n     else:\n-        warnings.warn(\"Affinity propagation did not converge, this model \"\n-                      \"will not have any cluster centers.\", ConvergenceWarning)\n+        if verbose:\n+            print(\"Affinity propagation did not converge, this model \"\n+                  \"will not have any cluster centers.\")\n         labels = np.array([-1] * n_samples)\n-        cluster_centers_indices = []\n+        cluster_centers_indices = np.array([], dtype=int)\n \n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..c52581f 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -85,10 +85,14 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         labels = I[c]\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n+    if not unconverged:\n+        cluster_centers_indices = np.unique(I)\n+        labels = np.searchsorted(cluster_centers_indices, I)\n     else:\n-        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n+        if verbose:\n+            print('Affinity propagation did not converge, this model will not have any cluster centers.')\n         labels = np.array([-1] * n_samples)\n-        cluster_centers_indices = []\n+        cluster_centers_indices = np.array([], dtype=int)\n     if return_n_iter:\n         return (cluster_centers_indices, labels, it + 1)\n     else:\n", "normalized_occurrence": 1}
