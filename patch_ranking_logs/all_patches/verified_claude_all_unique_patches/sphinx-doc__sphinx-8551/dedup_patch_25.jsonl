{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..9ab00fd 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,17 +1260,30 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n+                    # First try with current module context\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n+                        # If we found a match in current module context, don't look further\n+                        matches = [(newname, self.objects[newname])]\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - but prioritize matches in current module\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        potential_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                          if oname.endswith(searchname) and\n+                                          self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            # Prefer matches in current module\n+                            current_module_matches = [m for m in potential_matches \n+                                                   if m[0].startswith(modname + '.')]\n+                            if current_module_matches:\n+                                matches = current_module_matches\n+                            else:\n+                                matches = potential_matches\n+                        else:\n+                            matches = potential_matches\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..de9e5f5 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,11 +761,20 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n+                        matches = [(newname, self.objects[newname])]\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        potential_matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            current_module_matches = [m for m in potential_matches if m[0].startswith(modname + '.')]\n+                            if current_module_matches:\n+                                matches = current_module_matches\n+                            else:\n+                                matches = potential_matches\n+                        else:\n+                            matches = potential_matches\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
