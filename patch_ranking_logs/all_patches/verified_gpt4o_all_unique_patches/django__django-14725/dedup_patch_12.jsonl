{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..4fed9e5 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -558,7 +558,10 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None,\n         )\n \n     # Instantiate type(form) in order to use the same metaclass as form.\n-    return type(form)(class_name, (form,), form_class_attrs)\n+    formset_class = type(form)(class_name, (form,), form_class_attrs)\n+    if allow_new:\n+        formset_class.allow_new = True\n+    return formset_class\n \n \n # ModelFormSets ##############################################################\n@@ -575,6 +578,7 @@ class BaseModelFormSet(BaseFormSet):\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n+        self.allow_new = kwargs.pop('allow_new', getattr(self, 'allow_new', True))\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n@@ -875,7 +879,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         allow_new=False):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..fbdee3f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -269,12 +269,16 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n     form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}\n     if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:\n         raise ImproperlyConfigured(\"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n-    return type(form)(class_name, (form,), form_class_attrs)\n+    formset_class = type(form)(class_name, (form,), form_class_attrs)\n+    if allow_new:\n+        formset_class.allow_new = True\n+    return formset_class\n class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n+        self.allow_new = kwargs.pop('allow_new', getattr(self, 'allow_new', True))\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n     def initial_form_count(self):\n@@ -454,7 +458,7 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, allow_new=False):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n", "normalized_occurrence": 1}
