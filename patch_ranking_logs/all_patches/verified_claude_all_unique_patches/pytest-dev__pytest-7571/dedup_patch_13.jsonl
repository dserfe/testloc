{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..f182ca9 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -432,7 +432,8 @@ class LogCaptureFixture:\n         \"\"\"\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        if logger not in self._initial_logger_levels:\n+            self._initial_logger_levels[logger] = logger_obj.level\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..db4ec33 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -189,7 +189,8 @@ class LogCaptureFixture:\n         self.handler.reset()\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        if logger not in self._initial_logger_levels:\n+            self._initial_logger_levels[logger] = logger_obj.level\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n     @contextmanager\n", "normalized_occurrence": 1}
