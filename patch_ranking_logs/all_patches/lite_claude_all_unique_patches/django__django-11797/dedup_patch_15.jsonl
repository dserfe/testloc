{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..8303a5b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -95,18 +95,17 @@ class SQLCompiler:\n         expressions = []\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n-            # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n+            # then we need to add everything in it to the GROUP BY clause and\n+            # use ONLY these expressions to maintain proper grouping in subqueries\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n-        # set to group by. So, we need to add cols in select, order_by, and\n-        # having into the select in any case.\n+            # When group_by is explicitly set, we should not add additional\n+            # columns to avoid changing the grouping semantics in subqueries\n+            return [(sql, params) for sql, params in \n+                   [self.compile(expr) for expr in expressions]]\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..ecbb2cb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,6 +45,7 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n+            return [(sql, params) for sql, params in [self.compile(expr) for expr in expressions]]\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 1}
