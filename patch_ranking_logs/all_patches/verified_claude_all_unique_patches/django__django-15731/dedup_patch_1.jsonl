{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15731", "model_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 768c26e..ada90f8 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -75,17 +75,17 @@ class BaseManager:\n                 self._constructor_args[1],  # kwargs\n             )\n \n+    import functools\n+\n     def check(self, **kwargs):\n         return []\n \n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n", "occurrence": 5, "normalized_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 3cbea33..b60903e 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -33,15 +33,15 @@ class BaseManager:\n             if not hasattr(module, name):\n                 raise ValueError(\"Could not find manager %s in %s.\\nPlease note that you need to inherit from managers you dynamically generated with 'from_queryset()'.\" % (name, module_name))\n             return (False, '%s.%s' % (module_name, name), None, self._constructor_args[0], self._constructor_args[1])\n+    import functools\n     def check(self, **kwargs):\n         return []\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n         new_methods = {}\n         for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):\n", "normalized_occurrence": 5}
