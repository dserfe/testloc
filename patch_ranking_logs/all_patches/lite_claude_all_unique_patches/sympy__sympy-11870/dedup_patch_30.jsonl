{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..831081c 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -537,6 +537,24 @@ def exptrigsimp(expr):\n         choices = [e]\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            # Handle Euler's formulas for sin and cos\n+            if e.count(exp) == 2:  # Has two exponential terms\n+                try:\n+                    # Try to match sin pattern: (exp(ix) - exp(-ix))/(2i)\n+                    # or cos pattern: (exp(ix) + exp(-ix))/2\n+                    exprs = [t for t in e.args if isinstance(t, exp)]\n+                    if len(exprs) == 2:\n+                        arg1, arg2 = exprs[0].args[0], exprs[1].args[0]\n+                        if arg1 == -arg2 and (S.ImaginaryUnit * arg1).is_real:\n+                            k = (arg1/S.ImaginaryUnit).simplify()\n+                            if S.Half in e.free_symbols:\n+                                if S.NegativeOne in e.free_symbols:\n+                                    choices.append(sin(k))  # sin pattern\n+                                else:\n+                                    choices.append(cos(k))  # cos pattern\n+                except:\n+                    pass\n         choices.append(e.rewrite(cos))\n         return min(*choices, key=count_ops)\n     newexpr = bottom_up(expr, exp_trig)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..53865bf 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -179,6 +179,21 @@ def exptrigsimp(expr):\n         choices = [e]\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            if e.count(exp) == 2:\n+                try:\n+                    exprs = [t for t in e.args if isinstance(t, exp)]\n+                    if len(exprs) == 2:\n+                        arg1, arg2 = (exprs[0].args[0], exprs[1].args[0])\n+                        if arg1 == -arg2 and (S.ImaginaryUnit * arg1).is_real:\n+                            k = (arg1 / S.ImaginaryUnit).simplify()\n+                            if S.Half in e.free_symbols:\n+                                if S.NegativeOne in e.free_symbols:\n+                                    choices.append(sin(k))\n+                                else:\n+                                    choices.append(cos(k))\n+                except:\n+                    pass\n         choices.append(e.rewrite(cos))\n         return min(*choices, key=count_ops)\n     newexpr = bottom_up(expr, exp_trig)\n", "normalized_occurrence": 1}
