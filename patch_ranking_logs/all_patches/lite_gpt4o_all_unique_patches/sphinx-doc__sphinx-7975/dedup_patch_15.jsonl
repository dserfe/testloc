{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..6ea5bcf 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -160,17 +160,14 @@ class IndexEntries:\n             k, v = item\n             v[1] = sorted(((si, se) for (si, (se, void, void)) in v[1].items()),\n                           key=keyfunc2)\n-            if v[2] is None:\n-                # now calculate the key\n-                if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n-                    k = k[1:]\n-                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n-                    return letter\n-                else:\n-                    # get all other symbols under one heading\n-                    return _('Symbols')\n+            # now calculate the key\n+            if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n+                k = k[1:]\n+            letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+            if letter.isalpha():\n+                return letter\n             else:\n-                return v[2]\n+                # get all other symbols under one heading\n+                return _('Symbols')\n         return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                for (key_, group) in groupby(newlist, keyfunc3)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..865ff2b 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -105,14 +105,11 @@ class IndexEntries:\n         def keyfunc3(item: Tuple[str, List]) -> str:\n             k, v = item\n             v[1] = sorted(((si, se) for si, (se, void, void) in v[1].items()), key=keyfunc2)\n-            if v[2] is None:\n-                if k.startswith('\\u200f'):\n-                    k = k[1:]\n-                letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n-                    return letter\n-                else:\n-                    return _('Symbols')\n+            if k.startswith('\\u200f'):\n+                k = k[1:]\n+            letter = unicodedata.normalize('NFD', k[0])[0].upper()\n+            if letter.isalpha():\n+                return letter\n             else:\n-                return v[2]\n+                return _('Symbols')\n         return [(key_, list(group)) for key_, group in groupby(newlist, keyfunc3)]\n\\ No newline at end of file\n", "normalized_occurrence": 1}
