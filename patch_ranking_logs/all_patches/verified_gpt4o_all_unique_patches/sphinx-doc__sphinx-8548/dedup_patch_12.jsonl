{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..897f531 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -689,6 +689,13 @@ class Documenter:\n         else:\n             attr_docs = {}\n \n+        def get_inherited_doc(cls, name):\n+            for base in cls.__mro__[1:]:\n+                if name in base.__dict__:\n+                    return getdoc(base.__dict__[name], self.get_attr, self.config.autodoc_inherit_docstrings,\n+                                  self.parent, self.object_name)\n+            return None\n+\n         # process members and determine which to skip\n         for obj in members:\n             membername, member = obj\n@@ -704,13 +711,8 @@ class Documenter:\n                 # Ignore non-string __doc__\n                 doc = None\n \n-            # if the member __doc__ is the same as self's __doc__, it's just\n-            # inherited and therefore not the member's doc\n-            cls = self.get_attr(member, '__class__', None)\n-            if cls:\n-                cls_doc = self.get_attr(cls, '__doc__', None)\n-                if cls_doc == doc:\n-                    doc = None\n+            if not doc:\n+                doc = get_inherited_doc(self.object, membername)\n \n             if isinstance(obj, ObjectMember) and obj.docstring:\n                 # hack for ClassDocumenter to inject docstring via ObjectMember\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c754f31..9c11cda 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -356,6 +356,11 @@ class Documenter:\n             attr_docs = self.analyzer.find_attr_docs()\n         else:\n             attr_docs = {}\n+        def get_inherited_doc(cls, name):\n+            for base in cls.__mro__[1:]:\n+                if name in base.__dict__:\n+                    return getdoc(base.__dict__[name], self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+            return None\n         for obj in members:\n             membername, member = obj\n             if member is INSTANCEATTR:\n@@ -365,11 +370,8 @@ class Documenter:\n             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n             if not isinstance(doc, str):\n                 doc = None\n-            cls = self.get_attr(member, '__class__', None)\n-            if cls:\n-                cls_doc = self.get_attr(cls, '__doc__', None)\n-                if cls_doc == doc:\n-                    doc = None\n+            if not doc:\n+                doc = get_inherited_doc(self.object, membername)\n             if isinstance(obj, ObjectMember) and obj.docstring:\n                 doc = obj.docstring\n             has_doc = bool(doc)\n", "normalized_occurrence": 1}
