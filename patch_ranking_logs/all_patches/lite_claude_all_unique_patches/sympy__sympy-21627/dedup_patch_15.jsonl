{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21627", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex db125b2..ab7895f 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -264,6 +264,16 @@ class sinh(HyperbolicFunction):\n         arg = self.args[0]\n         return arg.is_finite\n \n+    def _eval_is_zero(self):\n+        # cosh(x) = 0 has no real solutions\n+        # For complex solutions: cosh(x) = 0 iff x = (2n+1)\u03c0i/2 where n is integer\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return False\n+        # For complex arguments, we currently return None (undetermined)\n+        # as fully determining complex solutions requires more complex analysis\n+        return None\n+\n     def _eval_is_zero(self):\n         arg = self.args[0]\n         if arg.is_zero:\n@@ -499,6 +509,16 @@ class cosh(HyperbolicFunction):\n         arg = self.args[0]\n         return arg.is_finite\n \n+    def _eval_is_zero(self):\n+        # cosh(x) = 0 has no real solutions\n+        # For complex solutions: cosh(x) = 0 iff x = (2n+1)\u03c0i/2 where n is integer\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return False\n+        # For complex arguments, we currently return None (undetermined)\n+        # as fully determining complex solutions requires more complex analysis\n+        return None\n+\n \n class tanh(HyperbolicFunction):\n     r\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n+    def _eval_is_zero(self):\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return False\n+        return None\n+    def _eval_is_zero(self):\n+        arg = self.args[0]\n+        if arg.is_real:\n+            return False\n+        return None", "normalized_occurrence": 3}
