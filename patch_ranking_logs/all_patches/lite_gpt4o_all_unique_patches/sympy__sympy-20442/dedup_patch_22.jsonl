{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..88cba9a 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -90,7 +90,7 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     expr = sympify(expr)\n \n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n-        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n+        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: Quantity.convert_to(x, target_units, unit_system))\n \n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..0826566 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -29,7 +29,7 @@ def convert_to(expr, target_units, unit_system='SI'):\n         return Add.fromiter((convert_to(i, target_units, unit_system) for i in expr.args))\n     expr = sympify(expr)\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n-        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n+        expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: Quantity.convert_to(x, target_units, unit_system))\n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])\n", "normalized_occurrence": 1}
