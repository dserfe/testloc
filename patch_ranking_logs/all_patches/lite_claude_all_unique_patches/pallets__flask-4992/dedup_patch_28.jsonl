{"model_name_or_path": "agentless_claude", "instance_id": "pallets__flask-4992", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..dd0f8d9 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"\",\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -256,12 +257,15 @@ class Config(dict):\n         :param silent: Ignore the file if it doesn't exist.\n         :return: ``True`` if the file was loaded successfully.\n \n+        :param mode: The mode parameter to pass to :func:`open`, in addition\n+            to ``'r'``. Defaults to text mode. Use ``mode='b'`` for binary.\n+\n         .. versionadded:: 2.0\n         \"\"\"\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, \"r\" + mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex a095695..3e88a1d 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -71,10 +71,10 @@ class Config(dict):\n         for key in dir(obj):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n-    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool=False) -> bool:\n+    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool=False, mode: str='') -> bool:\n         filename = os.path.join(self.root_path, filename)\n         try:\n-            with open(filename) as f:\n+            with open(filename, 'r' + mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "normalized_occurrence": 2}
