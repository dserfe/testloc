{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..385a8d9 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -983,7 +983,15 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        # Use a wrapper to ensure the callback doesn't interfere with event processing\n+        def callback(val):\n+            # Process the callback after the current event handling is complete\n+            if self.ax and self.ax.figure and self.ax.figure.canvas:\n+                canvas = self.ax.figure.canvas\n+                canvas.stop_event_loop()  # Ensure any existing event loop is stopped\n+                func(val)\n+                canvas.draw_idle()  # Use draw_idle instead of immediate draw\n+        return self._observers.connect('changed', callback)\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..695f380 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -795,7 +795,14 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def callback(val):\n+            if self.ax and self.ax.figure and self.ax.figure.canvas:\n+                canvas = self.ax.figure.canvas\n+                canvas.stop_event_loop()\n+                func(val)\n+                canvas.draw_idle()\n+        return self._observers.connect('changed', callback)\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
