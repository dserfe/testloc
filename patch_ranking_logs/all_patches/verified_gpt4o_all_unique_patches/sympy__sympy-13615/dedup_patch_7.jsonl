{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..4f295d7 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,24 +1932,26 @@ class FiniteSet(Set, EvalfMixin):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n+            nums = [m for m in self.args if m.is_number]\n+            syms = [m for m in self.args if m.is_Symbol]\n+\n+            if other == S.Reals:\n+                if nums:\n+                    nums_sorted = sorted(nums)\n+                    intervals = [Interval(S.NegativeInfinity, nums_sorted[0], True, True)]\n+                    for a, b in zip(nums_sorted[:-1], nums_sorted[1:]):\n+                        intervals.append(Interval(a, b, True, True))  # both open\n+                    intervals.append(Interval(nums_sorted[-1], S.Infinity, True, True))\n+                    num_complement = Union(intervals, evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    num_complement = S.Reals\n+\n+                if syms:\n+                    return Complement(num_complement, FiniteSet(*syms), evaluate=False)\n+                else:\n+                    return num_complement\n+            elif nums:\n+                return FiniteSet(*[el for el in other if el not in self])\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..d3bf8ff 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -841,20 +841,24 @@ class FiniteSet(Set, EvalfMixin):\n         return self.__class__(*[el for el in self if el in other])\n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                intervals = []\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+            nums = [m for m in self.args if m.is_number]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if other == S.Reals:\n+                if nums:\n+                    nums_sorted = sorted(nums)\n+                    intervals = [Interval(S.NegativeInfinity, nums_sorted[0], True, True)]\n+                    for a, b in zip(nums_sorted[:-1], nums_sorted[1:]):\n+                        intervals.append(Interval(a, b, True, True))\n+                    intervals.append(Interval(nums_sorted[-1], S.Infinity, True, True))\n+                    num_complement = Union(intervals, evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    num_complement = S.Reals\n+                if syms:\n+                    return Complement(num_complement, FiniteSet(*syms), evaluate=False)\n+                else:\n+                    return num_complement\n+            elif nums:\n+                return FiniteSet(*[el for el in other if el not in self])\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
