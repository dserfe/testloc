{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 515b944..d253408 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -11,6 +11,7 @@ import re\n import warnings\n from re import Pattern\n \n+import regex\n from pylint import utils\n \n \n@@ -23,7 +24,16 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        return regex.compile(value)\n+    except regex.error as e:\n+        try:\n+            # Fallback to re for simpler patterns\n+            return re.compile(value)\n+        except re.error:\n+            raise optparse.OptionValueError(\n+                f\"Invalid regexp value for {name}: {str(e)}\"\n+            ) from None\n \n \n # pylint: disable=unused-argument\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex bdedcd7..175ab78 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -5,13 +5,20 @@ import pathlib\n import re\n import warnings\n from re import Pattern\n+import regex\n from pylint import utils\n def _csv_validator(_, name, value):\n     return utils._check_csv(value)\n def _regexp_validator(_, name, value):\n     if hasattr(value, 'pattern'):\n         return value\n-    return re.compile(value)\n+    try:\n+        return regex.compile(value)\n+    except regex.error as e:\n+        try:\n+            return re.compile(value)\n+        except re.error:\n+            raise optparse.OptionValueError(f'Invalid regexp value for {name}: {str(e)}') from None\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n def _regexp_paths_csv_validator(_, name: str, value: str | list[Pattern[str]]) -> list[Pattern[str]]:\n", "normalized_occurrence": 1}
