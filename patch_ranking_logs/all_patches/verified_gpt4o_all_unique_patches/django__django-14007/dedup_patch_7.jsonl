{"model_name_or_path": "agentless", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex efe8580..ed133b5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -907,10 +907,13 @@ class Model(metaclass=ModelBase):\n         Do an INSERT. If returning_fields is defined then this method should\n         return the newly created data for the model.\n         \"\"\"\n-        return manager._insert(\n+        returned_fields = manager._insert(\n             [self], fields=fields, returning_fields=returning_fields,\n-            using=using, raw=raw,\n+            using=using, raw=raw\n         )\n+        for field, value in zip(returning_fields, returned_fields):\n+            setattr(self, field.attname, field.from_db_value(value, None, using, context=None))\n+        return returned_fields\n \n     def _prepare_related_fields_for_save(self, operation_name):\n         # Ensure that a model instance without a PK hasn't been assigned to\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 42c813c..ca4880e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -483,7 +483,10 @@ class Model(metaclass=ModelBase):\n             return filtered.exists() and (filtered._update(values) > 0 or filtered.exists())\n         return filtered._update(values) > 0\n     def _do_insert(self, manager, using, fields, returning_fields, raw):\n-        return manager._insert([self], fields=fields, returning_fields=returning_fields, using=using, raw=raw)\n+        returned_fields = manager._insert([self], fields=fields, returning_fields=returning_fields, using=using, raw=raw)\n+        for field, value in zip(returning_fields, returned_fields):\n+            setattr(self, field.attname, field.from_db_value(value, None, using, context=None))\n+        return returned_fields\n     def _prepare_related_fields_for_save(self, operation_name):\n         for field in self._meta.concrete_fields:\n             if field.is_relation and field.is_cached(self):\n", "normalized_occurrence": 1}
