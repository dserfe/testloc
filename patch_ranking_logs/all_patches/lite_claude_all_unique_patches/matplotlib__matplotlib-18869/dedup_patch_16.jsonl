{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..5863aa1 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -537,6 +537,39 @@ def matplotlib_fname():\n                        \"install is broken\")\n \n \n+def _get_version_info():\n+    \"\"\"Parse version string into a namedtuple for easy comparison.\"\"\"\n+    from collections import namedtuple\n+    import re\n+\n+    VersionInfo = namedtuple('VersionInfo', ['major', 'minor', 'micro', 'releaselevel', 'serial'])\n+    \n+    # Parse __version__ using regex\n+    match = re.match(r'(\\d+)\\.(\\d+)\\.(\\d+)((?:a|b|rc)\\d+)?(?:\\.post\\d+)?(?:\\.dev\\d+)?', __version__)\n+    if match:\n+        major, minor, micro, releaselevel = match.groups()\n+        \n+        # Convert to integers\n+        major = int(major)\n+        minor = int(minor)\n+        micro = int(micro)\n+        \n+        # Parse release level and serial\n+        if releaselevel:\n+            serial = int(releaselevel[1:])\n+            releaselevel = releaselevel[0]\n+        else:\n+            releaselevel = 'final'\n+            serial = 0\n+            \n+        return VersionInfo(major, minor, micro, releaselevel, serial)\n+    \n+    # Return a dummy version if parsing fails\n+    return VersionInfo(0, 0, 0, 'unknown', 0)\n+\n+version_info = _get_version_info()\n+\n+\n # rcParams deprecated and automatically mapped to another key.\n # Values are tuples of (version, new_name, f_old2new, f_new2old).\n _deprecated_map = {}\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n+def _get_version_info():\n+    from collections import namedtuple\n+    import re\n+    VersionInfo = namedtuple('VersionInfo', ['major', 'minor', 'micro', 'releaselevel', 'serial'])\n+    match = re.match('(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)((?:a|b|rc)\\\\d+)?(?:\\\\.post\\\\d+)?(?:\\\\.dev\\\\d+)?', __version__)\n+    if match:\n+        major, minor, micro, releaselevel = match.groups()\n+        major = int(major)\n+        minor = int(minor)\n+        micro = int(micro)\n+        if releaselevel:\n+            serial = int(releaselevel[1:])\n+            releaselevel = releaselevel[0]\n+        else:\n+            releaselevel = 'final'\n+            serial = 0\n+        return VersionInfo(major, minor, micro, releaselevel, serial)\n+    return VersionInfo(0, 0, 0, 'unknown', 0)\n+version_info = _get_version_info()", "normalized_occurrence": 1}
