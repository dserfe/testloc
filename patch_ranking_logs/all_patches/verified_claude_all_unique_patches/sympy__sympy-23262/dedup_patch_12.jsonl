{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9dd6fe4..1cbd62a 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -961,7 +961,10 @@ def _recursive_to_string(doprint, arg):\n             left, right = \"()\"\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n+        elements = [_recursive_to_string(doprint, e) for e in arg]\n+        if len(elements) == 1 and isinstance(arg, tuple):\n+            return left + elements[0] + ',' + right\n+        return left + ', '.join(elements) + right\n     elif isinstance(arg, str):\n         return arg\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 931ff9a..697f3d1 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -204,7 +204,10 @@ def _recursive_to_string(doprint, arg):\n             left, right = '()'\n         else:\n             raise NotImplementedError('unhandled type: %s, %s' % (type(arg), arg))\n-        return left + ', '.join((_recursive_to_string(doprint, e) for e in arg)) + right\n+        elements = [_recursive_to_string(doprint, e) for e in arg]\n+        if len(elements) == 1 and isinstance(arg, tuple):\n+            return left + elements[0] + ',' + right\n+        return left + ', '.join(elements) + right\n     elif isinstance(arg, str):\n         return arg\n     else:\n", "normalized_occurrence": 1}
