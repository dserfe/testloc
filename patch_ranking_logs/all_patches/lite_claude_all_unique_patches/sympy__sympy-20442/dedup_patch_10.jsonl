{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..35f93eb 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -18,6 +18,12 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n     dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n+    \n+    # Check dimensional compatibility\n+    combined_target_dim = reduce(lambda x, y: x * y, target_dims)\n+    if expr_dim != combined_target_dim:\n+        return None\n+        \n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n \n@@ -30,8 +36,13 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])\n     exprmat = Matrix([dim_dependencies.get(k, 0) for k in canon_dim_units])\n \n-    res_exponents = camat.solve_least_squares(exprmat, method=None)\n-    return res_exponents\n+    try:\n+        # Use exact solver instead of least squares\n+        res_exponents = camat.solve(exprmat)\n+        return res_exponents\n+    except ValueError:\n+        # If no exact solution exists, return None\n+        return None\n \n \n def convert_to(expr, target_units, unit_system=\"SI\"):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..cd886b4 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -10,6 +10,9 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n     dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n+    combined_target_dim = reduce(lambda x, y: x * y, target_dims)\n+    if expr_dim != combined_target_dim:\n+        return None\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n     if not canon_expr_units.issubset(set(canon_dim_units)):\n@@ -18,8 +21,11 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     canon_dim_units = [i for i in canon_dim_units if not (i in seen or seen.add(i))]\n     camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])\n     exprmat = Matrix([dim_dependencies.get(k, 0) for k in canon_dim_units])\n-    res_exponents = camat.solve_least_squares(exprmat, method=None)\n-    return res_exponents\n+    try:\n+        res_exponents = camat.solve(exprmat)\n+        return res_exponents\n+    except ValueError:\n+        return None\n def convert_to(expr, target_units, unit_system='SI'):\n     from sympy.physics.units import UnitSystem\n     unit_system = UnitSystem.get_unit_system(unit_system)\n", "normalized_occurrence": 1}
