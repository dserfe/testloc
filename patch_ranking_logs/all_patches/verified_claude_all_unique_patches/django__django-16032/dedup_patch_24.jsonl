{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 250c6ee..ece4778 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1148,6 +1148,8 @@ class Query(BaseExpression):\n         return clone\n \n     def get_external_cols(self):\n+        if self.subquery and any(isinstance(c, ExpressionWrapper) and isinstance(c.expression, In) for c in self.where.children):\n+            return []\n         exprs = chain(self.annotations.values(), self.where.children)\n         return [\n             col\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4a84de0..16f36aa 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -595,6 +595,8 @@ class Query(BaseExpression):\n             clone.external_aliases[alias] = isinstance(table, Join) and table.join_field.related_model._meta.db_table != alias or (isinstance(table, BaseTable) and table.table_name != table.table_alias)\n         return clone\n     def get_external_cols(self):\n+        if self.subquery and any((isinstance(c, ExpressionWrapper) and isinstance(c.expression, In) for c in self.where.children)):\n+            return []\n         exprs = chain(self.annotations.values(), self.where.children)\n         return [col for col in self._gen_cols(exprs, include_external=True) if col.alias in self.external_aliases]\n     def get_group_by_cols(self, alias=None):\n", "normalized_occurrence": 1}
