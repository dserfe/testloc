{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..6905f33 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -168,8 +168,9 @@ class CheckExternalLinksBuilder(Builder):\n                                             auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n \n+                    response.raise_for_status()  # Raise an HTTPError if the HTTP request returned an unsuccessful status code\n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        return 'broken', __(\"Anchor '%s' not found\") % anchor, 0\n                 else:\n                     try:\n                         # try a HEAD request first, which should be easier on\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex ace1ed3..3c5163a 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -98,8 +98,9 @@ class CheckExternalLinksBuilder(Builder):\n                 if anchor and self.app.config.linkcheck_anchors:\n                     response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n+                    response.raise_for_status()\n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        return ('broken', __(\"Anchor '%s' not found\") % anchor, 0)\n                 else:\n                     try:\n                         response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n", "normalized_occurrence": 1}
