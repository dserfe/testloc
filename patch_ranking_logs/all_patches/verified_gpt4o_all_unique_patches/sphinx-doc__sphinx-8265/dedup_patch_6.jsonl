{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0e8e503..3d8bbe2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1214,7 +1214,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, follow_wrapped=True,\n-                                    type_aliases=self.env.config.autodoc_type_aliases)\n+                                    type_aliases=self.env.config.autodoc_type_aliases,\n+                                    evaluate_defaults=True)\n             args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n@@ -1829,12 +1830,14 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                 if inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n                     sig = inspect.signature(self.object, bound_method=False,\n-                                            type_aliases=self.env.config.autodoc_type_aliases)\n+                                            type_aliases=self.env.config.autodoc_type_aliases,\n+                                            evaluate_defaults=True)\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n-                                            type_aliases=self.env.config.autodoc_type_aliases)\n+                                            type_aliases=self.env.config.autodoc_type_aliases,\n+                                            evaluate_defaults=True)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0ae2e22..75d6ba6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -893,7 +893,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             kwargs.setdefault('show_annotation', False)\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-            sig = inspect.signature(self.object, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n+            sig = inspect.signature(self.object, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases, evaluate_defaults=True)\n             args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n@@ -1342,10 +1342,10 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n             else:\n                 if inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     self.env.app.emit('autodoc-before-process-signature', self.object, False)\n-                    sig = inspect.signature(self.object, bound_method=False, type_aliases=self.env.config.autodoc_type_aliases)\n+                    sig = inspect.signature(self.object, bound_method=False, type_aliases=self.env.config.autodoc_type_aliases, evaluate_defaults=True)\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n-                    sig = inspect.signature(self.object, bound_method=True, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n+                    sig = inspect.signature(self.object, bound_method=True, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases, evaluate_defaults=True)\n                 args = stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__('Failed to get a method signature for %s: %s'), self.fullname, exc)\n", "normalized_occurrence": 1}
