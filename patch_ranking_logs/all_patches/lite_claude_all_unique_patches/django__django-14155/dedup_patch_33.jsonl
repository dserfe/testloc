{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..f566511 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,6 +45,14 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle functools.partial\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            # This appears to be a functools.partial\n+            self._partial = func\n+            func = func.func\n+        else:\n+            self._partial = None\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -52,6 +60,14 @@ class ResolverMatch:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n \n+        # If this was a partial, append the partial details\n+        if self._partial:\n+            partial_args = ', '.join(\n+                [repr(arg) for arg in self._partial.args] +\n+                [f'{k}={repr(v)}' for k, v in (self._partial.keywords or {}).items()]\n+            )\n+            self._func_path = f'{self._func_path}({partial_args})'\n+\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..5e380eb 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,10 +29,18 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            self._partial = func\n+            func = func.func\n+        else:\n+            self._partial = None\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n+        if self._partial:\n+            partial_args = ', '.join([repr(arg) for arg in self._partial.args] + [f'{k}={repr(v)}' for k, v in (self._partial.keywords or {}).items()])\n+            self._func_path = f'{self._func_path}({partial_args})'\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n", "normalized_occurrence": 1}
