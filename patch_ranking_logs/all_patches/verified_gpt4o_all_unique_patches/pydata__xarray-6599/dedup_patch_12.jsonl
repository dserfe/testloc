{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..aaf77d2 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -500,8 +500,8 @@ def np_timedelta64_to_float(array, datetime_unit):\n     The array is first converted to microseconds, which is less likely to\n     cause overflow errors.\n     \"\"\"\n-    array = array.astype(\"timedelta64[ns]\").astype(np.float64)\n-    conversion_factor = np.timedelta64(1, \"ns\") / np.timedelta64(1, datetime_unit)\n+    array = array.astype(f\"timedelta64[{datetime_unit}]\").astype(np.float64)\n+    conversion_factor = np.timedelta64(1, datetime_unit).astype(np.float64)\n     return conversion_factor * array\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..2aab1e1 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -260,8 +260,8 @@ def timedelta_to_numeric(value, datetime_unit='ns', dtype=float):\n def _to_pytimedelta(array, unit='us'):\n     return array.astype(f'timedelta64[{unit}]').astype(datetime.timedelta)\n def np_timedelta64_to_float(array, datetime_unit):\n-    array = array.astype('timedelta64[ns]').astype(np.float64)\n-    conversion_factor = np.timedelta64(1, 'ns') / np.timedelta64(1, datetime_unit)\n+    array = array.astype(f'timedelta64[{datetime_unit}]').astype(np.float64)\n+    conversion_factor = np.timedelta64(1, datetime_unit).astype(np.float64)\n     return conversion_factor * array\n def pd_timedelta_to_float(value, datetime_unit):\n     value = value.to_timedelta64()\n", "normalized_occurrence": 1}
