{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..43230ec 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,11 +178,21 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n+            result = {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n             }\n+            \n+            # Handle chained exceptions\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for exc_repr in rep.longrepr.chain:\n+                    exc_data = disassembled_report(exc_repr)\n+                    chain.append(exc_data)\n+                result['chain'] = chain\n+                \n+            return result\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n@@ -257,6 +267,53 @@ class BaseReport:\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n+\n+                # Handle chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for exc_data in reportdict[\"longrepr\"][\"chain\"]:\n+                        reprtraceback = exc_data[\"reprtraceback\"]\n+                        reprcrash = exc_data[\"reprcrash\"]\n+                        \n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback[\"reprentries\"]:\n+                            data = entry_data[\"data\"]\n+                            entry_type = entry_data[\"type\"]\n+                            if entry_type == \"ReprEntry\":\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data[\"reprfuncargs\"]:\n+                                    reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                                if data[\"reprfileloc\"]:\n+                                    reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                                if data[\"reprlocals\"]:\n+                                    reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                                reprentry = ReprEntry(\n+                                    lines=data[\"lines\"],\n+                                    reprfuncargs=reprfuncargs,\n+                                    reprlocals=reprlocals,\n+                                    filelocrepr=reprfileloc,\n+                                    style=data[\"style\"],\n+                                )\n+                            elif entry_type == \"ReprEntryNative\":\n+                                reprentry = ReprEntryNative(data[\"lines\"])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        \n+                        reprtraceback[\"reprentries\"] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**reprtraceback),\n+                            reprcrash=ReprFileLocation(**reprcrash),\n+                        )\n+                        for section in exc_data[\"sections\"]:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    \n+                    exception_info.chain = chain\n+                \n                 reportdict[\"longrepr\"] = exception_info\n \n         return cls(**reportdict)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..38a7da1 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,14 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            result = {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for exc_repr in rep.longrepr.chain:\n+                    exc_data = disassembled_report(exc_repr)\n+                    chain.append(exc_data)\n+                result['chain'] = chain\n+            return result\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -133,6 +140,37 @@ class BaseReport:\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for exc_data in reportdict['longrepr']['chain']:\n+                        reprtraceback = exc_data['reprtraceback']\n+                        reprcrash = exc_data['reprcrash']\n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback['reprentries']:\n+                            data = entry_data['data']\n+                            entry_type = entry_data['type']\n+                            if entry_type == 'ReprEntry':\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data['reprfuncargs']:\n+                                    reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                                if data['reprfileloc']:\n+                                    reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                                if data['reprlocals']:\n+                                    reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                                reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                            elif entry_type == 'ReprEntryNative':\n+                                reprentry = ReprEntryNative(data['lines'])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        reprtraceback['reprentries'] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                        for section in exc_data['sections']:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n                 reportdict['longrepr'] = exception_info\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n", "normalized_occurrence": 1}
