{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..5324e0b 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -395,9 +395,8 @@ class ScalarMappable:\n         \"\"\"\n         self._A = None\n         self._norm = None  # So that the setter knows we're initializing.\n-        self.set_norm(norm)  # The Normalize instance of this ScalarMappable.\n-        self.cmap = None  # So that the setter knows we're initializing.\n-        self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n+        self.cmap = _ensure_cmap(cmap)\n+        self.norm = norm\n         #: The last colorbar associated with this ScalarMappable. May be None.\n         self.colorbar = None\n         self.callbacks = cbook.CallbackRegistry(signals=[\"changed\"])\n@@ -613,11 +612,12 @@ class ScalarMappable:\n         # Remove the current callback and connect to the new one\n         if not in_init:\n             self.norm.callbacks.disconnect(self._id_norm)\n-        self._norm = norm\n-        self._id_norm = self.norm.callbacks.connect('changed',\n-                                                    self.changed)\n+        self._norm = norm  # Set the norm\n+        self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n-            self.changed()\n+            self.changed()  # Notify listeners of the change\n+        if self.colorbar:  # Update the colorbar if it exists\n+            self.colorbar.update_normal(self)\n \n     def set_norm(self, norm):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..0b47316 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -95,9 +95,8 @@ class ScalarMappable:\n     def __init__(self, norm=None, cmap=None):\n         self._A = None\n         self._norm = None\n-        self.set_norm(norm)\n-        self.cmap = None\n-        self.set_cmap(cmap)\n+        self.cmap = _ensure_cmap(cmap)\n+        self.norm = norm\n         self.colorbar = None\n         self.callbacks = cbook.CallbackRegistry(signals=['changed'])\n     def _scale_norm(self, norm, vmin, vmax):\n@@ -194,6 +193,8 @@ class ScalarMappable:\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n             self.changed()\n+        if self.colorbar:\n+            self.colorbar.update_normal(self)\n     def set_norm(self, norm):\n         self.norm = norm\n     def autoscale(self):\n", "normalized_occurrence": 1}
