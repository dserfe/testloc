{"model_name_or_path": "agentless", "instance_id": "django__django-12262", "model_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex e9453ed..34ab818 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -251,58 +251,51 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n     args = []\n     kwargs = {}\n     unhandled_params = list(params)\n-    unhandled_kwargs = [\n-        kwarg for kwarg in kwonly\n-        if not kwonly_defaults or kwarg not in kwonly_defaults\n-    ]\n+    unhandled_kwargs = list(kwonly)\n     for bit in bits:\n         # First we try to extract a potential kwarg from the bit\n         kwarg = token_kwargs([bit], parser)\n         if kwarg:\n             # The kwarg was successfully extracted\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and varkw is None:\n+            if param not in params and param not in kwonly and varkw is None:\n                 # An unexpected keyword argument was supplied\n                 raise TemplateSyntaxError(\n                     \"'%s' received unexpected keyword argument '%s'\" %\n                     (name, param))\n-            elif param in kwargs:\n+            if param in kwargs:\n                 # The keyword argument has already been supplied once\n                 raise TemplateSyntaxError(\n                     \"'%s' received multiple values for keyword argument '%s'\" %\n                     (name, param))\n-            else:\n-                # All good, record the keyword argument\n-                kwargs[str(param)] = value\n-                if param in unhandled_params:\n-                    # If using the keyword syntax for a positional arg, then\n-                    # consume it.\n-                    unhandled_params.remove(param)\n-                elif param in unhandled_kwargs:\n-                    # Same for keyword-only arguments\n-                    unhandled_kwargs.remove(param)\n+            kwargs[str(param)] = value\n+            if param in unhandled_params:\n+                unhandled_params.remove(param)\n+            if param in unhandled_kwargs:\n+                unhandled_kwargs.remove(param)\n         else:\n             if kwargs:\n                 raise TemplateSyntaxError(\n                     \"'%s' received some positional argument(s) after some \"\n                     \"keyword argument(s)\" % name)\n-            else:\n-                # Record the positional argument\n-                args.append(parser.compile_filter(bit))\n-                try:\n-                    # Consume from the list of expected positional arguments\n-                    unhandled_params.pop(0)\n-                except IndexError:\n-                    if varargs is None:\n-                        raise TemplateSyntaxError(\n-                            \"'%s' received too many positional arguments\" %\n-                            name)\n+            args.append(parser.compile_filter(bit))\n+            try:\n+                unhandled_params.pop(0)\n+            except IndexError:\n+                if varargs is None:\n+                    raise TemplateSyntaxError(\n+                        \"'%s' received too many positional arguments\" %\n+                        name)\n     if defaults is not None:\n-        # Consider the last n params handled, where n is the\n-        # number of defaults.\n         unhandled_params = unhandled_params[:-len(defaults)]\n+    if kwonly_defaults is not None:\n+        for kwonly_arg in kwonly:\n+            if kwonly_arg in kwonly_defaults:\n+                try:\n+                    unhandled_kwargs.remove(kwonly_arg)\n+                except ValueError:\n+                    pass\n     if unhandled_params or unhandled_kwargs:\n-        # Some positional arguments were not supplied\n         raise TemplateSyntaxError(\n             \"'%s' did not receive value(s) for the argument(s): %s\" %\n             (name, \", \".join(\"'%s'\" % p for p in unhandled_params + unhandled_kwargs)))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex fb58a77..16cc58b 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -146,24 +146,23 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_de\n     args = []\n     kwargs = {}\n     unhandled_params = list(params)\n-    unhandled_kwargs = [kwarg for kwarg in kwonly if not kwonly_defaults or kwarg not in kwonly_defaults]\n+    unhandled_kwargs = list(kwonly)\n     for bit in bits:\n         kwarg = token_kwargs([bit], parser)\n         if kwarg:\n             param, value = kwarg.popitem()\n-            if param not in params and param not in unhandled_kwargs and (varkw is None):\n+            if param not in params and param not in kwonly and (varkw is None):\n                 raise TemplateSyntaxError(\"'%s' received unexpected keyword argument '%s'\" % (name, param))\n-            elif param in kwargs:\n+            if param in kwargs:\n                 raise TemplateSyntaxError(\"'%s' received multiple values for keyword argument '%s'\" % (name, param))\n-            else:\n-                kwargs[str(param)] = value\n-                if param in unhandled_params:\n-                    unhandled_params.remove(param)\n-                elif param in unhandled_kwargs:\n-                    unhandled_kwargs.remove(param)\n-        elif kwargs:\n-            raise TemplateSyntaxError(\"'%s' received some positional argument(s) after some keyword argument(s)\" % name)\n+            kwargs[str(param)] = value\n+            if param in unhandled_params:\n+                unhandled_params.remove(param)\n+            if param in unhandled_kwargs:\n+                unhandled_kwargs.remove(param)\n         else:\n+            if kwargs:\n+                raise TemplateSyntaxError(\"'%s' received some positional argument(s) after some keyword argument(s)\" % name)\n             args.append(parser.compile_filter(bit))\n             try:\n                 unhandled_params.pop(0)\n@@ -172,6 +171,13 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_de\n                     raise TemplateSyntaxError(\"'%s' received too many positional arguments\" % name)\n     if defaults is not None:\n         unhandled_params = unhandled_params[:-len(defaults)]\n+    if kwonly_defaults is not None:\n+        for kwonly_arg in kwonly:\n+            if kwonly_arg in kwonly_defaults:\n+                try:\n+                    unhandled_kwargs.remove(kwonly_arg)\n+                except ValueError:\n+                    pass\n     if unhandled_params or unhandled_kwargs:\n         raise TemplateSyntaxError(\"'%s' did not receive value(s) for the argument(s): %s\" % (name, ', '.join((\"'%s'\" % p for p in unhandled_params + unhandled_kwargs))))\n     return (args, kwargs)\n", "normalized_occurrence": 1}
