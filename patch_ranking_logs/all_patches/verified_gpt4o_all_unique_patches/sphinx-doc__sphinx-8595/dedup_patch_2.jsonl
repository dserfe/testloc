{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..09d0f4a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1077,13 +1077,16 @@ class ModuleDocumenter(Documenter):\n             if not self.__all__:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n-                return True, list(members.values())\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n+                if self.__all__ is None:\n+                    return True, list(members.values())\n+                elif self.__all__ == []:\n+                    return False, []\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n \n-                return False, list(members.values())\n+                    return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..3106240 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -576,12 +576,15 @@ class ModuleDocumenter(Documenter):\n         members = self.get_module_members()\n         if want_all:\n             if not self.__all__:\n-                return (True, list(members.values()))\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-                return (False, list(members.values()))\n+                if self.__all__ is None:\n+                    return (True, list(members.values()))\n+                elif self.__all__ == []:\n+                    return (False, [])\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+                    return (False, list(members.values()))\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "normalized_occurrence": 1}
