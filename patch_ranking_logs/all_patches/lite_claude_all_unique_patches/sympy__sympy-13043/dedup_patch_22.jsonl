{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13043", "model_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 1e4efa0..c55f490 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -569,10 +569,10 @@ def decompose(expr, separate=False):\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                # Return the terms directly from degrees list\n+                return [term for _, term in degrees]\n             else:\n-                for monom in degrees:\n-                    degree, term = monom\n+                for degree, term in degrees:\n                     if poly_dict.get(degree):\n                         poly_dict[degree] += term\n                     else:\n@@ -593,7 +593,9 @@ def decompose(expr, separate=False):\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        # For non-Add expressions, convert dict to sorted list based on degrees\n+        items = sorted(poly_dict.items(), key=lambda x: x[0])\n+        return [term for _, term in items]\n     return poly_dict\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex 5b23da9..8d81626 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -235,10 +235,9 @@ def decompose(expr, separate=False):\n             symbols = expr.atoms(Symbol)\n             degrees = [(sum(degree_list(monom, *symbols)), monom) for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                return [term for _, term in degrees]\n             else:\n-                for monom in degrees:\n-                    degree, term = monom\n+                for degree, term in degrees:\n                     if poly_dict.get(degree):\n                         poly_dict[degree] += term\n                     else:\n@@ -258,7 +257,8 @@ def decompose(expr, separate=False):\n     else:\n         poly_dict[0] = expr\n     if separate:\n-        return list(poly_dict.values())\n+        items = sorted(poly_dict.items(), key=lambda x: x[0])\n+        return [term for _, term in items]\n     return poly_dict\n def clockwise_sort(poly):\n     n = len(poly.vertices)\n", "normalized_occurrence": 1}
