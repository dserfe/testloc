{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16046", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex e685310..8896337 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n \n from django.conf import settings\n@@ -33,6 +34,9 @@ def format(\n     # Make the common case fast\n     if isinstance(number, int) and not use_grouping and not decimal_pos:\n         return mark_safe(number)\n+    # Handle null/empty values\n+    if number is None or number == \"\":\n+        return \"\"\n     # sign\n     sign = \"\"\n     # Treat potentially very large/small floats as Decimals.\n@@ -101,4 +105,4 @@ def format(\n             int_part_gd += digit\n             cnt += 1\n         int_part = int_part_gd[::-1]\n-    return sign + int_part + dec_part\n+    return sign + int_part + dec_part\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 6c888ad..1fc5b41 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -7,6 +7,8 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', f\n     use_grouping = use_grouping and grouping != 0\n     if isinstance(number, int) and (not use_grouping) and (not decimal_pos):\n         return mark_safe(number)\n+    if number is None or number == '':\n+        return ''\n     sign = ''\n     if isinstance(number, float) and 'e' in str(number).lower():\n         number = Decimal(str(number))\n", "normalized_occurrence": 2}
