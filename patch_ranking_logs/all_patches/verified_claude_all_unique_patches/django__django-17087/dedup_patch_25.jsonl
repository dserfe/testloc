{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..ac573a8 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,14 +100,27 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        module_path = path\n+        # Handle the special django.db.models case first\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n-        return name, imports\n+            name = \"models.\" + path.replace(\"django.db.models.\", \"\")\n+            return name, imports\n+            \n+        # Find the module path by looking for the first occurrence of a lowercase letter\n+        # after a dot, which indicates the start of a module/attribute\n+        parts = path.split(\".\")\n+        for i, part in enumerate(parts):\n+            if i > 0 and part[0].islower():\n+                module = \".\".join(parts[:i])\n+                name = \".\".join(parts[i:])\n+                imports = {\"import %s\" % module}\n+                return f\"{module}.{name}\", imports\n+                \n+        # Fallback to the original behavior\n+        module, name = path.rsplit(\".\", 1)\n+        imports = {\"import %s\" % module}\n+        return path, imports\n \n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..184df0e 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,14 +70,21 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        module_path = path\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n-        return (name, imports)\n+            name = 'models.' + path.replace('django.db.models.', '')\n+            return (name, imports)\n+        parts = path.split('.')\n+        for i, part in enumerate(parts):\n+            if i > 0 and part[0].islower():\n+                module = '.'.join(parts[:i])\n+                name = '.'.join(parts[i:])\n+                imports = {'import %s' % module}\n+                return (f'{module}.{name}', imports)\n+        module, name = path.rsplit('.', 1)\n+        imports = {'import %s' % module}\n+        return (path, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n class DictionarySerializer(BaseSerializer):\n", "normalized_occurrence": 1}
