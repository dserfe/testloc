{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..764692c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -392,7 +392,13 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 elif trans == \"drop\":\n                     continue\n                 elif _is_empty_column_selection(columns):\n-                    continue\n+                    # For pandas output compatibility, don't skip empty transformers\n+                    # but return them with empty feature sets\n+                    trans = FunctionTransformer(\n+                        accept_sparse=True,\n+                        check_inverse=False,\n+                        feature_names_out=\"one-to-one\",\n+                    ).set_output(transform=output_config[\"dense\"])\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..785ca68 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -75,7 +75,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 elif trans == 'drop':\n                     continue\n                 elif _is_empty_column_selection(columns):\n-                    continue\n+                    trans = FunctionTransformer(accept_sparse=True, check_inverse=False, feature_names_out='one-to-one').set_output(transform=output_config['dense'])\n             if column_as_strings:\n                 columns_is_scalar = np.isscalar(columns)\n                 indices = self._transformer_to_input_indices[name]\n", "normalized_occurrence": 1}
