{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..b0db226 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -214,7 +214,19 @@ class Point(GeometryEntity):\n \n         \"\"\"\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            if isinstance(other, Mul):\n+                scalar, point = None, None\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    else:\n+                        scalar = arg\n+                if scalar is not None and point is not None:\n+                    s, o = Point._normalize_dimension(self, point * scalar)\n+                else:\n+                    raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            else:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..d941364 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -63,7 +63,19 @@ class Point(GeometryEntity):\n         return Point.distance(origin, self)\n     def __add__(self, other):\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            if isinstance(other, Mul):\n+                scalar, point = (None, None)\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    else:\n+                        scalar = arg\n+                if scalar is not None and point is not None:\n+                    s, o = Point._normalize_dimension(self, point * scalar)\n+                else:\n+                    raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            else:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n", "normalized_occurrence": 1}
