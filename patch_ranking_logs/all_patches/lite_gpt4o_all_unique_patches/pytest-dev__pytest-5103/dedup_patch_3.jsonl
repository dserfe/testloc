{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..1cec975 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,7 +964,39 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n+    def _unroll_iterable(self, iterable, pred_func_name):\n+        \"\"\"Unrolls an iterable for all/any to provide better assertion messages.\"\"\"\n+        elements = [self.visit(elt) for elt in iterable.elts]\n+        var_name = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(var_name, ast.Store())], iterable))\n+\n+        checks = []\n+        for element, expl in elements:\n+            pred_call = ast_Call(ast.Name(pred_func_name, ast.Load()), [element], [])\n+            res = self.assign(pred_call)\n+            checks.append((res, expl))\n+\n+        return var_name, checks\n+\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and isinstance(call.args[0], ast.GeneratorExp):\n+            func_name = call.func.id\n+            gen_expr = call.args[0]\n+            var_name, checks = self._unroll_iterable(gen_expr, func_name)\n+            \n+            res_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(True if func_name == 'all' else False)))\n+\n+            for res, expl in checks:\n+                if func_name == 'all':\n+                    condition = ast.UnaryOp(ast.Not(), res)\n+                else:\n+                    condition = res\n+\n+                self.statements.append(ast.If(condition, self.on_failure + [ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(False))], []))\n+\n+            res = ast.Name(res_var, ast.Load())\n+            return res, f\"{func_name}({', '.join(expl for _, expl in checks)})\"\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1113,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..f93812c 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,7 +543,32 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n+    def _unroll_iterable(self, iterable, pred_func_name):\n+        elements = [self.visit(elt) for elt in iterable.elts]\n+        var_name = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(var_name, ast.Store())], iterable))\n+        checks = []\n+        for element, expl in elements:\n+            pred_call = ast_Call(ast.Name(pred_func_name, ast.Load()), [element], [])\n+            res = self.assign(pred_call)\n+            checks.append((res, expl))\n+        return (var_name, checks)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and isinstance(call.args[0], ast.GeneratorExp):\n+            func_name = call.func.id\n+            gen_expr = call.args[0]\n+            var_name, checks = self._unroll_iterable(gen_expr, func_name)\n+            res_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(True if func_name == 'all' else False)))\n+            for res, expl in checks:\n+                if func_name == 'all':\n+                    condition = ast.UnaryOp(ast.Not(), res)\n+                else:\n+                    condition = res\n+                self.statements.append(ast.If(condition, self.on_failure + [ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(False))], []))\n+            res = ast.Name(res_var, ast.Load())\n+            return (res, f\"{func_name}({', '.join((expl for _, expl in checks))})\")\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
