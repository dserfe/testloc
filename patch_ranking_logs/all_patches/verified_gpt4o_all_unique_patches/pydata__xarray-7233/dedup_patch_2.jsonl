{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7233", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c0dd828..86e3dc5 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1029,6 +1029,8 @@ class Dataset(\n     ) -> T_Dataset:\n         \"\"\"Replace variables with recalculated dimensions.\"\"\"\n         dims = calculate_dimensions(variables)\n+        if coord_names is None:\n+            coord_names = self._coord_names\n         return self._replace(\n             variables, coord_names, dims, attrs, indexes, inplace=inplace\n         )\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex f13a66b..3d477b5 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -397,6 +397,8 @@ class Dataset(DataWithCoords, DatasetAggregations, DatasetArithmetic, Mapping[Ha\n         return obj\n     def _replace_with_new_dims(self: T_Dataset, variables: dict[Hashable, Variable], coord_names: set | None=None, attrs: dict[Hashable, Any] | None | Default=_default, indexes: dict[Hashable, Index] | None=None, inplace: bool=False) -> T_Dataset:\n         dims = calculate_dimensions(variables)\n+        if coord_names is None:\n+            coord_names = self._coord_names\n         return self._replace(variables, coord_names, dims, attrs, indexes, inplace=inplace)\n     def _replace_vars_and_dims(self: T_Dataset, variables: dict[Hashable, Variable], coord_names: set | None=None, dims: dict[Hashable, int] | None=None, attrs: dict[Hashable, Any] | None | Default=_default, inplace: bool=False) -> T_Dataset:\n         if dims is None:\n", "normalized_occurrence": 1}
