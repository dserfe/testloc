{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..23aab44 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -213,8 +213,8 @@ class Token(CodegenAST):\n         if len(args) == 1 and not kwargs and isinstance(args[0], cls):\n             return args[0]\n \n-        if len(args) > len(cls.__slots__):\n-            raise ValueError(\"Too many arguments (%d), expected at most %d\" % (len(args), len(cls.__slots__)))\n+        if len(args) > len(cls.__slots__) or not args:\n+            raise ValueError(\"Expected exactly 1 argument for 'text'\")\n \n         attrvals = []\n \n@@ -242,10 +242,7 @@ class Token(CodegenAST):\n             raise ValueError(\"Unknown keyword arguments: %s\" % ' '.join(kwargs))\n \n         # Parent constructor\n-        basic_args = [\n-            val for attr, val in zip(cls.__slots__, attrvals)\n-            if attr not in cls.not_in_args\n-        ]\n+        basic_args = [attrvals[0]]\n         obj = CodegenAST.__new__(cls, *basic_args)\n \n         # Set attributes\n@@ -895,7 +892,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..604285f 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -201,8 +201,8 @@ class Token(CodegenAST):\n     def __new__(cls, *args, **kwargs):\n         if len(args) == 1 and (not kwargs) and isinstance(args[0], cls):\n             return args[0]\n-        if len(args) > len(cls.__slots__):\n-            raise ValueError('Too many arguments (%d), expected at most %d' % (len(args), len(cls.__slots__)))\n+        if len(args) > len(cls.__slots__) or not args:\n+            raise ValueError(\"Expected exactly 1 argument for 'text'\")\n         attrvals = []\n         for attrname, argval in zip(cls.__slots__, args):\n             if attrname in kwargs:\n@@ -218,7 +218,7 @@ class Token(CodegenAST):\n             attrvals.append(cls._construct(attrname, argval))\n         if kwargs:\n             raise ValueError('Unknown keyword arguments: %s' % ' '.join(kwargs))\n-        basic_args = [val for attr, val in zip(cls.__slots__, attrvals) if attr not in cls.not_in_args]\n+        basic_args = [attrvals[0]]\n         obj = CodegenAST.__new__(cls, *basic_args)\n         for attr, arg in zip(cls.__slots__, attrvals):\n             setattr(obj, attr, arg)\n@@ -774,7 +774,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "normalized_occurrence": 1}
