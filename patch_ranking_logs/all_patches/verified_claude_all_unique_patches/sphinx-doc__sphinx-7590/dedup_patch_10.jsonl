{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..76803ef 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,20 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # handle user-defined literals\n+        pos = self.pos\n+        # try to match a normal literal first\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n+                     integer_literal_re, octal_literal_re]:\n+            if self.match(regex):\n+                literal_end = self.pos\n+                # check for UDL suffix\n+                if self.current_char == '_' or self.current_char.isalpha():\n+                    while self.current_char.isalnum() or self.current_char == '_':\n+                        self.pos += 1\n+                    return ASTNumberLiteral(self.definition[pos:self.pos])\n+                self.pos = pos  # reset if no UDL found\n+        \n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..72b66e9 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,15 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:\n+            if self.match(regex):\n+                literal_end = self.pos\n+                if self.current_char == '_' or self.current_char.isalpha():\n+                    while self.current_char.isalnum() or self.current_char == '_':\n+                        self.pos += 1\n+                    return ASTNumberLiteral(self.definition[pos:self.pos])\n+                self.pos = pos\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
