{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13417", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..5b2ae80 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -160,6 +160,7 @@ class Query(BaseExpression):\n         self.table_map = {}     # Maps table names to list of aliases.\n         self.default_cols = True\n         self.default_ordering = True\n+        self._has_grouping = False  # Track if GROUP BY is being used\n         self.standard_ordering = True\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n@@ -170,6 +171,16 @@ class Query(BaseExpression):\n         # SELECT clause of the query.\n         # The select is used for cases where we want to set up the select\n         # clause to contain other than default fields (values(), subqueries...)\n+\n+    @property\n+    def default_ordering(self):\n+        # Default ordering should be disabled when GROUP BY is present\n+        # since the grouping can affect the ordering\n+        return self._default_ordering and not self._has_grouping\n+\n+    @default_ordering.setter\n+    def default_ordering(self, value):\n+        self._default_ordering = value\n         # Note that annotations go to annotations dictionary.\n         self.select = ()\n         self.where = where()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..d44897e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -90,10 +90,17 @@ class Query(BaseExpression):\n         self.table_map = {}\n         self.default_cols = True\n         self.default_ordering = True\n+        self._has_grouping = False\n         self.standard_ordering = True\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+    @property\n+    def default_ordering(self):\n+        return self._default_ordering and (not self._has_grouping)\n+    @default_ordering.setter\n+    def default_ordering(self, value):\n+        self._default_ordering = value\n         self.select = ()\n         self.where = where()\n         self.where_class = where\n", "normalized_occurrence": 1}
