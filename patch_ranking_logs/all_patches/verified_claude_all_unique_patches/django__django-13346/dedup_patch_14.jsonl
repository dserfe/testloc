{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..a24569f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -392,20 +392,32 @@ class KeyTransformExact(JSONExact):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n+        cast_key_to_text = False\n+        if hasattr(self.lhs, 'key_name'):\n+            cast_key_to_text = True\n         if connection.vendor == 'oracle':\n             func = []\n             for value in rhs_params:\n                 value = json.loads(value)\n-                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n-                func.append(\"%s('%s', '$.value')\" % (\n-                    function,\n-                    json.dumps({'value': value}),\n-                ))\n+                if cast_key_to_text:\n+                    func.append(\"TO_CHAR(JSON_VALUE(%s, '$.value'))\" % json.dumps({'value': value}))\n+                else:\n+                    function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                    func.append(\"%s('%s', '$.value')\" % (\n+                        function,\n+                        json.dumps({'value': value}),\n+                    ))\n             rhs = rhs % tuple(func)\n             rhs_params = []\n         elif connection.vendor == 'sqlite':\n-            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            if cast_key_to_text:\n+                func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            else:\n+                func = [\"CAST(JSON_EXTRACT(%s, '$') AS TEXT)\" if value != 'null' else '%s' for value in rhs_params]\n             rhs = rhs % tuple(func)\n+        elif connection.vendor == 'mysql':\n+            if cast_key_to_text:\n+                rhs = rhs % tuple([\"JSON_UNQUOTE(CAST(%s AS JSON))\" for _ in rhs_params])\n         return rhs, rhs_params\n \n     def as_oracle(self, compiler, connection):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..fecd89a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -262,17 +262,29 @@ class KeyTransformExact(JSONExact):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n+        cast_key_to_text = False\n+        if hasattr(self.lhs, 'key_name'):\n+            cast_key_to_text = True\n         if connection.vendor == 'oracle':\n             func = []\n             for value in rhs_params:\n                 value = json.loads(value)\n-                function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n-                func.append(\"%s('%s', '$.value')\" % (function, json.dumps({'value': value})))\n+                if cast_key_to_text:\n+                    func.append(\"TO_CHAR(JSON_VALUE(%s, '$.value'))\" % json.dumps({'value': value}))\n+                else:\n+                    function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n+                    func.append(\"%s('%s', '$.value')\" % (function, json.dumps({'value': value})))\n             rhs = rhs % tuple(func)\n             rhs_params = []\n         elif connection.vendor == 'sqlite':\n-            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            if cast_key_to_text:\n+                func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+            else:\n+                func = [\"CAST(JSON_EXTRACT(%s, '$') AS TEXT)\" if value != 'null' else '%s' for value in rhs_params]\n             rhs = rhs % tuple(func)\n+        elif connection.vendor == 'mysql':\n+            if cast_key_to_text:\n+                rhs = rhs % tuple(['JSON_UNQUOTE(CAST(%s AS JSON))' for _ in rhs_params])\n         return (rhs, rhs_params)\n     def as_oracle(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n", "normalized_occurrence": 1}
