{"model_name_or_path": "agentless", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 250c6ee..3d3bf72 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2091,7 +2091,7 @@ class Query(BaseExpression):\n \n     def clear_select_clause(self):\n         \"\"\"Remove all fields from SELECT clause.\"\"\"\n-        self.select = ()\n+        self.select = []\n         self.default_cols = False\n         self.select_related = False\n         self.set_extra_mask(())\n@@ -2103,7 +2103,7 @@ class Query(BaseExpression):\n         Some queryset types completely replace any existing list of select\n         columns.\n         \"\"\"\n-        self.select = ()\n+        self.select = []\n         self.values_select = ()\n \n     def add_select_col(self, col, name):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4a84de0..9d61997 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1038,13 +1038,13 @@ class Query(BaseExpression):\n     def can_filter(self):\n         return not self.is_sliced\n     def clear_select_clause(self):\n-        self.select = ()\n+        self.select = []\n         self.default_cols = False\n         self.select_related = False\n         self.set_extra_mask(())\n         self.set_annotation_mask(())\n     def clear_select_fields(self):\n-        self.select = ()\n+        self.select = []\n         self.values_select = ()\n     def add_select_col(self, col, name):\n         self.select += (col,)\n", "normalized_occurrence": 1}
