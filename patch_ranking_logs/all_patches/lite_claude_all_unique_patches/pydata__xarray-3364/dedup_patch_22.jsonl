{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..fa29bc5 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,4 +1,6 @@\n+\n import pandas as pd\n+import numpy as np\n \n from . import dtypes, utils\n from .alignment import align\n@@ -312,15 +314,18 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    # Create a new variable filled with NaN values matching the dataset's shape\n+                    template_var = next((v for ds2 in datasets for v in [ds2.variables.get(var)] if v is not None), None)\n+                    if template_var is not None:\n+                        shape = tuple(ds.sizes[d] if d in ds.sizes else template_var.shape[i] \n+                                    for i, d in enumerate(template_var.dims))\n+                        filled_var = Variable(template_var.dims, \n+                                           np.full(shape, fill_value, dtype=template_var.dtype))\n+                        to_merge[var].append(filled_var)\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..43876bf 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,4 +1,5 @@\n import pandas as pd\n+import numpy as np\n from . import dtypes, utils\n from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n@@ -126,11 +127,15 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    template_var = next((v for ds2 in datasets for v in [ds2.variables.get(var)] if v is not None), None)\n+                    if template_var is not None:\n+                        shape = tuple((ds.sizes[d] if d in ds.sizes else template_var.shape[i] for i, d in enumerate(template_var.dims)))\n+                        filled_var = Variable(template_var.dims, np.full(shape, fill_value, dtype=template_var.dtype))\n+                        to_merge[var].append(filled_var)\n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(var, to_merge[var], compat=compat, equals=equals.get(var, None))\n     else:\n", "normalized_occurrence": 1}
