{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..89998f4 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,12 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Apply non-disjoint cycles in left-to-right order\n+                final_perm = list(range(max(temp) + 1))\n+                for cycle in args:\n+                    for i in range(len(cycle)):\n+                        final_perm[cycle[i]] = cycle[(i + 1) % len(cycle)]\n+                args = final_perm\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n@@ -908,15 +912,7 @@ class Permutation(Basic):\n             raise ValueError(\"Integers 0 through %s must be present.\" %\n                              max(temp))\n \n-        if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n-        else:\n-            aform = list(args)\n+        aform = list(args)\n         if size and size > len(aform):\n             # don't allow for truncation of permutation which\n             # might split a cycle and lead to an invalid aform\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..71b7b7f 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,19 +196,17 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                final_perm = list(range(max(temp) + 1))\n+                for cycle in args:\n+                    for i in range(len(cycle)):\n+                        final_perm[cycle[i]] = cycle[(i + 1) % len(cycle)]\n+                args = final_perm\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n-        if is_cycle:\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n-        else:\n-            aform = list(args)\n+        aform = list(args)\n         if size and size > len(aform):\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n", "normalized_occurrence": 1}
