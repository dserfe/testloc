{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14500", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 9e05ef1..63f9d8e 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -275,8 +275,11 @@ class MigrationExecutor:\n         applied = self.recorder.applied_migrations()\n         for key, migration in self.loader.replacements.items():\n             all_applied = all(m in applied for m in migration.replaces)\n+            any_applied = any(m in applied for m in migration.replaces)\n             if all_applied and key not in applied:\n                 self.recorder.record_applied(*key)\n+            elif not any_applied and key in applied:\n+                self.recorder.record_unapplied(*key)\n \n     def detect_soft_applied(self, project_state, migration):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex d5a1e7d..6808be5 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -157,8 +157,11 @@ class MigrationExecutor:\n         applied = self.recorder.applied_migrations()\n         for key, migration in self.loader.replacements.items():\n             all_applied = all((m in applied for m in migration.replaces))\n+            any_applied = any((m in applied for m in migration.replaces))\n             if all_applied and key not in applied:\n                 self.recorder.record_applied(*key)\n+            elif not any_applied and key in applied:\n+                self.recorder.record_unapplied(*key)\n     def detect_soft_applied(self, project_state, migration):\n         def should_skip_detecting_model(migration, model):\n             return model._meta.proxy or not model._meta.managed or (not router.allow_migrate(self.connection.alias, migration.app_label, model_name=model._meta.model_name))\n", "normalized_occurrence": 1}
