{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..595957e 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,7 +72,16 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(\"unsupported operand type(s) for ^: 'Q' and '{}'\".format(type(other).__name__))\n+        \n+        # Implement the XOR logic: true when an odd number of arguments are true\n+        combined = Q()\n+        for child in self.children:\n+            combined = combined & ~Q(child) | ~combined & Q(child)\n+        for child in other.children:\n+            combined = combined & ~Q(child) | ~combined & Q(child)\n+        return combined\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..593567a 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,14 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(\"unsupported operand type(s) for ^: 'Q' and '{}'\".format(type(other).__name__))\n+        combined = Q()\n+        for child in self.children:\n+            combined = combined & ~Q(child) | ~combined & Q(child)\n+        for child in other.children:\n+            combined = combined & ~Q(child) | ~combined & Q(child)\n+        return combined\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
