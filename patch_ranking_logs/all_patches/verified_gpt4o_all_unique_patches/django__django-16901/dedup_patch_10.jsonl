{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..51b8489 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,7 +72,21 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        # Handle XOR operation such that it evaluates to true when an odd number of arguments are true\n+        if not isinstance(other, Q):\n+            raise TypeError(other)\n+        if not self:\n+            return other.copy()\n+        if not other:\n+            return self.copy()\n+        \n+        # XOR should be handled as a parity check (odd number of true arguments)\n+        obj = self.create(connector=self.OR)\n+        obj.add(self, self.AND if not obj.children else self.OR)\n+        obj.add(other, self.AND if not obj.children else self.OR)\n+        # Toggle the connector to AND if there's an odd number of conditions\n+        obj.connector = self.AND if len(obj.children) % 2 == 1 else self.OR\n+        return obj\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..ef470f1 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,17 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(other)\n+        if not self:\n+            return other.copy()\n+        if not other:\n+            return self.copy()\n+        obj = self.create(connector=self.OR)\n+        obj.add(self, self.AND if not obj.children else self.OR)\n+        obj.add(other, self.AND if not obj.children else self.OR)\n+        obj.connector = self.AND if len(obj.children) % 2 == 1 else self.OR\n+        return obj\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
