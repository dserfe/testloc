{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..dd5eadd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -87,6 +87,15 @@ def members_set_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+def private_members_option(arg: Any) -> Union[bool, Set[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return True\n+    if arg is False:\n+        return False\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n+\n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n+def private_members_option(arg: Any) -> Union[bool, Set[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return True\n+    if arg is False:\n+        return False\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n+", "normalized_occurrence": 1}
