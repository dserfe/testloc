{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14765", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 6496bf2..27636dc 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -92,7 +92,8 @@ class ProjectState:\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n         if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+            assert isinstance(real_apps, set), \"real_apps must be a set\"\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n", "occurrence": 4, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 999f68c..066a4c4 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -50,7 +50,8 @@ class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n         if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n+            assert isinstance(real_apps, set), 'real_apps must be a set'\n+            self.real_apps = real_apps\n         else:\n             self.real_apps = set()\n         self.is_delayed = False\n", "normalized_occurrence": 4}
