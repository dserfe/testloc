{"model_name_or_path": "agentless", "instance_id": "django__django-11477", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 58da200..4830a74 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -599,6 +599,34 @@ class URLResolver:\n         return get_callable(callback), {}\n \n     def reverse(self, lookup_view, *args, **kwargs):\n+        from urllib.parse import quote\n+\n+        if 'url' in kwargs:\n+            lookup_view = kwargs.pop('url')\n+        bits = lookup_view.split(':')\n+        if len(bits) == 1:\n+            return self._reverse_with_prefix(bits[0], '', *args, **kwargs)\n+        else:\n+            lookup_view, prefix = bits[-1], bits[0]\n+            url = self._reverse_with_prefix(lookup_view, prefix + ':', *args, **kwargs)\n+            if prefix in self.app_dict:\n+                return quote(self._get_url_prefix(prefix)) + url\n+            else:\n+                return url\n+\n+    def _reverse_with_prefix(self, lookup_view, prefix, *args, **kwargs):\n+        from urllib.parse import quote\n+        try:\n+            extra, url = self._get_reverse_dict().get(lookup_view)\n+        except KeyError:\n+            raise NoReverseMatch(\"%s is not a registered namespace\" % prefix)\n+        url = url % kwargs\n+        return quote(prefix + url)\n+\n+    def _get_url_prefix(self, prefix):\n+        if prefix not in self.namespace_dict:\n+            raise NoReverseMatch(\"%s is not a registered namespace\" % prefix)\n+        return self.namespace_dict[prefix][0]\n         return self._reverse_with_prefix(lookup_view, '', *args, **kwargs)\n \n     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex e10e0e8..ae9aff2 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -389,6 +389,31 @@ class URLResolver:\n             callback = getattr(urls, 'handler%s' % view_type)\n         return (get_callable(callback), {})\n     def reverse(self, lookup_view, *args, **kwargs):\n+        from urllib.parse import quote\n+        if 'url' in kwargs:\n+            lookup_view = kwargs.pop('url')\n+        bits = lookup_view.split(':')\n+        if len(bits) == 1:\n+            return self._reverse_with_prefix(bits[0], '', *args, **kwargs)\n+        else:\n+            lookup_view, prefix = (bits[-1], bits[0])\n+            url = self._reverse_with_prefix(lookup_view, prefix + ':', *args, **kwargs)\n+            if prefix in self.app_dict:\n+                return quote(self._get_url_prefix(prefix)) + url\n+            else:\n+                return url\n+    def _reverse_with_prefix(self, lookup_view, prefix, *args, **kwargs):\n+        from urllib.parse import quote\n+        try:\n+            extra, url = self._get_reverse_dict().get(lookup_view)\n+        except KeyError:\n+            raise NoReverseMatch('%s is not a registered namespace' % prefix)\n+        url = url % kwargs\n+        return quote(prefix + url)\n+    def _get_url_prefix(self, prefix):\n+        if prefix not in self.namespace_dict:\n+            raise NoReverseMatch('%s is not a registered namespace' % prefix)\n+        return self.namespace_dict[prefix][0]\n         return self._reverse_with_prefix(lookup_view, '', *args, **kwargs)\n     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n         if args and kwargs:\n", "normalized_occurrence": 1}
