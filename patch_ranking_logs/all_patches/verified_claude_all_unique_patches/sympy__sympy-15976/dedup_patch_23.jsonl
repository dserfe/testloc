{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..b834c12 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -777,6 +777,13 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n \n+        # Handle trailing numbers in symbol names\n+        import re\n+        match = re.match(r'([a-zA-Z_]+)([0-9]+)$', name)\n+        if match and not subs:  # If name ends with numbers and no explicit subscripts\n+            name = match.group(1)\n+            subs = [match.group(2)]\n+\n         mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..8aad3fc 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -544,6 +544,11 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n+        import re\n+        match = re.match('([a-zA-Z_]+)([0-9]+)$', name)\n+        if match and (not subs):\n+            name = match.group(1)\n+            subs = [match.group(2)]\n         mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n", "normalized_occurrence": 1}
