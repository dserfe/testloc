{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..1f4bfe6 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,28 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        \n+        # Execute the insert\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        \n+        # Apply field converters to returned values if any\n+        if result and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            if converters:\n+                if len(returning_fields) == 1:\n+                    result = [converters[0](result, None, connection) if result is not None else None]\n+                else:\n+                    converted = []\n+                    for value, field in zip(result, returning_fields):\n+                        field_converters = field.get_db_converters(connection)\n+                        for converter in field_converters:\n+                            value = converter(value, None, connection) if value is not None else None\n+                        converted.append(value)\n+                    result = converted\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..5d0eb98 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,24 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            if converters:\n+                if len(returning_fields) == 1:\n+                    result = [converters[0](result, None, connection) if result is not None else None]\n+                else:\n+                    converted = []\n+                    for value, field in zip(result, returning_fields):\n+                        field_converters = field.get_db_converters(connection)\n+                        for converter in field_converters:\n+                            value = converter(value, None, connection) if value is not None else None\n+                        converted.append(value)\n+                    result = converted\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
