{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..d8876db 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -177,7 +177,13 @@ class Point(GeometryEntity):\n         # the general Point\n         return GeometryEntity.__new__(cls, *coords)\n \n-    def __abs__(self):\n+    def __mul__(self, other):\n+        \"\"\"Multiply the coordinates of the Point by a scalar.\"\"\"\n+        other = sympify(other)\n+        if not other.is_number:\n+            raise GeometryError(\"Can only multiply a Point by a scalar.\")\n+        coords = [simplify(a * other) for a in self.args]\n+        return Point(coords, evaluate=False)\n         \"\"\"Returns the distance between this point and the origin.\"\"\"\n         origin = Point([0]*len(self))\n         return Point.distance(origin, self)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..fa131c5 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -58,7 +58,12 @@ class Point(GeometryEntity):\n             kwargs['_nocheck'] = True\n             return Point3D(*coords, **kwargs)\n         return GeometryEntity.__new__(cls, *coords)\n-    def __abs__(self):\n+    def __mul__(self, other):\n+        other = sympify(other)\n+        if not other.is_number:\n+            raise GeometryError('Can only multiply a Point by a scalar.')\n+        coords = [simplify(a * other) for a in self.args]\n+        return Point(coords, evaluate=False)\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n", "normalized_occurrence": 1}
