{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4661", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 1b8a20a..1510584 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -473,7 +473,7 @@ class PyLinter(\n     def __init__(self, options=(), reporter=None, option_groups=(), pylintrc=None):\n         \"\"\"Some stuff has to be done before ancestors initialization...\n         messages store / checkers / reporter / astroid manager\"\"\"\n-        self.msgs_store = MessageDefinitionStore()\n+        self.msgs_store = MessageDefinitionStore(store_path=self.pylint_data_home)\n         self.reporter = None\n         self._reporter_names = None\n         self._reporters = {}\n@@ -487,6 +487,10 @@ class PyLinter(\n         self.stats = None\n         self.fail_on_symbols = []\n         # init options\n+        self.data_home = os.environ.get(\"XDG_DATA_HOME\", os.path.join(os.path.expanduser(\"~\"), \".local\", \"share\"))\n+        self.pylint_data_home = os.path.join(self.data_home, \"pylint\")\n+        if not os.path.exists(self.pylint_data_home):\n+            os.makedirs(self.pylint_data_home)\n         self._external_opts = options\n         self.options = options + PyLinter.make_options()\n         self.option_groups = option_groups + PyLinter.option_groups\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 31c726e..6e357a4 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -41,7 +41,7 @@ class PyLinter(config.OptionsManagerMixIn, MessagesHandlerMixIn, reporters.Repor\n         return (('ignore', {'type': 'csv', 'metavar': '<file>[,<file>...]', 'dest': 'black_list', 'default': ('CVS',), 'help': 'Files or directories to be skipped. They should be base names, not paths.'}), ('ignore-patterns', {'type': 'regexp_csv', 'metavar': '<pattern>[,<pattern>...]', 'dest': 'black_list_re', 'default': (), 'help': 'Files or directories matching the regex patterns are skipped. The regex matches against base names, not paths.'}), ('ignore-paths', {'type': 'regexp_csv', 'metavar': '<pattern>[,<pattern>...]', 'dest': 'ignore_list_paths_re', 'default': (), 'help': 'Add files or directories matching the regex patterns to the ignore-list. The regex matches against paths.'}), ('persistent', {'default': True, 'type': 'yn', 'metavar': '<y_or_n>', 'level': 1, 'help': 'Pickle collected data for later comparisons.'}), ('load-plugins', {'type': 'csv', 'metavar': '<modules>', 'default': (), 'level': 1, 'help': 'List of plugins (as comma separated values of python module names) to load, usually to register additional checkers.'}), ('output-format', {'default': 'text', 'type': 'string', 'metavar': '<format>', 'short': 'f', 'group': 'Reports', 'help': 'Set the output format. Available formats are text, parseable, colorized, json and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass.'}), ('reports', {'default': False, 'type': 'yn', 'metavar': '<y_or_n>', 'short': 'r', 'group': 'Reports', 'help': 'Tells whether to display a full report or only the messages.'}), ('evaluation', {'type': 'string', 'metavar': '<python_expression>', 'group': 'Reports', 'level': 1, 'default': '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)', 'help': \"Python expression which should return a score less than or equal to 10. You have access to the variables 'error', 'warning', 'refactor', and 'convention' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004).\"}), ('score', {'default': True, 'type': 'yn', 'metavar': '<y_or_n>', 'short': 's', 'group': 'Reports', 'help': 'Activate the evaluation score.'}), ('fail-under', {'default': 10, 'type': 'float', 'metavar': '<score>', 'help': 'Specify a score threshold to be exceeded before program exits with error.'}), ('fail-on', {'default': '', 'type': 'csv', 'metavar': '<msg ids>', 'help': 'Return non-zero exit code if any of these messages/categories are detected, even if score is above --fail-under value. Syntax same as enable. Messages specified are enabled, while categories only check already-enabled messages.'}), ('confidence', {'type': 'multiple_choice', 'metavar': '<levels>', 'default': '', 'choices': [c.name for c in interfaces.CONFIDENCE_LEVELS], 'group': 'Messages control', 'help': 'Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: %s.' % (', '.join((c.name for c in interfaces.CONFIDENCE_LEVELS)),)}), ('enable', {'type': 'csv', 'metavar': '<msg ids>', 'short': 'e', 'group': 'Messages control', 'help': 'Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples.'}), ('disable', {'type': 'csv', 'metavar': '<msg ids>', 'short': 'd', 'group': 'Messages control', 'help': 'Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then reenable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\".'}), ('msg-template', {'type': 'string', 'metavar': '<template>', 'group': 'Reports', 'help': 'Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details.'}), ('jobs', {'type': 'int', 'metavar': '<n-processes>', 'short': 'j', 'default': 1, 'help': 'Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use.'}), ('unsafe-load-any-extension', {'type': 'yn', 'metavar': '<yn>', 'default': False, 'hide': True, 'help': 'Allow loading of arbitrary C extensions. Extensions are imported into the active Python interpreter and may run arbitrary code.'}), ('limit-inference-results', {'type': 'int', 'metavar': '<number-of-results>', 'default': 100, 'help': 'Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. '}), ('extension-pkg-allow-list', {'type': 'csv', 'metavar': '<pkg[,pkg]>', 'default': [], 'help': 'A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code.'}), ('extension-pkg-whitelist', {'type': 'csv', 'metavar': '<pkg[,pkg]>', 'default': [], 'help': 'A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (This is an alternative name to extension-pkg-allow-list for backward compatibility.)'}), ('suggestion-mode', {'type': 'yn', 'metavar': '<yn>', 'default': True, 'help': 'When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages.'}), ('exit-zero', {'action': 'store_true', 'help': 'Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts.'}), ('from-stdin', {'action': 'store_true', 'help': 'Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument.'}))\n     option_groups = (('Messages control', 'Options controlling analysis messages'), ('Reports', 'Options related to output formatting and reporting'))\n     def __init__(self, options=(), reporter=None, option_groups=(), pylintrc=None):\n-        self.msgs_store = MessageDefinitionStore()\n+        self.msgs_store = MessageDefinitionStore(store_path=self.pylint_data_home)\n         self.reporter = None\n         self._reporter_names = None\n         self._reporters = {}\n@@ -53,6 +53,10 @@ class PyLinter(config.OptionsManagerMixIn, MessagesHandlerMixIn, reporters.Repor\n         self.current_file = None\n         self.stats = None\n         self.fail_on_symbols = []\n+        self.data_home = os.environ.get('XDG_DATA_HOME', os.path.join(os.path.expanduser('~'), '.local', 'share'))\n+        self.pylint_data_home = os.path.join(self.data_home, 'pylint')\n+        if not os.path.exists(self.pylint_data_home):\n+            os.makedirs(self.pylint_data_home)\n         self._external_opts = options\n         self.options = options + PyLinter.make_options()\n         self.option_groups = option_groups + PyLinter.option_groups\n", "normalized_occurrence": 1}
