{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..9d78712 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -780,7 +780,27 @@ class PyAttribute(PyObject):\n     })\n \n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n-        fullname, prefix = super().handle_signature(sig, signode)\n+        # Split the signature into components\n+        parts = sig.split('.')\n+        modname = self.options.get('module')\n+        \n+        # Create a text-only version of the signature to prevent auto-linking\n+        if len(parts) > 1:\n+            classname = '.'.join(parts[:-1])\n+            attrname = parts[-1]\n+            fullname = sig\n+            prefix = ''\n+            \n+            # Add class name as text node\n+            if modname:\n+                signode += addnodes.desc_addname(modname + '.', modname + '.')\n+            signode += addnodes.desc_addname(classname + '.', classname + '.')\n+            # Add attribute name as text node\n+            signode += addnodes.desc_name(attrname, attrname)\n+        else:\n+            fullname = sig\n+            prefix = ''\n+            signode += addnodes.desc_name(sig, sig)\n \n         typ = self.options.get('type')\n         if typ:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..e0d6450 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -479,7 +479,21 @@ class PyAttribute(PyObject):\n     option_spec = PyObject.option_spec.copy()\n     option_spec.update({'type': directives.unchanged, 'value': directives.unchanged})\n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n-        fullname, prefix = super().handle_signature(sig, signode)\n+        parts = sig.split('.')\n+        modname = self.options.get('module')\n+        if len(parts) > 1:\n+            classname = '.'.join(parts[:-1])\n+            attrname = parts[-1]\n+            fullname = sig\n+            prefix = ''\n+            if modname:\n+                signode += addnodes.desc_addname(modname + '.', modname + '.')\n+            signode += addnodes.desc_addname(classname + '.', classname + '.')\n+            signode += addnodes.desc_name(attrname, attrname)\n+        else:\n+            fullname = sig\n+            prefix = ''\n+            signode += addnodes.desc_name(sig, sig)\n         typ = self.options.get('type')\n         if typ:\n             annotations = _parse_annotation(typ, self.env)\n", "normalized_occurrence": 1}
