{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..8918c78 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,32 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict'):\n+            if not hasattr(other, 'error_dict'):\n+                return False\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                if sorted(self.error_dict[field], key=lambda e: (str(e.message), e.code, str(e.params))) != \\\n+                   sorted(other.error_dict[field], key=lambda e: (str(e.message), e.code, str(e.params))):\n+                    return False\n+            return True\n+        elif hasattr(self, 'error_list'):\n+            if hasattr(other, 'error_dict'):\n+                return False\n+            return sorted(self.error_list, key=lambda e: (str(e.message), e.code, str(e.params))) == \\\n+                   sorted(other.error_list, key=lambda e: (str(e.message), e.code, str(e.params)))\n+        else:\n+            if hasattr(other, 'error_dict') or hasattr(other, 'error_list'):\n+                return False\n+            return (self.message == other.message and\n+                    self.code == other.code and\n+                    self.params == other.params)\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\n@@ -190,4 +216,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict'):\n+            if not hasattr(other, 'error_dict'):\n+                return False\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                if sorted(self.error_dict[field], key=lambda e: (str(e.message), e.code, str(e.params))) != sorted(other.error_dict[field], key=lambda e: (str(e.message), e.code, str(e.params))):\n+                    return False\n+            return True\n+        elif hasattr(self, 'error_list'):\n+            if hasattr(other, 'error_dict'):\n+                return False\n+            return sorted(self.error_list, key=lambda e: (str(e.message), e.code, str(e.params))) == sorted(other.error_list, key=lambda e: (str(e.message), e.code, str(e.params)))\n+        else:\n+            if hasattr(other, 'error_dict') or hasattr(other, 'error_list'):\n+                return False\n+            return self.message == other.message and self.code == other.code and (self.params == other.params)\n+", "normalized_occurrence": 1}
