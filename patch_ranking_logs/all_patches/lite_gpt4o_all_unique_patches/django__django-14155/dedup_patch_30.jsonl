{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..c62366b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,6 +31,13 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self.partial_args = []\n+            self.partial_keywords = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -59,8 +66,8 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, partial_args=%s, partial_keywords=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+            self._func_path, self.args, self.kwargs, self.partial_args, self.partial_keywords, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..9d37a8f 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,13 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self.partial_args = []\n+            self.partial_keywords = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -38,7 +45,7 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, partial_args=%s, partial_keywords=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.partial_args, self.partial_keywords, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
