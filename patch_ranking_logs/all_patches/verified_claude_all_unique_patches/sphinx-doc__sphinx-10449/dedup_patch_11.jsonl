{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d42883b..7602b59 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1557,12 +1557,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n         if result is not None:\n-            # Strip a return value from signature of constructor in docstring (first entry)\n-            result = (result[0], None)\n+            # Strip any return value from signature for both class and constructor\n+            result = (result[0].split(' -> ')[0], None)\n \n         for i, sig in enumerate(self._signatures):\n-            if sig.endswith(' -> None'):\n-                # Strip a return value from signatures of constructor in docstring (subsequent\n+            if ' -> ' in sig:\n+                # Strip any return value from signatures\n+                self._signatures[i] = sig.split(' -> ')[0]\n                 # entries)\n                 self._signatures[i] = sig[:-8]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2c8c52a..ef546f1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -873,9 +873,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n         if result is not None:\n-            result = (result[0], None)\n+            result = (result[0].split(' -> ')[0], None)\n         for i, sig in enumerate(self._signatures):\n-            if sig.endswith(' -> None'):\n+            if ' -> ' in sig:\n+                self._signatures[i] = sig.split(' -> ')[0]\n                 self._signatures[i] = sig[:-8]\n         return result\n     def format_signature(self, **kwargs: Any) -> str:\n", "normalized_occurrence": 1}
