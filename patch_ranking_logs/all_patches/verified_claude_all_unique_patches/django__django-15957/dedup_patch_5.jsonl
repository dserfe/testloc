{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..4159a85 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2145,16 +2145,17 @@ class Prefetch:\n         self.prefetch_through = lookup\n         # `prefetch_to` is the path to the attribute that stores the result.\n         self.prefetch_to = lookup\n-        if queryset is not None and (\n-            isinstance(queryset, RawQuerySet)\n-            or (\n+        if queryset is not None:\n+            if isinstance(queryset, RawQuerySet) or (\n                 hasattr(queryset, \"_iterable_class\")\n                 and not issubclass(queryset._iterable_class, ModelIterable)\n-            )\n-        ):\n-            raise ValueError(\n-                \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n-            )\n+            ):\n+                raise ValueError(\n+                    \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n+                )\n+            # Store slice information before cloning\n+            self._limit = queryset._limit if hasattr(queryset, '_limit') else None\n+            self._offset = queryset._offset if hasattr(queryset, '_offset') else None\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(\n                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]\n@@ -2188,7 +2189,14 @@ class Prefetch:\n \n     def get_current_queryset(self, level):\n         if self.get_current_prefetch_to(level) == self.prefetch_to:\n-            return self.queryset\n+            queryset = self.queryset\n+            if queryset is not None:\n+                # Reapply the slice if it was present\n+                if hasattr(self, '_offset') and self._offset is not None:\n+                    queryset = queryset[self._offset:]\n+                if hasattr(self, '_limit') and self._limit is not None:\n+                    queryset = queryset[:self._limit]\n+            return queryset\n         return None\n \n     def __eq__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..79dba5c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1117,8 +1117,11 @@ class Prefetch:\n     def __init__(self, lookup, queryset=None, to_attr=None):\n         self.prefetch_through = lookup\n         self.prefetch_to = lookup\n-        if queryset is not None and (isinstance(queryset, RawQuerySet) or (hasattr(queryset, '_iterable_class') and (not issubclass(queryset._iterable_class, ModelIterable)))):\n-            raise ValueError('Prefetch querysets cannot use raw(), values(), and values_list().')\n+        if queryset is not None:\n+            if isinstance(queryset, RawQuerySet) or (hasattr(queryset, '_iterable_class') and (not issubclass(queryset._iterable_class, ModelIterable))):\n+                raise ValueError('Prefetch querysets cannot use raw(), values(), and values_list().')\n+            self._limit = queryset._limit if hasattr(queryset, '_limit') else None\n+            self._offset = queryset._offset if hasattr(queryset, '_offset') else None\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\n         self.queryset = queryset\n@@ -1143,7 +1146,13 @@ class Prefetch:\n         return (to_attr, as_attr)\n     def get_current_queryset(self, level):\n         if self.get_current_prefetch_to(level) == self.prefetch_to:\n-            return self.queryset\n+            queryset = self.queryset\n+            if queryset is not None:\n+                if hasattr(self, '_offset') and self._offset is not None:\n+                    queryset = queryset[self._offset:]\n+                if hasattr(self, '_limit') and self._limit is not None:\n+                    queryset = queryset[:self._limit]\n+            return queryset\n         return None\n     def __eq__(self, other):\n         if not isinstance(other, Prefetch):\n", "normalized_occurrence": 1}
