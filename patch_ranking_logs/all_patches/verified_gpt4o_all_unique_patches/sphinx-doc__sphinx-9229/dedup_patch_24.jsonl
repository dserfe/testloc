{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..003c80e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, OrderedDict, cast\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -66,6 +66,22 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n \n+        # Check and add type alias docstrings to field lists\n+        if 'type_aliases' in app.env.temp_data:\n+            type_aliases = app.env.temp_data['type_aliases']\n+            if fullname in type_aliases:\n+                for field_list in field_lists:\n+                    add_type_alias_docstring(field_list, type_aliases[fullname])\n+\n+\n+def add_type_alias_docstring(field_list: nodes.field_list, docstring: str) -> None:\n+    \"\"\"Add the docstring of a type alias to the field list.\"\"\"\n+    paragraph_node = nodes.paragraph(text=docstring)\n+    field_node = nodes.field()\n+    field_node += nodes.field_name(text=\"Type alias docstring\")\n+    field_node += nodes.field_body('', paragraph_node)\n+    field_list.append(field_node)\n+\n \n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..0922d6a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,6 +1,6 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, OrderedDict, cast\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -43,6 +43,17 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n+        if 'type_aliases' in app.env.temp_data:\n+            type_aliases = app.env.temp_data['type_aliases']\n+            if fullname in type_aliases:\n+                for field_list in field_lists:\n+                    add_type_alias_docstring(field_list, type_aliases[fullname])\n+def add_type_alias_docstring(field_list: nodes.field_list, docstring: str) -> None:\n+    paragraph_node = nodes.paragraph(text=docstring)\n+    field_node = nodes.field()\n+    field_node += nodes.field_name(text='Type alias docstring')\n+    field_node += nodes.field_body('', paragraph_node)\n+    field_list.append(field_node)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
