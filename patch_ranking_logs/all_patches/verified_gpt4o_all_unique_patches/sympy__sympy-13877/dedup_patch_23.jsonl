{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..f3d8e46 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -163,6 +163,8 @@ class MatrixDeterminant(MatrixCommon):\n         return toeplitz * submat._eval_berkowitz_vector()\n \n     def _eval_det_bareiss(self):\n+        if any(element.has(Symbol) for element in self):\n+            return self._eval_det_lu()\n         \"\"\"Compute matrix determinant using Bareiss' fraction-free\n         algorithm which is an extension of the well known Gaussian\n         elimination method. This approach is best suited for dense\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..9c00003 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -63,6 +63,9 @@ class MatrixDeterminant(MatrixCommon):\n         submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()\n         return toeplitz * submat._eval_berkowitz_vector()\n     def _eval_det_bareiss(self):\n+        if any((element.has(Symbol) for element in self)):\n+            return self._eval_det_lu()\n+        \"Compute matrix determinant using Bareiss' fraction-free\\n        algorithm which is an extension of the well known Gaussian\\n        elimination method. This approach is best suited for dense\\n        symbolic matrices and will result in a determinant with\\n        minimal number of fractions. It means that less term\\n        rewriting is needed on resulting formulae.\\n\\n        TODO: Implement algorithm for sparse matrices (SFF),\\n        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\\n        \"\n         def _find_pivot(l):\n             for pos, val in enumerate(l):\n                 if val:\n", "normalized_occurrence": 1}
