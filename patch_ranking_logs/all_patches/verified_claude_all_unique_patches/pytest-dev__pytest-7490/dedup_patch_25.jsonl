{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..8a719df 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -199,7 +199,9 @@ class Xfail:\n \n def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n     \"\"\"Evaluate xfail marks on item, returning Xfail if triggered.\"\"\"\n-    for mark in item.iter_markers(name=\"xfail\"):\n+    # Get both statically defined and dynamically added markers\n+    markers = list(item.iter_markers(name=\"xfail\"))\n+    for mark in markers:\n         run = mark.kwargs.get(\"run\", True)\n         strict = mark.kwargs.get(\"strict\", item.config.getini(\"xfail_strict\"))\n         raises = mark.kwargs.get(\"raises\", None)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..91ee210 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -97,7 +97,8 @@ class Xfail:\n     strict = attr.ib(type=bool)\n     raises = attr.ib(type=Optional[Tuple['Type[BaseException]', ...]])\n def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n-    for mark in item.iter_markers(name='xfail'):\n+    markers = list(item.iter_markers(name='xfail'))\n+    for mark in markers:\n         run = mark.kwargs.get('run', True)\n         strict = mark.kwargs.get('strict', item.config.getini('xfail_strict'))\n         raises = mark.kwargs.get('raises', None)\n", "normalized_occurrence": 1}
