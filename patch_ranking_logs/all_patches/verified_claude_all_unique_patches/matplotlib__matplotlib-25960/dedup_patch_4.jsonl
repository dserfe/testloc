{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/_layoutgrid.py b/lib/matplotlib/_layoutgrid.py\nindex c834b91..2bf9eea 100644\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n@@ -224,7 +224,12 @@ class LayoutGrid:\n             c = (w == w0 * self.width_ratios[i])\n             self.solver.addConstraint(c | 'strong')\n             # constrain the grid cells to be directly next to each other.\n-            c = (self.rights[i - 1] == self.lefts[i])\n+            if self.wspace is None:\n+                c = (self.rights[i - 1] == self.lefts[i])\n+            else:\n+                width = sum(self.width_ratios) / self.ncols  # average width\n+                spacing = width * self.wspace\n+                c = (self.rights[i - 1] + spacing == self.lefts[i])\n             self.solver.addConstraint(c | 'strong')\n \n         # constrain heights:\n@@ -241,7 +246,12 @@ class LayoutGrid:\n             c = (h == h0 * self.height_ratios[i])\n             self.solver.addConstraint(c | 'strong')\n             # constrain the grid cells to be directly above each other.\n-            c = (self.bottoms[i - 1] == self.tops[i])\n+            if self.hspace is None:\n+                c = (self.bottoms[i - 1] == self.tops[i])\n+            else:\n+                height = sum(self.height_ratios) / self.nrows  # average height\n+                spacing = height * self.hspace\n+                c = (self.bottoms[i - 1] + spacing == self.tops[i])\n             self.solver.addConstraint(c | 'strong')\n \n     # Margin editing:  The margins are variable and meant to\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/_layoutgrid.py b/lib/matplotlib/_layoutgrid.py\nindex 08c1909..aee691e 100644\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n@@ -110,7 +110,12 @@ class LayoutGrid:\n             w = w - self.lefts[i] - self.margins['left'][i] - self.margins['leftcb'][i]\n             c = w == w0 * self.width_ratios[i]\n             self.solver.addConstraint(c | 'strong')\n-            c = self.rights[i - 1] == self.lefts[i]\n+            if self.wspace is None:\n+                c = self.rights[i - 1] == self.lefts[i]\n+            else:\n+                width = sum(self.width_ratios) / self.ncols\n+                spacing = width * self.wspace\n+                c = self.rights[i - 1] + spacing == self.lefts[i]\n             self.solver.addConstraint(c | 'strong')\n         h = self.tops[0] - self.margins['top'][0] - self.margins['topcb'][0]\n         h = h - self.bottoms[0] - self.margins['bottom'][0] - self.margins['bottomcb'][0]\n@@ -120,7 +125,12 @@ class LayoutGrid:\n             h = h - self.bottoms[i] - self.margins['bottom'][i] - self.margins['bottomcb'][i]\n             c = h == h0 * self.height_ratios[i]\n             self.solver.addConstraint(c | 'strong')\n-            c = self.bottoms[i - 1] == self.tops[i]\n+            if self.hspace is None:\n+                c = self.bottoms[i - 1] == self.tops[i]\n+            else:\n+                height = sum(self.height_ratios) / self.nrows\n+                spacing = height * self.hspace\n+                c = self.bottoms[i - 1] + spacing == self.tops[i]\n             self.solver.addConstraint(c | 'strong')\n     def edit_margin(self, todo, size, cell):\n         self.solver.suggestValue(self.margins[todo][cell], size)\n", "normalized_occurrence": 1}
