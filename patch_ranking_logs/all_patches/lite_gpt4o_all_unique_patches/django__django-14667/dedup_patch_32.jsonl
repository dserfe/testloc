{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..e9a889a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2081,11 +2081,12 @@ class Query(BaseExpression):\n         # splitting and handling when computing the SQL column names (as part of\n         # get_columns()).\n         existing, defer = self.deferred_loading\n-        if defer:\n+        if defer or not existing:\n             # Add to existing deferred names.\n             self.deferred_loading = existing.union(field_names), True\n         else:\n-            # Remove names from the set of any existing \"immediate load\" names.\n+            # If there are immediate load names, respect them and add to deferred names.\n+            self.deferred_loading = frozenset(), True\n             self.deferred_loading = existing.difference(field_names), False\n \n     def add_immediate_loading(self, field_names):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..bf8500f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1137,9 +1137,10 @@ class Query(BaseExpression):\n         self.deferred_loading = (frozenset(), True)\n     def add_deferred_loading(self, field_names):\n         existing, defer = self.deferred_loading\n-        if defer:\n+        if defer or not existing:\n             self.deferred_loading = (existing.union(field_names), True)\n         else:\n+            self.deferred_loading = (frozenset(), True)\n             self.deferred_loading = (existing.difference(field_names), False)\n     def add_immediate_loading(self, field_names):\n         existing, defer = self.deferred_loading\n", "normalized_occurrence": 1}
