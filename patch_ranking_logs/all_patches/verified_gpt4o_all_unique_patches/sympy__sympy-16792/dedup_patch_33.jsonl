{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..e977e01 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -441,7 +441,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n@@ -451,14 +451,14 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n \n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n             return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..b6b5c29 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -194,7 +194,7 @@ class CythonCodeWrapper(CodeWrapper):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n@@ -203,13 +203,13 @@ class CythonCodeWrapper(CodeWrapper):\n             return '%s %s' % (t, self._string_var(arg.name))\n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n             return proto + ' = 0'\n     def _call_arg(self, arg):\n-        if arg.dimensions:\n+        if arg.dimensions or isinstance(arg, (InputArgument, InOutArgument)):\n             t = arg.get_datatype('c')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n", "normalized_occurrence": 1}
