{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..ec17953 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -44,6 +44,16 @@ class MigrationOptimizer:\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1:]):\n+                # Special handling for AddIndex operations with _order field\n+                if (isinstance(operation, migrations.AddIndex) and \n+                    '_order' in operation.index.fields and\n+                    isinstance(other, migrations.AlterOrderWithRespectTo)):\n+                    # Force AddIndex to come after AlterOrderWithRespectTo\n+                    new_operations.append(other)\n+                    new_operations.append(operation)\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n+\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..697759d 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -14,6 +14,11 @@ class MigrationOptimizer:\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n+                if isinstance(operation, migrations.AddIndex) and '_order' in operation.index.fields and isinstance(other, migrations.AlterOrderWithRespectTo):\n+                    new_operations.append(other)\n+                    new_operations.append(operation)\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n", "normalized_occurrence": 1}
