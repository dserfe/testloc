{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..28f3f47 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -546,6 +546,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 \"type np.float64 before passing it to check_array.\",\n                 FutureWarning)\n \n+        # Convert pandas DataFrame to numpy array before dtype check\n+        if isinstance(array, pd.DataFrame):\n+            array = array.values\n+\n         # make sure we actually converted to numeric:\n         if dtype_numeric and array.dtype.kind == \"O\":\n             array = array.astype(np.float64)\n@@ -574,6 +578,12 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                 context))\n \n     if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+        if isinstance(array_orig, pd.DataFrame):\n+            msg = (\"Data with input dtype {} in a pandas DataFrame was converted to {}{}.\"\n+                   .format(dtype_orig, array.dtype, context))\n+        else:\n+            msg = (\"Data with input dtype {} was converted to {}{}.\"\n+                   .format(dtype_orig, array.dtype, context))\n         msg = (\"Data with input dtype %s was converted to %s%s.\"\n                % (dtype_orig, array.dtype, context))\n         warnings.warn(msg, DataConversionWarning)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..c2f9f9e 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -166,6 +166,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n                 raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n+        if isinstance(array, pd.DataFrame):\n+            array = array.values\n         if dtype_numeric and array.dtype.kind == 'O':\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n@@ -182,6 +184,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         if n_features < ensure_min_features:\n             raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, shape_repr, ensure_min_features, context))\n     if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+        if isinstance(array_orig, pd.DataFrame):\n+            msg = 'Data with input dtype {} in a pandas DataFrame was converted to {}{}.'.format(dtype_orig, array.dtype, context)\n+        else:\n+            msg = 'Data with input dtype {} was converted to {}{}.'.format(dtype_orig, array.dtype, context)\n         msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n         warnings.warn(msg, DataConversionWarning)\n     if copy and np.may_share_memory(array, array_orig):\n", "normalized_occurrence": 1}
