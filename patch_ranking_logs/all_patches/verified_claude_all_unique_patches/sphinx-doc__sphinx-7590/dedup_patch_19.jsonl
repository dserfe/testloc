{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..a4eaa96 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,30 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # handle user-defined literals\n+        pos = self.pos\n+        # try to parse a regular literal first\n+        literal = None\n+        # try floating point literals first as they are more specific\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n+                     integer_literal_re, octal_literal_re]:\n+            if self.match(regex):\n+                while self.current_char in 'uUlLfF':\n+                    self.pos += 1\n+                literal = self.definition[pos:self.pos]\n+                break\n+        \n+        # if we found a literal, check for a UDL suffix\n+        if literal is not None:\n+            if self.current_char == '_' or self.current_char.isalpha():\n+                start_pos = self.pos\n+                # consume the suffix\n+                while self.current_char.isalnum() or self.current_char == '_':\n+                    self.pos += 1\n+                suffix = self.definition[start_pos:self.pos]\n+                return ASTNumberLiteral(literal + suffix)\n+            return ASTNumberLiteral(literal)\n+\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..c9addcc 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,22 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        literal = None\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:\n+            if self.match(regex):\n+                while self.current_char in 'uUlLfF':\n+                    self.pos += 1\n+                literal = self.definition[pos:self.pos]\n+                break\n+        if literal is not None:\n+            if self.current_char == '_' or self.current_char.isalpha():\n+                start_pos = self.pos\n+                while self.current_char.isalnum() or self.current_char == '_':\n+                    self.pos += 1\n+                suffix = self.definition[start_pos:self.pos]\n+                return ASTNumberLiteral(literal + suffix)\n+            return ASTNumberLiteral(literal)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
