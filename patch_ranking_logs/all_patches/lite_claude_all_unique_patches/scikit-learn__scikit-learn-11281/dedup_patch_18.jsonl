{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 721709f..7a1ba0b 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -64,12 +64,34 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n \n \n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n-    \"\"\"Base class for mixture models.\n \n-    This abstract class specifies an interface for all mixture classes and\n-    provides basic common methods for mixture models.\n-    \"\"\"\n+    @property\n+    def n_clusters(self):\n+        \"\"\"Alias for n_components, makes mixtures compatible with clusterer interface\"\"\"\n+        return self.n_components\n+        \n+    @n_clusters.setter \n+    def n_clusters(self, value):\n+        self.n_components = value\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict labels for X.\n+        \n+        This is more efficient than calling fit followed by predict as it avoids\n+        duplicating computation.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            List of n_features-dimensional data points. Each row\n+            corresponds to a single data point.\n+            \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        return self.fit(X).labels_\n \n     def __init__(self, n_components, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n@@ -239,6 +261,9 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        \n+        # Store labels for training data\n+        self.labels_ = self.predict(X)\n \n         return self\n \n@@ -500,4 +525,4 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n             print(\"Initialization converged: %s\" % self.converged_)\n         elif self.verbose >= 2:\n             print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n-                  (self.converged_, time() - self._init_prev_time, ll))\n+                  (self.converged_, time() - self._init_prev_time, ll))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 71fc3c3..86d4ded 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -21,7 +21,14 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     if n_features is not None and X.shape[1] != n_features:\n         raise ValueError('Expected the input data X have %d features, but got %d features' % (n_features, X.shape[1]))\n     return X\n-class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n+    @property\n+    def n_clusters(self):\n+        return self.n_components\n+    @n_clusters.setter\n+    def n_clusters(self, value):\n+        self.n_components = value\n+    def fit_predict(self, X, y=None):\n+        return self.fit(X).labels_\n     def __init__(self, n_components, tol, reg_covar, max_iter, n_init, init_params, random_state, warm_start, verbose, verbose_interval):\n         self.n_components = n_components\n         self.tol = tol\n@@ -96,6 +103,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n             warnings.warn('Initialization %d did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.' % (init + 1), ConvergenceWarning)\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n         return self\n     def _e_step(self, X):\n         log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n", "normalized_occurrence": 1}
