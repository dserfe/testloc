{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..6ed4680 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -107,16 +107,18 @@ class URLValidator(RegexValidator):\n         if scheme not in self.schemes:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n+        # Check if URL can be split first\n+        try:\n+            scheme, netloc, path, query, fragment = urlsplit(value)\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n         # Then check full URL\n         try:\n             super().__call__(value)\n         except ValidationError as e:\n             # Trivial case failed. Try for possible IDN domain\n             if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..2aacbbe 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -62,14 +62,14 @@ class URLValidator(RegexValidator):\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        try:\n+            scheme, netloc, path, query, fragment = urlsplit(value)\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n             super().__call__(value)\n         except ValidationError as e:\n             if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)\n                 except UnicodeError:\n", "normalized_occurrence": 2}
