{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..bbaebf6 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -184,7 +184,9 @@ class ForwardManyToOneDescriptor:\n             else:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n+                # Ensure deferred fields of the outer queryset do not affect the inner queryset\n+                non_deferred_instance = type(instance).objects.get(pk=instance.pk)\n+                rel_obj = self.get_object(non_deferred_instance)\n                 remote_field = self.field.remote_field\n                 # If this is a one-to-one relation, set the reverse accessor\n                 # cache on the related object to the current instance to avoid\n@@ -407,7 +409,9 @@ class ReverseOneToOneDescriptor:\n             else:\n                 filter_args = self.related.field.get_forward_related_filter(instance)\n                 try:\n-                    rel_obj = self.get_queryset(instance=instance).get(**filter_args)\n+                    # Ensure deferred fields of the outer queryset do not affect the inner queryset\n+                    non_deferred_instance = type(instance).objects.get(pk=instance.pk)\n+                    rel_obj = self.get_queryset(instance=non_deferred_instance).get(**filter_args)\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..b317d02 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -56,7 +56,8 @@ class ForwardManyToOneDescriptor:\n             else:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n+                non_deferred_instance = type(instance).objects.get(pk=instance.pk)\n+                rel_obj = self.get_object(non_deferred_instance)\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n@@ -147,7 +148,8 @@ class ReverseOneToOneDescriptor:\n             else:\n                 filter_args = self.related.field.get_forward_related_filter(instance)\n                 try:\n-                    rel_obj = self.get_queryset(instance=instance).get(**filter_args)\n+                    non_deferred_instance = type(instance).objects.get(pk=instance.pk)\n+                    rel_obj = self.get_queryset(instance=non_deferred_instance).get(**filter_args)\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n", "normalized_occurrence": 1}
