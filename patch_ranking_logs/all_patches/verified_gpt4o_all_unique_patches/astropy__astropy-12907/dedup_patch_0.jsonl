{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..08ff871 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -199,20 +199,12 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n-        # this does not work for more than 2 coordinates\n-        mat = np.zeros((noutp, model.n_inputs))\n-        if pos == 'left':\n-            mat[:model.n_outputs, : model.n_inputs] = 1\n-        else:\n-            mat[-model.n_outputs:, -model.n_inputs:] = 1\n-    else:\n-        mat = np.zeros((noutp, model.n_inputs))\n+    mat = np.zeros((noutp, model.n_inputs))\n \n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+    for i in range(model.n_inputs):\n+        mat[i, i] = 1\n+    if pos == 'right':\n+        mat = np.roll(mat, (noutp - model.n_outputs))\n     return mat\n \n \n@@ -234,12 +226,12 @@ def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n \n     if isinstance(left, Model):\n-        cleft = _coord_matrix(left, 'left', noutp)\n+        cleft = _coord_matrix(left, 'left', noutp) if left.n_submodels == 1 else separability_matrix(left)\n     else:\n         cleft = np.zeros((noutp, left.shape[1]))\n         cleft[: left.shape[0], : left.shape[1]] = left\n     if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n+        cright = _coord_matrix(right, 'right', noutp) if right.n_submodels == 1 else separability_matrix(right)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n         cright[-right.shape[0]:, -right.shape[1]:] = 1\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..72c6480 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -54,28 +54,21 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        if pos == 'left':\n-            mat[:model.n_outputs, :model.n_inputs] = 1\n-        else:\n-            mat[-model.n_outputs:, -model.n_inputs:] = 1\n-    else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+    mat = np.zeros((noutp, model.n_inputs))\n+    for i in range(model.n_inputs):\n+        mat[i, i] = 1\n+    if pos == 'right':\n+        mat = np.roll(mat, noutp - model.n_outputs)\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n     if isinstance(left, Model):\n-        cleft = _coord_matrix(left, 'left', noutp)\n+        cleft = _coord_matrix(left, 'left', noutp) if left.n_submodels == 1 else separability_matrix(left)\n     else:\n         cleft = np.zeros((noutp, left.shape[1]))\n         cleft[:left.shape[0], :left.shape[1]] = left\n     if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n+        cright = _coord_matrix(right, 'right', noutp) if right.n_submodels == 1 else separability_matrix(right)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n         cright[-right.shape[0]:, -right.shape[1]:] = 1\n", "normalized_occurrence": 1}
