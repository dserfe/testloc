{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..1e4dcc6 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -125,9 +125,20 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n+    during collection by using the ``allow_module_level`` flag. This function can\n     be called in doctests as well.\n \n+    Note: Using `pytest.skip` outside of a test is not allowed without the\n+    `allow_module_level=True` flag. To skip the entire module, you can use:\n+\n+        from pytest import skip\n+        import sys\n+        if sys.version_info < (3, 8):\n+            skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+    Alternatively, you can use `pytestmark = pytest.mark.{skip,skipif}` at the\n+    module level, but this may not prevent syntax errors in some cases.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..5250971 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -83,9 +83,20 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     \"\"\"Skip an executing test with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n+    during collection by using the ``allow_module_level`` flag. This function can\n     be called in doctests as well.\n \n+    Note: Using `pytest.skip` outside of a test is not allowed without the\n+    `allow_module_level=True` flag. To skip the entire module, you can use:\n+\n+        from pytest import skip\n+        import sys\n+        if sys.version_info < (3, 8):\n+            skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+    Alternatively, you can use `pytestmark = pytest.mark.{skip,skipif}` at the\n+    module level, but this may not prevent syntax errors in some cases.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n         of the module. Defaults to False.\n", "normalized_occurrence": 1}
