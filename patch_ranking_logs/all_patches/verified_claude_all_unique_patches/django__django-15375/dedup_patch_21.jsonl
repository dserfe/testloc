{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 3a34bd9..af14ff5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1680,6 +1680,10 @@ class SQLAggregateCompiler(SQLCompiler):\n         sql = ', '.join(sql)\n         params = tuple(params)\n \n+        if not sql and not self.query.annotation_select:\n+            # If all annotations were moved to the outer query and we have no columns\n+            # to select, we need to select at least one column from the inner query\n+            sql = '1'\n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(\n             self.using, elide_empty=self.elide_empty,\n         ).as_sql(with_col_aliases=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 79108fc..3f42cf2 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -946,6 +946,8 @@ class SQLAggregateCompiler(SQLCompiler):\n         self.col_count = len(self.query.annotation_select)\n         sql = ', '.join(sql)\n         params = tuple(params)\n+        if not sql and (not self.query.annotation_select):\n+            sql = '1'\n         inner_query_sql, inner_query_params = self.query.inner_query.get_compiler(self.using, elide_empty=self.elide_empty).as_sql(with_col_aliases=True)\n         sql = 'SELECT %s FROM (%s) subquery' % (sql, inner_query_sql)\n         params = params + inner_query_params\n", "normalized_occurrence": 1}
