{"model_name_or_path": "agentless", "instance_id": "django__django-14752", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex cbda0a6..cd915c2 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -11,12 +11,18 @@ class AutocompleteJsonView(BaseListView):\n \n     def get(self, request, *args, **kwargs):\n         \"\"\"\n+    \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         Return a JsonResponse with search results of the form:\n         {\n             results: [{id: \"123\" text: \"foo\"}],\n             pagination: {more: true}\n         }\n         \"\"\"\n+    \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n \n         if not self.has_perm(request):\n@@ -26,8 +32,7 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 62aa579..c6e30b0 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -10,18 +10,24 @@ class AutocompleteJsonView(BaseListView):\n \n     def get(self, request, *args, **kwargs):\n         \"\"\"\n+    \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         Return a JsonResponse with search results of the form:\n         {\n             results: [{id: \"123\" text: \"foo\"}],\n             pagination: {more: true}\n         }\n         \"\"\"\n+\n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         self.term, self.model_admin, self.source_field, to_field_name = self.process_request(request)\n         if not self.has_perm(request):\n             raise PermissionDenied\n         self.object_list = self.get_queryset()\n         context = self.get_context_data()\n-        return JsonResponse({'results': [{'id': str(getattr(obj, to_field_name)), 'text': str(obj)} for obj in context['object_list']], 'pagination': {'more': context['page_obj'].has_next()}})\n+        return JsonResponse({'results': [self.serialize_result(obj, to_field_name) for obj in context['object_list']], 'pagination': {'more': context['page_obj'].has_next()}})\n \n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n", "normalized_occurrence": 1}
