{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 87da872..5b8cfc6 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -125,11 +125,15 @@ class Basic(Printable, metaclass=ManagedProperties):\n         return self.args\n \n     def __getstate__(self):\n-        return {}\n+        \"\"\"Returns state that contains only attributes defined in __slots__\"\"\"\n+        return {slot: getattr(self, slot) for slot in self.__slots__ \n+                if hasattr(self, slot)}\n \n     def __setstate__(self, state):\n+        \"\"\"Only restores attributes defined in __slots__\"\"\"\n         for k, v in state.items():\n-            setattr(self, k, v)\n+            if k in self.__slots__:\n+                setattr(self, k, v)\n \n     def __hash__(self):\n         # hash cannot be cached using cache_it because infinite recurrence\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex d8b6046..9e98615 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -58,10 +58,11 @@ class Basic(Printable, metaclass=ManagedProperties):\n     def __getnewargs__(self):\n         return self.args\n     def __getstate__(self):\n-        return {}\n+        return {slot: getattr(self, slot) for slot in self.__slots__ if hasattr(self, slot)}\n     def __setstate__(self, state):\n         for k, v in state.items():\n-            setattr(self, k, v)\n+            if k in self.__slots__:\n+                setattr(self, k, v)\n     def __hash__(self):\n         h = self._mhash\n         if h is None:\n", "normalized_occurrence": 1}
