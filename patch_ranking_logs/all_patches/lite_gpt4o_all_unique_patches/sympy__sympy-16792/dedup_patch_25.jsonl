{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..83f2f8a 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -433,7 +433,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n         # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        py_args = [a for a in py_args if a.name not in py_inferred]\n         return py_returns, py_args, py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n@@ -441,7 +441,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or (arg.name in [a.name for a in args]):\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..2b2d5a8 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -188,13 +188,13 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        py_args = [a for a in py_args if a.name not in py_inferred]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or arg.name in [a.name for a in args]:\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n", "normalized_occurrence": 1}
