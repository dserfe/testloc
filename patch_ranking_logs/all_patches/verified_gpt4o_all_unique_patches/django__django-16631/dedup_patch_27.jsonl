{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 718fbb5..ea22ab8 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,11 +136,20 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n-        return salted_hmac(\n-            key_salt,\n-            self.password,\n-            algorithm=\"sha256\",\n-        ).hexdigest()\n+        from django.conf import settings\n+        from django.core.signing import BadSignature, SignatureExpired\n+\n+        for key in [settings.SECRET_KEY] + getattr(settings, 'SECRET_KEY_FALLBACKS', []):\n+            try:\n+                return salted_hmac(\n+                    key_salt,\n+                    self.password,\n+                    secret=key,\n+                    algorithm=\"sha256\",\n+                ).hexdigest()\n+            except (BadSignature, SignatureExpired):\n+                continue\n+        raise ValueError(\"Failed to generate session auth hash with any provided key.\")\n \n     @classmethod\n     def get_email_field_name(cls):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 04240b6..94d4a21 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -64,7 +64,14 @@ class AbstractBaseUser(models.Model):\n         return is_password_usable(self.password)\n     def get_session_auth_hash(self):\n         key_salt = 'django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash'\n-        return salted_hmac(key_salt, self.password, algorithm='sha256').hexdigest()\n+        from django.conf import settings\n+        from django.core.signing import BadSignature, SignatureExpired\n+        for key in [settings.SECRET_KEY] + getattr(settings, 'SECRET_KEY_FALLBACKS', []):\n+            try:\n+                return salted_hmac(key_salt, self.password, secret=key, algorithm='sha256').hexdigest()\n+            except (BadSignature, SignatureExpired):\n+                continue\n+        raise ValueError('Failed to generate session auth hash with any provided key.')\n     @classmethod\n     def get_email_field_name(cls):\n         try:\n", "normalized_occurrence": 1}
