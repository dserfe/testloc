{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 0b52a54..60125fe 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1917,7 +1917,14 @@ class Query(BaseExpression):\n         primary key, and the query would be equivalent, the optimization\n         will be made automatically.\n         \"\"\"\n-        group_by = list(self.select)\n+        group_by = []\n+        if self.group_by is None:\n+            group_by = list(self.select)\n+        elif self.group_by is True:\n+            for col in self.select:\n+                group_by.extend(col.get_group_by_cols())\n+        else:\n+            group_by = list(self.group_by)\n         if self.annotation_select:\n             for alias, annotation in self.annotation_select.items():\n                 try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 881d481..bdc2d6f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1026,7 +1026,14 @@ class Query(BaseExpression):\n         if force_empty:\n             self.default_ordering = False\n     def set_group_by(self):\n-        group_by = list(self.select)\n+        group_by = []\n+        if self.group_by is None:\n+            group_by = list(self.select)\n+        elif self.group_by is True:\n+            for col in self.select:\n+                group_by.extend(col.get_group_by_cols())\n+        else:\n+            group_by = list(self.group_by)\n         if self.annotation_select:\n             for alias, annotation in self.annotation_select.items():\n                 try:\n", "normalized_occurrence": 1}
