{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..4077eb9 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,8 +3174,25 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Handle weak references in _align_label_groups\n+        align_label_groups = state.pop('_align_label_groups', None)\n+        if align_label_groups is not None:\n+            state['_align_label_groups'] = {\n+                key: [ref() for ref in refs if ref() is not None]\n+                for key, refs in align_label_groups.items()\n+            }\n         return state\n \n+    def __setstate__(self, state):\n+        align_label_groups = state.pop('_align_label_groups', None)\n+        if align_label_groups is not None:\n+            self._align_label_groups = {\n+                key: [weakref.ref(obj) for obj in objs]\n+                for key, objs in align_label_groups.items()\n+            }\n+        else:\n+            self._align_label_groups = {}\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..40a68b0 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,7 +951,16 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        align_label_groups = state.pop('_align_label_groups', None)\n+        if align_label_groups is not None:\n+            state['_align_label_groups'] = {key: [ref() for ref in refs if ref() is not None] for key, refs in align_label_groups.items()}\n         return state\n+    def __setstate__(self, state):\n+        align_label_groups = state.pop('_align_label_groups', None)\n+        if align_label_groups is not None:\n+            self._align_label_groups = {key: [weakref.ref(obj) for obj in objs] for key, objs in align_label_groups.items()}\n+        else:\n+            self._align_label_groups = {}\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
