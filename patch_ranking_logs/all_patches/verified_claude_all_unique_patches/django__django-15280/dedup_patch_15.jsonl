{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..6aa89cb 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -166,38 +166,22 @@ class ForwardManyToOneDescriptor:\n         if instance is None:\n             return self\n \n-        # The related instance is loaded from the database and then cached\n-        # by the field on the model instance state. It can also be pre-cached\n-        # by the reverse accessor (ReverseOneToOneDescriptor).\n-        try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n-            has_value = None not in self.field.get_local_related_value(instance)\n-            ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n-            if ancestor_link and ancestor_link.is_cached(instance):\n-                # An ancestor link will exist if this field is defined on a\n-                # multi-table inheritance parent of the instance's class.\n-                ancestor = ancestor_link.get_cached_value(instance)\n-                # The value might be cached on an ancestor if the instance\n-                # originated from walking down the inheritance chain.\n-                rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n-            if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                # If this is a one-to-one relation, set the reverse accessor\n-                # cache on the related object to the current instance to avoid\n-                # an extra SQL query if it's accessed later on.\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n+\n \n         if rel_obj is None and not self.field.null:\n             raise self.RelatedObjectDoesNotExist(\n                 \"%s has no %s.\" % (self.field.model.__name__, self.field.name)\n             )\n         else:\n+            # For prefetched objects, we need to ensure we preserve their deferred state\n+            # rather than potentially inheriting deferred state from the parent instance\n+            if rel_obj is not None and getattr(instance, '_prefetched_objects_cache', None):\n+                # Only copy deferred fields if this is a prefetched object\n+                if hasattr(rel_obj, '_deferred') and instance._prefetched_objects_cache.get(self.field.name):\n+                    deferred_fields = set(rel_obj._deferred)\n+                    if hasattr(rel_obj, '_prefetched_objects_cache'):\n+                        # If the related object also has prefetched objects, preserve those too\n+                        rel_obj._prefetched_objects_cache = rel_obj._prefetched_objects_cache.copy()\n             return rel_obj\n \n     def __set__(self, instance, value):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..0c2d886 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -45,25 +45,14 @@ class ForwardManyToOneDescriptor:\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n-        try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n-            has_value = None not in self.field.get_local_related_value(instance)\n-            ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n-            if ancestor_link and ancestor_link.is_cached(instance):\n-                ancestor = ancestor_link.get_cached_value(instance)\n-                rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n-            if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n         else:\n+            if rel_obj is not None and getattr(instance, '_prefetched_objects_cache', None):\n+                if hasattr(rel_obj, '_deferred') and instance._prefetched_objects_cache.get(self.field.name):\n+                    deferred_fields = set(rel_obj._deferred)\n+                    if hasattr(rel_obj, '_prefetched_objects_cache'):\n+                        rel_obj._prefetched_objects_cache = rel_obj._prefetched_objects_cache.copy()\n             return rel_obj\n     def __set__(self, instance, value):\n         if value is not None and (not isinstance(value, self.field.remote_field.model._meta.concrete_model)):\n", "normalized_occurrence": 1}
