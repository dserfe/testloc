{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..747c51e 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -45,7 +46,21 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            # Handle partial functions\n+            partial_func = func.func\n+            if not hasattr(partial_func, '__name__'):\n+                # A class-based view\n+                self._func_path = partial_func.__class__.__module__ + '.' + partial_func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = partial_func.__module__ + '.' + partial_func.__name__\n+            # Add partial args/kwargs to the path\n+            if func.args:\n+                self._func_path += str(func.args)\n+            if func.keywords:\n+                self._func_path += str(func.keywords)\n+        elif not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n", "occurrence": 2, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..63d30e2 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -29,7 +30,17 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            partial_func = func.func\n+            if not hasattr(partial_func, '__name__'):\n+                self._func_path = partial_func.__class__.__module__ + '.' + partial_func.__class__.__name__\n+            else:\n+                self._func_path = partial_func.__module__ + '.' + partial_func.__name__\n+            if func.args:\n+                self._func_path += str(func.args)\n+            if func.keywords:\n+                self._func_path += str(func.keywords)\n+        elif not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n", "normalized_occurrence": 3}
