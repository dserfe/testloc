{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..d554179 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, TypeAlias, cast\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -22,12 +22,15 @@ from sphinx.util import inspect, typing\n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    \"\"\"Record type hints to env object and include type alias docstrings.\"\"\"\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            if isinstance(obj, TypeAlias) and obj.__doc__:\n+                annotation['__doc__'] = obj.__doc__\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n@@ -47,6 +50,11 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n         if signature['module']:\n             fullname = '.'.join([signature['module'], signature['fullname']])\n+            if fullname in annotations and '__doc__' in annotations[fullname]:\n+                desc = nodes.paragraph()\n+                desc += nodes.Text(annotations[fullname]['__doc__'])\n+                contentnode.insert(0, desc)\n+            fullname = '.'.join([signature['module'], signature['fullname']])\n         else:\n             fullname = signature['fullname']\n     except KeyError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..5ae3806 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,6 +1,6 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, TypeAlias, cast\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -12,6 +12,8 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            if isinstance(obj, TypeAlias) and obj.__doc__:\n+                annotation['__doc__'] = obj.__doc__\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n@@ -28,6 +30,11 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n         if signature['module']:\n             fullname = '.'.join([signature['module'], signature['fullname']])\n+            if fullname in annotations and '__doc__' in annotations[fullname]:\n+                desc = nodes.paragraph()\n+                desc += nodes.Text(annotations[fullname]['__doc__'])\n+                contentnode.insert(0, desc)\n+            fullname = '.'.join([signature['module'], signature['fullname']])\n         else:\n             fullname = signature['fullname']\n     except KeyError:\n", "normalized_occurrence": 1}
