{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..92a157a 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1238,14 +1238,21 @@ class MigrationAutodetector:\n                 for old_index in removed_indexes:\n                     old_index_dec = old_index.deconstruct()\n                     old_index_name = old_index_dec[2].pop(\"name\")\n-                    # Indexes are the same except for the names.\n-                    if (\n-                        new_index_dec == old_index_dec\n-                        and new_index_name != old_index_name\n-                    ):\n-                        renamed_indexes.append((old_index_name, new_index_name, None))\n-                        remove_from_added.append(new_index)\n-                        remove_from_removed.append(old_index)\n+                    # Compare indexes more thoroughly to detect functional equivalence\n+                    if new_index_name != old_index_name:\n+                        # Check if indexes are exactly the same except for names\n+                        if new_index_dec == old_index_dec:\n+                            renamed_indexes.append((old_index_name, new_index_name, None))\n+                            remove_from_added.append(new_index)\n+                            remove_from_removed.append(old_index)\n+                        # Check if indexes are functionally equivalent (same fields and expressions)\n+                        elif (\n+                            new_index.fields == old_index.fields\n+                            and new_index.expressions == old_index.expressions\n+                        ):\n+                            renamed_indexes.append((old_index_name, new_index_name, None))\n+                            remove_from_added.append(new_index)\n+                            remove_from_removed.append(old_index)\n             # Find index_together changed to indexes.\n             for (\n                 old_value,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..2f0b467 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -508,10 +508,15 @@ class MigrationAutodetector:\n                 for old_index in removed_indexes:\n                     old_index_dec = old_index.deconstruct()\n                     old_index_name = old_index_dec[2].pop('name')\n-                    if new_index_dec == old_index_dec and new_index_name != old_index_name:\n-                        renamed_indexes.append((old_index_name, new_index_name, None))\n-                        remove_from_added.append(new_index)\n-                        remove_from_removed.append(old_index)\n+                    if new_index_name != old_index_name:\n+                        if new_index_dec == old_index_dec:\n+                            renamed_indexes.append((old_index_name, new_index_name, None))\n+                            remove_from_added.append(new_index)\n+                            remove_from_removed.append(old_index)\n+                        elif new_index.fields == old_index.fields and new_index.expressions == old_index.expressions:\n+                            renamed_indexes.append((old_index_name, new_index_name, None))\n+                            remove_from_added.append(new_index)\n+                            remove_from_removed.append(old_index)\n             for old_value, new_value, index_together_app_label, index_together_model_name, dependencies in self._get_altered_foo_together_operations(operations.AlterIndexTogether.option_name):\n                 if app_label != index_together_app_label or model_name != index_together_model_name:\n                     continue\n", "normalized_occurrence": 1}
