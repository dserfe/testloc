{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 718fbb5..5485d2f 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,11 +136,12 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n-        return salted_hmac(\n-            key_salt,\n-            self.password,\n-            algorithm=\"sha256\",\n-        ).hexdigest()\n+        return signing.Signer(\n+            key=settings.SECRET_KEY,\n+            fallback_keys=settings.SECRET_KEY_FALLBACKS,\n+            salt=key_salt,\n+            algorithm=\"sha256\"\n+        ).signature(self.password)\n \n     @classmethod\n     def get_email_field_name(cls):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 04240b6..235376d 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -64,7 +64,7 @@ class AbstractBaseUser(models.Model):\n         return is_password_usable(self.password)\n     def get_session_auth_hash(self):\n         key_salt = 'django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash'\n-        return salted_hmac(key_salt, self.password, algorithm='sha256').hexdigest()\n+        return signing.Signer(key=settings.SECRET_KEY, fallback_keys=settings.SECRET_KEY_FALLBACKS, salt=key_salt, algorithm='sha256').signature(self.password)\n     @classmethod\n     def get_email_field_name(cls):\n         try:\n", "normalized_occurrence": 1}
