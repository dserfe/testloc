{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..9ebe6b4 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -993,11 +993,14 @@ class MultiValueField(Field):\n                                         self.error_messages['incomplete'])\n             if self.disabled:\n                 f.disabled = True\n-            if self.require_all_fields:\n-                # Set 'required' to False on the individual fields, because the\n-                # required validation will be handled by MultiValueField, not\n-                # by those individual fields.\n+            if self.require_all_fields or not self.required:\n+                # If require_all_fields is True or the MultiValueField itself is not required,\n+                # set 'required' to False on the individual fields.\n                 f.required = False\n+            elif not self.require_all_fields and self.required:\n+                # If require_all_fields is False but the MultiValueField itself is required,\n+                # do not modify the 'required' attribute of individual fields.\n+                pass\n         self.fields = fields\n \n     def __deepcopy__(self, memo):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..697ec66 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -574,8 +574,10 @@ class MultiValueField(Field):\n             f.error_messages.setdefault('incomplete', self.error_messages['incomplete'])\n             if self.disabled:\n                 f.disabled = True\n-            if self.require_all_fields:\n+            if self.require_all_fields or not self.required:\n                 f.required = False\n+            elif not self.require_all_fields and self.required:\n+                pass\n         self.fields = fields\n     def __deepcopy__(self, memo):\n         result = super().__deepcopy__(memo)\n", "normalized_occurrence": 1}
