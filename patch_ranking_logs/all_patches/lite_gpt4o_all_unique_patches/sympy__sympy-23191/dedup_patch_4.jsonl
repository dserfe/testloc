{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..3d1b8f3 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1154,12 +1154,15 @@ class PrettyPrinter(Printer):\n                 elif '\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n                     flag[i] = 1\n                     tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS LOWER HOOK}',\n-                                        '\\N{RIGHT PARENTHESIS LOWER HOOK}'\n+                                        '\\N{RIGHT PARENTHESIS LOWER HOOK}' \n                                         + ' ' + vectstrs[i])\n-                else:\n+                elif '\\N{RIGHT PARENTHESIS UPPER HOOK}' in tempstr:\n+                    flag[i] = 1\n                     tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                        '\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                                        '\\N{RIGHT PARENTHESIS UPPER HOOK}' \n                                         + ' ' + vectstrs[i])\n+                else:\n+                    tempstr += ' ' + vectstrs[i]\n                 o1[i] = tempstr\n \n         o1 = [x.split('\\n') for x in o1]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..4fb0e03 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -843,8 +843,11 @@ class PrettyPrinter(Printer):\n                 elif '⎠' in tempstr:\n                     flag[i] = 1\n                     tempstr = tempstr.replace('⎠', '⎠' + ' ' + vectstrs[i])\n-                else:\n+                elif '⎞' in tempstr:\n+                    flag[i] = 1\n                     tempstr = tempstr.replace('⎞', '⎞' + ' ' + vectstrs[i])\n+                else:\n+                    tempstr += ' ' + vectstrs[i]\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n", "normalized_occurrence": 2}
