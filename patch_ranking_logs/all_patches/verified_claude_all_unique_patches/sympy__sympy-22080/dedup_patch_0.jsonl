{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..02345d5 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -240,4 +241,13 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        from sympy.core.mul import Mul\n+        if isinstance(a, Mul):\n+            # Handle cases like (-1 * Mod(x,y)) by distributing the negative\n+            coeff = a.args[0] if len(a.args) > 0 and a.args[0].is_number else None\n+            if coeff is not None and coeff.is_negative:\n+                # For negative coefficient, result = |coeff| * (b - Mod(rest, b))\n+                rest = Mul._from_args(a.args[1:])\n+                return abs(coeff) * (b - (rest - b*floor(rest/b)))\n+        # Default case\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..4c052ef 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -162,4 +162,10 @@ class Mod(Function):\n             return True\n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n+        from sympy.core.mul import Mul\n+        if isinstance(a, Mul):\n+            coeff = a.args[0] if len(a.args) > 0 and a.args[0].is_number else None\n+            if coeff is not None and coeff.is_negative:\n+                rest = Mul._from_args(a.args[1:])\n+                return abs(coeff) * (b - (rest - b * floor(rest / b)))\n         return a - b * floor(a / b)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
