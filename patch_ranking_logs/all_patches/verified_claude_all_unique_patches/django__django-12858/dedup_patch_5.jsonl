{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..4b106a3 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -8,6 +8,42 @@ from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n \n \n+def _is_valid_order_by(field_name, model):\n+    \"\"\"\n+    Check if field_name is a valid ordering expression.\n+    Handles regular fields, related fields, and lookup expressions.\n+    \"\"\"\n+    # Handle descending order prefix\n+    if field_name.startswith('-'):\n+        field_name = field_name[1:]\n+    \n+    # Split the field path into parts\n+    parts = field_name.split('__')\n+    current_model = model\n+    \n+    # Traverse through all parts except the last one\n+    for part in parts[:-1]:\n+        try:\n+            field = current_model._meta.get_field(part)\n+            if hasattr(field, 'remote_field') and field.remote_field:\n+                current_model = field.remote_field.model\n+            else:\n+                return False\n+        except Exception:\n+            return False\n+    \n+    # The last part could be either a field or a lookup\n+    last_part = parts[-1]\n+    try:\n+        # Check if it's a valid field\n+        current_model._meta.get_field(last_part)\n+        return True\n+    except Exception:\n+        # Check if it's a valid lookup (like 'isnull')\n+        if last_part in ('isnull', 'exact', 'gt', 'lt', 'gte', 'lte'):\n+            return True\n+        return False\n+\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n", "occurrence": 1, "normalized_patch": "--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n+def _is_valid_order_by(field_name, model):\n+    if field_name.startswith('-'):\n+        field_name = field_name[1:]\n+    parts = field_name.split('__')\n+    current_model = model\n+    for part in parts[:-1]:\n+        try:\n+            field = current_model._meta.get_field(part)\n+            if hasattr(field, 'remote_field') and field.remote_field:\n+                current_model = field.remote_field.model\n+            else:\n+                return False\n+        except Exception:\n+            return False\n+    last_part = parts[-1]\n+    try:\n+        current_model._meta.get_field(last_part)\n+        return True\n+    except Exception:\n+        if last_part in ('isnull', 'exact', 'gt', 'lt', 'gte', 'lte'):\n+            return True\n+        return False", "normalized_occurrence": 1}
