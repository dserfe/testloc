{"model_name_or_path": "agentless", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..d1bacb9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -189,6 +189,7 @@ class QuerySet:\n         self._db = using\n         self._hints = hints or {}\n         self._query = query or sql.Query(self.model)\n+        self._iterable_class = getattr(query, '_iterable_class', ModelIterable)\n         self._result_cache = None\n         self._sticky_filter = False\n         self._for_write = False\n@@ -200,12 +201,10 @@ class QuerySet:\n         self._defer_next_filter = False\n         self._deferred_filter = None\n \n-    @property\n-    def query(self):\n-        if self._deferred_filter:\n-            negate, args, kwargs = self._deferred_filter\n-            self._filter_or_exclude_inplace(negate, args, kwargs)\n-            self._deferred_filter = None\n+    @query.setter\n+    def query(self, value):\n+        self._query = value\n+        self._iterable_class = getattr(value, '_iterable_class', self._iterable_class)\n         return self._query\n \n     @query.setter\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..bbbd080 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -106,6 +106,7 @@ class QuerySet:\n         self._db = using\n         self._hints = hints or {}\n         self._query = query or sql.Query(self.model)\n+        self._iterable_class = getattr(query, '_iterable_class', ModelIterable)\n         self._result_cache = None\n         self._sticky_filter = False\n         self._for_write = False\n@@ -116,12 +117,10 @@ class QuerySet:\n         self._fields = None\n         self._defer_next_filter = False\n         self._deferred_filter = None\n-    @property\n-    def query(self):\n-        if self._deferred_filter:\n-            negate, args, kwargs = self._deferred_filter\n-            self._filter_or_exclude_inplace(negate, args, kwargs)\n-            self._deferred_filter = None\n+    @query.setter\n+    def query(self, value):\n+        self._query = value\n+        self._iterable_class = getattr(value, '_iterable_class', self._iterable_class)\n         return self._query\n     @query.setter\n     def query(self, value):\n", "normalized_occurrence": 1}
