{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 761c4b8..fee5b97 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -181,13 +181,23 @@ class CDS(Base):\n \n         def p_division_of_units(p):\n             \"\"\"\n-            division_of_units : DIVISION unit_expression\n-                              | unit_expression DIVISION combined_units\n+            division_of_units : unit_expression DIVISION unit_expression\n+                              | division_of_units DIVISION unit_expression\n             \"\"\"\n-            if len(p) == 3:\n-                p[0] = p[2] ** -1\n-            else:\n-                p[0] = p[1] / p[3]\n+            if len(p) == 4:\n+                if isinstance(p[1], tuple):\n+                    # If we have a previous division result, continue the chain\n+                    numerator, denominator = p[1]\n+                    p[0] = (numerator, denominator * p[3])\n+                else:\n+                    # Start a new division chain\n+                    p[0] = (p[1], p[3])\n+            \n+            # At the end of parsing, convert the (numerator, denominator) tuple to actual division\n+            if not isinstance(p[0], tuple):\n+                return\n+            numerator, denominator = p[0]\n+            p[0] = numerator / denominator\n \n         def p_unit_expression(p):\n             \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 829c8ad..fce9739 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -79,10 +79,16 @@ class CDS(Base):\n             else:\n                 p[0] = p[1]\n         def p_division_of_units(p):\n-            if len(p) == 3:\n-                p[0] = p[2] ** (-1)\n-            else:\n-                p[0] = p[1] / p[3]\n+            if len(p) == 4:\n+                if isinstance(p[1], tuple):\n+                    numerator, denominator = p[1]\n+                    p[0] = (numerator, denominator * p[3])\n+                else:\n+                    p[0] = (p[1], p[3])\n+            if not isinstance(p[0], tuple):\n+                return\n+            numerator, denominator = p[0]\n+            p[0] = numerator / denominator\n         def p_unit_expression(p):\n             if len(p) == 2:\n                 p[0] = p[1]\n", "normalized_occurrence": 1}
