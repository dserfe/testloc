{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..4909eb6 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -600,7 +600,13 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        def wrapped_func(val):\n+            func(val)\n+            # Ensure the callbacks are re-registered after clearing and redrawing the figure\n+            self.ax.figure.canvas.mpl_connect('button_press_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('motion_notify_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('button_release_event', self._update)\n+        return self._observers.connect('changed', wrapped_func)\n \n \n class RangeSlider(SliderBase):\n@@ -983,7 +989,13 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        def wrapped_func(val):\n+            func(val)\n+            # Ensure the callbacks are re-registered after clearing and redrawing the figure\n+            self.ax.figure.canvas.mpl_connect('button_press_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('motion_notify_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('button_release_event', self._update)\n+        return self._observers.connect('changed', wrapped_func)\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..b41ea21 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -519,7 +519,13 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def wrapped_func(val):\n+            func(val)\n+            self.ax.figure.canvas.mpl_connect('button_press_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('motion_notify_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('button_release_event', self._update)\n+        return self._observers.connect('changed', wrapped_func)\n \n class RangeSlider(SliderBase):\n     \"\"\"\n@@ -795,7 +801,13 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def wrapped_func(val):\n+            func(val)\n+            self.ax.figure.canvas.mpl_connect('button_press_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('motion_notify_event', self._update)\n+            self.ax.figure.canvas.mpl_connect('button_release_event', self._update)\n+        return self._observers.connect('changed', wrapped_func)\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
