{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..49d1ce6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -18,10 +18,13 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+import struct\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    if objtype == 'struct.Struct':\n+        objtype = 'struct.Struct'\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..68d733d 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,12 +1,16 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+import struct\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    if objtype == 'struct.Struct':\n+        objtype = 'struct.Struct'\n+    'Record type hints to env object.'\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n", "normalized_occurrence": 1}
