{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..8f0af98 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -164,7 +164,14 @@ class BlockMatrix(MatrixExpr):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            blocks = self.blocks*other.blocks\n+            # Convert any Zero objects back to ZeroMatrix with proper dimensions\n+            from sympy.matrices.expressions import ZeroMatrix\n+            for i in range(blocks.shape[0]):\n+                for j in range(blocks.shape[1]):\n+                    if blocks[i, j].is_zero:\n+                        blocks[i, j] = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+            return BlockMatrix(blocks)\n \n         return self * other\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..ac0f9f2 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -72,7 +72,13 @@ class BlockMatrix(MatrixExpr):\n         return isinstance(other, BlockMatrix) and self.shape == other.shape and (self.blockshape == other.blockshape) and (self.rowblocksizes == other.rowblocksizes) and (self.colblocksizes == other.colblocksizes)\n     def _blockmul(self, other):\n         if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n-            return BlockMatrix(self.blocks * other.blocks)\n+            blocks = self.blocks * other.blocks\n+            from sympy.matrices.expressions import ZeroMatrix\n+            for i in range(blocks.shape[0]):\n+                for j in range(blocks.shape[1]):\n+                    if blocks[i, j].is_zero:\n+                        blocks[i, j] = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+            return BlockMatrix(blocks)\n         return self * other\n     def _blockadd(self, other):\n         if isinstance(other, BlockMatrix) and self.structurally_equal(other):\n", "normalized_occurrence": 1}
