{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..d1bb6ac 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1389,6 +1389,16 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        else:\n+            # Check if it's a standard library type\n+            module_name = node.get('py:module')\n+            if module_name:\n+                try:\n+                    module = __import__(module_name)\n+                    if inspect.isclass(getattr(module, reftarget, None)):\n+                        return contnode\n+                except ImportError:\n+                    pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..0b4a7a3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -847,6 +847,15 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        else:\n+            module_name = node.get('py:module')\n+            if module_name:\n+                try:\n+                    module = __import__(module_name)\n+                    if inspect.isclass(getattr(module, reftarget, None)):\n+                        return contnode\n+                except ImportError:\n+                    pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 2}
