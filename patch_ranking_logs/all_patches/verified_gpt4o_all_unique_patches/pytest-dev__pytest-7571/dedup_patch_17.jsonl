{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..7bf439f 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -353,7 +353,10 @@ class LogCaptureFixture:\n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n         # restore log levels\n+        handler_level = self.handler.level\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..9dc74f0 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -165,7 +165,10 @@ class LogCaptureFixture:\n         self._item = item\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n+        handler_level = self.handler.level\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n     @property\n", "normalized_occurrence": 1}
