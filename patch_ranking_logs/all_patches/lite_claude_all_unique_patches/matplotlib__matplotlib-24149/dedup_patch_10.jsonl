{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..a374292 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1715,6 +1715,8 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n     This is an type-independent way of obtaining the first non-None element,\n     supporting both index access and the iterator protocol.\n     The first non-None element will be obtained when skip_none is True.\n+    If no finite values are found and skip_nonfinite is True, returns the first\n+    non-None value.\n     \"\"\"\n     def safe_isfinite(val):\n         if val is None:\n@@ -1746,7 +1748,11 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        try:\n+            return next(val for val in obj if safe_isfinite(val))\n+        except StopIteration:\n+            # If no finite values found, return first non-None value\n+            return next(val for val in obj if val is not None)\n \n \n def sanitize_sequence(data):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..4e2e5a2 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -750,7 +750,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n     elif isinstance(obj, collections.abc.Iterator):\n         raise RuntimeError('matplotlib does not support generators as input')\n     else:\n-        return next((val for val in obj if safe_isfinite(val)))\n+        try:\n+            return next((val for val in obj if safe_isfinite(val)))\n+        except StopIteration:\n+            return next((val for val in obj if val is not None))\n def sanitize_sequence(data):\n     return list(data) if isinstance(data, collections.abc.MappingView) else data\n def normalize_kwargs(kw, alias_mapping=None):\n", "normalized_occurrence": 1}
