{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..8ceb091 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -805,20 +805,18 @@ class Piecewise(Function):\n         return self.func(*[(e**s, c) for e, c in self.args])\n \n     def _eval_subs(self, old, new):\n-        # this is strictly not necessary, but we can keep track\n-        # of whether True or False conditions arise and be\n-        # somewhat more efficient by avoiding other substitutions\n-        # and avoiding invalid conditions that appear after a\n-        # True condition\n+        \"\"\"Override to handle both expressions and conditions in substitutions.\"\"\"\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+            # First evaluate expression substitution\n+            new_e = e._subs(old, new)\n+            # Then evaluate condition substitution\n+            new_c = c._subs(old, new)\n+            if new_c != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            args[i] = (new_e, new_c)\n+            if new_c == True:\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..c352c43 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -444,12 +444,12 @@ class Piecewise(Function):\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+            new_e = e._subs(old, new)\n+            new_c = c._subs(old, new)\n+            if new_c != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            args[i] = (new_e, new_c)\n+            if new_c == True:\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n", "normalized_occurrence": 2}
