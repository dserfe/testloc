{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex bdb6b4c..d5a6465 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -125,17 +125,20 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n \n     def get_key_columns(self, cursor, table_name):\n         cursor.execute(\"\"\"\n-            SELECT a1.attname, c2.relname, a2.attname\n-            FROM pg_constraint con\n-            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\n-            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\n-            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\n-            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\n+            SELECT\n+                kcu.column_name,\n+                ccu.table_name AS referenced_table,\n+                ccu.column_name AS referenced_column\n+            FROM information_schema.constraint_column_usage ccu\n+            JOIN information_schema.key_column_usage kcu\n+                ON ccu.constraint_schema = kcu.constraint_schema\n+                AND ccu.constraint_name = kcu.constraint_name\n+            JOIN information_schema.table_constraints tc\n+                ON kcu.constraint_schema = tc.constraint_schema\n+                AND kcu.constraint_name = tc.constraint_name\n             WHERE\n-                c1.relname = %s AND\n-                con.contype = 'f' AND\n-                c1.relnamespace = c2.relnamespace AND\n-                pg_catalog.pg_table_is_visible(c1.oid)\n+                tc.constraint_type = 'FOREIGN KEY' AND\n+                kcu.table_name = %s\n         \"\"\", [table_name])\n         return cursor.fetchall()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex c5c043d..ce876c0 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -28,7 +28,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n     def get_relations(self, cursor, table_name):\n         return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n     def get_key_columns(self, cursor, table_name):\n-        cursor.execute(\"\\n            SELECT a1.attname, c2.relname, a2.attname\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE\\n                c1.relname = %s AND\\n                con.contype = 'f' AND\\n                c1.relnamespace = c2.relnamespace AND\\n                pg_catalog.pg_table_is_visible(c1.oid)\\n        \", [table_name])\n+        cursor.execute(\"\\n            SELECT\\n                kcu.column_name,\\n                ccu.table_name AS referenced_table,\\n                ccu.column_name AS referenced_column\\n            FROM information_schema.constraint_column_usage ccu\\n            JOIN information_schema.key_column_usage kcu\\n                ON ccu.constraint_schema = kcu.constraint_schema\\n                AND ccu.constraint_name = kcu.constraint_name\\n            JOIN information_schema.table_constraints tc\\n                ON kcu.constraint_schema = tc.constraint_schema\\n                AND kcu.constraint_name = tc.constraint_name\\n            WHERE\\n                tc.constraint_type = 'FOREIGN KEY' AND\\n                kcu.table_name = %s\\n        \", [table_name])\n         return cursor.fetchall()\n     def get_constraints(self, cursor, table_name):\n         constraints = {}\n", "normalized_occurrence": 1}
