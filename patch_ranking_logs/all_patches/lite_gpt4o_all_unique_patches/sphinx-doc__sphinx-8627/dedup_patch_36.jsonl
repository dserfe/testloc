{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..f79b33f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -27,12 +27,20 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            type_aliases = app.config.autodoc_type_aliases or {}\n+            type_aliases.setdefault('struct.Struct', 'struct.Struct')\n+            sig = inspect.signature(obj, type_aliases=type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    param_annotation = typing.stringify(param.annotation)\n+                    if param_annotation == 'Struct':\n+                        param_annotation = 'struct.Struct'\n+                    annotation[param.name] = param_annotation\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'Struct':\n+                    return_annotation = 'struct.Struct'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..ef5aac5 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -11,12 +11,20 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            type_aliases = app.config.autodoc_type_aliases or {}\n+            type_aliases.setdefault('struct.Struct', 'struct.Struct')\n+            sig = inspect.signature(obj, type_aliases=type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    param_annotation = typing.stringify(param.annotation)\n+                    if param_annotation == 'Struct':\n+                        param_annotation = 'struct.Struct'\n+                    annotation[param.name] = param_annotation\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'Struct':\n+                    return_annotation = 'struct.Struct'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
