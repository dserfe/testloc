{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..6c60cda 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,6 +40,31 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        \n+        # Pre-process to ensure AlterOrderWithRespectTo comes before dependent AddIndex\n+        needs_reorder = False\n+        for i, operation in enumerate(operations):\n+            if isinstance(operation, AddIndex) and '_order' in operation.index.fields:\n+                # Look for corresponding AlterOrderWithRespectTo after this operation\n+                for later_op in operations[i+1:]:\n+                    if isinstance(later_op, AlterOrderWithRespectTo):\n+                        needs_reorder = True\n+                        break\n+        \n+        if needs_reorder:\n+            # Reorder operations to put AlterOrderWithRespectTo first\n+            reordered = []\n+            alter_order_ops = []\n+            other_ops = []\n+            \n+            for op in operations:\n+                if isinstance(op, AlterOrderWithRespectTo):\n+                    alter_order_ops.append(op)\n+                else:\n+                    other_ops.append(op)\n+            \n+            operations = alter_order_ops + other_ops\n+        \n         for i, operation in enumerate(operations):\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..92a199e 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,6 +11,23 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n+        needs_reorder = False\n+        for i, operation in enumerate(operations):\n+            if isinstance(operation, AddIndex) and '_order' in operation.index.fields:\n+                for later_op in operations[i + 1:]:\n+                    if isinstance(later_op, AlterOrderWithRespectTo):\n+                        needs_reorder = True\n+                        break\n+        if needs_reorder:\n+            reordered = []\n+            alter_order_ops = []\n+            other_ops = []\n+            for op in operations:\n+                if isinstance(op, AlterOrderWithRespectTo):\n+                    alter_order_ops.append(op)\n+                else:\n+                    other_ops.append(op)\n+            operations = alter_order_ops + other_ops\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n", "normalized_occurrence": 1}
