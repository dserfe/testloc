{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..370ba28 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1018,6 +1018,8 @@ class ModuleDocumenter(Documenter):\n         try:\n             if not self.options.ignore_module_all:\n                 self.__all__ = inspect.getall(self.object)\n+                if self.__all__ is None:\n+                    self.__all__ = []\n         except AttributeError as exc:\n             # __all__ raises an error.\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'),\n@@ -1074,10 +1076,16 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n+            if self.__all__ is not None:\n+                if not self.__all__:\n+                    # if __all__ is an empty list, return an empty list of members\n+                    return False, []\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+\n+                    return False, list(members.values())\n             else:\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..a94b3a0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -537,6 +537,8 @@ class ModuleDocumenter(Documenter):\n         try:\n             if not self.options.ignore_module_all:\n                 self.__all__ = inspect.getall(self.object)\n+                if self.__all__ is None:\n+                    self.__all__ = []\n         except AttributeError as exc:\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'), (self.fullname, exc), type='autodoc')\n         except ValueError as exc:\n@@ -575,8 +577,14 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                return (True, list(members.values()))\n+            if self.__all__ is not None:\n+                if not self.__all__:\n+                    return (False, [])\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+                    return (False, list(members.values()))\n             else:\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n", "normalized_occurrence": 1}
