{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..e3e81fc 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -652,6 +652,9 @@ class BaseModelFormSet(BaseFormSet):\n         return self._queryset\n \n     def save_new(self, form, commit=True):\n+        \"\"\"Raise an error if creating new objects is disabled.\"\"\"\n+        if not self.allow_new:\n+            raise ValidationError(\"Creating new objects is not allowed.\")\n         \"\"\"Save and return a new model instance for the given form.\"\"\"\n         return form.save(commit=commit)\n \n@@ -665,6 +668,12 @@ class BaseModelFormSet(BaseFormSet):\n             obj.delete()\n \n     def save(self, commit=True):\n+        \"\"\"\n+        Save model instances for every form, adding and changing instances\n+        as necessary, and return the list of instances.\n+        \"\"\"\n+        self.allow_new = getattr(self, 'allow_new', True)\n+        self.allow_delete = getattr(self, 'allow_delete', True)\n         \"\"\"\n         Save model instances for every form, adding and changing instances\n         as necessary, and return the list of instances.\n@@ -812,6 +821,8 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n \n     def save_new_objects(self, commit=True):\n+        if not self.allow_new:\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -875,7 +886,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         allow_new=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -890,11 +902,20 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              widgets=widgets, localized_fields=localized_fields,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n-                              can_order=can_order, can_delete=can_delete,\n-                              validate_min=validate_min, validate_max=validate_max,\n-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+    formset_attrs = {\n+        'extra': extra,\n+        'min_num': min_num,\n+        'max_num': max_num,\n+        'can_order': can_order,\n+        'can_delete': can_delete,\n+        'validate_min': validate_min,\n+        'validate_max': validate_max,\n+        'absolute_max': absolute_max,\n+        'can_delete_extra': can_delete_extra,\n+        'renderer': renderer,\n+        'allow_new': allow_new\n+    }\n+    FormSet = formset_factory(form, formset, **formset_attrs)\n     FormSet.model = model\n     return FormSet\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..75b53a5 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -328,6 +328,9 @@ class BaseModelFormSet(BaseFormSet):\n             self._queryset = qs\n         return self._queryset\n     def save_new(self, form, commit=True):\n+        if not self.allow_new:\n+            raise ValidationError('Creating new objects is not allowed.')\n+        'Save and return a new model instance for the given form.'\n         return form.save(commit=commit)\n     def save_existing(self, form, instance, commit=True):\n         return form.save(commit=commit)\n@@ -335,6 +338,8 @@ class BaseModelFormSet(BaseFormSet):\n         if commit:\n             obj.delete()\n     def save(self, commit=True):\n+        self.allow_new = getattr(self, 'allow_new', True)\n+        self.allow_delete = getattr(self, 'allow_delete', True)\n         if not commit:\n             self.saved_forms = []\n             def save_m2m():\n@@ -417,6 +422,8 @@ class BaseModelFormSet(BaseFormSet):\n                     self.saved_forms.append(form)\n         return saved_instances\n     def save_new_objects(self, commit=True):\n+        if not self.allow_new:\n+            return []\n         self.new_objects = []\n         for form in self.extra_forms:\n             if not form.has_changed():\n@@ -454,12 +461,13 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, allow_new=True):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback, widgets=widgets, localized_fields=localized_fields, labels=labels, help_texts=help_texts, error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n+    formset_attrs = {'extra': extra, 'min_num': min_num, 'max_num': max_num, 'can_order': can_order, 'can_delete': can_delete, 'validate_min': validate_min, 'validate_max': validate_max, 'absolute_max': absolute_max, 'can_delete_extra': can_delete_extra, 'renderer': renderer, 'allow_new': allow_new}\n+    FormSet = formset_factory(form, formset, **formset_attrs)\n     FormSet.model = model\n     return FormSet\n class BaseInlineFormSet(BaseModelFormSet):\n", "normalized_occurrence": 1}
