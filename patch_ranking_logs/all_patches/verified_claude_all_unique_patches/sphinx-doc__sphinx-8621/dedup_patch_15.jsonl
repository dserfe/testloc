{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..49d467d 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -496,6 +496,35 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Special handling for kbd content\n+            text = node.astext()\n+            # Only split on separators if they're between other characters\n+            parts = []\n+            current = ''\n+            for i, char in enumerate(text):\n+                if char in '-+^' and i > 0 and i < len(text)-1 and text[i-1].strip() and text[i+1].strip():\n+                    if current:\n+                        parts.append(current)\n+                        current = ''\n+                    parts.append(char)\n+                else:\n+                    current += char\n+            if current:\n+                parts.append(current)\n+            \n+            # Generate nested kbd tags only for actual compound keystrokes\n+            if len(parts) > 1 and any(x in '-+^' for x in parts):\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(self.encode(part))\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            # For single keystrokes or non-compound ones, just output the text\n+            self.body.append(self.encode(text))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..f7b73a5 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -447,6 +447,35 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Special handling for kbd content\n+            text = node.astext()\n+            # Only split on separators if they're between other characters\n+            parts = []\n+            current = ''\n+            for i, char in enumerate(text):\n+                if char in '-+^' and i > 0 and i < len(text)-1 and text[i-1].strip() and text[i+1].strip():\n+                    if current:\n+                        parts.append(current)\n+                        current = ''\n+                    parts.append(char)\n+                else:\n+                    current += char\n+            if current:\n+                parts.append(current)\n+            \n+            # Generate nested kbd tags only for actual compound keystrokes\n+            if len(parts) > 1 and any(x in '-+^' for x in parts):\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(self.encode(part))\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            # For single keystrokes or non-compound ones, just output the text\n+            self.body.append(self.encode(text))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..732d15a 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,30 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            parts = []\n+            current = ''\n+            for i, char in enumerate(text):\n+                if char in '-+^' and i > 0 and (i < len(text) - 1) and text[i - 1].strip() and text[i + 1].strip():\n+                    if current:\n+                        parts.append(current)\n+                        current = ''\n+                    parts.append(char)\n+                else:\n+                    current += char\n+            if current:\n+                parts.append(current)\n+            if len(parts) > 1 and any((x in '-+^' for x in parts)):\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(self.encode(part))\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            self.body.append(self.encode(text))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..29cf4f3 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,30 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            parts = []\n+            current = ''\n+            for i, char in enumerate(text):\n+                if char in '-+^' and i > 0 and (i < len(text) - 1) and text[i - 1].strip() and text[i + 1].strip():\n+                    if current:\n+                        parts.append(current)\n+                        current = ''\n+                    parts.append(char)\n+                else:\n+                    current += char\n+            if current:\n+                parts.append(current)\n+            if len(parts) > 1 and any((x in '-+^' for x in parts)):\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(self.encode(part))\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            self.body.append(self.encode(text))\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
