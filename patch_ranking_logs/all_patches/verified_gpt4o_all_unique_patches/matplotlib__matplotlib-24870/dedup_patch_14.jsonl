{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..72fc46c 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -676,10 +676,16 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n                  extend='neither', antialiased=None, nchunk=0, locator=None,\n                  transform=None, negative_linestyles=None,\n                  **kwargs):\n+        import numpy as np\n+\n         \"\"\"\n         Draw contour lines or filled regions, depending on\n         whether keyword arg *filled* is ``False`` (default) or ``True``.\n \n+        # Check if input array is boolean and set default levels\n+        if len(args) > 0 and isinstance(args[0], np.ndarray) and args[0].dtype == bool and levels is None:\n+            levels = [0.5]\n+\n         Call signature::\n \n             ContourSet(ax, levels, allsegs, [allkinds], **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..152972f 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -263,6 +263,7 @@ _docstring.interpd.update(contour_set_attributes='\\nAttributes\\n----------\\nax :\n @_docstring.dedent_interpd\n class ContourSet(cm.ScalarMappable, ContourLabeler):\n     def __init__(self, ax, *args, levels=None, filled=False, linewidths=None, linestyles=None, hatches=(None,), alpha=None, origin=None, extent=None, cmap=None, colors=None, norm=None, vmin=None, vmax=None, extend='neither', antialiased=None, nchunk=0, locator=None, transform=None, negative_linestyles=None, **kwargs):\n+        import numpy as np\n         self.axes = ax\n         self.levels = levels\n         self.filled = filled\n", "normalized_occurrence": 1}
