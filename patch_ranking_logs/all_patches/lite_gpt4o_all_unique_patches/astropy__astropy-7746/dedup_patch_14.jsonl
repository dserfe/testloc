{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..5c155a8 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,23 +1212,26 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n-            try:\n-                axes = np.broadcast_arrays(*axes)\n-            except ValueError:\n-                raise ValueError(\n-                    \"Coordinate arrays are not broadcastable to each other\")\n-\n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n-\n-            if ra_dec_order and sky == 'input':\n-                xy = self._denormalize_sky(xy)\n-            output = func(xy, origin)\n-            if ra_dec_order and sky == 'output':\n-                output = self._normalize_sky(output)\n-                return (output[:, 0].reshape(axes[0].shape),\n-                        output[:, 1].reshape(axes[0].shape))\n-            return [output[:, i].reshape(axes[0].shape)\n-                    for i in range(output.shape[1])]\n+            if all(len(x) == 0 for x in axes):\n+                output = np.empty((0, len(axes)))\n+            else:\n+                try:\n+                    axes = np.broadcast_arrays(*axes)\n+                except ValueError:\n+                    raise ValueError(\n+                        \"Coordinate arrays are not broadcastable to each other\")\n+\n+                xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+\n+                if ra_dec_order and sky == 'input':\n+                    xy = self._denormalize_sky(xy)\n+                output = func(xy, origin)\n+                if ra_dec_order and sky == 'output':\n+                    output = self._normalize_sky(output)\n+                    return (output[:, 0].reshape(axes[0].shape),\n+                            output[:, 1].reshape(axes[0].shape))\n+                return [output[:, i].reshape(axes[0].shape)\n+                        for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n             if xy.shape[-1] != self.naxis:\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..b5e8ddf 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -594,18 +594,21 @@ class WCS(WCSBase):\n             return out\n     def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         def _return_list_of_arrays(axes, origin):\n-            try:\n-                axes = np.broadcast_arrays(*axes)\n-            except ValueError:\n-                raise ValueError('Coordinate arrays are not broadcastable to each other')\n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n-            if ra_dec_order and sky == 'input':\n-                xy = self._denormalize_sky(xy)\n-            output = func(xy, origin)\n-            if ra_dec_order and sky == 'output':\n-                output = self._normalize_sky(output)\n-                return (output[:, 0].reshape(axes[0].shape), output[:, 1].reshape(axes[0].shape))\n-            return [output[:, i].reshape(axes[0].shape) for i in range(output.shape[1])]\n+            if all((len(x) == 0 for x in axes)):\n+                output = np.empty((0, len(axes)))\n+            else:\n+                try:\n+                    axes = np.broadcast_arrays(*axes)\n+                except ValueError:\n+                    raise ValueError('Coordinate arrays are not broadcastable to each other')\n+                xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+                if ra_dec_order and sky == 'input':\n+                    xy = self._denormalize_sky(xy)\n+                output = func(xy, origin)\n+                if ra_dec_order and sky == 'output':\n+                    output = self._normalize_sky(output)\n+                    return (output[:, 0].reshape(axes[0].shape), output[:, 1].reshape(axes[0].shape))\n+                return [output[:, i].reshape(axes[0].shape) for i in range(output.shape[1])]\n         def _return_single_array(xy, origin):\n             if xy.shape[-1] != self.naxis:\n                 raise ValueError('When providing two arguments, the array must be of shape (N, {0})'.format(self.naxis))\n", "normalized_occurrence": 1}
