{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..b0395ad 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -304,9 +304,23 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _cstack(sepleft, sepright)\n+        elif transform.op == '|':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            left_outputs, left_inputs = sepleft.shape\n+            right_outputs, right_inputs = sepright.shape\n+            combined = np.zeros((left_outputs + right_outputs, left_inputs + right_inputs), dtype=np.bool_)\n+            combined[:left_outputs, :left_inputs] = sepleft\n+            combined[left_outputs:, left_inputs:] = sepright\n+            return combined\n+        else:\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..659ca3a 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -99,9 +99,23 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _cstack(sepleft, sepright)\n+        elif transform.op == '|':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            left_outputs, left_inputs = sepleft.shape\n+            right_outputs, right_inputs = sepright.shape\n+            combined = np.zeros((left_outputs + right_outputs, left_inputs + right_inputs), dtype=np.bool_)\n+            combined[:left_outputs, :left_inputs] = sepleft\n+            combined[left_outputs:, left_inputs:] = sepright\n+            return combined\n+        else:\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper, '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
