{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c0a03a8..c73f3fd 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -224,6 +224,10 @@ class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str,\n                   innernode: \"Type[TextlikeNode]\" = nodes.emphasis,\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n+        if rolename == 'class' and target == 'None':\n+            # None is not a type, so use obj role instead.\n+            rolename = 'obj'\n+\n         result = super().make_xref(rolename, domain, target,  # type: ignore\n                                    innernode, contnode, env)\n         result['refspecific'] = True\n", "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 1eef662..0724042 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -152,6 +152,8 @@ def _pseudo_parse_arglist(signode: desc_signature, arglist: str) -> None:\n         signode += paramlist\n class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n+        if rolename == 'class' and target == 'None':\n+            rolename = 'obj'\n         result = super().make_xref(rolename, domain, target, innernode, contnode, env)\n         result['refspecific'] = True\n         if target.startswith(('.', '~')):\n", "normalized_occurrence": 1}
