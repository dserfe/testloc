{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..6026880 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,6 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -45,6 +44,49 @@ generic_docroles = {\n     'regexp': nodes.literal,\n }\n \n+class KbdRole(SphinxRole):\n+    \"\"\"Role for keyboard shortcuts.\"\"\"\n+\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        # Handle standalone special characters\n+        if self.text in ('-', '+', '^'):\n+            node = nodes.literal(self.rawtext, self.text, classes=['kbd'])\n+            return [node], []\n+\n+        # Handle compound keystrokes\n+        parts = []\n+        current = ''\n+        i = 0\n+        while i < len(self.text):\n+            if i + 1 < len(self.text) and self.text[i:i+2] in ('\\\\-', '\\\\+', '\\\\^'):\n+                # Handle escaped separators\n+                current += self.text[i+1]\n+                i += 2\n+            elif self.text[i] in ('-', '+', '^'):\n+                # Add accumulated keystroke if any\n+                if current:\n+                    parts.append(current)\n+                    current = ''\n+                # Add separator\n+                parts.append(self.text[i])\n+                i += 1\n+            else:\n+                current += self.text[i]\n+                i += 1\n+        if current:\n+            parts.append(current)\n+\n+        node = nodes.literal(self.rawtext, '', classes=['kbd'])\n+        for i, part in enumerate(parts):\n+            if part in ('-', '+', '^'):\n+                # Add separator text\n+                node += nodes.Text(part, part)\n+            else:\n+                # Add kbd node for keystroke\n+                kbd = nodes.literal('', part, classes=['kbd'])\n+                node += kbd\n+        return [node], []\n+\n \n # -- generic cross-reference role ----------------------------------------------\n \n@@ -403,6 +445,16 @@ _litvar_re = re.compile('{([^}]+)}')\n parens_re = re.compile(r'(\\\\*{|\\\\*})')\n \n \n+def setup(app: \"Sphinx\") -> Dict[str, Any]:\n+    \"\"\"Setup roles.\"\"\"\n+    app.add_role('kbd', KbdRole())\n+    return {\n+        'version': 'builtin',\n+        'parallel_read_safe': True,\n+        'parallel_write_safe': True,\n+    }\n+\n+\n def emph_literal_role(typ: str, rawtext: str, text: str, lineno: int, inliner: Inliner,\n                       options: Dict = {}, content: List[str] = []\n                       ) -> Tuple[List[Node], List[system_message]]:\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+class KbdRole(SphinxRole):\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        if self.text in ('-', '+', '^'):\n+            node = nodes.literal(self.rawtext, self.text, classes=['kbd'])\n+            return ([node], [])\n+        parts = []\n+        current = ''\n+        i = 0\n+        while i < len(self.text):\n+            if i + 1 < len(self.text) and self.text[i:i + 2] in ('\\\\-', '\\\\+', '\\\\^'):\n+                current += self.text[i + 1]\n+                i += 2\n+            elif self.text[i] in ('-', '+', '^'):\n+                if current:\n+                    parts.append(current)\n+                    current = ''\n+                parts.append(self.text[i])\n+                i += 1\n+            else:\n+                current += self.text[i]\n+                i += 1\n+        if current:\n+            parts.append(current)\n+        node = nodes.literal(self.rawtext, '', classes=['kbd'])\n+        for i, part in enumerate(parts):\n+            if part in ('-', '+', '^'):\n+                node += nodes.Text(part, part)\n+            else:\n+                kbd = nodes.literal('', part, classes=['kbd'])\n+                node += kbd\n+        return ([node], [])\n+def setup(app: 'Sphinx') -> Dict[str, Any]:\n+    app.add_role('kbd', KbdRole())\n+    return {'version': 'builtin', 'parallel_read_safe': True, 'parallel_write_safe': True}", "normalized_occurrence": 1}
