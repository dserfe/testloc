{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-26020", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 1feaa7a..56631c9 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,15 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    \n+    if hasattr(ax, '_axislines'):\n+        # For axes_grid1.mpl_axes.Axes\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    else:\n+        # For standard axes (including GeoAxes)\n+        ax.xaxis.set_tick_params(labelbottom=bottom_on, bottom=bottom_on)\n+        ax.yaxis.set_tick_params(labelleft=left_on, left=left_on)\n \n \n class CbarAxesBase:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex ab482a0..b5672bc 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -8,8 +8,12 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis['bottom'].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis['left'].toggle(ticklabels=left_off, label=left_off)\n+    if hasattr(ax, '_axislines'):\n+        ax.axis['bottom'].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis['left'].toggle(ticklabels=left_off, label=left_off)\n+    else:\n+        ax.xaxis.set_tick_params(labelbottom=bottom_on, bottom=bottom_on)\n+        ax.yaxis.set_tick_params(labelleft=left_on, left=left_on)\n class CbarAxesBase:\n     def __init__(self, *args, orientation, **kwargs):\n         self.orientation = orientation\n", "normalized_occurrence": 1}
