{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..45e4ade 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1029,6 +1029,9 @@ class MultiValueField(Field):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        if not self.require_all_fields:\n+            missing_required_fields = False\n+\n         for i, field in enumerate(self.fields):\n             try:\n                 field_value = value[i]\n@@ -1036,24 +1039,20 @@ class MultiValueField(Field):\n                 field_value = None\n             if field_value in self.empty_values:\n                 if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n+                    missing_required_fields = True\n                     if field.error_messages['incomplete'] not in errors:\n                         errors.append(field.error_messages['incomplete'])\n                     continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n-                # Collect all validation errors in a single list, which we'll\n-                # raise at the end of clean(), rather than raising a single\n-                # exception for the first error we encounter. Skip duplicates.\n                 errors.extend(m for m in e.error_list if m not in errors)\n+\n+        if not self.require_all_fields and missing_required_fields and self.required:\n+            raise ValidationError(self.error_messages['required'], code='required')\n         if errors:\n             raise ValidationError(errors)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..62c5cc6 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -596,6 +596,8 @@ class MultiValueField(Field):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        if not self.require_all_fields:\n+            missing_required_fields = False\n         for i, field in enumerate(self.fields):\n             try:\n                 field_value = value[i]\n@@ -606,6 +608,7 @@ class MultiValueField(Field):\n                     if self.required:\n                         raise ValidationError(self.error_messages['required'], code='required')\n                 elif field.required:\n+                    missing_required_fields = True\n                     if field.error_messages['incomplete'] not in errors:\n                         errors.append(field.error_messages['incomplete'])\n                     continue\n@@ -613,6 +616,8 @@ class MultiValueField(Field):\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n                 errors.extend((m for m in e.error_list if m not in errors))\n+        if not self.require_all_fields and missing_required_fields and self.required:\n+            raise ValidationError(self.error_messages['required'], code='required')\n         if errors:\n             raise ValidationError(errors)\n         out = self.compress(clean_data)\n", "normalized_occurrence": 1}
