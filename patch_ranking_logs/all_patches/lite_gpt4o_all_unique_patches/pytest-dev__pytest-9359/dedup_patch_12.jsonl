{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..85cbfec 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -932,22 +932,20 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         else:  # Original assertion rewriting\n             # Create failure message.\n-            body = self.expl_stmts\n-            self.statements.append(ast.If(negation, body, []))\n-            if assert_.msg:\n-                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n-                explanation = \"\\n>assert \" + explanation\n-            else:\n-                assertmsg = ast.Str(\"\")\n-                explanation = \"assert \" + explanation\n-            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n-            msg = self.pop_format_context(template)\n-            fmt = self.helper(\"_format_explanation\", msg)\n-            err_name = ast.Name(\"AssertionError\", ast.Load())\n-            exc = ast.Call(err_name, [fmt], [])\n-            raise_ = ast.Raise(exc, None)\n-\n-            body.append(raise_)\n+            failure_body = self.expl_stmts + [ast.Raise(\n+                ast.Call(\n+                    ast.Name(\"AssertionError\", ast.Load()),\n+                    [self.helper(\"_format_explanation\", self.pop_format_context(\n+                        ast.BinOp(\n+                            self.helper(\"_format_assertmsg\", assert_.msg) if assert_.msg else ast.Str(\"\"),\n+                            ast.Add(),\n+                            ast.Str(\"assert \" + explanation)\n+                        )\n+                    ))],\n+                    []\n+                ), None\n+            )]\n+            self.statements.append(ast.If(negation, failure_body, []))\n \n         # Clear temporary variables by setting them to None.\n         if self.variables:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..b87b44f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -493,21 +493,8 @@ class AssertionRewriter(ast.NodeVisitor):\n                 clear_format = ast.Assign(variables, ast.NameConstant(None))\n                 self.statements.append(clear_format)\n         else:\n-            body = self.expl_stmts\n-            self.statements.append(ast.If(negation, body, []))\n-            if assert_.msg:\n-                assertmsg = self.helper('_format_assertmsg', assert_.msg)\n-                explanation = '\\n>assert ' + explanation\n-            else:\n-                assertmsg = ast.Str('')\n-                explanation = 'assert ' + explanation\n-            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n-            msg = self.pop_format_context(template)\n-            fmt = self.helper('_format_explanation', msg)\n-            err_name = ast.Name('AssertionError', ast.Load())\n-            exc = ast.Call(err_name, [fmt], [])\n-            raise_ = ast.Raise(exc, None)\n-            body.append(raise_)\n+            failure_body = self.expl_stmts + [ast.Raise(ast.Call(ast.Name('AssertionError', ast.Load()), [self.helper('_format_explanation', self.pop_format_context(ast.BinOp(self.helper('_format_assertmsg', assert_.msg) if assert_.msg else ast.Str(''), ast.Add(), ast.Str('assert ' + explanation))))], []), None)]\n+            self.statements.append(ast.If(negation, failure_body, []))\n         if self.variables:\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n", "normalized_occurrence": 1}
