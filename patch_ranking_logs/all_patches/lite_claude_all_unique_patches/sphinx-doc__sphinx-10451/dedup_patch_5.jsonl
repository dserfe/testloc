{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..449b1b2 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -115,15 +115,26 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n+        # Skip if we already have both param and type for this argument\n         arg = arguments.get(name, {})\n+        if arg.get('type') and arg.get('param'):\n+            continue\n+\n+        # Handle *args and **kwargs specially\n+        prefix = ''\n+        if name.startswith('args'):\n+            prefix = '*'\n+        elif name.startswith('kwargs'):\n+            prefix = '**'\n+\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + prefix + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + prefix + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..4b21f6a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -86,14 +86,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n+        if arg.get('type') and arg.get('param'):\n+            continue\n+        prefix = ''\n+        if name.startswith('args'):\n+            prefix = '*'\n+        elif name.startswith('kwargs'):\n+            prefix = '**'\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + prefix + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + prefix + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n", "normalized_occurrence": 1}
