{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6721", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 1775e6c..1a57078 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -338,8 +338,10 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     def data(self):\n         if is_duck_array(self._data):\n             return self._data\n-        else:\n+        elif self._in_memory:\n             return self.values\n+        else:\n+            return self._data\n \n     @data.setter\n     def data(self, data):\n@@ -512,7 +514,10 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     @property\n     def values(self):\n         \"\"\"The variable's data as a numpy.ndarray\"\"\"\n-        return _as_array_or_item(self._data)\n+        if self._in_memory:\n+            return _as_array_or_item(self._data)\n+        else:\n+            raise ValueError(\"Attempting to load data into memory which should be lazy-loaded\")\n \n     @values.setter\n     def values(self, values):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 24a31db..d373dd2 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -237,8 +237,10 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     def data(self):\n         if is_duck_array(self._data):\n             return self._data\n-        else:\n+        elif self._in_memory:\n             return self.values\n+        else:\n+            return self._data\n \n     @data.setter\n     def data(self, data):\n@@ -387,7 +389,10 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     @property\n     def values(self):\n         \"\"\"The variable's data as a numpy.ndarray\"\"\"\n-        return _as_array_or_item(self._data)\n+        if self._in_memory:\n+            return _as_array_or_item(self._data)\n+        else:\n+            raise ValueError('Attempting to load data into memory which should be lazy-loaded')\n \n     @values.setter\n     def values(self, values):\n", "normalized_occurrence": 1}
