{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..42e345c 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1330,6 +1330,17 @@ class PairGrid(Grid):\n         \"\"\"\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        # Handle the case where hue is passed directly to map\n+        if 'hue' in kwargs and not isinstance(kwargs['hue'], str):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n+\n         self._map_bivariate(func, indices, **kwargs)\n \n         return self\n@@ -1346,6 +1357,17 @@ class PairGrid(Grid):\n \n         \"\"\"\n         indices = zip(*np.tril_indices_from(self.axes, -1))\n+        # Handle the case where hue is passed directly to map\n+        if 'hue' in kwargs and not isinstance(kwargs['hue'], str):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n+\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n \n@@ -1361,6 +1383,17 @@ class PairGrid(Grid):\n \n         \"\"\"\n         indices = zip(*np.triu_indices_from(self.axes, 1))\n+        # Handle the case where hue is passed directly to map\n+        if 'hue' in kwargs and not isinstance(kwargs['hue'], str):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n+\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..fe43c57 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -607,14 +607,41 @@ class PairGrid(Grid):\n     def map(self, func, **kwargs):\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        if 'hue' in kwargs and (not isinstance(kwargs['hue'], str)):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_lower(self, func, **kwargs):\n         indices = zip(*np.tril_indices_from(self.axes, -1))\n+        if 'hue' in kwargs and (not isinstance(kwargs['hue'], str)):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_upper(self, func, **kwargs):\n         indices = zip(*np.triu_indices_from(self.axes, 1))\n+        if 'hue' in kwargs and (not isinstance(kwargs['hue'], str)):\n+            hue = kwargs.pop('hue')\n+            hue_name = hue.name if isinstance(hue, pd.Series) else 'hue'\n+            self.data[hue_name] = hue\n+            self._hue_var = hue_name\n+            self._hue_order = categorical_order(self.data[hue_name])\n+            self.hue_names = self._hue_order\n+            self.hue_vals = self.data[hue_name]\n+            kwargs['hue'] = hue_name\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_offdiag(self, func, **kwargs):\n", "normalized_occurrence": 1}
