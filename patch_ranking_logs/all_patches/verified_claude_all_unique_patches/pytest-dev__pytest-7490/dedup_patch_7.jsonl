{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..0ac0bc7 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -283,14 +283,14 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n                 rep.outcome = \"failed\"\n             else:\n                 rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = xfailed.reason or \"\"\n         elif call.when == \"call\":\n             if xfailed.strict:\n                 rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+                rep.longrepr = \"[XPASS(strict)] \" + (xfailed.reason or \"\")\n             else:\n                 rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = xfailed.reason or \"\"\n \n     if (\n         item._store.get(skipped_by_mark_key, True)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..fc7bf0d 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -161,14 +161,14 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n                 rep.outcome = 'failed'\n             else:\n                 rep.outcome = 'skipped'\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = xfailed.reason or ''\n         elif call.when == 'call':\n             if xfailed.strict:\n                 rep.outcome = 'failed'\n-                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n+                rep.longrepr = '[XPASS(strict)] ' + (xfailed.reason or '')\n             else:\n                 rep.outcome = 'passed'\n-                rep.wasxfail = xfailed.reason\n+                rep.wasxfail = xfailed.reason or ''\n     if item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n         _, _, reason = rep.longrepr\n         filename, line = item.reportinfo()[:2]\n", "normalized_occurrence": 1}
