{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..0918481 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -606,6 +606,24 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            # Get the old and new unique_together values\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # If we're removing constraints, check each one individually\n+            removed = old_value - new_value\n+            for fields in removed:\n+                # If it's a single-field unique_together that's also a unique field,\n+                # skip creating/removing the constraint as it's redundant\n+                if len(fields) == 1 and new_model._meta.get_field(fields[0]).unique:\n+                    continue\n+            \n+            schema_editor.alter_unique_together(new_model, old_value, new_value)\n+\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            removed = old_value - new_value\n+            for fields in removed:\n+                if len(fields) == 1 and new_model._meta.get_field(fields[0]).unique:\n+                    continue\n+            schema_editor.alter_unique_together(new_model, old_value, new_value)", "normalized_occurrence": 1}
