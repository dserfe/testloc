{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..0acb7ba 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -986,7 +986,20 @@ warn_explicit(\n \n         expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n+        # Special handling for 'all' and 'any' to unroll iterables\n+        if isinstance(new_func, ast.Name) and new_func.id in {'all', 'any'}:\n+            expr_name = self.variable()\n+            res = ast.Call(\n+                func=ast.Name('list', ast.Load()),\n+                args=[ast.GeneratorExp(\n+                    elt=ast.Name(expr_name, ast.Load()),\n+                    generators=call.args[0].generators\n+                )],\n+                keywords=[]\n+            )\n+            res = self.assign(res)\n+        else:\n+            res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n@@ -1022,7 +1035,20 @@ warn_explicit(\n             arg_expls.append(\"**\" + expl)\n         expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n-        res = self.assign(new_call)\n+        # Special handling for 'all' and 'any' to unroll iterables\n+        if isinstance(new_func, ast.Name) and new_func.id in {'all', 'any'}:\n+            expr_name = self.variable()\n+            res = ast.Call(\n+                func=ast.Name('list', ast.Load()),\n+                args=[ast.GeneratorExp(\n+                    elt=ast.Name(expr_name, ast.Load()),\n+                    generators=call.args[0].generators\n+                )],\n+                keywords=[]\n+            )\n+            res = self.assign(res)\n+        else:\n+            res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n@@ -1081,4 +1107,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..9c583e5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -561,7 +561,12 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append('**' + expl)\n         expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n+        if isinstance(new_func, ast.Name) and new_func.id in {'all', 'any'}:\n+            expr_name = self.variable()\n+            res = ast.Call(func=ast.Name('list', ast.Load()), args=[ast.GeneratorExp(elt=ast.Name(expr_name, ast.Load()), generators=call.args[0].generators)], keywords=[])\n+            res = self.assign(res)\n+        else:\n+            res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n         outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n         return (res, outer_expl)\n@@ -591,7 +596,12 @@ class AssertionRewriter(ast.NodeVisitor):\n             arg_expls.append('**' + expl)\n         expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n-        res = self.assign(new_call)\n+        if isinstance(new_func, ast.Name) and new_func.id in {'all', 'any'}:\n+            expr_name = self.variable()\n+            res = ast.Call(func=ast.Name('list', ast.Load()), args=[ast.GeneratorExp(elt=ast.Name(expr_name, ast.Load()), generators=call.args[0].generators)], keywords=[])\n+            res = self.assign(res)\n+        else:\n+            res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n         outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n         return (res, outer_expl)\n", "normalized_occurrence": 1}
