{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16938", "model_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 2edb564..660389f 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -79,7 +79,12 @@ class Serializer(base.Serializer):\n                     return self._value_from_field(value, value._meta.pk)\n \n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only(\"pk\").iterator()\n+                    # Don't use only() if the default manager uses select_related\n+                    manager = field.remote_field.model._meta.default_manager\n+                    qs = getattr(obj, field.name)\n+                    if not isinstance(manager, type(qs)) or not qs.query.select_related:\n+                        qs = qs.only(\"pk\")\n+                    return qs.iterator()\n \n             m2m_iter = getattr(obj, \"_prefetched_objects_cache\", {}).get(\n                 field.name,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 20d429c..7b92975 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -46,7 +46,11 @@ class Serializer(base.Serializer):\n                 def m2m_value(value):\n                     return self._value_from_field(value, value._meta.pk)\n                 def queryset_iterator(obj, field):\n-                    return getattr(obj, field.name).only('pk').iterator()\n+                    manager = field.remote_field.model._meta.default_manager\n+                    qs = getattr(obj, field.name)\n+                    if not isinstance(manager, type(qs)) or not qs.query.select_related:\n+                        qs = qs.only('pk')\n+                    return qs.iterator()\n             m2m_iter = getattr(obj, '_prefetched_objects_cache', {}).get(field.name, queryset_iterator(obj, field))\n             self._current[field.name] = [m2m_value(related) for related in m2m_iter]\n     def getvalue(self):\n", "normalized_occurrence": 1}
