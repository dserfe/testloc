{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..9a70eda 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -66,6 +66,18 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"loc\", update the *loc* parameter of the legend upon finalizing.\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n+        \n+    def __getstate__(self):\n+        \"\"\"Get state for pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove unpicklable canvas reference\n+        state['legend'].figure.canvas = None\n+        return state\n+        \n+    def __setstate__(self, state):\n+        \"\"\"Set state when unpickling.\"\"\"\n+        self.__dict__ = state\n+        # Canvas will be restored when the figure is next drawn\n         self.legend = legend\n \n         _api.check_in_list([\"loc\", \"bbox\"], update=update)\n", "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 4a521b5..7965ff3 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -56,6 +56,16 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"loc\", update the *loc* parameter of the legend upon finalizing.\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n+\n+    def __getstate__(self):\n+        \"\"\"Get state for pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        state['legend'].figure.canvas = None\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"Set state when unpickling.\"\"\"\n+        self.__dict__ = state\n         self.legend = legend\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n", "normalized_occurrence": 1}
