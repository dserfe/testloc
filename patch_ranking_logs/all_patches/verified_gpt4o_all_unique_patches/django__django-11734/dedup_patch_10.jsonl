{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..698f1f3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1090,6 +1090,9 @@ class Exists(Subquery):\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n+            # Ensure outer references are correctly handled in negation\n+            if hasattr(self.queryset.query, 'outer_query'):\n+                self.queryset.query.where.negate()\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..100b3cc 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -667,6 +667,8 @@ class Exists(Subquery):\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n+            if hasattr(self.queryset.query, 'outer_query'):\n+                self.queryset.query.where.negate()\n             sql = 'NOT {}'.format(sql)\n         return (sql, params)\n     def select_format(self, compiler, sql, params):\n", "normalized_occurrence": 1}
