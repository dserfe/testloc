{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 609c102..9ec7761 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -613,6 +613,15 @@ class Continuous(ContinuousBase):\n         return major_locator, minor_locator\n \n     def _get_formatter(self, locator, formatter, like, base, unit):\n+        \"\"\"Get the formatter for the scale.\"\"\"\n+        from matplotlib.ticker import ScalarFormatter\n+\n+        def _apply_offset(fmt, value):\n+            \"\"\"Apply the formatter's offset to a value if it exists.\"\"\"\n+            if isinstance(fmt, ScalarFormatter):\n+                if hasattr(fmt, 'offset') and fmt.offset != 0:\n+                    value = value - fmt.offset\n+            return value\n \n         log_base, symlog_thresh = self._parse_for_log_params(self.trans)\n         if base is default:\n@@ -647,7 +656,9 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n \n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            # Ensure the formatter updates its offset value\n+            formatter.set_locs([])  # Force format initialization\n \n         return formatter\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex ff6da17..8ccd7f5 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -290,6 +290,12 @@ class Continuous(ContinuousBase):\n             minor_locator = AutoMinorLocator(minor + 1)\n         return (major_locator, minor_locator)\n     def _get_formatter(self, locator, formatter, like, base, unit):\n+        from matplotlib.ticker import ScalarFormatter\n+        def _apply_offset(fmt, value):\n+            if isinstance(fmt, ScalarFormatter):\n+                if hasattr(fmt, 'offset') and fmt.offset != 0:\n+                    value = value - fmt.offset\n+            return value\n         log_base, symlog_thresh = self._parse_for_log_params(self.trans)\n         if base is default:\n             if symlog_thresh:\n@@ -317,7 +323,8 @@ class Continuous(ContinuousBase):\n                 sep = ' '\n             formatter = EngFormatter(unit, sep=sep)\n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            formatter.set_locs([])\n         return formatter\n @dataclass\n class Temporal(ContinuousBase):\n", "normalized_occurrence": 1}
