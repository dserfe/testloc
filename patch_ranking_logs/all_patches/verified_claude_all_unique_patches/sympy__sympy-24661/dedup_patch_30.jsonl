{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..f5234a1 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1109,6 +1109,10 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.BitOr: 'Or',\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n+        ast.Lt: 'Lt',\n+        ast.Gt: 'Gt',\n+        ast.LtE: 'Le',\n+        ast.GtE: 'Ge',\n     }\n     functions = (\n         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n@@ -1186,6 +1190,21 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n             return new_node\n         return node\n \n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1 and type(node.ops[0]) in self.operators:\n+            sympy_class = self.operators[type(node.ops[0])]\n+            left = self.visit(node.left)\n+            right = self.visit(node.comparators[0])\n+            \n+            return ast.Call(\n+                func=ast.Name(id=sympy_class, ctx=ast.Load()),\n+                args=[left, right],\n+                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],\n+                starargs=None,\n+                kwargs=None\n+            )\n+        return node\n+\n     def visit_Call(self, node):\n         new_node = self.generic_visit(node)\n         if isinstance(node.func, ast.Name) and node.func.id in self.functions:\n", "occurrence": 1, "normalized_patch": "--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n-    operators = {ast.Add: 'Add', ast.Mult: 'Mul', ast.Pow: 'Pow', ast.Sub: 'Add', ast.Div: 'Mul', ast.BitOr: 'Or', ast.BitAnd: 'And', ast.BitXor: 'Not'}\n+    operators = {ast.Add: 'Add', ast.Mult: 'Mul', ast.Pow: 'Pow', ast.Sub: 'Add', ast.Div: 'Mul', ast.BitOr: 'Or', ast.BitAnd: 'And', ast.BitXor: 'Not', ast.Lt: 'Lt', ast.Gt: 'Gt', ast.LtE: 'Le', ast.GtE: 'Ge'}\n+    def visit_Compare(self, node):\n+        if len(node.ops) == 1 and type(node.ops[0]) in self.operators:\n+            sympy_class = self.operators[type(node.ops[0])]\n+            left = self.visit(node.left)\n+            right = self.visit(node.comparators[0])\n+            return ast.Call(func=ast.Name(id=sympy_class, ctx=ast.Load()), args=[left, right], keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))], starargs=None, kwargs=None)\n+        return node", "normalized_occurrence": 1}
