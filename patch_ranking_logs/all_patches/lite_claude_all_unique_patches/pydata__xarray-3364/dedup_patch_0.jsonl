{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..1d39f09 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -313,14 +314,15 @@ def _dataset_concat(\n \n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n+            \n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    # Create a dummy variable filled with NaN values matching the dataset's shape\n+                    dummy_shape = tuple(ds.dims[d] for d in ds.dims)\n+                    dummy_var = Variable(ds.dims, pd.np.full(dummy_shape, fill_value))\n+                    to_merge[var].append(dummy_var)\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..20a3370 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -127,10 +127,13 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    dummy_shape = tuple((ds.dims[d] for d in ds.dims))\n+                    dummy_var = Variable(ds.dims, pd.np.full(dummy_shape, fill_value))\n+                    to_merge[var].append(dummy_var)\n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(var, to_merge[var], compat=compat, equals=equals.get(var, None))\n     else:\n", "normalized_occurrence": 1}
