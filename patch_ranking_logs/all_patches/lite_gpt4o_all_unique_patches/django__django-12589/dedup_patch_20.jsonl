{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..8789134 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -109,13 +109,13 @@ class SQLCompiler:\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n-        ref_sources = {\n-            expr.source for expr in expressions if isinstance(expr, Ref)\n+        ref_aliases = {\n+            expr.source for expr in expressions if isinstance(expr, Ref) and expr.source in select\n         }\n         for expr, _, _ in select:\n             # Skip members of the select clause that are already included\n             # by reference.\n-            if expr in ref_sources:\n+            if expr.source in ref_aliases:\n                 continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n@@ -134,7 +134,7 @@ class SQLCompiler:\n \n         for expr in expressions:\n             sql, params = self.compile(expr)\n-            params_hash = make_hashable(params)\n+            params_hash = tuple(params) # Use tuple to hash params\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..b9c4ee7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -47,9 +47,9 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        ref_sources = {expr.source for expr in expressions if isinstance(expr, Ref)}\n+        ref_aliases = {expr.source for expr in expressions if isinstance(expr, Ref) and expr.source in select}\n         for expr, _, _ in select:\n-            if expr in ref_sources:\n+            if expr.source in ref_aliases:\n                 continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n@@ -65,7 +65,7 @@ class SQLCompiler:\n         expressions = self.collapse_group_by(expressions, having_group_by)\n         for expr in expressions:\n             sql, params = self.compile(expr)\n-            params_hash = make_hashable(params)\n+            params_hash = tuple(params)\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n", "normalized_occurrence": 1}
