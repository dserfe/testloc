{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..e46b2d9 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -447,7 +447,10 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n-            return \"%s %s\" % (t, self._string_var(arg.name))\n+            if arg.dimensions:\n+                return \"%s *%s\" % (t, self._string_var(arg.name))\n+            else:\n+                return \"%s %s\" % (t, self._string_var(arg.name))\n \n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..e727496 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -199,6 +199,8 @@ class CythonCodeWrapper(CodeWrapper):\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n+        elif arg.dimensions:\n+            return '%s *%s' % (t, self._string_var(arg.name))\n         else:\n             return '%s %s' % (t, self._string_var(arg.name))\n     def _declare_arg(self, arg):\n", "normalized_occurrence": 2}
