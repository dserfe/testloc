{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..e3f6521 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3453,20 +3453,23 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n \n         def ensure_stackable(val):\n             assign_coords = {variable_dim: val.name}\n+            # Only add missing stacking_dims if they exist in the variable's dimensions\n             for dim in stacking_dims:\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n \n-            expand_dims = set(stacking_dims).difference(set(val.dims))\n+            expand_dims = set(stacking_dims).intersection(set(val.dims))\n             expand_dims.add(variable_dim)\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n-            return (\n-                val.assign_coords(**assign_coords)\n-                .expand_dims(expand_dims)\n-                .stack({new_dim: (variable_dim,) + stacking_dims})\n-            )\n+            stacked_val = val.assign_coords(**assign_coords).expand_dims(expand_dims)\n+            if stacking_dims:\n+                stacked_val = stacked_val.stack({new_dim: (variable_dim,) + stacking_dims})\n+            else:\n+                stacked_val = stacked_val.rename({variable_dim: new_dim})\n+            \n+            return stacked_val\n \n         # concatenate the arrays\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..61e7e2a 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1150,10 +1150,15 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             for dim in stacking_dims:\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n-            expand_dims = set(stacking_dims).difference(set(val.dims))\n+            expand_dims = set(stacking_dims).intersection(set(val.dims))\n             expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n-            return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n+            stacked_val = val.assign_coords(**assign_coords).expand_dims(expand_dims)\n+            if stacking_dims:\n+                stacked_val = stacked_val.stack({new_dim: (variable_dim,) + stacking_dims})\n+            else:\n+                stacked_val = stacked_val.rename({variable_dim: new_dim})\n+            return stacked_val\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n         data_array = xr.concat(stackable_vars, dim=new_dim)\n         idx = data_array.indexes[new_dim]\n", "normalized_occurrence": 1}
