{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..db75a36 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -162,10 +162,18 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             baseobj.specializations = specializations\n         # resolve instance attributes\n         node.instance_attrs_type = collections.defaultdict(list)\n-        for assignattrs in node.instance_attrs.values():\n-            for assignattr in assignattrs:\n-                if not isinstance(assignattr, astroid.Unknown):\n-                    self.handle_assignattr_type(assignattr, node)\n+        # handle type hints from __init__ method\n+        init_method = node.locals.get('__init__')\n+        if init_method:\n+            init_method = init_method[0]\n+            for arg_name, annotation in init_method.args.annotations.items():\n+                if annotation:\n+                    node.instance_attrs_type[arg_name] = [annotation]\n+        else:\n+            for assignattrs in node.instance_attrs.values():\n+                for assignattr in assignattrs:\n+                    if not isinstance(assignattr, astroid.Unknown):\n+                        self.handle_assignattr_type(assignattr, node)\n         # resolve implemented interface\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..fccb446 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -75,10 +75,17 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             specializations.append(node)\n             baseobj.specializations = specializations\n         node.instance_attrs_type = collections.defaultdict(list)\n-        for assignattrs in node.instance_attrs.values():\n-            for assignattr in assignattrs:\n-                if not isinstance(assignattr, astroid.Unknown):\n-                    self.handle_assignattr_type(assignattr, node)\n+        init_method = node.locals.get('__init__')\n+        if init_method:\n+            init_method = init_method[0]\n+            for arg_name, annotation in init_method.args.annotations.items():\n+                if annotation:\n+                    node.instance_attrs_type[arg_name] = [annotation]\n+        else:\n+            for assignattrs in node.instance_attrs.values():\n+                for assignattr in assignattrs:\n+                    if not isinstance(assignattr, astroid.Unknown):\n+                        self.handle_assignattr_type(assignattr, node)\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n         except astroid.InferenceError:\n", "normalized_occurrence": 1}
