{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..11067d0 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -340,19 +340,7 @@ class LiteralIncludeReader:\n \n         return lines\n \n-    def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n-\n-        return lines\n-\n-    def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n-\n-        return lines\n+    # Removed individual prepend_filter and append_filter methods as they are now handled in _apply_filters\n \n     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         if 'dedent' in self.options:\n@@ -360,6 +348,25 @@ class LiteralIncludeReader:\n         else:\n             return lines\n \n+    def _apply_filters(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        \"\"\"Apply filters in the correct order: first dedent, then add prepend/append lines.\"\"\"\n+        # First apply dedent to the main content\n+        if 'dedent' in self.options:\n+            lines = self.dedent_filter(lines, location=location)\n+        \n+        # Then add prepend/append lines\n+        if 'prepend' in self.options:\n+            prepend = self.options.get('prepend')\n+            if prepend:\n+                lines.insert(0, prepend + '\\n')\n+        \n+        if 'append' in self.options:\n+            append = self.options.get('append')\n+            if append:\n+                lines.append(append + '\\n')\n+        \n+        return lines\n+\n \n class LiteralInclude(SphinxDirective):\n     \"\"\"\n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..6a1da22 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -223,21 +223,23 @@ class LiteralIncludeReader:\n             else:\n                 raise ValueError('end-before pattern not found: %s' % end)\n         return lines\n-    def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n-        return lines\n-    def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n-        return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n             return dedent_lines(lines, self.options.get('dedent'), location=location)\n         else:\n             return lines\n+    def _apply_filters(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n+        if 'dedent' in self.options:\n+            lines = self.dedent_filter(lines, location=location)\n+        if 'prepend' in self.options:\n+            prepend = self.options.get('prepend')\n+            if prepend:\n+                lines.insert(0, prepend + '\\n')\n+        if 'append' in self.options:\n+            append = self.options.get('append')\n+            if append:\n+                lines.append(append + '\\n')\n+        return lines\n class LiteralInclude(SphinxDirective):\n     has_content = False\n     required_arguments = 1\n", "normalized_occurrence": 1}
