{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..1a51bc6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -955,9 +955,21 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         # Fix locations (line numbers/column offsets).\n+        # Only copy location for the assertion-related nodes, not subsequent code\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and any(\n+                isinstance(node, (ast.Raise, ast.Call)) and \n+                getattr(node, 'func', None) and \n+                isinstance(node.func, ast.Name) and \n+                node.func.id == 'AssertionError'\n+                for node in ast.walk(stmt)\n+            ):\n+                # For the failure branch, copy location from assert\n+                ast.copy_location(stmt, assert_)\n+                # For nodes in the failure message, also copy location\n+                for node in ast.walk(stmt):\n+                    if not hasattr(node, 'lineno'):\n+                        ast.copy_location(node, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..bbfa649 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -513,8 +513,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and any((isinstance(node, (ast.Raise, ast.Call)) and getattr(node, 'func', None) and isinstance(node.func, ast.Name) and (node.func.id == 'AssertionError') for node in ast.walk(stmt))):\n+                ast.copy_location(stmt, assert_)\n+                for node in ast.walk(stmt):\n+                    if not hasattr(node, 'lineno'):\n+                        ast.copy_location(node, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
