{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9367", "model_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 5db5a4a..db12889 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -213,7 +213,9 @@ class _UnparseVisitor(ast.NodeVisitor):\n         return \"%s %s\" % (self.visit(node.op), self.visit(node.operand))\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n-        if node.elts:\n+        if len(node.elts) == 1:\n+            return \"(\" + self.visit(node.elts[0]) + \",)\"\n+        elif node.elts:\n             return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n         else:\n             return \"()\"\n", "occurrence": 11, "normalized_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 3caea72..4ee2066 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -125,7 +125,9 @@ class _UnparseVisitor(ast.NodeVisitor):\n     def visit_UnaryOp(self, node: ast.UnaryOp) -> str:\n         return '%s %s' % (self.visit(node.op), self.visit(node.operand))\n     def visit_Tuple(self, node: ast.Tuple) -> str:\n-        if node.elts:\n+        if len(node.elts) == 1:\n+            return '(' + self.visit(node.elts[0]) + ',)'\n+        elif node.elts:\n             return '(' + ', '.join((self.visit(e) for e in node.elts)) + ')'\n         else:\n             return '()'\n", "normalized_occurrence": 11}
