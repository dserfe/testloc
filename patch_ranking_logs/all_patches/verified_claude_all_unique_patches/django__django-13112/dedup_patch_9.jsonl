{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13112", "model_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 20d9b09..b111f34 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -100,9 +100,9 @@ class MigrationLoader:\n                 if not is_pkg and name[0] not in '_~'\n             }\n             if migration_names or self.ignore_no_migrations:\n-                self.migrated_apps.add(app_config.label)\n+                self.migrated_apps.add(app_config.label.lower())\n             else:\n-                self.unmigrated_apps.add(app_config.label)\n+                self.unmigrated_apps.add(app_config.label.lower())\n             # Load migrations\n             for migration_name in migration_names:\n                 migration_path = '%s.%s' % (module_name, migration_name)\n@@ -127,7 +127,7 @@ class MigrationLoader:\n \n     def get_migration(self, app_label, name_prefix):\n         \"\"\"Return the named migration or raise NodeNotFoundError.\"\"\"\n-        return self.graph.nodes[app_label, name_prefix]\n+        return self.graph.nodes[app_label.lower(), name_prefix]\n \n     def get_migration_by_prefix(self, app_label, name_prefix):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 58d09ae..2971715 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -48,9 +48,9 @@ class MigrationLoader:\n                     reload(module)\n             migration_names = {name for _, name, is_pkg in pkgutil.iter_modules(module.__path__) if not is_pkg and name[0] not in '_~'}\n             if migration_names or self.ignore_no_migrations:\n-                self.migrated_apps.add(app_config.label)\n+                self.migrated_apps.add(app_config.label.lower())\n             else:\n-                self.unmigrated_apps.add(app_config.label)\n+                self.unmigrated_apps.add(app_config.label.lower())\n             for migration_name in migration_names:\n                 migration_path = '%s.%s' % (module_name, migration_name)\n                 try:\n@@ -64,7 +64,7 @@ class MigrationLoader:\n                     raise BadMigrationError('Migration %s in app %s has no Migration class' % (migration_name, app_config.label))\n                 self.disk_migrations[app_config.label, migration_name] = migration_module.Migration(migration_name, app_config.label)\n     def get_migration(self, app_label, name_prefix):\n-        return self.graph.nodes[app_label, name_prefix]\n+        return self.graph.nodes[app_label.lower(), name_prefix]\n     def get_migration_by_prefix(self, app_label, name_prefix):\n         results = []\n         for migration_app_label, migration_name in self.disk_migrations:\n", "normalized_occurrence": 1}
