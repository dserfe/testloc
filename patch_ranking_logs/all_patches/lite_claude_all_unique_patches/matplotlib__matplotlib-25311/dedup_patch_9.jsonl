{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..31ac08e 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -66,12 +66,21 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"loc\", update the *loc* parameter of the legend upon finalizing.\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n-        self.legend = legend\n+        import weakref\n+        self.legend = weakref.proxy(legend)\n \n         _api.check_in_list([\"loc\", \"bbox\"], update=update)\n         self._update = update\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+        \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['legend'] = None  # Don't pickle the legend reference\n+        return state\n+        \n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n \n     def finalize_offset(self):\n         if self._update == \"loc\":\n", "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8070532..8f097f6 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -18,10 +18,17 @@ from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n from . import legend_handler\n class DraggableLegend(DraggableOffsetBox):\n     def __init__(self, legend, use_blit=False, update='loc'):\n-        self.legend = legend\n+        import weakref\n+        self.legend = weakref.proxy(legend)\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['legend'] = None\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n     def finalize_offset(self):\n         if self._update == 'loc':\n             self._update_loc(self.get_loc_in_canvas())\n", "normalized_occurrence": 1}
