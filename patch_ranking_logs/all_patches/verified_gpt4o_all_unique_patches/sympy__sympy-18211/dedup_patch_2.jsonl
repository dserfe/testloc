{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18211", "model_patch": "diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex e1103b7..1ae9b78 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -532,7 +532,7 @@ def _solve_trig(f, symbol, domain):\n     if sol1 is None or isinstance(sol1, ConditionSet):\n         try:\n             sol = _solve_trig2(f, symbol, domain)\n-        except BaseException:\n+        except Exception:\n             sol = sol1\n         if isinstance(sol1, ConditionSet) and isinstance(sol, ConditionSet):\n             if sol1.count_ops() < sol.count_ops():\n@@ -540,9 +540,7 @@ def _solve_trig(f, symbol, domain):\n     else:\n         sol = sol1\n     if sol is None:\n-        raise NotImplementedError(filldedent('''\n-            Solution to this kind of trigonometric equations\n-            is yet to be implemented'''))\n+        return ConditionSet(symbol, Eq(f_original, 0), domain)\n     return sol\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/solveset.py b/sympy/solvers/solveset.py\nindex ee31f0c..cb24b68 100644\n--- a/sympy/solvers/solveset.py\n+++ b/sympy/solvers/solveset.py\n@@ -250,7 +250,7 @@ def _solve_trig(f, symbol, domain):\n     if sol1 is None or isinstance(sol1, ConditionSet):\n         try:\n             sol = _solve_trig2(f, symbol, domain)\n-        except BaseException:\n+        except Exception:\n             sol = sol1\n         if isinstance(sol1, ConditionSet) and isinstance(sol, ConditionSet):\n             if sol1.count_ops() < sol.count_ops():\n@@ -258,7 +258,7 @@ def _solve_trig(f, symbol, domain):\n     else:\n         sol = sol1\n     if sol is None:\n-        raise NotImplementedError(filldedent('\\n            Solution to this kind of trigonometric equations\\n            is yet to be implemented'))\n+        return ConditionSet(symbol, Eq(f_original, 0), domain)\n     return sol\n def _solve_trig1(f, symbol, domain):\n     if _is_function_class_equation(HyperbolicFunction, f, symbol):\n", "normalized_occurrence": 1}
