{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..67688c6 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -406,6 +406,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n+    _re_real_polynomial = re.compile(r\"^(R|RR)(_(\\d+))?\\[(.+)\\]$\")\n+    _re_complex_polynomial = re.compile(r\"^(C|CC)(_(\\d+))?\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n@@ -416,6 +418,21 @@ class Domain(with_metaclass(OptionType, Option)):\n         elif hasattr(domain, 'to_domain'):\n             return domain.to_domain()\n         elif isinstance(domain, string_types):\n+            # Handle polynomial rings over real/complex fields first since their base patterns\n+            # could match the simple real/complex field patterns\n+            real_poly_match = cls._re_real_polynomial.match(domain)\n+            if real_poly_match:\n+                from sympy.polys.domains import RR\n+                base = RR\n+                gens = real_poly_match.groups()[-1].split(',')\n+                return base.poly_ring(*gens)\n+\n+            complex_poly_match = cls._re_complex_polynomial.match(domain)\n+            if complex_poly_match:\n+                from sympy.polys.domains import CC\n+                base = CC\n+                gens = complex_poly_match.groups()[-1].split(',')\n+                return base.poly_ring(*gens)\n             if domain in ['Z', 'ZZ']:\n                 return sympy.polys.domains.ZZ\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..1fade49 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -232,6 +232,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_complexfield = re.compile('^(C|CC)(_(\\\\d+))?$')\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n+    _re_real_polynomial = re.compile('^(R|RR)(_(\\\\d+))?\\\\[(.+)\\\\]$')\n+    _re_complex_polynomial = re.compile('^(C|CC)(_(\\\\d+))?\\\\[(.+)\\\\]$')\n     _re_fraction = re.compile('^(Z|ZZ|Q|QQ)\\\\((.+)\\\\)$')\n     _re_algebraic = re.compile('^(Q|QQ)\\\\<(.+)\\\\>$')\n     @classmethod\n@@ -241,6 +243,18 @@ class Domain(with_metaclass(OptionType, Option)):\n         elif hasattr(domain, 'to_domain'):\n             return domain.to_domain()\n         elif isinstance(domain, string_types):\n+            real_poly_match = cls._re_real_polynomial.match(domain)\n+            if real_poly_match:\n+                from sympy.polys.domains import RR\n+                base = RR\n+                gens = real_poly_match.groups()[-1].split(',')\n+                return base.poly_ring(*gens)\n+            complex_poly_match = cls._re_complex_polynomial.match(domain)\n+            if complex_poly_match:\n+                from sympy.polys.domains import CC\n+                base = CC\n+                gens = complex_poly_match.groups()[-1].split(',')\n+                return base.poly_ring(*gens)\n             if domain in ['Z', 'ZZ']:\n                 return sympy.polys.domains.ZZ\n             if domain in ['Q', 'QQ']:\n", "normalized_occurrence": 1}
