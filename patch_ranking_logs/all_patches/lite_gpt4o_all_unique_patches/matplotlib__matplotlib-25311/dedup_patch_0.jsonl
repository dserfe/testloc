{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..09a339a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,6 +3174,12 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove any Draggable legends to avoid pickling errors\n+        for ax in self.axes:\n+            legend = ax.get_legend()\n+            if legend and hasattr(legend, 'draggable') and legend.draggable:\n+                legend.draggable = None\n+\n         return state\n \n     def __setstate__(self, state):\n@@ -3201,6 +3207,12 @@ None}, default: None\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n \n+        # Restore any draggable legends\n+        for ax in self.axes:\n+            legend = ax.get_legend()\n+            if legend and hasattr(legend, 'draggable') and legend.draggable is None:\n+                legend.set_draggable(True)\n+\n         self.stale = True\n \n     def add_axobserver(self, func):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..b922605 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,10 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        for ax in self.axes:\n+            legend = ax.get_legend()\n+            if legend and hasattr(legend, 'draggable') and legend.draggable:\n+                legend.draggable = None\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n@@ -968,6 +972,10 @@ class Figure(FigureBase):\n             mgr = backend.new_figure_manager_given_figure(num, self)\n             pylab_helpers.Gcf._set_new_active_manager(mgr)\n             plt.draw_if_interactive()\n+        for ax in self.axes:\n+            legend = ax.get_legend()\n+            if legend and hasattr(legend, 'draggable') and (legend.draggable is None):\n+                legend.set_draggable(True)\n         self.stale = True\n     def add_axobserver(self, func):\n         self._axobservers.connect('_axes_change_event', lambda arg: func(arg))\n", "normalized_occurrence": 1}
