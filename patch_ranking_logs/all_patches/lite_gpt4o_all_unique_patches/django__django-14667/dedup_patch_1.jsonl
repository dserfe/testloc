{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..1bde68d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1197,6 +1197,10 @@ class QuerySet:\n             raise TypeError('Cannot change a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n \n     def reverse(self):\n@@ -1205,6 +1209,10 @@ class QuerySet:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n \n     def defer(self, *fields):\n@@ -1222,6 +1230,10 @@ class QuerySet:\n             clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n \n     def only(self, *fields):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..a4c5b95 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -726,12 +726,20 @@ class QuerySet:\n             raise TypeError('Cannot change a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n     def reverse(self):\n         if self.query.is_sliced:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n     def defer(self, *fields):\n         self._not_support_combined_queries('defer')\n@@ -742,6 +750,10 @@ class QuerySet:\n             clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n+        if clone.query.deferred_loading[1] is False:\n+            only_fields = set(fields)\n+            fields_to_remove = only_fields.intersection(clone.query.deferred_loading[0])\n+            clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields_to_remove), False)\n         return clone\n     def only(self, *fields):\n         self._not_support_combined_queries('only')\n", "normalized_occurrence": 1}
