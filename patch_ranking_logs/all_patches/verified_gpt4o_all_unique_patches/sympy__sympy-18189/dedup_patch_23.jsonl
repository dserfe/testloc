{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..9b8efb8 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -181,8 +181,15 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n             syms = [i for i in syms if i in var]\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                base_solutions = diophantine(eq, param)\n+                if permute:\n+                    permuted_solutions = set()\n+                    for sol in base_solutions:\n+                        permuted_solutions.update(signed_permutations(sol))\n+                    base_solutions = permuted_solutions\n+\n+                return {tuple([t[dict_sym_index[i]] for i in syms])\n+                            for t in base_solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..350b246 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -72,7 +72,13 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             syms = [i for i in syms if i in var]\n             if syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                base_solutions = diophantine(eq, param)\n+                if permute:\n+                    permuted_solutions = set()\n+                    for sol in base_solutions:\n+                        permuted_solutions.update(signed_permutations(sol))\n+                    base_solutions = permuted_solutions\n+                return {tuple([t[dict_sym_index[i]] for i in syms]) for t in base_solutions}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
