{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..6d74113 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -112,6 +112,12 @@ class IterativeImputer(_BaseImputer):\n         imputed target feature. Can provide significant speed-up when the\n         number of features is huge. If `None`, all features will be used.\n \n+    fill_value : scalar, default=None\n+        When `initial_strategy=\"constant\"`, `fill_value` is used to replace\n+        all occurrences of missing_values. If left to the default, `fill_value`\n+        will be 0 when imputing numerical data and “missing_value” for strings\n+        or object data types.\n+\n     initial_strategy : {'mean', 'median', 'most_frequent', 'constant'}, \\\n             default='mean'\n         Which strategy to use to initialize the missing values. Same as the\n@@ -302,6 +308,7 @@ class IterativeImputer(_BaseImputer):\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n         imputation_order=\"ascending\",\n+        fill_value=None,\n         skip_complete=False,\n         min_value=-np.inf,\n         max_value=np.inf,\n@@ -324,6 +331,7 @@ class IterativeImputer(_BaseImputer):\n         self.initial_strategy = initial_strategy\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n+        self.fill_value = fill_value\n         self.min_value = min_value\n         self.max_value = max_value\n         self.verbose = verbose\n@@ -613,6 +621,7 @@ class IterativeImputer(_BaseImputer):\n             self.initial_imputer_ = SimpleImputer(\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n+                fill_value=self.fill_value if self.initial_strategy == \"constant\" else None,\n                 keep_empty_features=self.keep_empty_features,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 2f5de89..0f34b29 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -23,7 +23,7 @@ def _assign_where(X1, X2, cond):\n         X1[cond] = X2[cond]\n class IterativeImputer(_BaseImputer):\n     _parameter_constraints: dict = {**_BaseImputer._parameter_constraints, 'estimator': [None, HasMethods(['fit', 'predict'])], 'sample_posterior': ['boolean'], 'max_iter': [Interval(Integral, 0, None, closed='left')], 'tol': [Interval(Real, 0, None, closed='left')], 'n_nearest_features': [None, Interval(Integral, 1, None, closed='left')], 'initial_strategy': [StrOptions({'mean', 'median', 'most_frequent', 'constant'})], 'imputation_order': [StrOptions({'ascending', 'descending', 'roman', 'arabic', 'random'})], 'skip_complete': ['boolean'], 'min_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'max_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'verbose': ['verbose'], 'random_state': ['random_state']}\n-    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False):\n+    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', fill_value=None, skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False):\n         super().__init__(missing_values=missing_values, add_indicator=add_indicator, keep_empty_features=keep_empty_features)\n         self.estimator = estimator\n         self.sample_posterior = sample_posterior\n@@ -33,6 +33,7 @@ class IterativeImputer(_BaseImputer):\n         self.initial_strategy = initial_strategy\n         self.imputation_order = imputation_order\n         self.skip_complete = skip_complete\n+        self.fill_value = fill_value\n         self.min_value = min_value\n         self.max_value = max_value\n         self.verbose = verbose\n@@ -121,7 +122,7 @@ class IterativeImputer(_BaseImputer):\n         X_missing_mask = _get_mask(X, self.missing_values)\n         mask_missing_values = X_missing_mask.copy()\n         if self.initial_imputer_ is None:\n-            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, keep_empty_features=self.keep_empty_features)\n+            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, fill_value=self.fill_value if self.initial_strategy == 'constant' else None, keep_empty_features=self.keep_empty_features)\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n", "normalized_occurrence": 1}
