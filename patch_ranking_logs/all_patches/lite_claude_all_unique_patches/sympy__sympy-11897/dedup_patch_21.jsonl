{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..a7d59dd 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -463,6 +463,9 @@ class LatexPrinter(Printer):\n             return r\"%s^{%s/%s}\" % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n             # Things like 1/x\n+            if expr.base.is_Function and expr.base.func == exp:\n+                # Special case for exp(-x) to prevent it becoming a fraction\n+                return self._print(expr.base.func(expr.base.args[0] * expr.exp))\n             return self._print_Mul(expr)\n         else:\n             if expr.base.is_Function:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..910256d 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -243,6 +243,8 @@ class LatexPrinter(Printer):\n                 return self._print(expr.base, '%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n+            if expr.base.is_Function and expr.base.func == exp:\n+                return self._print(expr.base.func(expr.base.args[0] * expr.exp))\n             return self._print_Mul(expr)\n         elif expr.base.is_Function:\n             return self._print(expr.base, self._print(expr.exp))\n", "normalized_occurrence": 1}
