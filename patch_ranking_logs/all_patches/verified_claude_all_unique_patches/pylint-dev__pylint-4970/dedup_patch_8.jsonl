{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4970", "model_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 79a566f..62368a0 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -470,7 +470,11 @@ class Similar:\n         the couple of corresponding starting and ending lines in both files.\n         Last regroups all successive couples in a bigger one. It allows to take into account common chunk of lines that have more\n         than the minimal number of successive lines required.\n+\n+        If min_lines is 0, the similarity checker is disabled and no commonalities are yielded.\n         \"\"\"\n+        if self.min_lines == 0:\n+            return\n         hash_to_index_1: HashToIndex_T\n         hash_to_index_2: HashToIndex_T\n         index_to_lines_1: IndexToLines_T\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 0997b2e..89839ae 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -185,6 +185,8 @@ class Similar:\n         report += f'TOTAL lines={total_line_number} duplicates={duplicated_line_number} percent={duplicated_line_number * 100.0 / total_line_number:.2f}\\n'\n         return report\n     def _find_common(self, lineset1: 'LineSet', lineset2: 'LineSet') -> Generator[Commonality, None, None]:\n+        if self.min_lines == 0:\n+            return\n         hash_to_index_1: HashToIndex_T\n         hash_to_index_2: HashToIndex_T\n         index_to_lines_1: IndexToLines_T\n", "normalized_occurrence": 19}
