{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..702dd8c 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -52,13 +53,18 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        # Only set columns/index if the lengths match to avoid errors with grouped operations\n+        if columns is not None and (not hasattr(data_to_wrap, 'columns') or\n+                                  len(columns) == data_to_wrap.shape[1]):\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n-        return data_to_wrap\n+        return data_to_wrap if isinstance(data_to_wrap, pd.DataFrame) else data_to_wrap.to_frame()\n \n+    if index is not None and len(index) != len(data_to_wrap):\n+        # If lengths don't match, don't use the provided index\n+        index = None\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n \n \n", "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..e7941e0 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,12 +12,14 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n         except Exception:\n             columns = None\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        if columns is not None and (not hasattr(data_to_wrap, 'columns') or len(columns) == data_to_wrap.shape[1]):\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n-        return data_to_wrap\n+        return data_to_wrap if isinstance(data_to_wrap, pd.DataFrame) else data_to_wrap.to_frame()\n+    if index is not None and len(index) != len(data_to_wrap):\n+        index = None\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n def _get_output_config(method, estimator=None):\n     est_sklearn_output_config = getattr(estimator, '_sklearn_output_config', {})\n", "normalized_occurrence": 1}
