{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..a38a559 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,7 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        self.handler.setLevel(self._initial_logger_levels.get(None, logging.NOTSET))\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..63b6e31 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -168,6 +168,7 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        self.handler.setLevel(self._initial_logger_levels.get(None, logging.NOTSET))\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n", "normalized_occurrence": 1}
