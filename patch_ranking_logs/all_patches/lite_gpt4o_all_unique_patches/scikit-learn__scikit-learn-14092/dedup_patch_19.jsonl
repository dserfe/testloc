{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..a06396b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -973,11 +973,16 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     \"\"\"\n \n     if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+        if target_type is float and isinstance(x, int):\n+            x = float(x)\n+        elif target_type is int and isinstance(x, (np.integer, int)):\n+            x = int(x)\n+        else:\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                            .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..5ab84be 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -282,7 +282,12 @@ def check_non_negative(X, whom):\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+        if target_type is float and isinstance(x, int):\n+            x = float(x)\n+        elif target_type is int and isinstance(x, (np.integer, int)):\n+            x = int(x)\n+        else:\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n     if max_val is not None and x > max_val:\n", "normalized_occurrence": 1}
