{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..564ccd1 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -513,18 +513,23 @@ class NDArithmeticMixin:\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n         # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        if handle_mask is None:\n+            return None\n+            \n+        # Handle scalar operands or operands without mask attribute\n+        operand_mask = getattr(operand, 'mask', None) if operand is not None else None\n+        \n+        # If both have no mask, return None\n+        if self.mask is None and operand_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n-            return deepcopy(operand.mask)\n-        elif operand is None:\n+        # If only one has a mask, return a copy of that mask\n+        elif self.mask is None:\n+            return deepcopy(operand_mask)\n+        elif operand_mask is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            # Both have masks, calculate the result\n+            return handle_mask(self.mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex b7eb663..583c0db 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -112,14 +112,17 @@ class NDArithmeticMixin:\n             axis_kwarg = dict(axis=kwds['axis']) if 'axis' in kwds else dict()\n             return self.uncertainty.propagate(operation, operand, result, correlation, **axis_kwarg)\n     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n-        if self.mask is None and operand is not None and (operand.mask is None) or handle_mask is None:\n+        if handle_mask is None:\n+            return None\n+        operand_mask = getattr(operand, 'mask', None) if operand is not None else None\n+        if self.mask is None and operand_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            return deepcopy(operand.mask)\n-        elif operand is None:\n+        elif self.mask is None:\n+            return deepcopy(operand_mask)\n+        elif operand_mask is None:\n             return deepcopy(self.mask)\n         else:\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self.mask, operand_mask, **kwds)\n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         if not compare_wcs(self.wcs, operand.wcs, **kwds):\n             raise ValueError('WCS are not equal.')\n", "normalized_occurrence": 1}
