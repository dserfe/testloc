{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..d54c11c 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -428,6 +428,9 @@ class EncodedFile(object):\n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n         self.encoding = encoding\n+        # Ensure the mode is in text when wrapped\n+        if 'b' in getattr(self.buffer, 'mode', ''):\n+            self.buffer.mode = self.buffer.mode.replace('b', '')\n \n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..d1b9721 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -250,6 +250,8 @@ class EncodedFile(object):\n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n         self.encoding = encoding\n+        if 'b' in getattr(self.buffer, 'mode', ''):\n+            self.buffer.mode = self.buffer.mode.replace('b', '')\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n", "normalized_occurrence": 1}
