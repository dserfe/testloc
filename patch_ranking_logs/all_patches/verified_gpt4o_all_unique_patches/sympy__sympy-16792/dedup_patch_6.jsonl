{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..4386463 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -432,14 +432,17 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        # Remove inferred arguments only if not an array\n+        py_args = [a for a in py_args if a not in py_inferred or isinstance(a, (OutputArgument, InOutArgument)) or not a.dimensions]\n         return py_returns, py_args, py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n         mat_dec = \"np.ndarray[{mtype}, ndim={ndim}] {name}\"\n         np_types = {'double': 'np.double_t',\n-                    'int': 'np.int_t'}\n+                    'int': 'np.int_t',\n+                    'float': 'float',  # Add other types as needed\n+                    'double*': 'np.double_t', # To handle array pointers correctly\n+                    'int*': 'np.int_t'}  # To handle array pointers correctly\n         t = arg.get_datatype('c')\n         if arg.dimensions:\n             self._need_numpy = True\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..7d40ea2 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -188,11 +188,11 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        py_args = [a for a in py_args if a not in py_inferred or isinstance(a, (OutputArgument, InOutArgument)) or (not a.dimensions)]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n-        np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n+        np_types = {'double': 'np.double_t', 'int': 'np.int_t', 'float': 'float', 'double*': 'np.double_t', 'int*': 'np.int_t'}\n         t = arg.get_datatype('c')\n         if arg.dimensions:\n             self._need_numpy = True\n", "normalized_occurrence": 1}
