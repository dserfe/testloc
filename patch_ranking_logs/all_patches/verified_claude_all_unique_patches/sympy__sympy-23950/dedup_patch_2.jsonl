{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..0ffb9c5 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import S\n from sympy.core.relational import Eq, Ne\n from sympy.logic.boolalg import BooleanFunction\n@@ -45,4 +46,10 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        result = self.eval(*self.args)\n+        # If we can evaluate to True/False, return appropriate set\n+        if result is S.true:\n+            return self.args[1]  # Return the set we're testing against\n+        if result is S.false:\n+            return S.EmptySet\n+        raise NotImplementedError(\"Cannot determine set equivalent for Contains(%s, %s)\" % self.args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..c716a2c 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,9 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        result = self.eval(*self.args)\n+        if result is S.true:\n+            return self.args[1]\n+        if result is S.false:\n+            return S.EmptySet\n+        raise NotImplementedError('Cannot determine set equivalent for Contains(%s, %s)' % self.args)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
