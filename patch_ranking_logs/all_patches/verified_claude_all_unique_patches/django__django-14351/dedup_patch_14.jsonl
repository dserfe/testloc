{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..8834e70 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -689,6 +689,13 @@ class SQLCompiler:\n             opts = self.query.get_meta()\n         only_load = self.deferred_to_columns()\n         start_alias = start_alias or self.query.get_initial_alias()\n+        # For subqueries in __in lookups, only return the primary key\n+        if getattr(self.query, 'subquery', False) and self.query.where.children:\n+            where_child = self.query.where.children[0]\n+            if hasattr(where_child, 'lookup_name') and where_child.lookup_name == 'in':\n+                pk = opts.pk\n+                alias = self.query.get_initial_alias()\n+                return [pk.get_col(alias)]\n         # The 'seen_models' is used to optimize checking the needed parent\n         # alias for a given field. This also includes None -> start_alias to\n         # be used by local fields.\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..e17e95e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -392,6 +392,12 @@ class SQLCompiler:\n             opts = self.query.get_meta()\n         only_load = self.deferred_to_columns()\n         start_alias = start_alias or self.query.get_initial_alias()\n+        if getattr(self.query, 'subquery', False) and self.query.where.children:\n+            where_child = self.query.where.children[0]\n+            if hasattr(where_child, 'lookup_name') and where_child.lookup_name == 'in':\n+                pk = opts.pk\n+                alias = self.query.get_initial_alias()\n+                return [pk.get_col(alias)]\n         seen_models = {None: start_alias}\n         for field in opts.concrete_fields:\n             model = field.model._meta.concrete_model\n", "normalized_occurrence": 1}
