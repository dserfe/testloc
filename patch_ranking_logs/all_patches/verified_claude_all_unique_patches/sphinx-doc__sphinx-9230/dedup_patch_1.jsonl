{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..3560b0a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -118,6 +118,16 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n             return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n+        elif isinstance(node, ast.Call):\n+            result = unparse(node.func)\n+            result.append(addnodes.desc_sig_punctuation('', '('))\n+            for arg in node.args:\n+                result.extend(unparse(arg))\n+                result.append(addnodes.desc_sig_punctuation('', ', '))\n+            if node.args:\n+                result.pop()  # Remove trailing comma\n+            result.append(addnodes.desc_sig_punctuation('', ')'))\n+            return result\n         elif isinstance(node, ast.Constant):  # type: ignore\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..e6105bc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -67,6 +67,16 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n             return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n+        elif isinstance(node, ast.Call):\n+            result = unparse(node.func)\n+            result.append(addnodes.desc_sig_punctuation('', '('))\n+            for arg in node.args:\n+                result.extend(unparse(arg))\n+                result.append(addnodes.desc_sig_punctuation('', ', '))\n+            if node.args:\n+                result.pop()\n+            result.append(addnodes.desc_sig_punctuation('', ')'))\n+            return result\n         elif isinstance(node, ast.Constant):\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', '...')]\n", "normalized_occurrence": 1}
