{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..59bf54b 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,52 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n+    \n+    This implements the improved Knuth-Cohen bound which is tighter than\n+    the classical Mignotte bound.\n+    \"\"\"\n     n = dup_degree(f)\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    if n <= 0:\n+        return abs(dup_LC(f, K))\n+    \n+    a = [abs(c) for c in f]\n+    b = a[0]  # leading coefficient\n+    a[0] = a[-1]  # constant term\n+    a[-1] = 0\n+    s = max(a)  # max of all except leading\n+    \n+    return 2*s + b\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This implements the improved Knuth-Cohen bound which is tighter than\n+    the classical Mignotte bound, adapted for the multivariate case.\n+    \"\"\"\n+    if dmp_zero_p(f, u):\n+        return K.zero\n+    \n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    if n <= 0:\n+        return abs(dmp_ground_LC(f, u, K))\n+    \n+    # Convert to univariate representation for bound computation\n+    g = dmp_to_dict(f, u)\n+    b = abs(dmp_ground_LC(f, u, K))  # leading coefficient\n+    \n+    # Find maximum absolute coefficient excluding the leading term\n+    s = K.zero\n+    for k, v in g.items():\n+        if isinstance(v, dict):\n+            v = abs(dmp_ground_LC([v], u-1, K))\n+        else:\n+            v = abs(v)\n+        if v != b:  # exclude leading coefficient\n+            s = max(s, v)\n+    \n+    return 2*s + b\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..b24cc51 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,32 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    if n <= 0:\n+        return abs(dup_LC(f, K))\n+    a = [abs(c) for c in f]\n+    b = a[0]\n+    a[0] = a[-1]\n+    a[-1] = 0\n+    s = max(a)\n+    return 2 * s + b\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    if dmp_zero_p(f, u):\n+        return K.zero\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    if n <= 0:\n+        return abs(dmp_ground_LC(f, u, K))\n+    g = dmp_to_dict(f, u)\n+    b = abs(dmp_ground_LC(f, u, K))\n+    s = K.zero\n+    for k, v in g.items():\n+        if isinstance(v, dict):\n+            v = abs(dmp_ground_LC([v], u - 1, K))\n+        else:\n+            v = abs(v)\n+        if v != b:\n+            s = max(s, v)\n+    return 2 * s + b\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
