{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..a25280f 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -96,7 +96,20 @@ class DeconstructableSerializer(BaseSerializer):\n             name = \"models.%s\" % name\n         else:\n             imports = {\"import %s\" % module}\n-            name = path\n+            # Handle nested classes by reconstructing the full path\n+            parts = path.split('.')\n+            for i in range(len(parts) - 1, 0, -1):\n+                try:\n+                    parent_class = \".\".join(parts[:i])\n+                    module = __import__(parent_class)\n+                    for part in parts[i:]:\n+                        module = getattr(module, part)\n+                    name = path\n+                    break\n+                except AttributeError:\n+                    continue\n+            else:\n+                name = path  # Fallback to original path if import fails\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..d7c438d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -74,7 +74,19 @@ class DeconstructableSerializer(BaseSerializer):\n             name = 'models.%s' % name\n         else:\n             imports = {'import %s' % module}\n-            name = path\n+            parts = path.split('.')\n+            for i in range(len(parts) - 1, 0, -1):\n+                try:\n+                    parent_class = '.'.join(parts[:i])\n+                    module = __import__(parent_class)\n+                    for part in parts[i:]:\n+                        module = getattr(module, part)\n+                    name = path\n+                    break\n+                except AttributeError:\n+                    continue\n+            else:\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
