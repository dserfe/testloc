{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13121", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0403e91..2017278 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -580,7 +580,21 @@ class BaseDatabaseOperations:\n \n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            try:\n+                # Try to directly use the value as microseconds\n+                return datetime.timedelta(0, 0, value)\n+            except TypeError:\n+                try:\n+                    # If the value is a string (e.g. from SQLite/MySQL), convert to microseconds first\n+                    value = str(decimal.Decimal(value) / decimal.Decimal(1000000))\n+                    hours, minutes, seconds = value.split(':')\n+                    return datetime.timedelta(\n+                        hours=int(hours),\n+                        minutes=int(minutes),\n+                        seconds=float(seconds),\n+                    )\n+                except (decimal.InvalidOperation, ValueError):\n+                    return value\n \n     def check_expression_support(self, expression):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex f21ab48..1e20eb1 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -194,7 +194,15 @@ class BaseDatabaseOperations:\n         return []\n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            try:\n+                return datetime.timedelta(0, 0, value)\n+            except TypeError:\n+                try:\n+                    value = str(decimal.Decimal(value) / decimal.Decimal(1000000))\n+                    hours, minutes, seconds = value.split(':')\n+                    return datetime.timedelta(hours=int(hours), minutes=int(minutes), seconds=float(seconds))\n+                except (decimal.InvalidOperation, ValueError):\n+                    return value\n     def check_expression_support(self, expression):\n         pass\n     def conditional_expression_supported_in_where_clause(self, expression):\n", "normalized_occurrence": 1}
