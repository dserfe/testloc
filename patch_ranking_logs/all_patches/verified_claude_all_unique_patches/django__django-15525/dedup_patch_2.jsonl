{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..144048c 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,7 +336,19 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        # Handle foreign key natural keys by ensuring related objects exist first\n+        obj = Model(**data)\n+        natural_key_args = []\n+        for value in data.values():\n+            if isinstance(value, (list, tuple)) and len(value) > 0:\n+                related_model = Model._meta.get_field(list(data.keys())[list(data.values()).index(value)]).remote_field.model\n+                if hasattr(related_model._default_manager, 'get_by_natural_key'):\n+                    try:\n+                        related_obj = related_model._default_manager.db_manager(db).get_by_natural_key(*value)\n+                        setattr(obj, list(data.keys())[list(data.values()).index(value)], related_obj)\n+                    except related_model.DoesNotExist:\n+                        pass\n+        natural_key = obj.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..d837d7d 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,7 +144,18 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n-        natural_key = Model(**data).natural_key()\n+        obj = Model(**data)\n+        natural_key_args = []\n+        for value in data.values():\n+            if isinstance(value, (list, tuple)) and len(value) > 0:\n+                related_model = Model._meta.get_field(list(data.keys())[list(data.values()).index(value)]).remote_field.model\n+                if hasattr(related_model._default_manager, 'get_by_natural_key'):\n+                    try:\n+                        related_obj = related_model._default_manager.db_manager(db).get_by_natural_key(*value)\n+                        setattr(obj, list(data.keys())[list(data.values()).index(value)], related_obj)\n+                    except related_model.DoesNotExist:\n+                        pass\n+        natural_key = obj.natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n         except Model.DoesNotExist:\n", "normalized_occurrence": 1}
