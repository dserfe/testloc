{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..e59d018 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -461,10 +461,18 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # store whether originally we wanted numeric dtype\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == \"numeric\"\n \n-    dtype_orig = getattr(array, \"dtype\", None)\n-    if not hasattr(dtype_orig, 'kind'):\n-        # not a data type (e.g. a column named dtype in a pandas DataFrame)\n-        dtype_orig = None\n+    # Get original dtype for comparison\n+    dtype_orig = None\n+    if hasattr(array, 'dtype'):\n+        dtype_orig = array.dtype\n+    elif hasattr(array, 'dtypes'):  # pandas DataFrame, Series\n+        # For pandas DataFrame with all same dtypes, use that dtype\n+        # Otherwise use object dtype to trigger the warning\n+        dtypes = array.dtypes\n+        if dtypes.nunique() == 1:\n+            dtype_orig = dtypes.iloc[0]\n+        else:\n+            dtype_orig = np.dtype('O')\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..d83077c 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -125,9 +125,15 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         accept_sparse = False\n     array_orig = array\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == 'numeric'\n-    dtype_orig = getattr(array, 'dtype', None)\n-    if not hasattr(dtype_orig, 'kind'):\n-        dtype_orig = None\n+    dtype_orig = None\n+    if hasattr(array, 'dtype'):\n+        dtype_orig = array.dtype\n+    elif hasattr(array, 'dtypes'):\n+        dtypes = array.dtypes\n+        if dtypes.nunique() == 1:\n+            dtype_orig = dtypes.iloc[0]\n+        else:\n+            dtype_orig = np.dtype('O')\n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n             dtype = np.float64\n", "normalized_occurrence": 1}
