{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13925", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c6d9d53..1b78cdf 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -249,42 +249,7 @@ class Options:\n             )\n         return pk_class\n \n-    def _prepare(self, model):\n-        if self.order_with_respect_to:\n-            # The app registry will not be ready at this point, so we cannot\n-            # use get_field().\n-            query = self.order_with_respect_to\n-            try:\n-                self.order_with_respect_to = next(\n-                    f for f in self._get_fields(reverse=False)\n-                    if f.name == query or f.attname == query\n-                )\n-            except StopIteration:\n-                raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, query))\n \n-            self.ordering = ('_order',)\n-            if not any(isinstance(field, OrderWrt) for field in model._meta.local_fields):\n-                model.add_to_class('_order', OrderWrt())\n-        else:\n-            self.order_with_respect_to = None\n-\n-        if self.pk is None:\n-            if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n \n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n@@ -892,4 +857,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 4, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbf0b41..93ac5f1 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -151,30 +151,6 @@ class Options:\n         if not issubclass(pk_class, AutoField):\n             raise ValueError(f\"Primary key '{pk_class_path}' referred by {source} must subclass AutoField.\")\n         return pk_class\n-    def _prepare(self, model):\n-        if self.order_with_respect_to:\n-            query = self.order_with_respect_to\n-            try:\n-                self.order_with_respect_to = next((f for f in self._get_fields(reverse=False) if f.name == query or f.attname == query))\n-            except StopIteration:\n-                raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, query))\n-            self.ordering = ('_order',)\n-            if not any((isinstance(field, OrderWrt) for field in model._meta.local_fields)):\n-                model.add_to_class('_order', OrderWrt())\n-        else:\n-            self.order_with_respect_to = None\n-        if self.pk is None:\n-            if self.parents:\n-                field = next(iter(self.parents.values()))\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n-                if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-            else:\n-                pk_class = self._get_default_pk_class()\n-                auto = pk_class(verbose_name='ID', primary_key=True, auto_created=True)\n-                model.add_to_class('id', auto)\n     def add_manager(self, manager):\n         self.local_managers.append(manager)\n         self._expire_cache()\n", "normalized_occurrence": 4}
