{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..0530af7 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -127,6 +127,9 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     This function should be called only during testing (setup, call or teardown) or\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n+    \n+    If you need to skip an entire module, consider using the skip_module function or \n+    the ``allow_module_level`` flag.\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n@@ -144,7 +147,12 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n-@_with_exception(Failed)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called only at the module level.\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..1561fda 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -85,6 +85,9 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     This function should be called only during testing (setup, call or teardown) or\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n+    \n+    If you need to skip an entire module, consider using the skip_module function or \n+    the ``allow_module_level`` flag.\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n@@ -101,7 +104,13 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n-@_with_exception(Failed)\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called only at the module level.\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n+\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "normalized_occurrence": 1}
