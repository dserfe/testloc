{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..0d4dbef 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -340,6 +340,18 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n+    # Handle pandas nullable dtypes\n+    if not issparse(y) and hasattr(y, \"dtype\"):\n+        pd_dtype = getattr(y.dtype, \"name\", None)\n+        if pd_dtype in [\"Int64\", \"Float64\", \"boolean\"]:\n+            # Convert to corresponding numpy dtype\n+            if pd_dtype == \"Int64\":\n+                y = y.astype(\"float64\")  # handle NA values\n+            elif pd_dtype == \"Float64\":\n+                y = y.astype(\"float64\")\n+            elif pd_dtype == \"boolean\":\n+                y = y.astype(\"float64\")\n+\n     if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n         # [obj_1] and not [\"label_1\"]\n         return \"unknown\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..42976c8 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -91,6 +91,15 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n+    if not issparse(y) and hasattr(y, 'dtype'):\n+        pd_dtype = getattr(y.dtype, 'name', None)\n+        if pd_dtype in ['Int64', 'Float64', 'boolean']:\n+            if pd_dtype == 'Int64':\n+                y = y.astype('float64')\n+            elif pd_dtype == 'Float64':\n+                y = y.astype('float64')\n+            elif pd_dtype == 'boolean':\n+                y = y.astype('float64')\n     if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n         return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n", "normalized_occurrence": 1}
