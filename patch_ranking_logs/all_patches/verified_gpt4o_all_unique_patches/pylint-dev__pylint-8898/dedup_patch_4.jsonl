{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..16a2b91 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,8 +114,20 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current_pattern = []\n+    inside_brackets = False\n+    for char in value:\n+        if char == ',' and not inside_brackets:\n+            patterns.append(_regex_transformer(''.join(current_pattern)))\n+            current_pattern = []\n+        else:\n+            if char in '([{':\n+                inside_brackets = True\n+            elif char in ')]}':\n+                inside_brackets = False\n+            current_pattern.append(char)\n+    if current_pattern:\n+        patterns.append(_regex_transformer(''.join(current_pattern)))\n     return patterns\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..9e1d3e9 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,8 +55,20 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current_pattern = []\n+    inside_brackets = False\n+    for char in value:\n+        if char == ',' and (not inside_brackets):\n+            patterns.append(_regex_transformer(''.join(current_pattern)))\n+            current_pattern = []\n+        else:\n+            if char in '([{':\n+                inside_brackets = True\n+            elif char in ')]}':\n+                inside_brackets = False\n+            current_pattern.append(char)\n+    if current_pattern:\n+        patterns.append(_regex_transformer(''.join(current_pattern)))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n", "normalized_occurrence": 1}
