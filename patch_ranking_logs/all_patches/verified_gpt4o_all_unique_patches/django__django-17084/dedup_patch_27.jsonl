{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 9149abb..89e7778 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -581,7 +581,13 @@ class QuerySet(AltersData):\n                 raise TypeError(\"Complex aggregates require an alias\")\n             kwargs[arg.default_alias] = arg\n \n-        return self.query.chain().get_aggregation(self.db, kwargs)\n+        query = self.query.chain()\n+        for key, value in kwargs.items():\n+            if isinstance(value, Window):\n+                subquery = self.annotate(**{key: value}).values(key)\n+                aggregated_value = subquery.aggregate(Sum(key))\n+                return aggregated_value\n+        return query.get_aggregation(self.db, kwargs)\n \n     async def aaggregate(self, *args, **kwargs):\n         return await sync_to_async(self.aggregate)(*args, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2540275..ba8d221 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -306,7 +306,13 @@ class QuerySet(AltersData):\n             except (AttributeError, TypeError):\n                 raise TypeError('Complex aggregates require an alias')\n             kwargs[arg.default_alias] = arg\n-        return self.query.chain().get_aggregation(self.db, kwargs)\n+        query = self.query.chain()\n+        for key, value in kwargs.items():\n+            if isinstance(value, Window):\n+                subquery = self.annotate(**{key: value}).values(key)\n+                aggregated_value = subquery.aggregate(Sum(key))\n+                return aggregated_value\n+        return query.get_aggregation(self.db, kwargs)\n     async def aaggregate(self, *args, **kwargs):\n         return await sync_to_async(self.aggregate)(*args, **kwargs)\n     def count(self):\n", "normalized_occurrence": 1}
