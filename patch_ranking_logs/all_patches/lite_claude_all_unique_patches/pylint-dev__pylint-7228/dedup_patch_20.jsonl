{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 515b944..d93635e 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,7 +23,15 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        return advanced_re.compile(value)\n+    except (re.error, advanced_re.error) as exc:\n+        if not USE_ADVANCED_RE:\n+            raise optparse.OptionValueError(\n+                f\"Error in regex pattern '{value}'. Consider installing 'regex' package \"\n+                f\"for extended Unicode support: {str(exc)}\"\n+            ) from exc\n+        raise\n \n \n # pylint: disable=unused-argument\n@@ -103,7 +111,7 @@ VALIDATORS = {\n     \"string\": utils._unquote,\n     \"int\": int,\n     \"float\": float,\n-    \"regexp\": lambda pattern: re.compile(pattern or \"\"),\n+    \"regexp\": lambda pattern: advanced_re.compile(pattern or \"\"),\n     \"regexp_csv\": _regexp_csv_validator,\n     \"regexp_paths_csv\": _regexp_paths_csv_validator,\n     \"csv\": _csv_validator,\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex bdedcd7..d19b9bd 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -11,7 +11,12 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, 'pattern'):\n         return value\n-    return re.compile(value)\n+    try:\n+        return advanced_re.compile(value)\n+    except (re.error, advanced_re.error) as exc:\n+        if not USE_ADVANCED_RE:\n+            raise optparse.OptionValueError(f\"Error in regex pattern '{value}'. Consider installing 'regex' package for extended Unicode support: {str(exc)}\") from exc\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n def _regexp_paths_csv_validator(_, name: str, value: str | list[Pattern[str]]) -> list[Pattern[str]]:\n@@ -58,7 +63,7 @@ def _py_version_validator(_, name, value):\n         except (ValueError, AttributeError):\n             raise optparse.OptionValueError(f\"Invalid format for {name}, should be version string. E.g., '3.8'\") from None\n     return value\n-VALIDATORS = {'string': utils._unquote, 'int': int, 'float': float, 'regexp': lambda pattern: re.compile(pattern or ''), 'regexp_csv': _regexp_csv_validator, 'regexp_paths_csv': _regexp_paths_csv_validator, 'csv': _csv_validator, 'yn': _yn_validator, 'choice': lambda opt, name, value: _choice_validator(opt['choices'], name, value), 'confidence': lambda opt, name, value: _multiple_choice_validator(opt['choices'], name, value), 'multiple_choice': lambda opt, name, value: _multiple_choice_validator(opt['choices'], name, value), 'non_empty_string': _non_empty_string_validator, 'py_version': _py_version_validator}\n+VALIDATORS = {'string': utils._unquote, 'int': int, 'float': float, 'regexp': lambda pattern: advanced_re.compile(pattern or ''), 'regexp_csv': _regexp_csv_validator, 'regexp_paths_csv': _regexp_paths_csv_validator, 'csv': _csv_validator, 'yn': _yn_validator, 'choice': lambda opt, name, value: _choice_validator(opt['choices'], name, value), 'confidence': lambda opt, name, value: _multiple_choice_validator(opt['choices'], name, value), 'multiple_choice': lambda opt, name, value: _multiple_choice_validator(opt['choices'], name, value), 'non_empty_string': _non_empty_string_validator, 'py_version': _py_version_validator}\n def _call_validator(opttype, optdict, option, value):\n     if opttype not in VALIDATORS:\n         raise Exception(f'Unsupported type \"{opttype}\"')\n", "normalized_occurrence": 1}
