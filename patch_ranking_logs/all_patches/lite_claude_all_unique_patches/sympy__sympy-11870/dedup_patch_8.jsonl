{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..7010d4a 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -439,9 +439,14 @@ class exp(ExpBase):\n         return exp(arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n+        # If the argument is imaginary, convert to trig form using Euler's formula\n+        # exp(I*x) = cos(x) + I*sin(x)\n+        if arg.has(I):\n+            x = -I * arg  # extract real argument\n+            return cos(x) + I*sin(x)\n+        return exp(arg)  # otherwise leave unchanged\n \n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..5ac3276 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -271,9 +271,12 @@ class exp(ExpBase):\n             return S.One\n         return exp(arg)\n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n+        if arg.has(I):\n+            x = -I * arg\n+            return cos(x) + I * sin(x)\n+        return exp(arg)\n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n         I = S.ImaginaryUnit\n", "normalized_occurrence": 1}
