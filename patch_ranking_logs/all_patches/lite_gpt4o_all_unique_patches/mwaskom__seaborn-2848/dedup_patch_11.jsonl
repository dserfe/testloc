{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..4a309f3 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1438,7 +1438,7 @@ class PairGrid(Grid):\n             self.diag_vars = np.array(diag_vars, np.object_)\n             self.diag_axes = np.array(diag_axes, np.object_)\n \n-        if \"hue\" not in signature(func).parameters:\n+        if \"hue\" not in signature(func).parameters and \"hue\" not in kwargs:\n             return self._map_diag_iter_hue(func, **kwargs)\n \n         # Loop over diagonal variables and axes, making one plot in each\n@@ -1536,7 +1536,7 @@ class PairGrid(Grid):\n \n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot on the specified axes.\"\"\"\n-        if \"hue\" not in signature(func).parameters:\n+        if \"hue\" not in signature(func).parameters and \"hue\" not in kwargs:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..e9a898d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -655,7 +655,7 @@ class PairGrid(Grid):\n                     group.join(ax, diag_axes[0])\n             self.diag_vars = np.array(diag_vars, np.object_)\n             self.diag_axes = np.array(diag_axes, np.object_)\n-        if 'hue' not in signature(func).parameters:\n+        if 'hue' not in signature(func).parameters and 'hue' not in kwargs:\n             return self._map_diag_iter_hue(func, **kwargs)\n         for var, ax in zip(self.diag_vars, self.diag_axes):\n             plot_kwargs = kwargs.copy()\n@@ -724,7 +724,7 @@ class PairGrid(Grid):\n         if 'hue' in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n-        if 'hue' not in signature(func).parameters:\n+        if 'hue' not in signature(func).parameters and 'hue' not in kwargs:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n         kwargs = kwargs.copy()\n", "normalized_occurrence": 1}
