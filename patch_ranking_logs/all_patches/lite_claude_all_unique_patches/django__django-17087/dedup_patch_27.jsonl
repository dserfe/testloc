{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..cd57895 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,14 +100,20 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n-            imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n-        return name, imports\n+        # Split only the first part (module) from the rest of the path\n+        try:\n+            module, class_path = path.split(\".\", 1)\n+            # Handle django.db.models specially\n+            if path.startswith(\"django.db.models.\"):\n+                imports = {\"from django.db import models\"}\n+                name = \"models.%s\" % class_path\n+            else:\n+                imports = {\"import %s\" % module}\n+                name = path\n+            return name, imports\n+        except ValueError:\n+            # If there's no dot, just return the path itself\n+            return path, set()\n \n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..9633b06 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,14 +70,17 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n-            imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n-        return (name, imports)\n+        try:\n+            module, class_path = path.split('.', 1)\n+            if path.startswith('django.db.models.'):\n+                imports = {'from django.db import models'}\n+                name = 'models.%s' % class_path\n+            else:\n+                imports = {'import %s' % module}\n+                name = path\n+            return (name, imports)\n+        except ValueError:\n+            return (path, set())\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n class DictionarySerializer(BaseSerializer):\n", "normalized_occurrence": 1}
