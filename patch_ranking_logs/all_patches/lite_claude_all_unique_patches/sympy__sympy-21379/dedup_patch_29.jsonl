{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..81a2565 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -812,17 +812,21 @@ class Piecewise(Function):\n         # True condition\n         args = list(self.args)\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n-                args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n-                break\n-        if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+        try:\n+            for i, (e, c) in enumerate(args):\n+                c = c._subs(old, new)\n+                if c != False:\n+                    args_exist = True\n+                    e = e._subs(old, new)\n+                args[i] = (e, c)\n+                if c == True:\n+                    break\n+            if not args_exist:\n+                args = ((Undefined, True),)\n+            return self.func(*args)\n+        except PolynomialError:\n+            # Fall back to direct substitution if polynomial error occurs\n+            return super()._eval_subs(old, new)\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..627cc33 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -443,17 +443,20 @@ class Piecewise(Function):\n     def _eval_subs(self, old, new):\n         args = list(self.args)\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n-                args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n-                break\n-        if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+        try:\n+            for i, (e, c) in enumerate(args):\n+                c = c._subs(old, new)\n+                if c != False:\n+                    args_exist = True\n+                    e = e._subs(old, new)\n+                args[i] = (e, c)\n+                if c == True:\n+                    break\n+            if not args_exist:\n+                args = ((Undefined, True),)\n+            return self.func(*args)\n+        except PolynomialError:\n+            return super()._eval_subs(old, new)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
