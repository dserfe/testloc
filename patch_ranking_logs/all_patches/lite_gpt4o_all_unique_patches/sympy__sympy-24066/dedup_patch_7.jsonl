{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..29139dc 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -170,6 +170,11 @@ class UnitSystem(_QuantityMapper):\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n             return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+            factor, dim = self._collect_factor_and_dimension(expr.base)\n+            exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n+            if self.get_dimension_system().is_dimensionless(exp_dim):\n+                exp_dim = 1\n+            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -190,10 +195,11 @@ class UnitSystem(_QuantityMapper):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            args_dims = [self._collect_factor_and_dimension(arg)[1] for arg in expr.args]\n+            if all(self.get_dimension_system().is_dimensionless(d) for d in args_dims):\n+                return S.One, Dimension(1)\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            return (expr.func(*(f[0] for f in fds)), fds[0][1])\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n@@ -203,4 +209,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 33c8d4e..1720280 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -100,6 +100,11 @@ class UnitSystem(_QuantityMapper):\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n             return (factor ** exp_factor, dim ** (exp_factor * exp_dim))\n+            factor, dim = self._collect_factor_and_dimension(expr.base)\n+            exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n+            if self.get_dimension_system().is_dimensionless(exp_dim):\n+                exp_dim = 1\n+            return (factor ** exp_factor, dim ** (exp_factor * exp_dim))\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -116,8 +121,11 @@ class UnitSystem(_QuantityMapper):\n                 dim /= idim ** count\n             return (factor, dim)\n         elif isinstance(expr, Function):\n+            args_dims = [self._collect_factor_and_dimension(arg)[1] for arg in expr.args]\n+            if all((self.get_dimension_system().is_dimensionless(d) for d in args_dims)):\n+                return (S.One, Dimension(1))\n             fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)), *(d[1] for d in fds))\n+            return (expr.func(*(f[0] for f in fds)), fds[0][1])\n         elif isinstance(expr, Dimension):\n             return (S.One, expr)\n         else:\n", "normalized_occurrence": 1}
