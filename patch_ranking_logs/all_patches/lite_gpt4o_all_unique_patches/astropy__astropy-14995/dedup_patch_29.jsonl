{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..c28c82d 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -517,13 +517,15 @@ class NDArithmeticMixin:\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n+        elif self.mask is None and operand is not None and operand.mask is not None:\n             # Make a copy so there is no reference in the result.\n             return deepcopy(operand.mask)\n+        elif operand is not None and operand.mask is None:\n+            return deepcopy(self.mask)\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n+            # Now let's calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex b7eb663..e41f6bb 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -114,8 +114,10 @@ class NDArithmeticMixin:\n     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n         if self.mask is None and operand is not None and (operand.mask is None) or handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n+        elif self.mask is None and operand is not None and (operand.mask is not None):\n             return deepcopy(operand.mask)\n+        elif operand is not None and operand.mask is None:\n+            return deepcopy(self.mask)\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n", "normalized_occurrence": 1}
