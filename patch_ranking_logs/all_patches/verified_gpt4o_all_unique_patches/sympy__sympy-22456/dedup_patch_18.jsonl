{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..7caa99f 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -229,6 +229,8 @@ class Token(CodegenAST):\n         for attrname in cls.__slots__[len(args):]:\n             if attrname in kwargs:\n                 argval = kwargs.pop(attrname)\n+            elif attrname == 'text' and len(args) == 1:\n+                argval = args[0]\n \n             elif attrname in cls.defaults:\n                 argval = cls.defaults[attrname]\n@@ -250,6 +252,8 @@ class Token(CodegenAST):\n \n         # Set attributes\n         for attr, arg in zip(cls.__slots__, attrvals):\n+            if attr == 'text':\n+                setattr(obj, attr, str(arg))  # Ensure text is always a string\n             setattr(obj, attr, arg)\n \n         return obj\n@@ -870,6 +874,7 @@ class For(Token):\n \n \n class String(Token):\n+    __slots__ = ('text',)\n     \"\"\" SymPy object representing a string.\n \n     Atomic object which is not an expression (as opposed to Symbol).\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..f374cc3 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -211,6 +211,8 @@ class Token(CodegenAST):\n         for attrname in cls.__slots__[len(args):]:\n             if attrname in kwargs:\n                 argval = kwargs.pop(attrname)\n+            elif attrname == 'text' and len(args) == 1:\n+                argval = args[0]\n             elif attrname in cls.defaults:\n                 argval = cls.defaults[attrname]\n             else:\n@@ -221,6 +223,8 @@ class Token(CodegenAST):\n         basic_args = [val for attr, val in zip(cls.__slots__, attrvals) if attr not in cls.not_in_args]\n         obj = CodegenAST.__new__(cls, *basic_args)\n         for attr, arg in zip(cls.__slots__, attrvals):\n+            if attr == 'text':\n+                setattr(obj, attr, str(arg))\n             setattr(obj, attr, arg)\n         return obj\n \n@@ -749,30 +753,8 @@ class For(Token):\n         return _sympify(itr)\n \n class String(Token):\n-    \"\"\" SymPy object representing a string.\n-\n-    Atomic object which is not an expression (as opposed to Symbol).\n-\n-    Parameters\n-    ==========\n-\n-    text : str\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.codegen.ast import String\n-    >>> f = String('foo')\n-    >>> f\n-    foo\n-    >>> str(f)\n-    'foo'\n-    >>> f.text\n-    'foo'\n-    >>> print(repr(f))\n-    String('foo')\n-\n-    \"\"\"\n+    __slots__ = ('text',)\n+    \" SymPy object representing a string.\\n\\n    Atomic object which is not an expression (as opposed to Symbol).\\n\\n    Parameters\\n    ==========\\n\\n    text : str\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.codegen.ast import String\\n    >>> f = String('foo')\\n    >>> f\\n    foo\\n    >>> str(f)\\n    'foo'\\n    >>> f.text\\n    'foo'\\n    >>> print(repr(f))\\n    String('foo')\\n\\n    \"\n     __slots__ = ('text',)\n     not_in_args = ['text']\n     is_Atom = True\n", "normalized_occurrence": 1}
