{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..274389c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -201,10 +201,18 @@ class ModelBase(type):\n             if base != new_class and not base._meta.abstract:\n                 continue\n             # Locate OneToOneField instances.\n+            # First pass: collect fields with explicit parent_link=True\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n+            # Second pass: collect remaining OneToOneFields only if no parent link exists\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField) and not getattr(field.remote_field, 'parent_link', False):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    related_tuple = make_model_tuple(related)\n+                    if related_tuple not in parent_links:\n+                        parent_links[related_tuple] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..c5d04ff 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -105,9 +105,15 @@ class ModelBase(type):\n             if base != new_class and (not base._meta.abstract):\n                 continue\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and getattr(field.remote_field, 'parent_link', False):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField) and (not getattr(field.remote_field, 'parent_link', False)):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    related_tuple = make_model_tuple(related)\n+                    if related_tuple not in parent_links:\n+                        parent_links[related_tuple] = field\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n", "normalized_occurrence": 1}
