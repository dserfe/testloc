{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..5f72e1a 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,9 +355,18 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        # Get default values for fields with callable defaults\n+        for f in self.instance._meta.fields:\n+            if f.name not in object_data and f.default != models.NOT_PROVIDED:\n+                default = f.default\n+                if callable(default):\n+                    default = default()\n+                object_data[f.name] = default\n+\n         # if initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n+\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..3082521 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,12 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        for f in self.instance._meta.fields:\n+            if f.name not in object_data and f.default != models.NOT_PROVIDED:\n+                default = f.default\n+                if callable(default):\n+                    default = default()\n+                object_data[f.name] = default\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
