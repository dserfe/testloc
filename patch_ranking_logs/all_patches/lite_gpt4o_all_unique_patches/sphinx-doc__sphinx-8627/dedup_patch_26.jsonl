{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..bae7bba 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,9 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, TYPE_CHECKING\n+if TYPE_CHECKING:\n+    import struct\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -18,6 +20,7 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.typing import restify\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..dc08c82 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,11 +1,14 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, TYPE_CHECKING\n+if TYPE_CHECKING:\n+    import struct\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.typing import restify\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n         if callable(obj):\n", "normalized_occurrence": 1}
