{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..6a9fe17 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -195,12 +195,15 @@ class NDimArray(Printable):\n                 return [pointer], ()\n \n             result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n-            if len(set(shapes)) != 1:\n-                raise ValueError(\"could not determine shape unambiguously\")\n-            for i in elems:\n-                result.extend(i)\n-            return result, (len(shapes),)+shapes[0]\n+            if not pointer:\n+                return [], (0,)\n+            else:\n+                elems, shapes = zip(*[f(i) for i in pointer])\n+                if len(set(shapes)) != 1:\n+                    raise ValueError(\"could not determine shape unambiguously\")\n+                for i in elems:\n+                    result.extend(i)\n+                return result, (len(shapes),)+shapes[0]\n \n         return f(iterable)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..45019bf 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -71,12 +71,15 @@ class NDimArray(Printable):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n             result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n-            if len(set(shapes)) != 1:\n-                raise ValueError('could not determine shape unambiguously')\n-            for i in elems:\n-                result.extend(i)\n-            return (result, (len(shapes),) + shapes[0])\n+            if not pointer:\n+                return ([], (0,))\n+            else:\n+                elems, shapes = zip(*[f(i) for i in pointer])\n+                if len(set(shapes)) != 1:\n+                    raise ValueError('could not determine shape unambiguously')\n+                for i in elems:\n+                    result.extend(i)\n+                return (result, (len(shapes),) + shapes[0])\n         return f(iterable)\n     @classmethod\n     def _handle_ndarray_creation_inputs(cls, iterable=None, shape=None, **kwargs):\n", "normalized_occurrence": 1}
