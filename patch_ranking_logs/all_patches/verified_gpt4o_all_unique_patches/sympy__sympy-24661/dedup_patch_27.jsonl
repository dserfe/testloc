{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..9ccd334 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1069,13 +1069,24 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n     else:\n         _transformations = transformations\n \n+    from sympy.core.relational import Relational\n+\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n \n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        if isinstance(code, str):\n+            code_ast = ast.parse(code, mode='eval')\n+        else:\n+            code_ast = code\n+        code_ast = evaluateFalse(code_ast)\n+        code = compile(code_ast, '<string>', 'eval')\n \n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n+\n+        if not evaluate and isinstance(rv, Relational):\n+            rv = rv.func(*rv.args, evaluate=False)\n+\n         # restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..b603b8e 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -509,11 +509,19 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n             raise ValueError('unknown transformation group name')\n     else:\n         _transformations = transformations\n+    from sympy.core.relational import Relational\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        if isinstance(code, str):\n+            code_ast = ast.parse(code, mode='eval')\n+        else:\n+            code_ast = code\n+        code_ast = evaluateFalse(code_ast)\n+        code = compile(code_ast, '<string>', 'eval')\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n+        if not evaluate and isinstance(rv, Relational):\n+            rv = rv.func(*rv.args, evaluate=False)\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n         return rv\n", "normalized_occurrence": 1}
