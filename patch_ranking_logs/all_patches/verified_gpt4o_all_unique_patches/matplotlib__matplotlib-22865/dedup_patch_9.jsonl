{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..3086446 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -647,8 +647,8 @@ class Colorbar:\n         else:\n             self.solids = self.ax.pcolormesh(\n                 X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha,\n-                edgecolors='none', shading='flat')\n-            if not self.drawedges:\n+                edgecolors='k' if self.drawedges else 'none', shading='flat')\n+            if not self.drawedges and len(self._y) >= self.n_rasterize:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n         self.dividers.set_segments(\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..b8877c1 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -258,8 +258,8 @@ class Colorbar:\n         if isinstance(mappable, contour.ContourSet) and any((hatch is not None for hatch in mappable.hatches)):\n             self._add_solids_patches(X, Y, C, mappable)\n         else:\n-            self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='none', shading='flat')\n-            if not self.drawedges:\n+            self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='k' if self.drawedges else 'none', shading='flat')\n+            if not self.drawedges and len(self._y) >= self.n_rasterize:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n         self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n", "normalized_occurrence": 1}
