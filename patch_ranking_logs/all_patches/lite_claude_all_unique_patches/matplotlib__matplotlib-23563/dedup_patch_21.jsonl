{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23563", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..aff4009 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -211,7 +211,18 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n+        if not hasattr(self, '_verts3d'):\n+            self._verts3d = self.get_xdata(), self.get_ydata(), np.zeros_like(self.get_xdata())\n         xs3d, ys3d, zs3d = self._verts3d\n+        # Ensure arrays are properly shaped\n+        xs3d = np.asarray(xs3d)\n+        ys3d = np.asarray(ys3d)\n+        zs3d = np.asarray(zs3d)\n+        if xs3d.size == 1:\n+            xs3d = np.array([xs3d, xs3d])\n+            ys3d = np.array([ys3d, ys3d])\n+            zs3d = np.array([zs3d, zs3d])\n+        self._verts3d = xs3d, ys3d, zs3d\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..2f66cb0 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -81,7 +81,17 @@ class Line3D(lines.Line2D):\n         return self._verts3d\n     @artist.allow_rasterization\n     def draw(self, renderer):\n+        if not hasattr(self, '_verts3d'):\n+            self._verts3d = (self.get_xdata(), self.get_ydata(), np.zeros_like(self.get_xdata()))\n         xs3d, ys3d, zs3d = self._verts3d\n+        xs3d = np.asarray(xs3d)\n+        ys3d = np.asarray(ys3d)\n+        zs3d = np.asarray(zs3d)\n+        if xs3d.size == 1:\n+            xs3d = np.array([xs3d, xs3d])\n+            ys3d = np.array([ys3d, ys3d])\n+            zs3d = np.array([zs3d, zs3d])\n+        self._verts3d = (xs3d, ys3d, zs3d)\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n", "normalized_occurrence": 1}
