{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex ab763da..7e2cf07 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1432,13 +1432,16 @@ class Derivative(Expr):\n         # we return here if evaluate is False or if there is no\n         # _eval_derivative method\n         if not evaluate or not hasattr(expr, '_eval_derivative'):\n+            from sympy.core.kind import get_kind\n             # return an unevaluated Derivative\n             if evaluate and variable_count == [(expr, 1)] and expr.is_scalar:\n                 # special hack providing evaluation for classes\n                 # that have defined is_scalar=True but have no\n                 # _eval_derivative defined\n                 return S.One\n-            return Expr.__new__(cls, expr, *variable_count)\n+            obj = Expr.__new__(cls, expr, *variable_count)\n+            obj._kind = get_kind(expr)\n+            return obj\n \n         # evaluate the derivative by calling _eval_derivative method\n         # of expr for each variable\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 96e033b..be19d54 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -549,9 +549,12 @@ class Derivative(Expr):\n             expr = expr.expr\n             return _derivative_dispatch(expr, *variable_count, **kwargs)\n         if not evaluate or not hasattr(expr, '_eval_derivative'):\n+            from sympy.core.kind import get_kind\n             if evaluate and variable_count == [(expr, 1)] and expr.is_scalar:\n                 return S.One\n-            return Expr.__new__(cls, expr, *variable_count)\n+            obj = Expr.__new__(cls, expr, *variable_count)\n+            obj._kind = get_kind(expr)\n+            return obj\n         nderivs = 0\n         unhandled = []\n         for i, (v, count) in enumerate(variable_count):\n", "normalized_occurrence": 1}
