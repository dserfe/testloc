{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 632624f..56a3414 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -768,6 +768,11 @@ def nthroot_mod(a, n, p, all_roots=False):\n     \"\"\"\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n+    # Check if a ≡ 0 (mod p), in which case x ≡ 0 (mod p) is a root\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        return 0\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex abeb252..17dcee3 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -456,6 +456,10 @@ def _nthroot_mod1(s, q, p, all_roots):\n def nthroot_mod(a, n, p, all_roots=False):\n     from sympy.core.numbers import igcdex\n     a, n, p = (as_int(a), as_int(n), as_int(p))\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        return 0\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n     if not is_nthpow_residue(a, n, p):\n", "normalized_occurrence": 27}
