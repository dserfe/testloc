{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..d4fe0b8 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -135,6 +135,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = x, y\n         self._text = ''\n+        self._antialiased = None  # Use rcParams by default\n         self._reset_visual_defaults(\n             text=text,\n             color=color,\n@@ -738,6 +739,12 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            # Use instance antialiasing setting if set, otherwise use rcParams\n+            aa = self.get_antialiased()\n+            if aa is not None:\n+                gc.set_antialiased(aa)\n+            else:\n+                gc.set_antialiased(mpl.rcParams['text.antialiased'])\n \n             angle = self.get_rotation()\n \n@@ -872,6 +879,30 @@ class Text(Artist):\n     def get_text(self):\n         \"\"\"Return the text string.\"\"\"\n         return self._text\n+        \n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text should be antialiased.\n+\n+        Returns None if using the global rcParam setting.\n+        \"\"\"\n+        return self._antialiased\n+        \n+    def set_antialiased(self, aa):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        aa : bool or None\n+            If True, the text will be antialiased.\n+            If False, the text will not be antialiased.\n+            If None, use the global rcParams['text.antialiased'] setting.\n+        \"\"\"\n+        if aa is not None:\n+            aa = bool(aa)\n+        self._antialiased = aa\n+        self.stale = True\n \n     def get_verticalalignment(self):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..ecd6ed9 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -45,6 +45,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n+        self._antialiased = None\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n@@ -371,6 +372,11 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            aa = self.get_antialiased()\n+            if aa is not None:\n+                gc.set_antialiased(aa)\n+            else:\n+                gc.set_antialiased(mpl.rcParams['text.antialiased'])\n             angle = self.get_rotation()\n             for line, wh, x, y in info:\n                 mtext = self if len(info) == 1 else None\n@@ -419,6 +425,13 @@ class Text(Artist):\n         return (self._x, self._y)\n     def get_text(self):\n         return self._text\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, aa):\n+        if aa is not None:\n+            aa = bool(aa)\n+        self._antialiased = aa\n+        self.stale = True\n     def get_verticalalignment(self):\n         return self._verticalalignment\n     def get_window_extent(self, renderer=None, dpi=None):\n", "normalized_occurrence": 1}
