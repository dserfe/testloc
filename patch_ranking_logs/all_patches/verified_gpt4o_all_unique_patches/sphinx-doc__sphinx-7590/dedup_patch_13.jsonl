{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..6995377 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -788,6 +788,20 @@ class ASTExpression(ASTBase):\n class ASTLiteral(ASTExpression):\n     pass\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, suffix: str) -> None:\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.suffix\n+\n+    def get_id(self, version: int) -> str:\n+        return 'L' + self.suffix\n+\n+    def describe_signature(self, signode: TextElement, mode: str) -> None:\n+        signode += addnodes.desc_name(self.suffix, self.suffix)\n+    pass\n+\n \n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n@@ -4682,7 +4696,12 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined-literal\n+        pos = self.pos\n+        if self.match(user_defined_literal_re):\n+            suffix = self.matched_text\n+            self.pos = pos + len(suffix)\n+            return ASTUserDefinedLiteral(suffix)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..964e321 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -221,6 +221,16 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n class ASTLiteral(ASTExpression):\n     pass\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, suffix: str) -> None:\n+        self.suffix = suffix\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.suffix\n+    def get_id(self, version: int) -> str:\n+        return 'L' + self.suffix\n+    def describe_signature(self, signode: TextElement, mode: str) -> None:\n+        signode += addnodes.desc_name(self.suffix, self.suffix)\n+    pass\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -3074,6 +3084,11 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        if self.match(user_defined_literal_re):\n+            suffix = self.matched_text\n+            self.pos = pos + len(suffix)\n+            return ASTUserDefinedLiteral(suffix)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
