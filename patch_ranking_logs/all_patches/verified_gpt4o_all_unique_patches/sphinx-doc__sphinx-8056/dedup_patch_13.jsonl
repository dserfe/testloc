{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..32dbf19 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1083,6 +1083,8 @@ class NumpyDocstring(GoogleDocstring):\n         func = super()._escape_args_and_kwargs\n \n         if \", \" in name:\n+            parts = name.split(\", \")\n+            return \", \".join(func(part) for part in parts)\n             return \", \".join(func(param) for param in name.split(\", \"))\n         else:\n             return func(name)\n@@ -1096,6 +1098,10 @@ class NumpyDocstring(GoogleDocstring):\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n         _name = self._escape_args_and_kwargs(_name)\n+        if \"optional\" in _type:\n+            _type = _type.replace(\"optional\", \"optional)\")\n+            if \"(\" not in _type:\n+                _type = f\"({_type}\"\n         _type = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..2f7037e 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -655,6 +655,8 @@ class NumpyDocstring(GoogleDocstring):\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n         if ', ' in name:\n+            parts = name.split(', ')\n+            return ', '.join((func(part) for part in parts))\n             return ', '.join((func(param) for param in name.split(', ')))\n         else:\n             return func(name)\n@@ -666,6 +668,10 @@ class NumpyDocstring(GoogleDocstring):\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n         _name = self._escape_args_and_kwargs(_name)\n+        if 'optional' in _type:\n+            _type = _type.replace('optional', 'optional)')\n+            if '(' not in _type:\n+                _type = f'({_type}'\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n", "normalized_occurrence": 1}
