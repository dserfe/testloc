{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..ebd59b1 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,12 +130,22 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only valid in certain Python versions.\n+        Defaults to False.\n+\n+    **Module-level skip example**::\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # The rest of the module will be skipped in Python < 3.8\n+        from python38_syntax_module import *\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where the module can be fully parsed, using the\n+        :ref:`pytest.mark.skipif ref` marker with ``pytestmark`` is preferred.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..e2df5bb 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,12 +88,22 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only valid in certain Python versions.\n+        Defaults to False.\n+\n+    **Module-level skip example**::\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # The rest of the module will be skipped in Python < 3.8\n+        from python38_syntax_module import *\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where the module can be fully parsed, using the\n+        :ref:`pytest.mark.skipif ref` marker with ``pytestmark`` is preferred.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "normalized_occurrence": 1}
