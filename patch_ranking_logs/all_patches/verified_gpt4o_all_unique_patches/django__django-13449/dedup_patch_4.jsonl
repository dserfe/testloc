{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..1d2a9e1 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -24,7 +24,11 @@ class SQLiteNumericMixin:\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                # Add logic to handle window functions like LAG/LEAD with DecimalField\n+                if 'OVER' in sql:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql.replace(' AS NUMERIC', '')\n+                else:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n         except FieldError:\n             pass\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..bd4dd27 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -17,7 +17,10 @@ class SQLiteNumericMixin:\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                if 'OVER' in sql:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql.replace(' AS NUMERIC', '')\n+                else:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n         except FieldError:\n             pass\n         return (sql, params)\n", "normalized_occurrence": 1}
