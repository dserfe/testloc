{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 609c102..1cc33fc 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -298,7 +298,10 @@ class Nominal(Scale):\n \n         formatter = mpl.category.StrCategoryFormatter({})\n \n-        return formatter\n+        if return_offset:\n+            return formatter, formatter.get_offset()\n+        else:\n+            return formatter\n \n \n @dataclass\n@@ -612,7 +615,7 @@ class Continuous(ContinuousBase):\n \n         return major_locator, minor_locator\n \n-    def _get_formatter(self, locator, formatter, like, base, unit):\n+    def _get_formatter(self, locator, formatter, like, base, unit, return_offset=False):\n \n         log_base, symlog_thresh = self._parse_for_log_params(self.trans)\n         if base is default:\n@@ -649,7 +652,10 @@ class Continuous(ContinuousBase):\n         else:\n             formatter = ScalarFormatter()\n \n-        return formatter\n+        if return_offset:\n+            return formatter, formatter.get_offset()\n+        else:\n+            return formatter\n \n \n @dataclass\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex ff6da17..bcf70fd 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -130,7 +130,10 @@ class Nominal(Scale):\n         if formatter is not None:\n             return formatter\n         formatter = mpl.category.StrCategoryFormatter({})\n-        return formatter\n+        if return_offset:\n+            return (formatter, formatter.get_offset())\n+        else:\n+            return formatter\n @dataclass\n class Ordinal(Scale):\n     ...\n@@ -289,7 +292,7 @@ class Continuous(ContinuousBase):\n         else:\n             minor_locator = AutoMinorLocator(minor + 1)\n         return (major_locator, minor_locator)\n-    def _get_formatter(self, locator, formatter, like, base, unit):\n+    def _get_formatter(self, locator, formatter, like, base, unit, return_offset=False):\n         log_base, symlog_thresh = self._parse_for_log_params(self.trans)\n         if base is default:\n             if symlog_thresh:\n@@ -318,7 +321,10 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n         else:\n             formatter = ScalarFormatter()\n-        return formatter\n+        if return_offset:\n+            return (formatter, formatter.get_offset())\n+        else:\n+            return formatter\n @dataclass\n class Temporal(ContinuousBase):\n     trans = None\n", "normalized_occurrence": 1}
