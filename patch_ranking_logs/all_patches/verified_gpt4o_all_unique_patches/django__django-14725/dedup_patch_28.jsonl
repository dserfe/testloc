{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..c882f55 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -574,6 +574,7 @@ class BaseModelFormSet(BaseFormSet):\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  queryset=None, *, initial=None, **kwargs):\n+        self.allow_new_objects = kwargs.pop('allow_new_objects', True) # Added this line\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -813,17 +814,18 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            # If someone has marked an add form for deletion, don't save the\n-            # object.\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n-        return self.new_objects\n+        if self.allow_new_objects:\n+            for form in self.extra_forms:\n+                if not form.has_changed():\n+                    continue\n+                # If someone has marked an add form for deletion, don't save the\n+                # object.\n+                if self.can_delete and self._should_delete_form(form):\n+                    continue\n+                self.new_objects.append(self.save_new(form, commit=commit))\n+                if not commit:\n+                    self.saved_forms.append(form)\n+        return self.new_objects if self.allow_new_objects else []\n \n     def add_fields(self, form, index):\n         \"\"\"Add a hidden field for the object's primary key.\"\"\"\n@@ -875,7 +877,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None, allow_new_objects=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..c6af808 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -274,6 +274,7 @@ class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n+        self.allow_new_objects = kwargs.pop('allow_new_objects', True)\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -418,15 +419,16 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n-        return self.new_objects\n+        if self.allow_new_objects:\n+            for form in self.extra_forms:\n+                if not form.has_changed():\n+                    continue\n+                if self.can_delete and self._should_delete_form(form):\n+                    continue\n+                self.new_objects.append(self.save_new(form, commit=commit))\n+                if not commit:\n+                    self.saved_forms.append(form)\n+        return self.new_objects if self.allow_new_objects else []\n     def add_fields(self, form, index):\n         from django.db.models import AutoField, ForeignKey, OneToOneField\n         self._pk_field = pk = self.model._meta.pk\n@@ -454,7 +456,7 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, allow_new_objects=True):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n", "normalized_occurrence": 1}
