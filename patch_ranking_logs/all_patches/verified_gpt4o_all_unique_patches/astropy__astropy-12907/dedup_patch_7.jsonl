{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..4645cef 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -304,9 +304,14 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        sepleft_matrix = _separable(transform.left)\n+        sepright_matrix = _separable(transform.right)\n+        left_sep = np.all(sepleft_matrix, axis=0)\n+        right_sep = np.all(sepright_matrix, axis=0)\n+        combined_matrix = np.zeros((transform.n_outputs, transform.n_inputs), dtype=bool)\n+        combined_matrix[:sepleft_matrix.shape[0], :left_sep.shape[0]] = sepleft_matrix\n+        combined_matrix[sepleft_matrix.shape[0]:, left_sep.shape[0]:] = sepright_matrix\n+        return combined_matrix\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..87d6914 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -99,9 +99,14 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        sepleft_matrix = _separable(transform.left)\n+        sepright_matrix = _separable(transform.right)\n+        left_sep = np.all(sepleft_matrix, axis=0)\n+        right_sep = np.all(sepright_matrix, axis=0)\n+        combined_matrix = np.zeros((transform.n_outputs, transform.n_inputs), dtype=bool)\n+        combined_matrix[:sepleft_matrix.shape[0], :left_sep.shape[0]] = sepleft_matrix\n+        combined_matrix[sepleft_matrix.shape[0]:, left_sep.shape[0]:] = sepright_matrix\n+        return combined_matrix\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper, '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
