{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12284", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..fbbc226 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,7 +945,10 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        # Get choices from the model's attribute if available, otherwise fall back to field.choices\n+        model_choices = getattr(self.__class__, field.name + '_choice', None)\n+        choices = model_choices if model_choices is not None else field.choices\n+        choices_dict = dict(make_hashable(choices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..410baa4 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -502,7 +502,9 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        model_choices = getattr(self.__class__, field.name + '_choice', None)\n+        choices = model_choices if model_choices is not None else field.choices\n+        choices_dict = dict(make_hashable(choices))\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n         if not self.pk:\n", "normalized_occurrence": 1}
