{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19040", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 39972e2..7f85ca9 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -1149,18 +1149,16 @@ def dmp_ext_factor(f, u, K):\n     f, F = dmp_sqf_part(f, u, K), f\n     s, g, r = dmp_sqf_norm(f, u, K)\n \n-    factors = dmp_factor_list_include(r, u, K.dom)\n+    r_factors = dmp_factor_list_include(r, u, K.dom)\n+    factors = []\n \n-    if len(factors) == 1:\n-        factors = [f]\n-    else:\n-        H = dmp_raise([K.one, s*K.unit], u, 0, K)\n+    H = dmp_raise([K.one, s*K.unit], u, 0, K)\n \n-        for i, (factor, _) in enumerate(factors):\n-            h = dmp_convert(factor, u, K.dom, K)\n-            h, _, g = dmp_inner_gcd(h, g, u, K)\n-            h = dmp_compose(h, H, u, K)\n-            factors[i] = h\n+    for i, (factor, _) in enumerate(r_factors):\n+        h = dmp_convert(factor, u, K.dom, K)\n+        h, _, g = dmp_inner_gcd(h, g, u, K)\n+        h = dmp_compose(h, H, u, K)\n+        factors.append(h)\n \n     return lc, dmp_trial_division(F, factors, u, K)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 0bd3920..fe792b1 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -584,16 +584,14 @@ def dmp_ext_factor(f, u, K):\n         return (lc, [])\n     f, F = (dmp_sqf_part(f, u, K), f)\n     s, g, r = dmp_sqf_norm(f, u, K)\n-    factors = dmp_factor_list_include(r, u, K.dom)\n-    if len(factors) == 1:\n-        factors = [f]\n-    else:\n-        H = dmp_raise([K.one, s * K.unit], u, 0, K)\n-        for i, (factor, _) in enumerate(factors):\n-            h = dmp_convert(factor, u, K.dom, K)\n-            h, _, g = dmp_inner_gcd(h, g, u, K)\n-            h = dmp_compose(h, H, u, K)\n-            factors[i] = h\n+    r_factors = dmp_factor_list_include(r, u, K.dom)\n+    factors = []\n+    H = dmp_raise([K.one, s * K.unit], u, 0, K)\n+    for i, (factor, _) in enumerate(r_factors):\n+        h = dmp_convert(factor, u, K.dom, K)\n+        h, _, g = dmp_inner_gcd(h, g, u, K)\n+        h = dmp_compose(h, H, u, K)\n+        factors.append(h)\n     return (lc, dmp_trial_division(F, factors, u, K))\n def dup_gf_factor(f, K):\n     f = dup_convert(f, K, K.dom)\n", "normalized_occurrence": 1}
