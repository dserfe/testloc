{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..9f87d59 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -367,7 +367,8 @@ class Node(metaclass=NodeMeta):\n         except OSError:\n             abspath = True\n \n-        return excinfo.getrepr(\n+        # Adjust the traceback path to be relative to the original directory\n+        repr_traceback = excinfo.getrepr(\n             funcargs=True,\n             abspath=abspath,\n             showlocals=self.config.getoption(\"showlocals\", False),\n@@ -375,6 +376,11 @@ class Node(metaclass=NodeMeta):\n             tbfilter=False,  # pruned already, or in --fulltrace mode.\n             truncate_locals=truncate_locals,\n         )\n+        if hasattr(repr_traceback, 'reprtraceback'):\n+            for entry in repr_traceback.reprtraceback.reprentries:\n+                if entry.reprfileloc:\n+                    entry.reprfileloc.path = os.path.relpath(entry.reprfileloc.path, start=self.config.invocation_dir)\n+        return repr_traceback\n \n     def repr_failure(\n         self, excinfo, style=None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..7180040 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -294,7 +294,12 @@ class Node(metaclass=NodeMeta):\n             abspath = False\n         except OSError:\n             abspath = True\n-        return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        repr_traceback = excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        if hasattr(repr_traceback, 'reprtraceback'):\n+            for entry in repr_traceback.reprtraceback.reprentries:\n+                if entry.reprfileloc:\n+                    entry.reprfileloc.path = os.path.relpath(entry.reprfileloc.path, start=self.config.invocation_dir)\n+        return repr_traceback\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n         \"\"\"\n", "normalized_occurrence": 1}
