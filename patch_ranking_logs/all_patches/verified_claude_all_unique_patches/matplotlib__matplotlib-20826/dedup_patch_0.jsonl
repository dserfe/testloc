{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..007beb1 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1191,6 +1191,10 @@ class _AxesBase(martist.Artist):\n \n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        # Save tick label visibility states\n+        x_ticklabels_visible = self.xaxis.get_ticklabels(minor=False)[0].get_visible() if self.xaxis.get_ticklabels() else True\n+        y_ticklabels_visible = self.yaxis.get_ticklabels(minor=False)[0].get_visible() if self.yaxis.get_ticklabels() else True\n+        yaxis_visible = self.yaxis.get_visible()\n \n         self.xaxis.clear()\n         self.yaxis.clear()\n@@ -1305,9 +1309,15 @@ class _AxesBase(martist.Artist):\n         if self._sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Restore x-axis tick label visibility\n+            for label in self.xaxis.get_ticklabels(minor=False):\n+                label.set_visible(x_ticklabels_visible)\n         if self._sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Restore y-axis tick label visibility\n+            for label in self.yaxis.get_ticklabels(minor=False):\n+                label.set_visible(y_ticklabels_visible)\n \n         self.stale = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 33a6de3..79e2e31 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -503,6 +503,9 @@ class _AxesBase(martist.Artist):\n             patch_visible = True\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        x_ticklabels_visible = self.xaxis.get_ticklabels(minor=False)[0].get_visible() if self.xaxis.get_ticklabels() else True\n+        y_ticklabels_visible = self.yaxis.get_ticklabels(minor=False)[0].get_visible() if self.yaxis.get_ticklabels() else True\n+        yaxis_visible = self.yaxis.get_visible()\n         self.xaxis.clear()\n         self.yaxis.clear()\n         for name, spine in self.spines.items():\n@@ -578,9 +581,13 @@ class _AxesBase(martist.Artist):\n         if self._sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            for label in self.xaxis.get_ticklabels(minor=False):\n+                label.set_visible(x_ticklabels_visible)\n         if self._sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            for label in self.yaxis.get_ticklabels(minor=False):\n+                label.set_visible(y_ticklabels_visible)\n         self.stale = True\n     class ArtistList(MutableSequence):\n         def __init__(self, axes, prop_name, add_name, valid_types=None, invalid_types=None):\n", "normalized_occurrence": 1}
