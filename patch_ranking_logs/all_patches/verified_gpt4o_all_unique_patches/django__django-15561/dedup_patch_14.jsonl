{"model_name_or_path": "agentless", "instance_id": "django__django-15561", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 86692c3..9416293 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -121,7 +121,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             super().alter_db_table(model, old_db_table, new_db_table)\n \n     def alter_field(self, model, old_field, new_field, strict=False):\n-        if not self._field_should_be_altered(old_field, new_field):\n+        if not self._field_should_be_altered(old_field, new_field) or self._no_op_field_change(old_field, new_field):\n             return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\n@@ -173,6 +173,21 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             super().alter_field(model, old_field, new_field, strict=strict)\n \n+    def _no_op_field_change(self, old_field, new_field):\n+        # Check for changes that are no-op for the database schema\n+        return (\n+            old_field.__class__ == new_field.__class__ and\n+            old_field.null == new_field.null and\n+            old_field.primary_key == new_field.primary_key and\n+            old_field.max_length == new_field.max_length and\n+            old_field.db_index == new_field.db_index and\n+            old_field.unique == new_field.unique and\n+            old_field.decimal_places == new_field.decimal_places and\n+            old_field.default == new_field.default and\n+            old_field.rel == new_field.rel and\n+            old_field.choices != new_field.choices\n+        )\n+\n     def _remake_table(\n         self, model, create_field=None, delete_field=None, alter_field=None\n     ):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 9a783c9..3a286bd 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -65,7 +65,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             super().alter_db_table(model, old_db_table, new_db_table)\n     def alter_field(self, model, old_field, new_field, strict=False):\n-        if not self._field_should_be_altered(old_field, new_field):\n+        if not self._field_should_be_altered(old_field, new_field) or self._no_op_field_change(old_field, new_field):\n             return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\n@@ -90,6 +90,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 cursor.execute('VACUUM')\n         else:\n             super().alter_field(model, old_field, new_field, strict=strict)\n+    def _no_op_field_change(self, old_field, new_field):\n+        return old_field.__class__ == new_field.__class__ and old_field.null == new_field.null and (old_field.primary_key == new_field.primary_key) and (old_field.max_length == new_field.max_length) and (old_field.db_index == new_field.db_index) and (old_field.unique == new_field.unique) and (old_field.decimal_places == new_field.decimal_places) and (old_field.default == new_field.default) and (old_field.rel == new_field.rel) and (old_field.choices != new_field.choices)\n     def _remake_table(self, model, create_field=None, delete_field=None, alter_field=None):\n         def is_self_referential(f):\n             return f.is_relation and f.remote_field.model is model\n", "normalized_occurrence": 1}
