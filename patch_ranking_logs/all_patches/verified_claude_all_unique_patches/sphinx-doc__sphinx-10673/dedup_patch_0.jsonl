{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 52ac0d3..0660d42 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -174,6 +174,17 @@ class TocTree:\n \n                     logger.warning(message, ref, location=toctreenode)\n                 else:\n+                    # Handle special Sphinx pages\n+                    if ref in ('genindex', 'modindex', 'search'):\n+                        if title is None:\n+                            title = ref\n+                        reference = nodes.reference('', '', internal=True,\n+                                                refuri=ref,\n+                                                anchorname='',\n+                                                *[nodes.Text(title)])\n+                        para = addnodes.compact_paragraph('', '', reference)\n+                        item = nodes.list_item('', para)\n+                        toc = nodes.bullet_list('', item)\n                     # if titles_only is given, only keep the main title and\n                     # sub-toctrees\n                     if titles_only:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 07fcee3..45deaec 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -94,6 +94,13 @@ class TocTree:\n                         message = __('toctree contains reference to nonexisting document %r')\n                     logger.warning(message, ref, location=toctreenode)\n                 else:\n+                    if ref in ('genindex', 'modindex', 'search'):\n+                        if title is None:\n+                            title = ref\n+                        reference = nodes.reference('', '', *[nodes.Text(title)], internal=True, refuri=ref, anchorname='')\n+                        para = addnodes.compact_paragraph('', '', reference)\n+                        item = nodes.list_item('', para)\n+                        toc = nodes.bullet_list('', item)\n                     if titles_only:\n                         children = cast(Iterable[nodes.Element], toc)\n                         for toplevel in children:\n", "normalized_occurrence": 1}
