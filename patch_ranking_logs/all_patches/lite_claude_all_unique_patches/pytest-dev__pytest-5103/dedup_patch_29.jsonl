{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..ea0d513 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,68 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self.generic_visit(call)\n+            \n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Unroll into a for loop\n+                iter_var = self.variable()  # for the iterable result\n+                result_var = self.variable()  # for the final result\n+                \n+                # First evaluate and store the iterable\n+                iterable = arg.generators[0].iter\n+                iter_val, _ = self.visit(iterable)\n+                self.statements.append(\n+                    ast.Assign([ast.Name(iter_var, ast.Store())], iter_val)\n+                )\n+                \n+                # Initialize result\n+                self.statements.append(\n+                    ast.Assign(\n+                        [ast.Name(result_var, ast.Store())], \n+                        ast.NameConstant(call.func.id == 'all')\n+                    )\n+                )\n+                \n+                # Create the loop\n+                target = arg.generators[0].target\n+                elt = arg.elt\n+                \n+                # Build loop body\n+                test_result, _ = self.visit(elt)\n+                if call.func.id == 'all':\n+                    test = ast.If(\n+                        ast.UnaryOp(ast.Not(), test_result),\n+                        [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(False)),\n+                         ast.Break()],\n+                        []\n+                    )\n+                else:  # any\n+                    test = ast.If(\n+                        test_result,\n+                        [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)),\n+                         ast.Break()],\n+                        []\n+                    )\n+                \n+                loop = ast.For(\n+                    target,\n+                    ast.Name(iter_var, ast.Load()),\n+                    [test],\n+                    []\n+                )\n+                \n+                self.statements.append(loop)\n+                \n+                return ast.Name(result_var, ast.Load()), \"all/any evaluation\"\n+        \n+        # Default handling for other calls\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -1081,4 +1143,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..7b481cd 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,31 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) != 1:\n+                return self.generic_visit(call)\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                iter_var = self.variable()\n+                result_var = self.variable()\n+                iterable = arg.generators[0].iter\n+                iter_val, _ = self.visit(iterable)\n+                self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], iter_val))\n+                self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(call.func.id == 'all')))\n+                target = arg.generators[0].target\n+                elt = arg.elt\n+                test_result, _ = self.visit(elt)\n+                if call.func.id == 'all':\n+                    test = ast.If(ast.UnaryOp(ast.Not(), test_result), [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(False)), ast.Break()], [])\n+                else:\n+                    test = ast.If(test_result, [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)), ast.Break()], [])\n+                loop = ast.For(target, ast.Name(iter_var, ast.Load()), [test], [])\n+                self.statements.append(loop)\n+                return (ast.Name(result_var, ast.Load()), 'all/any evaluation')\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
