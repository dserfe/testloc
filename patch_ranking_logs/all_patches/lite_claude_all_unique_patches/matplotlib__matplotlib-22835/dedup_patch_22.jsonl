{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 1878dd6..8e0315b 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1903,13 +1903,33 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Approximate inverse of normalization.\n+        \n+        Parameters\n+        ----------\n+        value : array-like\n+            The normalized values between 0 and 1.\n+            \n+        Returns\n+        -------\n+        array-like\n+            The approximate data value for each normalized value.\n+            For values corresponding to a bin, returns the center of the bin.\n         \"\"\"\n-        raise ValueError(\"BoundaryNorm is not invertible\")\n+        # Convert from [0, 1] to bin indices\n+        x = value * (self._n_regions - 1)\n+        x = np.asanyarray(x)\n+        \n+        # Get left edge of each bin\n+        bins = np.asanyarray(self.boundaries[:-1])\n+        # Get width of each bin\n+        widths = np.diff(self.boundaries)\n+        \n+        # Convert to indices accounting for out-of-bounds\n+        indices = np.clip(x.astype(int), 0, len(bins) - 1)\n+        \n+        # Return center point of each bin\n+        return bins[indices] + widths[indices] / 2\n \n \n class NoNorm(Normalize):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b4a7c6b..c5d2f5d 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1631,13 +1631,25 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Approximate inverse of normalization.\n+        \n+        Parameters\n+        ----------\n+        value : array-like\n+            The normalized values between 0 and 1.\n+            \n+        Returns\n+        -------\n+        array-like\n+            The approximate data value for each normalized value.\n+            For values corresponding to a bin, returns the center of the bin.\n         \"\"\"\n-        raise ValueError('BoundaryNorm is not invertible')\n+        x = value * (self._n_regions - 1)\n+        x = np.asanyarray(x)\n+        bins = np.asanyarray(self.boundaries[:-1])\n+        widths = np.diff(self.boundaries)\n+        indices = np.clip(x.astype(int), 0, len(bins) - 1)\n+        return bins[indices] + widths[indices] / 2\n \n class NoNorm(Normalize):\n     \"\"\"\n", "normalized_occurrence": 1}
