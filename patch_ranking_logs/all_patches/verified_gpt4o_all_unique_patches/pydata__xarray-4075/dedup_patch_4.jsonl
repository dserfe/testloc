{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4075", "model_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 8119fa7..7d155f6 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,9 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Convert boolean weights to integer\n+        weights_converted = self.weights.astype(float) if self.weights.dtype == bool else self.weights\n+        sum_of_weights = self._reduce(mask, weights_converted, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n@@ -157,7 +159,9 @@ class Weighted:\n     ) -> \"DataArray\":\n         \"\"\"Reduce a DataArray by a by a weighted ``sum`` along some dimension(s).\"\"\"\n \n-        return self._reduce(da, self.weights, dim=dim, skipna=skipna)\n+        # Convert boolean weights to integer\n+        weights_converted = self.weights.astype(float) if self.weights.dtype == bool else self.weights\n+        return self._reduce(da, weights_converted, dim=dim, skipna=skipna)\n \n     def _weighted_mean(\n         self,\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 7df2f5a..16ba574 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -30,11 +30,13 @@ class Weighted:\n         return dot(da, weights, dims=dim)\n     def _sum_of_weights(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None) -> 'DataArray':\n         mask = da.notnull()\n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        weights_converted = self.weights.astype(float) if self.weights.dtype == bool else self.weights\n+        sum_of_weights = self._reduce(mask, weights_converted, dim=dim, skipna=False)\n         valid_weights = sum_of_weights != 0.0\n         return sum_of_weights.where(valid_weights)\n     def _weighted_sum(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None, skipna: Optional[bool]=None) -> 'DataArray':\n-        return self._reduce(da, self.weights, dim=dim, skipna=skipna)\n+        weights_converted = self.weights.astype(float) if self.weights.dtype == bool else self.weights\n+        return self._reduce(da, weights_converted, dim=dim, skipna=skipna)\n     def _weighted_mean(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None, skipna: Optional[bool]=None) -> 'DataArray':\n         weighted_sum = self._weighted_sum(da, dim=dim, skipna=skipna)\n         sum_of_weights = self._sum_of_weights(da, dim=dim)\n", "normalized_occurrence": 1}
