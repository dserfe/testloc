{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13328", "model_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 774a22b..6c95666 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -251,7 +251,8 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         self : object\n         \"\"\"\n         X, y = check_X_y(\n-            X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+            X, y, copy=False, accept_sparse=['csr'], y_numeric=True,\n+            dtype=np.float64)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n@@ -303,4 +304,4 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         residual = np.abs(\n             y - safe_sparse_dot(X, self.coef_) - self.intercept_)\n         self.outliers_ = residual > self.scale_ * self.epsilon\n-        return self\n+        return self\n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 81acf45..f19849d 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -60,7 +60,7 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         self.fit_intercept = fit_intercept\n         self.tol = tol\n     def fit(self, X, y, sample_weight=None):\n-        X, y = check_X_y(X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+        X, y = check_X_y(X, y, copy=False, accept_sparse=['csr'], y_numeric=True, dtype=np.float64)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n", "normalized_occurrence": 26}
