{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 1225939..42e83b7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -34,7 +34,7 @@ from sphinx.util import inspect, logging\n from sphinx.util.docstrings import extract_metadata, prepare_docstring\n from sphinx.util.inspect import (evaluate_signature, getdoc, object_description, safe_getattr,\n                                  stringify_signature)\n-from sphinx.util.typing import get_type_hints, restify\n+from sphinx.util.typing import get_type_hints, restify, stringify\n from sphinx.util.typing import stringify as stringify_typehint\n \n if False:\n@@ -47,8 +47,11 @@ if False:\n logger = logging.getLogger(__name__)\n \n \n-# This type isn't exposed directly in any modules, but can be found\n-# here in most Python versions\n+# Special handling for certain built-in types\n+builtin_resolve_map = {\n+    'struct.Struct': 'struct.Struct'\n+}\n+\n MethodDescriptorType = type(type.__subclasses__)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cb042da..d8f23a4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -16,12 +16,13 @@ from sphinx.pycode import ModuleAnalyzer, PycodeError\n from sphinx.util import inspect, logging\n from sphinx.util.docstrings import extract_metadata, prepare_docstring\n from sphinx.util.inspect import evaluate_signature, getdoc, object_description, safe_getattr, stringify_signature\n-from sphinx.util.typing import get_type_hints, restify\n+from sphinx.util.typing import get_type_hints, restify, stringify\n from sphinx.util.typing import stringify as stringify_typehint\n if False:\n     from typing import Type\n     from sphinx.ext.autodoc.directive import DocumenterBridge\n logger = logging.getLogger(__name__)\n+builtin_resolve_map = {'struct.Struct': 'struct.Struct'}\n MethodDescriptorType = type(type.__subclasses__)\n py_ext_sig_re = re.compile('^ ([\\\\w.]+::)?            # explicit module name\\n          ([\\\\w.]+\\\\.)?            # module and/or class name(s)\\n          (\\\\w+)  \\\\s*             # thing name\\n          (?: \\\\((.*)\\\\)           # optional: arguments\\n           (?:\\\\s* -> \\\\s* (.*))?  #           return annotation\\n          )? $                   # and nothing more\\n          ', re.VERBOSE)\n special_member_re = re.compile('^__\\\\S+__$')\n", "normalized_occurrence": 1}
