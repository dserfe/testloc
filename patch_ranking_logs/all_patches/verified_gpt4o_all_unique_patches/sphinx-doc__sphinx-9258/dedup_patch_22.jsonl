{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..eda387c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -83,6 +83,8 @@ def insert_field_list(node: Element) -> nodes.field_list:\n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n+    # Adjust annotations to support union type using '|'\n+    updated_annotations = {k: v.replace('|', ' or ') for k, v in annotations.items()}\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n@@ -132,6 +134,8 @@ def augment_descriptions_with_types(\n     annotations: Dict[str, str],\n ) -> None:\n     fields = cast(Iterable[nodes.field], node)\n+    # Adjust annotations to support union type using '|'\n+    updated_annotations = {k: v.replace('|', ' or ') for k, v in annotations.items()}\n     has_description = set()  # type: Set[str]\n     has_type = set()  # type: Set[str]\n     for field in fields:\n@@ -161,7 +165,7 @@ def augment_descriptions_with_types(\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', updated_annotations[name]))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n@@ -169,7 +173,7 @@ def augment_descriptions_with_types(\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            field += nodes.field_body('', nodes.paragraph('', updated_annotations['return']))\n             node += field\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..91198d0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -55,6 +55,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n+    updated_annotations = {k: v.replace('|', ' or ') for k, v in annotations.items()}\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n@@ -94,6 +95,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n     fields = cast(Iterable[nodes.field], node)\n+    updated_annotations = {k: v.replace('|', ' or ') for k, v in annotations.items()}\n     has_description = set()\n     has_type = set()\n     for field in fields:\n@@ -119,13 +121,13 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_body('', nodes.paragraph('', updated_annotations[name]))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            field += nodes.field_body('', nodes.paragraph('', updated_annotations['return']))\n             node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n", "normalized_occurrence": 1}
