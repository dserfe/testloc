{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..3901c6e 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -171,17 +171,18 @@ class UnitSystem(_QuantityMapper):\n                 exp_dim = 1\n             return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n         elif isinstance(expr, Add):\n-            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n-            for addend in expr.args[1:]:\n-                addend_factor, addend_dim = \\\n-                    self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+            factor = 0\n+            common_dim = None\n+            for addend in expr.args:\n+                addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n+                if common_dim is None:\n+                    common_dim = addend_dim\n+                elif common_dim != addend_dim:\n                     raise ValueError(\n-                        'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n-                            addend, addend_dim, dim))\n+                        'Incompatible dimensions: \"{}\" has dimension {}, '\n+                        'but it should be {}'.format(addend, addend_dim, common_dim))\n                 factor += addend_factor\n-            return factor, dim\n+            return factor, common_dim\n         elif isinstance(expr, Derivative):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for independent, count in expr.variable_count:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 212532e..484b3e5 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -101,13 +101,16 @@ class UnitSystem(_QuantityMapper):\n                 exp_dim = 1\n             return (factor ** exp_factor, dim ** (exp_factor * exp_dim))\n         elif isinstance(expr, Add):\n-            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n-            for addend in expr.args[1:]:\n+            factor = 0\n+            common_dim = None\n+            for addend in expr.args:\n                 addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n-                    raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n+                if common_dim is None:\n+                    common_dim = addend_dim\n+                elif common_dim != addend_dim:\n+                    raise ValueError('Incompatible dimensions: \"{}\" has dimension {}, but it should be {}'.format(addend, addend_dim, common_dim))\n                 factor += addend_factor\n-            return (factor, dim)\n+            return (factor, common_dim)\n         elif isinstance(expr, Derivative):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for independent, count in expr.variable_count:\n", "normalized_occurrence": 1}
