{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cd0e9c6..34fe4f4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1266,7 +1266,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=kwargs.get('show_annotation', True),\n+                                        show_return_annotation=kwargs.get('show_return_annotation', True))\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n@@ -1914,7 +1915,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                                               name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=kwargs.get('show_annotation', True),\n+                                        show_return_annotation=kwargs.get('show_return_annotation', True))\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex be7144a..36c6c54 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -701,7 +701,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=kwargs.get('show_annotation', True), show_return_annotation=kwargs.get('show_return_annotation', True))\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n@@ -1100,7 +1100,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n                 if not inspect.isstaticmethod(self.object, cls=self.parent, name=self.object_name):\n                     parameters = list(overload.parameters.values())\n                     overload = overload.replace(parameters=parameters[1:])\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=kwargs.get('show_annotation', True), show_return_annotation=kwargs.get('show_return_annotation', True))\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n", "normalized_occurrence": 2}
