{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..6b69427 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,12 +178,25 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n+            result = {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n             }\n \n+            # Handle chained exceptions\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for excinfo in rep.longrepr.chain:\n+                    chain.append({\n+                        \"reprtraceback\": excinfo.reprtraceback.__dict__.copy(),\n+                        \"reprcrash\": excinfo.reprcrash.__dict__.copy(),\n+                        \"sections\": excinfo.sections,\n+                    })\n+                result[\"chain\"] = chain\n+\n+            return result\n+\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n@@ -257,6 +270,20 @@ class BaseReport:\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n+\n+                # Restore chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for exc in reportdict[\"longrepr\"][\"chain\"]:\n+                        exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**exc[\"reprtraceback\"]),\n+                            reprcrash=ReprFileLocation(**exc[\"reprcrash\"]),\n+                        )\n+                        for section in exc[\"sections\"]:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n+\n                 reportdict[\"longrepr\"] = exception_info\n \n         return cls(**reportdict)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..5984596 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,13 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            result = {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for excinfo in rep.longrepr.chain:\n+                    chain.append({'reprtraceback': excinfo.reprtraceback.__dict__.copy(), 'reprcrash': excinfo.reprcrash.__dict__.copy(), 'sections': excinfo.sections})\n+                result['chain'] = chain\n+            return result\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -133,6 +139,14 @@ class BaseReport:\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for exc in reportdict['longrepr']['chain']:\n+                        exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**exc['reprtraceback']), reprcrash=ReprFileLocation(**exc['reprcrash']))\n+                        for section in exc['sections']:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n                 reportdict['longrepr'] = exception_info\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n", "normalized_occurrence": 1}
