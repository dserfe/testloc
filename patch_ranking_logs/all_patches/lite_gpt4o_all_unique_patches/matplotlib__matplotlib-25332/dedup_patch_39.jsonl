{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..e952468 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,8 +3174,20 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove weak references before pickling\n+        state[\"_align_label_groups\"] = {\n+            k: [ref() for ref in v] for k, v in state.get(\"_align_label_groups\", {}).items() if None not in [ref() for ref in v]\n+        }\n         return state\n \n+    def __setstate__(self, state):\n+        # Restore weak references after unpickling\n+        if \"_align_label_groups\" in state:\n+            from weakref import ref\n+            state[\"_align_label_groups\"] = {\n+                k: [ref(item) for item in v] for k, v in state[\"_align_label_groups\"].items()\n+            }\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..33ff1e1 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,7 +951,12 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_align_label_groups'] = {k: [ref() for ref in v] for k, v in state.get('_align_label_groups', {}).items() if None not in [ref() for ref in v]}\n         return state\n+    def __setstate__(self, state):\n+        if '_align_label_groups' in state:\n+            from weakref import ref\n+            state['_align_label_groups'] = {k: [ref(item) for item in v] for k, v in state['_align_label_groups'].items()}\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
