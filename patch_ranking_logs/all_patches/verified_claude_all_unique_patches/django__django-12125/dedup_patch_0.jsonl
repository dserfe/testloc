{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..0ad468c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,12 +90,31 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Handle django.db.models specially\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.\" + path[len(\"django.db.models.\"):]\n+            return name, imports\n+            \n+        # Find the module by looking for the first non-class component\n+        parts = path.split('.')\n+        module_parts = []\n+        class_parts = []\n+        \n+        for part in parts:\n+            # If it starts with a lowercase letter, it's likely a module\n+            if part[0].islower():\n+                module_parts.append(part)\n+            else:\n+                class_parts.append(part)\n+                \n+        module = \".\".join(module_parts)\n+        imports = {\"import %s\" % module}\n+        \n+        # If we have class parts, reconstruct the full path\n+        if class_parts:\n+            name = module + \".\" + \".\".join(class_parts)\n         else:\n-            imports = {\"import %s\" % module}\n             name = path\n         return name, imports\n \n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..01446c3 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,12 +68,23 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.' + path[len('django.db.models.'):]\n+            return (name, imports)\n+        parts = path.split('.')\n+        module_parts = []\n+        class_parts = []\n+        for part in parts:\n+            if part[0].islower():\n+                module_parts.append(part)\n+            else:\n+                class_parts.append(part)\n+        module = '.'.join(module_parts)\n+        imports = {'import %s' % module}\n+        if class_parts:\n+            name = module + '.' + '.'.join(class_parts)\n         else:\n-            imports = {'import %s' % module}\n             name = path\n         return (name, imports)\n     def serialize(self):\n", "normalized_occurrence": 2}
