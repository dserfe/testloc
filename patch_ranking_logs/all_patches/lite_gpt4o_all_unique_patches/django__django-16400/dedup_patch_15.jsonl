{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 05a8e83..321cab5 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -251,7 +251,7 @@ class MigrationExecutor:\n                 ) as schema_editor:\n                     state = migration.apply(state, schema_editor)\n                     if not schema_editor.deferred_sql:\n-                        self.record_migration(migration)\n+                        self.record_migration(migration, self.connection)\n                         migration_recorded = True\n         if not migration_recorded:\n             self.record_migration(migration)\n@@ -260,13 +260,13 @@ class MigrationExecutor:\n             self.progress_callback(\"apply_success\", migration, fake)\n         return state\n \n-    def record_migration(self, migration):\n+    def record_migration(self, migration, connection):\n         # For replacement migrations, record individual statuses\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n-                self.recorder.record_applied(app_label, name)\n+                self.recorder.record_applied(app_label, name, connection)\n         else:\n-            self.recorder.record_applied(migration.app_label, migration.name)\n+            self.recorder.record_applied(migration.app_label, migration.name, connection)\n \n     def unapply_migration(self, state, migration, fake=False):\n         \"\"\"Run a migration backwards.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 800f25e..e6d1fa8 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -134,19 +134,19 @@ class MigrationExecutor:\n                 with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n                     state = migration.apply(state, schema_editor)\n                     if not schema_editor.deferred_sql:\n-                        self.record_migration(migration)\n+                        self.record_migration(migration, self.connection)\n                         migration_recorded = True\n         if not migration_recorded:\n             self.record_migration(migration)\n         if self.progress_callback:\n             self.progress_callback('apply_success', migration, fake)\n         return state\n-    def record_migration(self, migration):\n+    def record_migration(self, migration, connection):\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n-                self.recorder.record_applied(app_label, name)\n+                self.recorder.record_applied(app_label, name, connection)\n         else:\n-            self.recorder.record_applied(migration.app_label, migration.name)\n+            self.recorder.record_applied(migration.app_label, migration.name, connection)\n     def unapply_migration(self, state, migration, fake=False):\n         if self.progress_callback:\n             self.progress_callback('unapply_start', migration, fake)\n", "normalized_occurrence": 1}
