{"model_name_or_path": "agentless", "instance_id": "django__django-11333", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex fa86ab6..aaeb153 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -65,7 +65,7 @@ class ResolverMatch:\n \n @functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n-    if urlconf is None:\n+    if urlconf is None or urlconf == settings.ROOT_URLCONF:\n         urlconf = settings.ROOT_URLCONF\n     return URLResolver(RegexPattern(r'^/'), urlconf)\n \n", "occurrence": 2, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 3a1aa93..82f7a71 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -39,7 +39,7 @@ class ResolverMatch:\n         return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n @functools.lru_cache(maxsize=None)\n def get_resolver(urlconf=None):\n-    if urlconf is None:\n+    if urlconf is None or urlconf == settings.ROOT_URLCONF:\n         urlconf = settings.ROOT_URLCONF\n     return URLResolver(RegexPattern('^/'), urlconf)\n @functools.lru_cache(maxsize=None)\n", "normalized_occurrence": 2}
