{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..77c977b 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -110,6 +110,12 @@ class Options:\n         # can create a chain of proxy models. For non-proxy models, the\n         # variable is always None.\n         self.proxy_for_model = None\n+        # Inherit ordering from parent models if not explicitly set\n+        if 'ordering' not in self.original_attrs and meta:\n+            for parent in self.model.mro()[1:]:\n+                if hasattr(parent, '_meta') and parent._meta.ordering:\n+                    self.ordering = parent._meta.ordering\n+                    break\n         # For any non-abstract class, the concrete class is the model\n         # in the end of the proxy_for_model chain. In particular, for\n         # concrete models, the concrete_model is always the class itself.\n@@ -858,4 +864,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..677c485 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -69,6 +69,11 @@ class Options:\n         self.managed = True\n         self.proxy = False\n         self.proxy_for_model = None\n+        if 'ordering' not in self.original_attrs and meta:\n+            for parent in self.model.mro()[1:]:\n+                if hasattr(parent, '_meta') and parent._meta.ordering:\n+                    self.ordering = parent._meta.ordering\n+                    break\n         self.concrete_model = None\n         self.swappable = None\n         self.parents = {}\n", "normalized_occurrence": 1}
