{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..ec19856 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,7 +1389,18 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        # Check if all sets contain the element\n+        ret = And(*[set.contains(other) for set in self.args])\n+        if ret is not None:\n+            return ret\n+            \n+        # For more complex cases, try to compute the actual intersection\n+        # This handles cases like complex/real intersections better\n+        intersection = Intersection(*self.args, evaluate=True)\n+        if intersection != self:\n+            return intersection.contains(other)\n+        \n+        return None\n \n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..d86d4d4 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,7 +530,13 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        ret = And(*[set.contains(other) for set in self.args])\n+        if ret is not None:\n+            return ret\n+        intersection = Intersection(*self.args, evaluate=True)\n+        if intersection != self:\n+            return intersection.contains(other)\n+        return None\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n         completed = False\n", "normalized_occurrence": 1}
