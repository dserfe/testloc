{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..6e9ee6d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1263,14 +1263,27 @@ class PythonDomain(Domain):\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n+                    elif modname and modname + '.' + name in self.objects and \\\n+                            self.objects[modname + '.' + name].objtype in objtypes:\n+                        # prioritize matches in current module\n+                        newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n                         # \"fuzzy\" searching mode\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        if modname:\n+                            # First try matches in current module\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.startswith(modname + '.') and\n+                                     oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n+                        if not matches:\n+                            # Then try other modules\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..727f76d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,11 +761,17 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n+                    elif modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n+                        newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        if modname:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.startswith(modname + '.') and oname.endswith(searchname) and (self.objects[oname].objtype in objtypes)]\n+                        if not matches:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
