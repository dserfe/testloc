{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..ece9dbd 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -920,6 +920,19 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            # Check for undefined expressions after substitution\n+            from sympy import limit, S\n+            for old, new in sequence:\n+                try:\n+                    sympified_old = sympify(old)\n+                    sympified_new = sympify(new)\n+                    if rv.has(sympified_old) and rv.subs(sympified_old, sympified_new).has(S.NaN, S.Infinity, S.ComplexInfinity):\n+                        rv = rv.limit(old, new)\n+                except Exception:\n+                    continue\n+                rv = rv._subs(old, new, **kwargs)\n+                if not isinstance(rv, Basic):\n+                    break\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..bf22107 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -329,6 +329,18 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            from sympy import limit, S\n+            for old, new in sequence:\n+                try:\n+                    sympified_old = sympify(old)\n+                    sympified_new = sympify(new)\n+                    if rv.has(sympified_old) and rv.subs(sympified_old, sympified_new).has(S.NaN, S.Infinity, S.ComplexInfinity):\n+                        rv = rv.limit(old, new)\n+                except Exception:\n+                    continue\n+                rv = rv._subs(old, new, **kwargs)\n+                if not isinstance(rv, Basic):\n+                    break\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
