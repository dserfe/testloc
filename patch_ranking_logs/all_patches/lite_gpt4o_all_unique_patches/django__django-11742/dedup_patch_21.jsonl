{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..8ec5b50 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -257,6 +257,18 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n \n+        # Check if max_length is sufficient for the longest choice value\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((str(value) for value, _ in self.choices), key=len, default='')\n+            if len(longest_choice) > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too short to fit the longest value in 'choices'.\",\n+                        obj=self,\n+                        id='fields.E007',\n+                    )\n+                ]\n+\n         # Expect [group_name, [value, display]]\n         for choices_group in self.choices:\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..d6d8bd2 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -124,6 +124,10 @@ class Field(RegisterLookupMixin):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n             return [checks.Error(\"'choices' must be an iterable (e.g., a list or tuple).\", obj=self, id='fields.E004')]\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((str(value) for value, _ in self.choices), key=len, default='')\n+            if len(longest_choice) > self.max_length:\n+                return [checks.Error(\"'max_length' is too short to fit the longest value in 'choices'.\", obj=self, id='fields.E007')]\n         for choices_group in self.choices:\n             try:\n                 group_name, group_choices = choices_group\n", "normalized_occurrence": 1}
