{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..2d14ae9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -991,10 +991,33 @@ class QuerySet:\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n-        self._result_cache = None\n-        return rows\n+        # For multi-table inheritance, ensure we're updating the correct table\n+        if self.model._meta.parents:\n+            parent_updates = {}\n+            model_updates = {}\n+            for k, v in kwargs.items():\n+                field = self.model._meta.get_field(k)\n+                if field.model != self.model and field.model in self.model._meta.parents:\n+                    parent_updates.setdefault(field.model, {}).update({k: v})\n+                else:\n+                    model_updates[k] = v\n+            # Update each parent table separately\n+            rows = 0\n+            for parent_model, parent_fields in parent_updates.items():\n+                pk_field = self.model._meta.get_field(parent_model._meta.pk.name)\n+                parent_ids = self.values_list(pk_field.name, flat=True)\n+                if parent_ids:\n+                    rows += parent_model._base_manager.filter(pk__in=parent_ids).update(**parent_fields)\n+            # Update the child table\n+            if model_updates:\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n+            return rows\n+        else:\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            self._result_cache = None\n+            return rows\n \n     update.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..51ac5c8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -535,10 +535,30 @@ class QuerySet:\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n-        self._result_cache = None\n-        return rows\n+        if self.model._meta.parents:\n+            parent_updates = {}\n+            model_updates = {}\n+            for k, v in kwargs.items():\n+                field = self.model._meta.get_field(k)\n+                if field.model != self.model and field.model in self.model._meta.parents:\n+                    parent_updates.setdefault(field.model, {}).update({k: v})\n+                else:\n+                    model_updates[k] = v\n+            rows = 0\n+            for parent_model, parent_fields in parent_updates.items():\n+                pk_field = self.model._meta.get_field(parent_model._meta.pk.name)\n+                parent_ids = self.values_list(pk_field.name, flat=True)\n+                if parent_ids:\n+                    rows += parent_model._base_manager.filter(pk__in=parent_ids).update(**parent_fields)\n+            if model_updates:\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n+            return rows\n+        else:\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            self._result_cache = None\n+            return rows\n     update.alters_data = True\n     def _update(self, values):\n         if self.query.is_sliced:\n", "normalized_occurrence": 1}
