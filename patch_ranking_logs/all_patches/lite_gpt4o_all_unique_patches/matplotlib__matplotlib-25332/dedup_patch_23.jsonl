{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..3dbe203 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,6 +3174,10 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove any weak references that cannot be pickled\n+        if \"_aligned_labels\" in state:\n+            aligned_labels = state[\"_aligned_labels\"]\n+            state[\"_aligned_labels\"] = [label() for label in aligned_labels if label() is not None]\n         return state\n \n     def __setstate__(self, state):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..ec74edf 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,9 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        if '_aligned_labels' in state:\n+            aligned_labels = state['_aligned_labels']\n+            state['_aligned_labels'] = [label() for label in aligned_labels if label() is not None]\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n", "normalized_occurrence": 1}
