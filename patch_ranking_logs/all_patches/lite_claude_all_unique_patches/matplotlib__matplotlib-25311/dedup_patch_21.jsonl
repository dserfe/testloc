{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..7429c68 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -93,6 +93,17 @@ class DraggableLegend(DraggableOffsetBox):\n         loc_in_bbox = self.legend.axes.transAxes.transform(loc_in_canvas)\n         self.legend.set_bbox_to_anchor(loc_in_bbox)\n \n+    def __getstate__(self):\n+        # Only pickle essential attributes, excluding canvas-related ones\n+        state = {'legend': self.legend, '_update': self._update}\n+        return state\n+\n+    def __setstate__(self, state):\n+        # Restore the object state during unpickling\n+        self.legend = state['legend']\n+        self._update = state['_update']\n+        super().__init__(self.legend, self.legend._legend_box)\n+\n \n _legend_kw_doc_base = \"\"\"\n bbox_to_anchor : `.BboxBase`, 2-tuple, or 4-tuple of floats\n", "normalized_patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n+    def __getstate__(self):\n+        state = {'legend': self.legend, '_update': self._update}\n+        return state\n+    def __setstate__(self, state):\n+        self.legend = state['legend']\n+        self._update = state['_update']\n+        super().__init__(self.legend, self.legend._legend_box)", "normalized_occurrence": 1}
