{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 0aa71a3..43f7236 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -334,7 +334,7 @@ class RenameField(FieldOperation):\n                     [self.new_name if n == self.old_name else n for n in together]\n                     for together in options[option]\n                 ]\n-        # Fix to_fields to refer to the new field.\n+        # Fix to_fields and foreign key fields to refer to the new field.\n         model_tuple = app_label, self.model_name_lower\n         for (model_app_label, model_name), model_state in state.models.items():\n             for index, (name, field) in enumerate(model_state.fields):\n@@ -352,6 +352,10 @@ class RenameField(FieldOperation):\n                                 self.new_name if to_field_name == self.old_name else to_field_name\n                                 for to_field_name in to_fields\n                             ])\n+                        # Fix foreign key fields to refer to the new field.\n+                        if isinstance(field, models.ForeignKey):\n+                            if field.to_fields == (self.old_name,):\n+                                field.to_fields = (self.new_name,)\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex b2b87fe..c4f6541 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -202,6 +202,9 @@ class RenameField(FieldOperation):\n                         to_fields = getattr(field, 'to_fields', None)\n                         if to_fields:\n                             field.to_fields = tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields])\n+                        if isinstance(field, models.ForeignKey):\n+                            if field.to_fields == (self.old_name,):\n+                                field.to_fields = (self.new_name,)\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n", "normalized_occurrence": 1}
