{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..7276eda 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1023,7 +1023,7 @@ class MultiValueField(Field):\n             value = self.widget.decompress(value)\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n+                if any(field.required and v in self.empty_values for field, v in zip(self.fields, value)):\n                     raise ValidationError(self.error_messages['required'], code='required')\n                 else:\n                     return self.compress([])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..014a360 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -590,7 +590,7 @@ class MultiValueField(Field):\n             value = self.widget.decompress(value)\n         if not value or isinstance(value, (list, tuple)):\n             if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n+                if any((field.required and v in self.empty_values for field, v in zip(self.fields, value))):\n                     raise ValidationError(self.error_messages['required'], code='required')\n                 else:\n                     return self.compress([])\n", "normalized_occurrence": 1}
