{"model_name_or_path": "agentless", "instance_id": "django__django-14765", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 6496bf2..4b63b31 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -91,10 +91,8 @@ class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n         # Apps to include from main registry, usually unmigrated ones\n-        if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n-        else:\n-            self.real_apps = set()\n+        assert real_apps is None or isinstance(real_apps, set), \"real_apps should be a set or None\"\n+        self.real_apps = real_apps or set()\n         self.is_delayed = False\n         # {remote_model_key: {model_key: [(field_name, field)]}}\n         self.relations = None\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 999f68c..ca2829a 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -49,10 +49,8 @@ def get_related_models_recursive(model):\n class ProjectState:\n     def __init__(self, models=None, real_apps=None):\n         self.models = models or {}\n-        if real_apps:\n-            self.real_apps = real_apps if isinstance(real_apps, set) else set(real_apps)\n-        else:\n-            self.real_apps = set()\n+        assert real_apps is None or isinstance(real_apps, set), 'real_apps should be a set or None'\n+        self.real_apps = real_apps or set()\n         self.is_delayed = False\n         self.relations = None\n     def add_model(self, model_state):\n", "normalized_occurrence": 2}
