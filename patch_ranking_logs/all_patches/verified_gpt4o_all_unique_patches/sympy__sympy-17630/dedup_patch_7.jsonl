{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..a6ffbc0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -144,7 +144,14 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def blocks(self):\n-        return self.args[0]\n+        from sympy.core.numbers import Zero\n+        from sympy import ZeroMatrix\n+        blocks = self.args[0]\n+        for i in range(self.blockshape[0]):\n+            for j in range(self.blockshape[1]):\n+                if isinstance(blocks[i, j], Zero.__class__):\n+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)\n+        return blocks\n \n     @property\n     def rowblocksizes(self):\n@@ -464,7 +471,9 @@ def bc_matmul(expr):\n     while (i+1 < len(matrices)):\n         A, B = matrices[i:i+2]\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            matrices[i] = BlockMatrix(\n+                [[ZeroMatrix(A.blocks[i, j].rows, B.blocks[j, k].cols) if all(isinstance(A.blocks[i, j], Zero.__class__) or isinstance(B.blocks[j, k], Zero.__class__) for _ in range(A.blockshape[1])) else A.blocks[i, j]._blockmul(B.blocks[j, k]) for k in range(B.blockshape[1])] for i in range(A.blockshape[0])]\n+            )\n             matrices.pop(i+1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..892b6c2 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -61,7 +61,14 @@ class BlockMatrix(MatrixExpr):\n         return self.blocks.shape\n     @property\n     def blocks(self):\n-        return self.args[0]\n+        from sympy.core.numbers import Zero\n+        from sympy import ZeroMatrix\n+        blocks = self.args[0]\n+        for i in range(self.blockshape[0]):\n+            for j in range(self.blockshape[1]):\n+                if isinstance(blocks[i, j], Zero.__class__):\n+                    blocks[i, j] = ZeroMatrix(blocks[i, j].rows, blocks[i, j].cols)\n+        return blocks\n     @property\n     def rowblocksizes(self):\n         return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]\n@@ -237,7 +244,7 @@ def bc_matmul(expr):\n     while i + 1 < len(matrices):\n         A, B = matrices[i:i + 2]\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            matrices[i] = BlockMatrix([[ZeroMatrix(A.blocks[i, j].rows, B.blocks[j, k].cols) if all((isinstance(A.blocks[i, j], Zero.__class__) or isinstance(B.blocks[j, k], Zero.__class__) for _ in range(A.blockshape[1]))) else A.blocks[i, j]._blockmul(B.blocks[j, k]) for k in range(B.blockshape[1])] for i in range(A.blockshape[0])])\n             matrices.pop(i + 1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n", "normalized_occurrence": 1}
