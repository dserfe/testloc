{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..27854e4 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': lambda rawtext, text, **options: create_kbd_node(rawtext, text),\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -45,6 +45,16 @@ generic_docroles = {\n     'regexp': nodes.literal,\n }\n \n+def create_kbd_node(rawtext, text):\n+    keys = re.split(r'(?<!\\\\)([-+^])', text)  # Split on unescaped -,+,^\n+    nodes_list = []\n+    for key in keys:\n+        if key in '-+^':\n+            nodes_list.append(nodes.Text(key))\n+        else:\n+            nodes_list.append(nodes.inline('', '', nodes.Text(key), classes=['kbd']))\n+    return nodes.literal(rawtext, '', *nodes_list)\n+\n \n # -- generic cross-reference role ----------------------------------------------\n \n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': lambda rawtext, text, **options: create_kbd_node(rawtext, text), 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+def create_kbd_node(rawtext, text):\n+    keys = re.split('(?<!\\\\\\\\)([-+^])', text)\n+    nodes_list = []\n+    for key in keys:\n+        if key in '-+^':\n+            nodes_list.append(nodes.Text(key))\n+        else:\n+            nodes_list.append(nodes.inline('', '', nodes.Text(key), classes=['kbd']))\n+    return nodes.literal(rawtext, '', *nodes_list)", "normalized_occurrence": 1}
