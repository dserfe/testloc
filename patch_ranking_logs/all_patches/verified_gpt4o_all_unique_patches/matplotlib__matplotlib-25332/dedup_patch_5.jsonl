{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..013849b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,8 +3174,38 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        \n+        # Handle weak references to aligned labels\n+        if hasattr(self, '_align_label_groups'):\n+            state['_align_label_groups'] = {\n+                k: [ref() for ref in refs if ref() is not None]\n+                for k, refs in self._align_label_groups.items()\n+            }\n+        else:\n+            state['_align_label_groups'] = {}\n+\n         return state\n \n+    def __setstate__(self, state):\n+        version = state.pop('__mpl_version__')\n+        restore_to_pylab = state.pop('_restore_to_pylab', False)\n+\n+        if version != mpl.__version__:\n+            _api.warn_external(\n+                f\"This figure was saved with matplotlib version {version} and \"\n+                f\"is unlikely to function correctly.\")\n+\n+        self.__dict__ = state\n+\n+        # Restore weak references to aligned labels\n+        if '_align_label_groups' in state:\n+            self._align_label_groups = {\n+                k: [weakref.ref(obj) for obj in objs]\n+                for k, objs in state['_align_label_groups'].items()\n+            }\n+        else:\n+            self._align_label_groups = {}\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..c0e9fa1 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,7 +951,21 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        if hasattr(self, '_align_label_groups'):\n+            state['_align_label_groups'] = {k: [ref() for ref in refs if ref() is not None] for k, refs in self._align_label_groups.items()}\n+        else:\n+            state['_align_label_groups'] = {}\n         return state\n+    def __setstate__(self, state):\n+        version = state.pop('__mpl_version__')\n+        restore_to_pylab = state.pop('_restore_to_pylab', False)\n+        if version != mpl.__version__:\n+            _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n+        self.__dict__ = state\n+        if '_align_label_groups' in state:\n+            self._align_label_groups = {k: [weakref.ref(obj) for obj in objs] for k, objs in state['_align_label_groups'].items()}\n+        else:\n+            self._align_label_groups = {}\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
