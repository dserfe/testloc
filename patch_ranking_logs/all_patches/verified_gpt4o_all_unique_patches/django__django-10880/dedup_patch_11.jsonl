{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..6234216 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -112,11 +112,22 @@ class Count(Aggregate):\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        if extra.get('distinct', False):\n+            self.distinct = True\n+        else:\n+            self.distinct = False\n         super().__init__(expression, filter=filter, **extra)\n \n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n \n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT %s)'\n+        else:\n+            self.function = 'COUNT(%s)'\n+        return super().as_sql(compiler, connection)\n+\n \n class Max(Aggregate):\n     function = 'MAX'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..842c62f 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -81,9 +81,19 @@ class Count(Aggregate):\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        if extra.get('distinct', False):\n+            self.distinct = True\n+        else:\n+            self.distinct = False\n         super().__init__(expression, filter=filter, **extra)\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT %s)'\n+        else:\n+            self.function = 'COUNT(%s)'\n+        return super().as_sql(compiler, connection)\n class Max(Aggregate):\n     function = 'MAX'\n     name = 'Max'\n", "normalized_occurrence": 1}
