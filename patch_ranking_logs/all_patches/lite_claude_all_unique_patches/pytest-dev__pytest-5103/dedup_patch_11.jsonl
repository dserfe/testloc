{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..61bccac 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,48 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                # Handle generator expressions and iterables\n+                arg = call.args[0]\n+                if isinstance(arg, ast.GeneratorExp) or isinstance(arg, ast.ListComp):\n+                    # Create a for loop that checks each item\n+                    is_all = call.func.id == 'all'\n+                    \n+                    # Get the iterator and its target\n+                    if isinstance(arg, ast.GeneratorExp):\n+                        iter_target = arg.generators[0].target\n+                        iter_iter = arg.generators[0].iter\n+                        test_expr = arg.elt\n+                    else:  # ListComp\n+                        iter_target = arg.generators[0].target\n+                        iter_iter = arg.generators[0].iter\n+                        test_expr = arg.elt\n+                    \n+                    # Create the loop body: assert expr for all(), or store result for any()\n+                    if is_all:\n+                        loop_body = [ast.Assert(test_expr, None)]\n+                    else:\n+                        loop_body = [\n+                            ast.If(\n+                                test_expr,\n+                                [ast.Return(ast.Constant(value=True))],\n+                                []\n+                            )\n+                        ]\n+                    \n+                    # Create the loop\n+                    loop = ast.For(\n+                        target=iter_target,\n+                        iter=iter_iter,\n+                        body=loop_body,\n+                        orelse=[] if is_all else [ast.Return(ast.Constant(value=False))]\n+                    )\n+                    \n+                    return loop, \"unrolled %s() check\" % call.func.id\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..380feba 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -545,6 +545,26 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (res, explanation)\n     def visit_Call_35(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                arg = call.args[0]\n+                if isinstance(arg, ast.GeneratorExp) or isinstance(arg, ast.ListComp):\n+                    is_all = call.func.id == 'all'\n+                    if isinstance(arg, ast.GeneratorExp):\n+                        iter_target = arg.generators[0].target\n+                        iter_iter = arg.generators[0].iter\n+                        test_expr = arg.elt\n+                    else:\n+                        iter_target = arg.generators[0].target\n+                        iter_iter = arg.generators[0].iter\n+                        test_expr = arg.elt\n+                    if is_all:\n+                        loop_body = [ast.Assert(test_expr, None)]\n+                    else:\n+                        loop_body = [ast.If(test_expr, [ast.Return(ast.Constant(value=True))], [])]\n+                    loop = ast.For(target=iter_target, iter=iter_iter, body=loop_body, orelse=[] if is_all else [ast.Return(ast.Constant(value=False))])\n+                    return (loop, 'unrolled %s() check' % call.func.id)\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "normalized_occurrence": 1}
