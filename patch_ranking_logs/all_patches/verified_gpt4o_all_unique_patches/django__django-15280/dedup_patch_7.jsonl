{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..3a32a7f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -138,7 +138,8 @@ class ForwardManyToOneDescriptor:\n             query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        # Ensure that deferred fields from the outer queryset do not interfere with the inner queryset\n+        queryset = queryset.filter(**query).only(*{f.attname for f in queryset.model._meta.concrete_fields})\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n@@ -371,7 +372,8 @@ class ReverseOneToOneDescriptor:\n         instance_attr = self.related.field.get_foreign_related_value\n         instances_dict = {instance_attr(inst): inst for inst in instances}\n         query = {'%s__in' % self.related.field.name: instances}\n-        queryset = queryset.filter(**query)\n+        # Ensure that deferred fields from the outer queryset do not interfere with the inner queryset\n+        queryset = queryset.filter(**query).only(*{f.attname for f in queryset.model._meta.concrete_fields})\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..3943986 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -33,7 +33,7 @@ class ForwardManyToOneDescriptor:\n             query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        queryset = queryset.filter(**query).only(*{f.attname for f in queryset.model._meta.concrete_fields})\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n@@ -130,7 +130,7 @@ class ReverseOneToOneDescriptor:\n         instance_attr = self.related.field.get_foreign_related_value\n         instances_dict = {instance_attr(inst): inst for inst in instances}\n         query = {'%s__in' % self.related.field.name: instances}\n-        queryset = queryset.filter(**query)\n+        queryset = queryset.filter(**query).only(*{f.attname for f in queryset.model._meta.concrete_fields})\n         for rel_obj in queryset:\n             instance = instances_dict[rel_obj_attr(rel_obj)]\n             self.related.field.set_cached_value(rel_obj, instance)\n", "normalized_occurrence": 1}
