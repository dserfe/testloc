{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..473dd4a 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -129,6 +129,10 @@ class TensorProduct(Expr):\n             tp = Expr.__new__(cls, *new_args)\n             return c_part * tp\n \n+    def _eval_power(self, exp):\n+        new_args = [arg**exp for arg in self.args]\n+        return TensorProduct(*new_args)\n+\n     @classmethod\n     def flatten(cls, args):\n         # TODO: disallow nested TensorProducts.\n@@ -382,7 +386,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg**e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..5f9818f 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -28,6 +28,9 @@ class TensorProduct(Expr):\n         else:\n             tp = Expr.__new__(cls, *new_args)\n             return c_part * tp\n+    def _eval_power(self, exp):\n+        new_args = [arg ** exp for arg in self.args]\n+        return TensorProduct(*new_args)\n     @classmethod\n     def flatten(cls, args):\n         c_part = []\n@@ -161,7 +164,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
