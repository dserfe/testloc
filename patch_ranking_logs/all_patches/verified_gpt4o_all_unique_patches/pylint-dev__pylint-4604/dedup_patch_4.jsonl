{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..453f8d7 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,7 +518,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"\n+        Check if the import is used in a type comment.\n+        \"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"# type: {name}\" in comment:\n+                return True\n+        return False\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n         self._check_reimport(node)\n@@ -534,6 +542,9 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_preferred_module(node, name)\n             imported_module = self._get_imported_module(node, name)\n             if isinstance(node.parent, astroid.Module):\n+                module = node.root()\n+                if not hasattr(module, 'comments'):\n+                    module.comments = [c.value for c in module.get_children() if isinstance(c, astroid.node_classes.Const) and isinstance(c.value, str) and c.value.startswith('#')]\n                 # Allow imports nested\n                 self._check_position(node)\n             if isinstance(node.scope(), astroid.Module):\n@@ -544,7 +555,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n \n             self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"\n+        Check if the import is used in a type comment.\n+        \"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"# type: {name}\" in comment:\n+                return True\n+        return False\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n         basename = node.modname\n@@ -564,7 +583,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_position(node)\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n-        if imported_module is None:\n+        if imported_module is None or self._is_used_in_type_comment(node, name):\n             return\n         for name, _ in node.names:\n             if name != \"*\":\n@@ -572,7 +591,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"\n+        Check if the import is used in a type comment.\n+        \"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"# type: {name}\" in comment:\n+                return True\n+        return False\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..71e31af 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -165,7 +165,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self.add_message('cyclic-import', args=' -> '.join(cycle))\n     def deprecated_modules(self):\n         return self.config.deprecated_modules\n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'# type: {name}' in comment:\n+                return True\n+        return False\n     def visit_import(self, node):\n         self._check_reimport(node)\n         self._check_import_as_rename(node)\n@@ -178,13 +183,21 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_preferred_module(node, name)\n             imported_module = self._get_imported_module(node, name)\n             if isinstance(node.parent, astroid.Module):\n+                module = node.root()\n+                if not hasattr(module, 'comments'):\n+                    module.comments = [c.value for c in module.get_children() if isinstance(c, astroid.node_classes.Const) and isinstance(c.value, str) and c.value.startswith('#')]\n                 self._check_position(node)\n             if isinstance(node.scope(), astroid.Module):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n                 continue\n             self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'# type: {name}' in comment:\n+                return True\n+        return False\n     def visit_importfrom(self, node):\n         basename = node.modname\n         imported_module = self._get_imported_module(node, basename)\n@@ -200,14 +213,19 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_position(node)\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n-        if imported_module is None:\n+        if imported_module is None or self._is_used_in_type_comment(node, name):\n             return\n         for name, _ in node.names:\n             if name != '*':\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n             else:\n                 self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'# type: {name}' in comment:\n+                return True\n+        return False\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n         met_import = set()\n", "normalized_occurrence": 1}
