{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex eac2098..b957589 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -1,3 +1,4 @@\n+\n from __future__ import print_function, division\n \n from .sympify import sympify, _sympify, SympifyError\n@@ -8,11 +9,21 @@ from .decorators import _sympifyit, call_highest_priority\n from .cache import cacheit\n from .compatibility import reduce, as_int, default_sort_key, range, Iterable\n from sympy.utilities.misc import func_name\n+from sympy.geometry.point import Point\n from mpmath.libmp import mpf_log, prec_to_dps\n \n from collections import defaultdict\n \n class Expr(Basic, EvalfMixin):\n+    def __mul__(self, other):\n+        if isinstance(other, Point):\n+            return other.__rmul__(self)\n+        return super().__mul__(other)\n+\n+    def __rmul__(self, other):\n+        if isinstance(other, Point):\n+            return other.__mul__(self)\n+        return super().__rmul__(other)\n     \"\"\"\n     Base class for algebraic expressions.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 3390d15..3f58aa9 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -7,9 +7,19 @@ from .decorators import _sympifyit, call_highest_priority\n from .cache import cacheit\n from .compatibility import reduce, as_int, default_sort_key, range, Iterable\n from sympy.utilities.misc import func_name\n+from sympy.geometry.point import Point\n from mpmath.libmp import mpf_log, prec_to_dps\n from collections import defaultdict\n class Expr(Basic, EvalfMixin):\n+    def __mul__(self, other):\n+        if isinstance(other, Point):\n+            return other.__rmul__(self)\n+        return super().__mul__(other)\n+    def __rmul__(self, other):\n+        if isinstance(other, Point):\n+            return other.__mul__(self)\n+        return super().__rmul__(other)\n+    '\\n    Base class for algebraic expressions.\\n\\n    Everything that requires arithmetic operations to be defined\\n    should subclass this class, instead of Basic (which should be\\n    used only for argument storage and expression manipulation, i.e.\\n    pattern matching, substitutions, etc).\\n\\n    See Also\\n    ========\\n\\n    sympy.core.basic.Basic\\n    '\n     __slots__ = []\n     is_scalar = True\n     @property\n", "normalized_occurrence": 1}
