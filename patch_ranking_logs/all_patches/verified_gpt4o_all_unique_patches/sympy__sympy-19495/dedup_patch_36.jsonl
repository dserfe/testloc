{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..f691634 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -211,39 +211,16 @@ class ConditionSet(Set):\n             # that should go away, eventually.\n             return self\n         sym, cond, base = self.args\n+        # Replace occurrences of `old` with `new` in the condition, base set, and symbol.\n         if old == sym:\n-            # we try to be as lenient as possible to allow\n-            # the dummy symbol to be changed\n+            new_sym = new if isinstance(new, Symbol) else sym\n+            cond = cond.subs(old, new)\n             base = base.subs(old, new)\n-            if isinstance(new, Symbol):\n-                # if the assumptions don't match, the cond\n-                # might evaluate or change\n-                if (new.assumptions0 == old.assumptions0 or\n-                        len(new.assumptions0) == 1 and\n-                        old.is_commutative == new.is_commutative):\n-                    if base != self.base_set:\n-                        # it will be aggravating to have the dummy\n-                        # symbol change if you are trying to target\n-                        # the base set so if the base set is changed\n-                        # leave the dummy symbol alone -- a second\n-                        # subs will be needed to change the dummy\n-                        return self.func(sym, cond, base)\n-                    else:\n-                        return self.func(new, cond.subs(old, new), base)\n-                raise ValueError(filldedent('''\n-                    A dummy symbol can only be\n-                    replaced with a symbol having the same\n-                    assumptions or one having a single assumption\n-                    having the same commutativity.\n-                '''))\n-            # don't target cond: it is there to tell how\n-            # the base set should be filtered and if new is not in\n-            # the base set then this substitution is ignored\n-            return self.func(sym, cond, base)\n+            return self.func(new_sym, cond, base)\n+            \n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n-        if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+        return self.func(sym, cond, base)\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..26c9bc9 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -80,19 +80,13 @@ class ConditionSet(Set):\n             return self\n         sym, cond, base = self.args\n         if old == sym:\n+            new_sym = new if isinstance(new, Symbol) else sym\n+            cond = cond.subs(old, new)\n             base = base.subs(old, new)\n-            if isinstance(new, Symbol):\n-                if new.assumptions0 == old.assumptions0 or (len(new.assumptions0) == 1 and old.is_commutative == new.is_commutative):\n-                    if base != self.base_set:\n-                        return self.func(sym, cond, base)\n-                    else:\n-                        return self.func(new, cond.subs(old, new), base)\n-                raise ValueError(filldedent('\\n                    A dummy symbol can only be\\n                    replaced with a symbol having the same\\n                    assumptions or one having a single assumption\\n                    having the same commutativity.\\n                '))\n-            return self.func(sym, cond, base)\n+            return self.func(new_sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n-        if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+        return self.func(sym, cond, base)\n         return self.func(self.sym, cond, base)\n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n", "normalized_occurrence": 1}
