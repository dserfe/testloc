{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..a31c055 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,10 +862,18 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                # Include all fitted transformers, even those with no features\n+                transformer_names = []\n+                feature_names_outs = []\n+                xs_idx = 0\n+                \n+                for name, _, _ in self._iter(fitted=True, replace_strings=True):\n+                    transformer_names.append(name)\n+                    if xs_idx < len(Xs) and len(Xs[xs_idx].columns) > 0:\n+                        feature_names_outs.append(Xs[xs_idx].columns)\n+                        xs_idx += 1\n+                    else:\n+                        feature_names_outs.append([])\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..fc7ee20 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,8 +257,16 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n+                transformer_names = []\n+                feature_names_outs = []\n+                xs_idx = 0\n+                for name, _, _ in self._iter(fitted=True, replace_strings=True):\n+                    transformer_names.append(name)\n+                    if xs_idx < len(Xs) and len(Xs[xs_idx].columns) > 0:\n+                        feature_names_outs.append(Xs[xs_idx].columns)\n+                        xs_idx += 1\n+                    else:\n+                        feature_names_outs.append([])\n                 names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n                 output.columns = names_out\n                 return output\n", "normalized_occurrence": 1}
