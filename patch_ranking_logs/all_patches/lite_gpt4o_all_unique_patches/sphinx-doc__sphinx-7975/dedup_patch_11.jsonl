{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..5b8c67a 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,7 +108,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if lckey[0:1].isalpha() or lckey.startswith(('_', '@', '£', '←')):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n@@ -150,7 +150,7 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+            if key[0:1].isalpha() or key.startswith(('_', '@', '£', '←')):\n                 key = chr(127) + key\n             return key\n \n@@ -173,4 +173,4 @@ class IndexEntries:\n             else:\n                 return v[2]\n         return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                for (key_, group) in groupby(newlist, keyfunc3)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..9b22d1f 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -73,7 +73,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\u200f'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if lckey[0:1].isalpha() or lckey.startswith(('_', '@', '£', '←')):\n                 lckey = chr(127) + lckey\n             return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n@@ -99,7 +99,7 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\u200f'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+            if key[0:1].isalpha() or key.startswith(('_', '@', '£', '←')):\n                 key = chr(127) + key\n             return key\n         def keyfunc3(item: Tuple[str, List]) -> str:\n", "normalized_occurrence": 1}
