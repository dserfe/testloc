{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..79cc60b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -258,6 +258,7 @@ class Field(RegisterLookupMixin):\n             ]\n \n         # Expect [group_name, [value, display]]\n+        max_choice_length = 0\n         for choices_group in self.choices:\n             try:\n                 group_name, group_choices = choices_group\n@@ -265,21 +266,30 @@ class Field(RegisterLookupMixin):\n                 # Containing non-pairs\n                 break\n             try:\n-                if not all(\n-                    is_value(value) and is_value(human_name)\n-                    for value, human_name in group_choices\n-                ):\n-                    break\n+                for value, human_name in group_choices:\n+                    if not is_value(value) or not is_value(human_name):\n+                        break\n+                    max_choice_length = max(max_choice_length, len(value))\n             except (TypeError, ValueError):\n                 # No groups, choices in the form [value, display]\n                 value, human_name = group_name, group_choices\n                 if not is_value(value) or not is_value(human_name):\n                     break\n+                max_choice_length = max(max_choice_length, len(value))\n \n             # Special case: choices=['ab']\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None and max_choice_length > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'. \"\n+                        \"Please increase it to at least {}.\".format(max_choice_length),\n+                        obj=self,\n+                        id='fields.E007',\n+                    )\n+                ]\n             return []\n \n         return [\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..5fe2405 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -124,21 +124,27 @@ class Field(RegisterLookupMixin):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n             return [checks.Error(\"'choices' must be an iterable (e.g., a list or tuple).\", obj=self, id='fields.E004')]\n+        max_choice_length = 0\n         for choices_group in self.choices:\n             try:\n                 group_name, group_choices = choices_group\n             except (TypeError, ValueError):\n                 break\n             try:\n-                if not all((is_value(value) and is_value(human_name) for value, human_name in group_choices)):\n-                    break\n+                for value, human_name in group_choices:\n+                    if not is_value(value) or not is_value(human_name):\n+                        break\n+                    max_choice_length = max(max_choice_length, len(value))\n             except (TypeError, ValueError):\n                 value, human_name = (group_name, group_choices)\n                 if not is_value(value) or not is_value(human_name):\n                     break\n+                max_choice_length = max(max_choice_length, len(value))\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None and max_choice_length > self.max_length:\n+                return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'. Please increase it to at least {}.\".format(max_choice_length), obj=self, id='fields.E007')]\n             return []\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n", "normalized_occurrence": 1}
