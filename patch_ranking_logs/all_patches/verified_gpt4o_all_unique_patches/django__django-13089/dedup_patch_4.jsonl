{"model_name_or_path": "agentless", "instance_id": "django__django-13089", "model_patch": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex a65b985..6b07a6c 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -267,13 +267,15 @@ class DatabaseCache(BaseDatabaseCache):\n                 cursor.execute(\n                     connection.ops.cache_key_culling_sql() % table,\n                     [cull_num])\n-                cursor.execute(\"DELETE FROM %s \"\n-                               \"WHERE cache_key < %%s\" % table,\n-                               [cursor.fetchone()[0]])\n+                cull_key = cursor.fetchone()\n+                if cull_key is not None:\n+                    cursor.execute(\"DELETE FROM %s \"\n+                                   \"WHERE cache_key < %%s\" % table,\n+                                   [cull_key[0]])\n \n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n         connection = connections[db]\n         table = connection.ops.quote_name(self._table)\n         with connection.cursor() as cursor:\n-            cursor.execute('DELETE FROM %s' % table)\n+            cursor.execute('DELETE FROM %s' % table)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/cache/backends/db.py b/django/core/cache/backends/db.py\nindex bfc6103..936d620 100644\n--- a/django/core/cache/backends/db.py\n+++ b/django/core/cache/backends/db.py\n@@ -158,7 +158,9 @@ class DatabaseCache(BaseDatabaseCache):\n             if num > self._max_entries:\n                 cull_num = num // self._cull_frequency\n                 cursor.execute(connection.ops.cache_key_culling_sql() % table, [cull_num])\n-                cursor.execute('DELETE FROM %s WHERE cache_key < %%s' % table, [cursor.fetchone()[0]])\n+                cull_key = cursor.fetchone()\n+                if cull_key is not None:\n+                    cursor.execute('DELETE FROM %s WHERE cache_key < %%s' % table, [cull_key[0]])\n     def clear(self):\n         db = router.db_for_write(self.cache_model_class)\n         connection = connections[db]\n", "normalized_occurrence": 1}
