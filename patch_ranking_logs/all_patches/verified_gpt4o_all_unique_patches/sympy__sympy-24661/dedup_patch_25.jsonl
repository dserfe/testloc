{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..889d65f 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1079,9 +1079,13 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n         # restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n-        return rv\n+        if evaluate:\n+            return rv\n+        if not isinstance(rv, Relational):\n+            return rv\n+        return type(rv)(*rv.args, evaluate=False)\n     except Exception as e:\n-        # restore neutral definitions for names\n+        # Restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n         raise e from ValueError(f\"Error from parse_expr with transformed code: {code!r}\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..3a61c45 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -516,7 +516,11 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n         rv = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n-        return rv\n+        if evaluate:\n+            return rv\n+        if not isinstance(rv, Relational):\n+            return rv\n+        return type(rv)(*rv.args, evaluate=False)\n     except Exception as e:\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n", "normalized_occurrence": 1}
