{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..b45be4f 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1383,6 +1383,13 @@ class ManyToManyField(RelatedField):\n             through_fields=through_fields,\n             db_constraint=db_constraint,\n         )\n+        if isinstance(through, str):\n+            def resolve_through_model():\n+                resolved_model = kwargs['apps'].get_model(through)\n+                self.rel.through = resolved_model\n+                resolved_model._meta.auto_created = False\n+            from django.db.models.signals import class_prepared\n+            class_prepared.connect(resolve_through_model)\n         self.has_null_arg = \"null\" in kwargs\n \n         super().__init__(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..ffe1c6e 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -543,6 +543,13 @@ class ManyToManyField(RelatedField):\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n+        if isinstance(through, str):\n+            def resolve_through_model():\n+                resolved_model = kwargs['apps'].get_model(through)\n+                self.rel.through = resolved_model\n+                resolved_model._meta.auto_created = False\n+            from django.db.models.signals import class_prepared\n+            class_prepared.connect(resolve_through_model)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n         self.db_table = db_table\n", "normalized_occurrence": 1}
