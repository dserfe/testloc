{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..08619ec 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -341,6 +341,10 @@ class sin(TrigonometricFunction):\n             if m:\n                 return sin(m)*cos(x) + cos(m)*sin(x)\n \n+        if arg.is_complex:\n+            re, im = arg.as_real_imag()\n+            return sin(re) * cosh(im) + S.ImaginaryUnit * cos(re) * sinh(im)\n+\n         if arg.is_zero:\n             return S.Zero\n \n@@ -658,6 +662,10 @@ class cos(TrigonometricFunction):\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n \n+        if arg.is_complex:\n+            re, im = arg.as_real_imag()\n+            return cos(re) * cosh(im) - S.ImaginaryUnit * sin(re) * sinh(im)\n+\n         if arg.is_zero:\n             return S.One\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..8513866 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -191,6 +191,9 @@ class sin(TrigonometricFunction):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n+        if arg.is_complex:\n+            re, im = arg.as_real_imag()\n+            return sin(re) * cosh(im) + S.ImaginaryUnit * cos(re) * sinh(im)\n         if arg.is_zero:\n             return S.Zero\n         if isinstance(arg, asin):\n@@ -383,6 +386,9 @@ class cos(TrigonometricFunction):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n+        if arg.is_complex:\n+            re, im = arg.as_real_imag()\n+            return cos(re) * cosh(im) - S.ImaginaryUnit * sin(re) * sinh(im)\n         if arg.is_zero:\n             return S.One\n         if isinstance(arg, acos):\n", "normalized_occurrence": 1}
