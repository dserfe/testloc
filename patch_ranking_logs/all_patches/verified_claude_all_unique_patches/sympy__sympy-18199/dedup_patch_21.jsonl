{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 632624f..a7b16aa 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -765,7 +765,12 @@ def nthroot_mod(a, n, p, all_roots=False):\n     [8, 11]\n     >>> nthroot_mod(68, 3, 109)\n     23\n+    >>> nthroot_mod(17*17, 5, 17, True)  # includes 0 as a root when a ≡ 0 (mod p)\n+    [0]\n     \"\"\"\n+    # Handle the special case where a ≡ 0 (mod p)\n+    if a % p == 0:\n+        return [0] if all_roots else 0\n     from sympy.core.numbers import igcdex\n     a, n, p = as_int(a), as_int(n), as_int(p)\n     if n == 2:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex abeb252..0074345 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -454,6 +454,8 @@ def _nthroot_mod1(s, q, p, all_roots):\n         return res\n     return min(res)\n def nthroot_mod(a, n, p, all_roots=False):\n+    if a % p == 0:\n+        return [0] if all_roots else 0\n     from sympy.core.numbers import igcdex\n     a, n, p = (as_int(a), as_int(n), as_int(p))\n     if n == 2:\n", "normalized_occurrence": 1}
