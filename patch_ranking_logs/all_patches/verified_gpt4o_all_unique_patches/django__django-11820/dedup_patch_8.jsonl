{"model_name_or_path": "agentless", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex d3ae0cf..3d4563b 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -183,6 +183,8 @@ class Options:\n             # App label/class name interpolation for names of constraints and\n             # indexes.\n             if not getattr(cls._meta, 'abstract', False):\n+                # Validate ordering fields\n+                self._validate_ordering()\n                 for attr_name in {'constraints', 'indexes'}:\n                     objs = getattr(self, attr_name, [])\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n@@ -852,4 +854,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 3b361a9..d1dbe51 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -114,6 +114,7 @@ class Options:\n             self.unique_together = normalize_together(self.unique_together)\n             self.index_together = normalize_together(self.index_together)\n             if not getattr(cls._meta, 'abstract', False):\n+                self._validate_ordering()\n                 for attr_name in {'constraints', 'indexes'}:\n                     objs = getattr(self, attr_name, [])\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n", "normalized_occurrence": 1}
