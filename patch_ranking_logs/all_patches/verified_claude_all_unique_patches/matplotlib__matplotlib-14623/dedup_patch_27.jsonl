{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-14623", "model_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex ebf1196..1cc0244 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -2819,6 +2819,7 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n     if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n         return -expander, expander\n \n+    original_order = vmin, vmax\n     swapped = False\n     if vmax < vmin:\n         vmin, vmax = vmax, vmin\n@@ -2837,8 +2838,10 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n             vmin -= expander*abs(vmin)\n             vmax += expander*abs(vmax)\n \n-    if swapped and not increasing:\n-        vmin, vmax = vmax, vmin\n+    if not increasing:\n+        # Return values in their original order if not increasing\n+        if original_order[0] > original_order[1]:\n+            vmin, vmax = vmax, vmin\n     return vmin, vmax\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex 6dcd40d..c4614da 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -1155,6 +1155,7 @@ class TransformedPatchPath(TransformedPath):\n def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n     if not np.isfinite(vmin) or not np.isfinite(vmax):\n         return (-expander, expander)\n+    original_order = (vmin, vmax)\n     swapped = False\n     if vmax < vmin:\n         vmin, vmax = (vmax, vmin)\n@@ -1170,8 +1171,9 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n         else:\n             vmin -= expander * abs(vmin)\n             vmax += expander * abs(vmax)\n-    if swapped and (not increasing):\n-        vmin, vmax = (vmax, vmin)\n+    if not increasing:\n+        if original_order[0] > original_order[1]:\n+            vmin, vmax = (vmax, vmin)\n     return (vmin, vmax)\n def interval_contains(interval, val):\n     a, b = interval\n", "normalized_occurrence": 1}
