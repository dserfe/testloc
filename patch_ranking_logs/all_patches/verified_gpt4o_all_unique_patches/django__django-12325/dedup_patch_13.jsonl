{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..6658126 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -191,20 +191,12 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n \n-        # Collect the parent links for multi-table inheritance.\n-        parent_links = {}\n-        for base in reversed([new_class] + parents):\n-            # Conceptually equivalent to `if base is Model`.\n-            if not hasattr(base, '_meta'):\n-                continue\n-            # Skip concrete parent classes.\n-            if base != new_class and not base._meta.abstract:\n-                continue\n-            # Locate OneToOneField instances.\n-            for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+        # Collect the OneToOneField instances for multi-table inheritance in declared order.\n+        parent_links = []\n+        for field in new_class._meta.local_fields:\n+            if isinstance(field, OneToOneField):\n+                related = resolve_relation(new_class, field.remote_field.model)\n+                parent_links.append((make_model_tuple(related), field))\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..5f98b94 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -98,16 +98,11 @@ class ModelBase(type):\n             new_class._meta.concrete_model = base._meta.concrete_model\n         else:\n             new_class._meta.concrete_model = new_class\n-        parent_links = {}\n-        for base in reversed([new_class] + parents):\n-            if not hasattr(base, '_meta'):\n-                continue\n-            if base != new_class and (not base._meta.abstract):\n-                continue\n-            for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+        parent_links = []\n+        for field in new_class._meta.local_fields:\n+            if isinstance(field, OneToOneField):\n+                related = resolve_relation(new_class, field.remote_field.model)\n+                parent_links.append((make_model_tuple(related), field))\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n", "normalized_occurrence": 1}
