{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex adc421d..79ff8bd 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -19,8 +19,14 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+    \n+    try:\n+        class_name = obj.__class__.__name__\n+    except BaseException:\n+        class_name = \"<unknown class>\"\n+        \n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n-        exc_info, obj.__class__.__name__, id(obj)\n+        exc_info, class_name, id(obj)\n     )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 789deb9..3b93dd2 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -15,7 +15,11 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n         raise\n     except BaseException as exc:\n         exc_info = 'unpresentable exception ({})'.format(_try_repr_or_str(exc))\n-    return '<[{} raised in repr()] {} object at 0x{:x}>'.format(exc_info, obj.__class__.__name__, id(obj))\n+    try:\n+        class_name = obj.__class__.__name__\n+    except BaseException:\n+        class_name = '<unknown class>'\n+    return '<[{} raised in repr()] {} object at 0x{:x}>'.format(exc_info, class_name, id(obj))\n def _ellipsize(s: str, maxsize: int) -> str:\n     if len(s) > maxsize:\n         i = max(0, (maxsize - 3) // 2)\n", "normalized_occurrence": 1}
