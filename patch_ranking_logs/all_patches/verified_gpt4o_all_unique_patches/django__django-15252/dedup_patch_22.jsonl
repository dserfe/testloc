{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..a96e64e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -52,22 +52,25 @@ class MigrationRecorder:\n \n     def has_table(self):\n         \"\"\"Return True if the django_migrations table exists.\"\"\"\n-        with self.connection.cursor() as cursor:\n-            tables = self.connection.introspection.table_names(cursor)\n-        return self.Migration._meta.db_table in tables\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            with self.connection.cursor() as cursor:\n+                tables = self.connection.introspection.table_names(cursor)\n+            return self.Migration._meta.db_table in tables\n+        return False\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n-        if self.has_table():\n-            return\n-        # Make the table\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            # If the table's there, that's fine - we've never changed its schema\n+            # in the codebase.\n+            if self.has_table():\n+                return\n+            # Make the table\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing(\"Unable to create the django_migrations table (%s)\" % exc)\n \n     def applied_migrations(self):\n         \"\"\"\n@@ -93,4 +96,4 @@ class MigrationRecorder:\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..30595f3 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -26,17 +26,20 @@ class MigrationRecorder:\n     def migration_qs(self):\n         return self.Migration.objects.using(self.connection.alias)\n     def has_table(self):\n-        with self.connection.cursor() as cursor:\n-            tables = self.connection.introspection.table_names(cursor)\n-        return self.Migration._meta.db_table in tables\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            with self.connection.cursor() as cursor:\n+                tables = self.connection.introspection.table_names(cursor)\n+            return self.Migration._meta.db_table in tables\n+        return False\n     def ensure_schema(self):\n-        if self.has_table():\n-            return\n-        try:\n-            with self.connection.schema_editor() as editor:\n-                editor.create_model(self.Migration)\n-        except DatabaseError as exc:\n-            raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n+        if router.allow_migrate(self.connection.alias, self.Migration):\n+            if self.has_table():\n+                return\n+            try:\n+                with self.connection.schema_editor() as editor:\n+                    editor.create_model(self.Migration)\n+            except DatabaseError as exc:\n+                raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n     def applied_migrations(self):\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n", "normalized_occurrence": 1}
