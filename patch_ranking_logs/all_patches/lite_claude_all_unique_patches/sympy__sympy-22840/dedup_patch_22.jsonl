{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..4fdf9cf 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -773,7 +773,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     ([], x)\n     \"\"\"\n     from sympy.matrices import (MatrixBase, Matrix, ImmutableMatrix,\n-                                SparseMatrix, ImmutableSparseMatrix)\n+                                SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)\n \n     if not list:\n         return _cse_homogeneous(exprs,\n@@ -797,6 +797,9 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n         else:\n             temp.append(e)\n     exprs = temp\n+    # Prevent unnecessary flattening of MatrixSymbols\n+    if any(isinstance(e, MatrixSymbol) for e in exprs):\n+        return [], exprs\n     del temp\n \n     if optimizations is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..8415743 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -303,7 +303,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n         reduced_exprs.append(reduced_e)\n     return (replacements, reduced_exprs)\n def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canonical', ignore=(), list=True):\n-    from sympy.matrices import MatrixBase, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix\n+    from sympy.matrices import MatrixBase, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol\n     if not list:\n         return _cse_homogeneous(exprs, symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order, ignore=ignore)\n     if isinstance(exprs, (int, float)):\n@@ -320,6 +320,8 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n         else:\n             temp.append(e)\n     exprs = temp\n+    if any((isinstance(e, MatrixSymbol) for e in exprs)):\n+        return ([], exprs)\n     del temp\n     if optimizations is None:\n         optimizations = []\n", "normalized_occurrence": 1}
