{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14730", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d685b12..7b72b3c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1626,6 +1626,16 @@ class ManyToManyField(RelatedField):\n         return getattr(self, cache_attr)\n \n     def contribute_to_class(self, cls, name, **kwargs):\n+        # Validate that no related_name was passed for symmetrical relations\n+        if self.remote_field.symmetrical and (\n+            self.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT or\n+            self.remote_field.model == cls._meta.object_name\n+        ) and self.remote_field.related_name is not None and not self.remote_field.related_name.endswith('+'):\n+            raise ValueError(\n+                'Cannot set related_name on a symmetrical ManyToManyField '\n+                '(related model: %s).' % cls._meta.label\n+            )\n+\n         # To support multiple relations to self, it's useful to have a non-None\n         # related name on symmetrical relations for internal reasons. The\n         # concept doesn't make a lot of sense externally (\"you want me to\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 6fd437b..54552f0 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -715,6 +715,8 @@ class ManyToManyField(RelatedField):\n                     break\n         return getattr(self, cache_attr)\n     def contribute_to_class(self, cls, name, **kwargs):\n+        if self.remote_field.symmetrical and (self.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT or self.remote_field.model == cls._meta.object_name) and (self.remote_field.related_name is not None) and (not self.remote_field.related_name.endswith('+')):\n+            raise ValueError('Cannot set related_name on a symmetrical ManyToManyField (related model: %s).' % cls._meta.label)\n         if self.remote_field.symmetrical and (self.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT or self.remote_field.model == cls._meta.object_name):\n             self.remote_field.related_name = '%s_rel_+' % name\n         elif self.remote_field.is_hidden():\n", "normalized_occurrence": 1}
