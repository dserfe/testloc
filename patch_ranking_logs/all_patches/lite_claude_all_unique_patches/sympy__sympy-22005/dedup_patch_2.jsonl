{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22005", "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex 66efb1a..d512c74 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -241,6 +241,13 @@ def solve_generic(polys, opt):\n         univariate = list(filter(_is_univariate, basis))\n \n         if len(univariate) == 1:\n+            f = univariate[0]\n+            # Check if the univariate polynomial uses all variables\n+            if len(f.gens) != len(gens):\n+                raise NotImplementedError(filldedent('''\n+                    only zero-dimensional systems supported\n+                    (finite number of solutions)\n+                    '''))\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex d62db4a..3314900 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -216,6 +216,9 @@ def solve_generic(polys, opt):\n                 return None\n         univariate = list(filter(_is_univariate, basis))\n         if len(univariate) == 1:\n+            f = univariate[0]\n+            if len(f.gens) != len(gens):\n+                raise NotImplementedError(filldedent('\\n                    only zero-dimensional systems supported\\n                    (finite number of solutions)\\n                    '))\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('\\n                only zero-dimensional systems supported\\n                (finite number of solutions)\\n                '))\n", "normalized_occurrence": 1}
