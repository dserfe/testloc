{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..688c848 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,35 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+        row_block = 0\n+        row_offset = 0\n+        for numrows in self.rowblocksizes:\n+            if row_offset + numrows > i:\n                 break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            row_offset += numrows\n+            row_block += 1\n+        if row_block >= len(self.rowblocksizes):\n+            # This case is needed to handle symbolic indices\n+            from sympy import Piecewise, And, S\n+            blocks = []\n+            conditions = []\n+            offset = S.Zero\n+            for idx, nrows in enumerate(self.rowblocksizes):\n+                blocks.append(self.blocks[idx, 0][i - offset, j])\n+                conditions.append(And(i >= offset, i < offset + nrows))\n+                offset += nrows\n+            return Piecewise(*zip(blocks, conditions))\n+        \n+        # Find column entry\n+        col_block = 0\n+        col_offset = 0\n+        for numcols in self.colblocksizes:\n+            if col_offset + numcols > j:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset += numcols\n+            col_block += 1\n+            \n+        return self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..90b13a4 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,31 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+        row_block = 0\n+        row_offset = 0\n+        for numrows in self.rowblocksizes:\n+            if row_offset + numrows > i:\n                 break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            row_offset += numrows\n+            row_block += 1\n+        if row_block >= len(self.rowblocksizes):\n+            from sympy import Piecewise, And, S\n+            blocks = []\n+            conditions = []\n+            offset = S.Zero\n+            for idx, nrows in enumerate(self.rowblocksizes):\n+                blocks.append(self.blocks[idx, 0][i - offset, j])\n+                conditions.append(And(i >= offset, i < offset + nrows))\n+                offset += nrows\n+            return Piecewise(*zip(blocks, conditions))\n+        col_block = 0\n+        col_offset = 0\n+        for numcols in self.colblocksizes:\n+            if col_offset + numcols > j:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset += numcols\n+            col_block += 1\n+        return self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
