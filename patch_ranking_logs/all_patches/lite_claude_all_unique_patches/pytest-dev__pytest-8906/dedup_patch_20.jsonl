{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..7d5b628 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,12 +130,20 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when you need to skip modules\n+        that contain syntax only available in newer Python versions, as the module\n+        import would fail before pytest markers could be processed. Example::\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+            \n+            # imports that use Python 3.8+ syntax can safely follow\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where imports don't use version-specific syntax,\n+        it is better to use the :ref:`pytest.mark.skipif ref` marker to\n+        declare a test to be skipped under certain conditions like mismatching\n+        platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..16faf88 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,12 +88,20 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when you need to skip modules\n+        that contain syntax only available in newer Python versions, as the module\n+        import would fail before pytest markers could be processed. Example::\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+            \n+            # imports that use Python 3.8+ syntax can safely follow\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where imports don't use version-specific syntax,\n+        it is better to use the :ref:`pytest.mark.skipif ref` marker to\n+        declare a test to be skipped under certain conditions like mismatching\n+        platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "normalized_occurrence": 1}
