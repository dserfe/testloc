{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..e58f315 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -561,12 +561,23 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         new_model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # Filter out any unique_together constraints that are already covered by primary keys\n+            if self.option_name == \"unique_together\":\n+                pk_fields = {f.name for f in new_model._meta.local_fields if f.primary_key}\n+                old_value = {\n+                    fields for fields in old_value \n+                    if not all(f in pk_fields for f in fields)\n+                }\n+                new_value = {\n+                    fields for fields in new_value \n+                    if not all(f in pk_fields for f in fields)\n+                }\n+            \n             alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n-            alter_together(\n-                new_model,\n-                getattr(old_model._meta, self.option_name, set()),\n-                getattr(new_model._meta, self.option_name, set()),\n-            )\n+            alter_together(new_model, old_value, new_value)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b786bec..96f0811 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -243,8 +243,14 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         new_model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            if self.option_name == 'unique_together':\n+                pk_fields = {f.name for f in new_model._meta.local_fields if f.primary_key}\n+                old_value = {fields for fields in old_value if not all((f in pk_fields for f in fields))}\n+                new_value = {fields for fields in new_value if not all((f in pk_fields for f in fields))}\n             alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n-            alter_together(new_model, getattr(old_model._meta, self.option_name, set()), getattr(new_model._meta, self.option_name, set()))\n+            alter_together(new_model, old_value, new_value)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n     def references_field(self, model_name, name, app_label):\n", "normalized_occurrence": 1}
