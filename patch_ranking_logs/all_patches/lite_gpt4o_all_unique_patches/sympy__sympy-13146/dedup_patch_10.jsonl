{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13146", "model_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1ed5a09..28c13d7 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -376,7 +376,23 @@ def signsimp(expr, evaluate=None):\n     if not isinstance(e, Expr) or e.is_Atom:\n         return e\n     if e.is_Add:\n-        return e.func(*[signsimp(a) for a in e.args])\n+        e = e.func(*[signsimp(a) for a in e.args])\n+        # Combine terms that have the same base and exponent\n+        combined_terms = {}\n+        for term in e.args:\n+            if term.is_Mul:\n+                coeff, base = term.as_coeff_Mul()\n+                if base in combined_terms:\n+                    combined_terms[base] += coeff\n+                else:\n+                    combined_terms[base] = coeff\n+            else:\n+                if term in combined_terms:\n+                    combined_terms[term] += 1\n+                else:\n+                    combined_terms[term] = 1\n+        e = Add(*[coeff * base for base, coeff in combined_terms.items()])\n+        return e\n     if evaluate:\n         e = e.xreplace({m: -(-m) for m in e.atoms(Mul) if -(-m) != m})\n     return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 6ee9e94..108c304 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -140,7 +140,21 @@ def signsimp(expr, evaluate=None):\n     if not isinstance(e, Expr) or e.is_Atom:\n         return e\n     if e.is_Add:\n-        return e.func(*[signsimp(a) for a in e.args])\n+        e = e.func(*[signsimp(a) for a in e.args])\n+        combined_terms = {}\n+        for term in e.args:\n+            if term.is_Mul:\n+                coeff, base = term.as_coeff_Mul()\n+                if base in combined_terms:\n+                    combined_terms[base] += coeff\n+                else:\n+                    combined_terms[base] = coeff\n+            elif term in combined_terms:\n+                combined_terms[term] += 1\n+            else:\n+                combined_terms[term] = 1\n+        e = Add(*[coeff * base for base, coeff in combined_terms.items()])\n+        return e\n     if evaluate:\n         e = e.xreplace({m: --m for m in e.atoms(Mul) if --m != m})\n     return e\n", "normalized_occurrence": 1}
