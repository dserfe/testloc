{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..e528b6d 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -263,6 +263,10 @@ class Pow(Expr):\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+            elif _coeff_isneg(b) and e.is_number and not e.is_integer:\n+                # For negative base with non-integer exponent,\n+                # don't simplify to ensure consistent branch cuts\n+                return None\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n             elif b is S.One:\n@@ -1640,4 +1644,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..92368b4 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -106,6 +106,8 @@ class Pow(Expr):\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+            elif _coeff_isneg(b) and e.is_number and (not e.is_integer):\n+                return None\n             if S.NaN in (b, e):\n                 return S.NaN\n             elif b is S.One:\n", "normalized_occurrence": 1}
