{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..665aaef 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,6 +355,13 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        # Handle callable defaults for fields not in object_data\n+        opts = self._meta\n+        for f in opts.model._meta.fields:\n+            if f.name not in object_data and f.has_default():\n+                default = f.get_default()\n+                object_data[f.name] = default() if callable(default) else default\n+\n         # if initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..4096a7b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,11 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        opts = self._meta\n+        for f in opts.model._meta.fields:\n+            if f.name not in object_data and f.has_default():\n+                default = f.get_default()\n+                object_data[f.name] = default() if callable(default) else default\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
