{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..77a7238 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -93,45 +93,43 @@ class PrettyPrinter(Printer):\n         return prettyForm(sstr(e, full_prec=full_prec))\n \n     def _print_Cross(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        if e._expr1.is_Add or e._expr1.is_Mul:\n+            vec1 = prettyForm(*vec1.parens())\n+        if e._expr2.is_Add or e._expr2.is_Mul:\n+            vec2 = prettyForm(*vec2.parens())\n+        cross = self._print(U('MULTIPLICATION SIGN')) if self._use_unicode else prettyForm('x')\n+        pform = prettyForm(*vec1.right(' ' + cross + ' ', vec2))\n         return pform\n \n     def _print_Curl(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n+        vec = self._print(e._expr)\n+        if e._expr.is_Add or e._expr.is_Mul:\n+            vec = prettyForm(*vec.parens())\n+        nabla = self._print(U('NABLA')) if self._use_unicode else prettyForm('del')\n+        cross = self._print(U('MULTIPLICATION SIGN')) if self._use_unicode else prettyForm('x')\n+        pform = prettyForm(*nabla.right(' ' + cross + ' ', vec))\n         return pform\n \n     def _print_Divergence(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n+        vec = self._print(e._expr)\n+        if e._expr.is_Add or e._expr.is_Mul:\n+            vec = prettyForm(*vec.parens())\n+        nabla = self._print(U('NABLA')) if self._use_unicode else prettyForm('del')\n+        dot = self._print(U('DOT OPERATOR')) if self._use_unicode else prettyForm('.')\n+        pform = prettyForm(*nabla.right(' ' + dot + ' ', vec))\n         return pform\n \n     def _print_Dot(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        if e._expr1.is_Add or e._expr1.is_Mul:\n+            vec1 = prettyForm(*vec1.parens())\n+        if e._expr2.is_Add or e._expr2.is_Mul:\n+            vec2 = prettyForm(*vec2.parens())\n+        dot = self._print(U('DOT OPERATOR')) if self._use_unicode else prettyForm('.')\n+        pform = prettyForm(*vec1.right(' ' + dot + ' ', vec2))\n         return pform\n \n     def _print_Gradient(self, e):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..fa49e80 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -58,42 +58,40 @@ class PrettyPrinter(Printer):\n             full_prec = self._print_level == 1\n         return prettyForm(sstr(e, full_prec=full_prec))\n     def _print_Cross(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        if e._expr1.is_Add or e._expr1.is_Mul:\n+            vec1 = prettyForm(*vec1.parens())\n+        if e._expr2.is_Add or e._expr2.is_Mul:\n+            vec2 = prettyForm(*vec2.parens())\n+        cross = self._print(U('MULTIPLICATION SIGN')) if self._use_unicode else prettyForm('x')\n+        pform = prettyForm(*vec1.right(' ' + cross + ' ', vec2))\n         return pform\n     def _print_Curl(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n+        vec = self._print(e._expr)\n+        if e._expr.is_Add or e._expr.is_Mul:\n+            vec = prettyForm(*vec.parens())\n+        nabla = self._print(U('NABLA')) if self._use_unicode else prettyForm('del')\n+        cross = self._print(U('MULTIPLICATION SIGN')) if self._use_unicode else prettyForm('x')\n+        pform = prettyForm(*nabla.right(' ' + cross + ' ', vec))\n         return pform\n     def _print_Divergence(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n+        vec = self._print(e._expr)\n+        if e._expr.is_Add or e._expr.is_Mul:\n+            vec = prettyForm(*vec.parens())\n+        nabla = self._print(U('NABLA')) if self._use_unicode else prettyForm('del')\n+        dot = self._print(U('DOT OPERATOR')) if self._use_unicode else prettyForm('.')\n+        pform = prettyForm(*nabla.right(' ' + dot + ' ', vec))\n         return pform\n     def _print_Dot(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        if e._expr1.is_Add or e._expr1.is_Mul:\n+            vec1 = prettyForm(*vec1.parens())\n+        if e._expr2.is_Add or e._expr2.is_Mul:\n+            vec2 = prettyForm(*vec2.parens())\n+        dot = self._print(U('DOT OPERATOR')) if self._use_unicode else prettyForm('.')\n+        pform = prettyForm(*vec1.right(' ' + dot + ' ', vec2))\n         return pform\n     def _print_Gradient(self, e):\n         func = e._expr\n", "normalized_occurrence": 1}
