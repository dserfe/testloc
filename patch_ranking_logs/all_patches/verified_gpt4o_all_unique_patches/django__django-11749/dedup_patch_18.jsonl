{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..6c0de20 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -131,10 +131,26 @@ def call_command(command_name, *args, **options):\n \n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # to parse_args(), including those from mutually exclusive groups.\n+    required_options = [\n+        opt for opt in parser_actions\n+        if opt.required and opt.dest in options\n+    ]\n+\n+    mutually_exclusive_required = [\n+        group for group in parser._mutually_exclusive_groups\n+        if group.required\n+    ]\n+\n+    for group in mutually_exclusive_required:\n+        for opt in group._group_actions:\n+            if opt.dest in options:\n+                required_options.append(opt)\n+                break\n+\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in required_options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..7c08135 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,14 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    required_options = [opt for opt in parser_actions if opt.required and opt.dest in options]\n+    mutually_exclusive_required = [group for group in parser._mutually_exclusive_groups if group.required]\n+    for group in mutually_exclusive_required:\n+        for opt in group._group_actions:\n+            if opt.dest in options:\n+                required_options.append(opt)\n+                break\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in required_options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
