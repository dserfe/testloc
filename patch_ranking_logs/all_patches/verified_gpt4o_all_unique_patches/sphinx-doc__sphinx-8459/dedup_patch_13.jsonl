{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..782dca3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -56,6 +56,12 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         return\n \n     annotations = app.env.temp_data.get('annotations', {})\n+\n+    # Apply type aliases if they are defined\n+    type_aliases = app.config.autodoc_type_aliases\n+    for key, value in annotations.items():\n+        if value in type_aliases:\n+            annotations[key] = type_aliases[value]\n     if annotations.get(fullname, {}):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n         if field_lists == []:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..0d0c54b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -35,6 +35,10 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     except KeyError:\n         return\n     annotations = app.env.temp_data.get('annotations', {})\n+    type_aliases = app.config.autodoc_type_aliases\n+    for key, value in annotations.items():\n+        if value in type_aliases:\n+            annotations[key] = type_aliases[value]\n     if annotations.get(fullname, {}):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n         if field_lists == []:\n", "normalized_occurrence": 1}
