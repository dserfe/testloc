{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..a607e7d 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2180,6 +2180,13 @@ class SpanSelector(_SelectorWidget):\n         self._prev = self._get_data(event)\n \n         if self._active_handle is None:\n+            # Store current axes limits if in interactive mode\n+            if self._interactive:\n+                if self.direction == 'horizontal':\n+                    self._saved_limits = self.ax.get_xlim()\n+                else:\n+                    self._saved_limits = self.ax.get_ylim()\n+            \n             # when the press event outside the span, we initially set the\n             # visibility to False and extents to (v, v)\n             # update will be called when setting the extents\n@@ -2188,6 +2195,13 @@ class SpanSelector(_SelectorWidget):\n             # We need to set the visibility back, so the span selector will be\n             # drawn when necessary (span width > 0)\n             self.visible = True\n+            \n+            # Restore original limits if in interactive mode\n+            if self._interactive:\n+                if self.direction == 'horizontal':\n+                    self.ax.set_xlim(self._saved_limits)\n+                else:\n+                    self.ax.set_ylim(self._saved_limits)\n         else:\n             self.set_visible(True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..1a451ff 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1783,9 +1783,19 @@ class SpanSelector(_SelectorWidget):\n         self._pressv = v\n         self._prev = self._get_data(event)\n         if self._active_handle is None:\n+            if self._interactive:\n+                if self.direction == 'horizontal':\n+                    self._saved_limits = self.ax.get_xlim()\n+                else:\n+                    self._saved_limits = self.ax.get_ylim()\n             self.visible = False\n             self.extents = (v, v)\n             self.visible = True\n+            if self._interactive:\n+                if self.direction == 'horizontal':\n+                    self.ax.set_xlim(self._saved_limits)\n+                else:\n+                    self.ax.set_ylim(self._saved_limits)\n         else:\n             self.set_visible(True)\n         return False\n", "normalized_occurrence": 1}
