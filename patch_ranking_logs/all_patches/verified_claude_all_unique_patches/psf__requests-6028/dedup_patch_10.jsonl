{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..56a8267 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -191,9 +191,19 @@ class HTTPAdapter(BaseAdapter):\n             )\n         else:\n             proxy_headers = self.proxy_headers(proxy)\n+            \n+            # Extract credentials from proxy URL if present\n+            username = None\n+            password = None\n+            if '@' in proxy:\n+                auth, host = proxy.split('@', 1)\n+                username, password = auth.split(':', 1)\n+            \n             manager = self.proxy_manager[proxy] = proxy_from_url(\n                 proxy,\n                 proxy_headers=proxy_headers,\n+                proxy_username=username,\n+                proxy_password=password,\n                 num_pools=self._pool_connections,\n                 maxsize=self._pool_maxsize,\n                 block=self._pool_block,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..ddc2cfe 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -75,7 +75,12 @@ class HTTPAdapter(BaseAdapter):\n             manager = self.proxy_manager[proxy] = SOCKSProxyManager(proxy, username=username, password=password, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)\n         else:\n             proxy_headers = self.proxy_headers(proxy)\n-            manager = self.proxy_manager[proxy] = proxy_from_url(proxy, proxy_headers=proxy_headers, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)\n+            username = None\n+            password = None\n+            if '@' in proxy:\n+                auth, host = proxy.split('@', 1)\n+                username, password = auth.split(':', 1)\n+            manager = self.proxy_manager[proxy] = proxy_from_url(proxy, proxy_headers=proxy_headers, proxy_username=username, proxy_password=password, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)\n         return manager\n     def cert_verify(self, conn, url, verify, cert):\n         if url.lower().startswith('https') and verify:\n", "normalized_occurrence": 1}
