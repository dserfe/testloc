{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..4de28ff 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -88,9 +88,10 @@ def expand_modules(\n                 modname = \".\".join(\n                     modutils.modpath_from_file(something, path=additional_search_path)\n                 )\n-            except ImportError:\n-                modname = os.path.splitext(basename)[0]\n-            if os.path.isdir(something):\n+            except ImportError as ex:\n+                errors.append({\"key\": \"fatal\", \"mod\": basename, \"ex\": ex})\n+                continue\n+            if os.path.isdir(something) and not os.path.isfile(os.path.join(something, \"__init__.py\")):\n                 filepath = os.path.join(something, \"__init__.py\")\n             else:\n                 filepath = something\n@@ -146,9 +147,13 @@ def expand_modules(\n                 ) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                     continue\n \n-                modpath = _modpath_from_file(\n-                    subfilepath, is_namespace, path=additional_search_path\n-                )\n+                try:\n+                    modpath = _modpath_from_file(\n+                        subfilepath, is_namespace, path=additional_search_path\n+                    )\n+                except ImportError as ex:\n+                    errors.append({\"key\": \"fatal\", \"mod\": subfilepath, \"ex\": ex})\n+                    continue\n                 submodname = \".\".join(modpath)\n                 result.append(\n                     {\n@@ -159,4 +164,4 @@ def expand_modules(\n                         \"basename\": modname,\n                     }\n                 )\n-    return result, errors\n+    return result, errors\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..8af5142 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -39,9 +39,10 @@ def expand_modules(files_or_modules: Sequence[str], ignore_list: list[str], igno\n         if os.path.exists(something):\n             try:\n                 modname = '.'.join(modutils.modpath_from_file(something, path=additional_search_path))\n-            except ImportError:\n-                modname = os.path.splitext(basename)[0]\n-            if os.path.isdir(something):\n+            except ImportError as ex:\n+                errors.append({'key': 'fatal', 'mod': basename, 'ex': ex})\n+                continue\n+            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n                 filepath = os.path.join(something, '__init__.py')\n             else:\n                 filepath = something\n@@ -73,7 +74,11 @@ def expand_modules(files_or_modules: Sequence[str], ignore_list: list[str], igno\n                     continue\n                 if _is_in_ignore_list_re(os.path.basename(subfilepath), ignore_list_re) or _is_in_ignore_list_re(subfilepath, ignore_list_paths_re):\n                     continue\n-                modpath = _modpath_from_file(subfilepath, is_namespace, path=additional_search_path)\n+                try:\n+                    modpath = _modpath_from_file(subfilepath, is_namespace, path=additional_search_path)\n+                except ImportError as ex:\n+                    errors.append({'key': 'fatal', 'mod': subfilepath, 'ex': ex})\n+                    continue\n                 submodname = '.'.join(modpath)\n                 result.append({'path': subfilepath, 'name': submodname, 'isarg': False, 'basepath': filepath, 'basename': modname})\n     return (result, errors)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
