{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7521", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex f40cad0..e4af961 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -196,7 +196,8 @@ class CaptureIO(io.TextIOWrapper):\n \n     def getvalue(self) -> str:\n         assert isinstance(self.buffer, io.BytesIO)\n-        return self.buffer.getvalue().decode(\"UTF-8\")\n+        # Decode without transforming carriage returns\n+        return self.buffer.getvalue().decode(\"UTF-8\").replace(\"\\r\\n\", \"\\n\")\n \n \n class TeeCaptureIO(CaptureIO):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 230e591..2771022 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -85,7 +85,7 @@ class CaptureIO(io.TextIOWrapper):\n         super().__init__(io.BytesIO(), encoding='UTF-8', newline='', write_through=True)\n     def getvalue(self) -> str:\n         assert isinstance(self.buffer, io.BytesIO)\n-        return self.buffer.getvalue().decode('UTF-8')\n+        return self.buffer.getvalue().decode('UTF-8').replace('\\r\\n', '\\n')\n class TeeCaptureIO(CaptureIO):\n     def __init__(self, other: TextIO) -> None:\n         self._other = other\n", "normalized_occurrence": 3}
