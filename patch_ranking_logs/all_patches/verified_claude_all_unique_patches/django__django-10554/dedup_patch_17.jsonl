{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..834691f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -460,6 +460,23 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+\n+        # Handle ordering for compound (e.g. UNION) queries\n+        if self.query.order_by and features.supports_slicing_ordering_in_compound:\n+            if not isinstance(self.query.order_by, (list, tuple)):\n+                self.query.order_by = [self.query.order_by]\n+            ordering = []\n+            for field in self.query.order_by:\n+                if isinstance(field, str) and field.startswith('-'):\n+                    field_name = field[1:]\n+                    desc = True\n+                else:\n+                    field_name = field\n+                    desc = False\n+                ordering.append(' DESC'.join([field_name] + ([' DESC'] if desc else [])))\n+            if ordering:\n+                result.append(' ORDER BY ' + ', '.join(ordering))\n+\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..03305c8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,6 +265,20 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        if self.query.order_by and features.supports_slicing_ordering_in_compound:\n+            if not isinstance(self.query.order_by, (list, tuple)):\n+                self.query.order_by = [self.query.order_by]\n+            ordering = []\n+            for field in self.query.order_by:\n+                if isinstance(field, str) and field.startswith('-'):\n+                    field_name = field[1:]\n+                    desc = True\n+                else:\n+                    field_name = field\n+                    desc = False\n+                ordering.append(' DESC'.join([field_name] + ([' DESC'] if desc else [])))\n+            if ordering:\n+                result.append(' ORDER BY ' + ', '.join(ordering))\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
