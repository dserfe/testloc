{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..f4f583f 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -694,9 +694,29 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n         else:  # \"sigmoid\"\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n+        # Wrap calibrator to ensure correct output shape\n+        calibrator = _wrap_calibrator(calibrator)\n         calibrators.append(calibrator)\n \n     pipeline = _CalibratedClassifier(clf, calibrators, method=method, classes=classes)\n+\n+def _wrap_calibrator(calibrator):\n+    \"\"\"Wrap calibrator to ensure output is 1-dimensional.\n+    \n+    This is needed when the global output config is set to pandas and the calibrator\n+    returns a dataframe.\n+    \"\"\"\n+    predict = calibrator.predict\n+    \n+    def wrapped_predict(X):\n+        pred = predict(X)\n+        # Convert to numpy and ensure 1-dimensional output\n+        if hasattr(pred, \"to_numpy\"):\n+            pred = pred.to_numpy()\n+        return np.asarray(pred).ravel()\n+    \n+    calibrator.predict = wrapped_predict\n+    return calibrator\n     return pipeline\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..f62b96e 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -151,8 +151,18 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n         else:\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n+        calibrator = _wrap_calibrator(calibrator)\n         calibrators.append(calibrator)\n     pipeline = _CalibratedClassifier(clf, calibrators, method=method, classes=classes)\n+def _wrap_calibrator(calibrator):\n+    predict = calibrator.predict\n+    def wrapped_predict(X):\n+        pred = predict(X)\n+        if hasattr(pred, 'to_numpy'):\n+            pred = pred.to_numpy()\n+        return np.asarray(pred).ravel()\n+    calibrator.predict = wrapped_predict\n+    return calibrator\n     return pipeline\n class _CalibratedClassifier:\n     def __init__(self, estimator, calibrators, *, classes, method='sigmoid'):\n", "normalized_occurrence": 1}
