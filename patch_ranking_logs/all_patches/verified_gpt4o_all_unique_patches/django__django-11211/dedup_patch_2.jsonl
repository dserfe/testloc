{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..209eb43 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -191,6 +191,10 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+            # Convert UUIDs to their string representation for comparison\n+            if issubclass(ct.model_class(), models.Model) and \\\n+                    isinstance(ct.model_class()._meta.pk, models.UUIDField):\n+                fkeys = [str(fk) for fk in fkeys]\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n \n         # For doing the join in Python, we have to match both the FK val and the\n@@ -202,8 +206,11 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                fk_val = getattr(obj, self.fk_field)\n+                # Convert UUIDs to their string representation for comparison\n+                if isinstance(fk_val, uuid.UUID):\n+                    fk_val = str(fk_val)\n+                return (model._meta.pk.get_prep_value(fk_val), model)\n \n         return (\n             ret_val,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..b202ccf 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -93,6 +93,8 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n+            if issubclass(ct.model_class(), models.Model) and isinstance(ct.model_class()._meta.pk, models.UUIDField):\n+                fkeys = [str(fk) for fk in fkeys]\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n         def gfk_key(obj):\n             ct_id = getattr(obj, ct_attname)\n@@ -100,7 +102,10 @@ class GenericForeignKey(FieldCacheMixin):\n                 return None\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n+                fk_val = getattr(obj, self.fk_field)\n+                if isinstance(fk_val, uuid.UUID):\n+                    fk_val = str(fk_val)\n+                return (model._meta.pk.get_prep_value(fk_val), model)\n         return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
