{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..9f195b0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,17 +1260,26 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n+                    # First try current module (if specified)\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    # For unqualified names in a submodule context, don't search parent modules\n+                    elif modname and '.' in modname and name in self.objects and \\\n+                         self.objects[name].objtype in objtypes:\n+                        # Skip this case to avoid matching parent module objects\n+                        pass\n+                    # For top-level modules or no module context, allow direct matches\n+                    elif (not modname or '.' not in modname) and \\\n+                         name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - but only within current module if specified\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                                   self.objects[oname].objtype in objtypes and\n+                                   (not modname or oname.startswith(modname + '.'))]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..d0b5a70 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,11 +761,13 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    elif modname and '.' in modname and (name in self.objects) and (self.objects[name].objtype in objtypes):\n+                        pass\n+                    elif (not modname or '.' not in modname) and name in self.objects and (self.objects[name].objtype in objtypes):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes and (not modname or oname.startswith(modname + '.'))]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
