{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..e3e0a58 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -191,6 +191,13 @@ class ForwardManyToOneDescriptor:\n                 # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                # Ensure we don't lose the deferred state of prefetched objects\n+                if hasattr(rel_obj, '_prefetched_objects_cache'):\n+                    for cached_name, prefetched_objects in rel_obj._prefetched_objects_cache.items():\n+                        if isinstance(prefetched_objects, ModelIterable):\n+                            for obj in prefetched_objects:\n+                                if hasattr(obj, '_deferred_fields'):\n+                                    obj._deferred_fields = set(obj._deferred_fields)\n             self.field.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None and not self.field.null:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..7d64264 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -60,6 +60,12 @@ class ForwardManyToOneDescriptor:\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                if hasattr(rel_obj, '_prefetched_objects_cache'):\n+                    for cached_name, prefetched_objects in rel_obj._prefetched_objects_cache.items():\n+                        if isinstance(prefetched_objects, ModelIterable):\n+                            for obj in prefetched_objects:\n+                                if hasattr(obj, '_deferred_fields'):\n+                                    obj._deferred_fields = set(obj._deferred_fields)\n             self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n", "normalized_occurrence": 1}
