{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..3a22474 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,14 +120,22 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n+        # Fast path: if other is already a Basic/Expr, we can compare directly\n+        if isinstance(other, Basic):\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n+        else:\n+            # Only attempt to sympify objects that define __sympy__ or are numbers\n+            if not (hasattr(other, '__sympy__') or isinstance(other, (int, float))):\n+                return False\n+            try:\n+                other = _sympify(other)\n+                if not isinstance(other, Expr):\n+                    return False\n+            except (SympifyError, SyntaxError):\n+                return False\n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n+        if not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..4916fc3 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,12 +46,18 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n+        if isinstance(other, Basic):\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n+        else:\n+            if not (hasattr(other, '__sympy__') or isinstance(other, (int, float))):\n+                return False\n+            try:\n+                other = _sympify(other)\n+                if not isinstance(other, Expr):\n+                    return False\n+            except (SympifyError, SyntaxError):\n+                return False\n         if not (self.is_Number and other.is_Number) and type(self) != type(other):\n             return False\n         a, b = (self._hashable_content(), other._hashable_content())\n", "normalized_occurrence": 1}
