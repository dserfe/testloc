{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..f3743f1 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -15,6 +15,11 @@ __all__ = [\n \n class Aggregate(Func):\n     template = '%(function)s(%(distinct)s%(expressions)s)'\n+\n+    def __init__(self, *expressions, distinct=False, filter=None, **extra):\n+        if distinct and not self.allow_distinct:\n+            raise TypeError(\"%s does not allow distinct.\" % self.__class__.__name__)\n+        self.distinct = distinct\n     contains_aggregate = True\n     name = None\n     filter_template = '%s FILTER (WHERE %%(filter)s)'\n@@ -68,7 +73,7 @@ class Aggregate(Func):\n         return []\n \n     def as_sql(self, compiler, connection, **extra_context):\n-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''\n+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..11572da 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -5,6 +5,10 @@ from django.db.models.functions.mixins import FixDurationInputMixin, NumericOutp\n __all__ = ['Aggregate', 'Avg', 'Count', 'Max', 'Min', 'StdDev', 'Sum', 'Variance']\n class Aggregate(Func):\n     template = '%(function)s(%(distinct)s%(expressions)s)'\n+    def __init__(self, *expressions, distinct=False, filter=None, **extra):\n+        if distinct and (not self.allow_distinct):\n+            raise TypeError('%s does not allow distinct.' % self.__class__.__name__)\n+        self.distinct = distinct\n     contains_aggregate = True\n     name = None\n     filter_template = '%s FILTER (WHERE %%(filter)s)'\n@@ -46,7 +50,7 @@ class Aggregate(Func):\n     def get_group_by_cols(self):\n         return []\n     def as_sql(self, compiler, connection, **extra_context):\n-        extra_context['distinct'] = 'DISTINCT' if self.distinct else ''\n+        extra_context['distinct'] = 'DISTINCT ' if self.distinct else ''\n         if self.filter:\n             if connection.features.supports_aggregate_filter_clause:\n                 filter_sql, filter_params = self.filter.as_sql(compiler, connection)\n", "normalized_occurrence": 1}
