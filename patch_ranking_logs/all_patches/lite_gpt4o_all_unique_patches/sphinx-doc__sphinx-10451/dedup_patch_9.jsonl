{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..4e28764 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -116,12 +116,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             continue\n \n         arg = arguments.get(name, {})\n-        if not arg.get('type'):\n+        if not arg.get('type') and name not in ('args', 'kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ('args', 'kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -168,7 +168,7 @@ def augment_descriptions_with_types(\n \n     # Add 'type' for parameters with a description but no declared type.\n     for name in annotations:\n-        if name in ('return', 'returns'):\n+        if name in ('return', 'returns', 'args', 'kwargs'):\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..a77f364 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -86,12 +86,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n-        if not arg.get('type'):\n+        if not arg.get('type') and name not in ('args', 'kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ('args', 'kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -126,7 +126,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n     for name in annotations:\n-        if name in ('return', 'returns'):\n+        if name in ('return', 'returns', 'args', 'kwargs'):\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n", "normalized_occurrence": 1}
