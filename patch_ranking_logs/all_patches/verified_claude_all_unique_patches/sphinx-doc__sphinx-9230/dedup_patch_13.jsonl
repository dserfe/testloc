{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..fd9eeae 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -148,9 +148,15 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n                 result = []\n+                # Check if we're inside a Subscript (dictionary type) context\n+                inside_subscript = any(isinstance(n, ast.Subscript) for n in reversed(node.__dict__.get('_ctx_stack', [])))\n                 for elem in node.elts:\n                     result.extend(unparse(elem))\n-                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                    # Use comma without space for dictionary type parameters\n+                    if inside_subscript:\n+                        result.append(addnodes.desc_sig_punctuation('', ','))\n+                    else:\n+                        result.append(addnodes.desc_sig_punctuation('', ', '))\n                 result.pop()\n             else:\n                 result = [addnodes.desc_sig_punctuation('', '('),\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..d7e8a38 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -97,9 +97,13 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n         elif isinstance(node, ast.Tuple):\n             if node.elts:\n                 result = []\n+                inside_subscript = any((isinstance(n, ast.Subscript) for n in reversed(node.__dict__.get('_ctx_stack', []))))\n                 for elem in node.elts:\n                     result.extend(unparse(elem))\n-                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+                    if inside_subscript:\n+                        result.append(addnodes.desc_sig_punctuation('', ','))\n+                    else:\n+                        result.append(addnodes.desc_sig_punctuation('', ', '))\n                 result.pop()\n             else:\n                 result = [addnodes.desc_sig_punctuation('', '('), addnodes.desc_sig_punctuation('', ')')]\n", "normalized_occurrence": 1}
