{"model_name_or_path": "agentless", "instance_id": "django__django-11564", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 3fb83f0..502de0c 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -12,6 +12,14 @@ from django.core.files.base import ContentFile\n from django.core.files.storage import FileSystemStorage, get_storage_class\n from django.utils.functional import LazyObject\n \n+def get_script_name():\n+    from django.core.handlers.wsgi import WSGIRequest\n+    try:\n+        request = WSGIRequest.threads.request\n+        return request.META.get('SCRIPT_NAME', '')\n+    except AttributeError:\n+        return ''\n+\n \n class StaticFilesStorage(FileSystemStorage):\n     \"\"\"\n@@ -145,7 +153,9 @@ class HashedFilesMixin:\n         \"\"\"\n         Return the non-hashed URL in DEBUG mode.\n         \"\"\"\n-        return self._url(self.stored_name, name, force)\n+        url = self._url(self.stored_name, name, force)\n+        script_name = get_script_name()\n+        return script_name + url\n \n     def url_converter(self, name, hashed_files, template=None):\n         \"\"\"\n@@ -197,7 +207,8 @@ class HashedFilesMixin:\n                 transformed_url += ('?#' if '?#' in url else '#') + fragment\n \n             # Return the hashed version to the file\n-            return template % unquote(transformed_url)\n+            script_name = get_script_name()\n+            return template % unquote(script_name + transformed_url)\n \n         return converter\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 510129c..83c16dc 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -10,6 +10,13 @@ from django.core.exceptions import ImproperlyConfigured\n from django.core.files.base import ContentFile\n from django.core.files.storage import FileSystemStorage, get_storage_class\n from django.utils.functional import LazyObject\n+def get_script_name():\n+    from django.core.handlers.wsgi import WSGIRequest\n+    try:\n+        request = WSGIRequest.threads.request\n+        return request.META.get('SCRIPT_NAME', '')\n+    except AttributeError:\n+        return ''\n class StaticFilesStorage(FileSystemStorage):\n     def __init__(self, location=None, base_url=None, *args, **kwargs):\n         if location is None:\n@@ -99,7 +106,9 @@ class HashedFilesMixin:\n             final_url = urlunsplit(urlparts)\n         return unquote(final_url)\n     def url(self, name, force=False):\n-        return self._url(self.stored_name, name, force)\n+        url = self._url(self.stored_name, name, force)\n+        script_name = get_script_name()\n+        return script_name + url\n     def url_converter(self, name, hashed_files, template=None):\n         if template is None:\n             template = self.default_template\n@@ -120,7 +129,8 @@ class HashedFilesMixin:\n             transformed_url = '/'.join(url_path.split('/')[:-1] + hashed_url.split('/')[-1:])\n             if fragment:\n                 transformed_url += ('?#' if '?#' in url else '#') + fragment\n-            return template % unquote(transformed_url)\n+            script_name = get_script_name()\n+            return template % unquote(script_name + transformed_url)\n         return converter\n     def post_process(self, paths, dry_run=False, **options):\n         if dry_run:\n", "normalized_occurrence": 1}
