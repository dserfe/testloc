{"model_name_or_path": "agentless", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 13e70df..2f38996 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -277,15 +277,15 @@ class SQLCompiler:\n         can add aliases to clauses that do not yet have one, or it can\n         add totally new select clauses).\n         \"\"\"\n-        if self.query.extra_order_by:\n-            ordering = self.query.extra_order_by\n-        elif not self.query.default_ordering:\n-            ordering = self.query.order_by\n-        elif self.query.order_by:\n+        if self.query.order_by:\n             ordering = self.query.order_by\n+        elif self.query.extra_order_by:\n+            ordering = self.query.extra_order_by\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n+        elif not self.query.default_ordering:\n+            ordering = self.query.order_by\n         else:\n             ordering = []\n         if self.query.standard_ordering:\n@@ -727,7 +727,8 @@ class SQLCompiler:\n         # If we get to this point and the field is a relation to another model,\n         # append the default ordering for that model unless it is the pk\n         # shortcut or the attribute name of the field that is specified.\n-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':\n+        # Ensure that self-referencing foreign keys don't introduce redundant joins\n+        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk' and alias != self.query.get_initial_alias():\n             # Firstly, avoid infinite loops.\n             already_seen = already_seen or set()\n             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d98aa67..9bd47a9 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -132,15 +132,15 @@ class SQLCompiler:\n             ret.append((col, (sql, params), alias))\n         return (ret, klass_info, annotations)\n     def get_order_by(self):\n-        if self.query.extra_order_by:\n-            ordering = self.query.extra_order_by\n-        elif not self.query.default_ordering:\n-            ordering = self.query.order_by\n-        elif self.query.order_by:\n+        if self.query.order_by:\n             ordering = self.query.order_by\n+        elif self.query.extra_order_by:\n+            ordering = self.query.extra_order_by\n         elif self.query.get_meta().ordering:\n             ordering = self.query.get_meta().ordering\n             self._meta_ordering = ordering\n+        elif not self.query.default_ordering:\n+            ordering = self.query.order_by\n         else:\n             ordering = []\n         if self.query.standard_ordering:\n@@ -415,7 +415,7 @@ class SQLCompiler:\n         descending = order == 'DESC'\n         pieces = name.split(LOOKUP_SEP)\n         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)\n-        if field.is_relation and opts.ordering and (getattr(field, 'attname', None) != name) and (name != 'pk'):\n+        if field.is_relation and opts.ordering and (getattr(field, 'attname', None) != name) and (name != 'pk') and (alias != self.query.get_initial_alias()):\n             already_seen = already_seen or set()\n             join_tuple = tuple((getattr(self.query.alias_map[j], 'join_cols', None) for j in joins))\n             if join_tuple in already_seen:\n", "normalized_occurrence": 1}
