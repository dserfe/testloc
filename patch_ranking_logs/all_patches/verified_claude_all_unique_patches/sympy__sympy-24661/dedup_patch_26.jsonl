{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..98b6110 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1109,6 +1109,10 @@ class EvaluateFalseTransformer(ast.NodeTransformer):\n         ast.BitOr: 'Or',\n         ast.BitAnd: 'And',\n         ast.BitXor: 'Not',\n+        ast.Lt: 'Lt',\n+        ast.Gt: 'Gt',\n+        ast.LtE: 'Le',\n+        ast.GtE: 'Ge',\n     }\n     functions = (\n         'Abs', 'im', 're', 'sign', 'arg', 'conjugate',\n", "occurrence": 4, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..67024d8 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -527,7 +527,7 @@ def evaluateFalse(s: str):\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n     return ast.fix_missing_locations(transformed_node)\n class EvaluateFalseTransformer(ast.NodeTransformer):\n-    operators = {ast.Add: 'Add', ast.Mult: 'Mul', ast.Pow: 'Pow', ast.Sub: 'Add', ast.Div: 'Mul', ast.BitOr: 'Or', ast.BitAnd: 'And', ast.BitXor: 'Not'}\n+    operators = {ast.Add: 'Add', ast.Mult: 'Mul', ast.Pow: 'Pow', ast.Sub: 'Add', ast.Div: 'Mul', ast.BitOr: 'Or', ast.BitAnd: 'And', ast.BitXor: 'Not', ast.Lt: 'Lt', ast.Gt: 'Gt', ast.LtE: 'Le', ast.GtE: 'Ge'}\n     functions = ('Abs', 'im', 're', 'sign', 'arg', 'conjugate', 'acos', 'acot', 'acsc', 'asec', 'asin', 'atan', 'acosh', 'acoth', 'acsch', 'asech', 'asinh', 'atanh', 'cos', 'cot', 'csc', 'sec', 'sin', 'tan', 'cosh', 'coth', 'csch', 'sech', 'sinh', 'tanh', 'exp', 'ln', 'log', 'sqrt', 'cbrt')\n     def flatten(self, args, func):\n         result = []\n", "normalized_occurrence": 4}
