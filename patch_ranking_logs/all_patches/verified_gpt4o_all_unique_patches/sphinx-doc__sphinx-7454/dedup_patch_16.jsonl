{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..90e4f44 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -31,9 +31,15 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    param_annotation = typing.stringify(param.annotation)\n+                    if param_annotation == 'NoneType':\n+                        param_annotation = 'None'\n+                    annotation[param.name] = param_annotation\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                ret_annotation = typing.stringify(sig.return_annotation)\n+                if ret_annotation == 'NoneType':\n+                    ret_annotation = 'None'\n+                annotation['return'] = ret_annotation\n     except (TypeError, ValueError):\n         pass\n \n@@ -138,4 +144,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..e7940c1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -15,9 +15,15 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    param_annotation = typing.stringify(param.annotation)\n+                    if param_annotation == 'NoneType':\n+                        param_annotation = 'None'\n+                    annotation[param.name] = param_annotation\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                ret_annotation = typing.stringify(sig.return_annotation)\n+                if ret_annotation == 'NoneType':\n+                    ret_annotation = 'None'\n+                annotation['return'] = ret_annotation\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
