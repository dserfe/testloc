{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..395202c 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -193,7 +193,7 @@ class MatrixDeterminant(MatrixCommon):\n             # find a pivot and extract the remaining matrix\n             # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362\n             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\n-            if pivot_pos == None:\n+            if pivot_pos is None or pivot_val == 0:\n                 return S.Zero\n \n             # if we have a valid pivot, we'll do a \"row swap\", so keep the\n@@ -208,7 +208,7 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..30e1737 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -74,7 +74,7 @@ class MatrixDeterminant(MatrixCommon):\n             elif mat.rows == 1:\n                 return mat[0, 0]\n             pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\n-            if pivot_pos == None:\n+            if pivot_pos is None or pivot_val == 0:\n                 return S.Zero\n             sign = (-1) ** (pivot_pos % 2)\n             rows = list((i for i in range(mat.rows) if i != pivot_pos))\n@@ -83,7 +83,7 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n             return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n         return cancel(bareiss(self))\n", "normalized_occurrence": 1}
