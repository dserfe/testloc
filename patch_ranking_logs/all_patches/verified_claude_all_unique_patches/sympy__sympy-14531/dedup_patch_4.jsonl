{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 1c19fd6..79d9de6 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -48,6 +48,42 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n     (can be passed to the exec() function without any modifications)\"\"\"\n+    # First collect all symbols and functions\n+    printer = PythonPrinter(settings)\n+    printer.doprint(expr)  # This will populate printer.symbols and printer.functions\n+    \n+    result = ''\n+    # Generate symbol declarations first\n+    renamings = {}\n+    for symbolname in printer.symbols:\n+        newsymbolname = symbolname\n+        # Escape symbol names that are reserved python keywords\n+        if kw.iskeyword(newsymbolname):\n+            while True:\n+                newsymbolname += \"_\"\n+                if (newsymbolname not in printer.symbols and\n+                        newsymbolname not in printer.functions):\n+                    renamings[sympy.Symbol(symbolname)] = sympy.Symbol(newsymbolname)\n+                    break\n+        result += newsymbolname + ' = Symbol(\\'' + symbolname + '\\')\\n'\n+\n+    for functionname in printer.functions:\n+        newfunctionname = functionname\n+        # Escape function names that are reserved python keywords\n+        if kw.iskeyword(newfunctionname):\n+            while True:\n+                newfunctionname += \"_\"\n+                if (newfunctionname not in printer.symbols and\n+                        newfunctionname not in printer.functions):\n+                    renamings[sympy.Function(functionname)] = sympy.Function(newfunctionname)\n+                    break\n+        result += newfunctionname + ' = Function(\\'' + functionname + '\\')\\n'\n+\n+    # Now print the actual expression with the collected symbols\n+    if renamings:\n+        expr = expr.subs(renamings)\n+    result += 'e = ' + printer.doprint(expr)\n+    return result\n \n     printer = PythonPrinter(settings)\n     exprp = printer.doprint(expr)\n@@ -89,4 +125,4 @@ def python(expr, **settings):\n \n def print_python(expr, **settings):\n     \"\"\"Print output of python() function\"\"\"\n-    print(python(expr, **settings))\n+    print(python(expr, **settings))\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..a4dd054 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -630,7 +630,7 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..6fc5d19 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -455,7 +455,7 @@ class StrPrinter(Printer):\n     def _print_Relational(self, expr):\n         charmap = {'==': 'Eq', '!=': 'Ne', ':=': 'Assignment', '+=': 'AddAugmentedAssignment', '-=': 'SubAugmentedAssignment', '*=': 'MulAugmentedAssignment', '/=': 'DivAugmentedAssignment', '%=': 'ModAugmentedAssignment'}\n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)), self._relationals.get(expr.rel_op) or expr.rel_op, self.parenthesize(expr.rhs, precedence(expr)))\n     def _print_ComplexRootOf(self, expr):\n         return 'CRootOf(%s, %d)' % (self._print_Add(expr.expr, order='lex'), expr.index)\ndiff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 2a63937..6a44370 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -27,6 +27,32 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n def python(expr, **settings):\n+    printer = PythonPrinter(settings)\n+    printer.doprint(expr)\n+    result = ''\n+    renamings = {}\n+    for symbolname in printer.symbols:\n+        newsymbolname = symbolname\n+        if kw.iskeyword(newsymbolname):\n+            while True:\n+                newsymbolname += '_'\n+                if newsymbolname not in printer.symbols and newsymbolname not in printer.functions:\n+                    renamings[sympy.Symbol(symbolname)] = sympy.Symbol(newsymbolname)\n+                    break\n+        result += newsymbolname + \" = Symbol('\" + symbolname + \"')\\n\"\n+    for functionname in printer.functions:\n+        newfunctionname = functionname\n+        if kw.iskeyword(newfunctionname):\n+            while True:\n+                newfunctionname += '_'\n+                if newfunctionname not in printer.symbols and newfunctionname not in printer.functions:\n+                    renamings[sympy.Function(functionname)] = sympy.Function(newfunctionname)\n+                    break\n+        result += newfunctionname + \" = Function('\" + functionname + \"')\\n\"\n+    if renamings:\n+        expr = expr.subs(renamings)\n+    result += 'e = ' + printer.doprint(expr)\n+    return result\n     printer = PythonPrinter(settings)\n     exprp = printer.doprint(expr)\n     result = ''\n", "normalized_occurrence": 1}
