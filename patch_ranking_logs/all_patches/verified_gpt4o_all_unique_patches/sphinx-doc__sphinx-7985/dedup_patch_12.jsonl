{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..4b7374b 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,7 +212,14 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', 'file:', '/')):\n+                try:\n+                    if path.exists(path.join(self.srcdir, uri)):\n+                        return 'working', '', 0\n+                    else:\n+                        return 'broken', 'file does not exist', 0\n+                except Exception as err:\n+                    return 'broken', str(err), 0\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n@@ -334,7 +341,13 @@ class CheckExternalLinksBuilder(Builder):\n             self.process_result(self.rqueue.get())\n             done += 1\n \n-        if self.broken:\n+        done = 0\n+        while done < n:\n+            self.process_result(self.rqueue.get())\n+            done += 1\n+\n+        for _ in range(self.app.config.linkcheck_workers):\n+            self.wqueue.put((None, None, None))\n             self.app.statuscode = 1\n \n     def write_entry(self, what: str, docname: str, filename: str, line: int,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..632c339 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -132,7 +132,14 @@ class CheckExternalLinksBuilder(Builder):\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', 'file:', '/')):\n+                try:\n+                    if path.exists(path.join(self.srcdir, uri)):\n+                        return ('working', '', 0)\n+                    else:\n+                        return ('broken', 'file does not exist', 0)\n+                except Exception as err:\n+                    return ('broken', str(err), 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n@@ -227,7 +234,12 @@ class CheckExternalLinksBuilder(Builder):\n         while done < n:\n             self.process_result(self.rqueue.get())\n             done += 1\n-        if self.broken:\n+        done = 0\n+        while done < n:\n+            self.process_result(self.rqueue.get())\n+            done += 1\n+        for _ in range(self.app.config.linkcheck_workers):\n+            self.wqueue.put((None, None, None))\n             self.app.statuscode = 1\n     def write_entry(self, what: str, docname: str, filename: str, line: int, uri: str) -> None:\n         with open(path.join(self.outdir, 'output.txt'), 'a') as output:\n", "normalized_occurrence": 1}
