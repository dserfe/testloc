{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..3d05391 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1008,6 +1008,8 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n+        if isinstance(value, self.choices.enum):\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -1769,6 +1771,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, self.choices.enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..9f4b544 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -485,6 +485,8 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n+        if isinstance(value, self.choices.enum):\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -892,6 +894,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, self.choices.enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "normalized_occurrence": 1}
