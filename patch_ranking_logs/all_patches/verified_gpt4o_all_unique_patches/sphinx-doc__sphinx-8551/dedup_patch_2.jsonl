{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..12062ea 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1278,10 +1278,15 @@ class PythonDomain(Domain):\n             elif type == 'mod':\n                 # only exact matches allowed for modules\n                 return []\n+            elif modname and classname and \\\n+                    modname + '.' + classname + '.' + name in self.objects:\n+                newname = modname + '.' + classname + '.' + name\n             elif classname and classname + '.' + name in self.objects:\n                 newname = classname + '.' + name\n             elif modname and modname + '.' + name in self.objects:\n                 newname = modname + '.' + name\n+            elif name in self.objects:\n+                newname = name\n             elif modname and classname and \\\n                     modname + '.' + classname + '.' + name in self.objects:\n                 newname = modname + '.' + classname + '.' + name\n@@ -1294,7 +1299,7 @@ class PythonDomain(Domain):\n                      ) -> Element:\n         modname = node.get('py:module')\n         clsname = node.get('py:class')\n-        searchmode = 1 if node.hasattr('refspecific') else 0\n+        searchmode = 1 if node.get('refspecific') else 0\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..b675cec 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -770,10 +770,14 @@ class PythonDomain(Domain):\n             newname = name\n         elif type == 'mod':\n             return []\n+        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n+            newname = modname + '.' + classname + '.' + name\n         elif classname and classname + '.' + name in self.objects:\n             newname = classname + '.' + name\n         elif modname and modname + '.' + name in self.objects:\n             newname = modname + '.' + name\n+        elif name in self.objects:\n+            newname = name\n         elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n             newname = modname + '.' + classname + '.' + name\n         if newname is not None:\n@@ -782,7 +786,7 @@ class PythonDomain(Domain):\n     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder, type: str, target: str, node: pending_xref, contnode: Element) -> Element:\n         modname = node.get('py:module')\n         clsname = node.get('py:class')\n-        searchmode = 1 if node.hasattr('refspecific') else 0\n+        searchmode = 1 if node.get('refspecific') else 0\n         matches = self.find_obj(env, modname, clsname, target, type, searchmode)\n         if not matches and type == 'attr':\n             matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n", "normalized_occurrence": 1}
