{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..7037a44 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -44,6 +44,10 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n     if request_setting is None:\n         return session_setting\n \n+    # If the request_setting is None in a dict, remove the key\n+    if isinstance(request_setting, Mapping):\n+        request_setting = {k: v for k, v in request_setting.items() if v is not None}\n+\n     # Bypass if not a dictionary (e.g. verify)\n     if not (\n             isinstance(session_setting, Mapping) and\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..b713537 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -17,6 +17,8 @@ def merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n         return request_setting\n     if request_setting is None:\n         return session_setting\n+    if isinstance(request_setting, Mapping):\n+        request_setting = {k: v for k, v in request_setting.items() if v is not None}\n     if not (isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)):\n         return request_setting\n     merged_setting = dict_class(to_key_val_list(session_setting))\n", "normalized_occurrence": 1}
