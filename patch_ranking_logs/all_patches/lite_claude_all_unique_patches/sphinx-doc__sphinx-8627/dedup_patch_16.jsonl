{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..8f4e56a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1389,6 +1389,17 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        else:\n+            # Handle standard library module types\n+            refnode = node.get('py:module', '')\n+            if '.' in refnode:\n+                modname = refnode.split('.')[0]\n+                try:\n+                    mod = __import__(modname)\n+                    if inspect.isclass(getattr(mod, reftarget, None)):\n+                        return contnode\n+                except (ImportError, AttributeError):\n+                    pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..6dd11af 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -847,6 +847,16 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        else:\n+            refnode = node.get('py:module', '')\n+            if '.' in refnode:\n+                modname = refnode.split('.')[0]\n+                try:\n+                    mod = __import__(modname)\n+                    if inspect.isclass(getattr(mod, reftarget, None)):\n+                        return contnode\n+                except (ImportError, AttributeError):\n+                    pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
