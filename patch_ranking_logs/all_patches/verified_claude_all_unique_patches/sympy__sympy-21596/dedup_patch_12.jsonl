{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..723ab97 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -393,6 +393,11 @@ class Set(Basic, EvalfMixin):\n         # XXX: We shouldn't do this. A query like this should be handled\n         # without evaluating new Set objects. It should be the other way round\n         # so that the intersect method uses is_subset for evaluation.\n+        from sympy import S\n+        if other == S.Reals:\n+            # For real sets, need to check that elements are actually real\n+            intersection = self.intersect(other)\n+            return intersection == self and all(x.is_real for x in self)\n         if self.intersect(other) == self:\n             return True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..5ba1947 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,6 +137,10 @@ class Set(Basic, EvalfMixin):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n+        from sympy import S\n+        if other == S.Reals:\n+            intersection = self.intersect(other)\n+            return intersection == self and all((x.is_real for x in self))\n         if self.intersect(other) == self:\n             return True\n     def _eval_is_subset(self, other):\n", "normalized_occurrence": 1}
