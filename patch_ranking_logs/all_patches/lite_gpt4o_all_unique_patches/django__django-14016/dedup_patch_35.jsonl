{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..f75ae99 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -44,12 +44,17 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n+        def ensure_pickleable(obj):\n+            if isinstance(obj, dict_keys):\n+                return list(obj)\n+            return obj\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            return copy.deepcopy(ensure_pickleable(self))\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            return copy.deepcopy(ensure_pickleable(other))\n \n         obj = type(self)()\n         obj.connector = conn\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..51039a0 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -20,10 +20,14 @@ class Q(tree.Node):\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n+        def ensure_pickleable(obj):\n+            if isinstance(obj, dict_keys):\n+                return list(obj)\n+            return obj\n         if not other:\n-            return copy.deepcopy(self)\n+            return copy.deepcopy(ensure_pickleable(self))\n         elif not self:\n-            return copy.deepcopy(other)\n+            return copy.deepcopy(ensure_pickleable(other))\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n", "normalized_occurrence": 1}
