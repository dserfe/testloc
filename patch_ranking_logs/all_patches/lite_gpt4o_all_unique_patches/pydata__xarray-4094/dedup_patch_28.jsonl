{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 3a09d85..2c3a7da 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -852,13 +852,24 @@ def merge(\n         obj = obj.to_dataset(promote_attrs=True) if isinstance(obj, DataArray) else obj\n         dict_like_objects.append(obj)\n \n-    merge_result = merge_core(\n-        dict_like_objects,\n-        compat,\n-        join,\n-        combine_attrs=combine_attrs,\n-        fill_value=fill_value,\n-    )\n+    try:\n+        merge_result = merge_core(\n+            dict_like_objects,\n+            compat,\n+            join,\n+            combine_attrs=combine_attrs,\n+            fill_value=fill_value,\n+        )\n+    except MergeError as e:\n+        if compat != 'override':\n+            raise e\n+        merge_result = merge_core(\n+            dict_like_objects,\n+            'override',\n+            join,\n+            combine_attrs=combine_attrs,\n+            fill_value=fill_value,\n+        )\n     merged = Dataset._construct_direct(**merge_result._asdict())\n     return merged\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 0a5d6cd..d0b4157 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -650,7 +650,12 @@ def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str\n             raise TypeError('objects must be an iterable containing only Dataset(s), DataArray(s), and dictionaries.')\n         obj = obj.to_dataset(promote_attrs=True) if isinstance(obj, DataArray) else obj\n         dict_like_objects.append(obj)\n-    merge_result = merge_core(dict_like_objects, compat, join, combine_attrs=combine_attrs, fill_value=fill_value)\n+    try:\n+        merge_result = merge_core(dict_like_objects, compat, join, combine_attrs=combine_attrs, fill_value=fill_value)\n+    except MergeError as e:\n+        if compat != 'override':\n+            raise e\n+        merge_result = merge_core(dict_like_objects, 'override', join, combine_attrs=combine_attrs, fill_value=fill_value)\n     merged = Dataset._construct_direct(**merge_result._asdict())\n     return merged\n \n", "normalized_occurrence": 1}
