{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..8233c00 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -378,8 +378,24 @@ class StatReloader(BaseReloader):\n     def tick(self):\n         mtimes = {}\n         while True:\n-            for filepath, mtime in self.snapshot_files():\n-                old_time = mtimes.get(filepath)\n+            try:\n+                for filepath, mtime in self.snapshot_files():\n+                    old_time = mtimes.get(filepath)\n+                    mtimes[filepath] = mtime\n+                    if old_time is None:\n+                        continue\n+                    if mtime > old_time:\n+                        self.notify_file_changed(filepath)\n+                yield\n+                time.sleep(self.SLEEP_TIME)\n+            except OSError:\n+                # Handle filesystem recursion errors gracefully\n+                logger.warning(\n+                    \"Error while scanning for changes. If watching large directories like \"\n+                    \"BASE_DIR for templates, consider using a more specific subdirectory.\"\n+                )\n+                yield\n+                time.sleep(self.SLEEP_TIME)\n                 mtimes[filepath] = mtime\n                 if old_time is None:\n                     logger.debug('File %s first seen with mtime %s', filepath, mtime)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..7b00e6d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -232,8 +232,20 @@ class StatReloader(BaseReloader):\n     def tick(self):\n         mtimes = {}\n         while True:\n-            for filepath, mtime in self.snapshot_files():\n-                old_time = mtimes.get(filepath)\n+            try:\n+                for filepath, mtime in self.snapshot_files():\n+                    old_time = mtimes.get(filepath)\n+                    mtimes[filepath] = mtime\n+                    if old_time is None:\n+                        continue\n+                    if mtime > old_time:\n+                        self.notify_file_changed(filepath)\n+                yield\n+                time.sleep(self.SLEEP_TIME)\n+            except OSError:\n+                logger.warning('Error while scanning for changes. If watching large directories like BASE_DIR for templates, consider using a more specific subdirectory.')\n+                yield\n+                time.sleep(self.SLEEP_TIME)\n                 mtimes[filepath] = mtime\n                 if old_time is None:\n                     logger.debug('File %s first seen with mtime %s', filepath, mtime)\n", "normalized_occurrence": 1}
