{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..1cc22d0 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -32,10 +32,21 @@ if False:\n     from sphinx.environment import BuildEnvironment\n \n \n+def kbd_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+    \"\"\"Role for keyboard shortcuts.\"\"\"\n+    if not options:\n+        options = {}\n+    \n+    # Create a literal node with kbd class\n+    node = nodes.literal(rawtext, text, **options)\n+    node['classes'].append('kbd')\n+    \n+    return [node], []\n+\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': kbd_role,  # Use custom role handler instead of simple literal\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..3961ea7 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,37 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            # Handle the content directly here for kbd nodes\n+            text = node.astext()\n+            # Simple case - no need to split\n+            if not ('+' in text[1:-1] or '-' in text[1:-1] or '^' in text[1:-1]):\n+                self.body.append(self.encode(text))\n+                raise nodes.SkipChildren\n+            # Complex case - compound keystroke\n+            parts = []\n+            current = ''\n+            for c in text:\n+                if c in ('+', '-', '^') and current:\n+                    if current:\n+                        parts.append(current)\n+                    parts.append(c)\n+                    current = ''\n+                else:\n+                    current += c\n+            if current:\n+                parts.append(current)\n+            \n+            for i, part in enumerate(parts):\n+                if part in ('+', '-', '^'):\n+                    self.body.append(part)\n+                else:\n+                    if i > 0:  # Not first part\n+                        self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                    self.body.append(self.encode(part))\n+                    if i > 0:  # Not first part\n+                        self.body.append('</kbd>')\n+            raise nodes.SkipChildren\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -841,4 +870,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+def kbd_role(name, rawtext, text, lineno, inliner, options=None, content=None):\n+    if not options:\n+        options = {}\n+    node = nodes.literal(rawtext, text, **options)\n+    node['classes'].append('kbd')\n+    return ([node], [])\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': kbd_role, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..125e031 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,32 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if not ('+' in text[1:-1] or '-' in text[1:-1] or '^' in text[1:-1]):\n+                self.body.append(self.encode(text))\n+                raise nodes.SkipChildren\n+            parts = []\n+            current = ''\n+            for c in text:\n+                if c in ('+', '-', '^') and current:\n+                    if current:\n+                        parts.append(current)\n+                    parts.append(c)\n+                    current = ''\n+                else:\n+                    current += c\n+            if current:\n+                parts.append(current)\n+            for i, part in enumerate(parts):\n+                if part in ('+', '-', '^'):\n+                    self.body.append(part)\n+                else:\n+                    if i > 0:\n+                        self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                    self.body.append(self.encode(part))\n+                    if i > 0:\n+                        self.body.append('</kbd>')\n+            raise nodes.SkipChildren\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
