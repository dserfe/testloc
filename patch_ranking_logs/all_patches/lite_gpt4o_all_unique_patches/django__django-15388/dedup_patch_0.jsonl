{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..0e85c00 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -284,7 +284,16 @@ class BaseReloader:\n                 exc_info=True,\n             )\n             return\n-        logger.debug('Watching dir %s with glob %s.', path, glob)\n+        try:\n+            path = Path(path).resolve(strict=True)\n+            logger.debug('Resolved and watching dir %s with glob %s.', path, glob)\n+        except FileNotFoundError:\n+            logger.debug(\n+                'Unable to resolve directory %s for watching.',\n+                path,\n+                exc_info=True,\n+            )\n+            return\n         self.directory_globs[path].add(glob)\n \n     def watched_files(self, include_globs=True):\n@@ -293,7 +302,10 @@ class BaseReloader:\n         files within globs.\n         \"\"\"\n         yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        for extra_file in self.extra_files:\n+            resolved_path = Path(extra_file).resolve()\n+            logger.debug('Watching extra file %s resolved to %s.', extra_file, resolved_path)\n+            yield resolved_path\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..3a47955 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -177,11 +177,19 @@ class BaseReloader:\n         except FileNotFoundError:\n             logger.debug('Unable to watch directory %s as it cannot be resolved.', path, exc_info=True)\n             return\n-        logger.debug('Watching dir %s with glob %s.', path, glob)\n+        try:\n+            path = Path(path).resolve(strict=True)\n+            logger.debug('Resolved and watching dir %s with glob %s.', path, glob)\n+        except FileNotFoundError:\n+            logger.debug('Unable to resolve directory %s for watching.', path, exc_info=True)\n+            return\n         self.directory_globs[path].add(glob)\n     def watched_files(self, include_globs=True):\n         yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        for extra_file in self.extra_files:\n+            resolved_path = Path(extra_file).resolve()\n+            logger.debug('Watching extra file %s resolved to %s.', extra_file, resolved_path)\n+            yield resolved_path\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "normalized_occurrence": 1}
