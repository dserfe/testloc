{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..b41e11e 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -121,7 +121,15 @@ def getargspec(func: Callable) -> Any:\n def unwrap(obj: Any) -> Any:\n     \"\"\"Get an original object from wrapped object (wrapped functions).\"\"\"\n     try:\n-        return inspect.unwrap(obj)\n+        # Try to get the original function while preserving as much context as possible\n+        if hasattr(obj, '__wrapped__'):\n+            # Get the original function\n+            unwrapped = inspect.unwrap(obj)\n+            # Preserve the globals from the wrapper if they exist\n+            if hasattr(obj, '__globals__') and hasattr(unwrapped, '__globals__'):\n+                unwrapped.__globals__.update(obj.__globals__)\n+            return unwrapped\n+        return obj\n     except ValueError:\n         # might be a mock object\n         return obj\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 6e5e6c6..d393be9 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -66,7 +66,12 @@ def getargspec(func: Callable) -> Any:\n     return inspect.FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwdefaults, annotations)\n def unwrap(obj: Any) -> Any:\n     try:\n-        return inspect.unwrap(obj)\n+        if hasattr(obj, '__wrapped__'):\n+            unwrapped = inspect.unwrap(obj)\n+            if hasattr(obj, '__globals__') and hasattr(unwrapped, '__globals__'):\n+                unwrapped.__globals__.update(obj.__globals__)\n+            return unwrapped\n+        return obj\n     except ValueError:\n         return obj\n def unwrap_all(obj: Any, *, stop: Callable=None) -> Any:\n", "normalized_occurrence": 1}
