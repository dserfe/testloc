{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4248", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 91a7f67..6f54639 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -271,6 +271,9 @@ def inline_variable_array_repr(var, max_width):\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n+    unit = var.attrs.get('units', '')\n+    if unit:\n+        name = f\"{name}, in {unit}\"\n     \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n     if max_width is None:\n         max_width_options = OPTIONS[\"display_width\"]\n@@ -310,6 +313,9 @@ def summarize_datavar(name, var, col_width):\n \n \n def summarize_coord(name: Hashable, var, col_width: int):\n+    unit = var.attrs.get('units', '')\n+    if unit:\n+        name = f\"{name}, in {unit}\"\n     is_index = name in var.dims\n     marker = \"*\" if is_index else \" \"\n     if is_index:\n@@ -493,6 +499,11 @@ def array_repr(arr):\n \n \n def dataset_repr(ds):\n+    for var_name in ds.variables:\n+        var = ds.variables[var_name]\n+        unit = var.attrs.get('units', '')\n+        if unit:\n+            var.attrs['units'] = unit\n     summary = [\"<xarray.{}>\".format(type(ds).__name__)]\n \n     col_width = _calculate_col_width(_get_col_items(ds.variables))\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 6d31a74..f663849 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -152,6 +152,10 @@ def inline_variable_array_repr(var, max_width):\n     else:\n         return '...'\n def summarize_variable(name: Hashable, var, col_width: int, marker: str=' ', max_width: int=None):\n+    unit = var.attrs.get('units', '')\n+    if unit:\n+        name = f'{name}, in {unit}'\n+    'Summarize a variable in one line, e.g., for the Dataset.__repr__.'\n     if max_width is None:\n         max_width_options = OPTIONS['display_width']\n         if not isinstance(max_width_options, int):\n@@ -175,6 +179,9 @@ def _summarize_coord_levels(coord, col_width, marker='-'):\n def summarize_datavar(name, var, col_width):\n     return summarize_variable(name, var.variable, col_width)\n def summarize_coord(name: Hashable, var, col_width: int):\n+    unit = var.attrs.get('units', '')\n+    if unit:\n+        name = f'{name}, in {unit}'\n     is_index = name in var.dims\n     marker = '*' if is_index else ' '\n     if is_index:\n@@ -285,6 +292,11 @@ def array_repr(arr):\n         summary.append(attrs_repr(arr.attrs))\n     return '\\n'.join(summary)\n def dataset_repr(ds):\n+    for var_name in ds.variables:\n+        var = ds.variables[var_name]\n+        unit = var.attrs.get('units', '')\n+        if unit:\n+            var.attrs['units'] = unit\n     summary = ['<xarray.{}>'.format(type(ds).__name__)]\n     col_width = _calculate_col_width(_get_col_items(ds.variables))\n     dims_start = pretty_print('Dimensions:', col_width)\n", "normalized_occurrence": 1}
