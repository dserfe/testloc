{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..05b8c7f 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -190,10 +190,10 @@ class UnitSystem(_QuantityMapper):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            if all(d[1] == Dimension(1) for d in fds):\n+                return expr.func(*(f[0] for f in fds)), Dimension(1)\n+            return expr.func(*(f[0] for f in fds)), Dimension(expr.func(*(d[1] for d in fds)))\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n@@ -203,4 +203,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 33c8d4e..de7ec96 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -117,7 +117,9 @@ class UnitSystem(_QuantityMapper):\n             return (factor, dim)\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)), *(d[1] for d in fds))\n+            if all((d[1] == Dimension(1) for d in fds)):\n+                return (expr.func(*(f[0] for f in fds)), Dimension(1))\n+            return (expr.func(*(f[0] for f in fds)), Dimension(expr.func(*(d[1] for d in fds))))\n         elif isinstance(expr, Dimension):\n             return (S.One, expr)\n         else:\n", "normalized_occurrence": 1}
