{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9d8d506..ee59231 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -778,12 +778,22 @@ class Query(BaseExpression):\n         select_mask[opts.pk] = {}\n         # Only include fields mentioned in the mask.\n         for field_name, field_mask in mask.items():\n-            field = opts.get_field(field_name)\n-            field_select_mask = select_mask.setdefault(field, {})\n+            if filtered_relation := self._filtered_relations.get(field_name):\n+                relation = opts.get_field(filtered_relation.relation_name)\n+                field_select_mask = select_mask.setdefault((field_name, relation), {})\n+                field = relation.field\n+            else:\n+                field = opts.get_field(field_name)\n+                field_select_mask = select_mask.setdefault(field, {})\n             if field_mask:\n                 if not field.is_relation:\n                     raise FieldError(next(iter(field_mask)))\n-                related_model = field.remote_field.model._meta.concrete_model\n+                if hasattr(field, 'field'):\n+                    # Reverse relation\n+                    related_model = field.field.model._meta.concrete_model\n+                else:\n+                    # Forward relation\n+                    related_model = field.remote_field.model._meta.concrete_model\n                 self._get_only_select_mask(\n                     related_model._meta, field_mask, field_select_mask\n                 )\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f8d5b2d..dd53e26 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -413,12 +413,20 @@ class Query(BaseExpression):\n             select_mask = {}\n         select_mask[opts.pk] = {}\n         for field_name, field_mask in mask.items():\n-            field = opts.get_field(field_name)\n-            field_select_mask = select_mask.setdefault(field, {})\n+            if (filtered_relation := self._filtered_relations.get(field_name)):\n+                relation = opts.get_field(filtered_relation.relation_name)\n+                field_select_mask = select_mask.setdefault((field_name, relation), {})\n+                field = relation.field\n+            else:\n+                field = opts.get_field(field_name)\n+                field_select_mask = select_mask.setdefault(field, {})\n             if field_mask:\n                 if not field.is_relation:\n                     raise FieldError(next(iter(field_mask)))\n-                related_model = field.remote_field.model._meta.concrete_model\n+                if hasattr(field, 'field'):\n+                    related_model = field.field.model._meta.concrete_model\n+                else:\n+                    related_model = field.remote_field.model._meta.concrete_model\n                 self._get_only_select_mask(related_model._meta, field_mask, field_select_mask)\n         return select_mask\n     def get_select_mask(self):\n", "normalized_occurrence": 3}
