{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10051", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 9234395..335cd23 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -396,7 +396,8 @@ class LogCaptureFixture:\n \n         .. versionadded:: 3.4\n         \"\"\"\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        return [record for record in self.handler.records \n+                if getattr(record, \"when\", \"call\") == when]\n \n     @property\n     def text(self) -> str:\n", "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex d320659..90c2a2c 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -183,7 +183,7 @@ class LogCaptureFixture:\n     def handler(self) -> LogCaptureHandler:\n         return self._item.stash[caplog_handler_key]\n     def get_records(self, when: str) -> List[logging.LogRecord]:\n-        return self._item.stash[caplog_records_key].get(when, [])\n+        return [record for record in self.handler.records if getattr(record, 'when', 'call') == when]\n     @property\n     def text(self) -> str:\n         return _remove_ansi_escape_sequences(self.handler.stream.getvalue())\n", "normalized_occurrence": 1}
