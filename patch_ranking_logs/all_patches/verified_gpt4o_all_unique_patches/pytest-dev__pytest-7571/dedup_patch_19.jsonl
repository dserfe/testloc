{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..9d0059f 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -436,6 +436,13 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n+    def teardown(self):\n+        \"\"\"Restore the log levels to their original values\"\"\"\n+        for logger, level in self._initial_logger_levels.items():\n+            logger_obj = logging.getLogger(logger)\n+            logger_obj.setLevel(level)\n+        self.handler.setLevel(0)\n+\n     @contextmanager\n     def at_level(\n         self, level: int, logger: Optional[str] = None\n@@ -461,6 +468,20 @@ class LogCaptureFixture:\n @pytest.fixture\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     \"\"\"Access and control log capturing.\n+    \n+    Captured logs are available through the following properties/methods::\n+\n+    * caplog.messages        -> list of format-interpolated log messages\n+    * caplog.text            -> string containing formatted log output\n+    * caplog.records         -> list of logging.LogRecord instances\n+    * caplog.record_tuples   -> list of (logger_name, level, message) tuples\n+    * caplog.clear()         -> clear captured records and formatted log output string\n+    \"\"\"\n+    result = LogCaptureFixture()\n+    yield result\n+    result.teardown()\n+def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n+    \"\"\"Access and control log capturing.\n \n     Captured logs are available through the following properties/methods::\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..72326f8 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -192,6 +192,11 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+    def teardown(self):\n+        for logger, level in self._initial_logger_levels.items():\n+            logger_obj = logging.getLogger(logger)\n+            logger_obj.setLevel(level)\n+        self.handler.setLevel(0)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n@@ -205,6 +210,10 @@ class LogCaptureFixture:\n             logger_obj.setLevel(orig_level)\n             self.handler.setLevel(handler_orig_level)\n @pytest.fixture\n+def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n+    result = LogCaptureFixture()\n+    yield result\n+    result.teardown()\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     result = LogCaptureFixture(request.node)\n     yield result\n", "normalized_occurrence": 1}
