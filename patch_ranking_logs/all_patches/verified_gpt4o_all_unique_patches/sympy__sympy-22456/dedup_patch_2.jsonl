{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..165ff01 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -208,49 +208,15 @@ class Token(CodegenAST):\n             else:\n                 return cls._get_constructor(attr)(arg)\n \n-    def __new__(cls, *args, **kwargs):\n-        # Pass through existing instances when given as sole argument\n-        if len(args) == 1 and not kwargs and isinstance(args[0], cls):\n-            return args[0]\n-\n-        if len(args) > len(cls.__slots__):\n-            raise ValueError(\"Too many arguments (%d), expected at most %d\" % (len(args), len(cls.__slots__)))\n-\n-        attrvals = []\n-\n-        # Process positional arguments\n-        for attrname, argval in zip(cls.__slots__, args):\n-            if attrname in kwargs:\n-                raise TypeError('Got multiple values for attribute %r' % attrname)\n-\n-            attrvals.append(cls._construct(attrname, argval))\n-\n-        # Process keyword arguments\n-        for attrname in cls.__slots__[len(args):]:\n-            if attrname in kwargs:\n-                argval = kwargs.pop(attrname)\n-\n-            elif attrname in cls.defaults:\n-                argval = cls.defaults[attrname]\n-\n-            else:\n-                raise TypeError('No value for %r given and attribute has no default' % attrname)\n-\n-            attrvals.append(cls._construct(attrname, argval))\n-\n-        if kwargs:\n-            raise ValueError(\"Unknown keyword arguments: %s\" % ' '.join(kwargs))\n-\n+    def __new__(cls, text):\n+        # Ensure text is of type str\n+        text = cls._construct_text(text)\n+        \n         # Parent constructor\n-        basic_args = [\n-            val for attr, val in zip(cls.__slots__, attrvals)\n-            if attr not in cls.not_in_args\n-        ]\n-        obj = CodegenAST.__new__(cls, *basic_args)\n-\n+        obj = CodegenAST.__new__(cls, text)\n+        \n         # Set attributes\n-        for attr, arg in zip(cls.__slots__, attrvals):\n-            setattr(obj, attr, arg)\n+        obj.text = text\n \n         return obj\n \n@@ -895,7 +861,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..30cb715 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -198,30 +198,10 @@ class Token(CodegenAST):\n         else:\n             return cls._get_constructor(attr)(arg)\n \n-    def __new__(cls, *args, **kwargs):\n-        if len(args) == 1 and (not kwargs) and isinstance(args[0], cls):\n-            return args[0]\n-        if len(args) > len(cls.__slots__):\n-            raise ValueError('Too many arguments (%d), expected at most %d' % (len(args), len(cls.__slots__)))\n-        attrvals = []\n-        for attrname, argval in zip(cls.__slots__, args):\n-            if attrname in kwargs:\n-                raise TypeError('Got multiple values for attribute %r' % attrname)\n-            attrvals.append(cls._construct(attrname, argval))\n-        for attrname in cls.__slots__[len(args):]:\n-            if attrname in kwargs:\n-                argval = kwargs.pop(attrname)\n-            elif attrname in cls.defaults:\n-                argval = cls.defaults[attrname]\n-            else:\n-                raise TypeError('No value for %r given and attribute has no default' % attrname)\n-            attrvals.append(cls._construct(attrname, argval))\n-        if kwargs:\n-            raise ValueError('Unknown keyword arguments: %s' % ' '.join(kwargs))\n-        basic_args = [val for attr, val in zip(cls.__slots__, attrvals) if attr not in cls.not_in_args]\n-        obj = CodegenAST.__new__(cls, *basic_args)\n-        for attr, arg in zip(cls.__slots__, attrvals):\n-            setattr(obj, attr, arg)\n+    def __new__(cls, text):\n+        text = cls._construct_text(text)\n+        obj = CodegenAST.__new__(cls, text)\n+        obj.text = text\n         return obj\n \n     def __eq__(self, other):\n@@ -774,7 +754,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "normalized_occurrence": 1}
