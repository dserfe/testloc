{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..3888d1f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1632,6 +1632,18 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = get_class_members(self.object, self.objpath, self.get_attr)\n+        \n+        # Handle type annotations from parent classes when inherited-members is enabled\n+        if self.options.inherited_members:\n+            for cls in self.object.__mro__[1:]:  # Skip the class itself\n+                try:\n+                    annotations = getattr(cls, '__annotations__', {})\n+                    for name, value in annotations.items():\n+                        if name not in members:\n+                            members[name] = get_class_members(cls, self.objpath, self.get_attr).get(name)\n+                except (AttributeError, TypeError):\n+                    pass\n+\n         if not want_all:\n             if not self.options.members:\n                 return False, []  # type: ignore\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..2bfc2b2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -918,6 +918,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                 self.add_line('   ' + _('Bases: %s') % ', '.join(bases), sourcename)\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = get_class_members(self.object, self.objpath, self.get_attr)\n+        if self.options.inherited_members:\n+            for cls in self.object.__mro__[1:]:\n+                try:\n+                    annotations = getattr(cls, '__annotations__', {})\n+                    for name, value in annotations.items():\n+                        if name not in members:\n+                            members[name] = get_class_members(cls, self.objpath, self.get_attr).get(name)\n+                except (AttributeError, TypeError):\n+                    pass\n         if not want_all:\n             if not self.options.members:\n                 return (False, [])\n", "normalized_occurrence": 1}
