{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..3a23905 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,8 +416,6 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n-            mode += \"b\"\n         f = os.fdopen(newfd, mode, 0)  # no buffering\n     return EncodedFile(f, encoding or default_encoding)\n \n@@ -448,6 +446,8 @@ class EncodedFile(object):\n         return repr(self.buffer)\n \n     def __getattr__(self, name):\n+        if name == \"mode\":\n+            return self.buffer.mode.replace(\"b\", \"\")\n         return getattr(object.__getattribute__(self, \"buffer\"), name)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..f83d619 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -241,8 +241,6 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if 'b' not in mode:\n-            mode += 'b'\n         f = os.fdopen(newfd, mode, 0)\n     return EncodedFile(f, encoding or default_encoding)\n class EncodedFile(object):\n@@ -263,6 +261,8 @@ class EncodedFile(object):\n     def name(self):\n         return repr(self.buffer)\n     def __getattr__(self, name):\n+        if name == 'mode':\n+            return self.buffer.mode.replace('b', '')\n         return getattr(object.__getattribute__(self, 'buffer'), name)\n CaptureResult = collections.namedtuple('CaptureResult', ['out', 'err'])\n class MultiCapture(object):\n", "normalized_occurrence": 1}
