{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..5a588d7 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -781,6 +781,10 @@ class PyAttribute(PyObject):\n \n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n         fullname, prefix = super().handle_signature(sig, signode)\n+        \n+        # Add the fully qualified name to prevent cross-linking\n+        if '.' in fullname:\n+            signode['fullname'] = fullname\n \n         typ = self.options.get('type')\n         if typ:\n@@ -799,14 +803,15 @@ class PyAttribute(PyObject):\n             clsname, attrname = name.rsplit('.', 1)\n             if modname and self.env.config.add_module_names:\n                 clsname = '.'.join([modname, clsname])\n+            # Fully qualify the attribute name to prevent cross-linking\n+            full_name = f\"{clsname}.{attrname}\"\n+            return _('%s (%s attribute)') % (full_name, clsname)\n         except ValueError:\n             if modname:\n                 return _('%s (in module %s)') % (name, modname)\n             else:\n                 return name\n \n-        return _('%s (%s attribute)') % (attrname, clsname)\n-\n \n class PyDecoratorMixin:\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..ebfdb6e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -480,6 +480,8 @@ class PyAttribute(PyObject):\n     option_spec.update({'type': directives.unchanged, 'value': directives.unchanged})\n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n         fullname, prefix = super().handle_signature(sig, signode)\n+        if '.' in fullname:\n+            signode['fullname'] = fullname\n         typ = self.options.get('type')\n         if typ:\n             annotations = _parse_annotation(typ, self.env)\n@@ -494,12 +496,13 @@ class PyAttribute(PyObject):\n             clsname, attrname = name.rsplit('.', 1)\n             if modname and self.env.config.add_module_names:\n                 clsname = '.'.join([modname, clsname])\n+            full_name = f'{clsname}.{attrname}'\n+            return _('%s (%s attribute)') % (full_name, clsname)\n         except ValueError:\n             if modname:\n                 return _('%s (in module %s)') % (name, modname)\n             else:\n                 return name\n-        return _('%s (%s attribute)') % (attrname, clsname)\n class PyDecoratorMixin:\n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n         for cls in self.__class__.__mro__:\n", "normalized_occurrence": 1}
