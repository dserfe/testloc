{"model_name_or_path": "agentless", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..bc828bf 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -226,17 +226,26 @@ class HashedFilesMixin:\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n+        yielded_files = set()  # Track already yielded files\n+\n+        def should_yield(name):\n+            if name not in yielded_files:\n+                yielded_files.add(name)\n+                return True\n+            return False\n+\n+        # Do a single pass first. Post-process all files once, then repeat for adjustable files.\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if should_yield(name):\n+                yield name, hashed_name, processed\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if should_yield(name):\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..1c6a4cc 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -126,13 +126,21 @@ class HashedFilesMixin:\n             return\n         hashed_files = {}\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n+        yielded_files = set()\n+        def should_yield(name):\n+            if name not in yielded_files:\n+                yielded_files.add(name)\n+                return True\n+            return False\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield (name, hashed_name, processed)\n+            if should_yield(name):\n+                yield (name, hashed_name, processed)\n         paths = {path: paths[path] for path in adjustable_paths}\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n+                if should_yield(name):\n+                    yield (name, hashed_name, processed)\n                 substitutions = substitutions or subst\n             if not substitutions:\n                 break\n", "normalized_occurrence": 1}
