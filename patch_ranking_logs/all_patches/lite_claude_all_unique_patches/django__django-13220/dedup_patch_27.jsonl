{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..b84f9d5 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,28 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+            \n+        if hasattr(self, 'error_dict'):\n+            # Compare error dictionaries\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            # For each field, compare error lists (order independent)\n+            return all(\n+                sorted(self.error_dict[field], key=lambda e: str(e.message)) ==\n+                sorted(other.error_dict[field], key=lambda e: str(e.message))\n+                for field in self.error_dict\n+            )\n+        \n+        # Compare error lists (order independent)\n+        return (sorted(self.error_list, key=lambda e: str(e.message)) ==\n+                sorted(other.error_list, key=lambda e: str(e.message)))\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\n@@ -190,4 +212,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+        if hasattr(self, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            return all((sorted(self.error_dict[field], key=lambda e: str(e.message)) == sorted(other.error_dict[field], key=lambda e: str(e.message)) for field in self.error_dict))\n+        return sorted(self.error_list, key=lambda e: str(e.message)) == sorted(other.error_list, key=lambda e: str(e.message))\n+", "normalized_occurrence": 2}
