{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..c923cb0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2069,7 +2069,12 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+        if isinstance(parent, ModuleDocumenter):\n+            return False\n+            \n+        # Handle regular methods and @classmethod @property combinations\n+        return (inspect.isroutine(member) or\n+                (isinstance(member, property) and isinstance(member.__get__(None, type), classmethod)))\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2661,7 +2666,10 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        # Handle regular properties but exclude @classmethod @property combinations\n+        return (inspect.isproperty(member) and \n+                isinstance(parent, ClassDocumenter) and\n+                not isinstance(member.__get__(None, type), classmethod))\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..bded556 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1200,7 +1200,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n     priority = 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter))\n+        if isinstance(parent, ModuleDocumenter):\n+            return False\n+        return inspect.isroutine(member) or (isinstance(member, property) and isinstance(member.__get__(None, type), classmethod))\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n         if not ret:\n@@ -1597,7 +1599,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter) and (not isinstance(member.__get__(None, type), classmethod))\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n", "normalized_occurrence": 1}
