{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..d13a47a 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -609,12 +607,13 @@ class PyLinter(\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n-                    else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                    \n+                    # Always check for .py files, regardless of __init__.py presence\n+                    yield from (\n+                        os.path.join(root, file)\n+                        for file in files\n+                        if file.endswith(\".py\") and file != \"__init__.py\"\n+                    )\n             else:\n                 yield something\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..6d7fecc 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -225,7 +225,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 self._msgs_state[msg.msgid] = False\n     def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any((root.startswith(s) for s in skip_subtrees)):\n@@ -236,8 +236,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                     if '__init__.py' in files:\n                         skip_subtrees.append(root)\n                         yield root\n-                    else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+                    yield from (os.path.join(root, file) for file in files if file.endswith('.py') and file != '__init__.py')\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n", "normalized_occurrence": 2}
