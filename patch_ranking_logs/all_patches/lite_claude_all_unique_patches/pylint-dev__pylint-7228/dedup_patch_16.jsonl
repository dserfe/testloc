{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 515b944..b8bf868 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,7 +23,15 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        if r\"\\p\" in value:\n+            # For Python < 3.11, convert \\p{Han} to equivalent Unicode range\n+            # Basic Han unicode range is U+4E00-U+9FFF\n+            value = value.replace(r\"\\p{Han}\", r\"[\\u4e00-\\u9fff]\")\n+            return re.compile(value)\n+        raise e\n \n \n # pylint: disable=unused-argument\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex bdedcd7..d4f9ecc 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -11,7 +11,13 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, 'pattern'):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value)\n+    except re.error as e:\n+        if '\\\\p' in value:\n+            value = value.replace('\\\\p{Han}', '[\\\\u4e00-\\\\u9fff]')\n+            return re.compile(value)\n+        raise e\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n def _regexp_paths_csv_validator(_, name: str, value: str | list[Pattern[str]]) -> list[Pattern[str]]:\n", "normalized_occurrence": 1}
