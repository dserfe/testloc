{"model_name_or_path": "agentless", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..a7e9400 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -652,6 +652,9 @@ class OuterRef(F):\n \n \n class Func(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)\n     \"\"\"An SQL function call.\"\"\"\n     function = None\n     template = '%(function)s(%(expressions)s)'\n@@ -732,6 +735,9 @@ class Func(SQLiteNumericMixin, Expression):\n \n \n class Value(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)\n     \"\"\"Represent a wrapped value as a node within an expression.\"\"\"\n     # Provide a default value for `for_save` in order to allow unresolved\n     # instances to be compiled until a decision is taken in #25425.\n@@ -808,6 +814,9 @@ class Value(SQLiteNumericMixin, Expression):\n \n \n class RawSQL(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -1482,4 +1491,4 @@ class ValueRange(WindowFrame):\n     frame_type = 'RANGE'\n \n     def window_frame_start_end(self, connection, start, end):\n-        return connection.ops.window_frame_range_start_end(start, end)\n+        return connection.ops.window_frame_range_start_end(start, end)\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)\n+    'An SQL function call.'\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)\n+    'Represent a wrapped value as a node within an expression.'\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        return (path, [], self.__dict__)", "normalized_occurrence": 1}
