{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16106", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 59074b8..520b95e 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -1007,6 +1007,8 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         return mrow\n \n     def _print_Basic(self, e):\n+        if isinstance(e, sympy.Indexed):\n+            return self._print_Indexed(e)\n         mrow = self.dom.createElement('mrow')\n         mi = self.dom.createElement('mi')\n         mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))\n@@ -1017,6 +1019,17 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         mrow.appendChild(brac)\n         return mrow\n \n+    def _print_Indexed(self, e):\n+        mrow = self.dom.createElement('mrow')\n+        base = self._print(e.base)\n+        mrow.appendChild(base)\n+        for index in e.indices:\n+            subscript = self.dom.createElement('msub')\n+            subscript.appendChild(base)\n+            subscript.appendChild(self._print(index))\n+            mrow.appendChild(subscript)\n+        return mrow\n+\n     def _print_Tuple(self, e):\n         mrow = self.dom.createElement('mrow')\n         x = self.dom.createElement('mfenced')\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 6d7dfb1..2ae36ff 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -747,6 +747,8 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         mrow.appendChild(brac)\n         return mrow\n     def _print_Basic(self, e):\n+        if isinstance(e, sympy.Indexed):\n+            return self._print_Indexed(e)\n         mrow = self.dom.createElement('mrow')\n         mi = self.dom.createElement('mi')\n         mi.appendChild(self.dom.createTextNode(self.mathml_tag(e)))\n@@ -756,6 +758,16 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n             brac.appendChild(self._print(arg))\n         mrow.appendChild(brac)\n         return mrow\n+    def _print_Indexed(self, e):\n+        mrow = self.dom.createElement('mrow')\n+        base = self._print(e.base)\n+        mrow.appendChild(base)\n+        for index in e.indices:\n+            subscript = self.dom.createElement('msub')\n+            subscript.appendChild(base)\n+            subscript.appendChild(self._print(index))\n+            mrow.appendChild(subscript)\n+        return mrow\n     def _print_Tuple(self, e):\n         mrow = self.dom.createElement('mrow')\n         x = self.dom.createElement('mfenced')\n", "normalized_occurrence": 1}
