{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..0c71f8f 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1189,34 +1189,7 @@ class _AxesBase(martist.Artist):\n         else:\n             patch_visible = True\n \n-        xaxis_visible = self.xaxis.get_visible()\n-        yaxis_visible = self.yaxis.get_visible()\n \n-        self.xaxis.clear()\n-        self.yaxis.clear()\n-\n-        for name, spine in self.spines.items():\n-            spine.clear()\n-\n-        self.ignore_existing_data_limits = True\n-        self.callbacks = cbook.CallbackRegistry()\n-\n-        if self._sharex is not None:\n-            self.sharex(self._sharex)\n-        else:\n-            self.xaxis._set_scale('linear')\n-            try:\n-                self.set_xlim(0, 1)\n-            except TypeError:\n-                pass\n-        if self._sharey is not None:\n-            self.sharey(self._sharey)\n-        else:\n-            self.yaxis._set_scale('linear')\n-            try:\n-                self.set_ylim(0, 1)\n-            except TypeError:\n-                pass\n \n         # update the minor locator for x and y axis based on rcParams\n         if mpl.rcParams['xtick.minor.visible']:\n@@ -4717,4 +4690,4 @@ class _AxesBase(martist.Artist):\n \n     def get_shared_y_axes(self):\n         \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n-        return self._shared_axes[\"y\"]\n+        return self._shared_axes[\"y\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 33a6de3..def5b62 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -501,30 +501,6 @@ class _AxesBase(martist.Artist):\n             patch_visible = self.patch.get_visible()\n         else:\n             patch_visible = True\n-        xaxis_visible = self.xaxis.get_visible()\n-        yaxis_visible = self.yaxis.get_visible()\n-        self.xaxis.clear()\n-        self.yaxis.clear()\n-        for name, spine in self.spines.items():\n-            spine.clear()\n-        self.ignore_existing_data_limits = True\n-        self.callbacks = cbook.CallbackRegistry()\n-        if self._sharex is not None:\n-            self.sharex(self._sharex)\n-        else:\n-            self.xaxis._set_scale('linear')\n-            try:\n-                self.set_xlim(0, 1)\n-            except TypeError:\n-                pass\n-        if self._sharey is not None:\n-            self.sharey(self._sharey)\n-        else:\n-            self.yaxis._set_scale('linear')\n-            try:\n-                self.set_ylim(0, 1)\n-            except TypeError:\n-                pass\n         if mpl.rcParams['xtick.minor.visible']:\n             self.xaxis.set_minor_locator(mticker.AutoMinorLocator())\n         if mpl.rcParams['ytick.minor.visible']:\n", "normalized_occurrence": 1}
