{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..b32fe52 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -814,6 +814,14 @@ class RawSQL(Expression):\n         self.sql, self.params = sql, params\n         super().__init__(output_field=output_field)\n \n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __repr__(self):\n         return \"{}({}, {})\".format(self.__class__.__name__, self.sql, self.params)\n \n@@ -963,6 +971,11 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n \n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return path, args, {}\n+\n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n \n@@ -1007,6 +1020,12 @@ class When(Expression):\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return path, args, kwargs\n+\n     def __str__(self):\n         return \"WHEN %r THEN %r\" % (self.condition, self.result)\n \n@@ -1075,6 +1094,18 @@ class Case(SQLiteNumericMixin, Expression):\n         self.default = self._parse_expressions(default)[0]\n         self.extra = extra\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return path, args, kwargs\n+\n     def __str__(self):\n         return \"CASE %s, ELSE %r\" % (', '.join(str(c) for c in self.cases), self.default)\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return (path, args, {})\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
