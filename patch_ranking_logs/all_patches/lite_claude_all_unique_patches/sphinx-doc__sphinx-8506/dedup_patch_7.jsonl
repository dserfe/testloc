{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex ece643d..859fcf3 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -43,7 +43,7 @@ logger = logging.getLogger(__name__)\n \n \n # RE for option descriptions\n-option_desc_re = re.compile(r'((?:/|--|-|\\+)?[^\\s=[]+)(=?\\s*.*)')\n+option_desc_re = re.compile(r'([^\\s]+)(=?\\s*.*)')\n # RE for grammar tokens\n token_re = re.compile(r'`(\\w+)`', re.U)\n \n@@ -191,9 +191,8 @@ class Cmdoption(ObjectDescription):\n             potential_option = potential_option.strip()\n             m = option_desc_re.match(potential_option)\n             if not m:\n-                logger.warning(__('Malformed option description %r, should '\n-                                  'look like \"opt\", \"-opt args\", \"--opt args\", '\n-                                  '\"/opt args\" or \"+opt args\"'), potential_option,\n+                logger.warning(__('Malformed option description %r, '\n+                                  'option name contains whitespace'), potential_option,\n                                location=signode)\n                 continue\n             optname, args = m.groups()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex 6fb98ed..0bcbb0b 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -24,7 +24,7 @@ if False:\n     from sphinx.builders import Builder\n     from sphinx.environment import BuildEnvironment\n logger = logging.getLogger(__name__)\n-option_desc_re = re.compile('((?:/|--|-|\\\\+)?[^\\\\s=[]+)(=?\\\\s*.*)')\n+option_desc_re = re.compile('([^\\\\s]+)(=?\\\\s*.*)')\n token_re = re.compile('`(\\\\w+)`', re.U)\n class GenericObject(ObjectDescription):\n     indextemplate = ''\n@@ -112,7 +112,7 @@ class Cmdoption(ObjectDescription):\n             potential_option = potential_option.strip()\n             m = option_desc_re.match(potential_option)\n             if not m:\n-                logger.warning(__('Malformed option description %r, should look like \"opt\", \"-opt args\", \"--opt args\", \"/opt args\" or \"+opt args\"'), potential_option, location=signode)\n+                logger.warning(__('Malformed option description %r, option name contains whitespace'), potential_option, location=signode)\n                 continue\n             optname, args = m.groups()\n             if count:\n", "normalized_occurrence": 1}
