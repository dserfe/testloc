{"model_name_or_path": "agentless", "instance_id": "pallets__flask-4992", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..e17a7ad 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -233,6 +233,7 @@ class Config(dict):\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        mode: str = \"t\",\n         silent: bool = False,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n@@ -261,7 +262,11 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            if mode not in {\"t\", \"b\"}:\n+                raise ValueError(\"Mode must be 't' for text or 'b' for binary.\")\n+                \n+            open_mode = \"r\" + mode\n+            with open(filename, open_mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex a095695..a6e2ca1 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -71,10 +71,13 @@ class Config(dict):\n         for key in dir(obj):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n-    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool=False) -> bool:\n+    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], mode: str='t', silent: bool=False) -> bool:\n         filename = os.path.join(self.root_path, filename)\n         try:\n-            with open(filename) as f:\n+            if mode not in {'t', 'b'}:\n+                raise ValueError(\"Mode must be 't' for text or 'b' for binary.\")\n+            open_mode = 'r' + mode\n+            with open(filename, open_mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "normalized_occurrence": 1}
