{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..7b064bf 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -91,6 +91,18 @@ class DotBase(Mark):\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n \n+        # Apply scale formatting for numeric values that may have offset\n+        for var in variables:\n+            if var in scales and isinstance(scales[var], (ContinuousBase, Temporal)):\n+                formatter = scales[var]._get_formatter(None, None, None, None, None)\n+                if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                    # Force formatter to process the value to set offset\n+                    formatter.create_dummy_axis()\n+                    formatter.set_locs([value])\n+                    if formatter.offset != 0:\n+                        # Adjust the value by the formatter's offset\n+                        value = value / (10 ** formatter.orderOfMagnitude)\n+\n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n             sizes=[res[\"size\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..7190f47 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,14 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales and isinstance(scales[var], (ContinuousBase, Temporal)):\n+                formatter = scales[var]._get_formatter(None, None, None, None, None)\n+                if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                    formatter.create_dummy_axis()\n+                    formatter.set_locs([value])\n+                    if formatter.offset != 0:\n+                        value = value / 10 ** formatter.orderOfMagnitude\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
