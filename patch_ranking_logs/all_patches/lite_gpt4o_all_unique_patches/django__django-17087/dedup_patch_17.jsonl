{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..ba4ee3b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -73,7 +73,12 @@ class MigrationAutodetector:\n             # If this is a type that implements 'deconstruct' as an instance method,\n             # avoid treating this as being deconstructible itself - see #22951\n             return obj\n-        elif hasattr(obj, \"deconstruct\"):\n+        elif isinstance(obj, classmethod):\n+            # Handling class methods of nested classes\n+            method_self = obj.__self__\n+            if isinstance(method_self, type) and method_self.__module__ == method_self.__qualname__.rsplit('.', 1)[0]:\n+                return f\"{method_self.__module__}.{method_self.__name__}.{obj.__func__.__name__}\"\n+            return f\"{method_self.__module__}.{method_self.__qualname__}.{obj.__func__.__name__}\"\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n                 # we have a field which also returns a name\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..6f59e64 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -36,7 +36,11 @@ class MigrationAutodetector:\n             return RegexObject(obj)\n         elif isinstance(obj, type):\n             return obj\n-        elif hasattr(obj, 'deconstruct'):\n+        elif isinstance(obj, classmethod):\n+            method_self = obj.__self__\n+            if isinstance(method_self, type) and method_self.__module__ == method_self.__qualname__.rsplit('.', 1)[0]:\n+                return f'{method_self.__module__}.{method_self.__name__}.{obj.__func__.__name__}'\n+            return f'{method_self.__module__}.{method_self.__qualname__}.{obj.__func__.__name__}'\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n                 deconstructed = deconstructed[1:]\n", "normalized_occurrence": 1}
