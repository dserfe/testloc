{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..b85fd8b 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -55,8 +55,20 @@ class CommandParser(ArgumentParser):\n     ):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n+        self.subparser_kwargs = kwargs\n         super().__init__(**kwargs)\n \n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        subparsers._parser_class = self.__class__\n+        subparsers._parser_kwargs = self.subparser_kwargs\n+        return subparsers\n+\n+    def add_parser(self, *args, **kwargs):\n+        if hasattr(self, '_parser_class') and hasattr(self, '_parser_kwargs'):\n+            kwargs.update(self._parser_kwargs)\n+        return super().add_parser(*args, **kwargs)\n+\n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n         if self.missing_args_message and not (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 14f4b26..a98fd1e 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -19,7 +19,17 @@ class CommandParser(ArgumentParser):\n     def __init__(self, *, missing_args_message=None, called_from_command_line=None, **kwargs):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n+        self.subparser_kwargs = kwargs\n         super().__init__(**kwargs)\n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        subparsers._parser_class = self.__class__\n+        subparsers._parser_kwargs = self.subparser_kwargs\n+        return subparsers\n+    def add_parser(self, *args, **kwargs):\n+        if hasattr(self, '_parser_class') and hasattr(self, '_parser_kwargs'):\n+            kwargs.update(self._parser_kwargs)\n+        return super().add_parser(*args, **kwargs)\n     def parse_args(self, args=None, namespace=None):\n         if self.missing_args_message and (not (args or any((not arg.startswith('-') for arg in args)))):\n             self.error(self.missing_args_message)\n", "normalized_occurrence": 1}
