{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..19d0948 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -949,6 +949,12 @@ class MigrationAutodetector:\n             old_field_dec = self.deep_deconstruct(old_field)\n             new_field_dec = self.deep_deconstruct(new_field)\n             if old_field_dec != new_field_dec:\n+                # Add dependencies if converting to ForeignKey\n+                if hasattr(new_field, 'remote_field') and new_field.remote_field and not hasattr(old_field, 'remote_field'):\n+                    dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, dep)\n+\n                 both_m2m = old_field.many_to_many and new_field.many_to_many\n                 neither_m2m = not old_field.many_to_many and not new_field.many_to_many\n                 if both_m2m or neither_m2m:\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..4b7c584 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -456,6 +456,10 @@ class MigrationAutodetector:\n             old_field_dec = self.deep_deconstruct(old_field)\n             new_field_dec = self.deep_deconstruct(new_field)\n             if old_field_dec != new_field_dec:\n+                if hasattr(new_field, 'remote_field') and new_field.remote_field and (not hasattr(old_field, 'remote_field')):\n+                    dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, dep)\n                 both_m2m = old_field.many_to_many and new_field.many_to_many\n                 neither_m2m = not old_field.many_to_many and (not new_field.many_to_many)\n                 if both_m2m or neither_m2m:\n", "normalized_occurrence": 2}
