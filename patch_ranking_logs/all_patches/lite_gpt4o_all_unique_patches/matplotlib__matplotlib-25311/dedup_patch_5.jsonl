{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..a3808ca 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3167,7 +3167,20 @@ None}, default: None\n         # discard any changes to the dpi due to pixel ratio changes\n         state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n \n-        # add version information to the state\n+        # temporarily remove `draggable` attribute from legends and annotations\n+        state['draggable_legends'] = {}\n+        state['draggable_annotations'] = {}\n+\n+        for legend in self.legends:\n+            if legend.get_draggable():\n+                state['draggable_legends'][id(legend)] = True\n+                legend.set_draggable(False)\n+\n+        for ax in self.axes:\n+            for annotation in ax.texts:\n+                if hasattr(annotation, \"draggable\") and annotation.draggable:\n+                    state['draggable_annotations'][id(annotation)] = True\n+                    annotation.draggable = False\n         state['__mpl_version__'] = mpl.__version__\n \n         # check whether the figure manager (if any) is registered with pyplot\n@@ -3176,6 +3189,21 @@ None}, default: None\n             state['_restore_to_pylab'] = True\n         return state\n \n+    def __setstate__(self, state):\n+        draggable_legends = state.pop('draggable_legends', {})\n+        draggable_annotations = state.pop('draggable_annotations', {})\n+\n+        super().__setstate__(state)\n+\n+        for legend in self.legends:\n+            if id(legend) in draggable_legends:\n+                legend.set_draggable(True)\n+\n+        for ax in self.axes:\n+            for annotation in ax.texts:\n+                if id(annotation) in draggable_annotations:\n+                    annotation.draggable = True\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..a198f90 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -947,11 +947,33 @@ class Figure(FigureBase):\n         state = super().__getstate__()\n         state.pop('canvas')\n         state['_dpi'] = state.get('_original_dpi', state['_dpi'])\n+        state['draggable_legends'] = {}\n+        state['draggable_annotations'] = {}\n+        for legend in self.legends:\n+            if legend.get_draggable():\n+                state['draggable_legends'][id(legend)] = True\n+                legend.set_draggable(False)\n+        for ax in self.axes:\n+            for annotation in ax.texts:\n+                if hasattr(annotation, 'draggable') and annotation.draggable:\n+                    state['draggable_annotations'][id(annotation)] = True\n+                    annotation.draggable = False\n         state['__mpl_version__'] = mpl.__version__\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n         return state\n+    def __setstate__(self, state):\n+        draggable_legends = state.pop('draggable_legends', {})\n+        draggable_annotations = state.pop('draggable_annotations', {})\n+        super().__setstate__(state)\n+        for legend in self.legends:\n+            if id(legend) in draggable_legends:\n+                legend.set_draggable(True)\n+        for ax in self.axes:\n+            for annotation in ax.texts:\n+                if id(annotation) in draggable_annotations:\n+                    annotation.draggable = True\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
