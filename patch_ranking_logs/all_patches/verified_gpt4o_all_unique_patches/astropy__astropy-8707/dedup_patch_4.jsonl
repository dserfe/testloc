{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..2c5a2b0 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -334,8 +334,8 @@ class Header:\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String (unicode) or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -357,7 +357,9 @@ class Header:\n         # immediately at the separator\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n \n-        # Split the header into individual cards\n+        # If data is bytes, decode it to str\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         idx = 0\n         image = []\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex a818589..ea5fd08 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -163,6 +163,8 @@ class Header:\n     def fromstring(cls, data, sep=''):\n         cards = []\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         idx = 0\n         image = []\n         while idx < len(data):\n", "normalized_occurrence": 4}
