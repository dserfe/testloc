{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..08c7e79 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -160,6 +160,22 @@ class Nominal(Scale):\n         stringify = np.vectorize(format)\n \n         units_seed = categorical_order(data, new.order)\n+        \n+        # Handle categorical-specific axis setup\n+        def _setup_categorical_axis(ax, orient):\n+            # Disable grid for categorical axis\n+            if orient == \"v\":\n+                ax.xaxis.grid(False)\n+            else:\n+                ax.yaxis.grid(False)\n+                # Invert y-axis for categorical y scales\n+                ax.invert_yaxis()\n+            \n+            # Set limits to extend +/- 0.5 beyond data range\n+            if orient == \"v\":\n+                ax.set_xlim(-0.5, len(units_seed) - 0.5)\n+            else:\n+                ax.set_ylim(-0.5, len(units_seed) - 0.5)\n \n         # TODO move to Nominal._get_scale?\n         # TODO this needs some more complicated rethinking about how to pass\n@@ -186,11 +202,12 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-\n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with categorical padding\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+        else:\n+            # Apply categorical-specific formatting to the actual axis\n+            orient = getattr(axis, '_orientation', 'h')  # Default to horizontal if not specified\n+            _setup_categorical_axis(axis, orient)\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..2c917c3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -87,6 +87,16 @@ class Nominal(Scale):\n             new = new.label()\n         stringify = np.vectorize(format)\n         units_seed = categorical_order(data, new.order)\n+        def _setup_categorical_axis(ax, orient):\n+            if orient == 'v':\n+                ax.xaxis.grid(False)\n+            else:\n+                ax.yaxis.grid(False)\n+                ax.invert_yaxis()\n+            if orient == 'v':\n+                ax.set_xlim(-0.5, len(units_seed) - 0.5)\n+            else:\n+                ax.set_ylim(-0.5, len(units_seed) - 0.5)\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n@@ -94,7 +104,10 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+        else:\n+            orient = getattr(axis, '_orientation', 'h')\n+            _setup_categorical_axis(axis, orient)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
