{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..99c1a68 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -498,7 +498,21 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # Get the current accumulated XOR state\n+        if hasattr(self.query, '_xor_state'):\n+            xor_state = self.query._xor_state\n+        else:\n+            xor_state = []\n+        # Add the new query to the XOR state\n+        xor_state.append(other.query)\n+        # Store the XOR state for future operations\n+        combined.query._xor_state = xor_state\n+        # If we have an odd number of terms, use XOR, otherwise use equivalence\n+        if len(xor_state) % 2 == 1:\n+            combined.query.combine(other.query, sql.XOR)\n+        else:\n+            # For even number of terms, we want the result to be false\n+            combined.query.combine(other.query, sql.AND)\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..22b8fe3 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,16 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        if hasattr(self.query, '_xor_state'):\n+            xor_state = self.query._xor_state\n+        else:\n+            xor_state = []\n+        xor_state.append(other.query)\n+        combined.query._xor_state = xor_state\n+        if len(xor_state) % 2 == 1:\n+            combined.query.combine(other.query, sql.XOR)\n+        else:\n+            combined.query.combine(other.query, sql.AND)\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
