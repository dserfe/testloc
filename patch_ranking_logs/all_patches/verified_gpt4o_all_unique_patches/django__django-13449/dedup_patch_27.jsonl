{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..d8258d4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -22,11 +22,8 @@ class SQLiteNumericMixin:\n     \"\"\"\n     def as_sqlite(self, compiler, connection, **extra_context):\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n-        try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n-        except FieldError:\n-            pass\n+        if isinstance(self, Window) and self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n         return sql, params\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..a206f05 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -15,11 +15,8 @@ from django.utils.hashable import make_hashable\n class SQLiteNumericMixin:\n     def as_sqlite(self, compiler, connection, **extra_context):\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n-        try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n-        except FieldError:\n-            pass\n+        if isinstance(self, Window) and self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n         return (sql, params)\n class Combinable:\n     ADD = '+'\n", "normalized_occurrence": 1}
