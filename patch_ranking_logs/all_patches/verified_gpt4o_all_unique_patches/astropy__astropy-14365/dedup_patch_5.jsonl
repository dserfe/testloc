{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 92431f5..19b066c 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -72,7 +72,7 @@ def _line_type(line, delimiter=None):\n     line = line.strip()\n     if not line:\n         return \"comment\"\n-    match = _line_type_re.match(line)\n+    match = _line_type_re.match(line.upper())\n \n     if match is None:\n         raise ValueError(f\"Unrecognized QDP line: {line}\")\n@@ -293,7 +293,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n             # The first time I find data, I define err_specs\n             if err_specs == {} and command_lines != \"\":\n                 for cline in command_lines.strip().split(\"\\n\"):\n-                    command = cline.strip().split()\n+                    command = cline.strip().upper().split()\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n                         continue\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 78a945e..67cd7b1 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -19,7 +19,7 @@ def _line_type(line, delimiter=None):\n     line = line.strip()\n     if not line:\n         return 'comment'\n-    match = _line_type_re.match(line)\n+    match = _line_type_re.match(line.upper())\n     if match is None:\n         raise ValueError(f'Unrecognized QDP line: {line}')\n     for type_, val in match.groupdict().items():\n@@ -109,7 +109,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n         if datatype.startswith('data'):\n             if err_specs == {} and command_lines != '':\n                 for cline in command_lines.strip().split('\\n'):\n-                    command = cline.strip().split()\n+                    command = cline.strip().upper().split()\n                     if len(command) < 3:\n                         continue\n                     err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n", "normalized_occurrence": 1}
