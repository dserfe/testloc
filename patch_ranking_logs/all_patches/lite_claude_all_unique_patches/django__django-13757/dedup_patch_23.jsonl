{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..8603e6f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -364,16 +364,23 @@ class CaseInsensitiveMixin:\n \n \n class KeyTransformIsNull(lookups.IsNull):\n-    # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n+        # key__isnull=False is the same as has_key='key'\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # key__isnull=True is the same as NOT has_key='key'\n+        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+        sql, params = has_key_expr.as_oracle(compiler, connection)\n+        return 'NOT (%s)' % sql, params\n \n     def as_sqlite(self, compiler, connection):\n+        # key__isnull=False is the same as has_key='key'\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # key__isnull=True is the same as NOT has_key='key'\n+        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+        sql, params = has_key_expr.as_sqlite(compiler, connection)\n+        return 'NOT (%s)' % sql, params\n \n \n class KeyTransformIn(lookups.In):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..a766e84 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -241,11 +241,15 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+        sql, params = has_key_expr.as_oracle(compiler, connection)\n+        return ('NOT (%s)' % sql, params)\n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        has_key_expr = HasKey(self.lhs.lhs, self.lhs.key_name)\n+        sql, params = has_key_expr.as_sqlite(compiler, connection)\n+        return ('NOT (%s)' % sql, params)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n         sql, params = super().resolve_expression_parameter(compiler, connection, sql, param)\n", "normalized_occurrence": 4}
