{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 0b52a54..939126a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1326,7 +1326,11 @@ class Query(BaseExpression):\n         return clause, used_joins if not require_outer else ()\n \n     def add_filter(self, filter_clause):\n-        self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))\n+        condition = Q(**{filter_clause[0]: filter_clause[1]})\n+        subquery = getattr(filter_clause[1], 'query', None)\n+        if subquery and subquery.group_by is not None:\n+            condition = Q(**{filter_clause[0]: filter_clause[1].values_list('id', flat=True)})\n+        self.add_q(condition)\n \n     def add_q(self, q_object):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 881d481..cc7f0b1 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -715,7 +715,11 @@ class Query(BaseExpression):\n                 clause.add(lookup_class(col, False), AND)\n         return (clause, used_joins if not require_outer else ())\n     def add_filter(self, filter_clause):\n-        self.add_q(Q(**{filter_clause[0]: filter_clause[1]}))\n+        condition = Q(**{filter_clause[0]: filter_clause[1]})\n+        subquery = getattr(filter_clause[1], 'query', None)\n+        if subquery and subquery.group_by is not None:\n+            condition = Q(**{filter_clause[0]: filter_clause[1].values_list('id', flat=True)})\n+        self.add_q(condition)\n     def add_q(self, q_object):\n         existing_inner = {a for a in self.alias_map if self.alias_map[a].join_type == INNER}\n         clause, _ = self._add_q(q_object, self.used_aliases)\n", "normalized_occurrence": 1}
