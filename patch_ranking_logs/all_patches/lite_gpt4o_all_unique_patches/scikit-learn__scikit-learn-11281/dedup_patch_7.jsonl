{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..33bf14b 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -585,6 +585,7 @@ class GaussianMixture(BaseMixture):\n                  weights_init=None, means_init=None, precisions_init=None,\n                  random_state=None, warm_start=False,\n                  verbose=0, verbose_interval=10):\n+        self.labels_ = None\n         super(GaussianMixture, self).__init__(\n             n_components=n_components, tol=tol, reg_covar=reg_covar,\n             max_iter=max_iter, n_init=n_init, init_params=init_params,\n@@ -596,6 +597,24 @@ class GaussianMixture(BaseMixture):\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and predict the cluster labels for X.\n+        \n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+        \n+        y : Ignored\n+        \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n+\n     def _check_parameters(self, X):\n         \"\"\"Check the Gaussian mixture parameters are well defined.\"\"\"\n         _, n_features = X.shape\n@@ -747,4 +766,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..3e70cc9 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -117,11 +117,16 @@ def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):\n     return -0.5 * (n_features * np.log(2 * np.pi) + log_prob) + log_det\n class GaussianMixture(BaseMixture):\n     def __init__(self, n_components=1, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weights_init=None, means_init=None, precisions_init=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10):\n+        self.labels_ = None\n         super(GaussianMixture, self).__init__(n_components=n_components, tol=tol, reg_covar=reg_covar, max_iter=max_iter, n_init=n_init, init_params=init_params, random_state=random_state, warm_start=warm_start, verbose=verbose, verbose_interval=verbose_interval)\n         self.covariance_type = covariance_type\n         self.weights_init = weights_init\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n     def _check_parameters(self, X):\n         _, n_features = X.shape\n         if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n", "normalized_occurrence": 1}
