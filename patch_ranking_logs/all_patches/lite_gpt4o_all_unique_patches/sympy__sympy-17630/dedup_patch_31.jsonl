{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..f5fe76f 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -463,14 +463,22 @@ def bc_matmul(expr):\n     i = 0\n     while (i+1 < len(matrices)):\n         A, B = matrices[i:i+2]\n+        def ensure_zero_matrix(m):\n+            return ZeroMatrix(m.shape[0], m.shape[1]) if m == 0 else m\n+\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            result = A._blockmul(B)\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n+            matrices[i] = result\n             matrices.pop(i+1)\n         elif isinstance(A, BlockMatrix):\n-            matrices[i] = A._blockmul(BlockMatrix([[B]]))\n+            result = A._blockmul(BlockMatrix([[B]]))\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n+            matrices[i] = result\n             matrices.pop(i+1)\n         elif isinstance(B, BlockMatrix):\n-            matrices[i] = BlockMatrix([[A]])._blockmul(B)\n+            result = BlockMatrix([[A]])._blockmul(B)\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n             matrices.pop(i+1)\n         else:\n             i+=1\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..10b7a4b 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -236,14 +236,21 @@ def bc_matmul(expr):\n     i = 0\n     while i + 1 < len(matrices):\n         A, B = matrices[i:i + 2]\n+        def ensure_zero_matrix(m):\n+            return ZeroMatrix(m.shape[0], m.shape[1]) if m == 0 else m\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            result = A._blockmul(B)\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n+            matrices[i] = result\n             matrices.pop(i + 1)\n         elif isinstance(A, BlockMatrix):\n-            matrices[i] = A._blockmul(BlockMatrix([[B]]))\n+            result = A._blockmul(BlockMatrix([[B]]))\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n+            matrices[i] = result\n             matrices.pop(i + 1)\n         elif isinstance(B, BlockMatrix):\n-            matrices[i] = BlockMatrix([[A]])._blockmul(B)\n+            result = BlockMatrix([[A]])._blockmul(B)\n+            result = BlockMatrix([[ensure_zero_matrix(block) for block in row] for row in result.blocks.tolist()])\n             matrices.pop(i + 1)\n         else:\n             i += 1\n", "normalized_occurrence": 1}
