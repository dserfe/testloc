{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..7cf28fb 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,6 +518,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the import is used in a type comment.\"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"type: {name}\" in comment.value:\n+                return True\n+        return False\n+\n     @check_messages(*MSGS)\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n@@ -542,8 +550,20 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n \n+            # Check if the import is used in a type comment\n+            if self._is_used_in_type_comment(node, name):\n+                continue\n+\n             self._add_imported_module(node, imported_module.name)\n \n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the import is used in a type comment.\"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"type: {name}\" in comment.value:\n+                return True\n+        return False\n+\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n@@ -566,12 +586,25 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n+\n+        # Check if the import is used in a type comment\n+        for name, _ in node.names:\n+            if self._is_used_in_type_comment(node, name):\n+                return\n         for name, _ in node.names:\n             if name != \"*\":\n                 self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if the import is used in a type comment.\"\"\"\n+        module = node.root()\n+        for comment in module.comments:\n+            if f\"type: {name}\" in comment.value:\n+                return True\n+        return False\n+\n     @check_messages(*MSGS)\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..0054356 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -165,6 +165,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self.add_message('cyclic-import', args=' -> '.join(cycle))\n     def deprecated_modules(self):\n         return self.config.deprecated_modules\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'type: {name}' in comment.value:\n+                return True\n+        return False\n     @check_messages(*MSGS)\n     def visit_import(self, node):\n         self._check_reimport(node)\n@@ -183,7 +189,15 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n                 continue\n+            if self._is_used_in_type_comment(node, name):\n+                continue\n             self._add_imported_module(node, imported_module.name)\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'type: {name}' in comment.value:\n+                return True\n+        return False\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n         basename = node.modname\n@@ -202,11 +216,20 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n+        for name, _ in node.names:\n+            if self._is_used_in_type_comment(node, name):\n+                return\n         for name, _ in node.names:\n             if name != '*':\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n             else:\n                 self._add_imported_module(node, imported_module.name)\n+    def _is_used_in_type_comment(self, node, name):\n+        module = node.root()\n+        for comment in module.comments:\n+            if f'type: {name}' in comment.value:\n+                return True\n+        return False\n     @check_messages(*MSGS)\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n", "normalized_occurrence": 1}
