{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ec70dcc..02bad05 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -932,7 +932,18 @@ class AssertionRewriter(ast.NodeVisitor):\n             set_location(stmt, assert_.lineno, assert_.col_offset)\n         return self.statements\n \n-    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n+    def visit_Name(self, name: ast.Name) -> Tuple[ast.expr, str]:\n+        # Special handling for True, False, None\n+        if name.id in ('True', 'False', 'None'):\n+            # For Python >= 3.8, use Constant\n+            if hasattr(ast, 'Constant'):\n+                value = {'True': True, 'False': False, 'None': None}[name.id]\n+                const = ast.Constant(value=value)\n+            else:\n+                # For older Python versions use NameConstant\n+                const = ast.NameConstant(value={'True': True, 'False': False, 'None': None}[name.id])\n+            return const, name.id\n+\n         # Display the repr of the name if it's a local variable or\n         # _should_repr_global_name() thinks it's acceptable.\n         locs = ast.Call(self.builtin(\"locals\"), [], [])\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 824bf26..f386084 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -488,7 +488,14 @@ class AssertionRewriter(ast.NodeVisitor):\n         for stmt in self.statements:\n             set_location(stmt, assert_.lineno, assert_.col_offset)\n         return self.statements\n-    def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n+    def visit_Name(self, name: ast.Name) -> Tuple[ast.expr, str]:\n+        if name.id in ('True', 'False', 'None'):\n+            if hasattr(ast, 'Constant'):\n+                value = {'True': True, 'False': False, 'None': None}[name.id]\n+                const = ast.Constant(value=value)\n+            else:\n+                const = ast.NameConstant(value={'True': True, 'False': False, 'None': None}[name.id])\n+            return (const, name.id)\n         locs = ast.Call(self.builtin('locals'), [], [])\n         inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n         dorepr = self.helper('_should_repr_global_name', name)\n", "normalized_occurrence": 1}
