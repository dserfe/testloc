{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23413", "model_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex aec23b1..809efd9 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -163,7 +163,7 @@ def _echelon_form(M, iszerofunc=_iszero, simplify=False, with_pivots=False):\n     simpfunc = simplify if isinstance(simplify, FunctionType) else _simplify\n \n     mat, pivots, _ = _row_reduce(M, iszerofunc, simpfunc,\n-            normalize_last=True, normalize=False, zero_above=False)\n+            normalize_last=True, normalize=False, zero_above=False, normalize_pivots=False)\n \n     if with_pivots:\n         return mat, pivots\n@@ -236,7 +236,7 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n             return 2\n \n     mat, _       = _permute_complexity_right(M, iszerofunc=iszerofunc)\n-    _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True,\n+    mat, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True,\n             normalize=False, zero_above=False)\n \n     return len(pivots)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex bf0ff55..8d0ae4c 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -61,7 +61,7 @@ def _is_echelon(M, iszerofunc=_iszero):\n     return zeros_below and _is_echelon(M[1:, 1:], iszerofunc)\n def _echelon_form(M, iszerofunc=_iszero, simplify=False, with_pivots=False):\n     simpfunc = simplify if isinstance(simplify, FunctionType) else _simplify\n-    mat, pivots, _ = _row_reduce(M, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n+    mat, pivots, _ = _row_reduce(M, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False, normalize_pivots=False)\n     if with_pivots:\n         return (mat, pivots)\n     return mat\n@@ -89,7 +89,7 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n         if iszerofunc(d) is False:\n             return 2\n     mat, _ = _permute_complexity_right(M, iszerofunc=iszerofunc)\n-    _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n+    mat, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n     return len(pivots)\n def _rref(M, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):\n     simpfunc = simplify if isinstance(simplify, FunctionType) else _simplify\n", "normalized_occurrence": 1}
