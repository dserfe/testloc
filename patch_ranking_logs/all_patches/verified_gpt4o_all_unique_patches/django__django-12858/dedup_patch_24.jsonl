{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..be8c635 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -191,6 +191,18 @@ class Options:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n \n             # order_with_respect_and ordering are mutually exclusive.\n+            # Validate the ordering fields.\n+            if self.ordering:\n+                for field in self.ordering:\n+                    if isinstance(field, str):\n+                        parts = field.split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if field_name.startswith('-'):\n+                            field_name = field_name[1:]\n+                        if field_name != '_order' and not self.get_field(field_name, many_to_many=False):\n+                            raise FieldError(\n+                                '%s has no field named \"%s\"' % (self.object_name, field_name)\n+                            )\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n             # Any leftover attributes must be invalid.\n@@ -558,7 +570,18 @@ class Options:\n         try:\n             # In order to avoid premature loading of the relation tree\n             # (expensive) we prefer checking if the field is a forward field.\n-            return self._forward_fields_map[field_name]\n+            # Handle lookups in ordering\n+            if LOOKUP_SEP in field_name:\n+                parts = field_name.split(LOOKUP_SEP)\n+                field = self._forward_fields_map[parts[0]]\n+                for part in parts[1:]:\n+                    if field.is_relation:\n+                        field = field.related_model._meta.get_field(part)\n+                    else:\n+                        raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, field_name))\n+                return field\n+            else:\n+                return self._forward_fields_map[field_name]\n         except KeyError:\n             # If the app registry is not ready, reverse fields are\n             # unavailable, therefore we throw a FieldDoesNotExist exception.\n@@ -859,4 +882,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..568ee0e 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -117,6 +117,15 @@ class Options:\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            if self.ordering:\n+                for field in self.ordering:\n+                    if isinstance(field, str):\n+                        parts = field.split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if field_name.startswith('-'):\n+                            field_name = field_name[1:]\n+                        if field_name != '_order' and (not self.get_field(field_name, many_to_many=False)):\n+                            raise FieldError('%s has no field named \"%s\"' % (self.object_name, field_name))\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n@@ -310,7 +319,17 @@ class Options:\n         return res\n     def get_field(self, field_name):\n         try:\n-            return self._forward_fields_map[field_name]\n+            if LOOKUP_SEP in field_name:\n+                parts = field_name.split(LOOKUP_SEP)\n+                field = self._forward_fields_map[parts[0]]\n+                for part in parts[1:]:\n+                    if field.is_relation:\n+                        field = field.related_model._meta.get_field(part)\n+                    else:\n+                        raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, field_name))\n+                return field\n+            else:\n+                return self._forward_fields_map[field_name]\n         except KeyError:\n             if not self.apps.models_ready:\n                 raise FieldDoesNotExist(\"%s has no field named '%s'. The app cache isn't ready yet, so if this is an auto-created related field, it won't be available yet.\" % (self.object_name, field_name))\n", "normalized_occurrence": 1}
