{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..1a15702 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -342,11 +342,12 @@ class SQLCompiler:\n \n         for expr, is_ref in order_by:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n-            if self.query.combinator:\n+            if self.query.combinator and self.query.order_by:\n                 src = resolved.get_source_expressions()[0]\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n+                # Skip if order_by has been cleared to avoid position mismatches.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..046c5e8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -181,7 +181,7 @@ class SQLCompiler:\n         seen = set()\n         for expr, is_ref in order_by:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n-            if self.query.combinator:\n+            if self.query.combinator and self.query.order_by:\n                 src = resolved.get_source_expressions()[0]\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n", "normalized_occurrence": 1}
