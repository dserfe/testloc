{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex eeb18de..657f1e0 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1581,6 +1581,20 @@ default: %(va)s\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height.\n         \"\"\"\n+        # Get the default spacings if none are specified\n+        if wspace is None:\n+            wspace = rcParams['figure.subplot.wspace']\n+        if hspace is None:\n+            hspace = rcParams['figure.subplot.hspace']\n+\n+        # Calculate the actual figure area considering the spacings\n+        total_width = 1.0\n+        total_height = 1.0\n+        \n+        # Calculate subfigure sizes accounting for spacing\n+        subfig_width = total_width / ncols * (1 - wspace * (ncols - 1) / ncols)\n+        subfig_height = total_height / nrows * (1 - hspace * (nrows - 1) / nrows)\n+\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n@@ -1589,6 +1603,13 @@ default: %(va)s\n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n+                # Calculate position with spacing\n+                left = i * (subfig_width + wspace * total_width / ncols)\n+                bottom = (nrows - 1 - j) * (subfig_height + hspace * total_height / nrows)\n+                \n+                # Create subfigure with proper position and size\n+                gs[j, i].update(left=left, bottom=bottom,\n+                               width=subfig_width, height=subfig_height)\n                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n \n         if squeeze:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 19ec421..2908ce8 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -410,10 +410,21 @@ class FigureBase(Artist):\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n         return gs\n     def subfigures(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):\n+        if wspace is None:\n+            wspace = rcParams['figure.subplot.wspace']\n+        if hspace is None:\n+            hspace = rcParams['figure.subplot.hspace']\n+        total_width = 1.0\n+        total_height = 1.0\n+        subfig_width = total_width / ncols * (1 - wspace * (ncols - 1) / ncols)\n+        subfig_height = total_height / nrows * (1 - hspace * (nrows - 1) / nrows)\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)\n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n+                left = i * (subfig_width + wspace * total_width / ncols)\n+                bottom = (nrows - 1 - j) * (subfig_height + hspace * total_height / nrows)\n+                gs[j, i].update(left=left, bottom=bottom, width=subfig_width, height=subfig_height)\n                 sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n         if squeeze:\n             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n", "normalized_occurrence": 1}
