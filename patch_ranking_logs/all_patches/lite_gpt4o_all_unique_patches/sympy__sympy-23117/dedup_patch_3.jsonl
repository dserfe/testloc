{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..0b8aeab 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -191,8 +191,8 @@ class NDimArray(Printable):\n     @classmethod\n     def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n-            if not isinstance(pointer, Iterable):\n-                return [pointer], ()\n+            if not isinstance(pointer, Iterable) or not pointer:\n+                return [pointer], (0,) if not pointer else ()\n \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..2dd8b83 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -68,8 +68,8 @@ class NDimArray(Printable):\n     @classmethod\n     def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n-            if not isinstance(pointer, Iterable):\n-                return ([pointer], ())\n+            if not isinstance(pointer, Iterable) or not pointer:\n+                return ([pointer], (0,) if not pointer else ())\n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n", "normalized_occurrence": 1}
