{"model_name_or_path": "agentless", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 4d90328..749ee0c 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -921,7 +921,7 @@ class ForeignKey(ForeignObject):\n         qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n-        qs = qs.complex_filter(self.get_limit_choices_to())\n+        qs = qs.complex_filter(self.get_limit_choices_to()).distinct()\n         if not qs.exists():\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 119c3cb..88baa80 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -403,7 +403,7 @@ class ForeignKey(ForeignObject):\n             return\n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n         qs = self.remote_field.model._base_manager.using(using).filter(**{self.remote_field.field_name: value})\n-        qs = qs.complex_filter(self.get_limit_choices_to())\n+        qs = qs.complex_filter(self.get_limit_choices_to()).distinct()\n         if not qs.exists():\n             raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'model': self.remote_field.model._meta.verbose_name, 'pk': value, 'field': self.remote_field.field_name, 'value': value})\n     def resolve_related_fields(self):\n", "normalized_occurrence": 1}
