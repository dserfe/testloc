{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16502", "model_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 70fd79d..bc56f6f 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -110,6 +110,8 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n         super().close_request(request)\n \n \n+import io\n+\n class ServerHandler(simple_server.ServerHandler):\n     http_version = \"1.1\"\n \n@@ -142,6 +144,10 @@ class ServerHandler(simple_server.ServerHandler):\n         # application sent the header.\n         if self.headers.get(\"Connection\") == \"close\":\n             self.request_handler.close_connection = True\n+        # Strip the response body for HEAD requests as per RFC 2616\n+        if self.request_handler.command == \"HEAD\":\n+            self.stdout = io.BytesIO()\n+            self.headers[\"Content-Length\"] = \"0\"\n \n     def close(self):\n         self.get_stdin().read()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/servers/basehttp.py b/django/core/servers/basehttp.py\nindex 8acf9ef..2775248 100644\n--- a/django/core/servers/basehttp.py\n+++ b/django/core/servers/basehttp.py\n@@ -49,6 +49,7 @@ class ThreadedWSGIServer(socketserver.ThreadingMixIn, WSGIServer):\n     def close_request(self, request):\n         self._close_connections()\n         super().close_request(request)\n+import io\n class ServerHandler(simple_server.ServerHandler):\n     http_version = '1.1'\n     def __init__(self, stdin, stdout, stderr, environ, **kwargs):\n@@ -65,6 +66,9 @@ class ServerHandler(simple_server.ServerHandler):\n             self.headers['Connection'] = 'close'\n         if self.headers.get('Connection') == 'close':\n             self.request_handler.close_connection = True\n+        if self.request_handler.command == 'HEAD':\n+            self.stdout = io.BytesIO()\n+            self.headers['Content-Length'] = '0'\n     def close(self):\n         self.get_stdin().read()\n         super().close()\n", "normalized_occurrence": 1}
