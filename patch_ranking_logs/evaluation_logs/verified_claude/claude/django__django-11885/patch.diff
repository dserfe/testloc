diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index da91f5e..28840a4 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -310,9 +310,26 @@ class Collector:
                     )
 
             # fast deletes
+            # Group fast deletes by model to combine queries
+            fast_deletes_by_model = {}
             for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
+                model = qs.model
+                if model not in fast_deletes_by_model:
+                    fast_deletes_by_model[model] = []
+                fast_deletes_by_model[model].append(qs)
+            
+            # Execute combined fast deletes for each model
+            for model, querysets in fast_deletes_by_model.items():
+                if len(querysets) > 1:
+                    # Combine the querysets with OR conditions
+                    combined_qs = querysets[0]
+                    for qs in querysets[1:]:
+                        combined_qs = combined_qs | qs
+                    count = combined_qs._raw_delete(using=self.using)
+                else:
+                    # Single queryset case - no combining needed
+                    count = querysets[0]._raw_delete(using=self.using)
+                deleted_counter[model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
@@ -346,4 +363,4 @@ class Collector:
         for model, instances in self.data.items():
             for instance in instances:
                 setattr(instance, model._meta.pk.attname, None)
-        return sum(deleted_counter.values()), dict(deleted_counter)
+        return sum(deleted_counter.values()), dict(deleted_counter)
