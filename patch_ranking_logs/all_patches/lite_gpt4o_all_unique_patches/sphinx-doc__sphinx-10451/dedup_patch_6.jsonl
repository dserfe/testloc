{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..39d114a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -60,16 +60,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == \"all\":\n                 if objtype == 'class':\n-                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)\n+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True, filter_star_args=True)\n                 else:\n-                    modify_field_list(field_list, annotations[fullname])\n+                    modify_field_list(field_list, annotations[fullname], filter_star_args=True)\n             elif app.config.autodoc_typehints_description_target == \"documented_params\":\n                 augment_descriptions_with_types(\n-                    field_list, annotations[fullname], force_rtype=True\n+                    field_list, annotations[fullname], force_rtype=True, filter_star_args=True\n                 )\n             else:\n                 augment_descriptions_with_types(\n-                    field_list, annotations[fullname], force_rtype=False\n+                    field_list, annotations[fullname], force_rtype=False, filter_star_args=True\n                 )\n \n \n@@ -87,7 +87,8 @@ def insert_field_list(node: Element) -> nodes.field_list:\n \n \n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n-                      suppress_rtype: bool = False) -> None:\n+                      suppress_rtype: bool = False,\n+                      filter_star_args: bool = False) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -116,6 +117,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             continue\n \n         arg = arguments.get(name, {})\n+        if filter_star_args and (name == '*args' or name == '**kwargs'):\n+            continue\n+\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n@@ -141,7 +145,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n def augment_descriptions_with_types(\n     node: nodes.field_list,\n     annotations: Dict[str, str],\n-    force_rtype: bool\n+    force_rtype: bool,\n+    filter_star_args: bool = False\n ) -> None:\n     fields = cast(Iterable[nodes.field], node)\n     has_description = set()  # type: Set[str]\n@@ -170,6 +175,9 @@ def augment_descriptions_with_types(\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n+        if filter_star_args and (name == '*args' or name == '**kwargs'):\n+            continue\n+\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..8f7b3e5 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -45,13 +45,13 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == 'all':\n                 if objtype == 'class':\n-                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True)\n+                    modify_field_list(field_list, annotations[fullname], suppress_rtype=True, filter_star_args=True)\n                 else:\n-                    modify_field_list(field_list, annotations[fullname])\n+                    modify_field_list(field_list, annotations[fullname], filter_star_args=True)\n             elif app.config.autodoc_typehints_description_target == 'documented_params':\n-                augment_descriptions_with_types(field_list, annotations[fullname], force_rtype=True)\n+                augment_descriptions_with_types(field_list, annotations[fullname], force_rtype=True, filter_star_args=True)\n             else:\n-                augment_descriptions_with_types(field_list, annotations[fullname], force_rtype=False)\n+                augment_descriptions_with_types(field_list, annotations[fullname], force_rtype=False, filter_star_args=True)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n@@ -61,7 +61,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppress_rtype: bool=False) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppress_rtype: bool=False, filter_star_args: bool=False) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -86,6 +86,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n+        if filter_star_args and (name == '*args' or name == '**kwargs'):\n+            continue\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n@@ -104,7 +106,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         field += nodes.field_name('', 'rtype')\n         field += nodes.field_body('', nodes.paragraph('', annotation))\n         node += field\n-def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[str, str], force_rtype: bool) -> None:\n+def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[str, str], force_rtype: bool, filter_star_args: bool=False) -> None:\n     fields = cast(Iterable[nodes.field], node)\n     has_description = set()\n     has_type = set()\n@@ -128,6 +130,8 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n+        if filter_star_args and (name == '*args' or name == '**kwargs'):\n+            continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n", "normalized_occurrence": 1}
