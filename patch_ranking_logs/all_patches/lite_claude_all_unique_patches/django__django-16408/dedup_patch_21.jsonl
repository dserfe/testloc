{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16408", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 83f3a12..a9e1dee 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1830,7 +1830,7 @@ class Query(BaseExpression):\n                 INNER,\n                 join.join_field,\n                 nullable,\n-                filtered_relation=filtered_relation,\n+                filtered_relation=filtered_relation if not join.m2m else None,\n             )\n             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n             alias = self.join(\n@@ -1840,7 +1840,10 @@ class Query(BaseExpression):\n             )\n             joins.append(alias)\n             if filtered_relation:\n+                # Store both the joins path and the original relation path\n                 filtered_relation.path = joins[:]\n+                if not hasattr(filtered_relation, 'original_path'):\n+                    filtered_relation.original_path = path\n         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n \n     def trim_joins(self, targets, joins, path):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 0b42199..69129b8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -904,12 +904,14 @@ class Query(BaseExpression):\n                 nullable = self.is_nullable(join.join_field)\n             else:\n                 nullable = True\n-            connection = self.join_class(opts.db_table, alias, table_alias, INNER, join.join_field, nullable, filtered_relation=filtered_relation)\n+            connection = self.join_class(opts.db_table, alias, table_alias, INNER, join.join_field, nullable, filtered_relation=filtered_relation if not join.m2m else None)\n             reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n             alias = self.join(connection, reuse=reuse, reuse_with_filtered_relation=reuse_with_filtered_relation)\n             joins.append(alias)\n             if filtered_relation:\n                 filtered_relation.path = joins[:]\n+                if not hasattr(filtered_relation, 'original_path'):\n+                    filtered_relation.original_path = path\n         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n     def trim_joins(self, targets, joins, path):\n         joins = joins[:]\n", "normalized_occurrence": 1}
