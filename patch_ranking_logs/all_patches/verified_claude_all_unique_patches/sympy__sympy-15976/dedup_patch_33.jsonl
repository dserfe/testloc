{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..fc5bf78 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -778,10 +778,18 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         subs = [translate(sub) for sub in subs]\n \n         mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        # Ensure the entire name is treated as one identifier\n+        if name.isalpha():\n+            mname.appendChild(self.dom.createTextNode(name))\n+        else:\n+            # For names containing numbers, explicitly set mathvariant\n+            mname.setAttribute('mathvariant', 'normal')\n+            mname.appendChild(self.dom.createTextNode(name))\n+            \n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                # Use mname instead of direct text node to ensure proper identifier handling\n+                return mname\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..bf30ec5 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -545,10 +545,14 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n         mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        if name.isalpha():\n+            mname.appendChild(self.dom.createTextNode(name))\n+        else:\n+            mname.setAttribute('mathvariant', 'normal')\n+            mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                return mname\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n", "normalized_occurrence": 1}
