{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..1228bf5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -809,6 +809,15 @@ class ProductSet(Set):\n                 'number of symbols must match the number of sets')\n         return And(*[s.as_relational(i) for s, i in zip(self.sets, symbols)])\n \n+    def _eval_is_subset(self, other):\n+        if isinstance(other, FiniteSet):\n+            # For a finite set, we can check if all elements in self are in other\n+            from itertools import product\n+            # Generate all possible combinations from our constituent sets\n+            tuples = product(*[set(s) for s in self.sets])\n+            return all(other.contains(t) for t in tuples)\n+        return None\n+\n     @property\n     def _boundary(self):\n         return Union(*(ProductSet(*(b + b.boundary if i != j else b.boundary\n", "occurrence": 1, "normalized_patch": "--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n+    def _eval_is_subset(self, other):\n+        if isinstance(other, FiniteSet):\n+            from itertools import product\n+            tuples = product(*[set(s) for s in self.sets])\n+            return all((other.contains(t) for t in tuples))\n+        return None", "normalized_occurrence": 1}
