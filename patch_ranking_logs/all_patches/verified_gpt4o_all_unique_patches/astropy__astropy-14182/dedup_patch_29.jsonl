{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..99ce943 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,25 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n+        if self.header_rows:\n+            header_lines = self._generate_header_lines()\n+            lines = header_lines + lines\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        return lines\n+\n+    def _generate_header_lines(self):\n+        header_lines = [\" \".join(self.header_rows)]\n+        header_lines.append(\" \".join([\"=\" * len(header) for header in self.header_rows]))\n+        return header_lines\n+        super().__init__(delimiter_pad=None, bookend=False)\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        lines = [lines[1]] + lines + [lines[1]]\n+        return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..46f8824 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,7 +18,20 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+    def write(self, lines):\n+        if self.header_rows:\n+            header_lines = self._generate_header_lines()\n+            lines = header_lines + lines\n+        lines = super().write(lines)\n+        lines = [lines[1]] + lines + [lines[1]]\n+        return lines\n+    def _generate_header_lines(self):\n+        header_lines = [' '.join(self.header_rows)]\n+        header_lines.append(' '.join(['=' * len(header) for header in self.header_rows]))\n+        return header_lines\n         super().__init__(delimiter_pad=None, bookend=False)\n     def write(self, lines):\n         lines = super().write(lines)\n", "normalized_occurrence": 1}
