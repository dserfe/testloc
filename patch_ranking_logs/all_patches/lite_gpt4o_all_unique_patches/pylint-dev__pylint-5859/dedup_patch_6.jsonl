{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-5859", "model_patch": "diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\nindex 030ec92..2a4b7a7 100644\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -278,6 +278,7 @@ def get_global_option(\n def _splitstrip(string, sep=\",\"):\n     \"\"\"Return a list of stripped string by splitting the string given as\n     argument on `sep` (',' by default). Empty string are discarded.\n+    Note tags consisting entirely of punctuation are not ignored.\n \n     >>> _splitstrip('a, b, c   ,  4,,')\n     ['a', 'b', 'c', '4']\n@@ -295,7 +296,10 @@ def _splitstrip(string, sep=\",\"):\n     :rtype: str or unicode\n     :return: the unquoted string (or the input string if it wasn't quoted)\n     \"\"\"\n-    return [word.strip() for word in string.split(sep) if word.strip()]\n+    def is_not_empty_or_just_punctuation(word):\n+        return word.strip() and not all(char in string.punctuation for char in word.strip())\n+\n+    return [word.strip() for word in string.split(sep) if is_not_empty_or_just_punctuation(word)]\n \n \n def _unquote(string):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\nindex 0221700..512e428 100644\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -127,7 +127,9 @@ def get_global_option(checker: 'BaseChecker', option: GLOBAL_OPTION_NAMES, defau\n                 return getattr(provider.config, option.replace('-', '_'))\n     return default\n def _splitstrip(string, sep=','):\n-    return [word.strip() for word in string.split(sep) if word.strip()]\n+    def is_not_empty_or_just_punctuation(word):\n+        return word.strip() and (not all((char in string.punctuation for char in word.strip())))\n+    return [word.strip() for word in string.split(sep) if is_not_empty_or_just_punctuation(word)]\n def _unquote(string):\n     if not string:\n         return string\n", "normalized_occurrence": 1}
