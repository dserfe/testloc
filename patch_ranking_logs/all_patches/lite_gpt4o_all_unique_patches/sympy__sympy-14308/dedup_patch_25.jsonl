{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..bd7ba09 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -915,14 +915,29 @@ class PrettyPrinter(Printer):\n                               k._pretty_form)\n                 #For a general expr\n                 else:\n-                    #We always wrap the measure numbers in\n-                    #parentheses\n-                    arg_str = self._print(\n-                        v).parens()[0]\n-\n+                    # We always wrap the measure numbers in parentheses\n+                    arg_str = self._print(v).parens()[0]\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n \n+        if o1 and o1[0].startswith(u\" + \"):\n+            o1[0] = o1[0][3:]\n+        elif o1 and o1[0].startswith(\" \"):\n+            o1[0] = o1[0][1:]\n+\n+        lengths = [len(partstr) for partstr in o1]\n+        max_length = max(lengths) if lengths else 0\n+        strs = ['']\n+        for i, partstr in enumerate(o1):\n+            if '\\n' in partstr:\n+                for line in partstr.split('\\n'):\n+                    strs.append(line.center(max_length))\n+            else:\n+                strs.append(partstr.center(max_length))\n+\n+        final_str = '\\n'.join(strs)\n+        return prettyForm(final_str)\n+\n         #outstr = u(\"\").join(o1)\n         if o1[0].startswith(u\" + \"):\n             o1[0] = o1[0][3:]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..c02b550 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -663,6 +663,21 @@ class PrettyPrinter(Printer):\n                     arg_str = self._print(v).parens()[0]\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n+        if o1 and o1[0].startswith(u' + '):\n+            o1[0] = o1[0][3:]\n+        elif o1 and o1[0].startswith(' '):\n+            o1[0] = o1[0][1:]\n+        lengths = [len(partstr) for partstr in o1]\n+        max_length = max(lengths) if lengths else 0\n+        strs = ['']\n+        for i, partstr in enumerate(o1):\n+            if '\\n' in partstr:\n+                for line in partstr.split('\\n'):\n+                    strs.append(line.center(max_length))\n+            else:\n+                strs.append(partstr.center(max_length))\n+        final_str = '\\n'.join(strs)\n+        return prettyForm(final_str)\n         if o1[0].startswith(u' + '):\n             o1[0] = o1[0][3:]\n         elif o1[0].startswith(' '):\n", "normalized_occurrence": 1}
