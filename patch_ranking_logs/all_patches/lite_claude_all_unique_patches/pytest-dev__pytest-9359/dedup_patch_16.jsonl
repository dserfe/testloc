{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..85f364f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -954,10 +954,12 @@ class AssertionRewriter(ast.NodeVisitor):\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n-        # Fix locations (line numbers/column offsets).\n+        # Fix locations (line numbers/column offsets), but only for the assertion line\n+        assertion_end = assert_.end_lineno if hasattr(assert_, 'end_lineno') else assert_.lineno\n         for stmt in self.statements:\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                if not hasattr(node, 'lineno') or node.lineno <= assertion_end:\n+                    ast.copy_location(node, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..0775cf2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -512,9 +512,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n+        assertion_end = assert_.end_lineno if hasattr(assert_, 'end_lineno') else assert_.lineno\n         for stmt in self.statements:\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                if not hasattr(node, 'lineno') or node.lineno <= assertion_end:\n+                    ast.copy_location(node, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
