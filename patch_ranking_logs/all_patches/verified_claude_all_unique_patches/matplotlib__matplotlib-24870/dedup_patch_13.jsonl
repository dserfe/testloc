{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..7d905fb 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1122,7 +1122,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         Determine the contour levels and store in self.levels.\n         \"\"\"\n         if self.levels is None:\n-            if len(args) == 0:\n+            # Auto-detect boolean arrays and use level=[0.5]\n+            if hasattr(self, 'z') and np.issubdtype(self.z.dtype, np.bool_):\n+                levels_arg = [0.5]\n+            elif len(args) == 0:\n                 levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n@@ -1456,12 +1459,14 @@ class QuadContourSet(ContourSet):\n         else:\n             raise _api.nargs_error(fn, takes=\"from 1 to 4\", given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n+        self.z = z  # Store z for level processing\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+            self.z = z  # Update stored z if masked\n         self._process_contour_level_args(args)\n         return (x, y, z)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..e642439 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -482,7 +482,9 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         return lev[i0:i1]\n     def _process_contour_level_args(self, args):\n         if self.levels is None:\n-            if len(args) == 0:\n+            if hasattr(self, 'z') and np.issubdtype(self.z.dtype, np.bool_):\n+                levels_arg = [0.5]\n+            elif len(args) == 0:\n                 levels_arg = 7\n             else:\n                 levels_arg = args[0]\n@@ -672,12 +674,14 @@ class QuadContourSet(ContourSet):\n         else:\n             raise _api.nargs_error(fn, takes='from 1 to 4', given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n+        self.z = z\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n         if self.logscale and self.zmin <= 0:\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+            self.z = z\n         self._process_contour_level_args(args)\n         return (x, y, z)\n     def _check_xyz(self, args, kwargs):\n", "normalized_occurrence": 1}
