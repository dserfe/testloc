{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3993", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4198249..e6530a8 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,21 +3481,25 @@ class DataArray(AbstractArray, DataWithCoords):\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]] = None, datetime_unit: str = None, \n+        dim: Union[Hashable, Sequence[Hashable]] = None,\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n         .. note::\n-            This feature is limited to simple cartesian geometry, i.e. dim\n+            This feature is limited to simple cartesian geometry, i.e. coord\n             must be one dimensional.\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n             Can be used to specify the unit if datetime coordinate is used.\n+        dim : hashable, or sequence of hashable, optional\n+            Deprecated: use coord instead.\n+            Coordinate(s) used for the integration.\n \n         Returns\n         -------\n@@ -3528,7 +3532,17 @@ class DataArray(AbstractArray, DataWithCoords):\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        if dim is not None:\n+            if coord is not None:\n+                raise ValueError(\"Cannot specify both 'dim' and 'coord' arguments. Use 'coord' instead as 'dim' is deprecated.\")\n+            import warnings\n+            warnings.warn(\"The 'dim' argument has been deprecated and will be removed in a future version. Use 'coord' instead.\", \n+                        FutureWarning, stacklevel=2)\n+            coord = dim\n+        elif coord is None:\n+            raise TypeError(\"integrate() missing 1 required argument: 'coord'\")\n+            \n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex ae20f2c..123324d 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -805,8 +805,16 @@ class DataArray(AbstractArray, DataWithCoords):\n     def differentiate(self, coord: Hashable, edge_order: int=1, datetime_unit: str=None) -> 'DataArray':\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n-    def integrate(self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str=None) -> 'DataArray':\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+    def integrate(self, coord: Union[Hashable, Sequence[Hashable]]=None, datetime_unit: str=None, dim: Union[Hashable, Sequence[Hashable]]=None) -> 'DataArray':\n+        if dim is not None:\n+            if coord is not None:\n+                raise ValueError(\"Cannot specify both 'dim' and 'coord' arguments. Use 'coord' instead as 'dim' is deprecated.\")\n+            import warnings\n+            warnings.warn(\"The 'dim' argument has been deprecated and will be removed in a future version. Use 'coord' instead.\", FutureWarning, stacklevel=2)\n+            coord = dim\n+        elif coord is None:\n+            raise TypeError(\"integrate() missing 1 required argument: 'coord'\")\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n     def unify_chunks(self) -> 'DataArray':\n         ds = self._to_temp_dataset().unify_chunks()\n", "normalized_occurrence": 1}
