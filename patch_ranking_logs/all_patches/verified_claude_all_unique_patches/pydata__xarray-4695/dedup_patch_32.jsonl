{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..e110b22 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -95,17 +95,17 @@ def _is_nested_tuple(possible_tuple):\n     )\n \n \n-def get_indexer_nd(index, labels, method=None, tolerance=None):\n+def get_indexer_nd(index, labels, fill_method=None, tolerance=None):\n     \"\"\"Wrapper around :meth:`pandas.Index.get_indexer` supporting n-dimensional\n     labels\n     \"\"\"\n     flat_labels = np.ravel(labels)\n-    flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n+    flat_indexer = index.get_indexer(flat_labels, method=fill_method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n \n \n-def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name=\"\", fill_method=None, tolerance=None):\n     \"\"\"Given a pandas.Index and labels (e.g., from __getitem__) for one\n     dimension, return an indexer suitable for indexing an ndarray along that\n     dimension. If `index` is a pandas.MultiIndex and depending on `label`,\n@@ -114,9 +114,9 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n     new_index = None\n \n     if isinstance(label, slice):\n-        if method is not None or tolerance is not None:\n+        if fill_method is not None or tolerance is not None:\n             raise NotImplementedError(\n-                \"cannot use ``method`` argument if any indexers are slice objects\"\n+                \"cannot use ``fill_method`` argument if any indexers are slice objects\"\n             )\n         indexer = index.slice_indexer(\n             _sanitize_slice_element(label.start),\n@@ -178,9 +178,9 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n             if isinstance(index, pd.MultiIndex):\n                 indexer, new_index = index.get_loc_level(label_value, level=0)\n             elif isinstance(index, pd.CategoricalIndex):\n-                if method is not None:\n+                if fill_method is not None:\n                     raise ValueError(\n-                        \"'method' is not a valid kwarg when indexing using a CategoricalIndex.\"\n+                        \"'fill_method' is not a valid kwarg when indexing using a CategoricalIndex.\"\n                     )\n                 if tolerance is not None:\n                     raise ValueError(\n@@ -188,7 +188,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     )\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=fill_method, tolerance=tolerance)\n         elif label.dtype.kind == \"b\":\n             indexer = label\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..e2329c3 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -52,16 +52,16 @@ def _asarray_tuplesafe(values):\n     return result\n def _is_nested_tuple(possible_tuple):\n     return isinstance(possible_tuple, tuple) and any((isinstance(value, (tuple, list, slice)) for value in possible_tuple))\n-def get_indexer_nd(index, labels, method=None, tolerance=None):\n+def get_indexer_nd(index, labels, fill_method=None, tolerance=None):\n     flat_labels = np.ravel(labels)\n-    flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n+    flat_indexer = index.get_indexer(flat_labels, method=fill_method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n-def convert_label_indexer(index, label, index_name='', method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name='', fill_method=None, tolerance=None):\n     new_index = None\n     if isinstance(label, slice):\n-        if method is not None or tolerance is not None:\n-            raise NotImplementedError('cannot use ``method`` argument if any indexers are slice objects')\n+        if fill_method is not None or tolerance is not None:\n+            raise NotImplementedError('cannot use ``fill_method`` argument if any indexers are slice objects')\n         indexer = index.slice_indexer(_sanitize_slice_element(label.start), _sanitize_slice_element(label.stop), _sanitize_slice_element(label.step))\n         if not isinstance(indexer, slice):\n             raise KeyError(f'cannot represent labeled-based slice indexer for dimension {index_name!r} with a slice over integer positions; the index is unsorted or non-unique')\n@@ -92,13 +92,13 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n             if isinstance(index, pd.MultiIndex):\n                 indexer, new_index = index.get_loc_level(label_value, level=0)\n             elif isinstance(index, pd.CategoricalIndex):\n-                if method is not None:\n-                    raise ValueError(\"'method' is not a valid kwarg when indexing using a CategoricalIndex.\")\n+                if fill_method is not None:\n+                    raise ValueError(\"'fill_method' is not a valid kwarg when indexing using a CategoricalIndex.\")\n                 if tolerance is not None:\n                     raise ValueError(\"'tolerance' is not a valid kwarg when indexing using a CategoricalIndex.\")\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=fill_method, tolerance=tolerance)\n         elif label.dtype.kind == 'b':\n             indexer = label\n         else:\n", "normalized_occurrence": 1}
