{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7c860dc..8966615 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1423,8 +1423,13 @@ class SQLDeleteCompiler(SQLCompiler):\n         Create the SQL for this query. Return the SQL string and list of\n         parameters.\n         \"\"\"\n+        # For basic deletions (no joins, etc), use simple DELETE\n+        if self.query.where.is_empty() and self.single_alias:\n+            return self._as_sql(self.query)\n+        # For single alias but with WHERE conditions, still use simple DELETE\n         if self.single_alias:\n             return self._as_sql(self.query)\n+        # For complex deletions with multiple tables/aliases, use subquery\n         innerq = self.query.clone()\n         innerq.__class__ = Query\n         innerq.clear_select_clause()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 8178df0..98ad0ed 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -798,6 +798,8 @@ class SQLDeleteCompiler(SQLCompiler):\n             result.append('WHERE %s' % where)\n         return (' '.join(result), tuple(params))\n     def as_sql(self):\n+        if self.query.where.is_empty() and self.single_alias:\n+            return self._as_sql(self.query)\n         if self.single_alias:\n             return self._as_sql(self.query)\n         innerq = self.query.clone()\n", "normalized_occurrence": 2}
