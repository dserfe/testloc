{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db0cc2e..ebb9154 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1508,7 +1508,12 @@ class DraggableBase:\n         ]\n \n     # A property, not an attribute, to maintain picklability.\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self._canvas if hasattr(self, '_canvas') else self.ref_artist.figure.canvas)\n+\n+    def __init_canvas(self):\n+        \"\"\"Initialize canvas reference if not already done.\"\"\"\n+        if not hasattr(self, '_canvas'):\n+            self._canvas = self.ref_artist.figure.canvas\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1558,14 +1563,15 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n+        self.__init_canvas()  # Ensure we have a canvas reference\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            self._canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            self._canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex f94319f..8ed50d6 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1264,7 +1264,12 @@ class DraggableBase:\n         self.got_artist = False\n         self._use_blit = use_blit and self.canvas.supports_blit\n         self.cids = [self.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n-    canvas = property(lambda self: self.ref_artist.figure.canvas)\n+    canvas = property(lambda self: self._canvas if hasattr(self, '_canvas') else self.ref_artist.figure.canvas)\n+\n+    def __init_canvas(self):\n+        \"\"\"Initialize canvas reference if not already done.\"\"\"\n+        if not hasattr(self, '_canvas'):\n+            self._canvas = self.ref_artist.figure.canvas\n \n     def on_motion(self, evt):\n         if self._check_still_parented() and self.got_artist:\n@@ -1309,14 +1314,15 @@ class DraggableBase:\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n+        self.__init_canvas()\n         for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n+            self._canvas.mpl_disconnect(cid)\n         try:\n             c1 = self._c1\n         except AttributeError:\n             pass\n         else:\n-            self.canvas.mpl_disconnect(c1)\n+            self._canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "normalized_occurrence": 1}
