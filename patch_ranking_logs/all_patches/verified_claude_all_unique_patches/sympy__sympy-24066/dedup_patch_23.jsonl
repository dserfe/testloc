{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..ea33392 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -410,7 +410,7 @@ class DimensionSystem(Basic, _QuantityMapper):\n                     else:\n                         raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n                 else:\n-                    if all(item == {} for item in dicts):\n+                    if all(item == {} or self.is_dimensionless(Dimension._from_dimensional_dependencies(item)) for item in dicts):\n                         return {}\n                     else:\n                         raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..24afcb4 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -236,7 +236,7 @@ class DimensionSystem(Basic, _QuantityMapper):\n                         return {}\n                     else:\n                         raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n-                elif all((item == {} for item in dicts)):\n+                elif all((item == {} or self.is_dimensionless(Dimension._from_dimensional_dependencies(item)) for item in dicts)):\n                     return {}\n                 else:\n                     raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n", "normalized_occurrence": 1}
