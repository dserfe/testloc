{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..0d5ab6a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -54,12 +54,8 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def shape(self):\n-        numrows = numcols = 0\n-        M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        numrows = max((M[i, 0].shape[0] for i in range(M.shape[0])), default=0)\n+        numcols = sum((M[0, i].shape[1] for i in range(M.shape[1])), 0)\n         return (numrows, numcols)\n \n     @property\n@@ -226,8 +222,9 @@ class BlockDiagMatrix(BlockMatrix):\n \n     @property\n     def shape(self):\n-        return (sum(block.rows for block in self.args),\n-                sum(block.cols for block in self.args))\n+        numrows = max((block.rows for block in self.args), default=0)\n+        numcols = sum((block.cols for block in self.args), 0)\n+        return (numrows, numcols)\n \n     @property\n     def blockshape(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..caed7b8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -24,12 +24,8 @@ class BlockMatrix(MatrixExpr):\n         return obj\n     @property\n     def shape(self):\n-        numrows = numcols = 0\n-        M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        numrows = max((M[i, 0].shape[0] for i in range(M.shape[0])), default=0)\n+        numcols = sum((M[0, i].shape[1] for i in range(M.shape[1])), 0)\n         return (numrows, numcols)\n     @property\n     def blockshape(self):\n@@ -124,7 +120,9 @@ class BlockDiagMatrix(BlockMatrix):\n         return ImmutableDenseMatrix(data)\n     @property\n     def shape(self):\n-        return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n+        numrows = max((block.rows for block in self.args), default=0)\n+        numcols = sum((block.cols for block in self.args), 0)\n+        return (numrows, numcols)\n     @property\n     def blockshape(self):\n         n = len(self.args)\n", "normalized_occurrence": 1}
