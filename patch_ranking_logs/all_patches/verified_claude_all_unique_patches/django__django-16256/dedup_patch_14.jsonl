{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16256", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a01cd24..ff4e526 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -793,6 +793,21 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         create.alters_data = True\n \n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+\n+        acreate.alters_data = True\n+\n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -1191,6 +1206,21 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         create.alters_data = True\n \n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.create)(through_defaults=through_defaults, **kwargs)\n+\n+        acreate.alters_data = True\n+\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.get_or_create)(through_defaults=through_defaults, **kwargs)\n+\n+        aget_or_create.alters_data = True\n+\n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.update_or_create)(through_defaults=through_defaults, **kwargs)\n+\n+        aupdate_or_create.alters_data = True\n+\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex be1830e..278a455 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -305,6 +305,15 @@ def create_reverse_many_to_one_manager(superclass, rel):\n             db = router.db_for_write(self.model, instance=self.instance)\n             return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n         create.alters_data = True\n+        async def acreate(self, **kwargs):\n+            return await sync_to_async(self.create)(**kwargs)\n+        acreate.alters_data = True\n+        async def aget_or_create(self, **kwargs):\n+            return await sync_to_async(self.get_or_create)(**kwargs)\n+        aget_or_create.alters_data = True\n+        async def aupdate_or_create(self, **kwargs):\n+            return await sync_to_async(self.update_or_create)(**kwargs)\n+        aupdate_or_create.alters_data = True\n         def get_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n@@ -510,6 +519,15 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n             self.add(new_obj, through_defaults=through_defaults)\n             return new_obj\n         create.alters_data = True\n+        async def acreate(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.create)(through_defaults=through_defaults, **kwargs)\n+        acreate.alters_data = True\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.get_or_create)(through_defaults=through_defaults, **kwargs)\n+        aget_or_create.alters_data = True\n+        async def aupdate_or_create(self, *, through_defaults=None, **kwargs):\n+            return await sync_to_async(self.update_or_create)(through_defaults=through_defaults, **kwargs)\n+        aupdate_or_create.alters_data = True\n         def get_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n", "normalized_occurrence": 1}
