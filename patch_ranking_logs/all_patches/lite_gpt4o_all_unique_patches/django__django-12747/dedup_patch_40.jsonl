{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 398c1d7..e82bf24 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -737,7 +737,12 @@ class QuerySet:\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n-        return deleted, _rows_count\n+        # Ensure the result format is consistent for zero deletions.\n+        if not deleted:\n+            model_labels = {model._meta.label: 0 for model in collector.data}\n+            return deleted, model_labels\n+        else:\n+            return deleted, _rows_count\n \n     delete.alters_data = True\n     delete.queryset_only = True\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0586bad..d6fe0f8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -449,7 +449,11 @@ class QuerySet:\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n         self._result_cache = None\n-        return (deleted, _rows_count)\n+        if not deleted:\n+            model_labels = {model._meta.label: 0 for model in collector.data}\n+            return (deleted, model_labels)\n+        else:\n+            return (deleted, _rows_count)\n     delete.alters_data = True\n     delete.queryset_only = True\n     def _raw_delete(self, using):\n", "normalized_occurrence": 1}
