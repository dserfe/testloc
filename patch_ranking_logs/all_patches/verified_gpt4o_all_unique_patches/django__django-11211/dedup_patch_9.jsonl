{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..3bf643d 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -193,17 +193,14 @@ class GenericForeignKey(FieldCacheMixin):\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n             ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n \n-        # For doing the join in Python, we have to match both the FK val and the\n-        # content type, so we use a callable that returns a (fk, class) pair.\n+        # For doing the join in Python, we have to match both the FK value and the\n+        # content type, so we use a callable that returns a (ct_id, fk value) pair.\n         def gfk_key(obj):\n             ct_id = getattr(obj, ct_attname)\n             if ct_id is None:\n                 return None\n             else:\n-                model = self.get_content_type(id=ct_id,\n-                                              using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                return (ct_id, getattr(obj, self.fk_field))\n \n         return (\n             ret_val,\n@@ -218,10 +215,6 @@ class GenericForeignKey(FieldCacheMixin):\n         if instance is None:\n             return self\n \n-        # Don't use getattr(instance, self.ct_field) here because that might\n-        # reload the same ContentType over and over (#5570). Instead, get the\n-        # content type ID here, and later when the actual instance is needed,\n-        # use ContentType.objects.get_for_id(), which has a global cache.\n         f = self.model._meta.get_field(self.ct_field)\n         ct_id = getattr(instance, f.get_attname(), None)\n         pk_val = getattr(instance, self.fk_field)\n@@ -229,7 +222,7 @@ class GenericForeignKey(FieldCacheMixin):\n         rel_obj = self.get_cached_value(instance, default=None)\n         if rel_obj is not None:\n             ct_match = ct_id == self.get_content_type(obj=rel_obj, using=instance._state.db).id\n-            pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_obj.pk\n+            pk_match = pk_val == str(rel_obj.pk)  # Compare UUIDs as strings\n             if ct_match and pk_match:\n                 return rel_obj\n             else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..2e7a397 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -99,8 +99,7 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is None:\n                 return None\n             else:\n-                model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n+                return (ct_id, getattr(obj, self.fk_field))\n         return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n@@ -111,7 +110,7 @@ class GenericForeignKey(FieldCacheMixin):\n         rel_obj = self.get_cached_value(instance, default=None)\n         if rel_obj is not None:\n             ct_match = ct_id == self.get_content_type(obj=rel_obj, using=instance._state.db).id\n-            pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_obj.pk\n+            pk_match = pk_val == str(rel_obj.pk)\n             if ct_match and pk_match:\n                 return rel_obj\n             else:\n", "normalized_occurrence": 1}
