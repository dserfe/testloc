{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..0b7ed0e 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -150,4 +150,23 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n+\n+    def check(self, model, **kwargs):\n+        errors = []\n+        for field in self.fields:\n+            if not any(\n+                field == f.name or\n+                field == f.attname or\n+                field.startswith(f'{f.name}__')\n+                for f in model._meta.get_fields()\n+            ):\n+                errors.append(\n+                    checks.Error(\n+                        \"The field '%s' was declared for unique constraint %s, \"\n+                        \"but it doesn't exist.\" % (field, self.name),\n+                        obj=model,\n+                        id='models.E012',\n+                    )\n+                )\n+        return errors\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n-        return (path, args, kwargs)\n+        return (path, args, kwargs)\n+    def check(self, model, **kwargs):\n+        errors = []\n+        for field in self.fields:\n+            if not any((field == f.name or field == f.attname or field.startswith(f'{f.name}__') for f in model._meta.get_fields())):\n+                errors.append(checks.Error(\"The field '%s' was declared for unique constraint %s, but it doesn't exist.\" % (field, self.name), obj=model, id='models.E012'))\n+        return errors", "normalized_occurrence": 1}
