{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15375", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex bc577ea..7ba1821 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -480,11 +480,15 @@ class Query(BaseExpression):\n                     annotation_select_mask.remove(alias)\n                 # Make sure the annotation_select wont use cached results.\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n-            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n+            if inner_query.select == () and not inner_query.default_cols:\n                 # In case of Model.objects[0:3].count(), there would be no\n                 # field selected in the inner query, yet we must use a subquery.\n                 # So, make sure at least one field is selected.\n                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                # Ensure annotations are properly selected in inner query\n+                if inner_query.annotation_select_mask:\n+                    inner_query.select += tuple(inner_query.annotations[alias].get_col(inner_query.get_initial_alias())\n+                                              for alias in inner_query.annotation_select_mask)\n         else:\n             outer_query = self\n             self.select = ()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 0be9c1e..010017b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -265,8 +265,10 @@ class Query(BaseExpression):\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n-            if inner_query.select == () and (not inner_query.default_cols) and (not inner_query.annotation_select_mask):\n+            if inner_query.select == () and (not inner_query.default_cols):\n                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+                if inner_query.annotation_select_mask:\n+                    inner_query.select += tuple((inner_query.annotations[alias].get_col(inner_query.get_initial_alias()) for alias in inner_query.annotation_select_mask))\n         else:\n             outer_query = self\n             self.select = ()\n", "normalized_occurrence": 1}
