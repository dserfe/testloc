{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..31bb117 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -725,19 +725,14 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, Function)):\n                 argrep = self._argrepr(arg)\n-\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n                     argstrs.append(self._argrepr(dummy))\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n                     argstrs.append(argrep)\n-            elif isinstance(arg, Function):\n-                dummy = Dummy()\n-                argstrs.append(self._argrepr(dummy))\n-                expr = self._subexpr(expr, {arg: dummy})\n             else:\n                 argstrs.append(str(arg))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..7c78a3e 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -294,7 +294,7 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, Function)):\n                 argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n@@ -302,10 +302,6 @@ class _EvaluatorPrinter(object):\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n                     argstrs.append(argrep)\n-            elif isinstance(arg, Function):\n-                dummy = Dummy()\n-                argstrs.append(self._argrepr(dummy))\n-                expr = self._subexpr(expr, {arg: dummy})\n             else:\n                 argstrs.append(str(arg))\n         return (argstrs, expr)\n", "normalized_occurrence": 1}
