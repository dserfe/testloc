{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..5d0321e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,11 +407,15 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n+        # Filter out the constraints that match the type we want to delete\n+        constraint_names = [name for name in constraint_names if self._constraint_type(model, name) == constraint_kwargs.get('index', False)]\n+        \n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s). Expected exactly one constraint of type '%s'.\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n                 \", \".join(columns),\n+                'index' if constraint_kwargs.get('index', False) else 'unique',\n             ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..e66e808 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,8 +230,9 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        constraint_names = [name for name in constraint_names if self._constraint_type(model, name) == constraint_kwargs.get('index', False)]\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s). Expected exactly one constraint of type '%s'.\" % (len(constraint_names), model._meta.db_table, ', '.join(columns), 'index' if constraint_kwargs.get('index', False) else 'unique'))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n", "normalized_occurrence": 1}
