{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..a91e2c2 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -44,6 +44,23 @@ class MigrationOptimizer:\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1 :]):\n+                # Check for AddIndex followed by RemoveIndex for the same index,\n+                # and RemoveIndex followed by AddIndex for the same index.\n+                if (\n+                    isinstance(operation, AddIndex) and\n+                    isinstance(other, RemoveIndex) and\n+                    operation.model_name_lower == other.model_name_lower and\n+                    operation.index.name == other.name\n+                ) or (\n+                    isinstance(operation, RemoveIndex) and\n+                    isinstance(other, AddIndex) and\n+                    operation.model_name_lower == other.model_name_lower and\n+                    operation.name == other.index.name\n+                ):\n+                    # Skip these operations as they cancel each other out.\n+                    operations = operations[:i] + operations[i + j + 2:]\n+                    return operations\n+\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1 : i + j + 1]\n@@ -66,4 +83,4 @@ class MigrationOptimizer:\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..5845d6c 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -14,6 +14,9 @@ class MigrationOptimizer:\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n+                if isinstance(operation, AddIndex) and isinstance(other, RemoveIndex) and (operation.model_name_lower == other.model_name_lower) and (operation.index.name == other.name) or (isinstance(operation, RemoveIndex) and isinstance(other, AddIndex) and (operation.model_name_lower == other.model_name_lower) and (operation.name == other.index.name)):\n+                    operations = operations[:i] + operations[i + j + 2:]\n+                    return operations\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n", "normalized_occurrence": 1}
