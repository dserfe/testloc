{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..6f8a912 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,21 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            name = self.value.name\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, name),\n+                {\"import %s\" % module},\n+            )\n+        except AttributeError:\n+            # Enum combination flags\n+            members, _ = enum_class._decompose(self.value)\n+            names = [m.name for m in members]\n+            enum_expression = \" | \".join(f\"{module}.{enum_class.__qualname__}.{name}\" for name in names)\n+            return (\n+                enum_expression,\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..411ef4d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,14 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            name = self.value.name\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, name), {'import %s' % module})\n+        except AttributeError:\n+            members, _ = enum_class._decompose(self.value)\n+            names = [m.name for m in members]\n+            enum_expression = ' | '.join((f'{module}.{enum_class.__qualname__}.{name}' for name in names))\n+            return (enum_expression, {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
