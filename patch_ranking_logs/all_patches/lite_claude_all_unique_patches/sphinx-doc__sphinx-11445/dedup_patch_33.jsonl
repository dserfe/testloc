{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py\nindex ec97f42..e975350 100644\n--- a/sphinx/environment/collectors/title.py\n+++ b/sphinx/environment/collectors/title.py\n@@ -38,9 +38,15 @@ class TitleCollector(EnvironmentCollector):\n             longtitlenode += nodes.Text(doctree['title'])\n         # look for first section title and use that as the title\n         for node in doctree.findall(nodes.section):\n-            visitor = SphinxContentsFilter(doctree)\n-            node[0].walkabout(visitor)\n-            titlenode += visitor.get_entry_text()\n+            # Create a deep copy of the first title node to avoid modifying the original\n+            title = node[0].deepcopy()\n+            # Handle domain directives in the title\n+            for domain_node in title.findall(addnodes.desc_name):\n+                if domain_node.parent.get('domain'):\n+                    # Replace domain directive node with its text content\n+                    text = nodes.Text(domain_node.astext())\n+                    domain_node.replace_self(text)\n+            titlenode.extend(title.children)\n             break\n         else:\n             # document has no title\n@@ -56,4 +62,4 @@ def setup(app: Sphinx) -> dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py\nindex 90c3ce6..58b7194 100644\n--- a/sphinx/environment/collectors/title.py\n+++ b/sphinx/environment/collectors/title.py\n@@ -20,9 +20,12 @@ class TitleCollector(EnvironmentCollector):\n             longtitlenode = nodes.title()\n             longtitlenode += nodes.Text(doctree['title'])\n         for node in doctree.findall(nodes.section):\n-            visitor = SphinxContentsFilter(doctree)\n-            node[0].walkabout(visitor)\n-            titlenode += visitor.get_entry_text()\n+            title = node[0].deepcopy()\n+            for domain_node in title.findall(addnodes.desc_name):\n+                if domain_node.parent.get('domain'):\n+                    text = nodes.Text(domain_node.astext())\n+                    domain_node.replace_self(text)\n+            titlenode.extend(title.children)\n             break\n         else:\n             titlenode += nodes.Text(doctree.get('title', '<no title>'))\n", "normalized_occurrence": 1}
