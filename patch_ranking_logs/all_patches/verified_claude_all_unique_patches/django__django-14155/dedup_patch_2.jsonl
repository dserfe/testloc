{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..107b3d6 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,25 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n-            # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+        # Handle functools.partial\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            # For partial functions, use the underlying function for the path\n+            wrapped_func = func.func\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            if not hasattr(wrapped_func, '__name__'):\n+                # A class-based view\n+                self._func_path = wrapped_func.__class__.__module__ + '.' + wrapped_func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = wrapped_func.__module__ + '.' + wrapped_func.__name__\n         else:\n-            # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            if not hasattr(func, '__name__'):\n+                # A class-based view\n+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = func.__module__ + '.' + func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +72,17 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if hasattr(self, 'partial_args') or hasattr(self, 'partial_keywords'):\n+            partial_info = []\n+            if hasattr(self, 'partial_args') and self.partial_args:\n+                partial_info.append(f\"args={self.partial_args}\")\n+            if hasattr(self, 'partial_keywords') and self.partial_keywords:\n+                partial_info.append(f\"keywords={self.partial_keywords}\")\n+            if partial_info:\n+                func_repr = f\"{self._func_path}[partial: {', '.join(partial_info)}]\"\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..1db2f47 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,7 +29,15 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            wrapped_func = func.func\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            if not hasattr(wrapped_func, '__name__'):\n+                self._func_path = wrapped_func.__class__.__module__ + '.' + wrapped_func.__class__.__name__\n+            else:\n+                self._func_path = wrapped_func.__module__ + '.' + wrapped_func.__name__\n+        elif not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n@@ -38,7 +46,16 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_repr = self._func_path\n+        if hasattr(self, 'partial_args') or hasattr(self, 'partial_keywords'):\n+            partial_info = []\n+            if hasattr(self, 'partial_args') and self.partial_args:\n+                partial_info.append(f'args={self.partial_args}')\n+            if hasattr(self, 'partial_keywords') and self.partial_keywords:\n+                partial_info.append(f'keywords={self.partial_keywords}')\n+            if partial_info:\n+                func_repr = f\"{self._func_path}[partial: {', '.join(partial_info)}]\"\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
