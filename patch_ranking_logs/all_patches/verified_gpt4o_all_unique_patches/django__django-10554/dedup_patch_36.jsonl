{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..f4ed779 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -344,7 +344,7 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n-                # Relabel order by columns to raw numbers if this is a combined\n+                # Relabel order by columns to their positions in the select list if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n@@ -353,10 +353,10 @@ class SQLCompiler:\n                     elif col_alias:\n                         continue\n                     if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), (), resolved.output_field)])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    raise DatabaseError('ORDER BY term does not match any column in the result set of the union query.')\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..9e4d31c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -189,10 +189,10 @@ class SQLCompiler:\n                     elif col_alias:\n                         continue\n                     if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), (), resolved.output_field)])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    raise DatabaseError('ORDER BY term does not match any column in the result set of the union query.')\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
