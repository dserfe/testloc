{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 0aa71a3..c94e876 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -336,21 +336,21 @@ class RenameField(FieldOperation):\n                 ]\n         # Fix to_fields to refer to the new field.\n         model_tuple = app_label, self.model_name_lower\n-        for (model_app_label, model_name), model_state in state.models.items():\n-            for index, (name, field) in enumerate(model_state.fields):\n-                remote_field = field.remote_field\n+        for (model_app_label, related_model_name), related_model_state in state.models.items():\n+            for index, (related_field_name, related_field) in enumerate(related_model_state.fields):\n+                remote_field = related_field.remote_field\n                 if remote_field:\n                     remote_model_tuple = self._get_model_tuple(\n-                        remote_field.model, model_app_label, model_name\n+                        remote_field.model, model_app_label, related_model_name\n                     )\n                     if remote_model_tuple == model_tuple:\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n-                        to_fields = getattr(field, 'to_fields', None)\n-                        if to_fields:\n-                            field.to_fields = tuple([\n-                                self.new_name if to_field_name == self.old_name else to_field_name\n-                                for to_field_name in to_fields\n+                        related_to_fields = getattr(related_field, 'to_fields', None)\n+                        if related_to_fields:\n+                            related_field.to_fields = tuple([\n+                                self.new_name if related_to_field_name == self.old_name else related_to_field_name\n+                                for related_to_field_name in related_to_fields\n                             ])\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n@@ -399,4 +399,4 @@ class RenameField(FieldOperation):\n         return (\n             super(FieldOperation, self).reduce(operation, app_label=app_label) or\n             not operation.references_field(self.model_name, self.new_name, app_label)\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex b2b87fe..1ee7221 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -191,17 +191,17 @@ class RenameField(FieldOperation):\n             if option in options:\n                 options[option] = [[self.new_name if n == self.old_name else n for n in together] for together in options[option]]\n         model_tuple = (app_label, self.model_name_lower)\n-        for (model_app_label, model_name), model_state in state.models.items():\n-            for index, (name, field) in enumerate(model_state.fields):\n-                remote_field = field.remote_field\n+        for (model_app_label, related_model_name), related_model_state in state.models.items():\n+            for index, (related_field_name, related_field) in enumerate(related_model_state.fields):\n+                remote_field = related_field.remote_field\n                 if remote_field:\n-                    remote_model_tuple = self._get_model_tuple(remote_field.model, model_app_label, model_name)\n+                    remote_model_tuple = self._get_model_tuple(remote_field.model, model_app_label, related_model_name)\n                     if remote_model_tuple == model_tuple:\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n-                        to_fields = getattr(field, 'to_fields', None)\n-                        if to_fields:\n-                            field.to_fields = tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields])\n+                        related_to_fields = getattr(related_field, 'to_fields', None)\n+                        if related_to_fields:\n+                            related_field.to_fields = tuple([self.new_name if related_to_field_name == self.old_name else related_to_field_name for related_to_field_name in related_to_fields])\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n", "normalized_occurrence": 1}
