{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..47c87cb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,11 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        # Store iterable class name for proper reconstruction\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        if hasattr(self, '_iterable_class'):\n+            state['_iterable_class_name'] = f'{self._iterable_class.__module__}.{self._iterable_class.__name__}'\n+        return state\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n@@ -257,6 +261,14 @@ class QuerySet:\n                 RuntimeWarning,\n                 stacklevel=2,\n             )\n+        \n+        # Restore iterable class if it was stored\n+        iterable_class_name = state.pop('_iterable_class_name', None)\n+        if iterable_class_name:\n+            module_name, class_name = iterable_class_name.rsplit('.', 1)\n+            module = __import__(module_name, fromlist=[class_name])\n+            self._iterable_class = getattr(module, class_name)\n+            \n         self.__dict__.update(state)\n \n     def __repr__(self):\n", "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..f93ce3e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -143,7 +143,10 @@ class QuerySet:\n         return obj\n     def __getstate__(self):\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        if hasattr(self, '_iterable_class'):\n+            state['_iterable_class_name'] = f'{self._iterable_class.__module__}.{self._iterable_class.__name__}'\n+        return state\n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n         if pickled_version:\n@@ -151,6 +154,11 @@ class QuerySet:\n                 warnings.warn(\"Pickled queryset instance's Django version %s does not match the current version %s.\" % (pickled_version, django.__version__), RuntimeWarning, stacklevel=2)\n         else:\n             warnings.warn(\"Pickled queryset instance's Django version is not specified.\", RuntimeWarning, stacklevel=2)\n+        iterable_class_name = state.pop('_iterable_class_name', None)\n+        if iterable_class_name:\n+            module_name, class_name = iterable_class_name.rsplit('.', 1)\n+            module = __import__(module_name, fromlist=[class_name])\n+            self._iterable_class = getattr(module, class_name)\n         self.__dict__.update(state)\n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n", "normalized_occurrence": 1}
