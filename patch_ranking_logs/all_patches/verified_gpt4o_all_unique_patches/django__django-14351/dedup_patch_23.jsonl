{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..bee86a7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -411,7 +411,11 @@ class Query(BaseExpression):\n                     else:\n                         # Some other expression not referencing database values\n                         # directly. Its subexpression might contain Cols.\n-                        new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n+                        # Ensure that only necessary columns are returned in subqueries\n+                        if isinstance(expr, Col) and (branch_negated or current_negated):\n+                            new_expr = expr\n+                        else:\n+                            new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n                 new_exprs.append(new_expr)\n         annotation.set_source_expressions(new_exprs)\n         return annotation, col_cnt\n@@ -439,7 +443,7 @@ class Query(BaseExpression):\n         # aggregates on the limit and/or distinct results instead of applying\n         # the distinct and limit after the aggregation.\n         if (isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or\n-                self.distinct or self.combinator):\n+                self.distinct or self.combinator or branch_negated or current_negated):\n             from django.db.models.sql.subqueries import AggregateQuery\n             inner_query = self.clone()\n             inner_query.subquery = True\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..fe703a9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -235,6 +235,8 @@ class Query(BaseExpression):\n                         self.annotations[col_alias] = expr\n                         self.append_annotation_mask([col_alias])\n                         new_expr = Ref(col_alias, expr)\n+                    elif isinstance(expr, Col) and (branch_negated or current_negated):\n+                        new_expr = expr\n                     else:\n                         new_expr, col_cnt = self.rewrite_cols(expr, col_cnt)\n                 new_exprs.append(new_expr)\n@@ -244,7 +246,7 @@ class Query(BaseExpression):\n         if not self.annotation_select:\n             return {}\n         existing_annotations = [annotation for alias, annotation in self.annotations.items() if alias not in added_aggregate_names]\n-        if isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or self.distinct or self.combinator:\n+        if isinstance(self.group_by, tuple) or self.is_sliced or existing_annotations or self.distinct or self.combinator or branch_negated or current_negated:\n             from django.db.models.sql.subqueries import AggregateQuery\n             inner_query = self.clone()\n             inner_query.subquery = True\n", "normalized_occurrence": 1}
