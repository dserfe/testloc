{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..aeda553 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,12 +108,19 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            # Group all symbols under a single \"Symbols\" section\n+            if not lckey[0:1].isalpha():\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+        # Ensure there is only one anchor for the \"Symbols\" section\n+        symbols = [(k, v) for k, v in new.items() if not k[0].isalpha()]\n+        if symbols:\n+            newlist.insert(0, ('Symbols', [item for sublist in symbols for item in sublist[1]]))\n+            for symbol in symbols:\n+                del new[symbol[0]]\n+        newlist.extend(sorted(new.items(), key=keyfunc))\n \n         if group_entries:\n             # fixup entries: transform\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..763229e 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -73,10 +73,15 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\u200f'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not lckey[0:1].isalpha():\n                 lckey = chr(127) + lckey\n             return (lckey, entry[0])\n-        newlist = sorted(new.items(), key=keyfunc)\n+        symbols = [(k, v) for k, v in new.items() if not k[0].isalpha()]\n+        if symbols:\n+            newlist.insert(0, ('Symbols', [item for sublist in symbols for item in sublist[1]]))\n+            for symbol in symbols:\n+                del new[symbol[0]]\n+        newlist.extend(sorted(new.items(), key=keyfunc))\n         if group_entries:\n             oldkey = ''\n             oldsubitems = None\n", "normalized_occurrence": 1}
