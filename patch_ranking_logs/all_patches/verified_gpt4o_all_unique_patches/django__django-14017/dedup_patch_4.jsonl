{"model_name_or_path": "agentless", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c757b1f..ba18ce7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -137,11 +137,15 @@ class Combinable:\n         return self._combine(other, self.POW, True)\n \n     def __rand__(self, other):\n+        if getattr(self, 'conditional', False) and isinstance(other, Q):\n+            return Q(other) & Q(self)\n         raise NotImplementedError(\n             \"Use .bitand() and .bitor() for bitwise logical operations.\"\n         )\n \n     def __ror__(self, other):\n+        if getattr(self, 'conditional', False) and isinstance(other, Q):\n+            return Q(other) | Q(self)\n         raise NotImplementedError(\n             \"Use .bitand() and .bitor() for bitwise logical operations.\"\n         )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex b443491..1a9e7bb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -84,8 +84,12 @@ class Combinable:\n     def __rpow__(self, other):\n         return self._combine(other, self.POW, True)\n     def __rand__(self, other):\n+        if getattr(self, 'conditional', False) and isinstance(other, Q):\n+            return Q(other) & Q(self)\n         raise NotImplementedError('Use .bitand() and .bitor() for bitwise logical operations.')\n     def __ror__(self, other):\n+        if getattr(self, 'conditional', False) and isinstance(other, Q):\n+            return Q(other) | Q(self)\n         raise NotImplementedError('Use .bitand() and .bitor() for bitwise logical operations.')\n @deconstructible\n class BaseExpression:\n", "normalized_occurrence": 1}
