{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..b5f3cbf 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1144,22 +1144,12 @@ class PrettyPrinter(Printer):\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                if '\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n-                    for paren in range(len(tempstr)):\n-                        flag[i] = 1\n-                        if tempstr[paren] == '\\N{right parenthesis extension}':\n-                            tempstr = tempstr[:paren] + '\\N{right parenthesis extension}'\\\n-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]\n-                            break\n-                elif '\\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:\n-                    flag[i] = 1\n-                    tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS LOWER HOOK}',\n-                                        '\\N{RIGHT PARENTHESIS LOWER HOOK}'\n-                                        + ' ' + vectstrs[i])\n+                flag[i] = 1\n+                # Always append the vector basis at the end of the term\n+                if tempstr.endswith('\\n'):\n+                    tempstr = tempstr[:-1] + ' ' + vectstrs[i] + '\\n'\n                 else:\n-                    tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                        '\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                        + ' ' + vectstrs[i])\n+                    tempstr = tempstr + ' ' + vectstrs[i]\n                 o1[i] = tempstr\n \n         o1 = [x.split('\\n') for x in o1]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..9cd57e4 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -834,17 +834,11 @@ class PrettyPrinter(Printer):\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                if '\u239f' in tempstr:\n-                    for paren in range(len(tempstr)):\n-                        flag[i] = 1\n-                        if tempstr[paren] == '\u239f':\n-                            tempstr = tempstr[:paren] + '\u239f' + ' ' + vectstrs[i] + tempstr[paren + 1:]\n-                            break\n-                elif '\u23a0' in tempstr:\n-                    flag[i] = 1\n-                    tempstr = tempstr.replace('\u23a0', '\u23a0' + ' ' + vectstrs[i])\n+                flag[i] = 1\n+                if tempstr.endswith('\\n'):\n+                    tempstr = tempstr[:-1] + ' ' + vectstrs[i] + '\\n'\n                 else:\n-                    tempstr = tempstr.replace('\u239e', '\u239e' + ' ' + vectstrs[i])\n+                    tempstr = tempstr + ' ' + vectstrs[i]\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n", "normalized_occurrence": 1}
