{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..ce4cf23 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,9 +6737,6 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n-        if density and not stacked:\n-            hist_kwargs['density'] = density\n-\n         # List to store all the top coordinates of the histograms\n         tops = []  # Will have shape (n_datasets, n_bins).\n         # Loop through datasets\n@@ -6749,6 +6746,12 @@ such objects\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n+        \n+        # Apply density normalization if requested\n+        if density and not stacked:\n+            db = np.diff(bins)\n+            for i in range(nx):\n+                tops[i] = tops[i] / (tops[i].sum() * db)\n         bins = np.array(bins, float)  # causes problems if float16\n         if stacked:\n             tops = tops.cumsum(axis=0)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..0a5612f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1943,13 +1943,15 @@ class Axes(_AxesBase):\n         else:\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n-        if density and (not stacked):\n-            hist_kwargs['density'] = density\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n             tops.append(m)\n         tops = np.array(tops, float)\n+        if density and (not stacked):\n+            db = np.diff(bins)\n+            for i in range(nx):\n+                tops[i] = tops[i] / (tops[i].sum() * db)\n         bins = np.array(bins, float)\n         if stacked:\n             tops = tops.cumsum(axis=0)\n", "normalized_occurrence": 1}
