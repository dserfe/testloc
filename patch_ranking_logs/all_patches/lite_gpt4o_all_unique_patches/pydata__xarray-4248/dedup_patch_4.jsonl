{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4248", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 91a7f67..3189522 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -269,7 +269,7 @@ def inline_variable_array_repr(var, max_width):\n \n \n def summarize_variable(\n-    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n+    name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None, show_units: bool = True\n ):\n     \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n     if max_width is None:\n@@ -283,7 +283,9 @@ def summarize_variable(\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n         dims_str = \"\"\n-    front_str = f\"{first_col}{dims_str}{var.dtype} \"\n+    # If units are present in attributes, append them to the name\n+    units_str = f\", in {var.attrs['units']}\" if show_units and 'units' in var.attrs else \"\"\n+    front_str = f\"{first_col}{dims_str}{name}{units_str} {var.dtype} \"\n \n     values_width = max_width - len(front_str)\n     values_str = inline_variable_array_repr(var, values_width)\n@@ -321,7 +323,7 @@ def summarize_coord(name: Hashable, var, col_width: int):\n                     _summarize_coord_levels(coord, col_width),\n                 ]\n             )\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    return summarize_variable(name, var.variable, col_width, marker, show_units=True)\n \n \n def summarize_attr(key, value, col_width=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 6d31a74..b0d96a8 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -151,7 +151,7 @@ def inline_variable_array_repr(var, max_width):\n         return maybe_truncate(repr(var._data).replace('\\n', ' '), max_width)\n     else:\n         return '...'\n-def summarize_variable(name: Hashable, var, col_width: int, marker: str=' ', max_width: int=None):\n+def summarize_variable(name: Hashable, var, col_width: int, marker: str=' ', max_width: int=None, show_units: bool=True):\n     if max_width is None:\n         max_width_options = OPTIONS['display_width']\n         if not isinstance(max_width_options, int):\n@@ -163,7 +163,8 @@ def summarize_variable(name: Hashable, var, col_width: int, marker: str=' ', max\n         dims_str = '({}) '.format(', '.join(map(str, var.dims)))\n     else:\n         dims_str = ''\n-    front_str = f'{first_col}{dims_str}{var.dtype} '\n+    units_str = f\", in {var.attrs['units']}\" if show_units and 'units' in var.attrs else ''\n+    front_str = f'{first_col}{dims_str}{name}{units_str} {var.dtype} '\n     values_width = max_width - len(front_str)\n     values_str = inline_variable_array_repr(var, values_width)\n     return front_str + values_str\n@@ -181,7 +182,7 @@ def summarize_coord(name: Hashable, var, col_width: int):\n         coord = var.variable.to_index_variable()\n         if coord.level_names is not None:\n             return '\\n'.join([_summarize_coord_multiindex(coord, col_width, marker), _summarize_coord_levels(coord, col_width)])\n-    return summarize_variable(name, var.variable, col_width, marker)\n+    return summarize_variable(name, var.variable, col_width, marker, show_units=True)\n def summarize_attr(key, value, col_width=None):\n     k_str = f'    {key}:'\n     if col_width is not None:\n", "normalized_occurrence": 1}
