{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4970", "model_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 79a566f..5bc9c5c 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -531,9 +531,10 @@ class Similar:\n         \"\"\"iterate on similarities among all files, by making a cartesian\n         product\n         \"\"\"\n-        for idx, lineset in enumerate(self.linesets[:-1]):\n-            for lineset2 in self.linesets[idx + 1 :]:\n-                yield from self._find_common(lineset, lineset2)\n+        if self.min_lines > 0:\n+            for idx, lineset in enumerate(self.linesets[:-1]):\n+                for lineset2 in self.linesets[idx + 1 :]:\n+                    yield from self._find_common(lineset, lineset2)\n \n     def get_map_data(self):\n         \"\"\"Returns the data we can use for a map/reduce process\n@@ -802,6 +803,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == \"min-similarity-lines\":\n             self.min_lines = self.config.min_similarity_lines\n+            if self.min_lines == 0:\n+                self.min_lines = float('inf')  # Effectively disables the check\n         elif optname == \"ignore-comments\":\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == \"ignore-docstrings\":\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 0997b2e..687a4a9 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -210,9 +210,10 @@ class Similar:\n             if eff_cmn_nb > self.min_lines:\n                 yield com\n     def _iter_sims(self) -> Generator[Commonality, None, None]:\n-        for idx, lineset in enumerate(self.linesets[:-1]):\n-            for lineset2 in self.linesets[idx + 1:]:\n-                yield from self._find_common(lineset, lineset2)\n+        if self.min_lines > 0:\n+            for idx, lineset in enumerate(self.linesets[:-1]):\n+                for lineset2 in self.linesets[idx + 1:]:\n+                    yield from self._find_common(lineset, lineset2)\n     def get_map_data(self):\n         return self.linesets\n     def combine_mapreduce_data(self, linesets_collection):\n@@ -306,6 +307,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == 'min-similarity-lines':\n             self.min_lines = self.config.min_similarity_lines\n+            if self.min_lines == 0:\n+                self.min_lines = float('inf')\n         elif optname == 'ignore-comments':\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == 'ignore-docstrings':\n", "normalized_occurrence": 1}
