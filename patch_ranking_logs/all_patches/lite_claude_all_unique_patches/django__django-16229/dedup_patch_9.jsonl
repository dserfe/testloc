{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..a1d4f4b 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -519,7 +519,9 @@ class BaseForm(RenderableFormMixin):\n         \"\"\"\n         value = self.initial.get(field_name, field.initial)\n         if callable(value):\n-            value = value()\n+            # Don't evaluate callable defaults for ArrayFields to prevent issues with initial values\n+            if not hasattr(field, 'base_field') or not isinstance(field.base_field, models.Field):\n+                value = value()\n         # If this is an auto-generated default date, nix the microseconds\n         # for standardized handling. See #22502.\n         if (\n@@ -536,4 +538,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..1499078 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -369,7 +369,8 @@ class BaseForm(RenderableFormMixin):\n         \"\"\"\n         value = self.initial.get(field_name, field.initial)\n         if callable(value):\n-            value = value()\n+            if not hasattr(field, 'base_field') or not isinstance(field.base_field, models.Field):\n+                value = value()\n         if isinstance(value, (datetime.datetime, datetime.time)) and (not field.widget.supports_microseconds):\n             value = value.replace(microsecond=0)\n         return value\n", "normalized_occurrence": 1}
