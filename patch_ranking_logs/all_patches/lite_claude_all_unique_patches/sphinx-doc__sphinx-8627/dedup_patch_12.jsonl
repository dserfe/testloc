{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..7955fb4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1370,7 +1370,7 @@ class PythonDomain(Domain):\n \n def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n                      node: pending_xref, contnode: Element) -> Element:\n-    \"\"\"Do not emit nitpicky warnings for built-in types.\"\"\"\n+    \"\"\"Do not emit nitpicky warnings for built-in types and standard library types.\"\"\"\n     def istyping(s: str) -> bool:\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n@@ -1383,11 +1383,17 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n+        \n+        # Check built-in types\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n-            # built-in class\n             return contnode\n+        # Check typing module\n         elif istyping(reftarget):\n-            # typing class\n+            return contnode\n+        # Check standard library modules\n+        elif modname and modname in sys.modules and \\\n+             inspect.isclass(getattr(sys.modules.get(modname), reftarget, None)):\n             return contnode\n \n     return None\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..0f6e242 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -843,10 +843,13 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        elif modname and modname in sys.modules and inspect.isclass(getattr(sys.modules.get(modname), reftarget, None)):\n+            return contnode\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
