{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..e74c519 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,6 +213,10 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n+                # Check if the local file exists\n+                rel_fn, abs_fn = self.env.relfn2path(uri, docname)\n+                if not path.exists(abs_fn):\n+                    return 'broken', f\"Local file {abs_fn} does not exist\", 0\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..6c553f4 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,6 +133,9 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n+                rel_fn, abs_fn = self.env.relfn2path(uri, docname)\n+                if not path.exists(abs_fn):\n+                    return ('broken', f'Local file {abs_fn} does not exist', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n", "normalized_occurrence": 1}
