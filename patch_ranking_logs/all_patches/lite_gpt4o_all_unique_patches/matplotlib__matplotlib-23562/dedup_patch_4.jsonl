{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23562", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..119b539 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -765,11 +765,15 @@ class Poly3DCollection(PolyCollection):\n         self._facecolor3d = PolyCollection.get_facecolor(self)\n         self._edgecolor3d = PolyCollection.get_edgecolor(self)\n         self._alpha3d = PolyCollection.get_alpha(self)\n+        self._facecolors2d = np.empty((0, 4))  # Initialize _facecolors2d\n+        self._edgecolors2d = np.empty((0, 4))  # Initialize _edgecolors2d\n         self.stale = True\n \n     def set_sort_zpos(self, val):\n         \"\"\"Set the position to use for z-sorting.\"\"\"\n         self._sort_zpos = val\n+        self._facecolors2d = np.empty((0, 4))  # Initialize _facecolors2d\n+        self._edgecolors2d = np.empty((0, 4))  # Initialize _edgecolors2d\n         self.stale = True\n \n     def do_3d_projection(self):\n@@ -864,6 +868,8 @@ class Poly3DCollection(PolyCollection):\n                     self._edgecolor3d, self._alpha)\n         except (AttributeError, TypeError, IndexError):\n             pass\n+        self._facecolors2d = np.empty((0, 4))  # Initialize _facecolors2d\n+        self._edgecolors2d = np.empty((0, 4))  # Initialize _edgecolors2d\n         self.stale = True\n \n     def get_facecolor(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..e15c8ea 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -339,9 +339,13 @@ class Poly3DCollection(PolyCollection):\n         self._facecolor3d = PolyCollection.get_facecolor(self)\n         self._edgecolor3d = PolyCollection.get_edgecolor(self)\n         self._alpha3d = PolyCollection.get_alpha(self)\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         self.stale = True\n     def set_sort_zpos(self, val):\n         self._sort_zpos = val\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         self.stale = True\n     def do_3d_projection(self):\n         if self._A is not None:\n@@ -400,6 +404,8 @@ class Poly3DCollection(PolyCollection):\n             self._edgecolors = mcolors.to_rgba_array(self._edgecolor3d, self._alpha)\n         except (AttributeError, TypeError, IndexError):\n             pass\n+        self._facecolors2d = np.empty((0, 4))\n+        self._edgecolors2d = np.empty((0, 4))\n         self.stale = True\n     def get_facecolor(self):\n         return self._facecolors2d\n", "normalized_occurrence": 1}
