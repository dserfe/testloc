{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..a23a029 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -280,6 +280,21 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            # Check if max_length is sufficient for the longest choice value\n+            if self.max_length is not None:\n+                longest_choice = max(\n+                    (str(value) for value, human_name in self.choices),\n+                    key=len,\n+                    default=''\n+                )\n+                if len(longest_choice) > self.max_length:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest choice value.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n         return [\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..685622c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -139,6 +139,10 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None:\n+                longest_choice = max((str(value) for value, human_name in self.choices), key=len, default='')\n+                if len(longest_choice) > self.max_length:\n+                    return [checks.Error(\"'max_length' is too small to fit the longest choice value.\", obj=self, id='fields.E122')]\n             return []\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n", "normalized_occurrence": 1}
