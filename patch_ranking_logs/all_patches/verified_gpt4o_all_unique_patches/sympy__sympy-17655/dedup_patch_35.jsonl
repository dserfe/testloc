{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..f814ea3 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -247,7 +247,39 @@ class Point(GeometryEntity):\n     def __len__(self):\n         return len(self.args)\n \n-    def __mul__(self, factor):\n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor.\n+\n+        Notes\n+        =====\n+\n+        >>> from sympy.geometry.point import Point\n+\n+        When multiplying a Point by a floating point number,\n+        the coordinates of the Point will be changed to Floats:\n+\n+        >>> Point(1, 2)*0.1\n+        Point2D(0.1, 0.2)\n+\n+        If this is not desired, the `scale` method can be used or\n+        else only multiply or divide by integers:\n+\n+        >>> Point(1, 2).scale(1.1, 1.1)\n+        Point2D(11/10, 11/5)\n+        >>> Point(1, 2)*11/10\n+        Point2D(11/10, 11/5)\n+\n+        See Also\n+        ========\n+\n+        sympy.geometry.point.Point.scale\n+        \"\"\"\n+        factor = sympify(factor)\n+        coords = [simplify(x*factor) for x in self.args]\n+        return Point(coords, evaluate=False)\n+\n+    def __rmul__(self, factor):\n+        return self * factor\n         \"\"\"Multiply point's coordinates by a factor.\n \n         Notes\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..b5d25cd 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -86,7 +86,12 @@ class Point(GeometryEntity):\n         return self.args.__iter__()\n     def __len__(self):\n         return len(self.args)\n-    def __mul__(self, factor):\n+    def __rmul__(self, factor):\n+        factor = sympify(factor)\n+        coords = [simplify(x * factor) for x in self.args]\n+        return Point(coords, evaluate=False)\n+    def __rmul__(self, factor):\n+        return self * factor\n         factor = sympify(factor)\n         coords = [simplify(x * factor) for x in self.args]\n         return Point(coords, evaluate=False)\n", "normalized_occurrence": 1}
