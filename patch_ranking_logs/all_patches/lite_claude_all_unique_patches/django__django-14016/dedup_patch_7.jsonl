{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..4537e53 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -19,6 +19,11 @@ from django.utils import tree\n # sides of the relation. The join_field is the field backing the relation.\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n \n+# Types for dict views\n+dict_keys = type({}.keys())\n+dict_values = type({}.values())\n+dict_items = type({}.items())\n+\n \n def subclasses(cls):\n     yield cls\n@@ -38,7 +43,13 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        def convert_iterable(value):\n+            if isinstance(value, (dict_keys, dict_values, dict_items)):\n+                return list(value)\n+            return value\n+        \n+        processed_kwargs = {key: convert_iterable(value) for key, value in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(processed_kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..d94e521 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -6,6 +6,9 @@ from django.core.exceptions import FieldError\n from django.db.models.constants import LOOKUP_SEP\n from django.utils import tree\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n+dict_keys = type({}.keys())\n+dict_values = type({}.values())\n+dict_items = type({}.items())\n def subclasses(cls):\n     yield cls\n     for subclass in cls.__subclasses__():\n@@ -16,7 +19,12 @@ class Q(tree.Node):\n     default = AND\n     conditional = True\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        def convert_iterable(value):\n+            if isinstance(value, (dict_keys, dict_values, dict_items)):\n+                return list(value)\n+            return value\n+        processed_kwargs = {key: convert_iterable(value) for key, value in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(processed_kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n", "normalized_occurrence": 1}
