{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..67b4cde 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -329,6 +329,27 @@ class Collector:\n             for model, instances in self.data.items():\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n+\n+                # Combine fast delete queries by table\n+                combined_pks = {}\n+                for obj in instances:\n+                    for related in obj._meta.related_objects:\n+                        related_field_name = related.field.name\n+                        if related.model._meta.db_table not in combined_pks:\n+                            combined_pks[related.model._meta.db_table] = {}\n+                        if related_field_name not in combined_pks[related.model._meta.db_table]:\n+                            combined_pks[related.model._meta.db_table][related_field_name] = set()\n+                        combined_pks[related.model._meta.db_table][related_field_name].add(obj.pk)\n+\n+                for table, fields in combined_pks.items():\n+                    combined_conditions = []\n+                    combined_params = []\n+                    for field, pks in fields.items():\n+                        combined_conditions.append(f\"{field} IN %s\")\n+                        combined_params.append(tuple(pks))\n+                    combined_query = f\"DELETE FROM {table} WHERE {' OR '.join(combined_conditions)}\"\n+                    self.using.cursor().execute(combined_query, combined_params)\n+\n                 count = query.delete_batch(pk_list, self.using)\n                 deleted_counter[model._meta.label] += count\n \n@@ -346,4 +367,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..1293a0a 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -168,6 +168,23 @@ class Collector:\n             for model, instances in self.data.items():\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n+                combined_pks = {}\n+                for obj in instances:\n+                    for related in obj._meta.related_objects:\n+                        related_field_name = related.field.name\n+                        if related.model._meta.db_table not in combined_pks:\n+                            combined_pks[related.model._meta.db_table] = {}\n+                        if related_field_name not in combined_pks[related.model._meta.db_table]:\n+                            combined_pks[related.model._meta.db_table][related_field_name] = set()\n+                        combined_pks[related.model._meta.db_table][related_field_name].add(obj.pk)\n+                for table, fields in combined_pks.items():\n+                    combined_conditions = []\n+                    combined_params = []\n+                    for field, pks in fields.items():\n+                        combined_conditions.append(f'{field} IN %s')\n+                        combined_params.append(tuple(pks))\n+                    combined_query = f\"DELETE FROM {table} WHERE {' OR '.join(combined_conditions)}\"\n+                    self.using.cursor().execute(combined_query, combined_params)\n                 count = query.delete_batch(pk_list, self.using)\n                 deleted_counter[model._meta.label] += count\n                 if not model._meta.auto_created:\n", "normalized_occurrence": 1}
