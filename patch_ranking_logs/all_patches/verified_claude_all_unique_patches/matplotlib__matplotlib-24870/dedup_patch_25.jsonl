{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..b300b8d 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1447,10 +1447,12 @@ class QuadContourSet(ContourSet):\n             fn = 'contour'\n         nargs = len(args)\n         if nargs <= 2:\n+            orig_z = args[0]\n             z = ma.asarray(args[0], dtype=np.float64)\n             x, y = self._initialize_x_y(z)\n             args = args[1:]\n         elif nargs <= 4:\n+            x, y, orig_z = args[:3]\n             x, y, z = self._check_xyz(args[:3], kwargs)\n             args = args[3:]\n         else:\n@@ -1462,6 +1464,10 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+        # Set default level to 0.5 for boolean arrays if levels not specified\n+        if (not args and isinstance(orig_z, np.ndarray) and \n+            orig_z.dtype == np.bool_):\n+            args = ([0.5],)\n         self._process_contour_level_args(args)\n         return (x, y, z)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..aeac378 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -663,10 +663,12 @@ class QuadContourSet(ContourSet):\n             fn = 'contour'\n         nargs = len(args)\n         if nargs <= 2:\n+            orig_z = args[0]\n             z = ma.asarray(args[0], dtype=np.float64)\n             x, y = self._initialize_x_y(z)\n             args = args[1:]\n         elif nargs <= 4:\n+            x, y, orig_z = args[:3]\n             x, y, z = self._check_xyz(args[:3], kwargs)\n             args = args[3:]\n         else:\n@@ -678,6 +680,8 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+        if not args and isinstance(orig_z, np.ndarray) and (orig_z.dtype == np.bool_):\n+            args = ([0.5],)\n         self._process_contour_level_args(args)\n         return (x, y, z)\n     def _check_xyz(self, args, kwargs):\n", "normalized_occurrence": 1}
