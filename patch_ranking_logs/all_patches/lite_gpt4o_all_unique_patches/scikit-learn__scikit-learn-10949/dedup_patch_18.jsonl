{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..8035245 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -573,7 +573,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                              % (n_features, shape_repr, ensure_min_features,\n                                 context))\n \n-    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig and not isinstance(array_orig, pd.DataFrame):\n+        msg = (\"Data with input dtype %s was converted to %s%s.\"\n+               % (dtype_orig, array.dtype, context))\n+        warnings.warn(msg, DataConversionWarning)\n+    elif warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig and isinstance(array_orig, pd.DataFrame):\n         msg = (\"Data with input dtype %s was converted to %s%s.\"\n                % (dtype_orig, array.dtype, context))\n         warnings.warn(msg, DataConversionWarning)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..cbaba7d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -181,7 +181,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         n_features = array.shape[1]\n         if n_features < ensure_min_features:\n             raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, shape_repr, ensure_min_features, context))\n-    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig) and (not isinstance(array_orig, pd.DataFrame)):\n+        msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+        warnings.warn(msg, DataConversionWarning)\n+    elif warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig) and isinstance(array_orig, pd.DataFrame):\n         msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n         warnings.warn(msg, DataConversionWarning)\n     if copy and np.may_share_memory(array, array_orig):\n", "normalized_occurrence": 1}
