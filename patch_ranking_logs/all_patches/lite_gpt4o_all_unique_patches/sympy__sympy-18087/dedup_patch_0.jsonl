{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..057b1e1 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -341,6 +341,14 @@ class sin(TrigonometricFunction):\n             if m:\n                 return sin(m)*cos(x) + cos(m)*sin(x)\n \n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m)*cos(x) + cos(m)*sin(x)\n+\n         if arg.is_zero:\n             return S.Zero\n \n@@ -655,6 +663,14 @@ class cos(TrigonometricFunction):\n \n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m)*cos(x) + cos(m)*sin(x)\n+\n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n \n@@ -1079,6 +1095,14 @@ class tan(TrigonometricFunction):\n \n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m)*cos(x) + cos(m)*sin(x)\n+\n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 tanm = tan(m)\n                 if tanm is S.ComplexInfinity:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..f80fec6 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -191,6 +191,13 @@ class sin(TrigonometricFunction):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m) * cos(x) + cos(m) * sin(x)\n         if arg.is_zero:\n             return S.Zero\n         if isinstance(arg, asin):\n@@ -381,6 +388,13 @@ class cos(TrigonometricFunction):\n             return None\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m) * cos(x) + cos(m) * sin(x)\n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n         if arg.is_zero:\n@@ -665,6 +679,13 @@ class tan(TrigonometricFunction):\n                     return cls(narg)\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m) * cos(x) + cos(m) * sin(x)\n+        if arg.is_Pow and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, sin):\n+                return Abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 tanm = tan(m)\n                 if tanm is S.ComplexInfinity:\n", "normalized_occurrence": 1}
