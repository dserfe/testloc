{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..95dcd54 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,7 +475,12 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        distinct_fields, distinct_params = self.get_distinct()\n+        if distinct_fields:\n+            distinct_sql = 'DISTINCT ON ({}) '.format(', '.join(distinct_fields))\n+            result = ['{}{} '.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n+        else:\n+            result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n@@ -489,6 +494,7 @@ class SQLCompiler:\n         If 'with_limits' is False, any limit/offset information is not included\n         in the query.\n         \"\"\"\n+        distinct_fields, distinct_params = self.get_distinct()\n         refcounts_before = self.query.alias_refcount.copy()\n         try:\n             extra_select, order_by, group_by = self.pre_sql_setup()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..2cad0f1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,12 +267,18 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        distinct_fields, distinct_params = self.get_distinct()\n+        if distinct_fields:\n+            distinct_sql = 'DISTINCT ON ({}) '.format(', '.join(distinct_fields))\n+            result = ['{}{} '.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n+        else:\n+            result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n+        distinct_fields, distinct_params = self.get_distinct()\n         refcounts_before = self.query.alias_refcount.copy()\n         try:\n             extra_select, order_by, group_by = self.pre_sql_setup()\n", "normalized_occurrence": 1}
