{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..86a21f6 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,11 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.match(_user_defined_literal_re):\n+            prefix = self.last_match.group(1)  # may be None when no prefix\n+            ud_suffix = self.last_match.group(2)\n+            return ASTUserDefinedLiteral(prefix, ud_suffix)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -5280,7 +5284,7 @@ class DefinitionParser(BaseParser):\n                 op += '[]'\n             return ASTOperatorBuildIn(op)\n \n-        # user-defined literal?\n+        # user-defined literal operator\n         if self.skip_string('\"\"'):\n             self.skip_ws()\n             if not self.match(identifier_re):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..9032139 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,10 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(_user_defined_literal_re):\n+            prefix = self.last_match.group(1)\n+            ud_suffix = self.last_match.group(2)\n+            return ASTUserDefinedLiteral(prefix, ud_suffix)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
