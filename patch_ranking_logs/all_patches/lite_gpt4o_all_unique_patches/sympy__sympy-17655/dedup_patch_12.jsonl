{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..4405222 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -247,7 +247,25 @@ class Point(GeometryEntity):\n     def __len__(self):\n         return len(self.args)\n \n-    def __mul__(self, factor):\n+    def __rmul__(self, factor):\n+        \"\"\"Right multiply point's coordinates by a factor.\n+        \n+        This allows multiplication where the number appears on the left.\n+        \n+        Notes\n+        =====\n+        \n+        >>> from sympy.geometry.point import Point\n+        \n+        >>> 2 * Point(1, 2)\n+        Point2D(2, 4)\n+        \n+        See Also\n+        ========\n+\n+        sympy.geometry.point.Point.__mul__\n+        \"\"\"\n+        return self.__mul__(factor)\n         \"\"\"Multiply point's coordinates by a factor.\n \n         Notes\n@@ -283,7 +301,25 @@ class Point(GeometryEntity):\n         coords = [-x for x in self.args]\n         return Point(coords, evaluate=False)\n \n-    def __sub__(self, other):\n+    def __rmul__(self, factor):\n+        \"\"\"Right multiply point's coordinates by a factor.\n+        \n+        This allows multiplication where the number appears on the left.\n+        \n+        Notes\n+        =====\n+        \n+        >>> from sympy.geometry.point import Point\n+        \n+        >>> 2 * Point(1, 2)\n+        Point2D(2, 4)\n+        \n+        See Also\n+        ========\n+\n+        sympy.geometry.point.Point.__mul__\n+        \"\"\"\n+        return self.__mul__(factor)\n         \"\"\"Subtract two points, or subtract a factor from this point's\n         coordinates.\"\"\"\n         return self + [-x for x in other]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..6cbe129 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -86,14 +86,16 @@ class Point(GeometryEntity):\n         return self.args.__iter__()\n     def __len__(self):\n         return len(self.args)\n-    def __mul__(self, factor):\n+    def __rmul__(self, factor):\n+        return self.__mul__(factor)\n         factor = sympify(factor)\n         coords = [simplify(x * factor) for x in self.args]\n         return Point(coords, evaluate=False)\n     def __neg__(self):\n         coords = [-x for x in self.args]\n         return Point(coords, evaluate=False)\n-    def __sub__(self, other):\n+    def __rmul__(self, factor):\n+        return self.__mul__(factor)\n         return self + [-x for x in other]\n     @classmethod\n     def _normalize_dimension(cls, *points, **kwargs):\n", "normalized_occurrence": 1}
