{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..bcfb51d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -176,7 +176,8 @@ class MigrationAutodetector:\n         # and generate_added_indexes().\n         self.create_altered_indexes()\n         self.create_altered_constraints()\n-        # Generate index removal operations before field is removed\n+        # Generate dependencies for FKs\n+        self.generate_dependencies_for_foreign_keys()\n         self.generate_removed_constraints()\n         self.generate_removed_indexes()\n         # Generate field operations\n@@ -197,7 +198,22 @@ class MigrationAutodetector:\n \n         return self.migrations\n \n-    def _prepare_field_lists(self):\n+    def generate_dependencies_for_foreign_keys(self):\n+        \"\"\"\n+        Generate dependencies for ForeignKeys that have been added.\n+        \"\"\"\n+        for (app_label, model_name), model_state in self.from_state.models.items():\n+            for field in model_state.fields.values():\n+                if isinstance(field, models.ForeignKey):\n+                    related_model = field.remote_field.model\n+                    if isinstance(related_model, str):\n+                        related_app_label, related_model_name = related_model.split('.')\n+                    else:\n+                        related_app_label = related_model._meta.app_label\n+                        related_model_name = related_model._meta.model_name\n+                    self.add_dependency(\n+                        app_label, model_name, related_app_label, related_model_name\n+                    )\n         \"\"\"\n         Prepare field lists and a list of the fields that used through models\n         in the old state so dependencies can be made from the through model\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..b8327f4 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -92,6 +92,7 @@ class MigrationAutodetector:\n         self.generate_altered_managers()\n         self.create_altered_indexes()\n         self.create_altered_constraints()\n+        self.generate_dependencies_for_foreign_keys()\n         self.generate_removed_constraints()\n         self.generate_removed_indexes()\n         self.generate_renamed_fields()\n@@ -108,7 +109,18 @@ class MigrationAutodetector:\n         self._build_migration_list(graph)\n         self._optimize_migrations()\n         return self.migrations\n-    def _prepare_field_lists(self):\n+    def generate_dependencies_for_foreign_keys(self):\n+        for (app_label, model_name), model_state in self.from_state.models.items():\n+            for field in model_state.fields.values():\n+                if isinstance(field, models.ForeignKey):\n+                    related_model = field.remote_field.model\n+                    if isinstance(related_model, str):\n+                        related_app_label, related_model_name = related_model.split('.')\n+                    else:\n+                        related_app_label = related_model._meta.app_label\n+                        related_model_name = related_model._meta.model_name\n+                    self.add_dependency(app_label, model_name, related_app_label, related_model_name)\n+        '\\n        Prepare field lists and a list of the fields that used through models\\n        in the old state so dependencies can be made from the through model\\n        deletion to the field that uses it.\\n        '\n         self.kept_model_keys = self.old_model_keys & self.new_model_keys\n         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys\n         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys\n", "normalized_occurrence": 1}
