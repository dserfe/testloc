{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..252feff 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -294,15 +294,16 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+        return 'JSON_UNQUOTE(JSON_EXTRACT(%s, %%s))' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        # Always use JSON_VALUE for scalar comparisons\n         return (\n-            \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n-            ((lhs, json_path) * 2)\n-        ), tuple(params) * 2\n+            \"JSON_VALUE(%s, '%s')\" %\n+            (lhs, json_path)\n+        ), params\n \n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n@@ -317,7 +318,7 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+        return 'json_extract(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n \n class KeyTextTransform(KeyTransform):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..9d1f1c7 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -202,11 +202,11 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n+        return ('JSON_UNQUOTE(JSON_EXTRACT(%s, %%s))' % lhs, tuple(params) + (json_path,))\n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return (\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" % ((lhs, json_path) * 2), tuple(params) * 2)\n+        return (\"JSON_VALUE(%s, '%s')\" % (lhs, json_path), params)\n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         if len(key_transforms) > 1:\n@@ -219,7 +219,7 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n-        return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n+        return ('json_extract(%s, %%s)' % lhs, tuple(params) + (json_path,))\n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n     postgres_nested_operator = '#>>'\n", "normalized_occurrence": 1}
