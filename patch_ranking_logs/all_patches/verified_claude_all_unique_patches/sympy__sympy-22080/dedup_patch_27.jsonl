{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..f36aed7 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -138,6 +139,10 @@ class Mod(Function):\n                 both_l[isinstance(arg, cls)].append(arg)\n \n             if mod_l and all(inner.args[1] == q for inner in mod_l):\n+                # Preserve external multipliers\n+                if len(non_mod_l) == 1 and non_mod_l[0].is_number:\n+                    return non_mod_l[0] * cls(Mul(*[i.args[0] for i in mod_l]), q)\n+                \n                 # finding distributive term\n                 non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n@@ -240,4 +245,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..0919314 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -85,6 +85,8 @@ class Mod(Function):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n             if mod_l and all((inner.args[1] == q for inner in mod_l)):\n+                if len(non_mod_l) == 1 and non_mod_l[0].is_number:\n+                    return non_mod_l[0] * cls(Mul(*[i.args[0] for i in mod_l]), q)\n                 non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\n", "normalized_occurrence": 1}
