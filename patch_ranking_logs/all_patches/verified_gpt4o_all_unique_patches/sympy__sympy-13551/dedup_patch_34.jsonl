{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..cfc033e 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -245,6 +245,10 @@ class Product(ExprWithIntLimits):\n                 return S.One\n             return term**(n - a + 1)\n \n+        if isinstance(term, Add) and all(isinstance(arg, Pow) and arg.base == 2 for arg in term.args):\n+            from sympy.functions import qPochhammer\n+            return qPochhammer(2**(a), 1/2, n - a + 1)\n+\n         if a == n:\n             return term.subs(k, a)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..741f2b3 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -54,6 +54,9 @@ class Product(ExprWithIntLimits):\n             if (term - 1).is_zero:\n                 return S.One\n             return term ** (n - a + 1)\n+        if isinstance(term, Add) and all((isinstance(arg, Pow) and arg.base == 2 for arg in term.args)):\n+            from sympy.functions import qPochhammer\n+            return qPochhammer(2 ** a, 1 / 2, n - a + 1)\n         if a == n:\n             return term.subs(k, a)\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n", "normalized_occurrence": 1}
