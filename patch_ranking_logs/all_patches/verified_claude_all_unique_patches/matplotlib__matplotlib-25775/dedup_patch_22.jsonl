{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..ae00c03 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -738,6 +738,10 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            # Use instance antialiasing state if set, otherwise use rcParam\n+            antialiased = (self._antialiased if self._antialiased is not None\n+                          else mpl.rcParams['text.antialiased'])\n+            gc.set_antialiased(antialiased)\n \n             angle = self.get_rotation()\n \n@@ -873,6 +877,32 @@ class Text(Artist):\n         \"\"\"Return the text string.\"\"\"\n         return self._text\n \n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text is antialiased.\n+\n+        Returns\n+        -------\n+        bool or None\n+            The antialiasing state. If ``None``, use the value from\n+            :rc:`text.antialiased`.\n+        \"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        aa : bool or None\n+            If ``None``, use the value from :rc:`text.antialiased`.\n+        \"\"\"\n+        if aa is not None:\n+            aa = bool(aa)\n+        self._antialiased = aa\n+        self.stale = True\n+\n     def get_verticalalignment(self):\n         \"\"\"\n         Return the vertical alignment as a string.  Will be one of\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..1c1ea05 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -371,6 +371,8 @@ class Text(Artist):\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n             self._set_gc_clip(gc)\n+            antialiased = self._antialiased if self._antialiased is not None else mpl.rcParams['text.antialiased']\n+            gc.set_antialiased(antialiased)\n             angle = self.get_rotation()\n             for line, wh, x, y in info:\n                 mtext = self if len(info) == 1 else None\n@@ -419,6 +421,13 @@ class Text(Artist):\n         return (self._x, self._y)\n     def get_text(self):\n         return self._text\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, aa):\n+        if aa is not None:\n+            aa = bool(aa)\n+        self._antialiased = aa\n+        self.stale = True\n     def get_verticalalignment(self):\n         return self._verticalalignment\n     def get_window_extent(self, renderer=None, dpi=None):\n", "normalized_occurrence": 1}
