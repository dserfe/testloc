{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..ee606c1 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -764,12 +764,16 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            start_refit_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n+                self.refit_time_ = time.time() - start_refit_time\n+                self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+                self.refit_time_ = time.time() - start_refit_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex dd929b2..74ade2b 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -252,11 +252,15 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n             self.best_params_ = candidate_params[self.best_index_]\n             self.best_score_ = results['mean_test_%s' % refit_metric][self.best_index_]\n         if self.refit:\n+            start_refit_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(**self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n+                self.refit_time_ = time.time() - start_refit_time\n+                self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+                self.refit_time_ = time.time() - start_refit_time\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n         self.cv_results_ = results\n         self.n_splits_ = n_splits\n", "normalized_occurrence": 1}
