{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex c9b4ff0..ff4f08b 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -227,6 +227,9 @@ def _diff_text(left, right, verbose=0):\n \n \n def _compare_eq_verbose(left, right):\n+    if isinstance(left, bytes) and isinstance(right, bytes):\n+        left = left.decode('ascii', 'replace')\n+        right = right.decode('ascii', 'replace')\n     keepends = True\n     left_lines = repr(left).splitlines(keepends)\n     right_lines = repr(right).splitlines(keepends)\n@@ -254,6 +257,13 @@ def _compare_eq_iterable(left, right, verbose=0):\n \n \n def _compare_eq_sequence(left, right, verbose=0):\n+    def handle_bytes(val):\n+        if isinstance(val, bytes):\n+            return val.decode('ascii', 'replace')\n+        return val\n+\n+    left = handle_bytes(left)\n+    right = handle_bytes(right)\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 855efef..fe6dcaa 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -139,6 +139,9 @@ def _diff_text(left, right, verbose=0):\n     explanation += [line.strip('\\n') for line in ndiff(left.splitlines(keepends), right.splitlines(keepends))]\n     return explanation\n def _compare_eq_verbose(left, right):\n+    if isinstance(left, bytes) and isinstance(right, bytes):\n+        left = left.decode('ascii', 'replace')\n+        right = right.decode('ascii', 'replace')\n     keepends = True\n     left_lines = repr(left).splitlines(keepends)\n     right_lines = repr(right).splitlines(keepends)\n@@ -156,6 +159,12 @@ def _compare_eq_iterable(left, right, verbose=0):\n     explanation.extend((line.strip() for line in difflib.ndiff(left_formatting, right_formatting)))\n     return explanation\n def _compare_eq_sequence(left, right, verbose=0):\n+    def handle_bytes(val):\n+        if isinstance(val, bytes):\n+            return val.decode('ascii', 'replace')\n+        return val\n+    left = handle_bytes(left)\n+    right = handle_bytes(right)\n     explanation = []\n     len_left = len(left)\n     len_right = len(right)\n", "normalized_occurrence": 1}
