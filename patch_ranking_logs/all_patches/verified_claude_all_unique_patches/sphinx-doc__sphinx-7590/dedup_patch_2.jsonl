{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..2e651ad 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,20 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # Handle user-defined literals\n+        self.skip_ws()\n+        if self.skip_string('_'):\n+            # parse identifier for the UDL suffix\n+            udl_identifier = ''\n+            while self.current_char.isalnum() or self.current_char == '_':\n+                udl_identifier += self.current_char\n+                self.pos += 1\n+            if udl_identifier:\n+                # Combine the literal with its UDL suffix\n+                if self.last_match:\n+                    prefix = self.last_match.group(1)  # may be None when no prefix\n+                    data = self.last_match.group(2) + '_' + udl_identifier\n+                    return ASTNumberLiteral(data)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..fa971b9 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,17 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        self.skip_ws()\n+        if self.skip_string('_'):\n+            udl_identifier = ''\n+            while self.current_char.isalnum() or self.current_char == '_':\n+                udl_identifier += self.current_char\n+                self.pos += 1\n+            if udl_identifier:\n+                if self.last_match:\n+                    prefix = self.last_match.group(1)\n+                    data = self.last_match.group(2) + '_' + udl_identifier\n+                    return ASTNumberLiteral(data)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
