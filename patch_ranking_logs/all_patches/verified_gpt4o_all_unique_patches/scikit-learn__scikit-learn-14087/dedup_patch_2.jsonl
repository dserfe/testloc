{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14087", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex dbd459e..23292cb 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2170,11 +2170,11 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                 # Take the best scores across every fold and the average of\n                 # all coefficients corresponding to the best scores.\n                 best_indices = np.argmax(scores, axis=1)\n-                if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n-                else:\n+                if multi_class == 'multinomial':\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                                 for i in range(len(folds))], axis=1)\n+                else:\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n@@ -2243,4 +2243,4 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n         if isinstance(scoring, str):\n             scoring = get_scorer(scoring)\n \n-        return scoring(self, X, y, sample_weight=sample_weight)\n+        return scoring(self, X, y, sample_weight=sample_weight)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 5d31b9f..d95d2d5 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -550,10 +550,10 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator, LinearClassifierMi\n                 w = w[0]\n             else:\n                 best_indices = np.argmax(scores, axis=1)\n-                if self.multi_class == 'ovr':\n-                    w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)\n+                if multi_class == 'multinomial':\n+                    w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=1)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)\n+                    w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)\n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n                 best_indices_l1 = best_indices // len(self.Cs_)\n", "normalized_occurrence": 1}
