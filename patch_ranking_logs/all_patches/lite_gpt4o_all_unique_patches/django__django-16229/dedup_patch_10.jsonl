{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..cbb5cb6 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -105,6 +105,9 @@ class BaseForm(RenderableFormMixin):\n         # Instances should always modify self.fields; they should not modify\n         # self.base_fields.\n         self.fields = copy.deepcopy(self.base_fields)\n+        for name, field in self.fields.items():\n+            if callable(field.initial):\n+                field.show_hidden_initial = False\n         self._bound_fields_cache = {}\n         self.order_fields(self.field_order if field_order is None else field_order)\n \n@@ -536,4 +539,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..6b56354 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -64,6 +64,9 @@ class BaseForm(RenderableFormMixin):\n         self.empty_permitted = empty_permitted\n         self._errors = None\n         self.fields = copy.deepcopy(self.base_fields)\n+        for name, field in self.fields.items():\n+            if callable(field.initial):\n+                field.show_hidden_initial = False\n         self._bound_fields_cache = {}\n         self.order_fields(self.field_order if field_order is None else field_order)\n         if use_required_attribute is not None:\n", "normalized_occurrence": 2}
