{"model_name_or_path": "agentless", "instance_id": "psf__requests-5414", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex b6afac6..4e9daf5 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidURL('URL has an invalid label.')\n         return host\n \n     def prepare_url(self, url, params):\n@@ -398,7 +398,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         # non-ASCII characters. This allows users to automatically get the correct IDNA\n         # behaviour. For strings containing only ASCII characters, we need to also verify\n         # it doesn't start with a wildcard (*), before allowing the unencoded hostname.\n-        if not unicode_is_ascii(host):\n+        if not host:\n+            raise InvalidURL('URL has an invalid label.')\n+        elif not unicode_is_ascii(host):\n             try:\n                 host = self._get_idna_encoded_host(host)\n             except UnicodeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0a92d68..b96271d 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -173,7 +173,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidURL('URL has an invalid label.')\n         return host\n     def prepare_url(self, url, params):\n         if isinstance(url, bytes):\n@@ -194,7 +194,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n             raise MissingSchema(error)\n         if not host:\n             raise InvalidURL('Invalid URL %r: No host supplied' % url)\n-        if not unicode_is_ascii(host):\n+        if not host:\n+            raise InvalidURL('URL has an invalid label.')\n+        elif not unicode_is_ascii(host):\n             try:\n                 host = self._get_idna_encoded_host(host)\n             except UnicodeError:\n", "normalized_occurrence": 1}
