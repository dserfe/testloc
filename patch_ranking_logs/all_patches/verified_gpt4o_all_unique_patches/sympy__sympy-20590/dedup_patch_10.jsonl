{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 87da872..ec7de28 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -25,7 +25,14 @@ def as_Basic(expr):\n             expr))\n \n \n-class Basic(Printable, metaclass=ManagedProperties):\n+class Basic(Printable):\n+    __slots__ = ('_mhash', '_args', '_assumptions')\n+    def __init_subclass__(cls, **kwargs):\n+        super().__init_subclass__(**kwargs)\n+        if not hasattr(cls, \"__slots__\"):\n+            cls.__slots__ = []\n+        if not hasattr(cls, \"__dict__\"):\n+            cls.__dict__ = None\n     \"\"\"\n     Base class for all SymPy objects.\n \n", "occurrence": 1, "normalized_patch": "--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n-class Basic(Printable, metaclass=ManagedProperties):\n+class Basic(Printable):\n+    __slots__ = ('_mhash', '_args', '_assumptions')\n+    def __init_subclass__(cls, **kwargs):\n+        super().__init_subclass__(**kwargs)\n+        if not hasattr(cls, '__slots__'):\n+            cls.__slots__ = []\n+        if not hasattr(cls, '__dict__'):\n+            cls.__dict__ = None\n+    '\\n    Base class for all SymPy objects.\\n\\n    Notes and conventions\\n    =====================\\n\\n    1) Always use ``.args``, when accessing parameters of some instance:\\n\\n    >>> from sympy import cot\\n    >>> from sympy.abc import x, y\\n\\n    >>> cot(x).args\\n    (x,)\\n\\n    >>> cot(x).args[0]\\n    x\\n\\n    >>> (x*y).args\\n    (x, y)\\n\\n    >>> (x*y).args[1]\\n    y\\n\\n\\n    2) Never use internal methods or variables (the ones prefixed with ``_``):\\n\\n    >>> cot(x)._args    # do not use this, use cot(x).args instead\\n    (x,)\\n\\n\\n    3)  By \"SymPy object\" we mean something that can be returned by\\n        ``sympify``.  But not all objects one encounters using SymPy are\\n        subclasses of Basic.  For example, mutable objects are not:\\n\\n        >>> from sympy import Basic, Matrix, sympify\\n        >>> A = Matrix([[1, 2], [3, 4]]).as_mutable()\\n        >>> isinstance(A, Basic)\\n        False\\n\\n        >>> B = sympify(A)\\n        >>> isinstance(B, Basic)\\n        True\\n    '", "normalized_occurrence": 1}
