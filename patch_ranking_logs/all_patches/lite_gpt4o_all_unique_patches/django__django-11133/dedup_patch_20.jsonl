{"model_name_or_path": "agentless", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 5126111..c789821 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -309,7 +309,9 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n-        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n+        if isinstance(value, memoryview):\n+            content = value.tobytes()\n+        elif hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n                 try:\n", "occurrence": 5, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 1fade57..75a66a4 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -182,7 +182,9 @@ class HttpResponse(HttpResponseBase):\n         return b''.join(self._container)\n     @content.setter\n     def content(self, value):\n-        if hasattr(value, '__iter__') and (not isinstance(value, (bytes, str))):\n+        if isinstance(value, memoryview):\n+            content = value.tobytes()\n+        elif hasattr(value, '__iter__') and (not isinstance(value, (bytes, str))):\n             content = b''.join((self.make_bytes(chunk) for chunk in value))\n             if hasattr(value, 'close'):\n                 try:\n", "normalized_occurrence": 5}
