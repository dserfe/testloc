{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08b07d9..9143dad 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2605,7 +2605,7 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n                                              self.config.autodoc_type_aliases)\n                 if self.objpath[-1] in annotations:\n                     objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    self.add_line('   :type: ' + restify(signature.return_annotation), sourcename)\n \n             try:\n                 if self.options.no_value or self.should_suppress_value_header():\n@@ -2729,7 +2729,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                                               type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n                     objrepr = stringify_typehint(signature.return_annotation)\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    self.add_line('   :type: ' + restify(signature.return_annotation), sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 3c49975..003aa97 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1557,7 +1557,7 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin, TypeVarMi\n                 annotations = get_type_hints(self.parent, None, self.config.autodoc_type_aliases)\n                 if self.objpath[-1] in annotations:\n                     objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    self.add_line('   :type: ' + restify(signature.return_annotation), sourcename)\n             try:\n                 if self.options.no_value or self.should_suppress_value_header():\n                     pass\n@@ -1647,7 +1647,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n                 signature = inspect.signature(func, type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n                     objrepr = stringify_typehint(signature.return_annotation)\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    self.add_line('   :type: ' + restify(signature.return_annotation), sourcename)\n             except TypeError as exc:\n                 logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n                 return None\n", "normalized_occurrence": 1}
