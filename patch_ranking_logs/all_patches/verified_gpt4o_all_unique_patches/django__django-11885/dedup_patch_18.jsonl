{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..90369ff 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,7 +191,7 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            self.add_fast_deletes(objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n@@ -225,7 +225,7 @@ class Collector:\n                 for batch in batches:\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n+                        self.add_fast_deletes(sub_objs)\n                     else:\n                         related_model = related.related_model\n                         # Non-referenced fields can be deferred if no signal\n@@ -249,7 +249,28 @@ class Collector:\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n \n-    def related_objects(self, related, objs):\n+    def add_fast_deletes(self, objs):\n+        \"\"\"\n+        Combine and add fast delete queries by table and related fields.\n+        \"\"\"\n+        model = objs[0].__class__\n+        table_name = model._meta.db_table\n+        pk_name = model._meta.pk.column\n+        combined_conditions = {}\n+\n+        for obj in objs:\n+            condition = (table_name, pk_name, obj.pk)\n+            if table_name not in combined_conditions:\n+                combined_conditions[table_name] = []\n+            combined_conditions[table_name].append(condition)\n+\n+        for table, conditions in combined_conditions.items():\n+            if len(conditions) > 1:\n+                combined_condition = ' OR '.join(\n+                    ['%s = %s' % (pk, value) for _, pk, value in conditions])\n+                self.fast_deletes.append((table, combined_condition))\n+            else:\n+                self.fast_deletes.append(conditions[0])\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..5fcd38e 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -80,7 +80,7 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            self.add_fast_deletes(objs)\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n@@ -105,7 +105,7 @@ class Collector:\n                 for batch in batches:\n                     sub_objs = self.related_objects(related, batch)\n                     if self.can_fast_delete(sub_objs, from_field=field):\n-                        self.fast_deletes.append(sub_objs)\n+                        self.add_fast_deletes(sub_objs)\n                     else:\n                         related_model = related.related_model\n                         if not (sub_objs.query.select_related or self._has_signal_listeners(related_model)):\n@@ -117,7 +117,23 @@ class Collector:\n                 if hasattr(field, 'bulk_related_objects'):\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n-    def related_objects(self, related, objs):\n+    def add_fast_deletes(self, objs):\n+        model = objs[0].__class__\n+        table_name = model._meta.db_table\n+        pk_name = model._meta.pk.column\n+        combined_conditions = {}\n+        for obj in objs:\n+            condition = (table_name, pk_name, obj.pk)\n+            if table_name not in combined_conditions:\n+                combined_conditions[table_name] = []\n+            combined_conditions[table_name].append(condition)\n+        for table, conditions in combined_conditions.items():\n+            if len(conditions) > 1:\n+                combined_condition = ' OR '.join(['%s = %s' % (pk, value) for _, pk, value in conditions])\n+                self.fast_deletes.append((table, combined_condition))\n+            else:\n+                self.fast_deletes.append(conditions[0])\n+        '\\n        Get a QuerySet of objects related to `objs` via the relation `related`.\\n        '\n         return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs})\n     def instances_with_model(self):\n         for model, instances in self.data.items():\n", "normalized_occurrence": 1}
