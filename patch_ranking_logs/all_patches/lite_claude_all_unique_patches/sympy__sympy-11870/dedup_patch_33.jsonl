{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..908a205 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -535,6 +535,28 @@ def exptrigsimp(expr):\n         # select the better of e, and e rewritten in terms of exp or trig\n         # functions\n         choices = [e]\n+        \n+        # Handle specific patterns matching sin/cos via Euler's formula\n+        if e.is_Mul and S.Half in e.args:\n+            rest = e / S.Half\n+            if rest.is_Add and len(rest.args) == 2:\n+                args = rest.args\n+                if (len(args) == 2 and\n+                    all(isinstance(t, Mul) for t in args) and\n+                    any(I in t.args for t in args)):\n+                    # Check for sin pattern: 1/2 * (-I*exp(I*x) + I*exp(-I*x))\n+                    # or cos pattern: 1/2 * (exp(I*x) + exp(-I*x))\n+                    exp_terms = [t for t in args if isinstance(t, exp) or\n+                               (isinstance(t, Mul) and any(isinstance(f, exp) for f in t.args))]\n+                    if len(exp_terms) == 2:\n+                        try:\n+                            if e.rewrite(sin).count_ops() < e.count_ops():\n+                                choices.append(e.rewrite(sin))\n+                            if e.rewrite(cos).count_ops() < e.count_ops():\n+                                choices.append(e.rewrite(cos))\n+                        except:\n+                            pass\n+\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..53c93a8 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -177,6 +177,20 @@ def exptrigsimp(expr):\n     from sympy.simplify.simplify import bottom_up\n     def exp_trig(e):\n         choices = [e]\n+        if e.is_Mul and S.Half in e.args:\n+            rest = e / S.Half\n+            if rest.is_Add and len(rest.args) == 2:\n+                args = rest.args\n+                if len(args) == 2 and all((isinstance(t, Mul) for t in args)) and any((I in t.args for t in args)):\n+                    exp_terms = [t for t in args if isinstance(t, exp) or (isinstance(t, Mul) and any((isinstance(f, exp) for f in t.args)))]\n+                    if len(exp_terms) == 2:\n+                        try:\n+                            if e.rewrite(sin).count_ops() < e.count_ops():\n+                                choices.append(e.rewrite(sin))\n+                            if e.rewrite(cos).count_ops() < e.count_ops():\n+                                choices.append(e.rewrite(cos))\n+                        except:\n+                            pass\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "normalized_occurrence": 1}
