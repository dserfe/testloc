{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..0e28912 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1500,7 +1500,7 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n-            if operation == operations.AlterIndexTogether:\n+            if isinstance(operation, type) and issubclass(operation, operations.AlterIndexTogether):\n                 old_value = {\n                     value\n                     for value in old_value\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..c0a27e9 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -611,7 +611,7 @@ class MigrationAutodetector:\n                 yield (old_value, new_value, app_label, model_name, dependencies)\n     def _generate_removed_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n-            if operation == operations.AlterIndexTogether:\n+            if isinstance(operation, type) and issubclass(operation, operations.AlterIndexTogether):\n                 old_value = {value for value in old_value if value not in self.renamed_index_together_values[app_label, model_name]}\n             removal_value = new_value.intersection(old_value)\n             if removal_value or old_value:\n", "normalized_occurrence": 1}
