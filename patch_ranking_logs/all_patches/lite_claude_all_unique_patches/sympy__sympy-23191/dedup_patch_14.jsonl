{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..9976e3e 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1944,6 +1944,7 @@ class PrettyPrinter(Printer):\n \n     def _print_Mul(self, product):\n         from sympy.physics.units import Quantity\n+        from sympy.vector import BaseVector\n \n         # Check for unevaluated Mul. In this case we need to make sure the\n         # identities are visible, multiple Rational factors are not combined\n@@ -1971,9 +1972,9 @@ class PrettyPrinter(Printer):\n         else:\n             args = list(product.args)\n \n-        # If quantities are present append them at the back\n-        args = sorted(args, key=lambda x: isinstance(x, Quantity) or\n-                     (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n+        # Sort vector bases to the end\n+        args = sorted(args, key=lambda x: (isinstance(x, BaseVector), isinstance(x, Quantity) or\n+                     (isinstance(x, Pow) and isinstance(x.base, Quantity))))\n \n         # Gather terms for numerator/denominator\n         for item in args:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..00b855f 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1416,6 +1416,7 @@ class PrettyPrinter(Printer):\n         return prettyForm.__add__(*pforms)\n     def _print_Mul(self, product):\n         from sympy.physics.units import Quantity\n+        from sympy.vector import BaseVector\n         args = product.args\n         if args[0] is S.One or any((isinstance(arg, Number) for arg in args[1:])):\n             strargs = list(map(self._print, args))\n@@ -1432,7 +1433,7 @@ class PrettyPrinter(Printer):\n             args = product.as_ordered_factors()\n         else:\n             args = list(product.args)\n-        args = sorted(args, key=lambda x: isinstance(x, Quantity) or (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n+        args = sorted(args, key=lambda x: (isinstance(x, BaseVector), isinstance(x, Quantity) or (isinstance(x, Pow) and isinstance(x.base, Quantity))))\n         for item in args:\n             if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n                 if item.exp != -1:\n", "normalized_occurrence": 1}
