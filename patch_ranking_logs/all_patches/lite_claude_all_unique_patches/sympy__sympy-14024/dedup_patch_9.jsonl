{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..5e5b772 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -262,6 +262,9 @@ class Pow(Expr):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n+                    # For concrete numbers, don't simplify negative bases with odd exponents\n+                    if b.is_number and b.is_real:\n+                        return None\n                     return -Pow(-b, e)\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n@@ -1640,4 +1643,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..acd230e 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -105,6 +105,8 @@ class Pow(Expr):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n+                    if b.is_number and b.is_real:\n+                        return None\n                     return -Pow(-b, e)\n             if S.NaN in (b, e):\n                 return S.NaN\n", "normalized_occurrence": 1}
