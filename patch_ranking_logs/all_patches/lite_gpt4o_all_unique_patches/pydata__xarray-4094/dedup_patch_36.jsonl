{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..a335569 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1451,8 +1451,12 @@ class Variable(\n         return result\n \n     def _unstack_once(self, dims, old_dim):\n-        new_dim_names = tuple(dims.keys())\n-        new_dim_sizes = tuple(dims.values())\n+        if isinstance(dims, list):\n+            new_dim_names = tuple(dims)\n+            new_dim_sizes = (self.sizes[old_dim] // len(new_dim_names),) * len(new_dim_names)\n+        else:\n+            new_dim_names = tuple(dims.keys())\n+            new_dim_sizes = tuple(dims.values())\n \n         if old_dim not in self.dims:\n             raise ValueError(\"invalid existing dimension: %s\" % old_dim)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..4b68622 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1107,8 +1107,12 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         return result\n \n     def _unstack_once(self, dims, old_dim):\n-        new_dim_names = tuple(dims.keys())\n-        new_dim_sizes = tuple(dims.values())\n+        if isinstance(dims, list):\n+            new_dim_names = tuple(dims)\n+            new_dim_sizes = (self.sizes[old_dim] // len(new_dim_names),) * len(new_dim_names)\n+        else:\n+            new_dim_names = tuple(dims.keys())\n+            new_dim_sizes = tuple(dims.values())\n         if old_dim not in self.dims:\n             raise ValueError('invalid existing dimension: %s' % old_dim)\n         if set(new_dim_names).intersection(self.dims):\n", "normalized_occurrence": 1}
