{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..a9263ae 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -37,6 +37,8 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         pass\n \n \n+from sphinx.util.typing import apply_type_aliases\n+\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n@@ -63,7 +65,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            applied_annotations = {k: apply_type_aliases(v, app.config.autodoc_type_aliases)\n+                                   for k, v in annotations[fullname].items()}\n+            modify_field_list(field_list, applied_annotations)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..10e100a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -19,6 +19,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n+from sphinx.util.typing import apply_type_aliases\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n@@ -41,7 +42,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            applied_annotations = {k: apply_type_aliases(v, app.config.autodoc_type_aliases) for k, v in annotations[fullname].items()}\n+            modify_field_list(field_list, applied_annotations)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
