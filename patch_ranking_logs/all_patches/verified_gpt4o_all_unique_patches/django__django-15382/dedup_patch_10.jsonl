{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e64dbc9..b6c6e02 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1211,6 +1211,8 @@ class Exists(Subquery):\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n+        if isinstance(query, EmptyResultSet):\n+            return '0 = 1', []\n         sql, params = super().as_sql(\n             compiler,\n             connection,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ee0d94d..e0a4cd8 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -756,6 +756,8 @@ class Exists(Subquery):\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n+        if isinstance(query, EmptyResultSet):\n+            return ('0 = 1', [])\n         sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "normalized_occurrence": 1}
