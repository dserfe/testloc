{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..dcaa5bf 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -105,8 +105,15 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     if depmat is None:\n         return expr\n \n+    if any(dim == 0 for dim in depmat):\n+        raise ValueError(f\"Cannot convert {expr} to incompatible target units {target_units}\")\n+    \n     expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n+    converted_expr = expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n+    \n+    # Verify conversion result; if it's improper, return the original expression\n+    verified_conversion = converted_expr.equals(expr)\n+    return converted_expr if verified_conversion else expr\n \n \n def quantity_simplify(expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..9f20ebf 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -41,8 +41,12 @@ def convert_to(expr, target_units, unit_system='SI'):\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n+    if any((dim == 0 for dim in depmat)):\n+        raise ValueError(f'Cannot convert {expr} to incompatible target units {target_units}')\n     expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n+    converted_expr = expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n+    verified_conversion = converted_expr.equals(expr)\n+    return converted_expr if verified_conversion else expr\n def quantity_simplify(expr):\n     if expr.is_Atom or not expr.has(Prefix, Quantity):\n         return expr\n", "normalized_occurrence": 1}
