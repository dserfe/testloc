{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..b1b4bd4 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,6 +45,14 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle functools.partial - unwrap to get the original function\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            # Store partial info for repr\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords\n+            # Use the underlying function for the path\n+            func = func.func\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -59,8 +67,13 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if hasattr(self, '_partial_args') or hasattr(self, '_partial_keywords'):\n+            partial_args = getattr(self, '_partial_args', ())\n+            partial_keywords = getattr(self, '_partial_keywords', {})\n+            func_repr = f\"functools.partial({func_repr}, args={partial_args}, keywords={partial_keywords})\"\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..6edf755 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,6 +29,10 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords\n+            func = func.func\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n@@ -38,7 +42,12 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_repr = self._func_path\n+        if hasattr(self, '_partial_args') or hasattr(self, '_partial_keywords'):\n+            partial_args = getattr(self, '_partial_args', ())\n+            partial_keywords = getattr(self, '_partial_keywords', {})\n+            func_repr = f'functools.partial({func_repr}, args={partial_args}, keywords={partial_keywords})'\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
