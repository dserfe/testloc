{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex ebc163c..08170a2 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -776,7 +776,14 @@ class TerminalReporter:\n \n     def _locationline(self, nodeid, fspath, lineno, domain):\n         def mkrel(nodeid):\n-            line = self.config.cwd_relative_nodeid(nodeid)\n+            if fspath:\n+                # Use startdir instead of current working directory\n+                rel_fspath = self.startdir.bestrelpath(fspath)\n+                line = rel_fspath\n+                if \"::\" in nodeid:\n+                    line += nodeid[nodeid.index(\"::\"):]\n+            else:\n+                line = nodeid\n             if domain and line.endswith(domain):\n                 line = line[: -len(domain)]\n                 values = domain.split(\"[\")\n@@ -785,7 +792,6 @@ class TerminalReporter:\n             return line\n \n         # collect_fspath comes from testid which has a \"/\"-normalized path\n-\n         if fspath:\n             res = mkrel(nodeid)\n             if self.verbosity >= 2 and nodeid.split(\"::\")[0] != fspath.replace(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 554ecf8..3d742f7 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -510,7 +510,13 @@ class TerminalReporter:\n                 self._tw.line('(to show a full traceback on KeyboardInterrupt use --full-trace)', yellow=True)\n     def _locationline(self, nodeid, fspath, lineno, domain):\n         def mkrel(nodeid):\n-            line = self.config.cwd_relative_nodeid(nodeid)\n+            if fspath:\n+                rel_fspath = self.startdir.bestrelpath(fspath)\n+                line = rel_fspath\n+                if '::' in nodeid:\n+                    line += nodeid[nodeid.index('::'):]\n+            else:\n+                line = nodeid\n             if domain and line.endswith(domain):\n                 line = line[:-len(domain)]\n                 values = domain.split('[')\n", "normalized_occurrence": 1}
