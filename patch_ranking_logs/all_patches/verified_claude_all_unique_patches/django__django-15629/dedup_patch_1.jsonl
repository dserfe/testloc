{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15629", "model_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex a65d38d..179b2ba 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -167,6 +167,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n     def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        # If this is a FK field and the referenced field has a collation, apply the same collation\n+        if hasattr(new_field, 'remote_field') and new_field.remote_field and new_field.remote_field.model:\n+            remote_field = new_field.remote_field.model._meta.pk\n+            if hasattr(remote_field, 'db_collation') and remote_field.db_collation:\n+                new_type = f\"{new_type} COLLATE {remote_field.db_collation}\"\n         return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n \n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex a0e95ce..168c012 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -83,6 +83,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         return new_type\n     def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n+        if hasattr(new_field, 'remote_field') and new_field.remote_field and new_field.remote_field.model:\n+            remote_field = new_field.remote_field.model._meta.pk\n+            if hasattr(remote_field, 'db_collation') and remote_field.db_collation:\n+                new_type = f'{new_type} COLLATE {remote_field.db_collation}'\n         return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n     def _rename_field_sql(self, table, old_field, new_field, new_type):\n         new_type = self._set_field_new_type_null_status(old_field, new_type)\n", "normalized_occurrence": 1}
