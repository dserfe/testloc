{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..c93015e 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3026,6 +3026,11 @@ class Figure(FigureBase):\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n+        # Store the original DPI value\n+        if not hasattr(self, '_original_dpi'):\n+            self._original_dpi = self.dpi\n+        state['_original_dpi'] = self._original_dpi\n+\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n@@ -3045,6 +3050,10 @@ class Figure(FigureBase):\n \n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n+        \n+        # Restore the original DPI value\n+        if '_original_dpi' in state:\n+            self._set_dpi(state['_original_dpi'], forward=False)\n \n         if restore_to_pylab:\n             # lazy import to avoid circularity\n", "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..d1ce3fb 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,9 @@ class Figure(FigureBase):\n         state.pop('canvas')\n         state['_cachedRenderer'] = None\n         state['__mpl_version__'] = mpl.__version__\n+        if not hasattr(self, '_original_dpi'):\n+            self._original_dpi = self.dpi\n+        state['_original_dpi'] = self._original_dpi\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n@@ -962,6 +965,8 @@ class Figure(FigureBase):\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n         FigureCanvasBase(self)\n+        if '_original_dpi' in state:\n+            self._set_dpi(state['_original_dpi'], forward=False)\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n             import matplotlib._pylab_helpers as pylab_helpers\n", "normalized_occurrence": 1}
