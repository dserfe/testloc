{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 2f2ca70..c2784d3 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1280,7 +1280,9 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config(\"transform\", self)\n         if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            # Preserve indices from transformed data instead of forcing original index\n+            result = pd.concat(Xs, axis=1)\n+            return result\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\ndiff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..5092559 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -52,10 +52,11 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        # Only set index/columns if the transformed data doesn't already have them\n+        if columns is not None and not data_to_wrap.columns.empty:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and data_to_wrap.index.empty:\n             data_to_wrap.index = index\n         return data_to_wrap\n \n", "normalized_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex f4194e0..49ff21c 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -350,7 +350,8 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config('transform', self)\n         if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n             pd = check_pandas_support('transform')\n-            return pd.concat(Xs, axis=1)\n+            result = pd.concat(Xs, axis=1)\n+            return result\n         if any((sparse.issparse(f) for f in Xs)):\n             Xs = sparse.hstack(Xs).tocsr()\n         else:\ndiff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..2d0b026 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,10 +12,10 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n         except Exception:\n             columns = None\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        if columns is not None and (not data_to_wrap.columns.empty):\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and data_to_wrap.index.empty:\n             data_to_wrap.index = index\n         return data_to_wrap\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n", "normalized_occurrence": 1}
