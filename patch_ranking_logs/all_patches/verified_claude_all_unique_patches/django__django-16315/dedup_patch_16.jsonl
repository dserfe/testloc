{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16315", "model_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 7b1b714..85a4b4f 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -353,12 +353,22 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return \"ON CONFLICT DO NOTHING\"\n         if on_conflict == OnConflict.UPDATE:\n+            # Get the actual database column names for the fields\n+            opts = fields[0].model._meta\n+            unique_columns = [\n+                opts.get_field(field).db_column or field\n+                for field in unique_fields\n+            ]\n+            update_columns = [\n+                opts.get_field(field).db_column or field\n+                for field in update_fields\n+            ]\n             return \"ON CONFLICT(%s) DO UPDATE SET %s\" % (\n-                \", \".join(map(self.quote_name, unique_fields)),\n+                \", \".join(map(self.quote_name, unique_columns)),\n                 \", \".join(\n                     [\n-                        f\"{field} = EXCLUDED.{field}\"\n-                        for field in map(self.quote_name, update_fields)\n+                        f\"{self.quote_name(field)} = EXCLUDED.{self.quote_name(field)}\"\n+                        for field in update_columns\n                     ]\n                 ),\n             )\n@@ -367,4 +377,4 @@ class DatabaseOperations(BaseDatabaseOperations):\n             on_conflict,\n             update_fields,\n             unique_fields,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/operations.py b/django/db/backends/postgresql/operations.py\nindex 75da682..4881a25 100644\n--- a/django/db/backends/postgresql/operations.py\n+++ b/django/db/backends/postgresql/operations.py\n@@ -186,5 +186,8 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if on_conflict == OnConflict.IGNORE:\n             return 'ON CONFLICT DO NOTHING'\n         if on_conflict == OnConflict.UPDATE:\n-            return 'ON CONFLICT(%s) DO UPDATE SET %s' % (', '.join(map(self.quote_name, unique_fields)), ', '.join([f'{field} = EXCLUDED.{field}' for field in map(self.quote_name, update_fields)]))\n+            opts = fields[0].model._meta\n+            unique_columns = [opts.get_field(field).db_column or field for field in unique_fields]\n+            update_columns = [opts.get_field(field).db_column or field for field in update_fields]\n+            return 'ON CONFLICT(%s) DO UPDATE SET %s' % (', '.join(map(self.quote_name, unique_columns)), ', '.join([f'{self.quote_name(field)} = EXCLUDED.{self.quote_name(field)}' for field in update_columns]))\n         return super().on_conflict_suffix_sql(fields, on_conflict, update_fields, unique_fields)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
