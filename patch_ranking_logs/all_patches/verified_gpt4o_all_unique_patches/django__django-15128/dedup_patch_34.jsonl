{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..e6c4d50 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -611,8 +611,10 @@ class Query(BaseExpression):\n             # distinct joins for the same connection in rhs query, then the\n             # combined query must have two joins, too.\n             reuse.discard(new_alias)\n-            if alias != new_alias:\n-                change_map[alias] = new_alias\n+            # Increment the alias until there is no conflict in change_map\n+            while new_alias in change_map.values():\n+                new_alias = self.table_alias(new_alias)\n+            change_map[alias] = new_alias\n             if not rhs.alias_refcount[alias]:\n                 # The alias was unused in the rhs query. Unref it so that it\n                 # will be unused in the new query, too. We have to add and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..f820036 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -340,8 +340,9 @@ class Query(BaseExpression):\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n-            if alias != new_alias:\n-                change_map[alias] = new_alias\n+            while new_alias in change_map.values():\n+                new_alias = self.table_alias(new_alias)\n+            change_map[alias] = new_alias\n             if not rhs.alias_refcount[alias]:\n                 self.unref_alias(new_alias)\n         joinpromoter.add_votes(rhs_votes)\n", "normalized_occurrence": 1}
