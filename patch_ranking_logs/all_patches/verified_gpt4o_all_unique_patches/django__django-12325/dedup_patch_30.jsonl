{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..e9ab29d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -201,10 +201,17 @@ class ModelBase(type):\n             if base != new_class and not base._meta.abstract:\n                 continue\n             # Locate OneToOneField instances.\n+            # First, process fields with parent_link=True\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n+            # Then, process other OneToOneField instances\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField) and not field.parent_link:\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    if make_model_tuple(related) not in parent_links:\n+                        parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..7c28199 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -105,9 +105,14 @@ class ModelBase(type):\n             if base != new_class and (not base._meta.abstract):\n                 continue\n             for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n+                if isinstance(field, OneToOneField) and field.parent_link:\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n+            for field in base._meta.local_fields:\n+                if isinstance(field, OneToOneField) and (not field.parent_link):\n+                    related = resolve_relation(new_class, field.remote_field.model)\n+                    if make_model_tuple(related) not in parent_links:\n+                        parent_links[make_model_tuple(related)] = field\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n", "normalized_occurrence": 1}
