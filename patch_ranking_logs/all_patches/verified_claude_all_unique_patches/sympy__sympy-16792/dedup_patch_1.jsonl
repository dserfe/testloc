{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..fb0aa86 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -441,9 +441,10 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        # Check both dimensions and if arg is a MatrixSymbol\n+        if arg.dimensions or hasattr(arg, 'is_Matrix'):\n             self._need_numpy = True\n-            ndim = len(arg.dimensions)\n+            ndim = len(arg.dimensions) if arg.dimensions else 2  # MatrixSymbol is 2D\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..d652ddb 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -194,9 +194,9 @@ class CythonCodeWrapper(CodeWrapper):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n-        if arg.dimensions:\n+        if arg.dimensions or hasattr(arg, 'is_Matrix'):\n             self._need_numpy = True\n-            ndim = len(arg.dimensions)\n+            ndim = len(arg.dimensions) if arg.dimensions else 2\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n", "normalized_occurrence": 1}
