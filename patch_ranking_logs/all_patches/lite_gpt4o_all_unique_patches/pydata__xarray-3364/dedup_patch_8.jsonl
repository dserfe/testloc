{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..275775f 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -312,15 +313,15 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    # Create a variable with the same dimensions but filled with fill_value\n+                    dims = tuple(d for d in datasets[0][var].dims)\n+                    shape = tuple(dims_sizes[d] for d in dims)\n+                    data = np.full(shape, fill_value)\n+                    to_merge[var].append(Variable(dims, data))\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..2268084 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -126,11 +126,14 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    dims = tuple((d for d in datasets[0][var].dims))\n+                    shape = tuple((dims_sizes[d] for d in dims))\n+                    data = np.full(shape, fill_value)\n+                    to_merge[var].append(Variable(dims, data))\n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(var, to_merge[var], compat=compat, equals=equals.get(var, None))\n     else:\n", "normalized_occurrence": 1}
