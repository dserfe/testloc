{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..a550740 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,23 +1933,25 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            syms = [m for m in self.args if m.is_Symbol]\n+            \n+            if nums:\n+                # Handle numbers in the complement\n+                nums_in_interval = [n for n in nums if n in other]\n+                if nums_in_interval:\n+                    nums_set = FiniteSet(*nums_in_interval)\n+                    if syms:\n+                        # If we have both numbers and symbols, return the composite complement\n+                        return Complement(FiniteSet(*syms), other) + Complement(nums_set, other)\n+                    else:\n+                        # If we only have numbers, return their complement\n+                        return Complement(nums_set, other)\n+                \n+            # If we only have symbols or numbers outside the interval\n+            if syms:\n+                return Complement(FiniteSet(*syms), other)\n+            \n+            return self\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..9b944cc 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,19 +842,18 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                intervals = []\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if nums:\n+                nums_in_interval = [n for n in nums if n in other]\n+                if nums_in_interval:\n+                    nums_set = FiniteSet(*nums_in_interval)\n+                    if syms:\n+                        return Complement(FiniteSet(*syms), other) + Complement(nums_set, other)\n+                    else:\n+                        return Complement(nums_set, other)\n+            if syms:\n+                return Complement(FiniteSet(*syms), other)\n+            return self\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
