{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..0b34189 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,9 +112,28 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    \n+    Commas can be escaped with a backslash to include them as part of a regex pattern.\n+    For example: \"foo\\,bar,baz\" will be treated as two patterns: \"foo,bar\" and \"baz\"\n+    \"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    # First replace escaped commas with a temporary marker\n+    temp_marker = \"__ESCAPED_COMMA__\"\n+    processed_value = \"\"\n+    i = 0\n+    while i < len(value):\n+        if i < len(value) - 1 and value[i] == '\\\\' and value[i + 1] == ',':\n+            processed_value += temp_marker\n+            i += 2\n+        else:\n+            processed_value += value[i]\n+            i += 1\n+            \n+    # Split on unescaped commas\n+    for pattern in _csv_transformer(processed_value):\n+        # Restore escaped commas\n+        pattern = pattern.replace(temp_marker, ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..7fce8d9 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,7 +55,18 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    temp_marker = '__ESCAPED_COMMA__'\n+    processed_value = ''\n+    i = 0\n+    while i < len(value):\n+        if i < len(value) - 1 and value[i] == '\\\\' and (value[i + 1] == ','):\n+            processed_value += temp_marker\n+            i += 2\n+        else:\n+            processed_value += value[i]\n+            i += 1\n+    for pattern in _csv_transformer(processed_value):\n+        pattern = pattern.replace(temp_marker, ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
