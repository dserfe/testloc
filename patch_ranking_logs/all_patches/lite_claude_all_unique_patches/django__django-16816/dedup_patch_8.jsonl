{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..4fb782e 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -895,8 +895,28 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n+        \n+        # First try to get the field\n         try:\n             field = obj.model._meta.get_field(item)\n+            # If it's a direct foreign key reference, raise error\n+            if field.is_relation and field.many_to_one:\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is a foreign key \"\n+                        \"field on '%s'. Use '%s.field_name' or define a property/method \"\n+                        \"on the model/admin to display foreign key content.\"\n+                        % (\n+                            label,\n+                            item,\n+                            obj.model._meta.label,\n+                            item,\n+                        ),\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n+            return []\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..e7770b8 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -339,6 +339,9 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         try:\n             field = obj.model._meta.get_field(item)\n+            if field.is_relation and field.many_to_one:\n+                return [checks.Error(\"The value of '%s' refers to '%s', which is a foreign key field on '%s'. Use '%s.field_name' or define a property/method on the model/admin to display foreign key content.\" % (label, item, obj.model._meta.label, item), obj=obj.__class__, id='admin.E108')]\n+            return []\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n", "normalized_occurrence": 1}
