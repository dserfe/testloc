{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..69e12de 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -822,7 +822,13 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        \n+        # Ensure assumptions are handled correctly\n+        new_expr = self.func(*args)\n+        if old.is_Number and new.is_Number:\n+            new_expr = new_expr.xreplace({old: new})\n+\n+        return new_expr\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..3ebe1cd 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -453,7 +453,10 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        new_expr = self.func(*args)\n+        if old.is_Number and new.is_Number:\n+            new_expr = new_expr.xreplace({old: new})\n+        return new_expr\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
