{"model_name_or_path": "agentless", "instance_id": "psf__requests-2317", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 76c9998..fd3deb2 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -415,6 +415,7 @@ class Session(SessionRedirectMixin):\n         :type timeout: float or tuple\n         :param allow_redirects: (optional) Set to True by default.\n         :type allow_redirects: bool\n+from .utils import to_native_string\n         :param proxies: (optional) Dictionary mapping protocol to the URL of\n             the proxy.\n         :param stream: (optional) whether to immediately download the response\n@@ -425,7 +426,7 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n-        method = builtin_str(method)\n+        method = to_native_string(method)\n \n         # Create the Request.\n         req = Request(\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3a4f135..a59e251 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -155,7 +155,7 @@ class Session(SessionRedirectMixin):\n         p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, json=request.json, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n         return p\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None, json=None):\n-        method = builtin_str(method)\n+        method = to_native_string(method)\n         req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n         prep = self.prepare_request(req)\n         proxies = proxies or {}\n", "normalized_occurrence": 20}
