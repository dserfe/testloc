{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..2d260dd 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1560,7 +1560,7 @@ class PairGrid(Grid):\n \n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n+        if self._hue_var is None and \"hue\" not in kwargs:\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n@@ -1569,7 +1569,18 @@ class PairGrid(Grid):\n             kwargs.update({\n                 \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n             })\n-        func(x=x, y=y, **kwargs)\n+        # Handle hue parameter if passed directly in kwargs\n+        if \"hue\" in kwargs and isinstance(kwargs[\"hue\"], (pd.Series, np.ndarray)):\n+            hue = kwargs.pop(\"hue\")\n+            unique_hues = pd.unique(hue)\n+            palette = kwargs.get(\"palette\", sns.color_palette(n_colors=len(unique_hues)))\n+            hue_map = dict(zip(unique_hues, palette))\n+\n+            for level in unique_hues:\n+                level_data = data[hue == level]\n+                func(x=level_data[x_var], y=level_data[y_var], color=hue_map[level], **kwargs)\n+        else:\n+            func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..65596bd 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -743,13 +743,22 @@ class PairGrid(Grid):\n             data = data.dropna()\n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n+        if self._hue_var is None and 'hue' not in kwargs:\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n         if 'hue' not in kwargs:\n             kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n-        func(x=x, y=y, **kwargs)\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], (pd.Series, np.ndarray)):\n+            hue = kwargs.pop('hue')\n+            unique_hues = pd.unique(hue)\n+            palette = kwargs.get('palette', sns.color_palette(n_colors=len(unique_hues)))\n+            hue_map = dict(zip(unique_hues, palette))\n+            for level in unique_hues:\n+                level_data = data[hue == level]\n+                func(x=level_data[x_var], y=level_data[y_var], color=hue_map[level], **kwargs)\n+        else:\n+            func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n         kwargs = kwargs.copy()\n", "normalized_occurrence": 1}
