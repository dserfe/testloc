{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..7cf449f 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -757,7 +757,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n \n-        return self._hstack(list(Xs))\n+        non_empty_Xs = [X for X in Xs if X.shape[1] > 0]\n+        return self._hstack(non_empty_Xs)\n \n     def transform(self, X):\n         \"\"\"Transform X separately by each transformer, concatenate results.\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..e4c1d8d 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -222,7 +222,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._update_fitted_transformers(transformers)\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n-        return self._hstack(list(Xs))\n+        non_empty_Xs = [X for X in Xs if X.shape[1] > 0]\n+        return self._hstack(non_empty_Xs)\n     def transform(self, X):\n         check_is_fitted(self)\n         X = _check_X(X)\n", "normalized_occurrence": 1}
