{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..8ed160c 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -492,14 +492,7 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n \n     # overwritten\n-    def visit_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n-        else:\n-            self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n-            self.protect_literal_text += 1\n+\n \n     def depart_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..9a6b387 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,26 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n+            # Check if this is a single character that could be a separator\n+            text = node.astext()\n+            if text in ('-', '+', '^'):\n+                # Render as a single kbd element\n+                self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+            else:\n+                # Handle compound keystrokes\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                           CLASS='docutils literal notranslate'))\n+                # Split on actual compound key combinations\n+                parts = [p for p in re.split(r'(?<![-+^])[-+^](?![-+^])', text) if p]\n+                for i, part in enumerate(parts):\n+                    if i > 0:  # Add separator between parts\n+                        self.body.append(text[len(''.join(parts[:i])) + i - 1])\n+                    if part:  # Only create kbd for non-empty parts\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..76abb0d 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -322,12 +322,6 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append(self.starttag(node, 'blockquote') + '<div>')\n     def depart_block_quote(self, node: Element) -> None:\n         self.body.append('</div></blockquote>\\n')\n-    def visit_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n-        else:\n-            self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n-            self.protect_literal_text += 1\n     def depart_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append('</kbd>')\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..77898c2 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -297,7 +297,20 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if text in ('-', '+', '^'):\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+            else:\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                parts = [p for p in re.split('(?<![-+^])[-+^](?![-+^])', text) if p]\n+                for i, part in enumerate(parts):\n+                    if i > 0:\n+                        self.body.append(text[len(''.join(parts[:i])) + i - 1])\n+                    if part:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
