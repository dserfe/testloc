{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 1878dd6..3512442 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1903,13 +1903,28 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Return the 'value' normalized to approximate positions in the boundaries.\n+        \n+        Parameters\n+        ----------\n+        value : array-like\n+            The values to be un-normalized.\n+            \n+        Returns\n+        -------\n+        out : array-like\n+            The inverse-normalized values between boundaries.\n         \"\"\"\n-        raise ValueError(\"BoundaryNorm is not invertible\")\n+        # Convert value to 0-1 range\n+        value = np.asarray(value)\n+        # Get the boundaries\n+        x = (self.boundaries[1:] + self.boundaries[:-1]) / 2\n+        # Scale the input from [0, 1] to indices\n+        value = value * (len(x) - 1)\n+        # Convert to nearest index\n+        idx = np.clip(np.round(value).astype(int), 0, len(x) - 1)\n+        # Return the midpoint values\n+        return x[idx]\n \n \n class NoNorm(Normalize):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b4a7c6b..401c803 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1631,13 +1631,23 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Return the 'value' normalized to approximate positions in the boundaries.\n+        \n+        Parameters\n+        ----------\n+        value : array-like\n+            The values to be un-normalized.\n+            \n+        Returns\n+        -------\n+        out : array-like\n+            The inverse-normalized values between boundaries.\n         \"\"\"\n-        raise ValueError('BoundaryNorm is not invertible')\n+        value = np.asarray(value)\n+        x = (self.boundaries[1:] + self.boundaries[:-1]) / 2\n+        value = value * (len(x) - 1)\n+        idx = np.clip(np.round(value).astype(int), 0, len(x) - 1)\n+        return x[idx]\n \n class NoNorm(Normalize):\n     \"\"\"\n", "normalized_occurrence": 1}
