{"model_name_or_path": "agentless", "instance_id": "django__django-12774", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 398c1d7..b181f87 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -689,7 +689,10 @@ class QuerySet:\n         \"\"\"\n         assert not self.query.is_sliced, \\\n             \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:\n+        if field_name != 'pk' and not (\n+                self.model._meta.get_field(field_name).unique or\n+                any(field_name in constraint.fields for constraint in self.model._meta.total_unique_constraints)\n+        ):\n             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0586bad..498f014 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -417,7 +417,7 @@ class QuerySet:\n             return obj\n     def in_bulk(self, id_list=None, *, field_name='pk'):\n         assert not self.query.is_sliced, \"Cannot use 'limit' or 'offset' with in_bulk\"\n-        if field_name != 'pk' and (not self.model._meta.get_field(field_name).unique):\n+        if field_name != 'pk' and (not (self.model._meta.get_field(field_name).unique or any((field_name in constraint.fields for constraint in self.model._meta.total_unique_constraints)))):\n             raise ValueError(\"in_bulk()'s field_name must be a unique field but %r isn't.\" % field_name)\n         if id_list is not None:\n             if not id_list:\n", "normalized_occurrence": 1}
