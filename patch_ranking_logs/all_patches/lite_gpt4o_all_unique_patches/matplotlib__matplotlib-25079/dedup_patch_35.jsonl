{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..daa9468 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -592,7 +592,7 @@ class ScalarMappable:\n \n     @norm.setter\n     def norm(self, norm):\n-        _api.check_isinstance((colors.Normalize, str, None), norm=norm)\n+        _api.check_isinstance((colors.Normalize, colors.LogNorm, str, None), norm=norm)\n         if norm is None:\n             norm = colors.Normalize()\n         elif isinstance(norm, str):\n@@ -613,7 +613,11 @@ class ScalarMappable:\n         # Remove the current callback and connect to the new one\n         if not in_init:\n             self.norm.callbacks.disconnect(self._id_norm)\n+        # Temporarily set the norm to None to prevent invalid state\n+        self._norm = None\n         self._norm = norm\n+        if hasattr(self, '_id_norm'):\n+            self.norm.callbacks.disconnect(self._id_norm)\n         self._id_norm = self.norm.callbacks.connect('changed',\n                                                     self.changed)\n         if not in_init:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..5f005b6 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -176,7 +176,7 @@ class ScalarMappable:\n         return self._norm\n     @norm.setter\n     def norm(self, norm):\n-        _api.check_isinstance((colors.Normalize, str, None), norm=norm)\n+        _api.check_isinstance((colors.Normalize, colors.LogNorm, str, None), norm=norm)\n         if norm is None:\n             norm = colors.Normalize()\n         elif isinstance(norm, str):\n@@ -190,7 +190,10 @@ class ScalarMappable:\n         in_init = self.norm is None\n         if not in_init:\n             self.norm.callbacks.disconnect(self._id_norm)\n+        self._norm = None\n         self._norm = norm\n+        if hasattr(self, '_id_norm'):\n+            self.norm.callbacks.disconnect(self._id_norm)\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n             self.changed()\n", "normalized_occurrence": 1}
