{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..a2c301d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -923,22 +923,16 @@ class Model(metaclass=ModelBase):\n                 # saved to the database (or auto-generated in a case like\n                 # UUIDField), but we allow the save to proceed and rely on the\n                 # database to raise an IntegrityError if applicable. If\n-                # constraints aren't supported by the database, there's the\n-                # unavoidable risk of data corruption.\n                 if obj.pk is None:\n-                    # Remove the object from a related instance cache.\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n                     raise ValueError(\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n-                    setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n+                # Always assign the related object's pk to the foreign key field,\n+                # not just when the foreign key field is None.\n+                setattr(self, field.attname, obj.pk)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..fdbb9a5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -493,8 +493,7 @@ class Model(metaclass=ModelBase):\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n-                elif getattr(self, field.attname) is None:\n-                    setattr(self, field.attname, obj.pk)\n+                setattr(self, field.attname, obj.pk)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n     def delete(self, using=None, keep_parents=False):\n", "normalized_occurrence": 2}
