{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..6121709 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -561,12 +561,20 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         new_model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # Skip if we're trying to remove a unique_together that matches a field's own unique constraint\n+            if (self.option_name == \"unique_together\" and \n+                len(old_value) > len(new_value)):\n+                old_singles = {(f,) for f in old_value if isinstance(f, str)}\n+                for field_name in old_singles:\n+                    field = old_model._meta.get_field(field_name[0])\n+                    if field.unique or field.primary_key:\n+                        old_value.discard(field_name)\n+                        \n             alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n-            alter_together(\n-                new_model,\n-                getattr(old_model._meta, self.option_name, set()),\n-                getattr(new_model._meta, self.option_name, set()),\n-            )\n+            alter_together(new_model, old_value, new_value)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b786bec..5ec9630 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -243,8 +243,16 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         new_model = to_state.apps.get_model(app_label, self.name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            if self.option_name == 'unique_together' and len(old_value) > len(new_value):\n+                old_singles = {(f,) for f in old_value if isinstance(f, str)}\n+                for field_name in old_singles:\n+                    field = old_model._meta.get_field(field_name[0])\n+                    if field.unique or field.primary_key:\n+                        old_value.discard(field_name)\n             alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n-            alter_together(new_model, getattr(old_model._meta, self.option_name, set()), getattr(new_model._meta, self.option_name, set()))\n+            alter_together(new_model, old_value, new_value)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n     def references_field(self, model_name, name, app_label):\n", "normalized_occurrence": 1}
