{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7192ab0..a57588d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1284,7 +1284,13 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         return (inspect.isfunction(member) or inspect.isbuiltin(member) or\n                 (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter)))\n \n+    def _format_enum_value(self, value):\n+        if isinstance(value, Enum):\n+            return f'{value.__class__.__name__}.{value.name}'\n+        return repr(value)\n+\n     def format_args(self, **kwargs: Any) -> str:\n+        kwargs.setdefault('format_value', self._format_enum_value)\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n \n@@ -1548,7 +1554,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         # with __init__ in C and no `__text_signature__`.\n         return None, None, None\n \n+    def _format_enum_value(self, value):\n+        if isinstance(value, Enum):\n+            return f'{value.__class__.__name__}.{value.name}'\n+        return repr(value)\n+\n     def format_args(self, **kwargs: Any) -> str:\n+        kwargs.setdefault('format_value', self._format_enum_value)\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2bf2bdb..295715d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -701,7 +701,12 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n         return inspect.isfunction(member) or inspect.isbuiltin(member) or (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter))\n+    def _format_enum_value(self, value):\n+        if isinstance(value, Enum):\n+            return f'{value.__class__.__name__}.{value.name}'\n+        return repr(value)\n     def format_args(self, **kwargs: Any) -> str:\n+        kwargs.setdefault('format_value', self._format_enum_value)\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n         try:\n@@ -864,7 +869,12 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         except ValueError:\n             pass\n         return (None, None, None)\n+    def _format_enum_value(self, value):\n+        if isinstance(value, Enum):\n+            return f'{value.__class__.__name__}.{value.name}'\n+        return repr(value)\n     def format_args(self, **kwargs: Any) -> str:\n+        kwargs.setdefault('format_value', self._format_enum_value)\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n         try:\n", "normalized_occurrence": 1}
