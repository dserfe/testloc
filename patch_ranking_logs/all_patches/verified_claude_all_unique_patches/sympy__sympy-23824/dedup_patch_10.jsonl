{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23824", "model_patch": "diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex 8ce17be..c2d3d56 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -695,7 +695,7 @@ def kahane_simplify(expression):\n     # If `first_dum_pos` is not zero, it means that there are trailing free gamma\n     # matrices in front of `expression`, so multiply by them:\n     for i in range(0, first_dum_pos):\n-        [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n+        [ri.insert(i, free_pos[i]) for ri in resulting_indices]\n \n     resulting_expr = S.Zero\n     for i in resulting_indices:\n", "occurrence": 3, "normalized_patch": "diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py\nindex a91f01b..59a0d78 100644\n--- a/sympy/physics/hep/gamma_matrices.py\n+++ b/sympy/physics/hep/gamma_matrices.py\n@@ -314,7 +314,7 @@ def kahane_simplify(expression):\n     resulting_coeff *= -1 if (number_of_contractions - connected_components + 1) % 2 else 1\n     resulting_coeff *= 2 ** number_of_contractions\n     for i in range(0, first_dum_pos):\n-        [ri.insert(0, free_pos[i]) for ri in resulting_indices]\n+        [ri.insert(i, free_pos[i]) for ri in resulting_indices]\n     resulting_expr = S.Zero\n     for i in resulting_indices:\n         temp_expr = S.One\n", "normalized_occurrence": 5}
