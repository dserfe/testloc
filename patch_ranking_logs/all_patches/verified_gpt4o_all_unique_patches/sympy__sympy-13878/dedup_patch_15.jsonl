{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e880705..7d07259 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -153,6 +153,10 @@ class ArcsinDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 2/pi * asin(sqrt((x - a) / (b - a)))\n+        \n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -671,6 +675,10 @@ class DagumDistribution(SingleContinuousDistribution):\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x / b)**(-a))**(-p)\n+        \n def Dagum(name, p, a, b):\n     r\"\"\"\n     Create a continuous random variable with a Dagum distribution.\n@@ -1042,6 +1050,10 @@ class FrechetDistribution(SingleContinuousDistribution):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-((x - m) / s)**(-a))\n+        \n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n@@ -1112,6 +1124,10 @@ class GammaDistribution(SingleContinuousDistribution):\n         return random.gammavariate(self.k, self.theta)\n \n \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return lowergamma(k, x / theta) / gamma(k)\n+        \n def Gamma(name, k, theta):\n     r\"\"\"\n     Create a continuous random variable with a Gamma distribution.\n@@ -1200,6 +1216,10 @@ class GammaInverseDistribution(SingleContinuousDistribution):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return uppergamma(a, b/x) / gamma(a)\n+        \n def GammaInverse(name, a, b):\n     r\"\"\"\n     Create a continuous random variable with an inverse Gamma distribution.\n@@ -1385,6 +1405,10 @@ class KumaraswamyDistribution(SingleContinuousDistribution):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 1 - (1 - x**a)**b\n+        \n def Kumaraswamy(name, a, b):\n     r\"\"\"\n     Create a Continuous Random Variable with a Kumaraswamy distribution.\n@@ -1446,6 +1470,10 @@ class LaplaceDistribution(SingleContinuousDistribution):\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise((1/2 * exp((x - mu) / b), x < mu), (1 - 1/2 * exp(-(x - mu) / b), x >= mu))\n+        \n def Laplace(name, mu, b):\n     r\"\"\"\n     Create a continuous random variable with a Laplace distribution.\n@@ -1502,6 +1530,10 @@ class LogisticDistribution(SingleContinuousDistribution):\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu) / s))\n+        \n def Logistic(name, mu, s):\n     r\"\"\"\n     Create a continuous random variable with a logistic distribution.\n@@ -1712,6 +1744,10 @@ class NakagamiDistribution(SingleContinuousDistribution):\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n \n \n+    def _cdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return gamma(mu, mu/omega * x**2) / gamma(mu)\n+        \n def Nakagami(name, mu, omega):\n     r\"\"\"\n     Create a continuous random variable with a Nakagami distribution.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 2 / pi * asin(sqrt((x - a) / (b - a)))\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return 1 - (1 + (x / b) ** (-a)) ** (-p)\n+    def _cdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return exp(-((x - m) / s) ** (-a))\n+    def _cdf(self, x):\n+        k, theta = (self.k, self.theta)\n+        return lowergamma(k, x / theta) / gamma(k)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return uppergamma(a, b / x) / gamma(a)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 1 - (1 - x ** a) ** b\n+    def _cdf(self, x):\n+        mu, b = (self.mu, self.b)\n+        return Piecewise((1 / 2 * exp((x - mu) / b), x < mu), (1 - 1 / 2 * exp(-(x - mu) / b), x >= mu))\n+    def _cdf(self, x):\n+        mu, s = (self.mu, self.s)\n+        return 1 / (1 + exp(-(x - mu) / s))\n+    def _cdf(self, x):\n+        mu, omega = (self.mu, self.omega)\n+        return gamma(mu, mu / omega * x ** 2) / gamma(mu)", "normalized_occurrence": 1}
