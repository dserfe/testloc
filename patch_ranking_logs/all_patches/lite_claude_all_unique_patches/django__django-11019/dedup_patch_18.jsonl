{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..b48fcb6 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -115,6 +115,59 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n+    def merge(list_1, list_2):\n+        \"\"\"\n+        Merge two lists while trying to keep the relative order of the elements.\n+        Warn if the lists have elements with conflicting orders.\n+\n+        For static assets it can be important to have them included in the DOM\n+        in a certain order. In JavaScript you may not be able to reference a\n+        global or in CSS you might want to override a style.\n+        \"\"\"\n+        # Build a map of all elements and their order relationships\n+        order_map = {}\n+        for lst in [list_1, list_2]:\n+            for i, path in enumerate(lst):\n+                if path not in order_map:\n+                    order_map[path] = {'before': set(), 'after': set()}\n+                # Record order relationships for this path\n+                for before_path in lst[:i]:\n+                    order_map[path]['before'].add(before_path)\n+                for after_path in lst[i+1:]:\n+                    order_map[path]['after'].add(after_path)\n+\n+        # Check for order conflicts\n+        for path, relationships in order_map.items():\n+            conflicts = relationships['before'] & relationships['after']\n+            if conflicts:\n+                for conflict_path in conflicts:\n+                    warnings.warn(\n+                        'Detected duplicate Media files in an opposite order:\\n'\n+                        '%s\\n%s' % (conflict_path, path),\n+                        MediaOrderConflictWarning,\n+                    )\n+\n+        # Build final order respecting relationships\n+        result = []\n+        used = set()\n+        \n+        def add_path(path):\n+            if path in used:\n+                return\n+            # First add any paths that must come before this one\n+            for before_path in order_map[path]['before']:\n+                if before_path not in used:\n+                    add_path(before_path)\n+            result.append(path)\n+            used.add(path)\n+\n+        # Add all paths while respecting order\n+        all_paths = set(order_map.keys())\n+        while all_paths - used:\n+            path = min(all_paths - used)  # Deterministic order\n+            add_path(path)\n+\n+        return result\n     def merge(list_1, list_2):\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..73af005 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -62,6 +62,36 @@ class Media:\n             return Media(**{str(name): getattr(self, '_' + name)})\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n+    def merge(list_1, list_2):\n+        order_map = {}\n+        for lst in [list_1, list_2]:\n+            for i, path in enumerate(lst):\n+                if path not in order_map:\n+                    order_map[path] = {'before': set(), 'after': set()}\n+                for before_path in lst[:i]:\n+                    order_map[path]['before'].add(before_path)\n+                for after_path in lst[i + 1:]:\n+                    order_map[path]['after'].add(after_path)\n+        for path, relationships in order_map.items():\n+            conflicts = relationships['before'] & relationships['after']\n+            if conflicts:\n+                for conflict_path in conflicts:\n+                    warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (conflict_path, path), MediaOrderConflictWarning)\n+        result = []\n+        used = set()\n+        def add_path(path):\n+            if path in used:\n+                return\n+            for before_path in order_map[path]['before']:\n+                if before_path not in used:\n+                    add_path(before_path)\n+            result.append(path)\n+            used.add(path)\n+        all_paths = set(order_map.keys())\n+        while all_paths - used:\n+            path = min(all_paths - used)\n+            add_path(path)\n+        return result\n     def merge(list_1, list_2):\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n", "normalized_occurrence": 1}
