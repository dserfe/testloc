{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..4fbde5d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,18 +502,26 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n-        # If np.array(..) gives ComplexWarning, then we convert the warning\n-        # to an error. This is needed because specifying a non complex\n-        # dtype to the function converts complex to real dtype,\n-        # thereby passing the test made in the lines following the scope\n-        # of warnings context manager.\n-        with warnings.catch_warnings():\n-            try:\n-                warnings.simplefilter('error', ComplexWarning)\n-                array = np.asarray(array, dtype=dtype, order=order)\n-            except ComplexWarning:\n-                raise ValueError(\"Complex data not supported\\n\"\n-                                 \"{}\\n\".format(array))\n+        # Handle pandas DataFrame\n+        if hasattr(array, 'dtypes') and any(array.dtypes == object):\n+            array = array.astype(np.float64)\n+            if warn_on_dtype:\n+                msg = (\"Data with input dtype object was converted to float64%s.\"\n+                       % context)\n+                warnings.warn(msg, DataConversionWarning)\n+        else:\n+            # If np.array(..) gives ComplexWarning, then we convert the warning\n+            # to an error. This is needed because specifying a non complex\n+            # dtype to the function converts complex to real dtype,\n+            # thereby passing the test made in the lines following the scope\n+            # of warnings context manager.\n+            with warnings.catch_warnings():\n+                try:\n+                    warnings.simplefilter('error', ComplexWarning)\n+                    array = np.asarray(array, dtype=dtype, order=order)\n+                except ComplexWarning:\n+                    raise ValueError(\"Complex data not supported\\n\"\n+                                     \"{}\\n\".format(array))\n \n         # It is possible that the np.array(..) gave no warning. This happens\n         # when no dtype conversion happened, for example dtype = None. The\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..9fbf45a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,12 +152,18 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n-        with warnings.catch_warnings():\n-            try:\n-                warnings.simplefilter('error', ComplexWarning)\n-                array = np.asarray(array, dtype=dtype, order=order)\n-            except ComplexWarning:\n-                raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n+        if hasattr(array, 'dtypes') and any(array.dtypes == object):\n+            array = array.astype(np.float64)\n+            if warn_on_dtype:\n+                msg = 'Data with input dtype object was converted to float64%s.' % context\n+                warnings.warn(msg, DataConversionWarning)\n+        else:\n+            with warnings.catch_warnings():\n+                try:\n+                    warnings.simplefilter('error', ComplexWarning)\n+                    array = np.asarray(array, dtype=dtype, order=order)\n+                except ComplexWarning:\n+                    raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n         _ensure_no_complex_data(array)\n         if ensure_2d:\n             if array.ndim == 0:\n", "normalized_occurrence": 1}
