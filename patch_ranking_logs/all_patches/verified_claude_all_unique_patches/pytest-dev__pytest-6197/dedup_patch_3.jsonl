{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-6197", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 56dcb06..7cabafd 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -281,6 +281,12 @@ def _in_venv(path):\n \n \n def pytest_ignore_collect(path, config):\n+    # Skip __init__.py files unless they are in \"test\" directories or explicitly marked for testing\n+    if path.basename == \"__init__.py\" and not any(\n+        part.startswith(\"test\") for part in path.parts()\n+    ):\n+        return True\n+\n     ignore_paths = config._getconftest_pathlist(\"collect_ignore\", path=path.dirpath())\n     ignore_paths = ignore_paths or []\n     excludeopt = config.getoption(\"ignore\")\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 694cf6b..428f2c6 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -134,6 +134,8 @@ def _in_venv(path):\n     return any([fname.basename in activates for fname in bindir.listdir()])\n \n def pytest_ignore_collect(path, config):\n+    if path.basename == '__init__.py' and (not any((part.startswith('test') for part in path.parts()))):\n+        return True\n     ignore_paths = config._getconftest_pathlist('collect_ignore', path=path.dirpath())\n     ignore_paths = ignore_paths or []\n     excludeopt = config.getoption('ignore')\n", "normalized_occurrence": 1}
