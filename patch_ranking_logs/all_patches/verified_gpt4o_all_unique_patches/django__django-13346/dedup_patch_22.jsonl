{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..ce8f8ed 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -294,11 +294,17 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['JSON_EXTRACT(%s, %%s)'] * len(self.rhs))\n+            return '(%s IN (%s))' % (lhs, placeholders), tuple(params) + tuple(json_path for _ in self.rhs)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join([\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\"] * len(self.rhs))\n+            return \"(%s IN (%s))\" % (lhs, placeholders), tuple(params) * len(self.rhs) * 2\n         return (\n             \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n             ((lhs, json_path) * 2)\n@@ -314,6 +320,14 @@ class KeyTransform(Transform):\n             lookup = self.key_name\n         return '(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,)\n \n+    def as_sqlite(self, compiler, connection):\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['JSON_EXTRACT(%s, %%s)'] * len(self.rhs))\n+            return '(%s IN (%s))' % (lhs, placeholders), tuple(params) + tuple(json_path for _ in self.rhs)\n+        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..f2aa80e 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -202,10 +202,16 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['JSON_EXTRACT(%s, %%s)'] * len(self.rhs))\n+            return ('(%s IN (%s))' % (lhs, placeholders), tuple(params) + tuple((json_path for _ in self.rhs)))\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join([\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\"] * len(self.rhs))\n+            return ('(%s IN (%s))' % (lhs, placeholders), tuple(params) * len(self.rhs) * 2)\n         return (\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" % ((lhs, json_path) * 2), tuple(params) * 2)\n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n@@ -216,6 +222,13 @@ class KeyTransform(Transform):\n         except ValueError:\n             lookup = self.key_name\n         return ('(%s %s %%s)' % (lhs, self.postgres_operator), tuple(params) + (lookup,))\n+    def as_sqlite(self, compiler, connection):\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, list):\n+            placeholders = ', '.join(['JSON_EXTRACT(%s, %%s)'] * len(self.rhs))\n+            return ('(%s IN (%s))' % (lhs, placeholders), tuple(params) + tuple((json_path for _ in self.rhs)))\n+        return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n", "normalized_occurrence": 1}
