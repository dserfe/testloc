{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..406e739 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -443,11 +443,15 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n \n     # Convert np.NaT to np.nan\n     elif array.dtype.kind in \"mM\":\n-\n-        # Convert to specified timedelta units.\n-        if datetime_unit:\n-            array = array / np.timedelta64(1, datetime_unit)\n-        return np.where(isnull(array), np.nan, array.astype(dtype))\n+        if array.dtype.kind == \"m\":\n+            # Always convert timedelta64 through nanoseconds for consistency\n+            array = np_timedelta64_to_float(array, datetime_unit or \"ns\")\n+        else:\n+            # datetime64 case\n+            if datetime_unit:\n+                array = array / np.timedelta64(1, datetime_unit)\n+            array = np.where(isnull(array), np.nan, array.astype(dtype))\n+        return array\n \n \n def timedelta_to_numeric(value, datetime_unit=\"ns\", dtype=float):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..5ccd4ec 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -237,9 +237,13 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     if array.dtype.kind in 'O':\n         return py_timedelta_to_float(array, datetime_unit or 'ns').astype(dtype)\n     elif array.dtype.kind in 'mM':\n-        if datetime_unit:\n-            array = array / np.timedelta64(1, datetime_unit)\n-        return np.where(isnull(array), np.nan, array.astype(dtype))\n+        if array.dtype.kind == 'm':\n+            array = np_timedelta64_to_float(array, datetime_unit or 'ns')\n+        else:\n+            if datetime_unit:\n+                array = array / np.timedelta64(1, datetime_unit)\n+            array = np.where(isnull(array), np.nan, array.astype(dtype))\n+        return array\n def timedelta_to_numeric(value, datetime_unit='ns', dtype=float):\n     import datetime as dt\n     if isinstance(value, dt.timedelta):\n", "normalized_occurrence": 1}
