{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 9b658fb..ae04bb1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -654,16 +654,11 @@ class ForeignObject(RelatedField):\n         ret = []\n         opts = instance._meta\n         for field in fields:\n-            # Gotcha: in some cases (like fixture loading) a model can have\n-            # different values in parent_ptr_id and parent's id. So, use\n-            # instance.pk (that is, parent_ptr_id) when asked for instance.id.\n-            if field.primary_key:\n-                possible_parent_link = opts.get_ancestor_link(field.model)\n-                if (not possible_parent_link or\n-                        possible_parent_link.primary_key or\n-                        possible_parent_link.model._meta.abstract):\n-                    ret.append(instance.pk)\n-                    continue\n+            # Ensure primary key value is correctly propagated for related objects\n+            value = getattr(instance, field.attname)\n+            if field.primary_key and instance._state.adding and value is None:\n+                continue\n+            ret.append(value)\n             ret.append(getattr(instance, field.attname))\n         return tuple(ret)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 2261016..13038a8 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -287,11 +287,10 @@ class ForeignObject(RelatedField):\n         ret = []\n         opts = instance._meta\n         for field in fields:\n-            if field.primary_key:\n-                possible_parent_link = opts.get_ancestor_link(field.model)\n-                if not possible_parent_link or possible_parent_link.primary_key or possible_parent_link.model._meta.abstract:\n-                    ret.append(instance.pk)\n-                    continue\n+            value = getattr(instance, field.attname)\n+            if field.primary_key and instance._state.adding and (value is None):\n+                continue\n+            ret.append(value)\n             ret.append(getattr(instance, field.attname))\n         return tuple(ret)\n     def get_attname_column(self):\n", "normalized_occurrence": 1}
