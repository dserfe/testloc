{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15599", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex a9cb773..4ea630e 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -123,9 +123,10 @@ class Mod(Function):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n", "occurrence": 20, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 9ca06f6..006bafd 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -80,8 +80,10 @@ class Mod(Function):\n             both_l = non_mod_l, mod_l = ([], [])\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n-            if mod_l and all((inner.args[1] == q for inner in mod_l)):\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or (mod_l and all((inner.args[1] == q for inner in mod_l))):\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n", "normalized_occurrence": 25}
