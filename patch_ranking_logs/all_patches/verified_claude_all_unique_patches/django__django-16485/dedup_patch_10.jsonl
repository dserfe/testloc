{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16485", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex edd25c0..7fcbcd8 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -182,8 +182,12 @@ def floatformat(text, arg=-1):\n     # Set the precision high enough to avoid an exception (#15789).\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n-    units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    if m:\n+        units += -tupl[2]\n+    else:\n+        # For zero values, we still need to account for decimal places\n+        units = max(units + tupl[2], abs(tupl[2]))\n+    prec = max(abs(p) + units + 1, 1)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7f9a709..96eacf4 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -86,8 +86,11 @@ def floatformat(text, arg=-1):\n     exp = Decimal(1).scaleb(-abs(p))\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n-    units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    if m:\n+        units += -tupl[2]\n+    else:\n+        units = max(units + tupl[2], abs(tupl[2]))\n+    prec = max(abs(p) + units + 1, 1)\n     rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n     sign, digits, exponent = rounded_d.as_tuple()\n     digits = [str(digit) for digit in reversed(digits)]\n", "normalized_occurrence": 1}
