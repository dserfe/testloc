{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 30e8894..62a1bfc 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -354,6 +354,9 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n             # Not all iterables are rebuildable with their type.\n             pass\n \n+    # If it's a string, then it should be treated as a symbol.\n+    if isinstance(a, string_types):\n+        return Symbol(a)\n     # At this point we were given an arbitrary expression\n     # which does not inherit from Basic and doesn't implement\n     # _sympy_ (which is a canonical and robust way to convert\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 07522a2..b59ef1f 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -97,6 +97,8 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, eval\n             return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n         except TypeError:\n             pass\n+    if isinstance(a, string_types):\n+        return Symbol(a)\n     try:\n         from .compatibility import unicode\n         a = unicode(a)\n", "normalized_occurrence": 1}
