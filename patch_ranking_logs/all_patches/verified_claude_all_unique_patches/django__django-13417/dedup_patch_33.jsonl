{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13417", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..a768dee 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -164,12 +164,23 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self._has_group_by = False  # Track if GROUP BY is being used\n \n         # SQL-related attributes\n         # Select and related select clauses are expressions to use in the\n         # SELECT clause of the query.\n         # The select is used for cases where we want to set up the select\n         # clause to contain other than default fields (values(), subqueries...)\n+        \n+    @property\n+    def has_group_by(self):\n+        \"\"\"Return True if the query contains a GROUP BY clause.\"\"\"\n+        return self._has_group_by\n+\n+    def set_group_by(self):\n+        \"\"\"Mark query as containing GROUP BY and disable default ordering.\"\"\"\n+        self._has_group_by = True\n+        self.default_ordering = False  # GROUP BY queries aren't ordered by default\n         # Note that annotations go to annotations dictionary.\n         self.select = ()\n         self.where = where()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..8655105 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -94,6 +94,13 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self._has_group_by = False\n+    @property\n+    def has_group_by(self):\n+        return self._has_group_by\n+    def set_group_by(self):\n+        self._has_group_by = True\n+        self.default_ordering = False\n         self.select = ()\n         self.where = where()\n         self.where_class = where\n", "normalized_occurrence": 1}
