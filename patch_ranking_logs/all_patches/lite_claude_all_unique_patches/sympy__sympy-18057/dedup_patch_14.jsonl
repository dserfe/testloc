{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..41766af 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,17 +120,23 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if isinstance(other, Basic):\n+            other_expr = other\n+        else:\n+            try:\n+                # Only attempt to sympify numbers and basic types\n+                if not isinstance(other, (int, float, complex)):\n+                    return False\n+                other_expr = sympify(other)\n+            except (SympifyError, SyntaxError):\n+                return False\n+            if not isinstance(other_expr, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n-                type(self) != type(other)):\n+        if not (self.is_Number and other_expr.is_Number) and (\n+                type(self) != type(other_expr)):\n             return False\n-        a, b = self._hashable_content(), other._hashable_content()\n+        a, b = self._hashable_content(), other_expr._hashable_content()\n         if a != b:\n             return False\n         # check number *in* an expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..29d0a0c 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,15 +46,20 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if isinstance(other, Basic):\n+            other_expr = other\n+        else:\n+            try:\n+                if not isinstance(other, (int, float, complex)):\n+                    return False\n+                other_expr = sympify(other)\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n-        if not (self.is_Number and other.is_Number) and type(self) != type(other):\n+            if not isinstance(other_expr, Expr):\n+                return False\n+        if not (self.is_Number and other_expr.is_Number) and type(self) != type(other_expr):\n             return False\n-        a, b = (self._hashable_content(), other._hashable_content())\n+        a, b = (self._hashable_content(), other_expr._hashable_content())\n         if a != b:\n             return False\n         for a, b in zip(a, b):\n", "normalized_occurrence": 1}
