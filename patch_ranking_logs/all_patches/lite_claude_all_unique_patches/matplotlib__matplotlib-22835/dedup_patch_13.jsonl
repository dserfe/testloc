{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 2914fa8..dc7b606 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1301,15 +1301,20 @@ class Artist:\n             n = self.cmap.N\n             if np.ma.getmask(data):\n                 return \"[]\"\n-            normed = self.norm(data)\n-            if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n-            else:\n-                g_sig_digits = 3  # Consistent with default below.\n+            try:\n+                normed = self.norm(data)\n+                if np.isfinite(normed):\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                else:\n+                    g_sig_digits = 3  # Consistent with default below.\n+            except (ValueError, AttributeError):\n+                # For norms that are not invertible (e.g. BoundaryNorm)\n+                # or missing inverse method\n+                g_sig_digits = 3  # Use default precision\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n         else:\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a2cf16a..372347a 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -458,12 +458,15 @@ class Artist:\n             n = self.cmap.N\n             if np.ma.getmask(data):\n                 return '[]'\n-            normed = self.norm(data)\n-            if np.isfinite(normed):\n-                neighbors = self.norm.inverse((int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n-            else:\n+            try:\n+                normed = self.norm(data)\n+                if np.isfinite(normed):\n+                    neighbors = self.norm.inverse((int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                else:\n+                    g_sig_digits = 3\n+            except (ValueError, AttributeError):\n                 g_sig_digits = 3\n             return '[{:-#.{}g}]'.format(data, g_sig_digits)\n         else:\n", "normalized_occurrence": 2}
