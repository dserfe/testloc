{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 3a09d85..29e9127 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -622,7 +622,19 @@ def merge_core(\n         combine_attrs,\n     )\n \n-    return _MergeResult(variables, coord_names, dims, out_indexes, attrs)\n+    merge_result = _MergeResult(variables, coord_names, dims, out_indexes, attrs)\n+\n+    # Ensure compatibility for single-dimension variables\n+    for var in variables.values():\n+        if var.ndim == 1 and var.dims[0] in dims:\n+            dim_size = dims[var.dims[0]]\n+            if var.size != dim_size:\n+                raise MergeError(\n+                    f\"Variable '{var.name}' has size {var.size} which does not match\"\n+                    f\" the expected size {dim_size} for dimension '{var.dims[0]}'\"\n+                )\n+\n+    return merge_result\n \n \n def merge(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 0a5d6cd..0c1e114 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -433,7 +433,13 @@ def merge_core(objects: Iterable['CoercibleMapping'], compat: str='broadcast_equ\n     if ambiguous_coords:\n         raise MergeError('unable to determine if these variables should be coordinates or not in the merged result: %s' % ambiguous_coords)\n     attrs = merge_attrs([var.attrs for var in coerced if isinstance(var, Dataset) or isinstance(var, DataArray)], combine_attrs)\n-    return _MergeResult(variables, coord_names, dims, out_indexes, attrs)\n+    merge_result = _MergeResult(variables, coord_names, dims, out_indexes, attrs)\n+    for var in variables.values():\n+        if var.ndim == 1 and var.dims[0] in dims:\n+            dim_size = dims[var.dims[0]]\n+            if var.size != dim_size:\n+                raise MergeError(f\"Variable '{var.name}' has size {var.size} which does not match the expected size {dim_size} for dimension '{var.dims[0]}'\")\n+    return merge_result\n \n def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str='no_conflicts', join: str='outer', fill_value: object=dtypes.NA, combine_attrs: str='drop') -> 'Dataset':\n     \"\"\"Merge any number of xarray objects into a single Dataset as variables.\n", "normalized_occurrence": 1}
