{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..d91fc39 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,21 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        if self.value.name is None:\n+            # Combination of flags, decompose into individual flags\n+            flags = self.value._decompose()[1]  # Get the list of flags\n+            flag_expr = \" | \".join(\n+                f\"{module}.{enum_class.__qualname__}.{flag.name}\" for flag in flags\n+            )\n+            return (\n+                flag_expr,\n+                {\"import %s\" % module},\n+            )\n+        else:\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..e659087 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,12 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        if self.value.name is None:\n+            flags = self.value._decompose()[1]\n+            flag_expr = ' | '.join((f'{module}.{enum_class.__qualname__}.{flag.name}' for flag in flags))\n+            return (flag_expr, {'import %s' % module})\n+        else:\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
