{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..56659b0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1271,6 +1271,15 @@ class PythonDomain(Domain):\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n                                    self.objects[oname].objtype in objtypes]\n+                        # Prioritize current module and parent modules\n+                        if modname:\n+                            mod_parts = modname.split('.')\n+                            for i in range(len(mod_parts), 0, -1):\n+                                prefix = '.'.join(mod_parts[:i])\n+                                if prefix + '.' + name in self.objects and \\\n+                                   self.objects[prefix + '.' + name].objtype in objtypes:\n+                                    newname = prefix + '.' + name\n+                                    break\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..bd14a4d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -766,6 +766,13 @@ class PythonDomain(Domain):\n                     else:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            mod_parts = modname.split('.')\n+                            for i in range(len(mod_parts), 0, -1):\n+                                prefix = '.'.join(mod_parts[:i])\n+                                if prefix + '.' + name in self.objects and self.objects[prefix + '.' + name].objtype in objtypes:\n+                                    newname = prefix + '.' + name\n+                                    break\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
