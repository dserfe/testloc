{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 73c394e..5555269 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -235,6 +235,13 @@ class BaseEstimator:\n \n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n+\n+        def _safe_equals(a, b):\n+            \"\"\"Safely compare two values that might be numpy arrays.\"\"\"\n+            if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n+                return np.array_equal(a, b)\n+            return a == b\n \n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n@@ -242,7 +249,8 @@ class BaseEstimator:\n         # use ellipsis for sequences with a lot of elements\n         pp = _EstimatorPrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n-            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW,\n+            safe_equals=_safe_equals)\n \n         repr_ = pp.pformat(self)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 64d90d3..9582dc0 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -101,9 +101,14 @@ class BaseEstimator:\n         return self\n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n+        def _safe_equals(a, b):\n+            if isinstance(a, np.ndarray) or isinstance(b, np.ndarray):\n+                return np.array_equal(a, b)\n+            return a == b\n         N_CHAR_MAX = 700\n         N_MAX_ELEMENTS_TO_SHOW = 30\n-        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW, safe_equals=_safe_equals)\n         repr_ = pp.pformat(self)\n         if len(''.join(repr_.split())) > N_CHAR_MAX:\n             lim = N_CHAR_MAX // 2\n", "normalized_occurrence": 1}
