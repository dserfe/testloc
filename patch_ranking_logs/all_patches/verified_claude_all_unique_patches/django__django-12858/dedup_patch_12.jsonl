{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..8ec214d 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -8,6 +8,40 @@ from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n \n \n+def _check_ordering_field(field_name, model):\n+    \"\"\"\n+    Check if field_name is a valid field reference for model's ordering.\n+    field_name must be a string. Returns a list of errors.\n+    \"\"\"\n+    from django.db.models.expressions import OrderBy\n+    from django.db.models.lookups import IsNull\n+\n+    try:\n+        # Create a fake order by expression to test lookup resolution\n+        OrderBy(model._meta.get_field(field_name.replace('-', '')))\n+        return []\n+    except (LookupError, FieldError):\n+        # If the field doesn't exist directly, it might be a related lookup\n+        # or a lookup like __isnull\n+        parts = field_name.lstrip('-').split(LOOKUP_SEP)\n+        if parts[-1] == 'isnull':\n+            # Special case for __isnull lookups, which are valid for ordering\n+            try:\n+                # Try resolving the field path without the isnull part\n+                model._meta.get_field_by_name('__'.join(parts[:-1]))\n+                return []\n+            except (FieldDoesNotExist, LookupError, FieldError):\n+                pass\n+        # If we get here, the field reference is invalid\n+        return [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup '%s'.\" % field_name,\n+                obj=model,\n+                id='models.E015',\n+            )\n+        ]\n+\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n", "occurrence": 1, "normalized_patch": "--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n+def _check_ordering_field(field_name, model):\n+    from django.db.models.expressions import OrderBy\n+    from django.db.models.lookups import IsNull\n+    try:\n+        OrderBy(model._meta.get_field(field_name.replace('-', '')))\n+        return []\n+    except (LookupError, FieldError):\n+        parts = field_name.lstrip('-').split(LOOKUP_SEP)\n+        if parts[-1] == 'isnull':\n+            try:\n+                model._meta.get_field_by_name('__'.join(parts[:-1]))\n+                return []\n+            except (FieldDoesNotExist, LookupError, FieldError):\n+                pass\n+        return [Error(\"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field_name, obj=model, id='models.E015')]", "normalized_occurrence": 1}
