{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..08adeda 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1558,17 +1558,15 @@ class PairGrid(Grid):\n         if self._dropna:\n             data = data.dropna()\n \n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n-\n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n+        x = data[x_var].values\n+        y = data[y_var].values\n+        hue = kwargs.pop(\"hue\", self._hue_var)\n+        if hue is not None:\n+            hue = hue.values if isinstance(hue, pd.Series) else hue\n+\n+        kwargs.update({\n+            \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n+        })\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..fc7b86f 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -741,14 +741,12 @@ class PairGrid(Grid):\n         data = self.data[axes_vars]\n         if self._dropna:\n             data = data.dropna()\n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n-            kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n+        x = data[x_var].values\n+        y = data[y_var].values\n+        hue = kwargs.pop('hue', self._hue_var)\n+        if hue is not None:\n+            hue = hue.values if isinstance(hue, pd.Series) else hue\n+        kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n", "normalized_occurrence": 1}
