{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..c91230f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -117,15 +117,19 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n \n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n-            node += field\n+            # Avoid duplicating *args and **kwargs\n+            if name not in {'*args', '**kwargs'}:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'type ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n+                node += field\n         if not arg.get('param'):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n-            node += field\n+            # Avoid duplicating *args and **kwargs\n+            if name not in {'*args', '**kwargs'}:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'param ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n+                node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..71802de 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -87,15 +87,17 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             continue\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n-            node += field\n+            if name not in {'*args', '**kwargs'}:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'type ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n+                node += field\n         if not arg.get('param'):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n-            node += field\n+            if name not in {'*args', '**kwargs'}:\n+                field = nodes.field()\n+                field += nodes.field_name('', 'param ' + name)\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n+                node += field\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n         if annotation == 'None' and suppress_rtype:\n", "normalized_occurrence": 1}
