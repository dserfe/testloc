{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..4628669 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -429,6 +429,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n                             isinstance(d, Symbol)]\n                 for (i, d) in sym_dims:\n                     py_inferred[d] = (arg.name, i)\n+                # Ensure array arguments are included even if not in expression\n+                py_args.append(arg)\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n@@ -441,6 +443,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         np_types = {'double': 'np.double_t',\n                     'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n+        if not arg.dimensions and t == 'double':\n+            return \"double *%s\" % arg.name\n         if arg.dimensions:\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..8cf4577 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -185,6 +185,7 @@ class CythonCodeWrapper(CodeWrapper):\n                 sym_dims = [(i, d) for i, d in enumerate(dims) if isinstance(d, Symbol)]\n                 for i, d in sym_dims:\n                     py_inferred[d] = (arg.name, i)\n+                py_args.append(arg)\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n@@ -194,6 +195,8 @@ class CythonCodeWrapper(CodeWrapper):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n         t = arg.get_datatype('c')\n+        if not arg.dimensions and t == 'double':\n+            return 'double *%s' % arg.name\n         if arg.dimensions:\n             self._need_numpy = True\n             ndim = len(arg.dimensions)\n", "normalized_occurrence": 1}
