{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..bea00aa 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -881,6 +881,8 @@ class AssertionRewriter(ast.NodeVisitor):\n \n         negation = ast.UnaryOp(ast.Not(), top_condition)\n \n+        # Adjust line numbers for assertions\n+        ast.increment_lineno(assert_, assert_.lineno - assert_.test.lineno)\n         if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n             msg = self.pop_format_context(ast.Str(explanation))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..1467bc2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -464,6 +464,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.push_format_context()\n         top_condition, explanation = self.visit(assert_.test)\n         negation = ast.UnaryOp(ast.Not(), top_condition)\n+        ast.increment_lineno(assert_, assert_.lineno - assert_.test.lineno)\n         if self.enable_assertion_pass_hook:\n             msg = self.pop_format_context(ast.Str(explanation))\n             if assert_.msg:\n", "normalized_occurrence": 1}
