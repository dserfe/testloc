{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..0059552 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,29 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n+    \n+    This provides a tighter bound than the classical Mignotte bound.\n+    \"\"\"\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \n+    return K(2) * b * sum(abs(K(dup_LC(f, K))) / b * K.sqrt(K.factorial(n)/(K.factorial(i) * K.factorial(n-i))) for i in range(n+1))\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This provides a tighter bound than the classical Mignotte bound.\n+    Extended for the multivariate case.\n+    \"\"\"\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    \n+    # Apply Knuth-Cohen bound considering all variables\n+    return K(2) * b * sum(abs(K(dmp_ground_LC(f, u, K))) / b * K.sqrt(K.factorial(n)/(K.factorial(i) * K.factorial(n-i))) for i in range(n+1))\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..bb17fdd 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -39,12 +39,12 @@ def dup_zz_mignotte_bound(f, K):\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    return K(2) * b * sum((abs(K(dup_LC(f, K))) / b * K.sqrt(K.factorial(n) / (K.factorial(i) * K.factorial(n - i))) for i in range(n + 1)))\n def dmp_zz_mignotte_bound(f, u, K):\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    return K(2) * b * sum((abs(K(dmp_ground_LC(f, u, K))) / b * K.sqrt(K.factorial(n) / (K.factorial(i) * K.factorial(n - i))) for i in range(n + 1)))\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
