{"model_name_or_path": "agentless", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..b8d1589 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -117,6 +117,8 @@ class URLValidator(RegexValidator):\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:  # for example, \"Invalid IPv6 URL\"\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValueError:  # Catch ValueError and raise ValidationError\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n@@ -134,6 +136,8 @@ class URLValidator(RegexValidator):\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValueError:  # Catch ValueError and raise ValidationError\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..53c4658 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -70,6 +70,8 @@ class URLValidator(RegexValidator):\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n                 except ValueError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValueError:\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)\n                 except UnicodeError:\n@@ -86,6 +88,8 @@ class URLValidator(RegexValidator):\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n+                except ValueError:\n+                    raise ValidationError(self.message, code=self.code, params={'value': value})\n         if len(urlsplit(value).hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n", "normalized_occurrence": 2}
