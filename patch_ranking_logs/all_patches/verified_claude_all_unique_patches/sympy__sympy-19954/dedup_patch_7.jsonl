{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex eb05c35..4e6388b 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2194,18 +2194,23 @@ class PermutationGroup(Basic):\n                 # check if the system is minimal with\n                 # respect to the already discovere ones\n                 minimal = True\n-                to_remove = []\n+                to_remove_idx = []\n+                to_remove_blocks = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_idx.append(i)\n+                        to_remove_blocks.append(r)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n+                # remove non-minimal blocks in reverse order to maintain correct indices\n+                for i in sorted(to_remove_idx, reverse=True):\n+                    del num_blocks[i]\n+                    del blocks[i]\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                rep_blocks = [r for r in rep_blocks if r not in to_remove_blocks]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex 19182ce..8a4f0e6 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -837,15 +837,19 @@ class PermutationGroup(Basic):\n                 num_block, m = _number_blocks(block)\n                 rep = {j for j in range(self.degree) if num_block[j] == 0}\n                 minimal = True\n-                to_remove = []\n+                to_remove_idx = []\n+                to_remove_blocks = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove_idx.append(i)\n+                        to_remove_blocks.append(r)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         minimal = False\n                         break\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                for i in sorted(to_remove_idx, reverse=True):\n+                    del num_blocks[i]\n+                    del blocks[i]\n+                rep_blocks = [r for r in rep_blocks if r not in to_remove_blocks]\n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n                     num_blocks.append(num_block)\n", "normalized_occurrence": 1}
