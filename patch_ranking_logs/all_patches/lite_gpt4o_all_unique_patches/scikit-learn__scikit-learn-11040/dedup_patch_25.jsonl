{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..a5cca47 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,7 +107,10 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n-        self.n_neighbors = n_neighbors\n+        if n_neighbors is not None:\n+            self.n_neighbors = int(n_neighbors)\n+        else:\n+            self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -329,6 +332,8 @@ class KNeighborsMixin(object):\n             n_neighbors = self.n_neighbors\n \n         if X is not None:\n+            if n_neighbors is not None:\n+                n_neighbors = int(n_neighbors)\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..2f64b6d 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,7 +47,10 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n-        self.n_neighbors = n_neighbors\n+        if n_neighbors is not None:\n+            self.n_neighbors = int(n_neighbors)\n+        else:\n+            self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -163,6 +166,8 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n         if X is not None:\n+            if n_neighbors is not None:\n+                n_neighbors = int(n_neighbors)\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n         else:\n", "normalized_occurrence": 1}
