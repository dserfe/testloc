{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..12e20d9 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -132,9 +132,17 @@ def call_command(command_name, *args, **options):\n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n+    required_options = set()\n+    for opt in parser_actions:\n+        if opt.required and opt.dest in options:\n+            required_options.add(opt.dest)\n+        # Handle arguments that are part of a required mutually exclusive group\n+        if hasattr(opt, 'container') and hasattr(opt.container, 'required'):\n+            if opt.container.required and opt.dest in options:\n+                required_options.add(opt.dest)\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if opt.dest in required_options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..5a7beba 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,14 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    required_options = set()\n+    for opt in parser_actions:\n+        if opt.required and opt.dest in options:\n+            required_options.add(opt.dest)\n+        if hasattr(opt, 'container') and hasattr(opt.container, 'required'):\n+            if opt.container.required and opt.dest in options:\n+                required_options.add(opt.dest)\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.dest in required_options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
