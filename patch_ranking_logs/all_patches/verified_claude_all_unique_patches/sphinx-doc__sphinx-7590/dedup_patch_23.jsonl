{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..d4fae0c 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -838,6 +838,22 @@ class ASTNumberLiteral(ASTLiteral):\n         signode.append(nodes.Text(txt, txt))\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, data: str) -> None:\n+        self.data = data\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.data\n+\n+    def get_id(self, version: int) -> str:\n+        return \"L%sE\" % self.data\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        txt = str(self)\n+        signode.append(nodes.Text(txt, txt))\n+\n+\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -4682,7 +4698,28 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # handle user-defined literals\n+        pos = self.pos\n+        try:\n+            # try to parse as a number literal first\n+            num = self._parse_number()\n+            if num is None:\n+                return None\n+            # check for UDL suffix\n+            self.skip_ws()\n+            if self.current_char == '_' or self.current_char.isalpha():\n+                # gather the UDL suffix\n+                suffix = ''\n+                while self.current_char and (self.current_char.isalnum() or self.current_char == '_'):\n+                    suffix += self.current_char\n+                    self.pos += 1\n+                if suffix:\n+                    # combine the literal and suffix\n+                    return ASTUserDefinedLiteral(str(num) + suffix)\n+            # no UDL suffix found, reset position and return None\n+            self.pos = pos\n+        except DefinitionError:\n+            self.pos = pos\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..19c2fd3 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -253,6 +253,16 @@ class ASTNumberLiteral(ASTLiteral):\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         txt = str(self)\n         signode.append(nodes.Text(txt, txt))\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, data: str) -> None:\n+        self.data = data\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.data\n+    def get_id(self, version: int) -> str:\n+        return 'L%sE' % self.data\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        txt = str(self)\n+        signode.append(nodes.Text(txt, txt))\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -3074,6 +3084,22 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        try:\n+            num = self._parse_number()\n+            if num is None:\n+                return None\n+            self.skip_ws()\n+            if self.current_char == '_' or self.current_char.isalpha():\n+                suffix = ''\n+                while self.current_char and (self.current_char.isalnum() or self.current_char == '_'):\n+                    suffix += self.current_char\n+                    self.pos += 1\n+                if suffix:\n+                    return ASTUserDefinedLiteral(str(num) + suffix)\n+            self.pos = pos\n+        except DefinitionError:\n+            self.pos = pos\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
