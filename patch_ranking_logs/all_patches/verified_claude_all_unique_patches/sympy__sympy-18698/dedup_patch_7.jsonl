{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..451910a 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -317,21 +317,32 @@ def dup_sqf_list(f, K, all=False):\n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n \n+    # Initialize a dictionary to group factors by multiplicity\n+    factors_by_mult = {}\n+\n     while True:\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n         if not h:\n-            result.append((p, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dup_mul(factors_by_mult[i], p, K)\n+            else:\n+                factors_by_mult[i] = p\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dup_mul(factors_by_mult[i], g, K)\n+            else:\n+                factors_by_mult[i] = g\n \n         i += 1\n \n+    # Convert dictionary back to list format\n+    result = [(f, m) for m, f in sorted(factors_by_mult.items())]\n     return coeff, result\n \n \n@@ -405,21 +416,32 @@ def dmp_sqf_list(f, u, K, all=False):\n     h = dmp_diff(f, 1, u, K)\n     g, p, q = dmp_inner_gcd(f, h, u, K)\n \n+    # Initialize a dictionary to group factors by multiplicity\n+    factors_by_mult = {}\n+\n     while True:\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n \n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dmp_mul(factors_by_mult[i], p, u, K)\n+            else:\n+                factors_by_mult[i] = p\n             break\n \n         g, p, q = dmp_inner_gcd(p, h, u, K)\n \n         if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dmp_mul(factors_by_mult[i], g, u, K)\n+            else:\n+                factors_by_mult[i] = g\n \n         i += 1\n \n+    # Convert dictionary back to list format\n+    result = [(f, m) for m, f in sorted(factors_by_mult.items())]\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..209f7db 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -107,16 +107,24 @@ def dup_sqf_list(f, K, all=False):\n     result, i = ([], 1)\n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n+    factors_by_mult = {}\n     while True:\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n         if not h:\n-            result.append((p, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dup_mul(factors_by_mult[i], p, K)\n+            else:\n+                factors_by_mult[i] = p\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dup_mul(factors_by_mult[i], g, K)\n+            else:\n+                factors_by_mult[i] = g\n         i += 1\n+    result = [(f, m) for m, f in sorted(factors_by_mult.items())]\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n@@ -144,16 +152,24 @@ def dmp_sqf_list(f, u, K, all=False):\n     result, i = ([], 1)\n     h = dmp_diff(f, 1, u, K)\n     g, p, q = dmp_inner_gcd(f, h, u, K)\n+    factors_by_mult = {}\n     while True:\n         d = dmp_diff(p, 1, u, K)\n         h = dmp_sub(q, d, u, K)\n         if dmp_zero_p(h, u):\n-            result.append((p, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dmp_mul(factors_by_mult[i], p, u, K)\n+            else:\n+                factors_by_mult[i] = p\n             break\n         g, p, q = dmp_inner_gcd(p, h, u, K)\n         if all or dmp_degree(g, u) > 0:\n-            result.append((g, i))\n+            if i in factors_by_mult:\n+                factors_by_mult[i] = dmp_mul(factors_by_mult[i], g, u, K)\n+            else:\n+                factors_by_mult[i] = g\n         i += 1\n+    result = [(f, m) for m, f in sorted(factors_by_mult.items())]\n     return (coeff, result)\n def dmp_sqf_list_include(f, u, K, all=False):\n     if not u:\n", "normalized_occurrence": 2}
