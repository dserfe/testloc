{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..938a3a8 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,31 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set categorical locator and formatter\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                \n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+                \n+                # Add invisible artist with sticky edges to control margins\n+                if hasattr(axis, 'axes'):\n+                    dummy = axis.axes.plot([0], [0], visible=False)[0]\n+                    dummy.sticky_edges.x = [0, len(units_seed) - 1]\n+                    dummy.sticky_edges.y = [0, len(units_seed) - 1]\n+                    \n+                    # Disable grid for this axis\n+                    if axis.axis_name == 'y':\n+                        axis.axes.yaxis.grid(False)\n+                        # Invert y-axis for categorical plots\n+                        axis.axes.invert_yaxis()\n+                    else:\n+                        axis.axes.xaxis.grid(False)\n+                    \n+                    # Set margins to extend +/- 0.5 from first/last tick\n+                    axis.axes.margins(**{axis.axis_name: 0})\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..d0afe14 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,7 +90,22 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+                if hasattr(axis, 'axes'):\n+                    dummy = axis.axes.plot([0], [0], visible=False)[0]\n+                    dummy.sticky_edges.x = [0, len(units_seed) - 1]\n+                    dummy.sticky_edges.y = [0, len(units_seed) - 1]\n+                    if axis.axis_name == 'y':\n+                        axis.axes.yaxis.grid(False)\n+                        axis.axes.invert_yaxis()\n+                    else:\n+                        axis.axes.xaxis.grid(False)\n+                    axis.axes.margins(**{axis.axis_name: 0})\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n", "normalized_occurrence": 1}
