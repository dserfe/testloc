{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..97ed7fd 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1551,16 +1551,25 @@ class PairGrid(Grid):\n         else:\n             axes_vars = [x_var, y_var]\n \n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n+        hue = kwargs.pop(\"hue\", None)\n+        if hue is not None:\n+            data = self.data.copy()\n+            data['hue_temp'] = hue\n+            hue_var = 'hue_temp'\n+            axes_vars.append(hue_var)\n+        elif self._hue_var is not None and self._hue_var not in axes_vars:\n+            hue_var = self._hue_var\n+            axes_vars.append(hue_var)\n+        else:\n+            hue_var = None\n \n-        data = self.data[axes_vars]\n+        data = self.data[axes_vars] if hue_var is None else data\n         if self._dropna:\n             data = data.dropna()\n \n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n+        if hue_var is None:\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..7ad268d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -736,14 +736,23 @@ class PairGrid(Grid):\n             axes_vars = [x_var]\n         else:\n             axes_vars = [x_var, y_var]\n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n-        data = self.data[axes_vars]\n+        hue = kwargs.pop('hue', None)\n+        if hue is not None:\n+            data = self.data.copy()\n+            data['hue_temp'] = hue\n+            hue_var = 'hue_temp'\n+            axes_vars.append(hue_var)\n+        elif self._hue_var is not None and self._hue_var not in axes_vars:\n+            hue_var = self._hue_var\n+            axes_vars.append(hue_var)\n+        else:\n+            hue_var = None\n+        data = self.data[axes_vars] if hue_var is None else data\n         if self._dropna:\n             data = data.dropna()\n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n+        if hue_var is None:\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n", "normalized_occurrence": 1}
