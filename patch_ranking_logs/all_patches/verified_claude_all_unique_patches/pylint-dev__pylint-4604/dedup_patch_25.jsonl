{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..fc8109d 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2048,6 +2048,12 @@ class VariablesChecker(BaseChecker):\n                         # Most likely a typing import if it wasn't used so far.\n                         continue\n \n+                    # Check if the import is used in type comments\n+                    if any(node.type_comment and (imported_name in node.type_comment or\n+                          (as_name and as_name in node.type_comment))\n+                          for node in stmt.root().nodes_of_class(astroid.NodeNG)):\n+                        continue\n+\n                     if as_name == \"_\":\n                         continue\n                     if as_name is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..cd501ae 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -811,6 +811,8 @@ class VariablesChecker(BaseChecker):\n                         continue\n                     if is_type_annotation_import:\n                         continue\n+                    if any((node.type_comment and (imported_name in node.type_comment or (as_name and as_name in node.type_comment)) for node in stmt.root().nodes_of_class(astroid.NodeNG))):\n+                        continue\n                     if as_name == '_':\n                         continue\n                     if as_name is None:\n", "normalized_occurrence": 1}
