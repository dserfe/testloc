{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..b5700d8 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': nodes.kbd,  # Using a custom node type for kbd\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..1e2475a 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -444,18 +444,48 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n \n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n+        if isinstance(node, nodes.kbd):\n+            # Handle kbd nodes specially\n+            text = node.astext()\n+            # If it's a single keystroke that happens to be a separator char, don't split\n+            if text in ('-', '+', '^'):\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                             CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n+                self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            # For compound keystrokes, split only on separator chars that are surrounded by text\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ('-', '+', '^') and current and current[-1] != ' ':\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n+            \n             self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n+            for i, part in enumerate(parts):\n+                if part in ('-', '+', '^'):\n+                    self.body.append(part)\n+                else:\n+                    if i > 0 and parts[i-1] in ('-', '+', '^'):\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                    else:\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+            self.body.append('</kbd>')\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n \n     def depart_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n-            self.body.append('</kbd>')\n-        else:\n+        if not isinstance(node, nodes.kbd):\n             self.protect_literal_text -= 1\n             self.body.append('</code>')\n \n@@ -789,4 +819,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex ef483a8..6f08428 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -15,7 +15,7 @@ if False:\n     from typing import Type\n     from sphinx.application import Sphinx\n     from sphinx.environment import BuildEnvironment\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.kbd, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n class XRefRole(ReferenceRole):\n     nodeclass = addnodes.pending_xref\n     innernodeclass = nodes.literal\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..e7c2e7e 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -296,15 +296,39 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def depart_block_quote(self, node: Element) -> None:\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n+        if isinstance(node, nodes.kbd):\n+            text = node.astext()\n+            if text in ('-', '+', '^'):\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n+                self.body.append('</kbd>')\n+                raise nodes.SkipNode\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ('-', '+', '^') and current and (current[-1] != ' '):\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            for i, part in enumerate(parts):\n+                if part in ('-', '+', '^'):\n+                    self.body.append(part)\n+                elif i > 0 and parts[i - 1] in ('-', '+', '^'):\n+                    self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                else:\n+                    self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+            self.body.append('</kbd>')\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n     def depart_literal(self, node: Element) -> None:\n-        if 'kbd' in node['classes']:\n-            self.body.append('</kbd>')\n-        else:\n+        if not isinstance(node, nodes.kbd):\n             self.protect_literal_text -= 1\n             self.body.append('</code>')\n     def visit_productionlist(self, node: Element) -> None:\n", "normalized_occurrence": 1}
