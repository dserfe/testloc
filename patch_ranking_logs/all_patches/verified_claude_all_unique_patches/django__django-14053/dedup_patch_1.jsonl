{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..1064593 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -200,6 +200,8 @@ class HashedFilesMixin:\n \n         return converter\n \n+\n+\n     def post_process(self, paths, dry_run=False, **options):\n         \"\"\"\n         Post process the given dictionary of files (called from collectstatic).\n@@ -220,23 +222,31 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        \n+        # Keep track of which files have been yielded\n+        yielded_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n-\n-        paths = {path: paths[path] for path in adjustable_paths}\n+        \n+        # Process non-adjustable files first - these only need to be processed once\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n+            if processed and name not in yielded_files:\n+                yielded_files.add(name)\n+                yield name, hashed_name, processed\n \n+        # Now handle adjustable files that may need multiple passes\n+        adjustable_path_map = {path: paths[path] for path in adjustable_paths}\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+            for name, hashed_name, processed, subst in self._post_process(adjustable_path_map, adjustable_paths, hashed_files):\n+                if processed and name not in yielded_files:\n+                    yielded_files.add(name)\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..ce413af 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -125,14 +125,20 @@ class HashedFilesMixin:\n         if dry_run:\n             return\n         hashed_files = {}\n+        yielded_files = set()\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield (name, hashed_name, processed)\n-        paths = {path: paths[path] for path in adjustable_paths}\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n+            if processed and name not in yielded_files:\n+                yielded_files.add(name)\n+                yield (name, hashed_name, processed)\n+        adjustable_path_map = {path: paths[path] for path in adjustable_paths}\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n+            for name, hashed_name, processed, subst in self._post_process(adjustable_path_map, adjustable_paths, hashed_files):\n+                if processed and name not in yielded_files:\n+                    yielded_files.add(name)\n+                    yield (name, hashed_name, processed)\n                 substitutions = substitutions or subst\n             if not substitutions:\n                 break\n", "normalized_occurrence": 1}
