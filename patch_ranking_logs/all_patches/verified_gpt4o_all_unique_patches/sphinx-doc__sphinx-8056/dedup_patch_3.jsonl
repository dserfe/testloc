{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..08fee20 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1107,6 +1107,12 @@ class NumpyDocstring(GoogleDocstring):\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+\n+        # Handle optional parameters\n+        if \"optional\" in _type:\n+            _type = _type.replace(\"optional\", \"\").strip()\n+            _desc.append(\"(optional)\")\n+\n         return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..ee66370 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -672,6 +672,9 @@ class NumpyDocstring(GoogleDocstring):\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+        if 'optional' in _type:\n+            _type = _type.replace('optional', '').strip()\n+            _desc.append('(optional)')\n         return (_name, _type, _desc)\n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n", "normalized_occurrence": 1}
