{"model_name_or_path": "agentless", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..d1d7de6 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -58,11 +58,11 @@ class Q(tree.Node):\n         obj.add(other, conn)\n         return obj\n \n-    def __or__(self, other):\n-        return self._combine(other, self.OR)\n+    def __rand__(self, other):\n+        return self.__and__(other)\n \n-    def __and__(self, other):\n-        return self._combine(other, self.AND)\n+    def __ror__(self, other):\n+        return self.__or__(other)\n \n     def __invert__(self):\n         obj = type(self)()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..e46ebbb 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -30,10 +30,10 @@ class Q(tree.Node):\n         obj.add(self, conn)\n         obj.add(other, conn)\n         return obj\n-    def __or__(self, other):\n-        return self._combine(other, self.OR)\n-    def __and__(self, other):\n-        return self._combine(other, self.AND)\n+    def __rand__(self, other):\n+        return self.__and__(other)\n+    def __ror__(self, other):\n+        return self.__or__(other)\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n", "normalized_occurrence": 1}
