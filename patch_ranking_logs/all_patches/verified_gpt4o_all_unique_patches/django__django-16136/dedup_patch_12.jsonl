{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex ac46143..39fcdca 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -164,7 +164,7 @@ def get_exception_response(request, resolver, status_code, exception):\n         response = callback(request, exception=exception)\n     except Exception:\n         signals.got_request_exception.send(sender=None, request=request)\n-        response = handle_uncaught_exception(request, resolver, sys.exc_info())\n+        response = await sync_to_async(handle_uncaught_exception)(request, resolver, sys.exc_info())\n \n     return response\n \n", "occurrence": 3, "normalized_patch": "diff --git a/django/core/handlers/exception.py b/django/core/handlers/exception.py\nindex 1832412..98d65ac 100644\n--- a/django/core/handlers/exception.py\n+++ b/django/core/handlers/exception.py\n@@ -70,7 +70,7 @@ def get_exception_response(request, resolver, status_code, exception):\n         response = callback(request, exception=exception)\n     except Exception:\n         signals.got_request_exception.send(sender=None, request=request)\n-        response = handle_uncaught_exception(request, resolver, sys.exc_info())\n+        response = await sync_to_async(handle_uncaught_exception)(request, resolver, sys.exc_info())\n     return response\n def handle_uncaught_exception(request, resolver, exc_info):\n     if settings.DEBUG_PROPAGATE_EXCEPTIONS:\n", "normalized_occurrence": 3}
