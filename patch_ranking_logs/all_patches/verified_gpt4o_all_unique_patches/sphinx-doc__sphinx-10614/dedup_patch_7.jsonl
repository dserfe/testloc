{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10614", "model_patch": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 5f0da13..55a7194 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -407,20 +407,13 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n \n     # Create a mapping from fully-qualified class names to URLs.\n     graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()\n-    current_filename = self.builder.current_docname + self.builder.out_suffix\n     urls = {}\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n-            if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n-            else:\n-                urls[child['reftitle']] = child.get('refuri')\n+            urls[child['reftitle']] = self.builder.get_relative_uri(self.builder.current_docname, child.get('refuri'))\n         elif child.get('refid') is not None:\n-            if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n-            else:\n-                urls[child['reftitle']] = '#' + child.get('refid')\n+            urls[child['reftitle']] = self.builder.get_relative_uri(self.builder.current_docname, self.builder.current_docname) + '#' + child.get('refid')\n \n     dotcode = graph.generate_dot(name, urls, env=self.builder.env)\n     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance',\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex f0d9745..b46712a 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -193,20 +193,13 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     graph_hash = get_graph_hash(node)\n     name = 'inheritance%s' % graph_hash\n     graphviz_output_format = self.builder.env.config.graphviz_output_format.upper()\n-    current_filename = self.builder.current_docname + self.builder.out_suffix\n     urls = {}\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n-            if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + child.get('refuri')\n-            else:\n-                urls[child['reftitle']] = child.get('refuri')\n+            urls[child['reftitle']] = self.builder.get_relative_uri(self.builder.current_docname, child.get('refuri'))\n         elif child.get('refid') is not None:\n-            if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n-            else:\n-                urls[child['reftitle']] = '#' + child.get('refid')\n+            urls[child['reftitle']] = self.builder.get_relative_uri(self.builder.current_docname, self.builder.current_docname) + '#' + child.get('refid')\n     dotcode = graph.generate_dot(name, urls, env=self.builder.env)\n     render_dot_html(self, node, dotcode, {}, 'inheritance', 'inheritance', alt='Inheritance diagram of ' + node['content'])\n     raise nodes.SkipNode\n", "normalized_occurrence": 1}
