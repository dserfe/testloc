{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..e802485 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -329,7 +329,8 @@ def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars',\n             init=init[this_slice] if init is not None else None,\n             max_iter=max_iter,\n             check_input=False,\n-            positive=positive)\n+            positive=positive,\n+            max_iter=self.max_iter)\n         for this_slice in slices)\n     for this_slice, this_view in zip(slices, code_views):\n         code[this_slice] = this_view\n@@ -991,12 +992,16 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n-        self._set_sparse_coding_params(dictionary.shape[0],\n-                                       transform_algorithm,\n-                                       transform_n_nonzero_coefs,\n-                                       transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 max_iter=1000):\n+        self.max_iter = max_iter\n+        self._set_sparse_coding_params(\n+            dictionary.shape[0],\n+            transform_algorithm,\n+            transform_n_nonzero_coefs,\n+            transform_alpha, split_sign, n_jobs,\n+            positive_code, max_iter\n+        )\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..38c4e15 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -87,7 +87,7 @@ def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars', n_\n         return code\n     code = np.empty((n_samples, n_components))\n     slices = list(gen_even_slices(n_samples, effective_n_jobs(n_jobs)))\n-    code_views = Parallel(n_jobs=n_jobs, verbose=verbose)((delayed(_sparse_encode)(X[this_slice], dictionary, gram, cov[:, this_slice] if cov is not None else None, algorithm, regularization=regularization, copy_cov=copy_cov, init=init[this_slice] if init is not None else None, max_iter=max_iter, check_input=False, positive=positive) for this_slice in slices))\n+    code_views = Parallel(n_jobs=n_jobs, verbose=verbose)((delayed(_sparse_encode)(X[this_slice], dictionary, gram, cov[:, this_slice] if cov is not None else None, algorithm, regularization=regularization, copy_cov=copy_cov, init=init[this_slice] if init is not None else None, max_iter=max_iter, check_input=False, positive=positive, max_iter=self.max_iter) for this_slice in slices))\n     for this_slice, this_view in zip(slices, code_views):\n         code[this_slice] = this_view\n     return code\n@@ -284,8 +284,9 @@ class SparseCodingMixin(TransformerMixin):\n         return code\n class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = ['dictionary']\n-    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False):\n-        self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n+    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False, max_iter=1000):\n+        self.max_iter = max_iter\n+        self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code, max_iter)\n         self.components_ = dictionary\n     def fit(self, X, y=None):\n         return self\n", "normalized_occurrence": 1}
