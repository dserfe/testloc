{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 0831e79..cf3ddbf 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -233,8 +233,11 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return self._print_NaN(expr)\n \n     def _print_Mod(self, expr):\n-        PREC = precedence(expr)\n-        return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n+        if self._settings.get('modulus', False):\n+            PREC = precedence(expr)\n+            return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n+        else:\n+            return 'Mod({}, {})'.format(self._print(expr.args[0]), self._print(expr.args[1]))\n \n     def _print_Piecewise(self, expr):\n         result = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex f217d9a..bcd96ef 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -108,8 +108,11 @@ class AbstractPythonCodePrinter(CodePrinter):\n     def _print_ComplexInfinity(self, expr):\n         return self._print_NaN(expr)\n     def _print_Mod(self, expr):\n-        PREC = precedence(expr)\n-        return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n+        if self._settings.get('modulus', False):\n+            PREC = precedence(expr)\n+            return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n+        else:\n+            return 'Mod({}, {})'.format(self._print(expr.args[0]), self._print(expr.args[1]))\n     def _print_Piecewise(self, expr):\n         result = []\n         i = 0\n", "normalized_occurrence": 1}
