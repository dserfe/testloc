{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..93686ab 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1091,6 +1091,23 @@ def evaluateFalse(s: str):\n     \"\"\"\n     Replaces operators with the SymPy equivalent and sets evaluate=False.\n     \"\"\"\n+    from sympy.core.relational import Lt, Gt, Le, Ge\n+    # Map Python comparison operators to SymPy classes\n+    op_map = {\n+        '<': 'Lt',\n+        '>': 'Gt',\n+        '<=': 'Le',\n+        '>=': 'Ge'\n+    }\n+    \n+    # For relational expressions, directly construct the SymPy object\n+    for op, cls in op_map.items():\n+        if op in s:\n+            parts = s.split(op)\n+            if len(parts) == 2:\n+                return f\"{cls}({parts[0].strip()}, {parts[1].strip()}, evaluate=False)\"\n+    \n+    # For other expressions, use AST transformation\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     # node is a Module, we want an Expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..f2c859f 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -522,6 +522,13 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n             local_dict[i] = null\n         raise e from ValueError(f'Error from parse_expr with transformed code: {code!r}')\n def evaluateFalse(s: str):\n+    from sympy.core.relational import Lt, Gt, Le, Ge\n+    op_map = {'<': 'Lt', '>': 'Gt', '<=': 'Le', '>=': 'Ge'}\n+    for op, cls in op_map.items():\n+        if op in s:\n+            parts = s.split(op)\n+            if len(parts) == 2:\n+                return f'{cls}({parts[0].strip()}, {parts[1].strip()}, evaluate=False)'\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n", "normalized_occurrence": 1}
