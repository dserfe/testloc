{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..70e08da 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -892,12 +892,19 @@ class String(Token):\n     'foo'\n     >>> print(repr(f))\n     String('foo')\n+    >>> f == f.func(*f.args)  # argument invariance\n+    True\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []  # text should be included in args for reconstruction\n     is_Atom = True\n \n+    def __new__(cls, text):\n+        obj = Token.__new__(cls)\n+        obj.text = cls._construct_text(text)\n+        return obj\n+\n     @classmethod\n     def _construct_text(cls, text):\n         if not isinstance(text, str):\n@@ -907,6 +914,10 @@ class String(Token):\n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n \n+    @property\n+    def args(self):\n+        return (self.text,)\n+\n \n class QuotedString(String):\n     \"\"\" Represents a string which should be printed with quotes. \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n+    >>> f == f.func(*f.args)  # argument invariance\n+    True\n-    not_in_args = ['text']\n+    not_in_args = []\n+    def __new__(cls, text):\n+        obj = Token.__new__(cls)\n+        obj.text = cls._construct_text(text)\n+        return obj\n+\n+    @property\n+    def args(self):\n+        return (self.text,)\n+", "normalized_occurrence": 1}
