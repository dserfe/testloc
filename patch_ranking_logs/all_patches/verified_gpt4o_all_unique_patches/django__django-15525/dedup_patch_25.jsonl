{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..fea42ee 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -322,14 +322,14 @@ class DeserializedObject:\n         self.save()\n \n \n-def build_instance(Model, data, db):\n+def build_instance(Model, data, using):\n     \"\"\"\n     Build a model instance.\n \n     If the model instance doesn't have a primary key and the model supports\n     natural keys, try to retrieve it from the database.\n     \"\"\"\n-    default_manager = Model._meta.default_manager\n+    default_manager = Model._meta.default_manager.db_manager(using)\n     pk = data.get(Model._meta.pk.attname)\n     if (\n         pk is None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..50661e3 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -140,8 +140,8 @@ class DeserializedObject:\n                     raise DeserializationError.WithData(e, label, self.object.pk, field_value)\n                 setattr(self.object, field.attname, value)\n         self.save()\n-def build_instance(Model, data, db):\n-    default_manager = Model._meta.default_manager\n+def build_instance(Model, data, using):\n+    default_manager = Model._meta.default_manager.db_manager(using)\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n         natural_key = Model(**data).natural_key()\n", "normalized_occurrence": 1}
