{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..6a7f5a5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -498,7 +498,15 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # Handle XOR as (a AND NOT b) OR (NOT a AND b) to ensure correct behavior\n+        # across all databases\n+        lhs = query.query\n+        rhs = other.query\n+        combined.query.combine(\n+            rhs,\n+            sql.OR,\n+            [(lhs, True, False), (rhs, False, True)],\n+        )\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..5508974 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,9 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        lhs = query.query\n+        rhs = other.query\n+        combined.query.combine(rhs, sql.OR, [(lhs, True, False), (rhs, False, True)])\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
