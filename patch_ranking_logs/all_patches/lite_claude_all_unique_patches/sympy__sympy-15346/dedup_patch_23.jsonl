{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..a7b0417 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -499,6 +499,22 @@ def trigsimp(expr, **opts):\n         new = traverse(ex)\n         if not isinstance(new, Expr):\n             return new\n+            \n+        # Handle special case of cos(a-b) formula\n+        if isinstance(new, Add) and len(new.args) == 2:\n+            term1, term2 = new.args\n+            if (isinstance(term1, Mul) and isinstance(term2, Mul) and\n+                len(term1.args) == 2 and len(term2.args) == 2):\n+                # Check for sin(a)*sin(b) + cos(a)*cos(b) pattern\n+                if ((isinstance(term1.args[0], sin) and isinstance(term1.args[1], sin) and\n+                     isinstance(term2.args[0], cos) and isinstance(term2.args[1], cos)) or\n+                    (isinstance(term1.args[0], cos) and isinstance(term1.args[1], cos) and\n+                     isinstance(term2.args[0], sin) and isinstance(term2.args[1], sin))):\n+                    a = term1.args[0].args[0]\n+                    b = term1.args[1].args[0]\n+                    if a == term2.args[0].args[0] and b == term2.args[1].args[0]:\n+                        return cos(a - b)\n+                        \n         return trigsimp_groebner(new, **opts)\n \n     trigsimpfunc = {\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..1d43845 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -169,6 +169,14 @@ def trigsimp(expr, **opts):\n         new = traverse(ex)\n         if not isinstance(new, Expr):\n             return new\n+        if isinstance(new, Add) and len(new.args) == 2:\n+            term1, term2 = new.args\n+            if isinstance(term1, Mul) and isinstance(term2, Mul) and (len(term1.args) == 2) and (len(term2.args) == 2):\n+                if isinstance(term1.args[0], sin) and isinstance(term1.args[1], sin) and isinstance(term2.args[0], cos) and isinstance(term2.args[1], cos) or (isinstance(term1.args[0], cos) and isinstance(term1.args[1], cos) and isinstance(term2.args[0], sin) and isinstance(term2.args[1], sin)):\n+                    a = term1.args[0].args[0]\n+                    b = term1.args[1].args[0]\n+                    if a == term2.args[0].args[0] and b == term2.args[1].args[0]:\n+                        return cos(a - b)\n         return trigsimp_groebner(new, **opts)\n     trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n     return trigsimpfunc(expr)\n", "normalized_occurrence": 1}
