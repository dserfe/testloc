{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11532", "model_patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex af5ac38..e631862 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Email message and email sending related helper functions.\n \"\"\"\n@@ -14,7 +15,11 @@ class CachedDnsName:\n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n             self._fqdn = socket.getfqdn()\n-        return self._fqdn\n+        # Convert domain to IDNA/punycode for non-ASCII hostnames\n+        try:\n+            return self._fqdn.encode('idna').decode('ascii')\n+        except UnicodeError:\n+            return self._fqdn\n \n \n-DNS_NAME = CachedDnsName()\n+DNS_NAME = CachedDnsName()\n", "occurrence": 2, "normalized_patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex f3d6156..0ccc61d 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -5,5 +5,8 @@ class CachedDnsName:\n     def get_fqdn(self):\n         if not hasattr(self, '_fqdn'):\n             self._fqdn = socket.getfqdn()\n-        return self._fqdn\n+        try:\n+            return self._fqdn.encode('idna').decode('ascii')\n+        except UnicodeError:\n+            return self._fqdn\n DNS_NAME = CachedDnsName()\n\\ No newline at end of file\n", "normalized_occurrence": 5}
