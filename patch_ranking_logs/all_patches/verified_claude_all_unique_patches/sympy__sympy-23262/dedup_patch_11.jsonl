{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9dd6fe4..12f0d1b 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -1151,8 +1151,10 @@ class _EvaluatorPrinter:\n \n         str_expr = _recursive_to_string(self._exprrepr, expr)\n \n-\n-        if '\\n' in str_expr:\n+        # Special handling for single-element tuples to ensure proper syntax\n+        if isinstance(expr, tuple) and len(expr) == 1:\n+            str_expr = '({},)'.format(self._exprrepr(expr[0]))\n+        elif '\\n' in str_expr:\n             str_expr = '({})'.format(str_expr)\n         funcbody.append('return {}'.format(str_expr))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 931ff9a..8a4cc79 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -313,7 +313,9 @@ class _EvaluatorPrinter:\n             else:\n                 funcbody.append('{} = {}'.format(s, self._exprrepr(e)))\n         str_expr = _recursive_to_string(self._exprrepr, expr)\n-        if '\\n' in str_expr:\n+        if isinstance(expr, tuple) and len(expr) == 1:\n+            str_expr = '({},)'.format(self._exprrepr(expr[0]))\n+        elif '\\n' in str_expr:\n             str_expr = '({})'.format(str_expr)\n         funcbody.append('return {}'.format(str_expr))\n         funclines = [funcsig]\n", "normalized_occurrence": 1}
