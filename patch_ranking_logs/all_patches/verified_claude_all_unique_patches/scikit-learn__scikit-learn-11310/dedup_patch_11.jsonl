{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..bb075a1 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -395,6 +395,8 @@ class _CVScoreTuple (namedtuple('_CVScoreTuple',\n     # subclass so we set __slots__ to the empty tuple.\n     __slots__ = ()\n \n+    import time\n+\n     def __repr__(self):\n         \"\"\"Simple custom repr to summarize the main info\"\"\"\n         return \"mean: {0:.5f}, std: {1:.5f}, params: {2}\".format(\n@@ -764,12 +766,14 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n \n         # Store the only scorer not as a dict for single metric evaluation\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex dd929b2..76453eb 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -121,6 +121,7 @@ def _check_param_grid(param_grid):\n                 raise ValueError('Parameter values for parameter ({0}) need to be a non-empty sequence.'.format(name))\n class _CVScoreTuple(namedtuple('_CVScoreTuple', ('parameters', 'mean_validation_score', 'cv_validation_scores'))):\n     __slots__ = ()\n+    import time\n     def __repr__(self):\n         return 'mean: {0:.5f}, std: {1:.5f}, params: {2}'.format(self.mean_validation_score, np.std(self.cv_validation_scores), self.parameters)\n class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin)):\n@@ -252,11 +253,13 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n             self.best_params_ = candidate_params[self.best_index_]\n             self.best_score_ = results['mean_test_%s' % refit_metric][self.best_index_]\n         if self.refit:\n+            start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(**self.best_params_)\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n                 self.best_estimator_.fit(X, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n         self.cv_results_ = results\n         self.n_splits_ = n_splits\n", "normalized_occurrence": 2}
