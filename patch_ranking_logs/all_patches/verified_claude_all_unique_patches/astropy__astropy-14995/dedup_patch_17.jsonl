{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..40b9b48 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -513,18 +513,20 @@ class NDArithmeticMixin:\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n         # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        # If no mask handling is requested, return None\n+        if handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n+            \n+        # If operand is None (scalar operation) or has no mask, return copy of self.mask\n+        if operand is None or (operand is not None and operand.mask is None):\n+            return deepcopy(self.mask) if self.mask is not None else None\n+            \n+        # If self has no mask but operand does, return copy of operand.mask\n+        if self.mask is None:\n             return deepcopy(operand.mask)\n-        elif operand is None:\n-            return deepcopy(self.mask)\n-        else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            \n+        # Both have masks, apply the mask handling operation\n+        return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex b7eb663..8a65eb4 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -112,14 +112,13 @@ class NDArithmeticMixin:\n             axis_kwarg = dict(axis=kwds['axis']) if 'axis' in kwds else dict()\n             return self.uncertainty.propagate(operation, operand, result, correlation, **axis_kwarg)\n     def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n-        if self.mask is None and operand is not None and (operand.mask is None) or handle_mask is None:\n+        if handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n+        if operand is None or (operand is not None and operand.mask is None):\n+            return deepcopy(self.mask) if self.mask is not None else None\n+        if self.mask is None:\n             return deepcopy(operand.mask)\n-        elif operand is None:\n-            return deepcopy(self.mask)\n-        else:\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+        return handle_mask(self.mask, operand.mask, **kwds)\n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         if not compare_wcs(self.wcs, operand.wcs, **kwds):\n             raise ValueError('WCS are not equal.')\n", "normalized_occurrence": 2}
