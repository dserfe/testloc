{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 761c4b8..ed1e2d2 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -187,7 +187,15 @@ class CDS(Base):\n             if len(p) == 3:\n                 p[0] = p[2] ** -1\n             else:\n-                p[0] = p[1] / p[3]\n+                # For A/B/C, treat it as A/(B*C) to maintain CDS standard order\n+                if hasattr(p[3], 'is_division') and p[3].is_division:\n+                    p[0] = p[1] / (p[3].left * p[3].right)\n+                else:\n+                    result = p[1] / p[3]\n+                    result.is_division = True\n+                    result.left = p[1]\n+                    result.right = p[3]\n+                    p[0] = result\n \n         def p_unit_expression(p):\n             \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 829c8ad..06b4a4b 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -81,8 +81,14 @@ class CDS(Base):\n         def p_division_of_units(p):\n             if len(p) == 3:\n                 p[0] = p[2] ** (-1)\n+            elif hasattr(p[3], 'is_division') and p[3].is_division:\n+                p[0] = p[1] / (p[3].left * p[3].right)\n             else:\n-                p[0] = p[1] / p[3]\n+                result = p[1] / p[3]\n+                result.is_division = True\n+                result.left = p[1]\n+                result.right = p[3]\n+                p[0] = result\n         def p_unit_expression(p):\n             if len(p) == 2:\n                 p[0] = p[1]\n", "normalized_occurrence": 1}
