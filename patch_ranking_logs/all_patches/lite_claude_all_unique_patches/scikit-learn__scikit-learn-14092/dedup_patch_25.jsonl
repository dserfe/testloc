{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..b2c9eb8 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -971,8 +971,17 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     ValueError\n         If the parameter's value violates the given bounds.\n     \"\"\"\n+    import numbers\n \n-    if not isinstance(x, target_type):\n+    # For numeric types, check against abstract base classes\n+    if target_type == int:\n+        type_check = isinstance(x, numbers.Integral)\n+    elif target_type == float:\n+        type_check = isinstance(x, numbers.Real)\n+    else:\n+        type_check = isinstance(x, target_type)\n+\n+    if not type_check:\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n                         .format(name, target_type, type(x)))\n \n@@ -980,4 +989,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..a914d12 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,14 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    import numbers\n+    if target_type == int:\n+        type_check = isinstance(x, numbers.Integral)\n+    elif target_type == float:\n+        type_check = isinstance(x, numbers.Real)\n+    else:\n+        type_check = isinstance(x, target_type)\n+    if not type_check:\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
