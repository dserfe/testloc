{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..54a3ab1 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1072,6 +1072,21 @@ class Subquery(Expression):\n \n \n class Exists(Subquery):\n+    def __init__(self, queryset, negated=False, **kwargs):\n+        # As a performance optimization, remove ordering since EXISTS doesn't\n+        # care about it, just whether or not a row matches.\n+        queryset = queryset.order_by()\n+        # Ensure the queryset is using the correct model when negated or using OuterRef\n+        if negate:\n+            queryset.query.set_annotation_mask([])\n+        self.negated = negated\n+        super().__init__(queryset, **kwargs)\n+\n+    def as_sql(self, compiler, connection, template=None, **extra_context):\n+        sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if self.negated:\n+            sql = 'NOT {}'.format(sql)\n+        return sql, params\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..547e7c7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -654,6 +654,17 @@ class Subquery(Expression):\n             return [Ref(alias, self)]\n         return []\n class Exists(Subquery):\n+    def __init__(self, queryset, negated=False, **kwargs):\n+        queryset = queryset.order_by()\n+        if negate:\n+            queryset.query.set_annotation_mask([])\n+        self.negated = negated\n+        super().__init__(queryset, **kwargs)\n+    def as_sql(self, compiler, connection, template=None, **extra_context):\n+        sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if self.negated:\n+            sql = 'NOT {}'.format(sql)\n+        return (sql, params)\n     template = 'EXISTS(%(subquery)s)'\n     output_field = fields.BooleanField()\n     def __init__(self, queryset, negated=False, **kwargs):\n", "normalized_occurrence": 1}
