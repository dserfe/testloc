{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..8c1ba49 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -50,7 +50,9 @@ from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n from . import legend_handler\n \n \n-class DraggableLegend(DraggableOffsetBox):\n+from matplotlib.offsetbox import DraggableBase\n+\n+class DraggableLegend(DraggableOffsetBox, DraggableBase):\n     def __init__(self, legend, use_blit=False, update=\"loc\"):\n         \"\"\"\n         Wrapper around a `.Legend` to support mouse dragging.\n@@ -73,7 +75,14 @@ class DraggableLegend(DraggableOffsetBox):\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n \n-    def finalize_offset(self):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('legend', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None  # This will need to be re-initialized manually after unpickling\n         if self._update == \"loc\":\n             self._update_loc(self.get_loc_in_canvas())\n         elif self._update == \"bbox\":\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8070532..50f92f8 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -16,13 +16,20 @@ from matplotlib.transforms import BboxTransformTo, BboxTransformFrom\n from matplotlib.offsetbox import AnchoredOffsetbox, DraggableOffsetBox, HPacker, VPacker, DrawingArea, TextArea\n from matplotlib.container import ErrorbarContainer, BarContainer, StemContainer\n from . import legend_handler\n-class DraggableLegend(DraggableOffsetBox):\n+from matplotlib.offsetbox import DraggableBase\n+class DraggableLegend(DraggableOffsetBox, DraggableBase):\n     def __init__(self, legend, use_blit=False, update='loc'):\n         self.legend = legend\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n-    def finalize_offset(self):\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('legend', None)\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self.legend = None\n         if self._update == 'loc':\n             self._update_loc(self.get_loc_in_canvas())\n         elif self._update == 'bbox':\n", "normalized_occurrence": 1}
