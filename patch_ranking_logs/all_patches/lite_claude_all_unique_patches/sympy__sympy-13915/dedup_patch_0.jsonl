{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..016a4f5 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -917,9 +917,21 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                # Check if substitution would create division by zero\n+                if _aresame(old, new):\n+                    continue\n+                try:\n+                    # Try substitution\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    # Check for potential undefined expressions after substitution\n+                    if any(arg.is_zero for arg in rv.atoms() if hasattr(arg, 'is_zero')):\n+                        from sympy import nan\n+                        if any(1/arg in rv.atoms() for arg in rv.atoms() if hasattr(arg, 'is_zero')):\n+                            return nan\n+                except:\n+                    pass\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..90de660 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -326,9 +326,18 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                if _aresame(old, new):\n+                    continue\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    if any((arg.is_zero for arg in rv.atoms() if hasattr(arg, 'is_zero'))):\n+                        from sympy import nan\n+                        if any((1 / arg in rv.atoms() for arg in rv.atoms() if hasattr(arg, 'is_zero'))):\n+                            return nan\n+                except:\n+                    pass\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
