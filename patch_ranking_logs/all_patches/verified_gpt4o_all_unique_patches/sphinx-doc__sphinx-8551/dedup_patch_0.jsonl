{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..07c522b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -91,8 +91,10 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n+    # Ensure the current module context is properly used for cross-references\n     return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+                        refdomain='py', reftype=reftype, reftarget=text,\n+                        refexplicit=False, reftarget_node=None, **kwargs)\n \n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n@@ -314,7 +316,9 @@ class PyField(PyXrefMixin, Field):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Ensure the current module context is properly used for cross-references\n+        return super().make_xref(rolename, domain, target, innernode,\n+                                 contnode=contnode, env=env)\n \n \n class PyGroupedField(PyXrefMixin, GroupedField):\n@@ -329,7 +333,9 @@ class PyTypedField(PyXrefMixin, TypedField):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Ensure the current module context is properly used for cross-references\n+        return super().make_xref(rolename, domain, target, innernode,\n+                                 contnode=contnode, env=env)\n \n \n class PyObject(ObjectDescription):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..9716ccf 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -43,7 +43,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n     else:\n         kwargs = {}\n-    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, refexplicit=False, reftarget_node=None, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -209,14 +209,14 @@ class PyField(PyXrefMixin, Field):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n         if rolename == 'class' and target == 'None':\n             rolename = 'obj'\n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        return super().make_xref(rolename, domain, target, innernode, contnode=contnode, env=env)\n class PyGroupedField(PyXrefMixin, GroupedField):\n     pass\n class PyTypedField(PyXrefMixin, TypedField):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n         if rolename == 'class' and target == 'None':\n             rolename = 'obj'\n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        return super().make_xref(rolename, domain, target, innernode, contnode=contnode, env=env)\n class PyObject(ObjectDescription):\n     option_spec = {'noindex': directives.flag, 'noindexentry': directives.flag, 'module': directives.unchanged, 'annotation': directives.unchanged}\n     doc_field_types = [PyTypedField('parameter', label=_('Parameters'), names=('param', 'parameter', 'arg', 'argument', 'keyword', 'kwarg', 'kwparam'), typerolename='class', typenames=('paramtype', 'type'), can_collapse=True), PyTypedField('variable', label=_('Variables'), rolename='obj', names=('var', 'ivar', 'cvar'), typerolename='class', typenames=('vartype',), can_collapse=True), PyGroupedField('exceptions', label=_('Raises'), rolename='exc', names=('raises', 'raise', 'exception', 'except'), can_collapse=True), Field('returnvalue', label=_('Returns'), has_arg=False, names=('returns', 'return')), PyField('returntype', label=_('Return type'), has_arg=False, names=('rtype',), bodyrolename='class')]\n", "normalized_occurrence": 1}
