{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..d3c0c6a 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -580,7 +580,7 @@ class GaussianMixture(BaseMixture):\n         inference.\n     \"\"\"\n \n-    def __init__(self, n_components=1, covariance_type='full', tol=1e-3,\n+    def __init__(self, n_clusters=1, covariance_type='full', tol=1e-3,\n                  reg_covar=1e-6, max_iter=100, n_init=1, init_params='kmeans',\n                  weights_init=None, means_init=None, precisions_init=None,\n                  random_state=None, warm_start=False,\n@@ -652,6 +652,20 @@ class GaussianMixture(BaseMixture):\n         else:\n             self.precisions_cholesky_ = self.precisions_init\n \n+    def fit(self, X, y=None):\n+        \"\"\"Estimate model parameters with the EM algorithm.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        self\n+        \"\"\"\n+        self.fit_predict(X)\n+        return self\n+\n     def _m_step(self, X, log_resp):\n         \"\"\"M step.\n \n@@ -720,6 +734,21 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict the closest cluster each sample in X belongs to.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Index of the cluster each sample belongs to.\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\n+\n     def bic(self, X):\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n@@ -747,4 +776,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..34a7f6c 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -116,7 +116,7 @@ def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):\n         log_prob = np.sum(means ** 2, 1) * precisions - 2 * np.dot(X, means.T * precisions) + np.outer(row_norms(X, squared=True), precisions)\n     return -0.5 * (n_features * np.log(2 * np.pi) + log_prob) + log_det\n class GaussianMixture(BaseMixture):\n-    def __init__(self, n_components=1, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weights_init=None, means_init=None, precisions_init=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10):\n+    def __init__(self, n_clusters=1, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weights_init=None, means_init=None, precisions_init=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10):\n         super(GaussianMixture, self).__init__(n_components=n_components, tol=tol, reg_covar=reg_covar, max_iter=max_iter, n_init=n_init, init_params=init_params, random_state=random_state, warm_start=warm_start, verbose=verbose, verbose_interval=verbose_interval)\n         self.covariance_type = covariance_type\n         self.weights_init = weights_init\n@@ -147,6 +147,9 @@ class GaussianMixture(BaseMixture):\n             self.precisions_cholesky_ = linalg.cholesky(self.precisions_init, lower=True)\n         else:\n             self.precisions_cholesky_ = self.precisions_init\n+    def fit(self, X, y=None):\n+        self.fit_predict(X)\n+        return self\n     def _m_step(self, X, log_resp):\n         n_samples, _ = X.shape\n         self.weights_, self.means_, self.covariances_ = _estimate_gaussian_parameters(X, np.exp(log_resp), self.reg_covar, self.covariance_type)\n@@ -185,6 +188,9 @@ class GaussianMixture(BaseMixture):\n             cov_params = self.n_components\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.predict(X)\n     def bic(self, X):\n         return -2 * self.score(X) * X.shape[0] + self._n_parameters() * np.log(X.shape[0])\n     def aic(self, X):\n", "normalized_occurrence": 1}
