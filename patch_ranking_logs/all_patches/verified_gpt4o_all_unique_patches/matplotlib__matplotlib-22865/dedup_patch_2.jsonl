{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..0ec79ba 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -648,7 +648,13 @@ class Colorbar:\n             self.solids = self.ax.pcolormesh(\n                 X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha,\n                 edgecolors='none', shading='flat')\n-            if not self.drawedges:\n+            if self.drawedges:\n+                # Ensure that the dividers (edges) cover the entire range including extensions.\n+                if self._extend_lower():\n+                    self.dividers.set_segments([[[X[0, 0], Y[0, 0]], [X[0, 1], Y[0, 1]]]] + np.dstack([X, Y])[1:-1].tolist())\n+                if self._extend_upper():\n+                    self.dividers.set_segments(np.dstack([X, Y])[1:-1].tolist() + [[[X[-1, 0], Y[-1, 0]], [X[-1, 1], Y[-1, 1]]]])\n+            else:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n         self.dividers.set_segments(\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..f3995b3 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -259,9 +259,13 @@ class Colorbar:\n             self._add_solids_patches(X, Y, C, mappable)\n         else:\n             self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='none', shading='flat')\n-            if not self.drawedges:\n-                if len(self._y) >= self.n_rasterize:\n-                    self.solids.set_rasterized(True)\n+            if self.drawedges:\n+                if self._extend_lower():\n+                    self.dividers.set_segments([[[X[0, 0], Y[0, 0]], [X[0, 1], Y[0, 1]]]] + np.dstack([X, Y])[1:-1].tolist())\n+                if self._extend_upper():\n+                    self.dividers.set_segments(np.dstack([X, Y])[1:-1].tolist() + [[[X[-1, 0], Y[-1, 0]], [X[-1, 1], Y[-1, 1]]]])\n+            elif len(self._y) >= self.n_rasterize:\n+                self.solids.set_rasterized(True)\n         self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)\n", "normalized_occurrence": 1}
