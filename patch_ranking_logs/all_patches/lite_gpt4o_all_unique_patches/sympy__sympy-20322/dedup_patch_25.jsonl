{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20322", "model_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex cdb25ec..141b737 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -410,7 +410,7 @@ def signsimp(expr, evaluate=None):\n     return e\n \n \n-def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, **kwargs):\n+def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, evaluate=True, **kwargs):\n     \"\"\"Simplifies the given expression.\n \n     Explanation\n@@ -564,7 +564,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n         rv = e.doit() if doit else e\n         return shorter(rv, collect_abs(rv))\n \n-    expr = sympify(expr)\n+    expr = sympify(expr, evaluate=evaluate)\n     kwargs = dict(\n         ratio=kwargs.get('ratio', ratio),\n         measure=kwargs.get('measure', measure),\n@@ -599,7 +599,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n         # can be replaced with a Dummy\n         lambda x: isinstance(x, Expr) and x.args and not isinstance(\n             x, handled),\n-        lambda x: x.func(*[simplify(i, **kwargs) for i in x.args]),\n+        lambda x: x.func(*[simplify(i, evaluate=evaluate, **kwargs) for i in x.args]),\n         simultaneous=False)\n     if not isinstance(expr, handled):\n         return done(expr)\n@@ -621,7 +621,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n     expr = bottom_up(expr, lambda w: getattr(w, 'normal', lambda: w)())\n     expr = Mul(*powsimp(expr).as_content_primitive())\n     _e = cancel(expr)\n-    expr1 = shorter(_e, _mexpand(_e).cancel())  # issue 6829\n+    expr1 = shorter(_e, _mexpand(_e).cancel(), evaluate=evaluate)  # issue 6829\n     expr2 = shorter(together(expr, deep=True), together(expr1, deep=True))\n \n     if ratio is S.Infinity:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1183c05..c268799 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -158,7 +158,7 @@ def signsimp(expr, evaluate=None):\n     if evaluate:\n         e = e.xreplace({m: --m for m in e.atoms(Mul) if --m != m})\n     return e\n-def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, **kwargs):\n+def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False, doit=True, evaluate=True, **kwargs):\n     def shorter(*choices):\n         if not has_variety(choices):\n             return choices[0]\n@@ -166,7 +166,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n     def done(e):\n         rv = e.doit() if doit else e\n         return shorter(rv, collect_abs(rv))\n-    expr = sympify(expr)\n+    expr = sympify(expr, evaluate=evaluate)\n     kwargs = dict(ratio=kwargs.get('ratio', ratio), measure=kwargs.get('measure', measure), rational=kwargs.get('rational', rational), inverse=kwargs.get('inverse', inverse), doit=kwargs.get('doit', doit))\n     if isinstance(expr, Expr) and expr.is_zero:\n         return S.Zero\n@@ -181,7 +181,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n         if not expr.args:\n             return expr\n     handled = (Add, Mul, Pow, ExpBase)\n-    expr = expr.replace(lambda x: isinstance(x, Expr) and x.args and (not isinstance(x, handled)), lambda x: x.func(*[simplify(i, **kwargs) for i in x.args]), simultaneous=False)\n+    expr = expr.replace(lambda x: isinstance(x, Expr) and x.args and (not isinstance(x, handled)), lambda x: x.func(*[simplify(i, evaluate=evaluate, **kwargs) for i in x.args]), simultaneous=False)\n     if not isinstance(expr, handled):\n         return done(expr)\n     if not expr.is_commutative:\n@@ -193,7 +193,7 @@ def simplify(expr, ratio=1.7, measure=count_ops, rational=False, inverse=False,\n     expr = bottom_up(expr, lambda w: getattr(w, 'normal', lambda: w)())\n     expr = Mul(*powsimp(expr).as_content_primitive())\n     _e = cancel(expr)\n-    expr1 = shorter(_e, _mexpand(_e).cancel())\n+    expr1 = shorter(_e, _mexpand(_e).cancel(), evaluate=evaluate)\n     expr2 = shorter(together(expr, deep=True), together(expr1, deep=True))\n     if ratio is S.Infinity:\n         expr = expr2\n", "normalized_occurrence": 1}
