{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..2e323c9 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,11 +84,26 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n-        for node_name, associated_nodes in (\n+        \n+        # Get attributes from instance_attrs_type, locals_type, and properties\n+        attr_sources = (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n             + properties\n-        ):\n+        )\n+        \n+        # Add attributes from __init__ type annotations\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:  # Skip 'self'\n+                if arg.annotation:\n+                    try:\n+                        annotation_name = arg.annotation.as_string()\n+                        attr_sources.append((arg.name, [annotation_name]))\n+                    except (AttributeError, NotImplementedError):\n+                        continue\n+        \n+        for node_name, associated_nodes in attr_sources:\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..f087d0a 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,7 +57,17 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n+        attr_sources = list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:\n+                if arg.annotation:\n+                    try:\n+                        annotation_name = arg.annotation.as_string()\n+                        attr_sources.append((arg.name, [annotation_name]))\n+                    except (AttributeError, NotImplementedError):\n+                        continue\n+        for node_name, associated_nodes in attr_sources:\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n", "normalized_occurrence": 1}
