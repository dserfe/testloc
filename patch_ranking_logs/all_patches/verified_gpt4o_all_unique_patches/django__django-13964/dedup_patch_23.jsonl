{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..442b93d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -220,20 +220,14 @@ class ForwardManyToOneDescriptor:\n                     self.field.remote_field.model._meta.object_name,\n                 )\n             )\n-        elif value is not None:\n-            if instance._state.db is None:\n-                instance._state.db = router.db_for_write(instance.__class__, instance=value)\n+        if value is not None:\n             if value._state.db is None:\n                 value._state.db = router.db_for_write(value.__class__, instance=instance)\n             if not router.allow_relation(value, instance):\n                 raise ValueError('Cannot assign \"%r\": the current database router prevents this relation.' % value)\n-\n-        remote_field = self.field.remote_field\n-        # If we're setting the value of a OneToOneField to None, we need to clear\n-        # out the cache on any old related object. Otherwise, deleting the\n-        # previously-related object will also cause this object to be deleted,\n-        # which is wrong.\n-        if value is None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        else:\n             # Look up the previously-related object, which may still be available\n             # since we've not yet cleared out the related field.\n             # Use the cache directly, instead of the accessor; if we haven't\n@@ -241,21 +235,11 @@ class ForwardManyToOneDescriptor:\n             # the object to invalidate the accessor cache, so there's no\n             # need to populate the cache just to expire it again.\n             related = self.field.get_cached_value(instance, default=None)\n-\n-            # If we've got an old related object, we need to clear out its\n-            # cache. This cache also might not exist if the related object\n-            # hasn't been accessed yet.\n             if related is not None:\n                 remote_field.set_cached_value(related, None)\n-\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n \n-        # Set the values of the related field.\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n-\n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n         self.field.set_cached_value(instance, value)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..89573fa 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -68,23 +68,19 @@ class ForwardManyToOneDescriptor:\n     def __set__(self, instance, value):\n         if value is not None and (not isinstance(value, self.field.remote_field.model._meta.concrete_model)):\n             raise ValueError('Cannot assign \"%r\": \"%s.%s\" must be a \"%s\" instance.' % (value, instance._meta.object_name, self.field.name, self.field.remote_field.model._meta.object_name))\n-        elif value is not None:\n-            if instance._state.db is None:\n-                instance._state.db = router.db_for_write(instance.__class__, instance=value)\n+        if value is not None:\n             if value._state.db is None:\n                 value._state.db = router.db_for_write(value.__class__, instance=instance)\n             if not router.allow_relation(value, instance):\n                 raise ValueError('Cannot assign \"%r\": the current database router prevents this relation.' % value)\n-        remote_field = self.field.remote_field\n-        if value is None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        else:\n             related = self.field.get_cached_value(instance, default=None)\n             if related is not None:\n                 remote_field.set_cached_value(related, None)\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
