{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..4772a1b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -965,6 +965,31 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        # Special handling for `all` and `any` calls\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and len(call.args) == 1:\n+            iterable = call.args[0]\n+            if isinstance(iterable, ast.GeneratorExp):\n+                # Replace the `all` or `any` call with a for loop equivalent\n+                variable = self.variable()\n+                new_body = []\n+                new_fail_body = []\n+                self.push_format_context()\n+                for loop_var in iterable.elt.elts:\n+                    res, expl = self.visit(loop_var)\n+                    new_body.append(ast.Assign([ast.Name(variable, ast.Store())], res))\n+                    expl_format = self.pop_format_context(ast.Str(expl))\n+                    call = ast.Expr(ast.Call(\n+                        func=ast.Attribute(ast.Name(variable, ast.Load()), 'append', ast.Load()),\n+                        args=[expl_format],\n+                        keywords=[]\n+                    ))\n+                    new_fail_body.append(call)\n+                new_body.append(ast.If(\n+                    test=ast.UnaryOp(ast.Not(), ast.Name(variable, ast.Load())),\n+                    body=new_fail_body,\n+                    orelse=[]\n+                ))\n+                return new_body\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1106,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..dcd1919 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,22 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and (len(call.args) == 1):\n+            iterable = call.args[0]\n+            if isinstance(iterable, ast.GeneratorExp):\n+                variable = self.variable()\n+                new_body = []\n+                new_fail_body = []\n+                self.push_format_context()\n+                for loop_var in iterable.elt.elts:\n+                    res, expl = self.visit(loop_var)\n+                    new_body.append(ast.Assign([ast.Name(variable, ast.Store())], res))\n+                    expl_format = self.pop_format_context(ast.Str(expl))\n+                    call = ast.Expr(ast.Call(func=ast.Attribute(ast.Name(variable, ast.Load()), 'append', ast.Load()), args=[expl_format], keywords=[]))\n+                    new_fail_body.append(call)\n+                new_body.append(ast.If(test=ast.UnaryOp(ast.Not(), ast.Name(variable, ast.Load())), body=new_fail_body, orelse=[]))\n+                return new_body\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
