{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..4639a00 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -920,6 +920,24 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            # Check if the resulting expression is undefined after substitution\n+            if rv.has(S.NaN, S.ComplexInfinity, S.Infinity):\n+                from sympy.core.function import limit\n+                from sympy.core import symbols\n+\n+                # Get all symbols from the original and new expressions\n+                free_symbols = self.free_symbols.union(rv.free_symbols)\n+                dummy_symbols = symbols(' '.join(['_subs_dummy_' + str(i) for i in range(len(free_symbols))]))\n+\n+                # Create a dictionary for substitution\n+                subs_dict = dict(zip(free_symbols, dummy_symbols))\n+\n+                # Substitute symbols with dummy symbols to avoid conflicts\n+                rv = rv.xreplace(subs_dict)\n+\n+                # Limit with respect to each dummy symbol back to original symbols\n+                for dummy, symbol in reversed(list(subs_dict.items())):\n+                    rv = limit(rv, dummy, symbol)\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..3ae2ecb 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -329,6 +329,15 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            if rv.has(S.NaN, S.ComplexInfinity, S.Infinity):\n+                from sympy.core.function import limit\n+                from sympy.core import symbols\n+                free_symbols = self.free_symbols.union(rv.free_symbols)\n+                dummy_symbols = symbols(' '.join(['_subs_dummy_' + str(i) for i in range(len(free_symbols))]))\n+                subs_dict = dict(zip(free_symbols, dummy_symbols))\n+                rv = rv.xreplace(subs_dict)\n+                for dummy, symbol in reversed(list(subs_dict.items())):\n+                    rv = limit(rv, dummy, symbol)\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
