{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4075", "model_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 8119fa7..0e2eb76 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -140,7 +140,7 @@ class Weighted:\n         \"\"\" Calculate the sum of weights, accounting for missing values \"\"\"\n \n         # we need to mask data values that are nan; else the weights are wrong\n-        mask = da.notnull()\n+        mask = da.notnull() * 1  # Convert boolean mask to numeric\n \n         sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n \n", "occurrence": 3, "normalized_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 7df2f5a..4bd1e94 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -29,7 +29,7 @@ class Weighted:\n             da = da.fillna(0.0)\n         return dot(da, weights, dims=dim)\n     def _sum_of_weights(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None) -> 'DataArray':\n-        mask = da.notnull()\n+        mask = da.notnull() * 1\n         sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n         valid_weights = sum_of_weights != 0.0\n         return sum_of_weights.where(valid_weights)\n", "normalized_occurrence": 3}
