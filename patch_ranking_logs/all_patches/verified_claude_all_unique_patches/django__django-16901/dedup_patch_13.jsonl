{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..f8404b1 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -498,7 +498,24 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # Store original queries for proper XOR handling\n+        if not hasattr(combined.query, '_xor_queries'):\n+            combined.query._xor_queries = []\n+            # Add first query\n+            if hasattr(self.query, '_xor_queries'):\n+                combined.query._xor_queries.extend(self.query._xor_queries)\n+            else:\n+                combined.query._xor_queries.append(self.query)\n+        # Add other query\n+        if hasattr(other.query, '_xor_queries'):\n+            combined.query._xor_queries.extend(other.query._xor_queries)\n+        else:\n+            combined.query._xor_queries.append(other.query)\n+        # Combine all queries with XOR\n+        base = combined.query._xor_queries[0]\n+        for q in combined.query._xor_queries[1:]:\n+            base.combine(q, sql.XOR)\n+        combined.query = base\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..9147f84 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,20 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        if not hasattr(combined.query, '_xor_queries'):\n+            combined.query._xor_queries = []\n+            if hasattr(self.query, '_xor_queries'):\n+                combined.query._xor_queries.extend(self.query._xor_queries)\n+            else:\n+                combined.query._xor_queries.append(self.query)\n+        if hasattr(other.query, '_xor_queries'):\n+            combined.query._xor_queries.extend(other.query._xor_queries)\n+        else:\n+            combined.query._xor_queries.append(other.query)\n+        base = combined.query._xor_queries[0]\n+        for q in combined.query._xor_queries[1:]:\n+            base.combine(q, sql.XOR)\n+        combined.query = base\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
