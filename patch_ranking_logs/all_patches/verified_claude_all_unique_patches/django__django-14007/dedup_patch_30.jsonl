{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..acee5c8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,20 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            if len(returning_fields) == 1:\n+                field = returning_fields[0]\n+                converters = field.get_db_converters(connection)\n+                for converter in converters:\n+                    result = converter(result, None, connection)\n+            else:\n+                for i, field in enumerate(returning_fields):\n+                    converters = field.get_db_converters(connection)\n+                    for converter in converters:\n+                        result[i] = converter(result[i], None, connection)\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..dea4328 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,20 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            if len(returning_fields) == 1:\n+                field = returning_fields[0]\n+                converters = field.get_db_converters(connection)\n+                for converter in converters:\n+                    result = converter(result, None, connection)\n+            else:\n+                for i, field in enumerate(returning_fields):\n+                    converters = field.get_db_converters(connection)\n+                    for converter in converters:\n+                        result[i] = converter(result[i], None, connection)\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
