{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..559f06b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1197,6 +1197,11 @@ class QuerySet:\n             raise TypeError('Cannot change a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n+        # Clear deferred fields that are also specified in only() fields\n+        clone.query.deferred_loading = (\n+            clone.query.deferred_loading[0].difference(fields),\n+            clone.query.deferred_loading[1]\n+        )\n         return clone\n \n     def reverse(self):\n@@ -1205,6 +1210,11 @@ class QuerySet:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n+        # Clear deferred fields that are also specified in only() fields\n+        clone.query.deferred_loading = (\n+            clone.query.deferred_loading[0].difference(fields),\n+            clone.query.deferred_loading[1]\n+        )\n         return clone\n \n     def defer(self, *fields):\n@@ -1221,7 +1231,15 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            # Handle the case where both only() and defer() are used\n+            existing_only, _ = clone.query.deferred_loading\n+            new_defer = set(fields).difference(existing_only)\n+            clone.query.add_deferred_loading(new_defer)\n+        # Clear deferred fields that are also specified in only() fields\n+        clone.query.deferred_loading = (\n+            clone.query.deferred_loading[0].difference(fields),\n+            clone.query.deferred_loading[1]\n+        )\n         return clone\n \n     def only(self, *fields):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..5c4eb14 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -726,12 +726,14 @@ class QuerySet:\n             raise TypeError('Cannot change a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.add_extra(select, select_params, where, params, tables, order_by)\n+        clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields), clone.query.deferred_loading[1])\n         return clone\n     def reverse(self):\n         if self.query.is_sliced:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n+        clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields), clone.query.deferred_loading[1])\n         return clone\n     def defer(self, *fields):\n         self._not_support_combined_queries('defer')\n@@ -741,7 +743,10 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            existing_only, _ = clone.query.deferred_loading\n+            new_defer = set(fields).difference(existing_only)\n+            clone.query.add_deferred_loading(new_defer)\n+        clone.query.deferred_loading = (clone.query.deferred_loading[0].difference(fields), clone.query.deferred_loading[1])\n         return clone\n     def only(self, *fields):\n         self._not_support_combined_queries('only')\n", "normalized_occurrence": 1}
