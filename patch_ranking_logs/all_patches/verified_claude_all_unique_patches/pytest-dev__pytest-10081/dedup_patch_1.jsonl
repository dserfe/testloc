{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10081", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28c146e..097f1eb 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -310,13 +310,17 @@ class TestCaseFunction(Function):\n             # Type ignored because self acts as the TestResult, but is not actually one.\n             self._testcase(result=self)  # type: ignore[arg-type]\n         else:\n+            def _is_skipped_class(testcase: \"unittest.TestCase\") -> bool:\n+                \"\"\"Check if a TestCase class is marked as skipped.\"\"\"\n+                return bool(getattr(testcase.__class__, \"__unittest_skip__\", False))\n+\n             # When --pdb is given, we want to postpone calling tearDown() otherwise\n             # when entering the pdb prompt, tearDown() would have probably cleaned up\n             # instance variables, which makes it difficult to debug.\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n+            if self.config.getoption(\"usepdb\") and not (_is_skipped(self.obj) or _is_skipped_class(self._testcase)):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex c60e5c9..7ed208e 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -196,7 +196,9 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(result=self)\n         else:\n-            if self.config.getoption('usepdb') and (not _is_skipped(self.obj)):\n+            def _is_skipped_class(testcase: 'unittest.TestCase') -> bool:\n+                return bool(getattr(testcase.__class__, '__unittest_skip__', False))\n+            if self.config.getoption('usepdb') and (not (_is_skipped(self.obj) or _is_skipped_class(self._testcase))):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, 'tearDown', lambda *args: None)\n             setattr(self._testcase, self.name, self.obj)\n", "normalized_occurrence": 1}
