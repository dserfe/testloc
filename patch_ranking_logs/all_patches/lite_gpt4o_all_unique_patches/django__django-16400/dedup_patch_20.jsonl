{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 05a8e83..6ed7cd0 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -88,10 +88,10 @@ class MigrationExecutor:\n             }\n             for migration, _ in full_plan:\n                 if migration in applied_migrations:\n-                    migration.mutate_state(state, preserve=False)\n+                    migration.mutate_state(state, preserve=False, connection=self.connection)\n         return state\n \n-    def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False):\n+    def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False, database=None):\n         \"\"\"\n         Migrate the database up to the given targets.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 800f25e..8ed0e03 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -48,9 +48,9 @@ class MigrationExecutor:\n             applied_migrations = {self.loader.graph.nodes[key] for key in self.loader.applied_migrations if key in self.loader.graph.nodes}\n             for migration, _ in full_plan:\n                 if migration in applied_migrations:\n-                    migration.mutate_state(state, preserve=False)\n+                    migration.mutate_state(state, preserve=False, connection=self.connection)\n         return state\n-    def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False):\n+    def migrate(self, targets, plan=None, state=None, fake=False, fake_initial=False, database=None):\n         if plan == []:\n             if not self.recorder.has_table():\n                 return self._create_project_state(with_applied_migrations=False)\n", "normalized_occurrence": 1}
