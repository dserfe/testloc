{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..415dfc2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1960,8 +1960,15 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         # pull variables out of datarray\n         data_dict = {}\n+        other_levels = [name for name in idx.names if name != variable_dim]\n+        \n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Select the variable\n+            da = self.sel({variable_dim: k})\n+            # Only squeeze dimensions that aren't from the original MultiIndex\n+            dims_to_squeeze = set(da.dims) - {dim} - set(other_levels)\n+            da = da.squeeze(dim=list(dims_to_squeeze))\n+            data_dict[k] = da\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..a9e6420 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -533,8 +533,12 @@ class DataArray(AbstractArray, DataWithCoords):\n         variables = idx.levels[level_number]\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n+        other_levels = [name for name in idx.names if name != variable_dim]\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            da = self.sel({variable_dim: k})\n+            dims_to_squeeze = set(da.dims) - {dim} - set(other_levels)\n+            da = da.squeeze(dim=list(dims_to_squeeze))\n+            data_dict[k] = da\n         return Dataset(data_dict)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n", "normalized_occurrence": 1}
