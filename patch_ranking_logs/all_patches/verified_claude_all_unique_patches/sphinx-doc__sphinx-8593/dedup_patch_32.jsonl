{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..d5a7660 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1862,6 +1862,24 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     option_spec[\"annotation\"] = annotation_option\n     option_spec[\"no-value\"] = bool_option\n \n+    def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n+        if self.object is UNINITIALIZED_ATTR:\n+            return []\n+        tab_width = self.directive.state.document.settings.tab_width\n+        docstring = getdoc(self.object, self.get_attr, tab_width)\n+        if docstring:\n+            return [prepare_docstring(docstring, ignore)]\n+        return []\n+\n+    def skip_member(self, member: Any, membername: str, isattr: bool) -> bool:\n+        doc = self.get_doc()\n+        if doc and doc[0]:\n+            # Look for :meta public: in docstring\n+            for line in doc[0]:\n+                if ':meta public:' in line:\n+                    return False\n+        return super().skip_member(member, membername, isattr)\n+\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n+    def get_doc(self, encoding: str=None, ignore: int=None) -> Optional[List[List[str]]]:\n+        if self.object is UNINITIALIZED_ATTR:\n+            return []\n+        tab_width = self.directive.state.document.settings.tab_width\n+        docstring = getdoc(self.object, self.get_attr, tab_width)\n+        if docstring:\n+            return [prepare_docstring(docstring, ignore)]\n+        return []\n+    def skip_member(self, member: Any, membername: str, isattr: bool) -> bool:\n+        doc = self.get_doc()\n+        if doc and doc[0]:\n+            for line in doc[0]:\n+                if ':meta public:' in line:\n+                    return False\n+        return super().skip_member(member, membername, isattr)", "normalized_occurrence": 1}
