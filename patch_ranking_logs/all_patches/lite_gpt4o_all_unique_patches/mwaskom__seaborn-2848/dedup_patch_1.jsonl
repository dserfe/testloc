{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..07f6d55 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1330,6 +1330,12 @@ class PairGrid(Grid):\n         \"\"\"\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        if \"hue\" in kwargs and isinstance(kwargs[\"hue\"], pd.Series):\n+            self._hue_var = kwargs[\"hue\"].name\n+            self.hue_vals = kwargs[\"hue\"]\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n+        \n         self._map_bivariate(func, indices, **kwargs)\n \n         return self\n@@ -1346,6 +1352,12 @@ class PairGrid(Grid):\n \n         \"\"\"\n         indices = zip(*np.tril_indices_from(self.axes, -1))\n+        if \"hue\" in kwargs and isinstance(kwargs[\"hue\"], pd.Series):\n+            self._hue_var = kwargs[\"hue\"].name\n+            self.hue_vals = kwargs[\"hue\"]\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n+        \n         self._map_bivariate(func, indices, **kwargs)\n         return self\n \n@@ -1361,6 +1373,12 @@ class PairGrid(Grid):\n \n         \"\"\"\n         indices = zip(*np.triu_indices_from(self.axes, 1))\n+        if \"hue\" in kwargs and isinstance(kwargs[\"hue\"], pd.Series):\n+            self._hue_var = kwargs[\"hue\"].name\n+            self.hue_vals = kwargs[\"hue\"]\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n+        \n         self._map_bivariate(func, indices, **kwargs)\n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..7b8df13 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -607,14 +607,29 @@ class PairGrid(Grid):\n     def map(self, func, **kwargs):\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):\n+            self._hue_var = kwargs['hue'].name\n+            self.hue_vals = kwargs['hue']\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_lower(self, func, **kwargs):\n         indices = zip(*np.tril_indices_from(self.axes, -1))\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):\n+            self._hue_var = kwargs['hue'].name\n+            self.hue_vals = kwargs['hue']\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_upper(self, func, **kwargs):\n         indices = zip(*np.triu_indices_from(self.axes, 1))\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):\n+            self._hue_var = kwargs['hue'].name\n+            self.hue_vals = kwargs['hue']\n+            self.hue_names = categorical_order(self.hue_vals)\n+            self.palette = self._get_palette(self.data, self._hue_var, self.hue_names, self._orig_palette)\n         self._map_bivariate(func, indices, **kwargs)\n         return self\n     def map_offdiag(self, func, **kwargs):\n", "normalized_occurrence": 1}
