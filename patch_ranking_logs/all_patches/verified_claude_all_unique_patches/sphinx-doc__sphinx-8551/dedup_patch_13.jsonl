{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..52be003 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1266,11 +1266,31 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - first try current module\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            # First search in current module\n+                            current_mod_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                                 if oname.endswith(searchname) and\n+                                                 oname.startswith(modname + '.') and\n+                                                 self.objects[oname].objtype in objtypes]\n+                            if current_mod_matches:\n+                                matches = current_mod_matches\n+                            else:\n+                                # If no matches in current module, search parent modules\n+                                parent_mod = modname\n+                                while '.' in parent_mod and not matches:\n+                                    parent_mod = parent_mod.rsplit('.', 1)[0]\n+                                    matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                             if oname.endswith(searchname) and\n+                                             oname.startswith(parent_mod + '.') and\n+                                             self.objects[oname].objtype in objtypes]\n+                        \n+                        # If still no matches, fallback to global search\n+                        if not matches:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..15d560b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -765,7 +765,17 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            current_mod_matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and oname.startswith(modname + '.') and (self.objects[oname].objtype in objtypes)]\n+                            if current_mod_matches:\n+                                matches = current_mod_matches\n+                            else:\n+                                parent_mod = modname\n+                                while '.' in parent_mod and (not matches):\n+                                    parent_mod = parent_mod.rsplit('.', 1)[0]\n+                                    matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and oname.startswith(parent_mod + '.') and (self.objects[oname].objtype in objtypes)]\n+                        if not matches:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
