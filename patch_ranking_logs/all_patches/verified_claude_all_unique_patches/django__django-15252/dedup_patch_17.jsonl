{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..fb98108 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,3 +1,4 @@\n+\n from django.apps.registry import Apps\n from django.db import DatabaseError, models\n from django.utils.functional import classproperty\n@@ -62,6 +63,9 @@ class MigrationRecorder:\n         # in the codebase.\n         if self.has_table():\n             return\n+        # Check if we're allowed to create the migrations table on this database\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n@@ -74,6 +78,8 @@ class MigrationRecorder:\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -83,14 +89,18 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..537a1c7 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -32,20 +32,28 @@ class MigrationRecorder:\n     def ensure_schema(self):\n         if self.has_table():\n             return\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         try:\n             with self.connection.schema_editor() as editor:\n                 editor.create_model(self.Migration)\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n     def applied_migrations(self):\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return {}\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n             return {}\n     def record_applied(self, app, name):\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n     def record_unapplied(self, app, name):\n+        if not self.connection.allow_migrate_model(self.Migration):\n+            return\n         self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n     def flush(self):\n", "normalized_occurrence": 1}
