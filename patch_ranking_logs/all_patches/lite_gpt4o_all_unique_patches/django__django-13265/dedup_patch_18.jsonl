{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..bdcecf4 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1012,7 +1012,7 @@ class MigrationAutodetector:\n                 }\n             })\n \n-    def generate_added_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n                 self.add_operation(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..4b5f81e 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -492,7 +492,7 @@ class MigrationAutodetector:\n             add_idx = [idx for idx in new_indexes if idx not in old_indexes]\n             rem_idx = [idx for idx in old_indexes if idx not in new_indexes]\n             self.altered_indexes.update({(app_label, model_name): {'added_indexes': add_idx, 'removed_indexes': rem_idx}})\n-    def generate_added_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n                 self.add_operation(app_label, operations.AddIndex(model_name=model_name, index=index))\n", "normalized_occurrence": 1}
