{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..287d301 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,17 +3174,29 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # save draggable legend state\n+        state['_draggable_legends'] = [(legend._draggable is not None) for legend in self.legends]\n         return state\n \n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n \n+        from matplotlib import _api\n         if version != mpl.__version__:\n             _api.warn_external(\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n \n+        super().__setstate__(state)\n+\n+        # restore draggable legend state\n+        for legend, draggable in zip(self.legends, state.get('_draggable_legends', [])):\n+            legend.set_draggable(draggable)\n+            _api.warn_external(\n+                f\"This figure was saved with matplotlib version {version} and \"\n+                f\"is unlikely to function correctly.\")\n+\n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..cbf4e54 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,12 +951,18 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_draggable_legends'] = [legend._draggable is not None for legend in self.legends]\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n+        from matplotlib import _api\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n+        super().__setstate__(state)\n+        for legend, draggable in zip(self.legends, state.get('_draggable_legends', [])):\n+            legend.set_draggable(draggable)\n+            _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n         FigureCanvasBase(self)\n         if restore_to_pylab:\n", "normalized_occurrence": 1}
