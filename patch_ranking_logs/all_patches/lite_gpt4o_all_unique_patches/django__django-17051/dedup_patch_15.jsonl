{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..b0bd6b6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1761,7 +1761,7 @@ class SQLInsertCompiler(SQLCompiler):\n         # necessary and it should be possible to use placeholders and\n         # expressions in bulk inserts too.\n         can_bulk = (\n-            not self.returning_fields and self.connection.features.has_bulk_insert\n+            not self.returning_fields and self.connection.features.has_bulk_insert and self.query.on_conflict != OnConflict.UPDATE\n         )\n \n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..a28a845 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -872,7 +872,7 @@ class SQLInsertCompiler(SQLCompiler):\n         else:\n             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]\n             fields = [None]\n-        can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert\n+        can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert and (self.query.on_conflict != OnConflict.UPDATE)\n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(fields, self.query.on_conflict, (f.column for f in self.query.update_fields), (f.column for f in self.query.unique_fields))\n         if self.returning_fields and self.connection.features.can_return_columns_from_insert:\n", "normalized_occurrence": 1}
