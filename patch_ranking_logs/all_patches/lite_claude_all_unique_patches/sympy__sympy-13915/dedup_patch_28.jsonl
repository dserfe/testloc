{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 30870a1..e19c1aa 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1848,7 +1848,9 @@ class Subs(Expr):\n     def __eq__(self, other):\n         if not isinstance(other, Subs):\n             return False\n-        return self._expr == other._expr\n+        return (self._expr == other._expr and\n+                tuple(self.variables) == tuple(other.variables) and\n+                tuple(self.point) == tuple(other.point))\n \n     def __ne__(self, other):\n         return not(self == other)\n@@ -1857,7 +1859,9 @@ class Subs(Expr):\n         return super(Subs, self).__hash__()\n \n     def _hashable_content(self):\n-        return (self._expr.xreplace(self.canonical_variables),)\n+        return (self._expr.xreplace(self.canonical_variables),\n+                tuple(self.variables),\n+                tuple(self.point))\n \n     def _eval_subs(self, old, new):\n         if old in self.variables:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 209c1c6..0407d1e 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -758,13 +758,13 @@ class Subs(Expr):\n     def __eq__(self, other):\n         if not isinstance(other, Subs):\n             return False\n-        return self._expr == other._expr\n+        return self._expr == other._expr and tuple(self.variables) == tuple(other.variables) and (tuple(self.point) == tuple(other.point))\n     def __ne__(self, other):\n         return not self == other\n     def __hash__(self):\n         return super(Subs, self).__hash__()\n     def _hashable_content(self):\n-        return (self._expr.xreplace(self.canonical_variables),)\n+        return (self._expr.xreplace(self.canonical_variables), tuple(self.variables), tuple(self.point))\n     def _eval_subs(self, old, new):\n         if old in self.variables:\n             if old in self.point:\n", "normalized_occurrence": 1}
