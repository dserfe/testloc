{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..e038644 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -473,9 +473,13 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_query = ' {} '.format(combinator_sql).join('({})'.format(sql) for sql, args in parts)\n+        if self.query.distinct:\n+            distinct_fields = self.get_distinct()\n+            distinct_sql = \"SELECT DISTINCT ON ({}) * FROM ({})\".format(\", \".join(distinct_fields), combined_query)\n+            result = [distinct_sql]\n+        else:\n+            result = [combined_query]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..aca49e8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,9 +265,13 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_query = ' {} '.format(combinator_sql).join(('({})'.format(sql) for sql, args in parts))\n+        if self.query.distinct:\n+            distinct_fields = self.get_distinct()\n+            distinct_sql = 'SELECT DISTINCT ON ({}) * FROM ({})'.format(', '.join(distinct_fields), combined_query)\n+            result = [distinct_sql]\n+        else:\n+            result = [combined_query]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "normalized_occurrence": 1}
