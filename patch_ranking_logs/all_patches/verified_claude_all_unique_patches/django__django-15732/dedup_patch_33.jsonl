{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..abd5932 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -606,6 +606,31 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            # Get the old and new unique_together values\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # Convert to sets for comparison\n+            old_constraints = {tuple(sorted(fields)) for fields in old_value}\n+            new_constraints = {tuple(sorted(fields)) for fields in new_value}\n+            \n+            # Only process constraints that are being removed\n+            to_remove = old_constraints - new_constraints\n+            \n+            # For single-field unique constraints that are being removed,\n+            # check if the field has its own unique constraint before removing\n+            for constraint in to_remove:\n+                if len(constraint) == 1:\n+                    field = new_model._meta.get_field(constraint[0])\n+                    # Skip if field has its own unique constraint\n+                    if field.unique or field.primary_key:\n+                        continue\n+                schema_editor._delete_unique_together(old_model, constraint)\n+\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            old_constraints = {tuple(sorted(fields)) for fields in old_value}\n+            new_constraints = {tuple(sorted(fields)) for fields in new_value}\n+            to_remove = old_constraints - new_constraints\n+            for constraint in to_remove:\n+                if len(constraint) == 1:\n+                    field = new_model._meta.get_field(constraint[0])\n+                    if field.unique or field.primary_key:\n+                        continue\n+                schema_editor._delete_unique_together(old_model, constraint)", "normalized_occurrence": 1}
