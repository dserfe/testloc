{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..76bc398 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -838,6 +838,24 @@ class ASTNumberLiteral(ASTLiteral):\n         signode.append(nodes.Text(txt, txt))\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: ASTLiteral, suffix: str) -> None:\n+        self.literal = literal\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return str(self.literal) + self.suffix\n+\n+    def get_id(self, version: int) -> str:\n+        return self.literal.get_id(version) + \"u\" + self.suffix + \"E\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        self.literal.describe_signature(signode, mode, env, symbol)\n+        txt = self.suffix\n+        signode.append(nodes.Text(txt, txt))\n+\n+\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -4682,8 +4700,17 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # check for user-defined literal suffix\n+        pos = self.pos\n+        self.skip_ws()\n+        if self.skip_word_chars():\n+            # we have a user-defined literal\n+            suffix = self.definition[pos:self.pos]\n+            # handle both numeric and string literals\n+            if last:\n+                return ASTUserDefinedLiteral(last, suffix)\n+        self.pos = pos  # reset position if we didn't find a UDL suffix\n+        return last\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..d16ab4b 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -253,6 +253,18 @@ class ASTNumberLiteral(ASTLiteral):\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         txt = str(self)\n         signode.append(nodes.Text(txt, txt))\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: ASTLiteral, suffix: str) -> None:\n+        self.literal = literal\n+        self.suffix = suffix\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return str(self.literal) + self.suffix\n+    def get_id(self, version: int) -> str:\n+        return self.literal.get_id(version) + 'u' + self.suffix + 'E'\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        self.literal.describe_signature(signode, mode, env, symbol)\n+        txt = self.suffix\n+        signode.append(nodes.Text(txt, txt))\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -3074,7 +3086,14 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n-        return None\n+        pos = self.pos\n+        self.skip_ws()\n+        if self.skip_word_chars():\n+            suffix = self.definition[pos:self.pos]\n+            if last:\n+                return ASTUserDefinedLiteral(last, suffix)\n+        self.pos = pos\n+        return last\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
