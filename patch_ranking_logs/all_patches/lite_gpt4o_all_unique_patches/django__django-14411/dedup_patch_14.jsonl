{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..45a9763 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -317,13 +317,16 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     \"\"\"\n     attr = None\n     try:\n-        field = _get_non_gfk_field(model._meta, name)\n-        try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            # field is likely a ForeignObjectRel\n-            label = field.related_model._meta.verbose_name\n-    except FieldDoesNotExist:\n+        if name == 'password' and isinstance(form.fields[name].widget, ReadOnlyPasswordHashWidget):\n+            label = form.fields[name].label\n+        else:\n+            field = _get_non_gfk_field(model._meta, name)\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                # field is likely a ForeignObjectRel\n+                label = field.related_model._meta.verbose_name\n+    except (FieldDoesNotExist, KeyError):\n         if name == \"__str__\":\n             label = str(model._meta.verbose_name)\n             attr = str\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..e27495b 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -181,12 +181,15 @@ def _get_non_gfk_field(opts, name):\n def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n     attr = None\n     try:\n-        field = _get_non_gfk_field(model._meta, name)\n-        try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            label = field.related_model._meta.verbose_name\n-    except FieldDoesNotExist:\n+        if name == 'password' and isinstance(form.fields[name].widget, ReadOnlyPasswordHashWidget):\n+            label = form.fields[name].label\n+        else:\n+            field = _get_non_gfk_field(model._meta, name)\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                label = field.related_model._meta.verbose_name\n+    except (FieldDoesNotExist, KeyError):\n         if name == '__str__':\n             label = str(model._meta.verbose_name)\n             attr = str\n", "normalized_occurrence": 1}
