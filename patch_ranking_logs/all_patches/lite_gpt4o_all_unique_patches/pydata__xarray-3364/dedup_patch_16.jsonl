{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..6104e31 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -16,9 +17,15 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing_vars=False,\n+    ignore_missing_vars=False,\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n+    ignore_missing_vars : bool, optional\n+        If True, variables that are missing in some datasets will be ignored and filled\n+        with `fill_value`. Default is False.\n+\n     Parameters\n     ----------\n     objs : sequence of Dataset and DataArray objects\n@@ -128,7 +135,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing_vars)\n \n \n def _calc_concat_dim_coord(dim):\n@@ -269,6 +276,7 @@ def _dataset_concat(\n     positions,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing_vars=False,\n ):\n     \"\"\"\n     Concatenate a sequence of datasets along a new or existing dimension\n@@ -314,10 +322,14 @@ def _dataset_concat(\n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n             if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n+                if ignore_missing_vars:\n+                    for var in absent_merge_vars:\n+                        to_merge[var].append(Variable(datasets[0].variables[var].dims, fill_value))\n+                else:\n+                    raise ValueError(\n+                        \"variables %r are present in some datasets but not others. \"\n+                        % absent_merge_vars\n+                    )\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..86b5c61 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -4,7 +4,7 @@ from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n from .variable import IndexVariable, Variable, as_variable\n from .variable import concat as concat_vars\n-def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer'):\n+def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer', ignore_missing_vars=False, ignore_missing_vars=False):\n     from .dataset import Dataset\n     from .dataarray import DataArray\n     try:\n@@ -19,7 +19,7 @@ def concat(objs, dim, data_vars='all', coords='different', compat='equals', posi\n         f = _dataset_concat\n     else:\n         raise TypeError('can only concatenate xarray Dataset and DataArray objects, got %s' % type(first_obj))\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing_vars)\n def _calc_concat_dim_coord(dim):\n     from .dataarray import DataArray\n     if isinstance(dim, str):\n@@ -105,7 +105,7 @@ def _parse_datasets(datasets):\n                 dim_coords[dim] = ds.coords[dim].variable\n         dims = dims | set(ds.dims)\n     return (dim_coords, dims_sizes, all_coord_names, data_vars)\n-def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_value=dtypes.NA, join='outer'):\n+def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_value=dtypes.NA, join='outer', ignore_missing_vars=False):\n     from .dataset import Dataset\n     dim, coord = _calc_concat_dim_coord(dim)\n     datasets = [ds.copy() for ds in datasets]\n@@ -128,7 +128,11 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n             if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n+                if ignore_missing_vars:\n+                    for var in absent_merge_vars:\n+                        to_merge[var].append(Variable(datasets[0].variables[var].dims, fill_value))\n+                else:\n+                    raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n         for var in variables_to_merge:\n", "normalized_occurrence": 1}
