{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..76b22c4 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -57,7 +57,8 @@ class BlockMatrix(MatrixExpr):\n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n+            if M[i, 0].shape[0] > numrows:\n+                numrows = M[i, 0].shape[0]\n         for i in range(M.shape[1]):\n             numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..505b087 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -27,7 +27,8 @@ class BlockMatrix(MatrixExpr):\n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n+            if M[i, 0].shape[0] > numrows:\n+                numrows = M[i, 0].shape[0]\n         for i in range(M.shape[1]):\n             numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n", "normalized_occurrence": 1}
