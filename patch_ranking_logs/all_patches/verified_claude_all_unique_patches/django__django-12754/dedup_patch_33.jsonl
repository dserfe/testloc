{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12754", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 12ebcde..f75c39f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -381,6 +381,14 @@ class MigrationAutodetector:\n             return (\n                 isinstance(operation, operations.CreateModel) and\n                 operation.name_lower == dependency[1].lower()\n+            ) or (\n+                # CreateModel depends on field removal if inheriting from the old parent\n+                isinstance(operation, operations.CreateModel) and\n+                any(\n+                    isinstance(b, str) and \n+                    b.split('.')[-1].lower() == dependency[1].lower()\n+                    for b in operation.bases\n+                )\n             )\n         # Created field\n         elif dependency[2] is not None and dependency[3] is True:\n@@ -1326,4 +1334,4 @@ class MigrationAutodetector:\n         match = re.match(r'^\\d+', name)\n         if match:\n             return int(match[0])\n-        return None\n+        return None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex f799cd9..c6de69b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -209,7 +209,7 @@ class MigrationAutodetector:\n                 migration.operations = MigrationOptimizer().optimize(migration.operations, app_label)\n     def check_dependency(self, operation, dependency):\n         if dependency[2] is None and dependency[3] is True:\n-            return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower()\n+            return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower() or (isinstance(operation, operations.CreateModel) and any((isinstance(b, str) and b.split('.')[-1].lower() == dependency[1].lower() for b in operation.bases)))\n         elif dependency[2] is not None and dependency[3] is True:\n             return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower() and any((dependency[2] == x for x, y in operation.fields)) or (isinstance(operation, operations.AddField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower()))\n         elif dependency[2] is not None and dependency[3] is False:\n", "normalized_occurrence": 1}
