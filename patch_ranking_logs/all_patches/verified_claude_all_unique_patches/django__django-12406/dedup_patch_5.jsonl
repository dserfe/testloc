{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12406", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 3670478..5b78bff 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1185,7 +1185,7 @@ class ModelChoiceField(ChoiceField):\n                  required=True, widget=None, label=None, initial=None,\n                  help_text='', to_field_name=None, limit_choices_to=None,\n                  **kwargs):\n-        if required and (initial is not None):\n+        if required and (isinstance(widget, RadioSelect) or initial is not None):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7c6133f..b4a8106 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -613,7 +613,7 @@ class ModelChoiceField(ChoiceField):\n     default_error_messages = {'invalid_choice': _('Select a valid choice. That choice is not one of the available choices.')}\n     iterator = ModelChoiceIterator\n     def __init__(self, queryset, *, empty_label='---------', required=True, widget=None, label=None, initial=None, help_text='', to_field_name=None, limit_choices_to=None, **kwargs):\n-        if required and initial is not None:\n+        if required and (isinstance(widget, RadioSelect) or initial is not None):\n             self.empty_label = None\n         else:\n             self.empty_label = empty_label\n", "normalized_occurrence": 1}
