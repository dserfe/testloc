{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..edd5914 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,6 +45,14 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle functools.partial\n+        if isinstance(func, functools.partial):\n+            partial_func = func\n+            func = partial_func.func\n+            # Store partial args/kwargs for repr\n+            self._partial_args = partial_func.args\n+            self._partial_kwargs = partial_func.keywords or {}\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -52,6 +60,15 @@ class ResolverMatch:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n \n+        # Append partial info if present\n+        if hasattr(self, '_partial_args') or hasattr(self, '_partial_kwargs'):\n+            partial_info = []\n+            if self._partial_args:\n+                partial_info.append(f\"args={self._partial_args}\")\n+            if self._partial_kwargs:\n+                partial_info.append(f\"kwargs={self._partial_kwargs}\")\n+            self._func_path = f\"{self._func_path}(partial: {', '.join(partial_info)})\"\n+\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..b3c919f 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,10 +29,22 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            partial_func = func\n+            func = partial_func.func\n+            self._partial_args = partial_func.args\n+            self._partial_kwargs = partial_func.keywords or {}\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n+        if hasattr(self, '_partial_args') or hasattr(self, '_partial_kwargs'):\n+            partial_info = []\n+            if self._partial_args:\n+                partial_info.append(f'args={self._partial_args}')\n+            if self._partial_kwargs:\n+                partial_info.append(f'kwargs={self._partial_kwargs}')\n+            self._func_path = f\"{self._func_path}(partial: {', '.join(partial_info)})\"\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n", "normalized_occurrence": 1}
