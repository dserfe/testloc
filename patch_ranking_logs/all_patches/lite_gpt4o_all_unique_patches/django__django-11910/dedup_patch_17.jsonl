{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 0aa71a3..7643fc1 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -344,14 +344,14 @@ class RenameField(FieldOperation):\n                         remote_field.model, model_app_label, model_name\n                     )\n                     if remote_model_tuple == model_tuple:\n+                        # Update field_name and to_fields for remote fields pointing to the old field name\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n-                        to_fields = getattr(field, 'to_fields', None)\n-                        if to_fields:\n-                            field.to_fields = tuple([\n-                                self.new_name if to_field_name == self.old_name else to_field_name\n-                                for to_field_name in to_fields\n-                            ])\n+                            if field.to_fields:\n+                                field.to_fields = tuple([\n+                                    self.new_name if to_field_name == self.old_name else to_field_name\n+                                    for to_field_name in field.to_fields\n+                                ])\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex b2b87fe..a7703ba 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -199,9 +199,8 @@ class RenameField(FieldOperation):\n                     if remote_model_tuple == model_tuple:\n                         if getattr(remote_field, 'field_name', None) == self.old_name:\n                             remote_field.field_name = self.new_name\n-                        to_fields = getattr(field, 'to_fields', None)\n-                        if to_fields:\n-                            field.to_fields = tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields])\n+                            if field.to_fields:\n+                                field.to_fields = tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in field.to_fields])\n         state.reload_model(app_label, self.model_name_lower, delay=delay)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n", "normalized_occurrence": 1}
