{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..ae01e52 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -58,8 +58,9 @@ class BlockMatrix(MatrixExpr):\n         M = self.blocks\n         for i in range(M.shape[0]):\n             numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        if M.shape[0] > 0:\n+            for i in range(M.shape[1]):\n+                numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..817bf09 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -28,8 +28,9 @@ class BlockMatrix(MatrixExpr):\n         M = self.blocks\n         for i in range(M.shape[0]):\n             numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        if M.shape[0] > 0:\n+            for i in range(M.shape[1]):\n+                numcols += M[0, i].shape[1]\n         return (numrows, numcols)\n     @property\n     def blockshape(self):\n", "normalized_occurrence": 1}
