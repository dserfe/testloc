{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..c21e0ee 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1370,7 +1370,7 @@ class PythonDomain(Domain):\n \n def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n                      node: pending_xref, contnode: Element) -> Element:\n-    \"\"\"Do not emit nitpicky warnings for built-in types.\"\"\"\n+    \"\"\"Do not emit nitpicky warnings for built-in types and standard library types.\"\"\"\n     def istyping(s: str) -> bool:\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n@@ -1389,6 +1389,17 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        else:\n+            # Check for standard library types\n+            modname = node.get('py:module')\n+            if modname:\n+                try:\n+                    mod = __import__(modname, None, None, [''])\n+                    if inspect.isclass(getattr(mod, reftarget, None)):\n+                        if mod.__name__ in sys.stdlib_module_names:  # type: ignore\n+                            return contnode\n+                except ImportError:\n+                    pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..2623163 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -847,6 +847,16 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        else:\n+            modname = node.get('py:module')\n+            if modname:\n+                try:\n+                    mod = __import__(modname, None, None, [''])\n+                    if inspect.isclass(getattr(mod, reftarget, None)):\n+                        if mod.__name__ in sys.stdlib_module_names:\n+                            return contnode\n+                except ImportError:\n+                    pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
