{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..90c5361 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -275,6 +275,10 @@ class Product(ExprWithIntLimits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n+            # Special case for terms of the form `n + 1 / 2**k`\n+            if all(t.is_Pow and t.base == 2 for t in term.args):\n+                base, exp = S(2), term.args[1].exp\n+                return q_pochhammer(base**exp, base, n)\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..4c03427 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -75,6 +75,9 @@ class Product(ExprWithIntLimits):\n                 B = self.func(arg, (k, a, n)).doit()\n             return poly.LC() ** (n - a + 1) * A * B\n         elif term.is_Add:\n+            if all((t.is_Pow and t.base == 2 for t in term.args)):\n+                base, exp = (S(2), term.args[1].exp)\n+                return q_pochhammer(base ** exp, base, n)\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "normalized_occurrence": 1}
