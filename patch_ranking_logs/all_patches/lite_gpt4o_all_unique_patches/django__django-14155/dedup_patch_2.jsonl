{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..1d00016 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -26,12 +26,13 @@ from django.utils.translation import get_language\n \n from .converters import get_converter\n from .exceptions import NoReverseMatch, Resolver404\n+import functools\n from .utils import get_callable\n \n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        self.func = functools.partial(func) if isinstance(func, functools.partial) else func\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,8 +60,14 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if isinstance(self.func, functools.partial):\n+            func_repr = \"functools.partial(%s, %s, %s)\" % (\n+                self.func.func.__module__ + '.' + self.func.func.__name__,\n+                self.func.args, self.func.keywords\n+            )\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..7558158 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -16,10 +16,11 @@ from django.utils.regex_helper import _lazy_re_compile, normalize\n from django.utils.translation import get_language\n from .converters import get_converter\n from .exceptions import NoReverseMatch, Resolver404\n+import functools\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        self.func = functools.partial(func) if isinstance(func, functools.partial) else func\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -38,7 +39,10 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_repr = self._func_path\n+        if isinstance(self.func, functools.partial):\n+            func_repr = 'functools.partial(%s, %s, %s)' % (self.func.func.__module__ + '.' + self.func.func.__name__, self.func.args, self.func.keywords)\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
