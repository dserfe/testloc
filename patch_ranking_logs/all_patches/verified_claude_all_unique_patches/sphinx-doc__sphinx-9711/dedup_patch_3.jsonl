{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9711", "model_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..1d1a62e 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -44,6 +44,8 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     if config.needs_extensions is None:\n         return\n \n+    from packaging.version import parse\n+\n     for extname, reqversion in config.needs_extensions.items():\n         extension = app.extensions.get(extname)\n         if extension is None:\n@@ -51,7 +53,7 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse(reqversion) > parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n@@ -65,4 +67,4 @@ def setup(app: \"Sphinx\") -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 6, "normalized_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 41afac8..24a3a7b 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -17,12 +17,13 @@ class Extension:\n def verify_needs_extensions(app: 'Sphinx', config: Config) -> None:\n     if config.needs_extensions is None:\n         return\n+    from packaging.version import parse\n     for extname, reqversion in config.needs_extensions.items():\n         extension = app.extensions.get(extname)\n         if extension is None:\n             logger.warning(__('The %s extension is required by needs_extensions settings, but it is not loaded.'), extname)\n             continue\n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version' or parse(reqversion) > parse(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in version %s and therefore cannot be built with the loaded version (%s).') % (extname, reqversion, extension.version))\n def setup(app: 'Sphinx') -> Dict[str, Any]:\n     app.connect('config-inited', verify_needs_extensions, priority=800)\n", "normalized_occurrence": 6}
