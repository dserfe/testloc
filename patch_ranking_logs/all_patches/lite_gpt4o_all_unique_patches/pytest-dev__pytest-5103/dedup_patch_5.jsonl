{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..35b9ede 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,12 +984,33 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if (\n+            isinstance(call.func, ast.Name)\n+            and call.func.id in {\"all\", \"any\"}\n+            and len(call.args) == 1\n+            and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp, ast.SetComp))\n+        ):\n+            arg = call.args[0]\n+            elements = list(arg.elt.elts if isinstance(arg, ast.GeneratorExp) else arg.elts)\n+            res_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], call))\n+            self.explanation_specifiers[\"py{}\".format(next(self.variable_counter))] = self.display(ast.Name(res_var, ast.Load()))\n+            explanations = []\n+            for i, element in enumerate(elements):\n+                elem_res, elem_expl = self.visit(element)\n+                explanations.append(ast.Str(\"{}: {}\".format(i, elem_expl)))\n+            expl = \"{}({})\".format(func_expl, \", \".join(arg_expls))\n+            expl_list = self.assign(ast.List(explanations, ast.Load()))\n+            expl_template = self.helper(\"_format_explanation\", expl_list)\n+            expl = self.pop_format_context(expl_template)\n+            return res_var, expl\n+        else:\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1102,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..d450153 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,12 +559,28 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and (len(call.args) == 1) and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+            arg = call.args[0]\n+            elements = list(arg.elt.elts if isinstance(arg, ast.GeneratorExp) else arg.elts)\n+            res_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], call))\n+            self.explanation_specifiers['py{}'.format(next(self.variable_counter))] = self.display(ast.Name(res_var, ast.Load()))\n+            explanations = []\n+            for i, element in enumerate(elements):\n+                elem_res, elem_expl = self.visit(element)\n+                explanations.append(ast.Str('{}: {}'.format(i, elem_expl)))\n+            expl = '{}({})'.format(func_expl, ', '.join(arg_expls))\n+            expl_list = self.assign(ast.List(explanations, ast.Load()))\n+            expl_template = self.helper('_format_explanation', expl_list)\n+            expl = self.pop_format_context(expl_template)\n+            return (res_var, expl)\n+        else:\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
