{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..b50e27a 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6870,6 +6870,9 @@ such objects\n                     xvals.append(x.copy())\n                     yvals.append(y.copy())\n \n+                # Update data limits\n+                self.update_datalim(np.column_stack([x, y]))\n+\n             # stepfill is closed, step is not\n             split = -1 if fill else 2 * len(bins)\n             # add patches in reverse order so that when stacking,\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..b413464 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2035,6 +2035,7 @@ class Axes(_AxesBase):\n                 else:\n                     xvals.append(x.copy())\n                     yvals.append(y.copy())\n+                self.update_datalim(np.column_stack([x, y]))\n             split = -1 if fill else 2 * len(bins)\n             for x, y, c in reversed(list(zip(xvals, yvals, color))):\n                 patches.append(self.fill(x[:split], y[:split], closed=True if fill else None, facecolor=c, edgecolor=None if fill else c, fill=fill if fill else None, zorder=None if fill else mlines.Line2D.zorder))\n", "normalized_occurrence": 1}
