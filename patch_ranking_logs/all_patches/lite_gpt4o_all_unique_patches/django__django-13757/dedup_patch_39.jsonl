{"model_name_or_path": "agentless", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..ec69b36 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -366,13 +366,15 @@ class CaseInsensitiveMixin:\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n-        if not self.rhs:\n+        if self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n+        return super().as_sql(compiler, connection, template='%(lhs)s IS NULL OR NOT %(lhs)s ?')\n         return super().as_sql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        if not self.rhs:\n+        if self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n+        return super().as_sql(compiler, connection, template='%(lhs)s IS NULL OR NOT json_extract(%(lhs)s, \\'$.%(key_name)s\\')')\n         return super().as_sql(compiler, connection)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..20dcd54 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -239,12 +239,14 @@ class CaseInsensitiveMixin:\n         return (rhs, rhs_params)\n class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n-        if not self.rhs:\n+        if self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n+        return super().as_sql(compiler, connection, template='%(lhs)s IS NULL OR NOT %(lhs)s ?')\n         return super().as_sql(compiler, connection)\n     def as_sqlite(self, compiler, connection):\n-        if not self.rhs:\n+        if self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n+        return super().as_sql(compiler, connection, template=\"%(lhs)s IS NULL OR NOT json_extract(%(lhs)s, '$.%(key_name)s')\")\n         return super().as_sql(compiler, connection)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n", "normalized_occurrence": 1}
