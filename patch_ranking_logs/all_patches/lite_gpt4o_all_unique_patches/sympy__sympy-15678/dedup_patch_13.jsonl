{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15678", "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex 52a1560..5f1f314 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -568,18 +568,27 @@ def idiff(eq, y, x, n=1):\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n         dep = {y}\n     else:\n         raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n \n+    if isinstance(y, Function):\n+        dep_func = {y}\n+        dep_var = {y.args[0]}\n+    else:\n+        dep_func = set()\n+        dep_var = set()\n     f = dict([(s, Function(\n-        s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n+        s.name)(x)) for s in eq.free_symbols if (s != x and s in dep) or (s in dep_func)])\n     dydx = Function(y.name)(x).diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n-        yp = solve(eq.diff(x), dydx)[0].subs(derivs)\n+        solutions = solve(eq.diff(x), dydx)\n+        if not solutions:\n+            raise ValueError(\"No solutions found for the derivative.\")\n+        yp = solutions[0].subs(derivs)\n         if i == n - 1:\n             return yp.subs([(v, k) for k, v in f.items()])\n         derivs[dydx] = yp\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex 8c03173..ebefd26 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -225,16 +225,25 @@ def idiff(eq, y, x, n=1):\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n-    elif isinstance(y, Symbol):\n+    elif isinstance(y, (Symbol, Function)):\n         dep = {y}\n     else:\n         raise ValueError('expecting x-dependent symbol(s) but got: %s' % y)\n-    f = dict([(s, Function(s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n+    if isinstance(y, Function):\n+        dep_func = {y}\n+        dep_var = {y.args[0]}\n+    else:\n+        dep_func = set()\n+        dep_var = set()\n+    f = dict([(s, Function(s.name)(x)) for s in eq.free_symbols if s != x and s in dep or s in dep_func])\n     dydx = Function(y.name)(x).diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n-        yp = solve(eq.diff(x), dydx)[0].subs(derivs)\n+        solutions = solve(eq.diff(x), dydx)\n+        if not solutions:\n+            raise ValueError('No solutions found for the derivative.')\n+        yp = solutions[0].subs(derivs)\n         if i == n - 1:\n             return yp.subs([(v, k) for k, v in f.items()])\n         derivs[dydx] = yp\n", "normalized_occurrence": 1}
