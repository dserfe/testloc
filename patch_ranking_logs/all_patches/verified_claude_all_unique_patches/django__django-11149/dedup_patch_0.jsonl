{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..0335fae 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2115,18 +2115,26 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have both view and change permissions for the related model in order to\n+            # be able to add to the intermediate model.\n+            opts = self._get_related_model_opts()\n+            return (\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) and\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n+            )\n         return super().has_add_permission(request)\n \n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             # We're checking the rights to an auto-created intermediate model,\n             # which doesn't have its own individual permissions. The user needs\n-            # to have the view permission for the related model in order to\n-            # be able to do anything with the intermediate model.\n-            return self.has_view_permission(request, obj)\n+            # to have both view and change permissions for the related model in order to\n+            # be able to modify the intermediate model.\n+            opts = self._get_related_model_opts()\n+            return (\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) and\n+                request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n+            )\n         return super().has_change_permission(request)\n \n     def has_delete_permission(self, request, obj=None):\n@@ -2138,15 +2146,17 @@ class InlineModelAdmin(BaseModelAdmin):\n             return self.has_view_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n \n+    def _get_related_model_opts(self):\n+        \"\"\"Get the options object for the non-parent model in an auto-created relationship.\"\"\"\n+        opts = self.opts\n+        for field in opts.fields:\n+            if field.remote_field and field.remote_field.model != self.parent_model:\n+                return field.remote_field.model._meta\n+        return opts\n+\n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            opts = self.opts\n-            # The model was auto-created as intermediary for a many-to-many\n-            # Many-relationship; find the target model.\n-            for field in opts.fields:\n-                if field.remote_field and field.remote_field.model != self.parent_model:\n-                    opts = field.remote_field.model._meta\n-                    break\n+            opts = self._get_related_model_opts()\n             return (\n                 request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or\n                 request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n@@ -2159,4 +2169,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..6332ba9 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1042,23 +1042,27 @@ class InlineModelAdmin(BaseModelAdmin):\n         return queryset\n     def has_add_permission(self, request, obj):\n         if self.opts.auto_created:\n-            return self.has_view_permission(request, obj)\n+            opts = self._get_related_model_opts()\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) and request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_add_permission(request)\n     def has_change_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            return self.has_view_permission(request, obj)\n+            opts = self._get_related_model_opts()\n+            return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) and request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_change_permission(request)\n     def has_delete_permission(self, request, obj=None):\n         if self.opts.auto_created:\n             return self.has_view_permission(request, obj)\n         return super().has_delete_permission(request, obj)\n+    def _get_related_model_opts(self):\n+        opts = self.opts\n+        for field in opts.fields:\n+            if field.remote_field and field.remote_field.model != self.parent_model:\n+                return field.remote_field.model._meta\n+        return opts\n     def has_view_permission(self, request, obj=None):\n         if self.opts.auto_created:\n-            opts = self.opts\n-            for field in opts.fields:\n-                if field.remote_field and field.remote_field.model != self.parent_model:\n-                    opts = field.remote_field.model._meta\n-                    break\n+            opts = self._get_related_model_opts()\n             return request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('view', opts))) or request.user.has_perm('%s.%s' % (opts.app_label, get_permission_codename('change', opts)))\n         return super().has_view_permission(request)\n class StackedInline(InlineModelAdmin):\n", "normalized_occurrence": 1}
