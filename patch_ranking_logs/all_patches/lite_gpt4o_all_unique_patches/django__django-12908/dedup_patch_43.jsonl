{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..f8d2b2b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -438,6 +438,7 @@ class SQLCompiler:\n                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n                 if compiler.get_order_by():\n                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+        distinct_fields, distinct_params = self.get_distinct()\n         parts = ()\n         for compiler in compilers:\n             try:\n@@ -475,7 +476,8 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        distinct_sql = ', '.join(distinct_fields)\n+        result = ['SELECT DISTINCT ON ({}) * FROM ({})'.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..d342927 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -243,6 +243,7 @@ class SQLCompiler:\n                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n                 if compiler.get_order_by():\n                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+        distinct_fields, distinct_params = self.get_distinct()\n         parts = ()\n         for compiler in compilers:\n             try:\n@@ -267,7 +268,8 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        distinct_sql = ', '.join(distinct_fields)\n+        result = ['SELECT DISTINCT ON ({}) * FROM ({})'.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "normalized_occurrence": 1}
