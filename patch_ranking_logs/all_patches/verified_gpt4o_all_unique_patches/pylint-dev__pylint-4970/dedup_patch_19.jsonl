{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4970", "model_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 79a566f..64c85a5 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -830,24 +830,29 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n \n     def close(self):\n         \"\"\"compute and display similarities on closing (i.e. end of parsing)\"\"\"\n-        total = sum(len(lineset) for lineset in self.linesets)\n-        duplicated = 0\n-        stats = self.stats\n-        for num, couples in self._compute_sims():\n-            msg = []\n-            lineset = start_line = end_line = None\n-            for lineset, start_line, end_line in couples:\n-                msg.append(f\"=={lineset.name}:[{start_line}:{end_line}]\")\n-            msg.sort()\n-\n-            if lineset:\n-                for line in lineset.real_lines[start_line:end_line]:\n-                    msg.append(line.rstrip())\n-\n-            self.add_message(\"R0801\", args=(len(couples), \"\\n\".join(msg)))\n-            duplicated += num * (len(couples) - 1)\n-        stats[\"nb_duplicated_lines\"] = duplicated\n-        stats[\"percent_duplicated_lines\"] = total and duplicated * 100.0 / total\n+        if self.min_lines > 0:\n+            total = sum(len(lineset) for lineset in self.linesets)\n+            duplicated = 0\n+            stats = self.stats\n+            for num, couples in self._compute_sims():\n+                msg = []\n+                lineset = start_line = end_line = None\n+                for lineset, start_line, end_line in couples:\n+                    msg.append(f\"=={lineset.name}:[{start_line}:{end_line}]\")\n+                msg.sort()\n+\n+                if lineset:\n+                    for line in lineset.real_lines[start_line:end_line]:\n+                        msg.append(line.rstrip())\n+\n+                self.add_message(\"R0801\", args=(len(couples), \"\\n\".join(msg)))\n+                duplicated += num * (len(couples) - 1)\n+            stats[\"nb_duplicated_lines\"] = duplicated\n+            stats[\"percent_duplicated_lines\"] = total and duplicated * 100.0 / total\n+        else:\n+            # If min_lines is 0, do not perform any similarity checks\n+            stats[\"nb_duplicated_lines\"] = 0\n+            stats[\"percent_duplicated_lines\"] = 0\n \n     def get_map_data(self):\n         \"\"\"Passthru override\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 0997b2e..b7b0e74 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -321,22 +321,26 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         with node.stream() as stream:\n             self.append_stream(self.linter.current_name, stream, node.file_encoding)\n     def close(self):\n-        total = sum((len(lineset) for lineset in self.linesets))\n-        duplicated = 0\n-        stats = self.stats\n-        for num, couples in self._compute_sims():\n-            msg = []\n-            lineset = start_line = end_line = None\n-            for lineset, start_line, end_line in couples:\n-                msg.append(f'=={lineset.name}:[{start_line}:{end_line}]')\n-            msg.sort()\n-            if lineset:\n-                for line in lineset.real_lines[start_line:end_line]:\n-                    msg.append(line.rstrip())\n-            self.add_message('R0801', args=(len(couples), '\\n'.join(msg)))\n-            duplicated += num * (len(couples) - 1)\n-        stats['nb_duplicated_lines'] = duplicated\n-        stats['percent_duplicated_lines'] = total and duplicated * 100.0 / total\n+        if self.min_lines > 0:\n+            total = sum((len(lineset) for lineset in self.linesets))\n+            duplicated = 0\n+            stats = self.stats\n+            for num, couples in self._compute_sims():\n+                msg = []\n+                lineset = start_line = end_line = None\n+                for lineset, start_line, end_line in couples:\n+                    msg.append(f'=={lineset.name}:[{start_line}:{end_line}]')\n+                msg.sort()\n+                if lineset:\n+                    for line in lineset.real_lines[start_line:end_line]:\n+                        msg.append(line.rstrip())\n+                self.add_message('R0801', args=(len(couples), '\\n'.join(msg)))\n+                duplicated += num * (len(couples) - 1)\n+            stats['nb_duplicated_lines'] = duplicated\n+            stats['percent_duplicated_lines'] = total and duplicated * 100.0 / total\n+        else:\n+            stats['nb_duplicated_lines'] = 0\n+            stats['percent_duplicated_lines'] = 0\n     def get_map_data(self):\n         return Similar.get_map_data(self)\n     def reduce_map_data(self, linter, data):\n", "normalized_occurrence": 1}
