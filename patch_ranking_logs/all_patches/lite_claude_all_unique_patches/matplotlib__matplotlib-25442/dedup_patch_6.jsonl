{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db0cc2e..37dc625 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1551,21 +1551,31 @@ class DraggableBase:\n \n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n-            self.disconnect()\n+            # Store canvas reference before disconnecting since it might become invalid\n+            canvas = getattr(self.ref_artist.figure, 'canvas', None)\n+            self.disconnect(canvas)\n             return False\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+    def disconnect(self, stored_canvas=None):\n+        \"\"\"Disconnect the callbacks.\n+        \n+        Parameters\n+        ----------\n+        stored_canvas : Canvas, optional\n+            Canvas to use for disconnection if the normal canvas property is unavailable\n+        \"\"\"\n+        canvas = stored_canvas if stored_canvas is not None else getattr(self, 'canvas', None)\n+        if canvas is not None:\n+            for cid in self.cids:\n+                canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex f94319f..0e5d63d 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1302,21 +1302,30 @@ class DraggableBase:\n \n     def _check_still_parented(self):\n         if self.ref_artist.figure is None:\n-            self.disconnect()\n+            canvas = getattr(self.ref_artist.figure, 'canvas', None)\n+            self.disconnect(canvas)\n             return False\n         else:\n             return True\n \n-    def disconnect(self):\n-        \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+    def disconnect(self, stored_canvas=None):\n+        \"\"\"Disconnect the callbacks.\n+        \n+        Parameters\n+        ----------\n+        stored_canvas : Canvas, optional\n+            Canvas to use for disconnection if the normal canvas property is unavailable\n+        \"\"\"\n+        canvas = stored_canvas if stored_canvas is not None else getattr(self, 'canvas', None)\n+        if canvas is not None:\n+            for cid in self.cids:\n+                canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "normalized_occurrence": 1}
