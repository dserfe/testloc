{"model_name_or_path": "agentless", "instance_id": "django__django-14999", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 165c6f5..533ca11 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -294,6 +294,9 @@ class RenameModel(ModelOperation):\n         self.new_name = new_name\n         super().__init__(old_name)\n \n+    def db_table_defined(self, model_state):\n+        return bool(model_state.options.get(\"db_table\"))\n+\n     @cached_property\n     def old_name_lower(self):\n         return self.old_name.lower()\n@@ -314,7 +317,9 @@ class RenameModel(ModelOperation):\n         )\n \n     def state_forwards(self, app_label, state):\n-        state.rename_model(app_label, self.old_name, self.new_name)\n+        model_state = state.models[(app_label, self.old_name_lower)]\n+        if not self.db_table_defined(model_state):\n+            state.rename_model(app_label, self.old_name, self.new_name)\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 8445d8b..52f39ad 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,6 +137,8 @@ class RenameModel(ModelOperation):\n         self.old_name = old_name\n         self.new_name = new_name\n         super().__init__(old_name)\n+    def db_table_defined(self, model_state):\n+        return bool(model_state.options.get('db_table'))\n     @cached_property\n     def old_name_lower(self):\n         return self.old_name.lower()\n@@ -147,7 +149,9 @@ class RenameModel(ModelOperation):\n         kwargs = {'old_name': self.old_name, 'new_name': self.new_name}\n         return (self.__class__.__qualname__, [], kwargs)\n     def state_forwards(self, app_label, state):\n-        state.rename_model(app_label, self.old_name, self.new_name)\n+        model_state = state.models[app_label, self.old_name_lower]\n+        if not self.db_table_defined(model_state):\n+            state.rename_model(app_label, self.old_name, self.new_name)\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n", "normalized_occurrence": 1}
