{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 0194550..96b8c54 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4534,10 +4534,16 @@ class Dataset(\n                     product_vars.update(idx_vars)\n \n             if len(product_vars) == len(dims):\n+                # Store original dtypes before stacking\n+                original_dtypes = {k: v.dtype for k, v in product_vars.items()}\n                 idx = index_cls.stack(product_vars, new_dim)\n                 new_indexes[new_dim] = idx\n                 new_indexes.update({k: idx for k in product_vars})\n                 idx_vars = idx.create_variables(product_vars)\n+                # Restore original dtypes\n+                for k, v in idx_vars.items():\n+                    if k in original_dtypes:\n+                        idx_vars[k] = v.astype(original_dtypes[k])\n                 # keep consistent multi-index coordinate order\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex b7eb26f..96c9e0d 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1446,10 +1446,14 @@ class Dataset(DataWithCoords, DatasetAggregations, DatasetArithmetic, Mapping[Ha\n                 if idx is not None:\n                     product_vars.update(idx_vars)\n             if len(product_vars) == len(dims):\n+                original_dtypes = {k: v.dtype for k, v in product_vars.items()}\n                 idx = index_cls.stack(product_vars, new_dim)\n                 new_indexes[new_dim] = idx\n                 new_indexes.update({k: idx for k in product_vars})\n                 idx_vars = idx.create_variables(product_vars)\n+                for k, v in idx_vars.items():\n+                    if k in original_dtypes:\n+                        idx_vars[k] = v.astype(original_dtypes[k])\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n                 new_variables.update(idx_vars)\n", "normalized_occurrence": 1}
