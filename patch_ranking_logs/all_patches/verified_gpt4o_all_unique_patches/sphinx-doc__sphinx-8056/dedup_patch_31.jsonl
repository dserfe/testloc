{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..9a6aea5 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1095,19 +1095,25 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n+        _names = _name.split(\", \")\n+        _types = [_type] * len(_names)\n+\n+        _names = [self._escape_args_and_kwargs(name) for name in _names]\n+        _types = [\n+            _convert_numpy_type_spec(\n+                _type,\n+                location=self._get_location(),\n+                translations=self._config.napoleon_type_aliases or {},\n+            ) for _type in _types\n+        ]\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n-        return _name, _type, _desc\n+        fields = [(_name, _type, _desc) for _name, _type in zip(_names, _types)]\n+        return fields if len(fields) > 1 else fields[0]\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..6984928 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -665,14 +665,17 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        _names = _name.split(', ')\n+        _types = [_type] * len(_names)\n+        _names = [self._escape_args_and_kwargs(name) for name in _names]\n+        _types = [_convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {}) for _type in _types]\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n-        return (_name, _type, _desc)\n+        fields = [(_name, _type, _desc) for _name, _type in zip(_names, _types)]\n+        return fields if len(fields) > 1 else fields[0]\n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n     def _consume_section_header(self) -> str:\n", "normalized_occurrence": 1}
