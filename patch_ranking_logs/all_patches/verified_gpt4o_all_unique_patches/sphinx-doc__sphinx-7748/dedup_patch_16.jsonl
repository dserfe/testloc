{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..963edad 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1067,10 +1067,39 @@ class DocstringSignatureMixin:\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n             result = args, retann\n-            # don't look any further\n-            break\n         return result\n \n+    def _find_all_signatures(self, encoding: str = None) -> List[Tuple[str, str]]:\n+        if encoding is not None:\n+            warnings.warn(\"The 'encoding' argument to autodoc.%s._find_all_signatures() is \"\n+                          \"deprecated.\" % self.__class__.__name__,\n+                          RemovedInSphinx40Warning, stacklevel=2)\n+        docstrings = self.get_doc()\n+        signatures = []\n+        for i, doclines in enumerate(docstrings):\n+            # no lines in docstring, no match\n+            if not doclines:\n+                continue\n+            # match first line of docstring against signature RE\n+            match = py_ext_sig_re.match(doclines[0])\n+            if not match:\n+                continue\n+            exmod, path, base, args, retann = match.groups()\n+            # the base name must match ours\n+            valid_names = [self.objpath[-1]]  # type: ignore\n+            if isinstance(self, ClassDocumenter):\n+                valid_names.append('__init__')\n+                if hasattr(self.object, '__mro__'):\n+                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n+            if base not in valid_names:\n+                continue\n+            # re-prepare docstring to ignore more leading indentation\n+            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n+                                                        tabsize=tab_width)\n+            signatures.append((args, retann))\n+        return signatures\n+\n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..ce32e02 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -777,9 +777,32 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n             result = (args, retann)\n-            break\n         return result\n \n+    def _find_all_signatures(self, encoding: str=None) -> List[Tuple[str, str]]:\n+        if encoding is not None:\n+            warnings.warn(\"The 'encoding' argument to autodoc.%s._find_all_signatures() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n+        docstrings = self.get_doc()\n+        signatures = []\n+        for i, doclines in enumerate(docstrings):\n+            if not doclines:\n+                continue\n+            match = py_ext_sig_re.match(doclines[0])\n+            if not match:\n+                continue\n+            exmod, path, base, args, retann = match.groups()\n+            valid_names = [self.objpath[-1]]\n+            if isinstance(self, ClassDocumenter):\n+                valid_names.append('__init__')\n+                if hasattr(self.object, '__mro__'):\n+                    valid_names.extend((cls.__name__ for cls in self.object.__mro__))\n+            if base not in valid_names:\n+                continue\n+            tab_width = self.directive.state.document.settings.tab_width\n+            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n+            signatures.append((args, retann))\n+        return signatures\n+\n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n", "normalized_occurrence": 1}
