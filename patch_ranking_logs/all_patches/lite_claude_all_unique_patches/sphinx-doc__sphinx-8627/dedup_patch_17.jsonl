{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..970d593 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1370,7 +1370,7 @@ class PythonDomain(Domain):\n \n def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n                      node: pending_xref, contnode: Element) -> Element:\n-    \"\"\"Do not emit nitpicky warnings for built-in types.\"\"\"\n+    \"\"\"Do not emit nitpicky warnings for built-in types and standard library types.\"\"\"\n     def istyping(s: str) -> bool:\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n@@ -1389,6 +1389,17 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        \n+        # Handle fully qualified standard library types\n+        fullname = node.get('py:module', '') + '.' + reftarget if node.get('py:module') else reftarget\n+        try:\n+            module_name = fullname.rsplit('.', 1)[0]\n+            module = __import__(module_name, fromlist=[''])\n+            if inspect.isclass(getattr(module, reftarget.split('.')[-1], None)):\n+                # standard library class\n+                return contnode\n+        except (ImportError, AttributeError, IndexError):\n+            pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..5c13a72 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -847,6 +847,14 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        fullname = node.get('py:module', '') + '.' + reftarget if node.get('py:module') else reftarget\n+        try:\n+            module_name = fullname.rsplit('.', 1)[0]\n+            module = __import__(module_name, fromlist=[''])\n+            if inspect.isclass(getattr(module, reftarget.split('.')[-1], None)):\n+                return contnode\n+        except (ImportError, AttributeError, IndexError):\n+            pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
