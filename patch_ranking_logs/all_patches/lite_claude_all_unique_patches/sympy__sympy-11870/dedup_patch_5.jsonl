{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..37dc4b6 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -452,6 +452,20 @@ class exp(ExpBase):\n         from sympy import tanh\n         return (1 + tanh(arg/2))/(1 - tanh(arg/2))\n \n+    def _eval_rewrite_as_sincos(self, arg):\n+        from sympy import sin, cos\n+        I = S.ImaginaryUnit\n+        if I in arg.free_symbols:\n+            # Handle exp(I*x) -> cos(x) + I*sin(x) (Euler's formula)\n+            if arg.is_Mul and arg.args[0] == I:\n+                x = arg.args[1] if len(arg.args) == 2 else Mul(*arg.args[1:])\n+                return cos(x) + I*sin(x)\n+            # Handle exp(-I*x) -> cos(x) - I*sin(x)\n+            elif arg.is_Mul and arg.args[0] == -I:\n+                x = arg.args[1] if len(arg.args) == 2 else Mul(*arg.args[1:])\n+                return cos(x) - I*sin(x)\n+        return self\n+\n \n class log(Function):\n     r\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n+    def _eval_rewrite_as_sincos(self, arg):\n+        from sympy import sin, cos\n+        I = S.ImaginaryUnit\n+        if I in arg.free_symbols:\n+            if arg.is_Mul and arg.args[0] == I:\n+                x = arg.args[1] if len(arg.args) == 2 else Mul(*arg.args[1:])\n+                return cos(x) + I * sin(x)\n+            elif arg.is_Mul and arg.args[0] == -I:\n+                x = arg.args[1] if len(arg.args) == 2 else Mul(*arg.args[1:])\n+                return cos(x) - I * sin(x)\n+        return self", "normalized_occurrence": 1}
