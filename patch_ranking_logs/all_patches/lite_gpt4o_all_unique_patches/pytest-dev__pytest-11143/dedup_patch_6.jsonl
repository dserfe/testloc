{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..a62cd82 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -678,7 +678,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n@@ -742,7 +742,10 @@ class AssertionRewriter(ast.NodeVisitor):\n                     nodes.append(field)\n \n     @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n+    def is_rewrite_disabled(docstring) -> bool:\n+        \"\"\"Check if the docstring has the PYTEST_DONT_REWRITE flag.\"\"\"\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..5836d56 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -363,7 +363,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         for item in mod.body:\n             if expect_docstring and isinstance(item, ast.Expr) and isinstance(item.value, ast.Constant):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif isinstance(item, ast.ImportFrom) and item.level == 0 and (item.module == '__future__'):\n@@ -398,7 +398,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 elif isinstance(field, ast.AST) and (not isinstance(field, ast.expr)):\n                     nodes.append(field)\n     @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n+    def is_rewrite_disabled(docstring) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return 'PYTEST_DONT_REWRITE' in docstring\n     def variable(self) -> str:\n         name = '@py_assert' + str(next(self.variable_counter))\n", "normalized_occurrence": 1}
