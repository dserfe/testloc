{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..5526fc7 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,12 +502,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n-        # If np.array(..) gives ComplexWarning, then we convert the warning\n-        # to an error. This is needed because specifying a non complex\n-        # dtype to the function converts complex to real dtype,\n-        # thereby passing the test made in the lines following the scope\n-        # of warnings context manager.\n-        with warnings.catch_warnings():\n+        # If np.array(..) or np.asarray(..) gives ComplexWarning, then we convert\n+        # the warning to an error. This is needed because specifying a non complex\n+        # dtype to the function converts complex to real dtype, thereby passing the\n+        # test made in the lines following the scope of warnings context manager.\n+        with warnings.catch_warnings(record=True) as w:\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n                 array = np.asarray(array, dtype=dtype, order=order)\n@@ -515,6 +514,16 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 raise ValueError(\"Complex data not supported\\n\"\n                                  \"{}\\n\".format(array))\n \n+            # Check if a dtype conversion warning should be raised\n+            if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+                # Filter out ComplexWarning to only look for dtype conversion warnings\n+                conversion_warnings = [warning for warning in w\n+                                       if not issubclass(warning.category, ComplexWarning)]\n+                if conversion_warnings:\n+                    msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                           % (dtype_orig, array.dtype, context))\n+                    warnings.warn(msg, DataConversionWarning)\n+\n         # It is possible that the np.array(..) gave no warning. This happens\n         # when no dtype conversion happened, for example dtype = None. The\n         # result is that np.array(..) produces an array of complex dtype\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..77767c2 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,12 +152,17 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n-        with warnings.catch_warnings():\n+        with warnings.catch_warnings(record=True) as w:\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n                 array = np.asarray(array, dtype=dtype, order=order)\n             except ComplexWarning:\n                 raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n+            if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+                conversion_warnings = [warning for warning in w if not issubclass(warning.category, ComplexWarning)]\n+                if conversion_warnings:\n+                    msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+                    warnings.warn(msg, DataConversionWarning)\n         _ensure_no_complex_data(array)\n         if ensure_2d:\n             if array.ndim == 0:\n", "normalized_occurrence": 1}
