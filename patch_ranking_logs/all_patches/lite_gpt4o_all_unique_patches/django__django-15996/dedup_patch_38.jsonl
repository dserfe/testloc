{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..ee7febe 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,8 +125,17 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        value = self.value\n+        if not hasattr(value, 'name'):\n+            parts = [\n+                \"%s.%s.%s\" % (module, enum_class.__qualname__, flag.name)\n+                for flag in enum._decompose(enum_class, value)\n+            ]\n+            value_expr = \" | \".join(parts)\n+        else:\n+            value_expr = \"%s.%s[%r]\" % (module, enum_class.__qualname__, value.name)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            value_expr,\n             {\"import %s\" % module},\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..b7d701c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,13 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        value = self.value\n+        if not hasattr(value, 'name'):\n+            parts = ['%s.%s.%s' % (module, enum_class.__qualname__, flag.name) for flag in enum._decompose(enum_class, value)]\n+            value_expr = ' | '.join(parts)\n+        else:\n+            value_expr = '%s.%s[%r]' % (module, enum_class.__qualname__, value.name)\n+        return (value_expr, {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
