{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..e40a063 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -827,6 +827,23 @@ class Piecewise(Function):\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n \n+    def _eval_subs(self, old, new):\n+        \"\"\"Substitutes old with new in the Piecewise expression.\n+        \n+        Since Piecewise conditions are logical expressions, they should remain\n+        unaffected by numeric substitutions, while the expressions should be \n+        substituted normally.\n+        \"\"\"\n+        pairs = []\n+        for expr, cond in self.args:\n+            # substitute in the expression\n+            expr = expr._subs(old, new)\n+            # conditions should not be modified by numeric substitutions\n+            if not (old.is_number and new.is_number):\n+                cond = cond._subs(old, new)\n+            pairs.append((expr, cond))\n+        return self.func(*pairs)\n+\n     def _eval_template_is_attr(self, is_attr):\n         b = None\n         for expr, _ in self.args:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..d413841 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -456,6 +456,14 @@ class Piecewise(Function):\n         return self.func(*args)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n+    def _eval_subs(self, old, new):\n+        pairs = []\n+        for expr, cond in self.args:\n+            expr = expr._subs(old, new)\n+            if not (old.is_number and new.is_number):\n+                cond = cond._subs(old, new)\n+            pairs.append((expr, cond))\n+        return self.func(*pairs)\n     def _eval_template_is_attr(self, is_attr):\n         b = None\n         for expr, _ in self.args:\n", "normalized_occurrence": 1}
