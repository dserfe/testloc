{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..2a75be6 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -260,6 +261,24 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             else self.sql_delete_index\n         )\n         return super()._delete_index_sql(model, name, sql)\n+        \n+    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        \"\"\"\n+        Deal with a model changing its unique_together. The input unique_togethers must\n+        be sets of tuples.\n+        \"\"\"\n+        old_unique_together = {tuple(fields) for fields in old_unique_together}\n+        new_unique_together = {tuple(fields) for fields in new_unique_together}\n+\n+        to_remove = old_unique_together - new_unique_together\n+        to_add = new_unique_together - old_unique_together\n+\n+        # Remove the old constraints\n+        for fields in to_remove:\n+            # Skip single field unique constraints - they are likely managed by the field itself\n+            if len(fields) == 1:\n+                continue\n+            self._delete_unique_constraint(model, fields)\n \n     def _create_index_sql(\n         self,\n@@ -296,4 +315,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n+    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        old_unique_together = {tuple(fields) for fields in old_unique_together}\n+        new_unique_together = {tuple(fields) for fields in new_unique_together}\n+        to_remove = old_unique_together - new_unique_together\n+        to_add = new_unique_together - old_unique_together\n+        for fields in to_remove:\n+            if len(fields) == 1:\n+                continue\n+            self._delete_unique_constraint(model, fields)", "normalized_occurrence": 1}
