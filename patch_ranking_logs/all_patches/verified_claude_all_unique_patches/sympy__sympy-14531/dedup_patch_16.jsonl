{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..7fb3820 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -90,7 +90,7 @@ class StrPrinter(Printer):\n \n     def _print_Basic(self, expr):\n         l = [self._print(o) for o in expr.args]\n-        return expr.__class__.__name__ + \"(%s)\" % \", \".join(l)\n+        return \"%s(%s)\" % (expr.__class__.__name__, \", \".join(l))\n \n     def _print_BlockMatrix(self, B):\n         if B.blocks.shape == (1, 1):\n@@ -630,7 +630,9 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], \n+                                  self._print(expr.lhs),\n+                                  self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..c2be257 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -63,7 +63,7 @@ class StrPrinter(Printer):\n         return '%s(%s)' % (expr.func, expr.arg)\n     def _print_Basic(self, expr):\n         l = [self._print(o) for o in expr.args]\n-        return expr.__class__.__name__ + '(%s)' % ', '.join(l)\n+        return '%s(%s)' % (expr.__class__.__name__, ', '.join(l))\n     def _print_BlockMatrix(self, B):\n         if B.blocks.shape == (1, 1):\n             self._print(B.blocks[0, 0])\n@@ -455,7 +455,7 @@ class StrPrinter(Printer):\n     def _print_Relational(self, expr):\n         charmap = {'==': 'Eq', '!=': 'Ne', ':=': 'Assignment', '+=': 'AddAugmentedAssignment', '-=': 'SubAugmentedAssignment', '*=': 'MulAugmentedAssignment', '/=': 'DivAugmentedAssignment', '%=': 'ModAugmentedAssignment'}\n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)), self._relationals.get(expr.rel_op) or expr.rel_op, self.parenthesize(expr.rhs, precedence(expr)))\n     def _print_ComplexRootOf(self, expr):\n         return 'CRootOf(%s, %d)' % (self._print_Add(expr.expr, order='lex'), expr.index)\n", "normalized_occurrence": 1}
