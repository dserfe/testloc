{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..74fe97a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1204,6 +1204,7 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n+        clone.query.clear_deferred_loading()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n         return clone\n \n@@ -1218,6 +1219,7 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n         clone = self._chain()\n+        clone.query.clear_deferred_loading()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..9a742aa 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -731,6 +731,7 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot reverse a query once a slice has been taken.')\n         clone = self._chain()\n+        clone.query.clear_deferred_loading()\n         clone.query.standard_ordering = not clone.query.standard_ordering\n         return clone\n     def defer(self, *fields):\n@@ -738,6 +739,7 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError('Cannot call defer() after .values() or .values_list()')\n         clone = self._chain()\n+        clone.query.clear_deferred_loading()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n", "normalized_occurrence": 1}
