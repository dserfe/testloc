{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..1c62386 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1725,6 +1725,14 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             # This is something that numpy can not make heads or tails\n             # of, assume \"finite\"\n             return True\n+\n+    # For arrays/lists, try direct indexing first\n+    try:\n+        if hasattr(obj, '__getitem__'):\n+            return obj[0]\n+    except (TypeError, IndexError):\n+        pass\n+        \n     if skip_nonfinite is False:\n         if isinstance(obj, collections.abc.Iterator):\n             # needed to accept `array.flat` as input.\n@@ -1740,13 +1748,16 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n                                \"as input\")\n         return next(iter(obj))\n     elif isinstance(obj, np.flatiter):\n-        # TODO do the finite filtering on this\n         return obj[0]\n     elif isinstance(obj, collections.abc.Iterator):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        try:\n+            return next(val for val in obj if safe_isfinite(val))\n+        except StopIteration:\n+            # If no finite values found, return the first value\n+            return next(iter(obj))\n \n \n def sanitize_sequence(data):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..5fb9340 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -737,6 +737,11 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             return np.isfinite(val) if np.isscalar(val) else True\n         except TypeError:\n             return True\n+    try:\n+        if hasattr(obj, '__getitem__'):\n+            return obj[0]\n+    except (TypeError, IndexError):\n+        pass\n     if skip_nonfinite is False:\n         if isinstance(obj, collections.abc.Iterator):\n             try:\n@@ -750,7 +755,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n     elif isinstance(obj, collections.abc.Iterator):\n         raise RuntimeError('matplotlib does not support generators as input')\n     else:\n-        return next((val for val in obj if safe_isfinite(val)))\n+        try:\n+            return next((val for val in obj if safe_isfinite(val)))\n+        except StopIteration:\n+            return next(iter(obj))\n def sanitize_sequence(data):\n     return list(data) if isinstance(data, collections.abc.MappingView) else data\n def normalize_kwargs(kw, alias_mapping=None):\n", "normalized_occurrence": 1}
