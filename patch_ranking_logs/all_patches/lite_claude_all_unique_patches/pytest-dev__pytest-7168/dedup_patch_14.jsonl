{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex adc421d..77f8282 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -1,3 +1,4 @@\n+\n import pprint\n import reprlib\n from typing import Any\n@@ -18,7 +19,7 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n     except (KeyboardInterrupt, SystemExit):\n         raise\n     except BaseException as exc:\n-        exc_info = \"unpresentable exception ({})\".format(_try_repr_or_str(exc))\n+        exc_info = \"unpresentable exception ({})\".format(type(exc).__name__)\n     return \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n         exc_info, obj.__class__.__name__, id(obj)\n     )\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 789deb9..7f0ded0 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -14,7 +14,7 @@ def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n     except (KeyboardInterrupt, SystemExit):\n         raise\n     except BaseException as exc:\n-        exc_info = 'unpresentable exception ({})'.format(_try_repr_or_str(exc))\n+        exc_info = 'unpresentable exception ({})'.format(type(exc).__name__)\n     return '<[{} raised in repr()] {} object at 0x{:x}>'.format(exc_info, obj.__class__.__name__, id(obj))\n def _ellipsize(s: str, maxsize: int) -> str:\n     if len(s) > maxsize:\n", "normalized_occurrence": 1}
