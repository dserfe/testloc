{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7236", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..52060ef 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -214,23 +214,34 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            # when --pdb is given, we want to postpone calling tearDown() otherwise\n-            # when entering the pdb prompt, tearDown() would have probably cleaned up\n-            # instance variables, which makes it difficult to debug\n-            # arguably we could always postpone tearDown(), but this changes the moment where the\n-            # TestCase instance interacts with the results object, so better to only do it\n-            # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n-                self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, \"tearDown\", lambda *args: None)\n-\n-            # we need to update the actual bound method with self.obj, because\n-            # wrap_pytest_function_for_tracing replaces self.obj by a wrapper\n-            setattr(self._testcase, self.name, self.obj)\n-            try:\n-                self._testcase(result=self)\n-            finally:\n-                delattr(self._testcase, self.name)\n+            # Check if test is skipped\n+            skip = getattr(self.obj, \"__unittest_skip__\", False)\n+            \n+            if not skip:\n+                # when --pdb is given, we want to postpone calling tearDown() otherwise\n+                # when entering the pdb prompt, tearDown() would have probably cleaned up\n+                # instance variables, which makes it difficult to debug\n+                # arguably we could always postpone tearDown(), but this changes the moment where the\n+                # TestCase instance interacts with the results object, so better to only do it\n+                # when absolutely needed\n+                if self.config.getoption(\"usepdb\"):\n+                    self._explicit_tearDown = self._testcase.tearDown\n+                    setattr(self._testcase, \"tearDown\", lambda *args: None)\n+\n+                # we need to update the actual bound method with self.obj, because\n+                # wrap_pytest_function_for_tracing replaces self.obj by a wrapper\n+                setattr(self._testcase, self.name, self.obj)\n+                try:\n+                    self._testcase(result=self)\n+                finally:\n+                    delattr(self._testcase, self.name)\n+            else:\n+                # For skipped tests, just run normally without tearDown modification\n+                setattr(self._testcase, self.name, self.obj)\n+                try:\n+                    self._testcase(result=self)\n+                finally:\n+                    delattr(self._testcase, self.name)\n \n     def _prunetraceback(self, excinfo):\n         Function._prunetraceback(self, excinfo)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 4eb682f..9712648 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -152,14 +152,22 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            if self.config.getoption('usepdb'):\n-                self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, 'tearDown', lambda *args: None)\n-            setattr(self._testcase, self.name, self.obj)\n-            try:\n-                self._testcase(result=self)\n-            finally:\n-                delattr(self._testcase, self.name)\n+            skip = getattr(self.obj, '__unittest_skip__', False)\n+            if not skip:\n+                if self.config.getoption('usepdb'):\n+                    self._explicit_tearDown = self._testcase.tearDown\n+                    setattr(self._testcase, 'tearDown', lambda *args: None)\n+                setattr(self._testcase, self.name, self.obj)\n+                try:\n+                    self._testcase(result=self)\n+                finally:\n+                    delattr(self._testcase, self.name)\n+            else:\n+                setattr(self._testcase, self.name, self.obj)\n+                try:\n+                    self._testcase(result=self)\n+                finally:\n+                    delattr(self._testcase, self.name)\n     def _prunetraceback(self, excinfo):\n         Function._prunetraceback(self, excinfo)\n         traceback = excinfo.traceback.filter(lambda x: not x.frame.f_globals.get('__unittest'))\n", "normalized_occurrence": 1}
