{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..6aa990e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -933,7 +933,6 @@ class AssertionRewriter(ast.NodeVisitor):\n         else:  # Original assertion rewriting\n             # Create failure message.\n             body = self.expl_stmts\n-            self.statements.append(ast.If(negation, body, []))\n             if assert_.msg:\n                 assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                 explanation = \"\\n>assert \" + explanation\n@@ -946,8 +945,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n             exc = ast.Call(err_name, [fmt], [])\n             raise_ = ast.Raise(exc, None)\n-\n+            \n+            # Add statements in correct order to prevent showing code after assertion\n             body.append(raise_)\n+            self.statements.append(ast.If(negation, body, []))\n \n         # Clear temporary variables by setting them to None.\n         if self.variables:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..72ffc1b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -494,7 +494,6 @@ class AssertionRewriter(ast.NodeVisitor):\n                 self.statements.append(clear_format)\n         else:\n             body = self.expl_stmts\n-            self.statements.append(ast.If(negation, body, []))\n             if assert_.msg:\n                 assertmsg = self.helper('_format_assertmsg', assert_.msg)\n                 explanation = '\\n>assert ' + explanation\n@@ -508,6 +507,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             exc = ast.Call(err_name, [fmt], [])\n             raise_ = ast.Raise(exc, None)\n             body.append(raise_)\n+            self.statements.append(ast.If(negation, body, []))\n         if self.variables:\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n", "normalized_occurrence": 1}
