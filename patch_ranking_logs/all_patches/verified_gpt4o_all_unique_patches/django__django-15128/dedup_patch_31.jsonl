{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..c5cc82c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -599,12 +599,15 @@ class Query(BaseExpression):\n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(change_map.values())\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join, reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             # We can't reuse the same join again in the query. If we have two\n@@ -613,6 +616,7 @@ class Query(BaseExpression):\n             reuse.discard(new_alias)\n             if alias != new_alias:\n                 change_map[alias] = new_alias\n+                existing_aliases.add(new_alias)\n             if not rhs.alias_refcount[alias]:\n                 # The alias was unused in the rhs query. Unref it so that it\n                 # will be unused in the new query, too. We have to add and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..17a1085 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -333,15 +333,19 @@ class Query(BaseExpression):\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(change_map.values())\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join, reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n             if alias != new_alias:\n                 change_map[alias] = new_alias\n+                existing_aliases.add(new_alias)\n             if not rhs.alias_refcount[alias]:\n                 self.unref_alias(new_alias)\n         joinpromoter.add_votes(rhs_votes)\n", "normalized_occurrence": 1}
