{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..6358c07 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,14 +343,22 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Determine the minimum indentation level of the current lines\n+            min_indent = min((len(line) - len(line.lstrip())) for line in lines if line.strip())\n+            # Adjust prepend content to match the minimum indentation level\n+            adjusted_prepend = ' ' * min_indent + prepend.lstrip()\n+            lines.insert(0, adjusted_prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            # Determine the minimum indentation level of the current lines\n+            min_indent = min((len(line) - len(line.lstrip())) for line in lines if line.strip())\n+            # Adjust append content to match the minimum indentation level\n+            adjusted_append = ' ' * min_indent + append.lstrip()\n+            lines.append(adjusted_append + '\\n')\n \n         return lines\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..73e3652 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,12 +226,16 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            min_indent = min((len(line) - len(line.lstrip()) for line in lines if line.strip()))\n+            adjusted_prepend = ' ' * min_indent + prepend.lstrip()\n+            lines.insert(0, adjusted_prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            min_indent = min((len(line) - len(line.lstrip()) for line in lines if line.strip()))\n+            adjusted_append = ' ' * min_indent + append.lstrip()\n+            lines.append(adjusted_append + '\\n')\n         return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n", "normalized_occurrence": 1}
