{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..eab6931 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -394,6 +394,10 @@ class Set(Basic):\n         # so that the intersect method uses is_subset for evaluation.\n         if self.intersect(other) == self:\n             return True\n+        if isinstance(self, ProductSet) and isinstance(other, FiniteSet):\n+            return all(element in other for element in self)\n+        if isinstance(self, FiniteSet) and isinstance(other, ProductSet):\n+            return all(element in other for element in self)\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n@@ -1873,6 +1877,8 @@ class FiniteSet(Set, EvalfMixin):\n                 for e in self.args)\n \n     def _eval_is_subset(self, other):\n+        if isinstance(other, FiniteSet):\n+            return fuzzy_and(other._contains(e) for e in self)\n         return fuzzy_and(other._contains(e) for e in self.args)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..25242d7 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -139,6 +139,10 @@ class Set(Basic):\n             return ret\n         if self.intersect(other) == self:\n             return True\n+        if isinstance(self, ProductSet) and isinstance(other, FiniteSet):\n+            return all((element in other for element in self))\n+        if isinstance(self, FiniteSet) and isinstance(other, ProductSet):\n+            return all((element in other for element in self))\n     def _eval_is_subset(self, other):\n         return None\n     def _eval_is_superset(self, other):\n@@ -780,6 +784,8 @@ class FiniteSet(Set, EvalfMixin):\n         else:\n             return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))\n     def _eval_is_subset(self, other):\n+        if isinstance(other, FiniteSet):\n+            return fuzzy_and((other._contains(e) for e in self))\n         return fuzzy_and((other._contains(e) for e in self.args))\n     @property\n     def _boundary(self):\n", "normalized_occurrence": 1}
