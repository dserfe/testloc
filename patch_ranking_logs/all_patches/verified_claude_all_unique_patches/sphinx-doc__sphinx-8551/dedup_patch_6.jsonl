{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..206cc54 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1255,22 +1255,38 @@ class PythonDomain(Domain):\n             else:\n                 objtypes = self.objtypes_for_role(type)\n             if objtypes is not None:\n+                # First try fully qualified name\n                 if modname and classname:\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                \n+                if not newname and modname:\n+                    # Then try in current module scope\n+                    fullname = modname + '.' + name\n+                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                        newname = fullname\n+                    else:\n+                        # Search for matches only within current module\n+                        matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                 if oname.startswith(modname + '.') and\n+                                 oname.endswith('.' + name) and\n+                                 self.objects[oname].objtype in objtypes]\n+                        # If exactly one match in current module, use it\n+                        if len(matches) == 1:\n+                            newname = matches[0][0]\n+                            matches = []\n+                \n+                # Only if nothing found in current module, try global scope\n+                if not newname and not matches:\n+                    if name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # Last resort: \"fuzzy\" searching mode\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                                 if oname.endswith(searchname) and\n+                                 self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..915f452 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -758,10 +758,17 @@ class PythonDomain(Domain):\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                if not newname and modname:\n+                    fullname = modname + '.' + name\n+                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                        newname = fullname\n+                    else:\n+                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.startswith(modname + '.') and oname.endswith('.' + name) and (self.objects[oname].objtype in objtypes)]\n+                        if len(matches) == 1:\n+                            newname = matches[0][0]\n+                            matches = []\n+                if not newname and (not matches):\n+                    if name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n                         searchname = '.' + name\n", "normalized_occurrence": 1}
