{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..a43b733 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -155,6 +155,12 @@ class ValidationError(Exception):\n             return sum(dict(self).values(), [])\n         return list(self)\n \n+    def _normalize_error_dict(self, error_dict):\n+        \"\"\"\n+        Normalize error dictionary by sorting the error lists for each field.\n+        \"\"\"\n+        return {field: sorted(errors) for field, errors in sorted(error_dict.items())}\n+\n     def update_error_dict(self, error_dict):\n         if hasattr(self, 'error_dict'):\n             for field, error_list in self.error_dict.items():\n@@ -174,6 +180,13 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)\n+        return sorted(self.messages) == sorted(other.messages)\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +203,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def _normalize_error_dict(self, error_dict):\n+        \"\"\"\n+        Normalize error dictionary by sorting the error lists for each field.\n+        \"\"\"\n+        return {field: sorted(errors) for field, errors in sorted(error_dict.items())}\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)\n+        return sorted(self.messages) == sorted(other.messages)\n+", "normalized_occurrence": 1}
