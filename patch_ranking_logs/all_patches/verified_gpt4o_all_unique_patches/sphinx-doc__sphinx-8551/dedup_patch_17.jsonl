{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..9e1a8c0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -88,8 +88,9 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'),\n                   'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+        # If the target text is unqualified, prepend the current module context\n+        if '.' not in text and kwargs['py:module']:\n+            text = f\"{kwargs['py:module']}.{text}\"\n \n     return pending_xref('', nodes.Text(text),\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n@@ -1249,42 +1250,24 @@ class PythonDomain(Domain):\n         matches = []  # type: List[Tuple[str, ObjectEntry]]\n \n         newname = None\n-        if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n-                    fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n-                        newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n-        else:\n-            # NOTE: searching for exact match, object type is not considered\n-            if name in self.objects:\n-                newname = name\n-            elif type == 'mod':\n-                # only exact matches allowed for modules\n-                return []\n-            elif classname and classname + '.' + name in self.objects:\n-                newname = classname + '.' + name\n-            elif modname and modname + '.' + name in self.objects:\n-                newname = modname + '.' + name\n-            elif modname and classname and \\\n-                    modname + '.' + classname + '.' + name in self.objects:\n+        if modname:\n+            if classname and modname + '.' + classname + '.' + name in self.objects:\n                 newname = modname + '.' + classname + '.' + name\n+            elif modname + '.' + name in self.objects:\n+                newname = modname + '.' + name\n+        if not newname and classname and classname + '.' + name in self.objects:\n+            newname = classname + '.' + name\n+        if not newname and name in self.objects:\n+            newname = name\n+\n+        if newname:\n+            matches.append((newname, self.objects[newname]))\n+\n+        if not matches and searchmode == 1:\n+            # Fuzzy search mode, searching across all objects\n+            searchname = '.' + name\n+            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                       if oname.endswith(searchname)]\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..2dab144 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -41,8 +41,8 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         reftype = 'class'\n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+        if '.' not in text and kwargs['py:module']:\n+            text = f\"{kwargs['py:module']}.{text}\"\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n@@ -748,34 +748,20 @@ class PythonDomain(Domain):\n             return []\n         matches = []\n         newname = None\n-        if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n-                    fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n-                        newname = fullname\n-                if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n-        elif name in self.objects:\n-            newname = name\n-        elif type == 'mod':\n-            return []\n-        elif classname and classname + '.' + name in self.objects:\n+        if modname:\n+            if classname and modname + '.' + classname + '.' + name in self.objects:\n+                newname = modname + '.' + classname + '.' + name\n+            elif modname + '.' + name in self.objects:\n+                newname = modname + '.' + name\n+        if not newname and classname and (classname + '.' + name in self.objects):\n             newname = classname + '.' + name\n-        elif modname and modname + '.' + name in self.objects:\n-            newname = modname + '.' + name\n-        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n-            newname = modname + '.' + classname + '.' + name\n+        if not newname and name in self.objects:\n+            newname = name\n+        if newname:\n+            matches.append((newname, self.objects[newname]))\n+        if not matches and searchmode == 1:\n+            searchname = '.' + name\n+            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname)]\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "normalized_occurrence": 1}
