{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..c39422c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,15 +40,15 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n-        if not other:\n+        if isinstance(other, Q) and not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n-        # Or if this Q is empty, ignore it and just use `other`.\n-        elif not self:\n+        # Or if this Q is empty and other is Q, ignore it and just use `other`.\n+        elif not self and isinstance(other, Q):\n             _, args, kwargs = other.deconstruct()\n             return type(other)(*args, **kwargs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..0c88005 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -17,12 +17,12 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n-        if not other:\n+        if isinstance(other, Q) and (not other):\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n-        elif not self:\n+        elif not self and isinstance(other, Q):\n             _, args, kwargs = other.deconstruct()\n             return type(other)(*args, **kwargs)\n         obj = type(self)()\n", "normalized_occurrence": 1}
