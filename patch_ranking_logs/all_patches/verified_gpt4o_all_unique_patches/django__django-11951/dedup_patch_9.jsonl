{"model_name_or_path": "agentless", "instance_id": "django__django-11951", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex ba5549a..d0de2e9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -455,7 +455,9 @@ class QuerySet:\n         # PostgreSQL via the RETURNING ID clause. It should be possible for\n         # Oracle as well, but the semantics for extracting the primary keys is\n         # trickier so it's not done yet.\n-        assert batch_size is None or batch_size > 0\n+        max_batch_size = connection.ops.bulk_batch_size(['INSERT'], fields, objs)\n+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n+        assert batch_size > 0\n         # Check that the parents share the same concrete model with the our\n         # model to detect the inheritance pattern ConcreteGrandParent ->\n         # MultiTableParent -> ProxyChild. Simply checking self.model._meta.proxy\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 69276ed..fbb4364 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -255,7 +255,9 @@ class QuerySet:\n             if obj.pk is None:\n                 obj.pk = obj._meta.pk.get_pk_value_on_save(obj)\n     def bulk_create(self, objs, batch_size=None, ignore_conflicts=False):\n-        assert batch_size is None or batch_size > 0\n+        max_batch_size = connection.ops.bulk_batch_size(['INSERT'], fields, objs)\n+        batch_size = min(batch_size, max_batch_size) if batch_size else max_batch_size\n+        assert batch_size > 0\n         for parent in self.model._meta.get_parent_list():\n             if parent._meta.concrete_model is not self.model._meta.concrete_model:\n                 raise ValueError(\"Can't bulk create a multi-table inherited model\")\n", "normalized_occurrence": 1}
