{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex bdb6b4c..66abca0 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -121,21 +121,28 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         Return a dictionary of {field_name: (field_name_other_table, other_table)}\n         representing all relationships to the given table.\n         \"\"\"\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        key_columns = self.get_key_columns(cursor, table_name)\n+        return {row[0]: (row[2], row[1]) for row in key_columns}\n \n     def get_key_columns(self, cursor, table_name):\n+        \"\"\"\n+        Returns a list of (column_name, referenced_table_name, referenced_column_name) for all\n+        key columns in given table.\n+        \"\"\"\n         cursor.execute(\"\"\"\n-            SELECT a1.attname, c2.relname, a2.attname\n-            FROM pg_constraint con\n-            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\n-            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\n-            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\n-            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\n-            WHERE\n-                c1.relname = %s AND\n-                con.contype = 'f' AND\n-                c1.relnamespace = c2.relnamespace AND\n-                pg_catalog.pg_table_is_visible(c1.oid)\n+            SELECT \n+                kcu.column_name,\n+                ccu.table_name,\n+                ccu.column_name AS referenced_column\n+            FROM information_schema.constraint_column_usage ccu\n+            JOIN information_schema.key_column_usage kcu\n+                ON ccu.constraint_schema = kcu.constraint_schema\n+                AND ccu.constraint_name = kcu.constraint_name\n+            JOIN information_schema.table_constraints tc\n+                ON tc.constraint_schema = kcu.constraint_schema\n+                AND tc.constraint_name = kcu.constraint_name\n+            WHERE kcu.table_name = %s\n+                AND tc.constraint_type = 'FOREIGN KEY'\n         \"\"\", [table_name])\n         return cursor.fetchall()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex c5c043d..ab6698f 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -26,9 +26,10 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         cursor.execute(\"\\n            SELECT s.relname as sequence_name, col.attname\\n            FROM pg_class s\\n                JOIN pg_namespace sn ON sn.oid = s.relnamespace\\n                JOIN pg_depend d ON d.refobjid = s.oid AND d.refclassid = 'pg_class'::regclass\\n                JOIN pg_attrdef ad ON ad.oid = d.objid AND d.classid = 'pg_attrdef'::regclass\\n                JOIN pg_attribute col ON col.attrelid = ad.adrelid AND col.attnum = ad.adnum\\n                JOIN pg_class tbl ON tbl.oid = ad.adrelid\\n            WHERE s.relkind = 'S'\\n              AND d.deptype in ('a', 'n')\\n              AND pg_catalog.pg_table_is_visible(tbl.oid)\\n              AND tbl.relname = %s\\n        \", [table_name])\n         return [{'name': row[0], 'table': table_name, 'column': row[1]} for row in cursor.fetchall()]\n     def get_relations(self, cursor, table_name):\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        key_columns = self.get_key_columns(cursor, table_name)\n+        return {row[0]: (row[2], row[1]) for row in key_columns}\n     def get_key_columns(self, cursor, table_name):\n-        cursor.execute(\"\\n            SELECT a1.attname, c2.relname, a2.attname\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE\\n                c1.relname = %s AND\\n                con.contype = 'f' AND\\n                c1.relnamespace = c2.relnamespace AND\\n                pg_catalog.pg_table_is_visible(c1.oid)\\n        \", [table_name])\n+        cursor.execute(\"\\n            SELECT \\n                kcu.column_name,\\n                ccu.table_name,\\n                ccu.column_name AS referenced_column\\n            FROM information_schema.constraint_column_usage ccu\\n            JOIN information_schema.key_column_usage kcu\\n                ON ccu.constraint_schema = kcu.constraint_schema\\n                AND ccu.constraint_name = kcu.constraint_name\\n            JOIN information_schema.table_constraints tc\\n                ON tc.constraint_schema = kcu.constraint_schema\\n                AND tc.constraint_name = kcu.constraint_name\\n            WHERE kcu.table_name = %s\\n                AND tc.constraint_type = 'FOREIGN KEY'\\n        \", [table_name])\n         return cursor.fetchall()\n     def get_constraints(self, cursor, table_name):\n         constraints = {}\n", "normalized_occurrence": 1}
