{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..55e9089 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,7 +107,7 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n-        self.n_neighbors = n_neighbors\n+        self.n_neighbors = self._validate_n_neighbors(n_neighbors)\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -270,7 +270,14 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n class KNeighborsMixin(object):\n     \"\"\"Mixin for k-neighbors searches\"\"\"\n \n+    def _validate_n_neighbors(self, n_neighbors):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(f\"n_neighbors must be an integer, got {type(n_neighbors).__name__}\")\n+        return n_neighbors\n+\n     def kneighbors(self, X=None, n_neighbors=None, return_distance=True):\n+        n_neighbors = self._validate_n_neighbors(n_neighbors)\n         \"\"\"Finds the K-neighbors of a point.\n \n         Returns indices of and distances to the neighbors of each point.\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..d6a17ed 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,7 +47,7 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n-        self.n_neighbors = n_neighbors\n+        self.n_neighbors = self._validate_n_neighbors(n_neighbors)\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -158,7 +158,13 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     def _pairwise(self):\n         return self.metric == 'precomputed'\n class KNeighborsMixin(object):\n+    def _validate_n_neighbors(self, n_neighbors):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(f'n_neighbors must be an integer, got {type(n_neighbors).__name__}')\n+        return n_neighbors\n     def kneighbors(self, X=None, n_neighbors=None, return_distance=True):\n+        n_neighbors = self._validate_n_neighbors(n_neighbors)\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n", "normalized_occurrence": 1}
