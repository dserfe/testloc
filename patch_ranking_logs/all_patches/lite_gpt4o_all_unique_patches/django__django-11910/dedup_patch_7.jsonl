{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 7d17cf4..d737276 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -163,6 +163,9 @@ class MigrationAutodetector:\n         self._prepare_field_lists()\n         self._generate_through_model_map()\n \n+        # Ensure to_field in ForeignKeys are updated for renamed fields\n+        self._update_foreign_key_to_fields()\n+\n         # Generate non-rename model operations\n         self.generate_deleted_models()\n         self.generate_created_models()\n@@ -844,7 +847,19 @@ class MigrationAutodetector:\n                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name\n                             break\n \n-    def generate_added_fields(self):\n+    def _update_foreign_key_to_fields(self):\n+        \"\"\"Update to_field in ForeignKeys to point to the new field names if they have been renamed.\"\"\"\n+        for app_label, model_name in self.kept_model_keys:\n+            model_state = self.to_state.models[app_label, model_name]\n+            for field_name, field in model_state.fields:\n+                if field.remote_field and hasattr(field.remote_field, 'field_name'):\n+                    to_field_key = (\n+                        field.remote_field.model._meta.app_label,\n+                        field.remote_field.model._meta.model_name,\n+                        field.remote_field.field_name,\n+                    )\n+                    if to_field_key in self.renamed_fields:\n+                        field.remote_field.field_name = self.renamed_fields[to_field_key]\n         \"\"\"Make AddField operations.\"\"\"\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             self._generate_added_field(app_label, model_name, field_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 90e427d..7b6cc79 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -84,6 +84,7 @@ class MigrationAutodetector:\n         self.generate_renamed_models()\n         self._prepare_field_lists()\n         self._generate_through_model_map()\n+        self._update_foreign_key_to_fields()\n         self.generate_deleted_models()\n         self.generate_created_models()\n         self.generate_deleted_proxies()\n@@ -407,7 +408,15 @@ class MigrationAutodetector:\n                             self.old_field_keys.add((app_label, model_name, field_name))\n                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name\n                             break\n-    def generate_added_fields(self):\n+    def _update_foreign_key_to_fields(self):\n+        for app_label, model_name in self.kept_model_keys:\n+            model_state = self.to_state.models[app_label, model_name]\n+            for field_name, field in model_state.fields:\n+                if field.remote_field and hasattr(field.remote_field, 'field_name'):\n+                    to_field_key = (field.remote_field.model._meta.app_label, field.remote_field.model._meta.model_name, field.remote_field.field_name)\n+                    if to_field_key in self.renamed_fields:\n+                        field.remote_field.field_name = self.renamed_fields[to_field_key]\n+        'Make AddField operations.'\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             self._generate_added_field(app_label, model_name, field_name)\n     def _generate_added_field(self, app_label, model_name, field_name):\n", "normalized_occurrence": 1}
