{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..d73456c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, _GenericAlias\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -23,10 +23,17 @@ from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n+    annotations = app.env.temp_data.setdefault('annotations', {})\n+    annotation = annotations.setdefault(name, OrderedDict())\n+\n+    if isinstance(obj, _GenericAlias):\n+        # Ensure docstring for type aliases is captured\n+        docstring = inspect.getdoc(obj)\n+        if docstring:\n+            annotation['docstring'] = docstring\n+\n     try:\n         if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n@@ -54,17 +61,20 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         return\n \n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if docstring := annotations.get(fullname, {}).pop('docstring', None):\n+        contentnode.insert(0, nodes.paragraph(text=docstring))\n+\n+    if type_annotations := annotations.get(fullname, {}):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == \"all\":\n-                modify_field_list(field_list, annotations[fullname])\n+                modify_field_list(field_list, type_annotations)\n             else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+                augment_descriptions_with_types(field_list, type_annotations)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..aae470b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,16 +1,20 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, _GenericAlias\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    annotations = app.env.temp_data.setdefault('annotations', {})\n+    annotation = annotations.setdefault(name, OrderedDict())\n+    if isinstance(obj, _GenericAlias):\n+        docstring = inspect.getdoc(obj)\n+        if docstring:\n+            annotation['docstring'] = docstring\n     try:\n         if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n@@ -33,16 +37,18 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     except KeyError:\n         return\n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if (docstring := annotations.get(fullname, {}).pop('docstring', None)):\n+        contentnode.insert(0, nodes.paragraph(text=docstring))\n+    if (type_annotations := annotations.get(fullname, {})):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == 'all':\n-                modify_field_list(field_list, annotations[fullname])\n+                modify_field_list(field_list, type_annotations)\n             else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+                augment_descriptions_with_types(field_list, type_annotations)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
