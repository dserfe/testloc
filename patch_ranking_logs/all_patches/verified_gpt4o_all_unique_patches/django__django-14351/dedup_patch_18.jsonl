{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..96bd59c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -478,6 +478,10 @@ class Query(BaseExpression):\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n+                # Ensure subquery only returns required columns in Q object conditions.\n+                if cols:\n+                    if cols[0].alias == 'U0':\n+                        cols = [cols[0]]\n                 # Make sure the annotation_select wont use cached results.\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..8b41a73 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -269,6 +269,9 @@ class Query(BaseExpression):\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n                     annotation_select_mask.remove(alias)\n+                if cols:\n+                    if cols[0].alias == 'U0':\n+                        cols = [cols[0]]\n                 inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and (not inner_query.default_cols) and (not inner_query.annotation_select_mask):\n                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n", "normalized_occurrence": 1}
