{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..e0cc9fe 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -426,6 +426,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.deferrable\n         ):\n             super().add_constraint(model, constraint)\n+        elif isinstance(constraint, UniqueConstraint) and not constraint.condition:\n+            self.execute(\"CREATE UNIQUE INDEX %s ON %s (%s)\" % (\n+                self.quote_name(constraint.name),\n+                self.quote_name(model._meta.db_table),\n+                ', '.join(self.quote_name(field_name) for field_name in constraint.fields),\n+            ))\n         else:\n             self._remake_table(model)\n \n@@ -437,8 +443,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.deferrable\n         ):\n             super().remove_constraint(model, constraint)\n+        elif isinstance(constraint, UniqueConstraint) and not constraint.condition:\n+            self.execute(\"DROP INDEX %s\" % self.quote_name(constraint.name))\n         else:\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..c763ed9 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -203,11 +203,15 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n             super().add_constraint(model, constraint)\n+        elif isinstance(constraint, UniqueConstraint) and (not constraint.condition):\n+            self.execute('CREATE UNIQUE INDEX %s ON %s (%s)' % (self.quote_name(constraint.name), self.quote_name(model._meta.db_table), ', '.join((self.quote_name(field_name) for field_name in constraint.fields))))\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n             super().remove_constraint(model, constraint)\n+        elif isinstance(constraint, UniqueConstraint) and (not constraint.condition):\n+            self.execute('DROP INDEX %s' % self.quote_name(constraint.name))\n         else:\n             self._remake_table(model)\n     def _collate_sql(self, collation):\n", "normalized_occurrence": 1}
