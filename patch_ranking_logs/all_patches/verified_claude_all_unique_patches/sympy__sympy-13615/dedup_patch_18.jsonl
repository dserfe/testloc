{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..9349da5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1725,6 +1725,16 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n+        # If A is a finite set, we can handle numeric and symbolic elements separately\n+        if isinstance(A, FiniteSet):\n+            numeric_elements = {e for e in A.args if not isinstance(e, Symbol)}\n+            symbolic_elements = {e for e in A.args if isinstance(e, Symbol)}\n+            if numeric_elements and symbolic_elements:\n+                numeric_complement = Complement(FiniteSet(*numeric_elements), B)\n+                if symbolic_elements:\n+                    return Union(numeric_complement, FiniteSet(*symbolic_elements))\n+                return numeric_complement\n+\n         result = B._complement(A)\n         if result != None:\n             return result\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..22bf78f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -752,6 +752,14 @@ class Complement(Set, EvalfMixin):\n             return EmptySet()\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n+        if isinstance(A, FiniteSet):\n+            numeric_elements = {e for e in A.args if not isinstance(e, Symbol)}\n+            symbolic_elements = {e for e in A.args if isinstance(e, Symbol)}\n+            if numeric_elements and symbolic_elements:\n+                numeric_complement = Complement(FiniteSet(*numeric_elements), B)\n+                if symbolic_elements:\n+                    return Union(numeric_complement, FiniteSet(*symbolic_elements))\n+                return numeric_complement\n         result = B._complement(A)\n         if result != None:\n             return result\n", "normalized_occurrence": 1}
