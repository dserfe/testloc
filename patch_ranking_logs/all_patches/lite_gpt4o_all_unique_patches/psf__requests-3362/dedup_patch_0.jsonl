{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..0192c08 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -690,9 +690,7 @@ class Response(object):\n         # simulate reading small chunks of the content\n         reused_chunks = iter_slices(self._content, chunk_size)\n \n-        stream_chunks = generate()\n-\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n+        chunks = generate()\n \n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..e2cb645 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -357,8 +357,7 @@ class Response(object):\n         elif not isinstance(chunk_size, int):\n             raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n         reused_chunks = iter_slices(self._content, chunk_size)\n-        stream_chunks = generate()\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n+        chunks = generate()\n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n         return chunks\n", "normalized_occurrence": 1}
