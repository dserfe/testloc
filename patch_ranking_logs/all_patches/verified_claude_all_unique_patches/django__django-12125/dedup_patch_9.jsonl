{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..4bd423a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -91,12 +91,35 @@ class DeconstructableSerializer(BaseSerializer):\n     @staticmethod\n     def _serialize_path(path):\n         module, name = path.rsplit(\".\", 1)\n+        # Handle django.db.models specially\n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            # Split into module path and class path\n+            module_parts = module.split('.')\n+            max_path = len(module_parts)\n+            \n+            # Try to import the longest possible valid module\n+            while max_path > 0:\n+                try:\n+                    potential_module = '.'.join(module_parts[:max_path])\n+                    __import__(potential_module)\n+                    break\n+                except ImportError:\n+                    max_path -= 1\n+            \n+            if max_path == 0:\n+                # Fallback to original behavior if no valid module found\n+                imports = {\"import %s\" % module}\n+                name = path\n+            else:\n+                # Construct the proper import and name\n+                base_module = '.'.join(module_parts[:max_path])\n+                class_path = '.'.join(module_parts[max_path:] + [name])\n+                imports = {\"import %s\" % base_module}\n+                name = \"%s.%s\" % (base_module, class_path)\n+                \n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..60fb726 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -73,8 +73,23 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n-            imports = {'import %s' % module}\n-            name = path\n+            module_parts = module.split('.')\n+            max_path = len(module_parts)\n+            while max_path > 0:\n+                try:\n+                    potential_module = '.'.join(module_parts[:max_path])\n+                    __import__(potential_module)\n+                    break\n+                except ImportError:\n+                    max_path -= 1\n+            if max_path == 0:\n+                imports = {'import %s' % module}\n+                name = path\n+            else:\n+                base_module = '.'.join(module_parts[:max_path])\n+                class_path = '.'.join(module_parts[max_path:] + [name])\n+                imports = {'import %s' % base_module}\n+                name = '%s.%s' % (base_module, class_path)\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
