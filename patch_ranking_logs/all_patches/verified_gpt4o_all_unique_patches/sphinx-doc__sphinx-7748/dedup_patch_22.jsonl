{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..c97f758 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1044,7 +1044,7 @@ class DocstringSignatureMixin:\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,10 +1066,8 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            results.append((args, retann))\n+        return results if results else None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1087,7 +1085,7 @@ class DocstringSignatureMixin:\n             # the feature is enabled\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                self.args, self.retann = result[0] if result else (None, None)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n@@ -1158,7 +1156,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        sigs = [sig] * len(self._find_signature())\n \n         if inspect.is_singledispatch_function(self.object):\n             # append signature of singledispatch'ed functions\n@@ -1170,7 +1168,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n                     documenter = FunctionDocumenter(self.directive, '')\n                     documenter.object = func\n-                    sigs.append(documenter.format_signature())\n+                    sigs.extend(documenter.format_signature().split(\"\\n\"))\n \n         return \"\\n\".join(sigs)\n \n@@ -1634,7 +1632,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        sigs = [sig] * len(self._find_signature())\n \n         meth = self.parent.__dict__.get(self.objpath[-1])\n         if inspect.is_singledispatch_method(meth):\n@@ -1649,7 +1647,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     documenter.parent = self.parent\n                     documenter.object = func\n                     documenter.objpath = [None]\n-                    sigs.append(documenter.format_signature())\n+                    sigs.extend(documenter.format_signature().split(\"\\n\"))\n \n         return \"\\n\".join(sigs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..c00068b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -759,7 +759,7 @@ class DocstringSignatureMixin:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -776,9 +776,8 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n-        return result\n+            results.append((args, retann))\n+        return results if results else None\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:\n@@ -792,7 +791,7 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                self.args, self.retann = result[0] if result else (None, None)\n         return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n@@ -849,7 +848,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        sigs = [sig] * len(self._find_signature())\n         if inspect.is_singledispatch_function(self.object):\n             for typ, func in self.object.registry.items():\n                 if typ is object:\n@@ -858,7 +857,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     self.annotate_to_first_argument(func, typ)\n                     documenter = FunctionDocumenter(self.directive, '')\n                     documenter.object = func\n-                    sigs.append(documenter.format_signature())\n+                    sigs.extend(documenter.format_signature().split('\\n'))\n         return '\\n'.join(sigs)\n \n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n@@ -1199,7 +1198,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n \n     def format_signature(self, **kwargs: Any) -> str:\n         sig = super().format_signature(**kwargs)\n-        sigs = [sig]\n+        sigs = [sig] * len(self._find_signature())\n         meth = self.parent.__dict__.get(self.objpath[-1])\n         if inspect.is_singledispatch_method(meth):\n             for typ, func in meth.dispatcher.registry.items():\n@@ -1211,7 +1210,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n                     documenter.parent = self.parent\n                     documenter.object = func\n                     documenter.objpath = [None]\n-                    sigs.append(documenter.format_signature())\n+                    sigs.extend(documenter.format_signature().split('\\n'))\n         return '\\n'.join(sigs)\n \n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n", "normalized_occurrence": 1}
