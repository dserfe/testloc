{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..9dabd73 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -27,13 +27,19 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n-            for param in sig.parameters.values():\n-                if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n-    except (TypeError, ValueError):\n+            if isinstance(obj, property):\n+                # Handle properties separately\n+                return_annotation = typing.stringify(obj.fget.__annotations__.get('return', None))\n+                if return_annotation:\n+                    annotation['return'] = return_annotation\n+            else:\n+                sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n+    except (TypeError, ValueError, AttributeError):\n         pass\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..46e5a9a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -11,13 +11,18 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n-            for param in sig.parameters.values():\n-                if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n-    except (TypeError, ValueError):\n+            if isinstance(obj, property):\n+                return_annotation = typing.stringify(obj.fget.__annotations__.get('return', None))\n+                if return_annotation:\n+                    annotation['return'] = return_annotation\n+            else:\n+                sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation)\n+    except (TypeError, ValueError, AttributeError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n", "normalized_occurrence": 1}
