{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..e8653e9 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -132,6 +132,12 @@ class Piecewise(Function):\n             if cond is true:\n                 break\n \n+        assumptions = [k for k in options.keys() if k.startswith('assume')]\n+        if assumptions:\n+            expr, cond = zip(*newargs)\n+            if not all(check_assumptions(e, **dict((k[6:], options.pop(k)) for k in assumptions)) for e in expr):\n+                return S.NaN\n+\n         if options.pop('evaluate', True):\n             r = cls.eval(*newargs)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..8eb2633 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -50,6 +50,11 @@ class Piecewise(Function):\n             newargs.append(pair)\n             if cond is true:\n                 break\n+        assumptions = [k for k in options.keys() if k.startswith('assume')]\n+        if assumptions:\n+            expr, cond = zip(*newargs)\n+            if not all((check_assumptions(e, **dict(((k[6:], options.pop(k)) for k in assumptions))) for e in expr)):\n+                return S.NaN\n         if options.pop('evaluate', True):\n             r = cls.eval(*newargs)\n         else:\n", "normalized_occurrence": 1}
