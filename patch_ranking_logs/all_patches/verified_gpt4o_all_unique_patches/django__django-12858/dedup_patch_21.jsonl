{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..a728aa4 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -192,6 +192,20 @@ class Options:\n \n             # order_with_respect_and ordering are mutually exclusive.\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n+            \n+            # Validate ordering fields\n+            if self.ordering:\n+                for order in self.ordering:\n+                    if isinstance(order, str) and LOOKUP_SEP in order:\n+                        parts = order.lstrip('-').split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        field = self.get_field(field_name, many_to_many=False)\n+                        for part in parts[1:]:\n+                            if part not in field.get_transform_classes():\n+                                raise FieldError(\n+                                    \"'ordering' refers to an invalid lookup: \"\n+                                    \"'%s' on field '%s'\" % (part, field_name)\n+                                )\n \n             # Any leftover attributes must be invalid.\n             if meta_attrs != {}:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..02dbc31 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -118,6 +118,15 @@ class Options:\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n+            if self.ordering:\n+                for order in self.ordering:\n+                    if isinstance(order, str) and LOOKUP_SEP in order:\n+                        parts = order.lstrip('-').split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        field = self.get_field(field_name, many_to_many=False)\n+                        for part in parts[1:]:\n+                            if part not in field.get_transform_classes():\n+                                raise FieldError(\"'ordering' refers to an invalid lookup: '%s' on field '%s'\" % (part, field_name))\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n         else:\n", "normalized_occurrence": 1}
