{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22719", "model_patch": "diff --git a/lib/matplotlib/units.py b/lib/matplotlib/units.py\nindex 460910e..3e75dac 100644\n--- a/lib/matplotlib/units.py\n+++ b/lib/matplotlib/units.py\n@@ -187,9 +187,9 @@ class Registry(dict):\n             # type matters).  If x is a regular ndarray, getdata() just returns\n             # the array itself.\n             x = np.ma.getdata(x).ravel()\n-            # If there are no elements in x, infer the units from its dtype\n+            # If there are no elements in x, return None to allow empty data plotting\n             if not x.size:\n-                return self.get_converter(np.array([0], dtype=x.dtype))\n+                return None\n         for cls in type(x).__mro__:  # Look up in the cache.\n             try:\n                 return self[cls]\n@@ -208,4 +208,4 @@ class Registry(dict):\n \n \n registry = Registry()\n-registry[Decimal] = DecimalConverter()\n+registry[Decimal] = DecimalConverter()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/units.py b/lib/matplotlib/units.py\nindex 6d240c4..beaaac6 100644\n--- a/lib/matplotlib/units.py\n+++ b/lib/matplotlib/units.py\n@@ -57,7 +57,7 @@ class Registry(dict):\n         if isinstance(x, np.ndarray):\n             x = np.ma.getdata(x).ravel()\n             if not x.size:\n-                return self.get_converter(np.array([0], dtype=x.dtype))\n+                return None\n         for cls in type(x).__mro__:\n             try:\n                 return self[cls]\n", "normalized_occurrence": 2}
