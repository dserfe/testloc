{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a096f65..4492e3e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,35 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        query = self.query\n+        if not query.annotations:\n+            return query.get_count(using=self.db)\n+            \n+        # Strip annotations that are not referenced in filters or ordering\n+        original_annotations = query.annotations\n+        referenced_annotations = set()\n+\n+        # Check annotations used in filters\n+        for q in query.where.children:\n+            referenced_annotations.update(q.refs)\n+        \n+        # Check annotations used in ordering\n+        for order in query.order_by:\n+            if order.startswith('-'):\n+                order = order[1:]\n+            referenced_annotations.add(order)\n+\n+        # Keep only referenced annotations\n+        query.annotations = {\n+            k: v for k, v in original_annotations.items()\n+            if k in referenced_annotations\n+        }\n+\n+        try:\n+            return query.get_count(using=self.db)\n+        finally:\n+            # Restore original annotations\n+            query.annotations = original_annotations\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 56014f8..ce46a36 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -323,7 +323,22 @@ class QuerySet(AltersData):\n     def count(self):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n-        return self.query.get_count(using=self.db)\n+        query = self.query\n+        if not query.annotations:\n+            return query.get_count(using=self.db)\n+        original_annotations = query.annotations\n+        referenced_annotations = set()\n+        for q in query.where.children:\n+            referenced_annotations.update(q.refs)\n+        for order in query.order_by:\n+            if order.startswith('-'):\n+                order = order[1:]\n+            referenced_annotations.add(order)\n+        query.annotations = {k: v for k, v in original_annotations.items() if k in referenced_annotations}\n+        try:\n+            return query.get_count(using=self.db)\n+        finally:\n+            query.annotations = original_annotations\n     async def acount(self):\n         return await sync_to_async(self.count)()\n     def get(self, *args, **kwargs):\n", "normalized_occurrence": 1}
