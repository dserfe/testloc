{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..476a9af 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,8 +536,9 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n+        complex_terms = []\n+        \n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -547,23 +548,40 @@ class Add(Expr, AssocOp):\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                im_terms.append(a)\n             else:\n-                return\n+                complex_terms.append(a)\n+                \n+        # If all terms are zero\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n+            \n+        # If we have a mixture of imaginary and complex terms,\n+        # we can't determine the result without further analysis\n+        if complex_terms and (im_terms or nz):\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n+            \n+        # Handle pure real case\n+        if not im_terms and not complex_terms:\n+            b = self.func(*nz)\n+            if b.is_zero:\n                 return True\n-            if im and not im_or_z:\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+            return None\n+            \n+        # If we have pure imaginary terms\n+        if im_terms and not complex_terms and not nz:\n+            b = self.func(*im_terms)\n+            if b.is_zero:\n+                return True\n+            if b.is_zero is False:\n+                return None\n+            return None\n+            \n+        # For all other cases, return None as we cannot\n+        # determine with certainty\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..1cf9edc 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,8 +290,8 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n+        complex_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -301,23 +301,28 @@ class Add(Expr, AssocOp):\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                im_terms.append(a)\n             else:\n-                return\n+                complex_terms.append(a)\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n+        if complex_terms and (im_terms or nz):\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n+        if not im_terms and (not complex_terms):\n+            b = self.func(*nz)\n+            if b.is_zero:\n                 return True\n-            if im and (not im_or_z):\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+            return None\n+        if im_terms and (not complex_terms) and (not nz):\n+            b = self.func(*im_terms)\n+            if b.is_zero:\n+                return True\n+            if b.is_zero is False:\n+                return None\n+            return None\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
