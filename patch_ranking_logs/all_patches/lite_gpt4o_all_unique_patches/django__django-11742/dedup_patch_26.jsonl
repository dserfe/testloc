{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..a7e4676 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -155,6 +155,13 @@ class Field(RegisterLookupMixin):\n         self.unique_for_year = unique_for_year\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n+        if choices and max_length is not None:\n+            longest_choice = max((len(str(value)) for value, _ in choices), default=0)\n+            if longest_choice > max_length:\n+                raise ValueError(\n+                    f\"max_length ({max_length}) is less than the length of the longest choice ({longest_choice}).\"\n+                )\n+            choices = list(choices)\n         self.choices = choices\n         self.help_text = help_text\n         self.db_index = db_index\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..5866e08 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -75,6 +75,11 @@ class Field(RegisterLookupMixin):\n         self.unique_for_year = unique_for_year\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n+        if choices and max_length is not None:\n+            longest_choice = max((len(str(value)) for value, _ in choices), default=0)\n+            if longest_choice > max_length:\n+                raise ValueError(f'max_length ({max_length}) is less than the length of the longest choice ({longest_choice}).')\n+            choices = list(choices)\n         self.choices = choices\n         self.help_text = help_text\n         self.db_index = db_index\n", "normalized_occurrence": 1}
