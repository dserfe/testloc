{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..b46b68d 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1085,7 +1085,8 @@ def parse_expr(s, local_dict=None, transformations=standard_transformations,\n     code = stringify_expr(s, local_dict, global_dict, transformations)\n \n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        # If evaluate is False, wrap the expression with evaluate=False\n+        code = compile(evaluateFalse(f\"Point2D({code})\"), '<string>', 'eval')\n \n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex e068f1d..9d31441 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -512,7 +512,7 @@ def parse_expr(s, local_dict=None, transformations=standard_transformations, glo\n     global_dict['min'] = Min\n     code = stringify_expr(s, local_dict, global_dict, transformations)\n     if not evaluate:\n-        code = compile(evaluateFalse(code), '<string>', 'eval')\n+        code = compile(evaluateFalse(f'Point2D({code})'), '<string>', 'eval')\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(None, ()):\n", "normalized_occurrence": 1}
