{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..ef3410d 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -549,19 +549,21 @@ class Add(Expr, AssocOp):\n             elif a.is_imaginary:\n                 im = True\n             elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                im_I.append(a*S.ImaginaryUnit)\n             else:\n-                return\n+                return None\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n         b = self.func(*nz)\n         if b.is_zero:\n-            if not im_or_z and not im:\n+            im_b = self.func(*im_I)\n+            if im_b.is_zero:\n                 return True\n-            if im and not im_or_z:\n+            if im_b.is_zero is False:\n                 return False\n+            return None\n         if b.is_zero is False:\n             return False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..58807bf 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -303,19 +303,21 @@ class Add(Expr, AssocOp):\n             elif a.is_imaginary:\n                 im = True\n             elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                im_I.append(a * S.ImaginaryUnit)\n             else:\n-                return\n+                return None\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n         b = self.func(*nz)\n         if b.is_zero:\n-            if not im_or_z and (not im):\n+            im_b = self.func(*im_I)\n+            if im_b.is_zero:\n                 return True\n-            if im and (not im_or_z):\n+            if im_b.is_zero is False:\n                 return False\n+            return None\n         if b.is_zero is False:\n             return False\n     def _eval_is_odd(self):\n", "normalized_occurrence": 1}
