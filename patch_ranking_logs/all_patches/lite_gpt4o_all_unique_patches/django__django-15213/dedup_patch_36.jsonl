{"model_name_or_path": "agentless", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d5af8cd..f97103e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -550,13 +550,16 @@ class SQLCompiler:\n                 # This must come after 'select', 'ordering', and 'distinct'\n                 # (see docstring of get_from_clause() for details).\n                 from_, f_params = self.get_from_clause()\n-                try:\n-                    where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n-                except EmptyResultSet:\n-                    if self.elide_empty:\n-                        raise\n-                    # Use a predicate that's always False.\n-                    where, w_params = '0 = 1', []\n+                if self.where is not None and hasattr(self.where, 'children') and not self.where.children:\n+                    where, w_params = '', []\n+                else:\n+                    try:\n+                        where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n+                    except EmptyResultSet:\n+                        if self.elide_empty:\n+                            raise\n+                        # Use a predicate that's always False.\n+                        where, w_params = '0 = 1', []\n                 having, h_params = self.compile(self.having) if self.having is not None else (\"\", [])\n                 result = ['SELECT']\n                 params = []\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 4c4fd00..5038640 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -308,12 +308,15 @@ class SQLCompiler:\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 from_, f_params = self.get_from_clause()\n-                try:\n-                    where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n-                except EmptyResultSet:\n-                    if self.elide_empty:\n-                        raise\n-                    where, w_params = ('0 = 1', [])\n+                if self.where is not None and hasattr(self.where, 'children') and (not self.where.children):\n+                    where, w_params = ('', [])\n+                else:\n+                    try:\n+                        where, w_params = self.compile(self.where) if self.where is not None else ('', [])\n+                    except EmptyResultSet:\n+                        if self.elide_empty:\n+                            raise\n+                        where, w_params = ('0 = 1', [])\n                 having, h_params = self.compile(self.having) if self.having is not None else ('', [])\n                 result = ['SELECT']\n                 params = []\n", "normalized_occurrence": 1}
