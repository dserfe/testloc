{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..fdd5e79 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -53,6 +53,9 @@ class SQLCompiler:\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n+        if group_by:\n+            # Ensure subquery references are properly included to avoid ambiguity.\n+            group_by = self.ensure_subquery_group_by(group_by)\n         return extra_select, order_by, group_by\n \n     def get_group_by(self, select, order_by):\n@@ -140,6 +143,18 @@ class SQLCompiler:\n                 seen.add((sql, params_hash))\n         return result\n \n+    def ensure_subquery_group_by(self, group_by):\n+        \"\"\"\n+        Ensure that subqueries in group_by are properly referenced to avoid ambiguity.\n+        \"\"\"\n+        new_group_by = []\n+        for sql, params in group_by:\n+            if 'SELECT' in sql:\n+                subquery_alias = \"subquery\"\n+                sql = f\"({sql})\"\n+            new_group_by.append((sql, params))\n+        return new_group_by\n+\n     def collapse_group_by(self, expressions, having):\n         # If the DB can group by primary key, then group by the primary key of\n         # query's main model. Note that for PostgreSQL the GROUP BY clause must\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..beca97d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -36,6 +36,8 @@ class SQLCompiler:\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n+        if group_by:\n+            group_by = self.ensure_subquery_group_by(group_by)\n         return (extra_select, order_by, group_by)\n     def get_group_by(self, select, order_by):\n         if self.query.group_by is None:\n@@ -70,6 +72,14 @@ class SQLCompiler:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n         return result\n+    def ensure_subquery_group_by(self, group_by):\n+        new_group_by = []\n+        for sql, params in group_by:\n+            if 'SELECT' in sql:\n+                subquery_alias = 'subquery'\n+                sql = f'({sql})'\n+            new_group_by.append((sql, params))\n+        return new_group_by\n     def collapse_group_by(self, expressions, having):\n         if self.connection.features.allows_group_by_pk:\n             pk = None\n", "normalized_occurrence": 1}
