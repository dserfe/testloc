{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26342", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex db3f45f..5d3ca9d 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -977,6 +977,19 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n                 self.axes.add_collection(col)\n         return self._old_style_split_collections\n \n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the contour paths.\n+\n+        Parameters\n+        ----------\n+        paths : list of `.Path`\n+            The contour paths to set.\n+        \"\"\"\n+        if not all(isinstance(p, Path) for p in paths):\n+            raise ValueError(\"All elements of paths must be of type Path.\")\n+        self._paths = paths\n+\n     def get_transform(self):\n         \"\"\"Return the `.Transform` instance used by this ContourSet.\"\"\"\n         if self._transform is None:\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n+    def set_paths(self, paths):\n+        if not all((isinstance(p, Path) for p in paths)):\n+            raise ValueError('All elements of paths must be of type Path.')\n+        self._paths = paths", "normalized_occurrence": 1}
