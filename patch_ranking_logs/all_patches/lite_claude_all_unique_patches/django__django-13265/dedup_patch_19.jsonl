{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..1f16bfa 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,6 +40,33 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        \n+        # Pre-process to handle AlterOrderWithRespectTo before AddIndex with _order\n+        has_order_ops = any(\n+            isinstance(op, migrations.AlterOrderWithRespectTo)\n+            for op in operations\n+        )\n+        if has_order_ops:\n+            # Reorder operations to ensure AlterOrderWithRespectTo comes before\n+            # any AddIndex that includes _order\n+            pending_ops = []\n+            for operation in operations:\n+                if isinstance(operation, migrations.AlterOrderWithRespectTo):\n+                    # Add any pending operations that don't depend on _order\n+                    for pending_op in pending_ops:\n+                        if (isinstance(pending_op, migrations.AddIndex) and \n+                            '_order' in pending_op.index.fields):\n+                            continue\n+                        new_operations.append(pending_op)\n+                    pending_ops = []\n+                    new_operations.append(operation)\n+                else:\n+                    pending_ops.append(operation)\n+            # Add remaining pending operations\n+            new_operations.extend(pending_ops)\n+            return new_operations\n+\n+        # Normal optimization loop\n         for i, operation in enumerate(operations):\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..cefa926 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,6 +11,21 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n+        has_order_ops = any((isinstance(op, migrations.AlterOrderWithRespectTo) for op in operations))\n+        if has_order_ops:\n+            pending_ops = []\n+            for operation in operations:\n+                if isinstance(operation, migrations.AlterOrderWithRespectTo):\n+                    for pending_op in pending_ops:\n+                        if isinstance(pending_op, migrations.AddIndex) and '_order' in pending_op.index.fields:\n+                            continue\n+                        new_operations.append(pending_op)\n+                    pending_ops = []\n+                    new_operations.append(operation)\n+                else:\n+                    pending_ops.append(operation)\n+            new_operations.extend(pending_ops)\n+            return new_operations\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n", "normalized_occurrence": 1}
