{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..659fb20 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1971,9 +1971,11 @@ class PrettyPrinter(Printer):\n         else:\n             args = list(product.args)\n \n-        # If quantities are present append them at the back\n-        args = sorted(args, key=lambda x: isinstance(x, Quantity) or\n-                     (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n+        # Handle vector expressions specially - move unit vectors to the end\n+        from sympy.vector import BaseVector, VectorMul\n+        args = sorted(args, key=lambda x: isinstance(x, (BaseVector, VectorMul)) or\n+                     isinstance(x, Quantity) or\n+                     (isinstance(x, Pow) and isinstance(x.base, (Quantity, BaseVector, VectorMul))))\n \n         # Gather terms for numerator/denominator\n         for item in args:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..1d05889 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1432,7 +1432,8 @@ class PrettyPrinter(Printer):\n             args = product.as_ordered_factors()\n         else:\n             args = list(product.args)\n-        args = sorted(args, key=lambda x: isinstance(x, Quantity) or (isinstance(x, Pow) and isinstance(x.base, Quantity)))\n+        from sympy.vector import BaseVector, VectorMul\n+        args = sorted(args, key=lambda x: isinstance(x, (BaseVector, VectorMul)) or isinstance(x, Quantity) or (isinstance(x, Pow) and isinstance(x.base, (Quantity, BaseVector, VectorMul))))\n         for item in args:\n             if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n                 if item.exp != -1:\n", "normalized_occurrence": 1}
