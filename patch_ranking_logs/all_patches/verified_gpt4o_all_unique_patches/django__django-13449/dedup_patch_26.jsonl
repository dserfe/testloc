{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..d6e018f 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1327,10 +1327,16 @@ class Window(Expression):\n         params.extend(window_params)\n         template = template or self.template\n \n-        return template % {\n+        sql = template % {\n             'expression': expr_sql,\n             'window': ''.join(window_sql).strip()\n-        }, params\n+        }\n+\n+        # Apply SQLite specific casting for DecimalField\n+        if connection.vendor == 'sqlite' and self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n+\n+        return sql, params\n \n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..985a528 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -836,7 +836,10 @@ class Window(Expression):\n             window_params.extend(frame_params)\n         params.extend(window_params)\n         template = template or self.template\n-        return (template % {'expression': expr_sql, 'window': ''.join(window_sql).strip()}, params)\n+        sql = template % {'expression': expr_sql, 'window': ''.join(window_sql).strip()}\n+        if connection.vendor == 'sqlite' and self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n+        return (sql, params)\n     def __str__(self):\n         return '{} OVER ({}{}{})'.format(str(self.source_expression), 'PARTITION BY ' + str(self.partition_by) if self.partition_by else '', 'ORDER BY ' + str(self.order_by) if self.order_by else '', str(self.frame or ''))\n     def __repr__(self):\n", "normalized_occurrence": 1}
