{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..fd747be 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -38,10 +39,18 @@ class Mod(Function):\n     def eval(cls, p, q):\n         from sympy.core.add import Add\n         from sympy.core.mul import Mul\n+        from sympy.core.numbers import Integer\n         from sympy.core.singleton import S\n         from sympy.core.exprtools import gcd_terms\n         from sympy.polys.polyerrors import PolynomialError\n         from sympy.polys.polytools import gcd\n+        \n+        # Handle negation properly\n+        if p.could_extract_minus_sign():\n+            if q.is_positive:\n+                return -cls(-p, q)\n+            if q.is_negative:\n+                return -cls(-p, -q)\n \n         def doit(p, q):\n             \"\"\"Try to return p % q if both are numbers or +/-p is known\n@@ -132,26 +141,10 @@ class Mod(Function):\n                 return cls(net, q)\n \n         elif isinstance(p, Mul):\n-            # separating into modulus and non modulus\n-            both_l = non_mod_l, mod_l = [], []\n-            for arg in p.args:\n-                both_l[isinstance(arg, cls)].append(arg)\n-\n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n-                mod = []\n-                non_mod = []\n-                for j in non_mod_l:\n-                    if isinstance(j, cls):\n-                        mod.append(j.args[0])\n-                    else:\n-                        non_mod.append(j)\n-                prod_mod = Mul(*mod)\n-                prod_non_mod = Mul(*non_mod)\n-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n-                net = prod_mod1*prod_mod\n-                return prod_non_mod*cls(net, q)\n+            # Don't distribute multiplication over modulo\n+            # If one of the terms is a Mod, leave multiplication outside\n+            if any(isinstance(arg, cls) for arg in p.args):\n+                return None\n \n             if q.is_Integer and q is not S.One:\n                 _ = []\n@@ -240,4 +233,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..2284e73 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -7,10 +7,16 @@ class Mod(Function):\n     def eval(cls, p, q):\n         from sympy.core.add import Add\n         from sympy.core.mul import Mul\n+        from sympy.core.numbers import Integer\n         from sympy.core.singleton import S\n         from sympy.core.exprtools import gcd_terms\n         from sympy.polys.polyerrors import PolynomialError\n         from sympy.polys.polytools import gcd\n+        if p.could_extract_minus_sign():\n+            if q.is_positive:\n+                return -cls(-p, q)\n+            if q.is_negative:\n+                return -cls(-p, -q)\n         def doit(p, q):\n             if q.is_zero:\n                 raise ZeroDivisionError('Modulo by zero')\n@@ -81,23 +87,8 @@ class Mod(Function):\n                 net = Add(*non_mod_l) + Add(*[i.args[0] for i in mod_l])\n                 return cls(net, q)\n         elif isinstance(p, Mul):\n-            both_l = non_mod_l, mod_l = ([], [])\n-            for arg in p.args:\n-                both_l[isinstance(arg, cls)].append(arg)\n-            if mod_l and all((inner.args[1] == q for inner in mod_l)):\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n-                mod = []\n-                non_mod = []\n-                for j in non_mod_l:\n-                    if isinstance(j, cls):\n-                        mod.append(j.args[0])\n-                    else:\n-                        non_mod.append(j)\n-                prod_mod = Mul(*mod)\n-                prod_non_mod = Mul(*non_mod)\n-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n-                net = prod_mod1 * prod_mod\n-                return prod_non_mod * cls(net, q)\n+            if any((isinstance(arg, cls) for arg in p.args)):\n+                return None\n             if q.is_Integer and q is not S.One:\n                 _ = []\n                 for i in non_mod_l:\n", "normalized_occurrence": 1}
