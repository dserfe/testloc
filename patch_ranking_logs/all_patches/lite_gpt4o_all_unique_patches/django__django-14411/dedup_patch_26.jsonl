{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..a8ccf67 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -316,50 +316,54 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     None if (and only if) the name refers to a field.\n     \"\"\"\n     attr = None\n-    try:\n-        field = _get_non_gfk_field(model._meta, name)\n+    if name == \"password\" and isinstance(form.fields.get(name).widget, ReadOnlyPasswordHashWidget):\n+        label = form.fields[name].label or pretty_name(name)\n+        attr = form.fields[name]\n+    else:\n         try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            # field is likely a ForeignObjectRel\n-            label = field.related_model._meta.verbose_name\n-    except FieldDoesNotExist:\n-        if name == \"__str__\":\n-            label = str(model._meta.verbose_name)\n-            attr = str\n-        else:\n-            if callable(name):\n-                attr = name\n-            elif hasattr(model_admin, name):\n-                attr = getattr(model_admin, name)\n-            elif hasattr(model, name):\n-                attr = getattr(model, name)\n-            elif form and name in form.fields:\n-                attr = form.fields[name]\n+            field = _get_non_gfk_field(model._meta, name)\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                # field is likely a ForeignObjectRel\n+                label = field.related_model._meta.verbose_name\n+        except FieldDoesNotExist:\n+            if name == \"__str__\":\n+                label = str(model._meta.verbose_name)\n+                attr = str\n             else:\n-                message = \"Unable to lookup '%s' on %s\" % (name, model._meta.object_name)\n-                if model_admin:\n-                    message += \" or %s\" % model_admin.__class__.__name__\n-                if form:\n-                    message += \" or %s\" % form.__class__.__name__\n-                raise AttributeError(message)\n-\n-            if hasattr(attr, \"short_description\"):\n-                label = attr.short_description\n-            elif (isinstance(attr, property) and\n-                  hasattr(attr, \"fget\") and\n-                  hasattr(attr.fget, \"short_description\")):\n-                label = attr.fget.short_description\n-            elif callable(attr):\n-                if attr.__name__ == \"<lambda>\":\n-                    label = \"--\"\n+                if callable(name):\n+                    attr = name\n+                elif hasattr(model_admin, name):\n+                    attr = getattr(model_admin, name)\n+                elif hasattr(model, name):\n+                    attr = getattr(model, name)\n+                elif form and name in form.fields:\n+                    attr = form.fields[name]\n                 else:\n-                    label = pretty_name(attr.__name__)\n-            else:\n-                label = pretty_name(name)\n-    except FieldIsAForeignKeyColumnName:\n-        label = pretty_name(name)\n-        attr = name\n+                    message = \"Unable to lookup '%s' on %s\" % (name, model._meta.object_name)\n+                    if model_admin:\n+                        message += \" or %s\" % model_admin.__class__.__name__\n+                    if form:\n+                        message += \" or %s\" % form.__class__.__name__\n+                    raise AttributeError(message)\n+\n+                if hasattr(attr, \"short_description\"):\n+                    label = attr.short_description\n+                elif (isinstance(attr, property) and\n+                      hasattr(attr, \"fget\") and\n+                      hasattr(attr.fget, \"short_description\")):\n+                    label = attr.fget.short_description\n+                elif callable(attr):\n+                    if attr.__name__ == \"<lambda>\":\n+                        label = \"--\"\n+                    else:\n+                        label = pretty_name(attr.__name__)\n+                else:\n+                    label = pretty_name(name)\n+        except FieldIsAForeignKeyColumnName:\n+            label = pretty_name(name)\n+            attr = name\n \n     if return_attr:\n         return (label, attr)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..c271b25 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -180,46 +180,50 @@ def _get_non_gfk_field(opts, name):\n     return field\n def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n     attr = None\n-    try:\n-        field = _get_non_gfk_field(model._meta, name)\n+    if name == 'password' and isinstance(form.fields.get(name).widget, ReadOnlyPasswordHashWidget):\n+        label = form.fields[name].label or pretty_name(name)\n+        attr = form.fields[name]\n+    else:\n         try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            label = field.related_model._meta.verbose_name\n-    except FieldDoesNotExist:\n-        if name == '__str__':\n-            label = str(model._meta.verbose_name)\n-            attr = str\n-        else:\n-            if callable(name):\n-                attr = name\n-            elif hasattr(model_admin, name):\n-                attr = getattr(model_admin, name)\n-            elif hasattr(model, name):\n-                attr = getattr(model, name)\n-            elif form and name in form.fields:\n-                attr = form.fields[name]\n+            field = _get_non_gfk_field(model._meta, name)\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                label = field.related_model._meta.verbose_name\n+        except FieldDoesNotExist:\n+            if name == '__str__':\n+                label = str(model._meta.verbose_name)\n+                attr = str\n             else:\n-                message = \"Unable to lookup '%s' on %s\" % (name, model._meta.object_name)\n-                if model_admin:\n-                    message += ' or %s' % model_admin.__class__.__name__\n-                if form:\n-                    message += ' or %s' % form.__class__.__name__\n-                raise AttributeError(message)\n-            if hasattr(attr, 'short_description'):\n-                label = attr.short_description\n-            elif isinstance(attr, property) and hasattr(attr, 'fget') and hasattr(attr.fget, 'short_description'):\n-                label = attr.fget.short_description\n-            elif callable(attr):\n-                if attr.__name__ == '<lambda>':\n-                    label = '--'\n+                if callable(name):\n+                    attr = name\n+                elif hasattr(model_admin, name):\n+                    attr = getattr(model_admin, name)\n+                elif hasattr(model, name):\n+                    attr = getattr(model, name)\n+                elif form and name in form.fields:\n+                    attr = form.fields[name]\n                 else:\n-                    label = pretty_name(attr.__name__)\n-            else:\n-                label = pretty_name(name)\n-    except FieldIsAForeignKeyColumnName:\n-        label = pretty_name(name)\n-        attr = name\n+                    message = \"Unable to lookup '%s' on %s\" % (name, model._meta.object_name)\n+                    if model_admin:\n+                        message += ' or %s' % model_admin.__class__.__name__\n+                    if form:\n+                        message += ' or %s' % form.__class__.__name__\n+                    raise AttributeError(message)\n+                if hasattr(attr, 'short_description'):\n+                    label = attr.short_description\n+                elif isinstance(attr, property) and hasattr(attr, 'fget') and hasattr(attr.fget, 'short_description'):\n+                    label = attr.fget.short_description\n+                elif callable(attr):\n+                    if attr.__name__ == '<lambda>':\n+                        label = '--'\n+                    else:\n+                        label = pretty_name(attr.__name__)\n+                else:\n+                    label = pretty_name(name)\n+        except FieldIsAForeignKeyColumnName:\n+            label = pretty_name(name)\n+            attr = name\n     if return_attr:\n         return (label, attr)\n     else:\n", "normalized_occurrence": 1}
