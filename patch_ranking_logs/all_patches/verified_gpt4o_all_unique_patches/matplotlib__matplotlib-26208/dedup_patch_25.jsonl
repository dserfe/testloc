{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26208", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex f9613d3..e3d8e82 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -4411,6 +4411,11 @@ class _AxesBase(martist.Artist):\n         self.set_adjustable('datalim')\n         twin.set_adjustable('datalim')\n         self._twinned_axes.join(self, twin)\n+        # Ensure that the data limits of the original axis are not invalidated\n+        if self._shared_x_axes is not None:\n+            self._shared_x_axes.update(twin)\n+        if self._shared_y_axes is not None:\n+            self._shared_y_axes.update(twin)\n         return twin\n \n     def twinx(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eb9da84..4e7a39d 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1691,6 +1691,10 @@ class _AxesBase(martist.Artist):\n         self.set_adjustable('datalim')\n         twin.set_adjustable('datalim')\n         self._twinned_axes.join(self, twin)\n+        if self._shared_x_axes is not None:\n+            self._shared_x_axes.update(twin)\n+        if self._shared_y_axes is not None:\n+            self._shared_y_axes.update(twin)\n         return twin\n     def twinx(self):\n         ax2 = self._make_twin_axes(sharex=self)\n", "normalized_occurrence": 1}
