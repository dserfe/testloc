{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..e28b2e4 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,26 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n+        from sympy import Piecewise\n+        # For each block, create a condition for when the index falls in that block\n+        row_block = 0\n+        row_offset = 0\n+        expr = None\n+        \n+        # Handle row-wise blocks\n+        for block_idx, numrows in enumerate(self.rowblocksizes):\n+            # Create condition for this block\n+            row_cond = (row_offset <= i) & (i < row_offset + numrows)\n+            block_expr = self.blocks[block_idx, 0][i - row_offset, j]\n+            \n+            if expr is None:\n+                expr = Piecewise((block_expr, row_cond))\n             else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+                expr = Piecewise((block_expr, row_cond), *expr.args)\n+            \n+            row_offset += numrows\n+            \n+        return expr\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..04464e8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,19 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n+        from sympy import Piecewise\n+        row_block = 0\n+        row_offset = 0\n+        expr = None\n+        for block_idx, numrows in enumerate(self.rowblocksizes):\n+            row_cond = (row_offset <= i) & (i < row_offset + numrows)\n+            block_expr = self.blocks[block_idx, 0][i - row_offset, j]\n+            if expr is None:\n+                expr = Piecewise((block_expr, row_cond))\n             else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+                expr = Piecewise((block_expr, row_cond), *expr.args)\n+            row_offset += numrows\n+        return expr\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
