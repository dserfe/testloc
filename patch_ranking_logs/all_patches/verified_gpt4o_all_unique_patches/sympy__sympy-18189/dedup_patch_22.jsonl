{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..9687f8b 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,16 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: idx for idx, sym in enumerate(syms)}\n+                base_solutions = diophantine(eq, param)\n+                reordered_solutions = set()\n+                for base_solution in base_solutions:\n+                    reordered_solution = [0] * len(syms)\n+                    for idx, var_sym in enumerate(var):\n+                        if var_sym in dict_sym_index:\n+                            reordered_solution[dict_sym_index[var_sym]] = base_solution[idx]\n+                    reordered_solutions.add(tuple(reordered_solution))\n+                return reordered_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..d59e6b0 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,16 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: idx for idx, sym in enumerate(syms)}\n+                base_solutions = diophantine(eq, param)\n+                reordered_solutions = set()\n+                for base_solution in base_solutions:\n+                    reordered_solution = [0] * len(syms)\n+                    for idx, var_sym in enumerate(var):\n+                        if var_sym in dict_sym_index:\n+                            reordered_solution[dict_sym_index[var_sym]] = base_solution[idx]\n+                    reordered_solutions.add(tuple(reordered_solution))\n+                return reordered_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
