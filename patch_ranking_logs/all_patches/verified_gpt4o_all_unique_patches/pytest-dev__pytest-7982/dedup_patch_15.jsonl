{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7982", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex e00a6f3..fd21a2c 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -519,7 +519,11 @@ class Session(nodes.FSCollector):\n     def _recurse(self, direntry: \"os.DirEntry[str]\") -> bool:\n         if direntry.name == \"__pycache__\":\n             return False\n-        path = py.path.local(direntry.path)\n+        if direntry.is_symlink():\n+            # Follow symlinks when recursing directories\n+            path = py.path.local(direntry.path, expanduser=False, follow=True)\n+        else:\n+            path = py.path.local(direntry.path)\n         ihook = self.gethookproxy(path.dirpath())\n         if ihook.pytest_ignore_collect(path=path, config=self.config):\n             return False\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex df5c6f0..b898162 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -307,7 +307,10 @@ class Session(nodes.FSCollector):\n     def _recurse(self, direntry: 'os.DirEntry[str]') -> bool:\n         if direntry.name == '__pycache__':\n             return False\n-        path = py.path.local(direntry.path)\n+        if direntry.is_symlink():\n+            path = py.path.local(direntry.path, expanduser=False, follow=True)\n+        else:\n+            path = py.path.local(direntry.path)\n         ihook = self.gethookproxy(path.dirpath())\n         if ihook.pytest_ignore_collect(path=path, config=self.config):\n             return False\n", "normalized_occurrence": 1}
