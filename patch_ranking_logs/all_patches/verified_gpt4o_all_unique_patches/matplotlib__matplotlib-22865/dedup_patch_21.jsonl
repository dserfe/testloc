{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..a1a49d9 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -647,7 +647,7 @@ class Colorbar:\n         else:\n             self.solids = self.ax.pcolormesh(\n                 X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha,\n-                edgecolors='none', shading='flat')\n+                edgecolors='k' if self.drawedges else 'none', shading='flat')\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n@@ -727,7 +727,7 @@ class Colorbar:\n             val = -1 if self._long_axis().get_inverted() else 0\n             color = self.cmap(self.norm(self._values[val]))\n             patch = mpatches.PathPatch(\n-                mpath.Path(xy), facecolor=color, linewidth=0,\n+                mpath.Path(xy), facecolor=color, edgecolor='k' if self.drawedges else 'none', linewidth=0,\n                 antialiased=False, transform=self.ax.transAxes,\n                 hatch=hatches[0], clip_on=False,\n                 # Place it right behind the standard patches, which is\n", "occurrence": 2, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..3e225b9 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -258,7 +258,7 @@ class Colorbar:\n         if isinstance(mappable, contour.ContourSet) and any((hatch is not None for hatch in mappable.hatches)):\n             self._add_solids_patches(X, Y, C, mappable)\n         else:\n-            self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='none', shading='flat')\n+            self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='k' if self.drawedges else 'none', shading='flat')\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n@@ -302,7 +302,7 @@ class Colorbar:\n                 xy = xy[:, ::-1]\n             val = -1 if self._long_axis().get_inverted() else 0\n             color = self.cmap(self.norm(self._values[val]))\n-            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[0], clip_on=False, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n+            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, edgecolor='k' if self.drawedges else 'none', linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[0], clip_on=False, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n             self.ax.add_patch(patch)\n             self._extend_patches.append(patch)\n         if self._extend_upper():\n", "normalized_occurrence": 2}
