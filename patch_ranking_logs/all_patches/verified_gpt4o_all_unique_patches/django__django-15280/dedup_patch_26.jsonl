{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..e854cb3 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -169,26 +169,23 @@ class ForwardManyToOneDescriptor:\n         # The related instance is loaded from the database and then cached\n         # by the field on the model instance state. It can also be pre-cached\n         # by the reverse accessor (ReverseOneToOneDescriptor).\n-        try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n+        rel_obj = None\n+        if not instance._state.deferred:\n+            try:\n+                rel_obj = self.field.get_cached_value(instance)\n+            except KeyError:\n+                pass\n+\n+        if rel_obj is None:\n             has_value = None not in self.field.get_local_related_value(instance)\n             ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n             if ancestor_link and ancestor_link.is_cached(instance):\n-                # An ancestor link will exist if this field is defined on a\n-                # multi-table inheritance parent of the instance's class.\n                 ancestor = ancestor_link.get_cached_value(instance)\n-                # The value might be cached on an ancestor if the instance\n-                # originated from walking down the inheritance chain.\n                 rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n+\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n                 remote_field = self.field.remote_field\n-                # If this is a one-to-one relation, set the reverse accessor\n-                # cache on the related object to the current instance to avoid\n-                # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n             self.field.set_cached_value(instance, rel_obj)\n@@ -398,9 +395,14 @@ class ReverseOneToOneDescriptor:\n         # The related instance is loaded from the database and then cached\n         # by the field on the model instance state. It can also be pre-cached\n         # by the forward accessor (ForwardManyToOneDescriptor).\n-        try:\n-            rel_obj = self.related.get_cached_value(instance)\n-        except KeyError:\n+        rel_obj = None\n+        if not instance._state.deferred:\n+            try:\n+                rel_obj = self.related.get_cached_value(instance)\n+            except KeyError:\n+                pass\n+\n+        if rel_obj is None:\n             related_pk = instance.pk\n             if related_pk is None:\n                 rel_obj = None\n@@ -411,9 +413,6 @@ class ReverseOneToOneDescriptor:\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n-                    # Set the forward accessor cache on the related object to\n-                    # the current instance to avoid an extra SQL query if it's\n-                    # accessed later on.\n                     self.related.field.set_cached_value(rel_obj, instance)\n             self.related.set_cached_value(instance, rel_obj)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..3f83359 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -45,16 +45,18 @@ class ForwardManyToOneDescriptor:\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n-        try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n+        rel_obj = None\n+        if not instance._state.deferred:\n+            try:\n+                rel_obj = self.field.get_cached_value(instance)\n+            except KeyError:\n+                pass\n+        if rel_obj is None:\n             has_value = None not in self.field.get_local_related_value(instance)\n             ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n             if ancestor_link and ancestor_link.is_cached(instance):\n                 ancestor = ancestor_link.get_cached_value(instance)\n                 rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n                 remote_field = self.field.remote_field\n@@ -138,9 +140,13 @@ class ReverseOneToOneDescriptor:\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n-        try:\n-            rel_obj = self.related.get_cached_value(instance)\n-        except KeyError:\n+        rel_obj = None\n+        if not instance._state.deferred:\n+            try:\n+                rel_obj = self.related.get_cached_value(instance)\n+            except KeyError:\n+                pass\n+        if rel_obj is None:\n             related_pk = instance.pk\n             if related_pk is None:\n                 rel_obj = None\n", "normalized_occurrence": 1}
