{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..32b5177 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -135,10 +135,15 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n     elif is_dict_like(label):\n         is_nested_vals = _is_nested_tuple(tuple(label.values()))\n         if not isinstance(index, pd.MultiIndex):\n-            raise ValueError(\n-                \"cannot use a dict-like object for selection on \"\n-                \"a dimension that does not have a MultiIndex\"\n-            )\n+            # If 'method' appears as a dimension name in the label dict,\n+            # we need to handle it as a dimension rather than as the interpolation method\n+            if 'method' in label:\n+                indexer = index.get_loc(label['method'])\n+            else:\n+                raise ValueError(\n+                    \"cannot use a dict-like object for selection on \"\n+                    \"a dimension that does not have a MultiIndex\"\n+                )\n         elif len(label) == index.nlevels and not is_nested_vals:\n             indexer = index.get_loc(tuple(label[k] for k in index.names))\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..4ad668e 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -68,7 +68,10 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n     elif is_dict_like(label):\n         is_nested_vals = _is_nested_tuple(tuple(label.values()))\n         if not isinstance(index, pd.MultiIndex):\n-            raise ValueError('cannot use a dict-like object for selection on a dimension that does not have a MultiIndex')\n+            if 'method' in label:\n+                indexer = index.get_loc(label['method'])\n+            else:\n+                raise ValueError('cannot use a dict-like object for selection on a dimension that does not have a MultiIndex')\n         elif len(label) == index.nlevels and (not is_nested_vals):\n             indexer = index.get_loc(tuple((label[k] for k in index.names)))\n         else:\n", "normalized_occurrence": 1}
