{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23299", "model_patch": "diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py\nindex 3123d3a..bdcb691 100644\n--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n@@ -1,9 +1,10 @@\n+\n \"\"\"\n Manage figures for the pyplot interface.\n \"\"\"\n \n import atexit\n-from collections import OrderedDict\n+from collections import OrderedDict, namedtuple\n import gc\n \n \n@@ -111,6 +112,25 @@ class Gcf:\n         \"\"\"Return the active manager, or *None* if there is no manager.\"\"\"\n         return next(reversed(cls.figs.values())) if cls.figs else None\n \n+    InitialState = namedtuple('InitialState', ['interactive', 'backend'])\n+    _initial_state = InitialState(interactive=None, backend=None)\n+\n+    @classmethod\n+    def save_initial_state(cls):\n+        \"\"\"Save the initial interactive and backend state.\"\"\"\n+        cls._initial_state = cls.InitialState(\n+            interactive=plt.isinteractive(),\n+            backend=plt.get_backend(),\n+        )\n+\n+    @classmethod\n+    def restore_initial_state(cls):\n+        \"\"\"Restore the initial interactive and backend state.\"\"\"\n+        interactive, backend = cls._initial_state\n+        plt.interactive(interactive)\n+        if backend != plt.get_backend():\n+            plt.switch_backend(backend)\n+\n     @classmethod\n     def _set_new_active_manager(cls, manager):\n         \"\"\"Adopt *manager* into pyplot and make it the active manager.\"\"\"\n@@ -124,6 +144,17 @@ class Gcf:\n             manager.set_window_title(label)\n         cls.set_active(manager)\n \n+    @classmethod\n+    def draw_all(cls, force=False):\n+        \"\"\"\n+        Redraw all stale managed figures, or, if *force* is True, all managed\n+        figures.\n+        \"\"\"\n+        cls.restore_initial_state()  # Ensure we restore the initial state before drawing\n+        for manager in cls.get_all_fig_managers():\n+            if force or manager.canvas.figure.stale:\n+                manager.canvas.draw_idle()\n+\n     @classmethod\n     def set_active(cls, manager):\n         \"\"\"Make *manager* the active manager.\"\"\"\n@@ -141,4 +172,4 @@ class Gcf:\n                 manager.canvas.draw_idle()\n \n \n-atexit.register(Gcf.destroy_all)\n+atexit.register(Gcf.destroy_all)\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n-from collections import OrderedDict\n+from collections import OrderedDict, namedtuple\n+    InitialState = namedtuple('InitialState', ['interactive', 'backend'])\n+    _initial_state = InitialState(interactive=None, backend=None)\n+    @classmethod\n+    def save_initial_state(cls):\n+        cls._initial_state = cls.InitialState(interactive=plt.isinteractive(), backend=plt.get_backend())\n+    @classmethod\n+    def restore_initial_state(cls):\n+        interactive, backend = cls._initial_state\n+        plt.interactive(interactive)\n+        if backend != plt.get_backend():\n+            plt.switch_backend(backend)\n+    def draw_all(cls, force=False):\n+        cls.restore_initial_state()\n+        for manager in cls.get_all_fig_managers():\n+            if force or manager.canvas.figure.stale:\n+                manager.canvas.draw_idle()\n+    @classmethod", "normalized_occurrence": 1}
