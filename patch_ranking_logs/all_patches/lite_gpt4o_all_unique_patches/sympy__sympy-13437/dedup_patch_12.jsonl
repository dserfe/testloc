{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13437", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 70a655c..8f39f70 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -444,6 +444,8 @@ class bell(Function):\n                 return r\n \n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n+        if n.is_infinite:\n+            return S.Infinity\n         from sympy import Sum\n         if (k_sym is not None) or (symbols is not None):\n             return self\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 12572d1..d02eb0f 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -150,6 +150,8 @@ class bell(Function):\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n+        if n.is_infinite:\n+            return S.Infinity\n         from sympy import Sum\n         if k_sym is not None or symbols is not None:\n             return self\n", "normalized_occurrence": 1}
