{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..b205a03 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,32 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        import inspect\n+        from importlib import import_module\n+\n+        path_parts = path.split(\".\")\n+        module = \".\".join(path_parts[:-1])\n+        cls_name = path_parts[-1]\n+        \n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % cls_name\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            try:\n+                # Attempt to import the module and resolve the class path\n+                mod = import_module(module)\n+                parent = mod\n+                for part in path_parts[1:]:\n+                    parent = getattr(parent, part)\n+                if inspect.isclass(parent):\n+                    name = \".\".join(path_parts)\n+                    imports = {\"import %s\" % module}\n+                else:\n+                    raise AttributeError\n+            except (ImportError, AttributeError):\n+                # Fallback to default handling\n+                imports = {\"import %s\" % module}\n+                name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..d90c195 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,28 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n+        import inspect\n+        from importlib import import_module\n+        path_parts = path.split('.')\n+        module = '.'.join(path_parts[:-1])\n+        cls_name = path_parts[-1]\n         if module == 'django.db.models':\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.%s' % cls_name\n         else:\n-            imports = {'import %s' % module}\n-            name = path\n+            try:\n+                mod = import_module(module)\n+                parent = mod\n+                for part in path_parts[1:]:\n+                    parent = getattr(parent, part)\n+                if inspect.isclass(parent):\n+                    name = '.'.join(path_parts)\n+                    imports = {'import %s' % module}\n+                else:\n+                    raise AttributeError\n+            except (ImportError, AttributeError):\n+                imports = {'import %s' % module}\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
