{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..7518010 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -104,7 +104,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' and parts[1] not in ('*args', '**kwargs'):\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n@@ -116,12 +116,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             continue\n \n         arg = arguments.get(name, {})\n-        if not arg.get('type'):\n+        if not arg.get('type') and name not in ('*args', '**kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ('*args', '**kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -158,7 +158,7 @@ def augment_descriptions_with_types(\n                 name = ' '.join(parts[2:])\n                 has_description.add(name)\n                 has_type.add(name)\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' and parts[1] not in ('*args', '**kwargs'):\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n@@ -170,7 +170,7 @@ def augment_descriptions_with_types(\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+        if name in has_description and name not in has_type and name not in ('*args', '**kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..e0fef61 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -76,7 +76,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' and parts[1] not in ('*args', '**kwargs'):\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n@@ -86,12 +86,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n-        if not arg.get('type'):\n+        if not arg.get('type') and name not in ('*args', '**kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and name not in ('*args', '**kwargs'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -118,7 +118,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n                 name = ' '.join(parts[2:])\n                 has_description.add(name)\n                 has_type.add(name)\n-        elif parts[0] == 'type':\n+        elif parts[0] == 'type' and parts[1] not in ('*args', '**kwargs'):\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n@@ -128,7 +128,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+        if name in has_description and name not in has_type and (name not in ('*args', '**kwargs')):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n", "normalized_occurrence": 1}
