{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0e8e503..aae4c2b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1434,7 +1434,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         # the signature from, so just pass the object itself to our hook.\n         self.env.app.emit('autodoc-before-process-signature', self.object, False)\n         try:\n-            sig = inspect.signature(self.object, bound_method=False,\n+            sig = inspect.signature(self.object, bound_method=False, follow_wrapped=True,\n                                     type_aliases=self.env.config.autodoc_type_aliases)\n             return None, None, sig\n         except ValueError:\n@@ -1459,7 +1459,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, show_return_annotation=False, **kwargs).replace(', ', ',')\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n@@ -1835,7 +1835,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n-                args = stringify_signature(sig, **kwargs)\n+                args = stringify_signature(sig, **kwargs).replace(', ', ',')\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n                            self.fullname, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0ae2e22..56720c0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1050,7 +1050,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                 pass\n         self.env.app.emit('autodoc-before-process-signature', self.object, False)\n         try:\n-            sig = inspect.signature(self.object, bound_method=False, type_aliases=self.env.config.autodoc_type_aliases)\n+            sig = inspect.signature(self.object, bound_method=False, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n             return (None, None, sig)\n         except ValueError:\n             pass\n@@ -1066,7 +1066,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             return None\n         if sig is None:\n             return None\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, show_return_annotation=False, **kwargs).replace(', ', ',')\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n@@ -1346,7 +1346,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n-                args = stringify_signature(sig, **kwargs)\n+                args = stringify_signature(sig, **kwargs).replace(', ', ',')\n         except TypeError as exc:\n             logger.warning(__('Failed to get a method signature for %s: %s'), self.fullname, exc)\n             return None\n", "normalized_occurrence": 1}
