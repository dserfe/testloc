{"model_name_or_path": "agentless", "instance_id": "django__django-11239", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex c7c6a11..7b19c5d 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,6 +1,7 @@\n import os\n import signal\n import subprocess\n+import os\n \n from django.db.backends.base.client import BaseDatabaseClient\n \n@@ -30,6 +31,18 @@ class DatabaseClient(BaseDatabaseClient):\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n+        \n+        sslrootcert = conn_params.get('OPTIONS', {}).get('sslrootcert', '')\n+        sslcert = conn_params.get('OPTIONS', {}).get('sslcert', '')\n+        sslkey = conn_params.get('OPTIONS', {}).get('sslkey', '')\n+\n+        if sslrootcert:\n+            args += ['--sslrootcert', sslrootcert]\n+        if sslcert:\n+            args += ['--sslcert', sslcert]\n+        if sslkey:\n+            args += ['--sslkey', sslkey]\n+\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n@@ -39,4 +52,4 @@ class DatabaseClient(BaseDatabaseClient):\n             signal.signal(signal.SIGINT, sigint_handler)\n \n     def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+        DatabaseClient.runshell_db(self.connection.get_connection_params())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 7f60b5c..e497a22 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,6 +1,7 @@\n import os\n import signal\n import subprocess\n+import os\n from django.db.backends.base.client import BaseDatabaseClient\n class DatabaseClient(BaseDatabaseClient):\n     executable_name = 'psql'\n@@ -23,6 +24,15 @@ class DatabaseClient(BaseDatabaseClient):\n         subprocess_env = os.environ.copy()\n         if passwd:\n             subprocess_env['PGPASSWORD'] = str(passwd)\n+        sslrootcert = conn_params.get('OPTIONS', {}).get('sslrootcert', '')\n+        sslcert = conn_params.get('OPTIONS', {}).get('sslcert', '')\n+        sslkey = conn_params.get('OPTIONS', {}).get('sslkey', '')\n+        if sslrootcert:\n+            args += ['--sslrootcert', sslrootcert]\n+        if sslcert:\n+            args += ['--sslcert', sslcert]\n+        if sslkey:\n+            args += ['--sslkey', sslkey]\n         try:\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n             subprocess.run(args, check=True, env=subprocess_env)\n", "normalized_occurrence": 1}
