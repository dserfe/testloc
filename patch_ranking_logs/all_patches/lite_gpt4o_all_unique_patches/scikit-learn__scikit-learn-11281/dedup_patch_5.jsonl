{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..2914044 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -432,7 +432,7 @@ def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):\n     return -.5 * (n_features * np.log(2 * np.pi) + log_prob) + log_det\n \n \n-class GaussianMixture(BaseMixture):\n+class GaussianMixture(BaseMixture, ClusterMixin):\n     \"\"\"Gaussian Mixture.\n \n     Representation of a Gaussian mixture model probability distribution.\n@@ -681,6 +681,11 @@ class GaussianMixture(BaseMixture):\n     def _compute_lower_bound(self, _, log_prob_norm):\n         return log_prob_norm\n \n+    @property\n+    def labels_(self):\n+        self._check_is_fitted()\n+        return self.predict(self._X)\n+        \n     def _check_is_fitted(self):\n         check_is_fitted(self, ['weights_', 'means_', 'precisions_cholesky_'])\n \n@@ -720,6 +725,18 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\n+\n     def bic(self, X):\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n@@ -747,4 +764,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n-class GaussianMixture(BaseMixture):\n+class GaussianMixture(BaseMixture, ClusterMixin):\n+    @property\n+    def labels_(self):\n+        self._check_is_fitted()\n+        return self.predict(self._X)\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.predict(X)", "normalized_occurrence": 1}
