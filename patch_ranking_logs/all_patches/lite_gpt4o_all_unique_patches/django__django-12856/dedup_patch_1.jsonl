{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..092b3f3 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -78,8 +78,15 @@ class Deferrable(Enum):\n \n class UniqueConstraint(BaseConstraint):\n     def __init__(self, *, fields, name, condition=None, deferrable=None):\n+        from django.core.exceptions import FieldDoesNotExist\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n+        # Check if fields exist in the model\n+        for field in fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise FieldDoesNotExist(f\"The field '{field}' does not exist in the model.\")\n         if not isinstance(condition, (type(None), Q)):\n             raise ValueError('UniqueConstraint.condition must be a Q instance.')\n         if condition and deferrable:\n@@ -150,4 +157,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 76d46f4..d1cdfed 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -53,8 +53,14 @@ class Deferrable(Enum):\n     IMMEDIATE = 'immediate'\n class UniqueConstraint(BaseConstraint):\n     def __init__(self, *, fields, name, condition=None, deferrable=None):\n+        from django.core.exceptions import FieldDoesNotExist\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n+        for field in fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise FieldDoesNotExist(f\"The field '{field}' does not exist in the model.\")\n         if not isinstance(condition, (type(None), Q)):\n             raise ValueError('UniqueConstraint.condition must be a Q instance.')\n         if condition and deferrable:\n", "normalized_occurrence": 1}
