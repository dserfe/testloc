{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..cbec427 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1066,9 +1066,9 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n+            if result is None:\n+                result = []\n+            result.append((args, retann))\n         return result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n@@ -1085,9 +1085,15 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results is not None:\n+                if not results:  # empty list\n+                    return super().format_signature(**kwargs)  # type: ignore\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = args, retann\n+                    signatures.append(super().format_signature(**kwargs))  # type: ignore\n+                return \"\\n\".join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..d249a20 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -776,8 +776,9 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n+            if result is None:\n+                result = []\n+            result.append((args, retann))\n         return result\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n@@ -790,9 +791,15 @@ class DocstringSignatureMixin:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.args is None and self.env.config.autodoc_docstring_signature:\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results is not None:\n+                if not results:\n+                    return super().format_signature(**kwargs)\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = (args, retann)\n+                    signatures.append(super().format_signature(**kwargs))\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n", "normalized_occurrence": 1}
