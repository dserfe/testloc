{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..3ea9e1b 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -115,6 +115,47 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n+    def merge(list_1, list_2):\n+        \"\"\"\n+        Merge two lists while trying to keep the relative order of the elements.\n+        Warn if the lists have elements whose relative order conflicts between\n+        the two lists.\n+\n+        For static assets it can be important to have them included in the DOM\n+        in a certain order. In JavaScript you may not be able to reference a\n+        global or in CSS you might want to override a style.\n+        \"\"\"\n+        # Build a dict of all elements and their indices in list_2\n+        list_2_order = {path: i for i, path in enumerate(list_2)}\n+        \n+        # Start with a copy of list_1\n+        combined_list = list(list_1)\n+        \n+        # Keep track of elements we've seen in list_1\n+        seen_in_list_1 = set()\n+        last_index = 0\n+        \n+        # First pass: check for ordering conflicts\n+        for i, path in enumerate(list_1):\n+            if path in list_2_order:\n+                for prev_path in list_1[last_index:i]:\n+                    if prev_path in list_2_order and list_2_order[prev_path] > list_2_order[path]:\n+                        warnings.warn(\n+                            'Detected duplicate Media files in an opposite order:\\n'\n+                            '%s\\n%s' % (prev_path, path),\n+                            MediaOrderConflictWarning,\n+                        )\n+                last_index = i\n+            seen_in_list_1.add(path)\n+        \n+        # Second pass: add remaining items from list_2 maintaining their relative order\n+        insert_position = len(combined_list)\n+        for path in list_2:\n+            if path not in seen_in_list_1:\n+                combined_list.insert(insert_position, path)\n+                insert_position += 1\n+                \n+        return combined_list\n     def merge(list_1, list_2):\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..422a567 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -62,6 +62,24 @@ class Media:\n             return Media(**{str(name): getattr(self, '_' + name)})\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n+    def merge(list_1, list_2):\n+        list_2_order = {path: i for i, path in enumerate(list_2)}\n+        combined_list = list(list_1)\n+        seen_in_list_1 = set()\n+        last_index = 0\n+        for i, path in enumerate(list_1):\n+            if path in list_2_order:\n+                for prev_path in list_1[last_index:i]:\n+                    if prev_path in list_2_order and list_2_order[prev_path] > list_2_order[path]:\n+                        warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (prev_path, path), MediaOrderConflictWarning)\n+                last_index = i\n+            seen_in_list_1.add(path)\n+        insert_position = len(combined_list)\n+        for path in list_2:\n+            if path not in seen_in_list_1:\n+                combined_list.insert(insert_position, path)\n+                insert_position += 1\n+        return combined_list\n     def merge(list_1, list_2):\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n", "normalized_occurrence": 1}
