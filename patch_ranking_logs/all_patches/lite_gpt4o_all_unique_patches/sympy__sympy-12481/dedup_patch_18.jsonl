{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..87deb11 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,26 +895,17 @@ class Permutation(Basic):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-\n-        if not is_cycle and \\\n-                any(i not in temp for i in range(len(temp))):\n-            raise ValueError(\"Integers 0 through %s must be present.\" %\n-                             max(temp))\n+        if has_dups(temp) and not is_cycle:\n+            raise ValueError('there were repeated elements.')\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+            # resolving cycles in left-to-right order\n+            aform = list(range(max(temp) + 1))\n+            for cycle in args:\n+                if len(set(cycle)) != len(cycle):\n+                    raise ValueError('A cycle cannot have repeated elements.')\n+                for i in range(len(cycle) - 1):\n+                    aform[cycle[i]], aform[cycle[i + 1]] = aform[cycle[i + 1]], aform[cycle[i]]\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..3e6ecac 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -194,19 +194,15 @@ class Permutation(Basic):\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n-        if not is_cycle and any((i not in temp for i in range(len(temp)))):\n-            raise ValueError('Integers 0 through %s must be present.' % max(temp))\n+        if has_dups(temp) and (not is_cycle):\n+            raise ValueError('there were repeated elements.')\n         if is_cycle:\n-            c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+            aform = list(range(max(temp) + 1))\n+            for cycle in args:\n+                if len(set(cycle)) != len(cycle):\n+                    raise ValueError('A cycle cannot have repeated elements.')\n+                for i in range(len(cycle) - 1):\n+                    aform[cycle[i]], aform[cycle[i + 1]] = (aform[cycle[i + 1]], aform[cycle[i]])\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "normalized_occurrence": 1}
