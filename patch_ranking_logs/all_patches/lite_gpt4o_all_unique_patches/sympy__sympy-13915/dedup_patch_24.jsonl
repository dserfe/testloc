{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..a3ad8a3 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -915,9 +915,13 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One  # get rid of m\n             return rv.xreplace(reps)\n         else:\n+            from sympy import limit, nan\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n+                if rv.has(old) and rv.subs(old, new) in [nan, S.NaN, S.ComplexInfinity, S.Infinity]:\n+                    rv = limit(rv, old, new)\n+                else:\n+                    rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n             return rv\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..4b8b472 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -324,9 +324,13 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One\n             return rv.xreplace(reps)\n         else:\n+            from sympy import limit, nan\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n+                if rv.has(old) and rv.subs(old, new) in [nan, S.NaN, S.ComplexInfinity, S.Infinity]:\n+                    rv = limit(rv, old, new)\n+                else:\n+                    rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n             return rv\n", "normalized_occurrence": 1}
