{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..b38fcc9 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -10,7 +10,13 @@ class classonlymethod(classmethod):\n         return super().__get__(instance, cls)\n \n \n-def _update_method_wrapper(_wrapper, decorator):\n+def _update_method_wrapper(_wrapper, decorator, method):\n+    if isinstance(_wrapper, partial):\n+        update_wrapper(_wrapper.func, method)\n+        _wrapper.__name__ = method.__name__\n+        _wrapper.__module__ = method.__module__\n+        _wrapper.__doc__ = method.__doc__\n+    # Ensure the dummy function has the necessary attributes\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n     @decorator\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..4c0c295 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -4,7 +4,12 @@ class classonlymethod(classmethod):\n         if instance is not None:\n             raise AttributeError('This method is available only on the class, not on instances.')\n         return super().__get__(instance, cls)\n-def _update_method_wrapper(_wrapper, decorator):\n+def _update_method_wrapper(_wrapper, decorator, method):\n+    if isinstance(_wrapper, partial):\n+        update_wrapper(_wrapper.func, method)\n+        _wrapper.__name__ = method.__name__\n+        _wrapper.__module__ = method.__module__\n+        _wrapper.__doc__ = method.__doc__\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n", "normalized_occurrence": 1}
