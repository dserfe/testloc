{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 424b08e..e710ac7 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -134,6 +134,16 @@ def isiterable(obj):\n     except TypeError:\n         return False\n \n+def assertrepr_compare(config, op, left, right):\n+    \"\"\"Return specialised explanations for some operators/operands\"\"\"\n+    if isinstance(left, (list, tuple, set)) and isinstance(right, (list, tuple, set)):\n+        if op == 'all':\n+            failing_items = [item for item in left if not item]\n+            return [f\"Items failing {op}: {failing_items}\"]\n+        elif op == 'any':\n+            failing_items = [item for item in left if item]\n+            return [f\"Items passing {op}: {failing_items}\"]\n+\n \n def assertrepr_compare(config, op, left, right):\n     \"\"\"Return specialised explanations for some operators/operands\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex b5a0422..a7ed67b 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -74,6 +74,14 @@ def isiterable(obj):\n         return not istext(obj)\n     except TypeError:\n         return False\n+def assertrepr_compare(config, op, left, right):\n+    if isinstance(left, (list, tuple, set)) and isinstance(right, (list, tuple, set)):\n+        if op == 'all':\n+            failing_items = [item for item in left if not item]\n+            return [f'Items failing {op}: {failing_items}']\n+        elif op == 'any':\n+            failing_items = [item for item in left if item]\n+            return [f'Items passing {op}: {failing_items}']\n def assertrepr_compare(config, op, left, right):\n     width = 80 - 15 - len(op) - 2\n     left_repr = saferepr(left, maxsize=int(width // 2))\n", "normalized_occurrence": 1}
