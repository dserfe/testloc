{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..c8665a1 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -74,16 +74,20 @@ class MigrationAutodetector:\n             # avoid treating this as being deconstructible itself - see #22951\n             return obj\n         elif hasattr(obj, \"deconstruct\"):\n-            deconstructed = obj.deconstruct()\n-            if isinstance(obj, models.Field):\n-                # we have a field which also returns a name\n-                deconstructed = deconstructed[1:]\n-            path, args, kwargs = deconstructed\n-            return (\n-                path,\n-                [self.deep_deconstruct(value) for value in args],\n-                {key: self.deep_deconstruct(value) for key, value in kwargs.items()},\n-            )\n+            if isinstance(obj, (types.MethodType, types.FunctionType)) and obj.__qualname__:\n+                path = f\"{obj.__module__}.{obj.__qualname__}\"\n+                return path\n+            else:\n+                deconstructed = obj.deconstruct()\n+                if isinstance(obj, models.Field):\n+                    # we have a field which also returns a name\n+                    deconstructed = deconstructed[1:]\n+                path, args, kwargs = deconstructed\n+                return (\n+                    path,\n+                    [self.deep_deconstruct(value) for value in args],\n+                    {key: self.deep_deconstruct(value) for key, value in kwargs.items()},\n+                )\n         else:\n             return obj\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..e4ab666 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -37,11 +37,15 @@ class MigrationAutodetector:\n         elif isinstance(obj, type):\n             return obj\n         elif hasattr(obj, 'deconstruct'):\n-            deconstructed = obj.deconstruct()\n-            if isinstance(obj, models.Field):\n-                deconstructed = deconstructed[1:]\n-            path, args, kwargs = deconstructed\n-            return (path, [self.deep_deconstruct(value) for value in args], {key: self.deep_deconstruct(value) for key, value in kwargs.items()})\n+            if isinstance(obj, (types.MethodType, types.FunctionType)) and obj.__qualname__:\n+                path = f'{obj.__module__}.{obj.__qualname__}'\n+                return path\n+            else:\n+                deconstructed = obj.deconstruct()\n+                if isinstance(obj, models.Field):\n+                    deconstructed = deconstructed[1:]\n+                path, args, kwargs = deconstructed\n+                return (path, [self.deep_deconstruct(value) for value in args], {key: self.deep_deconstruct(value) for key, value in kwargs.items()})\n         else:\n             return obj\n     def only_relation_agnostic_fields(self, fields):\n", "normalized_occurrence": 1}
