{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..8780b11 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,12 +984,48 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        is_all_any_call = (\n+            isinstance(call.func, ast.Name)\n+            and call.func.id in {\"all\", \"any\"}\n+            and len(call.args) == 1\n+        )\n+\n+        if is_all_any_call:\n+            # Handle `all` and `any` calls by unrolling them\n+            iterable = call.args[1]\n+            res_var = self.variable()\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+            app = ast.Attribute(expl_list, \"append\", ast.Load())\n+\n+            loop_var = ast.Name(id=\"item\", ctx=ast.Store())\n+            loop_target = ast.Name(id=res_var, ctx=ast.Load())\n+            loop_body = [\n+                ast.Expr(\n+                    value=ast.Call(\n+                        func=app, args=[ast.Str(\"Assertions for all/any failed\")], keywords=[]\n+                    )\n+                ),\n+                ast.Assert(\n+                    test=ast.Call(\n+                        func=call.func,\n+                        args=[ast.Name(id=\"item\", ctx=ast.Load())],\n+                        keywords=[]\n+                    ),\n+                    msg=None,\n+                ),\n+            ]\n+            loop = ast.For(target=loop_var, iter=loop_target, body=loop_body, orelse=[])\n+\n+            self.statements.append(loop)\n+            return ast.Name(id=res_var, ctx=ast.Load()), \"Assertions for all/any failed\"\n+\n+        else:\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1117,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..d077996 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,12 +559,25 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        is_all_any_call = isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'} and (len(call.args) == 1)\n+        if is_all_any_call:\n+            iterable = call.args[1]\n+            res_var = self.variable()\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+            app = ast.Attribute(expl_list, 'append', ast.Load())\n+            loop_var = ast.Name(id='item', ctx=ast.Store())\n+            loop_target = ast.Name(id=res_var, ctx=ast.Load())\n+            loop_body = [ast.Expr(value=ast.Call(func=app, args=[ast.Str('Assertions for all/any failed')], keywords=[])), ast.Assert(test=ast.Call(func=call.func, args=[ast.Name(id='item', ctx=ast.Load())], keywords=[]), msg=None)]\n+            loop = ast.For(target=loop_var, iter=loop_target, body=loop_body, orelse=[])\n+            self.statements.append(loop)\n+            return (ast.Name(id=res_var, ctx=ast.Load()), 'Assertions for all/any failed')\n+        else:\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
