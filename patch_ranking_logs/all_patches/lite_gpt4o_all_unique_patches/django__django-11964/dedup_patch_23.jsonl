{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..91fd363 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -792,6 +792,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n@@ -802,6 +804,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"\n         if not prepared:\n             value = self.get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n \n     def get_db_prep_save(self, value, connection):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..0630ea7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -358,10 +358,14 @@ class Field(RegisterLookupMixin):\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if not prepared:\n             value = self.get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n     def get_db_prep_save(self, value, connection):\n         return self.get_db_prep_value(value, connection=connection, prepared=False)\n", "normalized_occurrence": 1}
