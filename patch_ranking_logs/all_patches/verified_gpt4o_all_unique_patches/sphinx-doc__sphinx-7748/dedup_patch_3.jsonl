{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..24a0a4c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1044,7 +1044,7 @@ class DocstringSignatureMixin:\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        result = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,10 +1066,16 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            result.append((args, retann))\n+            # re-prepare docstring to ignore more leading indentation\n+            tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n+            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n+                                                        tabsize=tab_width)\n+        if result:\n+            # Combine all signatures into a single string\n+            combined_signature = '\\n'.join(f'{self.objpath[-1]}{args} -> {retann}' for args, retann in result)\n+            return combined_signature, None\n+        return None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..8339630 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -759,7 +759,7 @@ class DocstringSignatureMixin:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        result = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -776,9 +776,13 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n-        return result\n+            result.append((args, retann))\n+            tab_width = self.directive.state.document.settings.tab_width\n+            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n+        if result:\n+            combined_signature = '\\n'.join((f'{self.objpath[-1]}{args} -> {retann}' for args, retann in result))\n+            return (combined_signature, None)\n+        return None\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:\n", "normalized_occurrence": 1}
