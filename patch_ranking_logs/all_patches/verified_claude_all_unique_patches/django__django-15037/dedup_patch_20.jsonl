{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex bdb6b4c..64185a8 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -119,9 +119,24 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n     def get_relations(self, cursor, table_name):\n         \"\"\"\n         Return a dictionary of {field_name: (field_name_other_table, other_table)}\n-        representing all relationships to the given table.\n+        representing all relationships to the given table. The field_name_other_table\n+        is the field referenced in the other table (usually its primary key).\n         \"\"\"\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        cursor.execute(\"\"\"\n+            SELECT a1.attname AS column_name,\n+                   c2.relname AS referenced_table_name,\n+                   a2.attname AS referenced_column_name\n+            FROM pg_constraint con\n+            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\n+            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\n+            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\n+            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\n+            WHERE c1.relname = %s AND\n+                  con.contype = 'f' AND\n+                  c1.relnamespace = c2.relnamespace AND\n+                  pg_catalog.pg_table_is_visible(c1.oid)\n+        \"\"\", [table_name])\n+        return {row[0]: (row[2], row[1]) for row in cursor.fetchall()}\n \n     def get_key_columns(self, cursor, table_name):\n         cursor.execute(\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex c5c043d..b447224 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -26,7 +26,8 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         cursor.execute(\"\\n            SELECT s.relname as sequence_name, col.attname\\n            FROM pg_class s\\n                JOIN pg_namespace sn ON sn.oid = s.relnamespace\\n                JOIN pg_depend d ON d.refobjid = s.oid AND d.refclassid = 'pg_class'::regclass\\n                JOIN pg_attrdef ad ON ad.oid = d.objid AND d.classid = 'pg_attrdef'::regclass\\n                JOIN pg_attribute col ON col.attrelid = ad.adrelid AND col.attnum = ad.adnum\\n                JOIN pg_class tbl ON tbl.oid = ad.adrelid\\n            WHERE s.relkind = 'S'\\n              AND d.deptype in ('a', 'n')\\n              AND pg_catalog.pg_table_is_visible(tbl.oid)\\n              AND tbl.relname = %s\\n        \", [table_name])\n         return [{'name': row[0], 'table': table_name, 'column': row[1]} for row in cursor.fetchall()]\n     def get_relations(self, cursor, table_name):\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        cursor.execute(\"\\n            SELECT a1.attname AS column_name,\\n                   c2.relname AS referenced_table_name,\\n                   a2.attname AS referenced_column_name\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE c1.relname = %s AND\\n                  con.contype = 'f' AND\\n                  c1.relnamespace = c2.relnamespace AND\\n                  pg_catalog.pg_table_is_visible(c1.oid)\\n        \", [table_name])\n+        return {row[0]: (row[2], row[1]) for row in cursor.fetchall()}\n     def get_key_columns(self, cursor, table_name):\n         cursor.execute(\"\\n            SELECT a1.attname, c2.relname, a2.attname\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE\\n                c1.relname = %s AND\\n                con.contype = 'f' AND\\n                c1.relnamespace = c2.relnamespace AND\\n                pg_catalog.pg_table_is_visible(c1.oid)\\n        \", [table_name])\n         return cursor.fetchall()\n", "normalized_occurrence": 1}
