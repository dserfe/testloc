{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex adc421d..7d2ea90 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -1,3 +1,4 @@\n+\n import pprint\n import reprlib\n from typing import Any\n@@ -8,6 +9,9 @@ def _try_repr_or_str(obj):\n         return repr(obj)\n     except (KeyboardInterrupt, SystemExit):\n         raise\n+    except RuntimeError as e:\n+        if str(e) == \"No active exception to reraise\":\n+            return \"<unpresentable object (no active exception to reraise)>\"\n     except BaseException:\n         return '{}(\"{}\")'.format(type(obj).__name__, obj)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 789deb9..990fe16 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -6,6 +6,9 @@ def _try_repr_or_str(obj):\n         return repr(obj)\n     except (KeyboardInterrupt, SystemExit):\n         raise\n+    except RuntimeError as e:\n+        if str(e) == 'No active exception to reraise':\n+            return '<unpresentable object (no active exception to reraise)>'\n     except BaseException:\n         return '{}(\"{}\")'.format(type(obj).__name__, obj)\n def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n", "normalized_occurrence": 1}
