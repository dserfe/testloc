{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..06db666 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,33 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        \n+        # Get terms in order from highest to lowest degree\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and sum(monom) > 0:\n+                coeff = \"\"\n+            else:\n+                coeff = self._print(coeff)\n+                if sum(monom) > 0:\n+                    coeff = coeff + \" \"\n+            \n+            term = []\n+            for i, exp in enumerate(monom):\n+                if exp > 0:\n+                    gen = self._print(poly.gens[i])\n+                    if exp == 1:\n+                        term.append(gen)\n+                    else:\n+                        term.append(\"%s^{%d}\" % (gen, exp))\n+            \n+            term = \" \".join(term)\n+            if not term:\n+                terms.append(coeff)\n+            else:\n+                terms.append(coeff + term)\n+        \n+        expr = \" + \".join(reversed(terms)) or \"0\"\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..4a5c11a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,28 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and sum(monom) > 0:\n+                coeff = ''\n+            else:\n+                coeff = self._print(coeff)\n+                if sum(monom) > 0:\n+                    coeff = coeff + ' '\n+            term = []\n+            for i, exp in enumerate(monom):\n+                if exp > 0:\n+                    gen = self._print(poly.gens[i])\n+                    if exp == 1:\n+                        term.append(gen)\n+                    else:\n+                        term.append('%s^{%d}' % (gen, exp))\n+            term = ' '.join(term)\n+            if not term:\n+                terms.append(coeff)\n+            else:\n+                terms.append(coeff + term)\n+        expr = ' + '.join(reversed(terms)) or '0'\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n", "normalized_occurrence": 2}
