{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13647", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 8faef3a..0012521 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -504,6 +504,20 @@ class MutableDenseMatrix(DenseMatrix, MatrixBase):\n             del self._mat[i + j*self.cols]\n         self.cols -= 1\n \n+    def col_insert(self, pos, other):\n+        \"\"\"Insert one or more columns at the given position.\"\"\"\n+        if pos < 0:\n+            pos += self.cols\n+        if not isinstance(other, MatrixBase):\n+            other = self._new(other)\n+        if self.rows != other.rows:\n+            raise ShapeError(\"`self` and `other` must have the same number of rows.\")\n+        \n+        new_mat = []\n+        for i in range(self.rows):\n+            new_mat.extend(self.row(i)[:pos] + other.row(i) + self.row(i)[pos:])\n+        return self._new(self.rows, self.cols + other.cols, new_mat)\n+\n     def col_op(self, j, f):\n         \"\"\"In-place operation on col j using two-arg functor whose args are\n         interpreted as (self[i, j], i).\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n+    def col_insert(self, pos, other):\n+        if pos < 0:\n+            pos += self.cols\n+        if not isinstance(other, MatrixBase):\n+            other = self._new(other)\n+        if self.rows != other.rows:\n+            raise ShapeError('`self` and `other` must have the same number of rows.')\n+        new_mat = []\n+        for i in range(self.rows):\n+            new_mat.extend(self.row(i)[:pos] + other.row(i) + self.row(i)[pos:])\n+        return self._new(self.rows, self.cols + other.cols, new_mat)", "normalized_occurrence": 1}
