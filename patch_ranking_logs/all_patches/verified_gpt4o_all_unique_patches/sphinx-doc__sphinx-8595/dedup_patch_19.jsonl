{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..9387686 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,6 +1074,9 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n+            if self.__all__ is not None and not self.__all__:\n+                # If __all__ is explicitly empty, return no members\n+                return False, []\n             if not self.__all__:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..15d8cd4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -575,6 +575,8 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n+            if self.__all__ is not None and (not self.__all__):\n+                return (False, [])\n             if not self.__all__:\n                 return (True, list(members.values()))\n             else:\n", "normalized_occurrence": 1}
