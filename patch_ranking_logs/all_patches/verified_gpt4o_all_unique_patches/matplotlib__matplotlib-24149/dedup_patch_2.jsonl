{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5af9d96..3ac3258 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2167,38 +2167,39 @@ class Axes(_AxesBase):\n             # xconv has already been converted, but maybe empty...\n             return convert(dx)\n \n+        # Check if x0 or xconv contains any finite values\n+        if not any(np.isfinite(val) for val in np.atleast_1d(x0)):\n+            return convert(dx)\n+        if not any(np.isfinite(val) for val in np.atleast_1d(xconv)):\n+            return convert(dx)\n+        \n+        # attempt to add the width to x0; this works for\n+        # datetime+timedelta, for instance\n+\n+        # only use the first element of x and x0.  This saves\n+        # having to be sure addition works across the whole\n+        # vector.  This is particularly an issue if\n+        # x0 and dx are lists so x0 + dx just concatenates the lists.\n+        # We can't just cast x0 and dx to numpy arrays because that\n+        # removes the units from unit packages like `pint` that\n+        # wrap numpy arrays.\n         try:\n-            # attempt to add the width to x0; this works for\n-            # datetime+timedelta, for instance\n-\n-            # only use the first element of x and x0.  This saves\n-            # having to be sure addition works across the whole\n-            # vector.  This is particularly an issue if\n-            # x0 and dx are lists so x0 + dx just concatenates the lists.\n-            # We can't just cast x0 and dx to numpy arrays because that\n-            # removes the units from unit packages like `pint` that\n-            # wrap numpy arrays.\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n+            x0 = cbook._safe_first_finite(x0)\n+        except (TypeError, IndexError, KeyError):\n+            pass\n \n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n-                x = xconv\n-\n-            delist = False\n-            if not np.iterable(dx):\n-                dx = [dx]\n-                delist = True\n-            dx = [convert(x0 + ddx) - x for ddx in dx]\n-            if delist:\n-                dx = dx[0]\n-        except (ValueError, TypeError, AttributeError):\n-            # if the above fails (for any reason) just fallback to what\n-            # we do by default and convert dx by itself.\n-            dx = convert(dx)\n+        try:\n+            x = cbook._safe_first_finite(xconv)\n+        except (TypeError, IndexError, KeyError):\n+            x = xconv\n+\n+        delist = False\n+        if not np.iterable(dx):\n+            dx = [dx]\n+            delist = True\n+        dx = [convert(x0 + ddx) - x for ddx in dx]\n+        if delist:\n+            dx = dx[0]\n         return dx\n \n     @_preprocess_data()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5336f05..d74cca6 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -454,24 +454,25 @@ class Axes(_AxesBase):\n         assert type(xconv) is np.ndarray\n         if xconv.size == 0:\n             return convert(dx)\n+        if not any((np.isfinite(val) for val in np.atleast_1d(x0))):\n+            return convert(dx)\n+        if not any((np.isfinite(val) for val in np.atleast_1d(xconv))):\n+            return convert(dx)\n         try:\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n-                x = xconv\n-            delist = False\n-            if not np.iterable(dx):\n-                dx = [dx]\n-                delist = True\n-            dx = [convert(x0 + ddx) - x for ddx in dx]\n-            if delist:\n-                dx = dx[0]\n-        except (ValueError, TypeError, AttributeError):\n-            dx = convert(dx)\n+            x0 = cbook._safe_first_finite(x0)\n+        except (TypeError, IndexError, KeyError):\n+            pass\n+        try:\n+            x = cbook._safe_first_finite(xconv)\n+        except (TypeError, IndexError, KeyError):\n+            x = xconv\n+        delist = False\n+        if not np.iterable(dx):\n+            dx = [dx]\n+            delist = True\n+        dx = [convert(x0 + ddx) - x for ddx in dx]\n+        if delist:\n+            dx = dx[0]\n         return dx\n     @_preprocess_data()\n     @_docstring.dedent_interpd\n", "normalized_occurrence": 1}
