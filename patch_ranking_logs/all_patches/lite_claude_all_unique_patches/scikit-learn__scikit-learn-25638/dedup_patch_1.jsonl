{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..0c42fb7 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -340,9 +340,19 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n-        # [obj_1] and not [\"label_1\"]\n-        return \"unknown\"\n+    if not issparse(y) and y.dtype == object:\n+        # Handle pandas nullable dtypes that become object dtype\n+        first_val = y.flat[0]\n+        if isinstance(first_val, str):\n+            pass  # Let string handling continue as before\n+        elif hasattr(first_val, 'dtype'):\n+            # Handle pandas nullable types\n+            if first_val.dtype.kind in 'iufb':  # integer, unsigned int, float, boolean\n+                y = xp.asarray(y.astype(float))\n+            else:\n+                return \"unknown\"\n+        else:\n+            return \"unknown\"\n \n     # Check if multioutput\n     if y.ndim == 2 and y.shape[1] > 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..50eb404 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -91,8 +91,17 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n-        return 'unknown'\n+    if not issparse(y) and y.dtype == object:\n+        first_val = y.flat[0]\n+        if isinstance(first_val, str):\n+            pass\n+        elif hasattr(first_val, 'dtype'):\n+            if first_val.dtype.kind in 'iufb':\n+                y = xp.asarray(y.astype(float))\n+            else:\n+                return 'unknown'\n+        else:\n+            return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n     else:\n", "normalized_occurrence": 1}
