{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\nindex 4abb398..d992b04 100644\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -36,6 +36,7 @@ PRECEDENCE_VALUES = {\n     \"Sub\": PRECEDENCE[\"Add\"],\n     \"Not\": PRECEDENCE[\"Not\"],\n     \"Function\" : PRECEDENCE[\"Func\"],\n+    \"Max\": PRECEDENCE[\"Func\"],\n     \"NegativeInfinity\": PRECEDENCE[\"Add\"],\n     \"MatAdd\": PRECEDENCE[\"Add\"],\n     \"MatMul\": PRECEDENCE[\"Mul\"],\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/precedence.py b/sympy/printing/precedence.py\nindex a6834cf..3b8a873 100644\n--- a/sympy/printing/precedence.py\n+++ b/sympy/printing/precedence.py\n@@ -1,7 +1,7 @@\n from __future__ import print_function, division\n from sympy.core.function import _coeff_isneg\n PRECEDENCE = {'Lambda': 1, 'Xor': 10, 'Or': 20, 'And': 30, 'Relational': 35, 'Add': 40, 'Mul': 50, 'Pow': 60, 'Func': 70, 'Not': 100, 'Atom': 1000, 'BitwiseOr': 36, 'BitwiseAnd': 38}\n-PRECEDENCE_VALUES = {'Equivalent': PRECEDENCE['Xor'], 'Xor': PRECEDENCE['Xor'], 'Implies': PRECEDENCE['Xor'], 'Or': PRECEDENCE['Or'], 'And': PRECEDENCE['And'], 'Add': PRECEDENCE['Add'], 'Pow': PRECEDENCE['Pow'], 'Relational': PRECEDENCE['Relational'], 'Sub': PRECEDENCE['Add'], 'Not': PRECEDENCE['Not'], 'Function': PRECEDENCE['Func'], 'NegativeInfinity': PRECEDENCE['Add'], 'MatAdd': PRECEDENCE['Add'], 'MatMul': PRECEDENCE['Mul'], 'MatPow': PRECEDENCE['Pow'], 'TensAdd': PRECEDENCE['Add'], 'TensMul': PRECEDENCE['Mul'], 'HadamardProduct': PRECEDENCE['Mul'], 'KroneckerProduct': PRECEDENCE['Mul'], 'Equality': PRECEDENCE['Mul'], 'Unequality': PRECEDENCE['Mul']}\n+PRECEDENCE_VALUES = {'Equivalent': PRECEDENCE['Xor'], 'Xor': PRECEDENCE['Xor'], 'Implies': PRECEDENCE['Xor'], 'Or': PRECEDENCE['Or'], 'And': PRECEDENCE['And'], 'Add': PRECEDENCE['Add'], 'Pow': PRECEDENCE['Pow'], 'Relational': PRECEDENCE['Relational'], 'Sub': PRECEDENCE['Add'], 'Not': PRECEDENCE['Not'], 'Function': PRECEDENCE['Func'], 'Max': PRECEDENCE['Func'], 'NegativeInfinity': PRECEDENCE['Add'], 'MatAdd': PRECEDENCE['Add'], 'MatMul': PRECEDENCE['Mul'], 'MatPow': PRECEDENCE['Pow'], 'TensAdd': PRECEDENCE['Add'], 'TensMul': PRECEDENCE['Mul'], 'HadamardProduct': PRECEDENCE['Mul'], 'KroneckerProduct': PRECEDENCE['Mul'], 'Equality': PRECEDENCE['Mul'], 'Unequality': PRECEDENCE['Mul']}\n def precedence_Mul(item):\n     if _coeff_isneg(item):\n         return PRECEDENCE['Add']\n", "normalized_occurrence": 1}
