{"model_name_or_path": "agentless", "instance_id": "django__django-16667", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex d370339..f9a2eea 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -1156,8 +1156,18 @@ class SelectDateWidget(Widget):\n             input_format = get_format(\"DATE_INPUT_FORMATS\")[0]\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+                year = int(y)\n+                month = int(m)\n+                day = int(d)\n+                if not (1 <= month <= 12):\n+                    raise ValueError(\"Month out of range\")\n+                if not (1 <= day <= 31):\n+                    raise ValueError(\"Day out of range\")\n+                # Year range is arbitrary; adjust as needed\n+                if not (1 <= year <= 9999):\n+                    raise OverflowError(\"Year out of range\")\n+                date_value = datetime.date(year, month, day)\n+            except (ValueError, OverflowError):\n                 # Return pseudo-ISO dates with zeros for any unselected values,\n                 # e.g. '2017-0-23'.\n                 return \"%s-%s-%s\" % (y or 0, m or 0, d or 0)\n@@ -1168,4 +1178,4 @@ class SelectDateWidget(Widget):\n         return not any(\n             (\"{}_{}\".format(name, interval) in data)\n             for interval in (\"year\", \"month\", \"day\")\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex e4109e5..67c622e 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -629,8 +629,17 @@ class SelectDateWidget(Widget):\n             input_format = get_format('DATE_INPUT_FORMATS')[0]\n             input_format = formats.sanitize_strftime_format(input_format)\n             try:\n-                date_value = datetime.date(int(y), int(m), int(d))\n-            except ValueError:\n+                year = int(y)\n+                month = int(m)\n+                day = int(d)\n+                if not 1 <= month <= 12:\n+                    raise ValueError('Month out of range')\n+                if not 1 <= day <= 31:\n+                    raise ValueError('Day out of range')\n+                if not 1 <= year <= 9999:\n+                    raise OverflowError('Year out of range')\n+                date_value = datetime.date(year, month, day)\n+            except (ValueError, OverflowError):\n                 return '%s-%s-%s' % (y or 0, m or 0, d or 0)\n             return date_value.strftime(input_format)\n         return data.get(name)\n", "normalized_occurrence": 1}
