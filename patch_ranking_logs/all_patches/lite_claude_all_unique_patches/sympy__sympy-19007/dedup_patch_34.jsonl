{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..dec3f60 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,17 +233,31 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy import Piecewise\n+        # For symbolic indices, return a Piecewise expression\n+        if isinstance(i, (Symbol, Expr)) or isinstance(j, (Symbol, Expr)):\n+            # Handle row selection\n+            row_block = 0\n+            row_index = i\n+            conditions = []\n+            for block_idx, numrows in enumerate(self.rowblocksizes):\n+                current_expr = self.blocks[block_idx, 0][row_index, j]\n+                if block_idx == 0:\n+                    conditions.append((current_expr, i < numrows))\n+                else:\n+                    prev_rows = sum(self.rowblocksizes[:block_idx])\n+                    conditions.append((current_expr, (i >= prev_rows) & (i < prev_rows + numrows)))\n+            return Piecewise(*conditions)\n+        \n+        # For concrete indices, use direct block lookup\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            i -= numrows\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            j -= numcols\n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..e582d82 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,27 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n+        if isinstance(i, (Symbol, Expr)) or isinstance(j, (Symbol, Expr)):\n+            row_block = 0\n+            row_index = i\n+            conditions = []\n+            for block_idx, numrows in enumerate(self.rowblocksizes):\n+                current_expr = self.blocks[block_idx, 0][row_index, j]\n+                if block_idx == 0:\n+                    conditions.append((current_expr, i < numrows))\n+                else:\n+                    prev_rows = sum(self.rowblocksizes[:block_idx])\n+                    conditions.append((current_expr, (i >= prev_rows) & (i < prev_rows + numrows)))\n+            return Piecewise(*conditions)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            i -= numrows\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            j -= numcols\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
