{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..0612432 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -340,17 +340,28 @@ class LiteralIncludeReader:\n \n         return lines\n \n+    def _get_indent(self, lines: List[str]) -> str:\n+        \"\"\"Get the indentation from the first non-empty line.\"\"\"\n+        for line in lines:\n+            if line.strip():\n+                return line[:len(line) - len(line.lstrip())]\n+        return ''\n+\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Get indentation from first non-empty line\n+            indent = self._get_indent(lines)\n+            lines.insert(0, indent + prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            # Get indentation from first non-empty line\n+            indent = self._get_indent(lines)\n+            lines.append(indent + append + '\\n')\n \n         return lines\n \n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..85a830b 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -223,15 +223,22 @@ class LiteralIncludeReader:\n             else:\n                 raise ValueError('end-before pattern not found: %s' % end)\n         return lines\n+    def _get_indent(self, lines: List[str]) -> str:\n+        for line in lines:\n+            if line.strip():\n+                return line[:len(line) - len(line.lstrip())]\n+        return ''\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            indent = self._get_indent(lines)\n+            lines.insert(0, indent + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            indent = self._get_indent(lines)\n+            lines.append(indent + append + '\\n')\n         return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n", "normalized_occurrence": 1}
