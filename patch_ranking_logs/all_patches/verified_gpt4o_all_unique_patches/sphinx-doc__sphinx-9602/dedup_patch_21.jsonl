{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9602", "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 1be1286..f735ecf 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -381,7 +381,8 @@ def _stringify_py37(annotation: Any) -> str:\n             returns = stringify(annotation.__args__[-1])\n             return '%s[[%s], %s]' % (qualname, args, returns)\n         elif qualname == 'Literal':\n-            args = ', '.join(repr(a) for a in annotation.__args__)\n+            # Ensure that Literal values are not treated as classes\n+            args = ', '.join(repr(a) if not isinstance(a, type) else a.__name__ for a in annotation.__args__)\n             return '%s[%s]' % (qualname, args)\n         elif str(annotation).startswith('typing.Annotated'):  # for py39+\n             return stringify(annotation.__args__[0])\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 2c56924..f08a258 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -276,7 +276,7 @@ def _stringify_py37(annotation: Any) -> str:\n             returns = stringify(annotation.__args__[-1])\n             return '%s[[%s], %s]' % (qualname, args, returns)\n         elif qualname == 'Literal':\n-            args = ', '.join((repr(a) for a in annotation.__args__))\n+            args = ', '.join((repr(a) if not isinstance(a, type) else a.__name__ for a in annotation.__args__))\n             return '%s[%s]' % (qualname, args)\n         elif str(annotation).startswith('typing.Annotated'):\n             return stringify(annotation.__args__[0])\n", "normalized_occurrence": 1}
