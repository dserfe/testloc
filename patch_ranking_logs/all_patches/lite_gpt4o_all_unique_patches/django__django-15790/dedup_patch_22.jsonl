{"model_name_or_path": "agentless", "instance_id": "django__django-15790", "model_patch": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex 85f830a..afed044 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -121,7 +121,12 @@ class Engine:\n     def get_template_libraries(self, libraries):\n         loaded = {}\n         for name, path in libraries.items():\n-            loaded[name] = import_library(path)\n+            lib = import_library(path)\n+            if lib in loaded.values():\n+                raise ImproperlyConfigured(\n+                    f\"'{name}' is used for multiple template tag modules: '{path}', '{[k for k, v in loaded.items() if v == lib][0]}'\"\n+                )\n+            loaded[name] = lib\n         return loaded\n \n     @cached_property\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/engine.py b/django/template/engine.py\nindex 9ee461a..12a221f 100644\n--- a/django/template/engine.py\n+++ b/django/template/engine.py\n@@ -57,7 +57,10 @@ class Engine:\n     def get_template_libraries(self, libraries):\n         loaded = {}\n         for name, path in libraries.items():\n-            loaded[name] = import_library(path)\n+            lib = import_library(path)\n+            if lib in loaded.values():\n+                raise ImproperlyConfigured(f\"'{name}' is used for multiple template tag modules: '{path}', '{[k for k, v in loaded.items() if v == lib][0]}'\")\n+            loaded[name] = lib\n         return loaded\n     @cached_property\n     def template_loaders(self):\n", "normalized_occurrence": 1}
