{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..a825c89 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -95,6 +95,9 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                                                  sample_weight=sample_weight)\n                 for clf in clfs if clf is not None)\n \n+        if hasattr(self, 'weights'):\n+            self.weights = [w for est, w in zip(self.estimators, self.weights) if est[1] is not None]\n+\n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n             self.named_estimators_[k[0]] = e\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..b7d7a37 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -43,6 +43,8 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n         if n_isnone == len(self.estimators):\n             raise ValueError('All estimators are None. At least one is required!')\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clone(clf), X, y, sample_weight=sample_weight) for clf in clfs if clf is not None))\n+        if hasattr(self, 'weights'):\n+            self.weights = [w for est, w in zip(self.estimators, self.weights) if est[1] is not None]\n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n             self.named_estimators_[k[0]] = e\n", "normalized_occurrence": 1}
