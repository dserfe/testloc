{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 2f2ca70..b2f21be 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1278,9 +1278,15 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n \n     def _hstack(self, Xs):\n         config = _get_output_config(\"transform\", self)\n-        if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n+        if config[\"dense\"] == \"pandas\":\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            lengths = [len(X) for X in Xs]\n+            if len(set(lengths)) != 1:\n+                raise ValueError(\n+                    f\"Length mismatch: Expected all input arrays to have the same length, \"\n+                    f\"but got lengths {lengths}\"\n+                )\n+            return pd.concat(Xs, axis=1, ignore_index=True)\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex f4194e0..3bcc58e 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -348,9 +348,12 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         return self._hstack(Xs)\n     def _hstack(self, Xs):\n         config = _get_output_config('transform', self)\n-        if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n+        if config['dense'] == 'pandas':\n             pd = check_pandas_support('transform')\n-            return pd.concat(Xs, axis=1)\n+            lengths = [len(X) for X in Xs]\n+            if len(set(lengths)) != 1:\n+                raise ValueError(f'Length mismatch: Expected all input arrays to have the same length, but got lengths {lengths}')\n+            return pd.concat(Xs, axis=1, ignore_index=True)\n         if any((sparse.issparse(f) for f in Xs)):\n             Xs = sparse.hstack(Xs).tocsr()\n         else:\n", "normalized_occurrence": 1}
