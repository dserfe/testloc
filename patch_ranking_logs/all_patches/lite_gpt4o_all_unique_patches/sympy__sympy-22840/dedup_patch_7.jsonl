{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..20a48d2 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -686,7 +686,8 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n     for e in exprs:\n         if isinstance(e, Basic):\n             reduced_e = _rebuild(e)\n-        else:\n+        elif isinstance(e, MatrixSymbol):\n+            temp.append(e)\n             reduced_e = e\n         reduced_exprs.append(reduced_e)\n     return replacements, reduced_exprs\n@@ -784,7 +785,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n         exprs = sympify(exprs)\n \n     # Handle the case if just one expression was passed.\n-    if isinstance(exprs, (Basic, MatrixBase)):\n+    if isinstance(exprs, (Basic, MatrixBase, MatrixSymbol)):\n         exprs = [exprs]\n \n     copy = exprs\n@@ -792,9 +793,10 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     for e in exprs:\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n             temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.todok().items()))\n-        else:\n+        elif isinstance(e, MatrixSymbol):\n+            temp.append(e)\n             temp.append(e)\n     exprs = temp\n     del temp\n@@ -835,7 +837,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n             reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n             if isinstance(e, ImmutableMatrix):\n                 reduced_exprs[i] = reduced_exprs[i].as_immutable()\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             m = SparseMatrix(e.rows, e.cols, {})\n             for k, v in reduced_exprs[i]:\n                 m[k] = v\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..9659c95 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -298,7 +298,8 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n     for e in exprs:\n         if isinstance(e, Basic):\n             reduced_e = _rebuild(e)\n-        else:\n+        elif isinstance(e, MatrixSymbol):\n+            temp.append(e)\n             reduced_e = e\n         reduced_exprs.append(reduced_e)\n     return (replacements, reduced_exprs)\n@@ -308,16 +309,17 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n         return _cse_homogeneous(exprs, symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order, ignore=ignore)\n     if isinstance(exprs, (int, float)):\n         exprs = sympify(exprs)\n-    if isinstance(exprs, (Basic, MatrixBase)):\n+    if isinstance(exprs, (Basic, MatrixBase, MatrixSymbol)):\n         exprs = [exprs]\n     copy = exprs\n     temp = []\n     for e in exprs:\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n             temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.todok().items()))\n-        else:\n+        elif isinstance(e, MatrixSymbol):\n+            temp.append(e)\n             temp.append(e)\n     exprs = temp\n     del temp\n@@ -342,7 +344,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n             reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n             if isinstance(e, ImmutableMatrix):\n                 reduced_exprs[i] = reduced_exprs[i].as_immutable()\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             m = SparseMatrix(e.rows, e.cols, {})\n             for k, v in reduced_exprs[i]:\n                 m[k] = v\n", "normalized_occurrence": 1}
