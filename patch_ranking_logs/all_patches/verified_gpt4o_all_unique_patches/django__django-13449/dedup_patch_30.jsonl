{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..fdb70c3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -23,8 +23,10 @@ class SQLiteNumericMixin:\n     def as_sqlite(self, compiler, connection, **extra_context):\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n+            if self.output_field.get_internal_type() == 'DecimalField' and 'OVER' not in sql:\n                 sql = 'CAST(%s AS NUMERIC)' % sql\n+            elif self.output_field.get_internal_type() == 'DecimalField' and 'OVER' in sql:\n+                sql = 'CAST(%s AS NUMERIC)' % sql.split('OVER')[0] + 'OVER' + sql.split('OVER')[1]\n         except FieldError:\n             pass\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..9e94345 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -16,8 +16,10 @@ class SQLiteNumericMixin:\n     def as_sqlite(self, compiler, connection, **extra_context):\n         sql, params = self.as_sql(compiler, connection, **extra_context)\n         try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n+            if self.output_field.get_internal_type() == 'DecimalField' and 'OVER' not in sql:\n                 sql = 'CAST(%s AS NUMERIC)' % sql\n+            elif self.output_field.get_internal_type() == 'DecimalField' and 'OVER' in sql:\n+                sql = 'CAST(%s AS NUMERIC)' % sql.split('OVER')[0] + 'OVER' + sql.split('OVER')[1]\n         except FieldError:\n             pass\n         return (sql, params)\n", "normalized_occurrence": 1}
