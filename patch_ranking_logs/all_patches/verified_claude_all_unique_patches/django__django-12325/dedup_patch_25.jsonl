{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0cf39d7..8aecf50 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -240,20 +240,27 @@ class Options:\n \n         if self.pk is None:\n             if self.parents:\n-                # Promote the first parent link in lieu of adding yet another\n-                # field.\n-                field = next(iter(self.parents.values()))\n-                # Look for a local field with the same name as the\n-                # first parent link. If a local field has already been\n-                # created, use it instead of promoting the parent\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                # Find the parent link field (the one with parent_link=True)\n+                parent_link_field = None\n+                for field in self.parents.values():\n+                    if field.remote_field.parent_link:\n+                        parent_link_field = field\n+                        break\n+                \n+                if parent_link_field is None:\n+                    # If no explicit parent link found, use the first parent as before\n+                    parent_link_field = next(iter(self.parents.values()))\n+                \n+                # Look for a local field with the same name as the parent link\n+                already_created = [fld for fld in self.local_fields if fld.name == parent_link_field.name]\n                 if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n+                    parent_link_field = already_created[0]\n+                \n+                parent_link_field.primary_key = True\n+                self.setup_pk(parent_link_field)\n+                if not parent_link_field.remote_field.parent_link:\n                     raise ImproperlyConfigured(\n-                        'Add parent_link=True to %s.' % field,\n+                        'Add parent_link=True to %s.' % parent_link_field,\n                     )\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n", "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex a68c94c..cbd0e12 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -149,14 +149,20 @@ class Options:\n             self.order_with_respect_to = None\n         if self.pk is None:\n             if self.parents:\n-                field = next(iter(self.parents.values()))\n-                already_created = [fld for fld in self.local_fields if fld.name == field.name]\n+                parent_link_field = None\n+                for field in self.parents.values():\n+                    if field.remote_field.parent_link:\n+                        parent_link_field = field\n+                        break\n+                if parent_link_field is None:\n+                    parent_link_field = next(iter(self.parents.values()))\n+                already_created = [fld for fld in self.local_fields if fld.name == parent_link_field.name]\n                 if already_created:\n-                    field = already_created[0]\n-                field.primary_key = True\n-                self.setup_pk(field)\n-                if not field.remote_field.parent_link:\n-                    raise ImproperlyConfigured('Add parent_link=True to %s.' % field)\n+                    parent_link_field = already_created[0]\n+                parent_link_field.primary_key = True\n+                self.setup_pk(parent_link_field)\n+                if not parent_link_field.remote_field.parent_link:\n+                    raise ImproperlyConfigured('Add parent_link=True to %s.' % parent_link_field)\n             else:\n                 auto = AutoField(verbose_name='ID', primary_key=True, auto_created=True)\n                 model.add_to_class('id', auto)\n", "normalized_occurrence": 1}
