{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7373", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 74f45dd..679e201 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -12,23 +12,6 @@ from ..outcomes import TEST_OUTCOME\n from .structures import Mark\n from _pytest.config import Config\n from _pytest.nodes import Item\n-from _pytest.store import StoreKey\n-\n-\n-evalcache_key = StoreKey[Dict[str, Any]]()\n-\n-\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n \n \n class MarkEvaluator:\n@@ -83,6 +66,7 @@ class MarkEvaluator:\n         if hasattr(self, \"result\"):\n             result = getattr(self, \"result\")  # type: bool\n             return result\n+        import _pytest._code\n         self._marks = self._get_marks()\n \n         if self._marks:\n@@ -90,6 +74,13 @@ class MarkEvaluator:\n             for mark in self._marks:\n                 self._mark = mark\n                 if \"condition\" not in mark.kwargs:\n+                    continue\n+                expr = mark.kwargs[\"condition\"]\n+                d = self._getglobals()\n+                exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                if eval(exprcode, d):\n+                    self.result = True\n+                    break\n                     args = mark.args\n                 else:\n                     args = (mark.kwargs[\"condition\"],)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 678113f..80e8cf8 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -11,18 +11,6 @@ from ..outcomes import TEST_OUTCOME\n from .structures import Mark\n from _pytest.config import Config\n from _pytest.nodes import Item\n-from _pytest.store import StoreKey\n-evalcache_key = StoreKey[Dict[str, Any]]()\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-        exprcode = _pytest._code.compile(expr, mode='eval')\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n class MarkEvaluator:\n     def __init__(self, item: Item, name: str) -> None:\n         self.item = item\n@@ -61,12 +49,20 @@ class MarkEvaluator:\n         if hasattr(self, 'result'):\n             result = getattr(self, 'result')\n             return result\n+        import _pytest._code\n         self._marks = self._get_marks()\n         if self._marks:\n             self.result = False\n             for mark in self._marks:\n                 self._mark = mark\n                 if 'condition' not in mark.kwargs:\n+                    continue\n+                expr = mark.kwargs['condition']\n+                d = self._getglobals()\n+                exprcode = _pytest._code.compile(expr, mode='eval')\n+                if eval(exprcode, d):\n+                    self.result = True\n+                    break\n                     args = mark.args\n                 else:\n                     args = (mark.kwargs['condition'],)\n", "normalized_occurrence": 1}
