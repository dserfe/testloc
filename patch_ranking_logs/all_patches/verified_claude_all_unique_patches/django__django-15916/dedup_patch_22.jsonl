{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..b9cd11b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -257,13 +257,25 @@ class ModelFormOptions:\n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n+        # First check for formfield_callback in Meta of the new class\n+        meta = attrs.get(\"Meta\", None)\n+        formfield_callback = getattr(meta, \"formfield_callback\", None) if meta else None\n \n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # If not found in Meta, check bases' Meta\n+        if formfield_callback is None:\n+            for b in bases:\n+                if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n+\n+        # Finally check class-level attribute, falling back to base classes\n+        if formfield_callback is None:\n+            formfield_callback = attrs.pop(\"formfield_callback\", None)\n+            if formfield_callback is None:\n+                for b in bases:\n+                    if hasattr(b, \"formfield_callback\"):\n+                        formfield_callback = b.formfield_callback\n+                        break\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..f029e3a 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -109,12 +109,20 @@ class ModelFormOptions:\n         self.field_classes = getattr(options, 'field_classes', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        meta = attrs.get('Meta', None)\n+        formfield_callback = getattr(meta, 'formfield_callback', None) if meta else None\n+        if formfield_callback is None:\n+            for b in bases:\n+                if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n+        if formfield_callback is None:\n+            formfield_callback = attrs.pop('formfield_callback', None)\n+            if formfield_callback is None:\n+                for b in bases:\n+                    if hasattr(b, 'formfield_callback'):\n+                        formfield_callback = b.formfield_callback\n+                        break\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n", "normalized_occurrence": 1}
