{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..eb85ff5 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,10 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        if hasattr(self, '_initial_handler_level'):\n+            self.handler.setLevel(self._initial_handler_level)\n+            logger = logging.getLogger(logger_name)\n+            logger.setLevel(level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n@@ -435,6 +439,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n \n     @contextmanager\n     def at_level(\n@@ -451,6 +456,7 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         try:\n             yield\n         finally:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..e577103 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -168,6 +168,10 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        if hasattr(self, '_initial_handler_level'):\n+            self.handler.setLevel(self._initial_handler_level)\n+            logger = logging.getLogger(logger_name)\n+            logger.setLevel(level)\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n@@ -192,6 +196,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n@@ -199,6 +204,7 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         try:\n             yield\n         finally:\n", "normalized_occurrence": 1}
