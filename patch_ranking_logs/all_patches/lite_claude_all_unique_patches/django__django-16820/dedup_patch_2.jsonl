{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..11cfcb2 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1520,9 +1520,42 @@ class MigrationAutodetector:\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n \n-    # RemovedInDjango51Warning.\n     def generate_removed_altered_index_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+        \"\"\"Convert index_together changes to AddIndex/RemoveIndex operations.\"\"\"\n+        from django.db.models import Index\n+\n+        for (\n+            old_value,\n+            new_value,\n+            app_label,\n+            model_name,\n+            dependencies,\n+        ) in self._get_altered_foo_together_operations(\"index_together\"):\n+            # Remove old indexes\n+            for fields in old_value:\n+                if fields not in new_value:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    self.add_operation(\n+                        app_label,\n+                        operations.RemoveIndex(\n+                            model_name=model_name,\n+                            name=index.name,\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n+\n+            # Add new indexes\n+            for fields in new_value:\n+                if fields not in old_value:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    self.add_operation(\n+                        app_label,\n+                        operations.AddIndex(\n+                            model_name=model_name,\n+                            index=index,\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n \n     def _generate_altered_foo_together(self, operation):\n         for (\n@@ -1543,9 +1576,10 @@ class MigrationAutodetector:\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n \n-    # RemovedInDjango51Warning.\n     def generate_altered_index_together(self):\n-        self._generate_altered_foo_together(operations.AlterIndexTogether)\n+        \"\"\"Redirect to generate_removed_altered_index_together to handle all index changes.\"\"\"\n+        # This method is kept for compatibility but delegates to the more comprehensive handler\n+        self.generate_removed_altered_index_together()\n \n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..37fa5d4 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -619,7 +619,16 @@ class MigrationAutodetector:\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_removed_altered_index_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+        from django.db.models import Index\n+        for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations('index_together'):\n+            for fields in old_value:\n+                if fields not in new_value:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    self.add_operation(app_label, operations.RemoveIndex(model_name=model_name, name=index.name), dependencies=dependencies)\n+            for fields in new_value:\n+                if fields not in old_value:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    self.add_operation(app_label, operations.AddIndex(model_name=model_name, index=index), dependencies=dependencies)\n     def _generate_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n             removal_value = new_value.intersection(old_value)\n@@ -628,7 +637,7 @@ class MigrationAutodetector:\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_altered_index_together(self):\n-        self._generate_altered_foo_together(operations.AlterIndexTogether)\n+        self.generate_removed_altered_index_together()\n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)\n         for app_label, model_name in sorted(models_to_check):\n", "normalized_occurrence": 1}
