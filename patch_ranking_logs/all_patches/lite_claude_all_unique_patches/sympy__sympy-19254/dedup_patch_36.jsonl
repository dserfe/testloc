{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..e843175 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,57 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n-    n = dup_degree(f)\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    This implements the improved Knuth-Cohen bound which is generally tighter\n+    than the classical Mignotte bound.\n+    \"\"\"\n+    n = dup_degree(f)\n+    lc = abs(dup_LC(f, K))\n+    \n+    if n <= 0:\n+        return lc\n+        \n+    norm = dup_max_norm(f, K)\n+    return K(2) * lc * min(\n+        norm,\n+        K.sqrt(sum(abs(c)**2 for c in f[1:]) / lc**2)\n+    )\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This implements the multivariate version of the Knuth-Cohen bound,\n+    which provides tighter bounds than the classical Mignotte bound.\n+    \"\"\"\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n+        \n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    \n+    if n <= 0:\n+        return lc\n+        \n+    norm = dmp_max_norm(f, u, K)\n+    # For multivariate case, we use a generalized form of the bound\n+    coeffs_sum = K(0)\n+    \n+    def process_coeffs(poly, level):\n+        nonlocal coeffs_sum\n+        if level == 0:\n+            for c in poly[1:]:  # Skip the leading coefficient\n+                coeffs_sum += abs(c)**2\n+        else:\n+            for p in poly:\n+                process_coeffs(p, level - 1)\n+    \n+    process_coeffs(f, u)\n+    return K(2) * lc * min(\n+        norm,\n+        K.sqrt(coeffs_sum / lc**2)\n+    )\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..85f7de5 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,31 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dup_LC(f, K))\n+    if n <= 0:\n+        return lc\n+    norm = dup_max_norm(f, K)\n+    return K(2) * lc * min(norm, K.sqrt(sum((abs(c) ** 2 for c in f[1:])) / lc ** 2))\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    if n <= 0:\n+        return lc\n+    norm = dmp_max_norm(f, u, K)\n+    coeffs_sum = K(0)\n+    def process_coeffs(poly, level):\n+        nonlocal coeffs_sum\n+        if level == 0:\n+            for c in poly[1:]:\n+                coeffs_sum += abs(c) ** 2\n+        else:\n+            for p in poly:\n+                process_coeffs(p, level - 1)\n+    process_coeffs(f, u)\n+    return K(2) * lc * min(norm, K.sqrt(coeffs_sum / lc ** 2))\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
