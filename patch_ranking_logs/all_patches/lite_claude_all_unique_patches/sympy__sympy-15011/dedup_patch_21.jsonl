{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..9833d91 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,11 +707,21 @@ class _EvaluatorPrinter(object):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n \n+        # Check if any args have invalid Python identifier names\n+        def needs_dummy(a):\n+            if isinstance(a, (Symbol, MatrixSymbol)):\n+                return not self._is_safe_ident(a.name)\n+            return False\n+\n+        # Force dummify if any arg has an invalid name\n+        if not dummify and any(needs_dummy(a) for a in flatten(args)):\n+            dummify = True\n+\n         # Args of type Dummy can cause name collisions with args\n         # of type Symbol.  Force dummify of everything in this\n         # situation.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..39c3f68 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -282,9 +282,15 @@ class _EvaluatorPrinter(object):\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n         dummify = self._dummify\n+        def needs_dummy(a):\n+            if isinstance(a, (Symbol, MatrixSymbol)):\n+                return not self._is_safe_ident(a.name)\n+            return False\n+        if not dummify and any((needs_dummy(a) for a in flatten(args))):\n+            dummify = True\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n         argstrs = []\n", "normalized_occurrence": 1}
