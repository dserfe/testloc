{"model_name_or_path": "agentless", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 5126111..cf6a467 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -308,7 +308,8 @@ class HttpResponse(HttpResponseBase):\n \n     @content.setter\n     def content(self, value):\n-        # Consume iterators upon assignment to allow repeated iteration.\n+        if isinstance(value, memoryview):\n+            value = value.tobytes()\n         if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 1fade57..5fd7a3c 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -182,6 +182,8 @@ class HttpResponse(HttpResponseBase):\n         return b''.join(self._container)\n     @content.setter\n     def content(self, value):\n+        if isinstance(value, memoryview):\n+            value = value.tobytes()\n         if hasattr(value, '__iter__') and (not isinstance(value, (bytes, str))):\n             content = b''.join((self.make_bytes(chunk) for chunk in value))\n             if hasattr(value, 'close'):\n", "normalized_occurrence": 1}
