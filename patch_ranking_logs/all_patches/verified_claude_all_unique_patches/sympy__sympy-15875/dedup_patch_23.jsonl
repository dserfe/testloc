{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..9925db0 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -534,36 +534,46 @@ class Add(Expr, AssocOp):\n             # issue 10528: there is no way to know if a nc symbol\n             # is zero or not\n             return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+\n+        # First try direct evaluation if possible\n+        if self.is_number:\n+            return self.equals(0)\n+\n+        # Separate into real and imaginary parts\n+        re_part = []\n+        im_part = []\n+        \n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    re_part.append(a)\n                 else:\n-                    return\n+                    return None\n             elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                coeff = a.as_coefficient(S.ImaginaryUnit)\n+                if coeff is None:\n+                    return None\n+                if coeff.is_zero:\n+                    continue\n+                elif coeff.is_zero is False:\n+                    im_part.append(coeff)\n+                else:\n+                    return None\n             else:\n-                return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n+                # For terms that are not clearly real or imaginary,\n+                # we cannot determine if they are zero\n+                return None\n+\n+        # Both parts must be zero for the sum to be zero\n+        re_sum = self.func(*re_part) if re_part else S.Zero\n+        im_sum = self.func(*im_part) if im_part else S.Zero\n+\n+        if re_sum.is_zero is None or im_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n-            return False\n+        \n+        return re_sum.is_zero and im_sum.is_zero\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..76f3c1f 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -288,36 +288,35 @@ class Add(Expr, AssocOp):\n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n             return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        if self.is_number:\n+            return self.equals(0)\n+        re_part = []\n+        im_part = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    re_part.append(a)\n                 else:\n-                    return\n+                    return None\n             elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                coeff = a.as_coefficient(S.ImaginaryUnit)\n+                if coeff is None:\n+                    return None\n+                if coeff.is_zero:\n+                    continue\n+                elif coeff.is_zero is False:\n+                    im_part.append(coeff)\n+                else:\n+                    return None\n             else:\n-                return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n+                return None\n+        re_sum = self.func(*re_part) if re_part else S.Zero\n+        im_sum = self.func(*im_part) if im_part else S.Zero\n+        if re_sum.is_zero is None or im_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n-        if b.is_zero is False:\n-            return False\n+        return re_sum.is_zero and im_sum.is_zero\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
