{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..cfb2f69 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -216,7 +216,15 @@ class Point(GeometryEntity):\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n-            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            if isinstance(other, Mul):\n+                # Attempt to break down the Mul into recognizable parts\n+                factors = other.as_ordered_factors()\n+                new_point = factors[0]\n+                for factor in factors[1:]:\n+                    new_point *= factor\n+                s, o = Point._normalize_dimension(self, Point(new_point, evaluate=False))\n+            else:\n+                raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..27cb67c 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -65,7 +65,14 @@ class Point(GeometryEntity):\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n-            raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            if isinstance(other, Mul):\n+                factors = other.as_ordered_factors()\n+                new_point = factors[0]\n+                for factor in factors[1:]:\n+                    new_point *= factor\n+                s, o = Point._normalize_dimension(self, Point(new_point, evaluate=False))\n+            else:\n+                raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n     def __contains__(self, item):\n", "normalized_occurrence": 1}
