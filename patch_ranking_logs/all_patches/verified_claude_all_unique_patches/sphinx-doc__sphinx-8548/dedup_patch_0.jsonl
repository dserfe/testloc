{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..c128de5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1592,15 +1592,39 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             selected = []\n             for name in self.options.members:  # type: str\n                 if name in members:\n-                    selected.append(ObjectMember(name, members[name].value,\n-                                                 docstring=members[name].docstring))\n+                    member = members[name]\n+                    docstring = member.docstring\n+                    if docstring is None and self.config.autodoc_inherit_docstrings:\n+                        # Try to get docstring from base classes\n+                        for base in self.object.__mro__[1:]:\n+                            base_member = getattr(base, name, None)\n+                            if base_member is not None:\n+                                docstring = getdoc(base_member, self.get_attr,\n+                                                 self.config.autodoc_inherit_docstrings,\n+                                                 self.parent, name)\n+                                if docstring:\n+                                    break\n+                    selected.append(ObjectMember(name, member.value, docstring=docstring))\n                 else:\n                     logger.warning(__('missing attribute %s in object %s') %\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n-                           for m in members.values()]\n+            result = []\n+            for m in members.values():\n+                docstring = m.docstring\n+                if docstring is None and self.config.autodoc_inherit_docstrings:\n+                    # Try to get docstring from base classes\n+                    for base in self.object.__mro__[1:]:\n+                        base_member = getattr(base, m.name, None)\n+                        if base_member is not None:\n+                            docstring = getdoc(base_member, self.get_attr,\n+                                             self.config.autodoc_inherit_docstrings,\n+                                             self.parent, m.name)\n+                            if docstring:\n+                                break\n+                result.append(ObjectMember(m.name, m.value, docstring=docstring))\n+            return False, result\n         else:\n             return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n                            for m in members.values() if m.class_ == self.object]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c754f31..947181e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -892,12 +892,32 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             selected = []\n             for name in self.options.members:\n                 if name in members:\n-                    selected.append(ObjectMember(name, members[name].value, docstring=members[name].docstring))\n+                    member = members[name]\n+                    docstring = member.docstring\n+                    if docstring is None and self.config.autodoc_inherit_docstrings:\n+                        for base in self.object.__mro__[1:]:\n+                            base_member = getattr(base, name, None)\n+                            if base_member is not None:\n+                                docstring = getdoc(base_member, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, name)\n+                                if docstring:\n+                                    break\n+                    selected.append(ObjectMember(name, member.value, docstring=docstring))\n                 else:\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values()])\n+            result = []\n+            for m in members.values():\n+                docstring = m.docstring\n+                if docstring is None and self.config.autodoc_inherit_docstrings:\n+                    for base in self.object.__mro__[1:]:\n+                        base_member = getattr(base, m.name, None)\n+                        if base_member is not None:\n+                            docstring = getdoc(base_member, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, m.name)\n+                            if docstring:\n+                                break\n+                result.append(ObjectMember(m.name, m.value, docstring=docstring))\n+            return (False, result)\n         else:\n             return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values() if m.class_ == self.object])\n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n", "normalized_occurrence": 1}
