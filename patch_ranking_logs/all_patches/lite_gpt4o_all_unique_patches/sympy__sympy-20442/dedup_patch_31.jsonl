{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..cd17221 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -102,9 +102,14 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n         return expr\n \n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n+    if depmat is None or all(p == 0 for p in depmat):\n+        return expr\n     if depmat is None:\n         return expr\n \n+    if depmat is None or all(p == 0 for p in depmat):\n+        return expr\n+\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..0136624 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -39,8 +39,12 @@ def convert_to(expr, target_units, unit_system='SI'):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n+    if depmat is None or all((p == 0 for p in depmat)):\n+        return expr\n     if depmat is None:\n         return expr\n+    if depmat is None or all((p == 0 for p in depmat)):\n+        return expr\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n def quantity_simplify(expr):\n", "normalized_occurrence": 1}
