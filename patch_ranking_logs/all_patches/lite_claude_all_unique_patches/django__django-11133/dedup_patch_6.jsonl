{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 5126111..d2255c7 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -309,7 +309,7 @@ class HttpResponse(HttpResponseBase):\n     @content.setter\n     def content(self, value):\n         # Consume iterators upon assignment to allow repeated iteration.\n-        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str)):\n+        if hasattr(value, '__iter__') and not isinstance(value, (bytes, str, memoryview)):\n             content = b''.join(self.make_bytes(chunk) for chunk in value)\n             if hasattr(value, 'close'):\n                 try:\n@@ -317,7 +317,10 @@ class HttpResponse(HttpResponseBase):\n                 except Exception:\n                     pass\n         else:\n-            content = self.make_bytes(value)\n+            if isinstance(value, memoryview):\n+                content = bytes(value)\n+            else:\n+                content = self.make_bytes(value)\n         # Create a list of properly encoded bytestrings to support write().\n         self._container = [content]\n \n", "occurrence": 2, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 1fade57..3438e5c 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -182,13 +182,15 @@ class HttpResponse(HttpResponseBase):\n         return b''.join(self._container)\n     @content.setter\n     def content(self, value):\n-        if hasattr(value, '__iter__') and (not isinstance(value, (bytes, str))):\n+        if hasattr(value, '__iter__') and (not isinstance(value, (bytes, str, memoryview))):\n             content = b''.join((self.make_bytes(chunk) for chunk in value))\n             if hasattr(value, 'close'):\n                 try:\n                     value.close()\n                 except Exception:\n                     pass\n+        elif isinstance(value, memoryview):\n+            content = bytes(value)\n         else:\n             content = self.make_bytes(value)\n         self._container = [content]\n", "normalized_occurrence": 2}
