{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..805f61a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1155,11 +1155,18 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        # Only do fuzzy matching for non-attribute types\n+                        if 'attribute' not in objtypes:\n+                            # \"fuzzy\" searching mode\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n+                        # For attributes, require exact scope matching\n+                        elif modname and classname:\n+                            fullname = modname + '.' + classname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                matches = [(fullname, self.objects[fullname])]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..db88ef4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -682,9 +682,13 @@ class PythonDomain(Domain):\n                         newname = modname + '.' + name\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n-                    else:\n+                    elif 'attribute' not in objtypes:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                    elif modname and classname:\n+                        fullname = modname + '.' + classname + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            matches = [(fullname, self.objects[fullname])]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
