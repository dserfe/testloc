{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24627", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a477466..3071f72 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -210,23 +210,22 @@ class Artist:\n         # callback has one parameter, which is the child to be removed.\n         if self._remove_method is not None:\n             self._remove_method(self)\n-            # clear stale callback\n-            self.stale_callback = None\n-            _ax_flag = False\n-            if hasattr(self, 'axes') and self.axes:\n-                # remove from the mouse hit list\n-                self.axes._mouseover_set.discard(self)\n-                self.axes.stale = True\n-                self.axes = None  # decouple the artist from the Axes\n-                _ax_flag = True\n-\n+            self._disconnect_from_axes()\n             if self.figure:\n                 self.figure = None\n-                if not _ax_flag:\n-                    self.figure = True\n \n         else:\n             raise NotImplementedError('cannot remove artist')\n+\n+    def _disconnect_from_axes(self):\n+        \"\"\"Helper to disconnect artist from axes.\"\"\"\n+        # clear stale callback\n+        self.stale_callback = None\n+        if hasattr(self, 'axes') and self.axes:\n+            # remove from the mouse hit list\n+            self.axes._mouseover_set.discard(self)\n+            self.axes.stale = True\n+            self.axes = None  # decouple the artist from the Axes\n         # TODO: the fix for the collections relim problem is to move the\n         # limits calculation into the artist itself, including the property of\n         # whether or not the artist should affect the limits.  Then there will\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a361ed7..9019bde 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -110,19 +110,17 @@ class Artist:\n     def remove(self):\n         if self._remove_method is not None:\n             self._remove_method(self)\n-            self.stale_callback = None\n-            _ax_flag = False\n-            if hasattr(self, 'axes') and self.axes:\n-                self.axes._mouseover_set.discard(self)\n-                self.axes.stale = True\n-                self.axes = None\n-                _ax_flag = True\n+            self._disconnect_from_axes()\n             if self.figure:\n                 self.figure = None\n-                if not _ax_flag:\n-                    self.figure = True\n         else:\n             raise NotImplementedError('cannot remove artist')\n+    def _disconnect_from_axes(self):\n+        self.stale_callback = None\n+        if hasattr(self, 'axes') and self.axes:\n+            self.axes._mouseover_set.discard(self)\n+            self.axes.stale = True\n+            self.axes = None\n     def have_units(self):\n         ax = self.axes\n         return ax and any((axis.have_units() for axis in ax._axis_map.values()))\n", "normalized_occurrence": 1}
