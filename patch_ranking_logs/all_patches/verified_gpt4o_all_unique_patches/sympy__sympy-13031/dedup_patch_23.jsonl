{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..bdc1728 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -54,12 +54,9 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def shape(self):\n-        numrows = numcols = 0\n         M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        numrows = sum(M[i, 0].shape[0] for i in range(M.shape[0])) if M.shape[0] > 0 else 0\n+        numcols = sum(M[0, i].shape[1] for i in range(M.shape[1])) if M.shape[1] > 0 else 0\n         return (numrows, numcols)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..b1779d2 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -24,12 +24,9 @@ class BlockMatrix(MatrixExpr):\n         return obj\n     @property\n     def shape(self):\n-        numrows = numcols = 0\n         M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n+        numrows = sum((M[i, 0].shape[0] for i in range(M.shape[0]))) if M.shape[0] > 0 else 0\n+        numcols = sum((M[0, i].shape[1] for i in range(M.shape[1]))) if M.shape[1] > 0 else 0\n         return (numrows, numcols)\n     @property\n     def blockshape(self):\n", "normalized_occurrence": 1}
