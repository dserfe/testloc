{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8475", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 49ae1f0..9060263 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -172,7 +172,13 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except HTTPError as err:\n+                        if isinstance(err, requests.exceptions.TooManyRedirects):\n+                            response = requests.get(req_url, stream=True, config=self.app.config,\n+                                                    auth=auth_info, **kwargs)\n+                            response.raise_for_status()\n+                        else:\n+                            raise\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex cf62af4..246c9bc 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -103,7 +103,12 @@ class CheckExternalLinksBuilder(Builder):\n                     try:\n                         response = requests.head(req_url, allow_redirects=True, config=self.app.config, auth=auth_info, **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except HTTPError as err:\n+                        if isinstance(err, requests.exceptions.TooManyRedirects):\n+                            response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n+                            response.raise_for_status()\n+                        else:\n+                            raise\n                         response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                         response.raise_for_status()\n             except HTTPError as err:\n", "normalized_occurrence": 1}
