{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..dc818fd 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1546,29 +1546,20 @@ class PairGrid(Grid):\n         else:\n             plt.sca(ax)\n \n-        if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n+        data = self.data.copy()\n \n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n+        if \"hue\" in kwargs:\n+            hue = kwargs[\"hue\"]\n+            if isinstance(hue, pd.Series):\n+                data[\"hue\"] = hue\n+                kwargs[\"hue\"] = \"hue\"\n \n-        data = self.data[axes_vars]\n-        if self._dropna:\n-            data = data.dropna()\n-\n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n+        if x_var == y_var:\n+            x = data[x_var]\n+            y = data[y_var]\n         else:\n-            hue = data.get(self._hue_var)\n-\n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n+            x = data[x_var]\n+            y = data[y_var]\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..45ec6d2 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -732,23 +732,18 @@ class PairGrid(Grid):\n             kwargs['ax'] = ax\n         else:\n             plt.sca(ax)\n+        data = self.data.copy()\n+        if 'hue' in kwargs:\n+            hue = kwargs['hue']\n+            if isinstance(hue, pd.Series):\n+                data['hue'] = hue\n+                kwargs['hue'] = 'hue'\n         if x_var == y_var:\n-            axes_vars = [x_var]\n-        else:\n-            axes_vars = [x_var, y_var]\n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n-        data = self.data[axes_vars]\n-        if self._dropna:\n-            data = data.dropna()\n-        x = data[x_var]\n-        y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n+            x = data[x_var]\n+            y = data[y_var]\n         else:\n-            hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n-            kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n+            x = data[x_var]\n+            y = data[y_var]\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n", "normalized_occurrence": 1}
