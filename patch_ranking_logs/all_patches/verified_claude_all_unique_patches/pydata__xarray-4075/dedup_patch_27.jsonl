{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4075", "model_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 8119fa7..ed5b392 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -142,7 +142,9 @@ class Weighted:\n         # we need to mask data values that are nan; else the weights are wrong\n         mask = da.notnull()\n \n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        # Convert boolean weights to numeric to ensure correct summing\n+        weights = self.weights * 1 if self.weights.dtype == bool else self.weights\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n \n         # 0-weights are not valid\n         valid_weights = sum_of_weights != 0.0\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/weighted.py b/xarray/core/weighted.py\nindex 7df2f5a..f45e168 100644\n--- a/xarray/core/weighted.py\n+++ b/xarray/core/weighted.py\n@@ -30,7 +30,8 @@ class Weighted:\n         return dot(da, weights, dims=dim)\n     def _sum_of_weights(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None) -> 'DataArray':\n         mask = da.notnull()\n-        sum_of_weights = self._reduce(mask, self.weights, dim=dim, skipna=False)\n+        weights = self.weights * 1 if self.weights.dtype == bool else self.weights\n+        sum_of_weights = self._reduce(mask, weights, dim=dim, skipna=False)\n         valid_weights = sum_of_weights != 0.0\n         return sum_of_weights.where(valid_weights)\n     def _weighted_sum(self, da: 'DataArray', dim: Optional[Union[Hashable, Iterable[Hashable]]]=None, skipna: Optional[bool]=None) -> 'DataArray':\n", "normalized_occurrence": 11}
