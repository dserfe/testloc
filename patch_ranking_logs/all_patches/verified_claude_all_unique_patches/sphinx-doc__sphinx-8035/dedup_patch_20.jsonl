{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..ba3c8de 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -95,6 +95,13 @@ def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n         return arg\n \n \n+def private_members_option(arg: Any) -> Union[object, List[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return ALL\n+    return [x.strip() for x in arg.split(',') if x.strip()]\n+\n+\n def member_order_option(arg: Any) -> Optional[str]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n@@ -649,15 +656,21 @@ class Documenter:\n             elif (namespace, membername) in attr_docs:\n                 if want_all and isprivate:\n                     # ignore members whose name starts with _ by default\n-                    keep = self.options.private_members\n+                    if self.options.private_members is ALL:\n+                        keep = True\n+                    else:\n+                        keep = membername in self.options.private_members\n                 else:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if self.options.private_members is ALL:\n+                    keep = has_doc or self.options.undoc_members\n+                else:\n+                    keep = membername in self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n", "occurrence": 4, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7fb9f3d..62575a9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -63,6 +63,12 @@ def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     else:\n         return arg\n \n+def private_members_option(arg: Any) -> Union[object, List[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return ALL\n+    return [x.strip() for x in arg.split(',') if x.strip()]\n+\n def member_order_option(arg: Any) -> Optional[str]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n@@ -503,12 +509,18 @@ class Documenter:\n                         keep = has_doc or self.options.undoc_members\n             elif (namespace, membername) in attr_docs:\n                 if want_all and isprivate:\n-                    keep = self.options.private_members\n+                    if self.options.private_members is ALL:\n+                        keep = True\n+                    else:\n+                        keep = membername in self.options.private_members\n                 else:\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n-                keep = self.options.private_members and (has_doc or self.options.undoc_members)\n+                if self.options.private_members is ALL:\n+                    keep = has_doc or self.options.undoc_members\n+                else:\n+                    keep = membername in self.options.private_members and (has_doc or self.options.undoc_members)\n             elif self.options.members is ALL and is_filtered_inherited_member(membername):\n                 keep = False\n             else:\n", "normalized_occurrence": 4}
