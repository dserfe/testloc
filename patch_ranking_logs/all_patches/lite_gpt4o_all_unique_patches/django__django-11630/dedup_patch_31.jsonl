{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c5f3683..cfe12a3 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -160,6 +160,9 @@ class Options:\n         # Store the original user-defined values for each option,\n         # for use when serializing the model definition\n         self.original_attrs = {}\n+        # Ensure we distinguish between models in different databases\n+        if 'using' in dir(cls):\n+            self.db_table = f\"{cls._state.db}_{self.db_table}\"\n \n         # Next, apply any overridden values from 'class Meta'.\n         if self.meta:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbc5560..a06984f 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -99,6 +99,8 @@ class Options:\n         self.model_name = self.object_name.lower()\n         self.verbose_name = camel_case_to_spaces(self.object_name)\n         self.original_attrs = {}\n+        if 'using' in dir(cls):\n+            self.db_table = f'{cls._state.db}_{self.db_table}'\n         if self.meta:\n             meta_attrs = self.meta.__dict__.copy()\n             for name in self.meta.__dict__:\n", "normalized_occurrence": 1}
