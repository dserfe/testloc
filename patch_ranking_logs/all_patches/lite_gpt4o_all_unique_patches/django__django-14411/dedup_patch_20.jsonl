{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..78937c7 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -307,7 +307,7 @@ def _get_non_gfk_field(opts, name):\n     return field\n \n \n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, widget=None):\n     \"\"\"\n     Return a sensible label for a field name. The name can be a callable,\n     property (but not created with @property decorator), or the name of an\n@@ -315,6 +315,7 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     return the resolved attribute (which could be a callable). This will be\n     None if (and only if) the name refers to a field.\n     \"\"\"\n+    from django.contrib.auth.forms import ReadOnlyPasswordHashWidget\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n@@ -361,7 +362,9 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         label = pretty_name(name)\n         attr = name\n \n-    if return_attr:\n+    # Check if the widget is ReadOnlyPasswordHashWidget\n+    if widget and isinstance(widget, ReadOnlyPasswordHashWidget):\n+        return (label, None) if return_attr else label\n         return (label, attr)\n     else:\n         return label\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..283a0f6 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -178,7 +178,8 @@ def _get_non_gfk_field(opts, name):\n     if field.is_relation and (not field.many_to_many) and hasattr(field, 'attname') and (field.attname == name):\n         raise FieldIsAForeignKeyColumnName()\n     return field\n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, widget=None):\n+    from django.contrib.auth.forms import ReadOnlyPasswordHashWidget\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n@@ -220,7 +221,8 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     except FieldIsAForeignKeyColumnName:\n         label = pretty_name(name)\n         attr = name\n-    if return_attr:\n+    if widget and isinstance(widget, ReadOnlyPasswordHashWidget):\n+        return (label, None) if return_attr else label\n         return (label, attr)\n     else:\n         return label\n", "normalized_occurrence": 1}
