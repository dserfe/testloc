{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex c21d9d7..8ff3274 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -88,7 +88,7 @@ def create_permissions(\n     # looking for.  We don't need to check for codenames since we already have\n     # a list of the ones we're going to create.\n     all_perms = set(\n-        Permission.objects.using(using)\n+        Permission.objects.db_manager(using)\n         .filter(\n             content_type__in=ctypes,\n         )\n", "occurrence": 2, "normalized_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex eb43af8..242dbbb 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -32,7 +32,7 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_\n         ctypes.add(ctype)\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n-    all_perms = set(Permission.objects.using(using).filter(content_type__in=ctypes).values_list('content_type', 'codename'))\n+    all_perms = set(Permission.objects.db_manager(using).filter(content_type__in=ctypes).values_list('content_type', 'codename'))\n     perms = [Permission(codename=codename, name=name, content_type=ct) for ct, (codename, name) in searched_perms if (ct.pk, codename) not in all_perms]\n     Permission.objects.using(using).bulk_create(perms)\n     if verbosity >= 2:\n", "normalized_occurrence": 3}
