{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..1790a85 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,12 +987,43 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        \n+        # Handle updates for multi-table inheritance\n+        model = self.model\n+        inherited_fields = {}\n+        direct_fields = {}\n+        \n+        # Separate fields by their parent models\n+        for name, value in kwargs.items():\n+            field = model._meta.get_field(name)\n+            if field.model is not model:\n+                inherited_fields.setdefault(field.model, {}).update({name: value})\n+            else:\n+                direct_fields[name] = value\n+                \n+        # Update each parent model separately\n+        rows = 0\n+        for parent_model, parent_fields in inherited_fields.items():\n+            parent_query = self.query.clone()\n+            parent_query.model = parent_model\n+            parent_query = parent_query.chain(sql.UpdateQuery)\n+            parent_query.add_update_values(parent_fields)\n+            parent_query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                parent_rows = parent_query.get_compiler(self.db).execute_sql(CURSOR)\n+                if parent_rows:\n+                    rows = parent_rows\n+                    \n+        # Update fields on the main model\n+        if direct_fields:\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(direct_fields)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                main_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if main_rows:\n+                    rows = main_rows\n+                    \n         self._result_cache = None\n         return rows\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..1a41e9b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,11 +532,34 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        model = self.model\n+        inherited_fields = {}\n+        direct_fields = {}\n+        for name, value in kwargs.items():\n+            field = model._meta.get_field(name)\n+            if field.model is not model:\n+                inherited_fields.setdefault(field.model, {}).update({name: value})\n+            else:\n+                direct_fields[name] = value\n+        rows = 0\n+        for parent_model, parent_fields in inherited_fields.items():\n+            parent_query = self.query.clone()\n+            parent_query.model = parent_model\n+            parent_query = parent_query.chain(sql.UpdateQuery)\n+            parent_query.add_update_values(parent_fields)\n+            parent_query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                parent_rows = parent_query.get_compiler(self.db).execute_sql(CURSOR)\n+                if parent_rows:\n+                    rows = parent_rows\n+        if direct_fields:\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(direct_fields)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                main_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if main_rows:\n+                    rows = main_rows\n         self._result_cache = None\n         return rows\n     update.alters_data = True\n", "normalized_occurrence": 1}
