{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 920d2a8..8010b80 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -66,7 +66,7 @@ class BaseFormSet(RenderableFormMixin):\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                  initial=None, error_class=ErrorList, form_kwargs=None,\n-                 error_messages=None):\n+                 error_messages=None, can_create=True):\n         self.is_bound = data is not None or files is not None\n         self.prefix = prefix or self.get_default_prefix()\n         self.auto_id = auto_id\n@@ -360,6 +360,10 @@ class BaseFormSet(RenderableFormMixin):\n         self._errors = []\n         self._non_form_errors = self.error_class(error_class='nonform', renderer=self.renderer)\n         empty_forms_count = 0\n+        \n+        if not getattr(self, 'can_create', True) and self.total_form_count() > self.initial_form_count():\n+            raise ValidationError(_(\"New object creation is not allowed.\"),\n+                               code='creation_not_allowed')\n \n         if not self.is_bound:  # Stop further processing.\n             return\n@@ -478,7 +482,7 @@ class BaseFormSet(RenderableFormMixin):\n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n                     can_delete=False, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n-                    can_delete_extra=True, renderer=None):\n+                    can_delete_extra=True, renderer=None, can_create=True):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..d13d141 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -875,7 +875,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None,\n+                         can_create=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n@@ -894,7 +895,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n-                              renderer=renderer)\n+                              renderer=renderer, can_create=can_create)\n     FormSet.model = model\n     return FormSet\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex f547482..fd77167 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -33,7 +33,7 @@ class BaseFormSet(RenderableFormMixin):\n     template_name_p = 'django/forms/formsets/p.html'\n     template_name_table = 'django/forms/formsets/table.html'\n     template_name_ul = 'django/forms/formsets/ul.html'\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, form_kwargs=None, error_messages=None):\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, initial=None, error_class=ErrorList, form_kwargs=None, error_messages=None, can_create=True):\n         self.is_bound = data is not None or files is not None\n         self.prefix = prefix or self.get_default_prefix()\n         self.auto_id = auto_id\n@@ -188,6 +188,8 @@ class BaseFormSet(RenderableFormMixin):\n         self._errors = []\n         self._non_form_errors = self.error_class(error_class='nonform', renderer=self.renderer)\n         empty_forms_count = 0\n+        if not getattr(self, 'can_create', True) and self.total_form_count() > self.initial_form_count():\n+            raise ValidationError(_('New object creation is not allowed.'), code='creation_not_allowed')\n         if not self.is_bound:\n             return\n         if not self.management_form.is_valid():\n@@ -236,7 +238,7 @@ class BaseFormSet(RenderableFormMixin):\n             return self.empty_form.media\n     def get_context(self):\n         return {'formset': self}\n-def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None):\n+def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None, can_create=True):\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n     if max_num is None:\ndiff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..1835327 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -454,12 +454,12 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, can_create=True):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback, widgets=widgets, localized_fields=localized_fields, labels=labels, help_texts=help_texts, error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer, can_create=can_create)\n     FormSet.model = model\n     return FormSet\n class BaseInlineFormSet(BaseModelFormSet):\n", "normalized_occurrence": 1}
