{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..924cb49 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -46,15 +46,33 @@ class Q(tree.Node):\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            return self._clone()\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            return other._clone()\n \n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        obj.add(self._clone(), conn)\n+        obj.add(other._clone(), conn)\n+        return obj\n+\n+    def _clone(self):\n+        \"\"\"Clone this Q object, making sure any non-pickleable values are converted.\"\"\"\n+        obj = type(self)()\n+        obj.connector = self.connector\n+        obj.negated = self.negated\n+        \n+        for child in self.children:\n+            if isinstance(child, Q):\n+                obj.children.append(child._clone())\n+            else:\n+                # For (key, value) tuples in children\n+                key, value = child\n+                # Convert dict_keys to list\n+                if isinstance(value, type({}.keys())):\n+                    value = list(value)\n+                obj.children.append((key, value))\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..eb4e1ce 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -21,13 +21,26 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n         if not other:\n-            return copy.deepcopy(self)\n+            return self._clone()\n         elif not self:\n-            return copy.deepcopy(other)\n+            return other._clone()\n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        obj.add(self._clone(), conn)\n+        obj.add(other._clone(), conn)\n+        return obj\n+    def _clone(self):\n+        obj = type(self)()\n+        obj.connector = self.connector\n+        obj.negated = self.negated\n+        for child in self.children:\n+            if isinstance(child, Q):\n+                obj.children.append(child._clone())\n+            else:\n+                key, value = child\n+                if isinstance(value, type({}.keys())):\n+                    value = list(value)\n+                obj.children.append((key, value))\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
