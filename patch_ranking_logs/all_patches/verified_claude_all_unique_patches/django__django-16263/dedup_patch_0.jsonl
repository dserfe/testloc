{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a096f65..07423f0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,19 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        # Remove annotations that aren't referenced in filters or ordering\n+        query = self.query.clone()\n+        annotations = query.annotations.copy()\n+        for name, annotation in annotations.items():\n+            if not annotation.refs_aggregate:\n+                # Check if the annotation is used in a filter or ordering\n+                if not (\n+                    any(name in filter.refs for filter in query.where.children)\n+                    or any(name in ordering[0].refs for ordering in query.order_by)\n+                ):\n+                    del query.annotations[name]\n+\n+        return query.get_count(using=self.db)\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 56014f8..ae1256b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -323,7 +323,13 @@ class QuerySet(AltersData):\n     def count(self):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n-        return self.query.get_count(using=self.db)\n+        query = self.query.clone()\n+        annotations = query.annotations.copy()\n+        for name, annotation in annotations.items():\n+            if not annotation.refs_aggregate:\n+                if not (any((name in filter.refs for filter in query.where.children)) or any((name in ordering[0].refs for ordering in query.order_by))):\n+                    del query.annotations[name]\n+        return query.get_count(using=self.db)\n     async def acount(self):\n         return await sync_to_async(self.count)()\n     def get(self, *args, **kwargs):\n", "normalized_occurrence": 1}
