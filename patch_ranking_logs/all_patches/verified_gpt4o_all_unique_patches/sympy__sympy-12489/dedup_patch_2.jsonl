{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..0d8dcaa 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -857,9 +857,9 @@ class Permutation(Basic):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:  # c\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):  # g\n@@ -919,7 +919,7 @@ class Permutation(Basic):\n             # but do allow the permutation size to be increased\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n-        obj = Basic.__new__(cls, aform)\n+        obj = super(Permutation, cls).__new__(cls)\n         obj._array_form = aform\n         obj._size = size\n         return obj\n@@ -1300,7 +1300,7 @@ class Permutation(Basic):\n         else:\n             b.extend(list(range(len(b), len(a))))\n             perm = [b[i] for i in a] + b[len(a):]\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     def commutes_with(self, other):\n         \"\"\"\n@@ -1341,7 +1341,7 @@ class Permutation(Basic):\n             raise NotImplementedError(\n                 'p**p is not defined; do you mean p^p (conjugate)?')\n         n = int(n)\n-        return _af_new(_af_pow(self.array_form, n))\n+        return self._af_new(_af_pow(self.array_form, n))\n \n     def __rxor__(self, i):\n         \"\"\"Return self(i) when ``i`` is an int.\n@@ -1519,7 +1519,7 @@ class Permutation(Basic):\n         >>> p*~p == ~p*p == Permutation([0, 1, 2, 3])\n         True\n         \"\"\"\n-        return _af_new(_af_invert(self._array_form))\n+        return self._af_new(_af_invert(self._array_form))\n \n     def __iter__(self):\n         \"\"\"Yield elements from array form.\n@@ -1629,7 +1629,7 @@ class Permutation(Basic):\n                 perm[j], perm[i] = perm[i], perm[j]\n                 i += 1\n                 j -= 1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     @classmethod\n     def unrank_nonlex(self, n, r):\n@@ -2423,7 +2423,7 @@ class Permutation(Basic):\n                     perm[i] = perm[i - 1]\n                 perm[k] = j - 1\n             r2 = r1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     def next_trotterjohnson(self):\n         \"\"\"\n@@ -2734,7 +2734,7 @@ class Permutation(Basic):\n         except IndexError:\n             raise ValueError(\"The inversion vector is not valid.\")\n         perm.extend(N)\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n \n     @classmethod\n     def random(self, n):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..84d3cb1 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -168,9 +168,9 @@ class Permutation(Basic):\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):\n@@ -209,7 +209,7 @@ class Permutation(Basic):\n         if size and size > len(aform):\n             aform.extend(list(range(len(aform), size)))\n         size = len(aform)\n-        obj = Basic.__new__(cls, aform)\n+        obj = super(Permutation, cls).__new__(cls)\n         obj._array_form = aform\n         obj._size = size\n         return obj\n@@ -328,7 +328,7 @@ class Permutation(Basic):\n         else:\n             b.extend(list(range(len(b), len(a))))\n             perm = [b[i] for i in a] + b[len(a):]\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n     def commutes_with(self, other):\n         a = self.array_form\n         b = other.array_form\n@@ -337,7 +337,7 @@ class Permutation(Basic):\n         if type(n) == Perm:\n             raise NotImplementedError('p**p is not defined; do you mean p^p (conjugate)?')\n         n = int(n)\n-        return _af_new(_af_pow(self.array_form, n))\n+        return self._af_new(_af_pow(self.array_form, n))\n     def __rxor__(self, i):\n         if int(i) == i:\n             return self(i)\n@@ -373,7 +373,7 @@ class Permutation(Basic):\n             ic.sort()\n         return ~Permutation([i[1] for i in ic])\n     def __invert__(self):\n-        return _af_new(_af_invert(self._array_form))\n+        return self._af_new(_af_invert(self._array_form))\n     def __iter__(self):\n         for i in self.array_form:\n             yield i\n@@ -410,7 +410,7 @@ class Permutation(Basic):\n                 perm[j], perm[i] = (perm[i], perm[j])\n                 i += 1\n                 j -= 1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n     @classmethod\n     def unrank_nonlex(self, n, r):\n         def _unrank1(n, r, a):\n@@ -624,7 +624,7 @@ class Permutation(Basic):\n                     perm[i] = perm[i - 1]\n                 perm[k] = j - 1\n             r2 = r1\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n     def next_trotterjohnson(self):\n         pi = self.array_form[:]\n         n = len(pi)\n@@ -724,7 +724,7 @@ class Permutation(Basic):\n         except IndexError:\n             raise ValueError('The inversion vector is not valid.')\n         perm.extend(N)\n-        return _af_new(perm)\n+        return cls._af_new(perm)\n     @classmethod\n     def random(self, n):\n         perm_array = list(range(n))\n", "normalized_occurrence": 1}
