{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..0fdf387 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1260,14 +1260,14 @@ class Intersection(Set, LatticeOp):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n \n         # flatten inputs to merge intersections and iterables\n-        args = _sympify(args)\n+        args = _sympify(set(args))  # Remove duplicates by converting to a set and back\n \n         # Reduce sets using known rules\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n             return simplify_intersection(args)\n \n-        args = list(ordered(args, Set._infimum_key))\n+        args = list(ordered(set(args), Set._infimum_key))  # Ensure arguments are ordered without duplicates\n \n         obj = Basic.__new__(cls, *args)\n         obj._argset = frozenset(args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..534c0ed 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -473,11 +473,11 @@ class Intersection(Set, LatticeOp):\n         return S.EmptySet\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n-        args = _sympify(args)\n+        args = _sympify(set(args))\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n             return simplify_intersection(args)\n-        args = list(ordered(args, Set._infimum_key))\n+        args = list(ordered(set(args), Set._infimum_key))\n         obj = Basic.__new__(cls, *args)\n         obj._argset = frozenset(args)\n         return obj\n", "normalized_occurrence": 1}
