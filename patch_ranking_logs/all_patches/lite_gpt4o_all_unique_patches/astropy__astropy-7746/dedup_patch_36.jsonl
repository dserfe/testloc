{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..f3a98d5 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,6 +1212,9 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            # Check if any axes are empty and return empty arrays if so\n+            if any(len(ax) == 0 for ax in axes):\n+                return [np.array([])] * self.naxis\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1243,6 +1246,10 @@ reduce these to 2 dimensions using the naxis kwarg.\n             return result\n \n         if len(args) == 2:\n+            # Check if the first argument (coordinates) is empty\n+            if len(args[0]) == 0:\n+                return np.array([])\n+\n             try:\n                 xy, origin = args\n                 xy = np.asarray(xy)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..4ab15af 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -594,6 +594,8 @@ class WCS(WCSBase):\n             return out\n     def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         def _return_list_of_arrays(axes, origin):\n+            if any((len(ax) == 0 for ax in axes)):\n+                return [np.array([])] * self.naxis\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -616,6 +618,8 @@ class WCS(WCSBase):\n                 result = self._normalize_sky(result)\n             return result\n         if len(args) == 2:\n+            if len(args[0]) == 0:\n+                return np.array([])\n             try:\n                 xy, origin = args\n                 xy = np.asarray(xy)\n", "normalized_occurrence": 1}
