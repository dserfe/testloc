{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..fd02840 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -354,6 +354,8 @@ class LogCaptureFixture:\n         \"\"\"\n         # restore log levels\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n \n@@ -435,6 +437,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self._initial_logger_levels.setdefault(None, handler_orig_level)\n \n     @contextmanager\n     def at_level(\n@@ -451,6 +454,7 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n+        self._initial_logger_levels.setdefault(None, handler_orig_level)\n         try:\n             yield\n         finally:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..a73b9ee 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -166,6 +166,8 @@ class LogCaptureFixture:\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n     @property\n@@ -192,6 +194,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self._initial_logger_levels.setdefault(None, handler_orig_level)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n@@ -199,6 +202,7 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n+        self._initial_logger_levels.setdefault(None, handler_orig_level)\n         try:\n             yield\n         finally:\n", "normalized_occurrence": 1}
