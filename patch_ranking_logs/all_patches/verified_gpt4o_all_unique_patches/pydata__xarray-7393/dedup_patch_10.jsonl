{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex d49b2c1..69cca69 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -707,7 +707,11 @@ class PandasMultiIndex(PandasIndex):\n                 )\n \n         split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n-        labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n+        labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\", sparse=False, copy=True)\n+        # Ensure dtype consistency\n+        for i, (label, level) in enumerate(zip(labels_mesh, levels)):\n+            if label.dtype != level.dtype:\n+                labels_mesh[i] = label.astype(level.dtype)\n         labels = [x.ravel() for x in labels_mesh]\n \n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 6be2e3c..2e355c5 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -372,7 +372,10 @@ class PandasMultiIndex(PandasIndex):\n             if isinstance(idx, pd.MultiIndex):\n                 raise ValueError(f'cannot create a multi-index along stacked dimension {dim!r} from variable {name!r} that wraps a multi-index')\n         split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n-        labels_mesh = np.meshgrid(*split_labels, indexing='ij')\n+        labels_mesh = np.meshgrid(*split_labels, indexing='ij', sparse=False, copy=True)\n+        for i, (label, level) in enumerate(zip(labels_mesh, levels)):\n+            if label.dtype != level.dtype:\n+                labels_mesh[i] = label.astype(level.dtype)\n         labels = [x.ravel() for x in labels_mesh]\n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n", "normalized_occurrence": 1}
