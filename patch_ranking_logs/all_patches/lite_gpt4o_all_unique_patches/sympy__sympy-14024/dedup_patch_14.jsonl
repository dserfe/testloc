{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..7dabd63 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -257,8 +257,8 @@ class Pow(Expr):\n             elif e is S.One:\n                 return b\n             # Only perform autosimplification if exponent or base is a Symbol or number\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n-                e.is_integer and _coeff_isneg(b):\n+            elif (b.is_Symbol or b.is_number or b.is_Integer) and (e.is_Symbol or e.is_number) and \\\n+                 e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n@@ -308,7 +308,7 @@ class Pow(Expr):\n     def _eval_refine(self, assumptions):\n         from sympy.assumptions.ask import ask, Q\n         b, e = self.as_base_exp()\n-        if ask(Q.integer(e), assumptions) and _coeff_isneg(b):\n+        if ask(Q.integer(e), assumptions) and _coeff_isneg(b) and (b.is_Symbol or b.is_number or b.is_Integer):\n             if ask(Q.even(e), assumptions):\n                 return Pow(-b, e)\n             elif ask(Q.odd(e), assumptions):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..f48ebaf 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -101,7 +101,7 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n+            elif (b.is_Symbol or b.is_number or b.is_Integer) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n@@ -144,7 +144,7 @@ class Pow(Expr):\n     def _eval_refine(self, assumptions):\n         from sympy.assumptions.ask import ask, Q\n         b, e = self.as_base_exp()\n-        if ask(Q.integer(e), assumptions) and _coeff_isneg(b):\n+        if ask(Q.integer(e), assumptions) and _coeff_isneg(b) and (b.is_Symbol or b.is_number or b.is_Integer):\n             if ask(Q.even(e), assumptions):\n                 return Pow(-b, e)\n             elif ask(Q.odd(e), assumptions):\n", "normalized_occurrence": 1}
