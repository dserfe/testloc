{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..30409db 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -114,6 +114,15 @@ class Count(Aggregate):\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n         super().__init__(expression, filter=filter, **extra)\n \n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            sql, params = super().as_sql(compiler, connection, function='COUNT', template='%(function)s(DISTINCT %(expressions)s)')\n+        else:\n+            sql, params = super().as_sql(compiler, connection)\n+        # Ensure proper spacing in combined SQL\n+        sql = sql.replace('DISTINCTCASE', 'DISTINCT CASE')\n+        return sql, params\n+\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            sql, params = super().as_sql(compiler, connection, function='COUNT', template='%(function)s(DISTINCT %(expressions)s)')\n+        else:\n+            sql, params = super().as_sql(compiler, connection)\n+        sql = sql.replace('DISTINCTCASE', 'DISTINCT CASE')\n+        return (sql, params)", "normalized_occurrence": 1}
