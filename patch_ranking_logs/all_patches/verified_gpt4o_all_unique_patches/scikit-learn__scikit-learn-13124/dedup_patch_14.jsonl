{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..8db5e96 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -656,15 +656,16 @@ class StratifiedKFold(_BaseKFold):\n                   random_state=rng).split(np.zeros(max(count, self.n_splits)))\n             for count in y_counts]\n \n+        if self.shuffle:\n+            for cls in unique_y:\n+                cls_indices = np.where(y == cls)[0]\n+                rng.shuffle(cls_indices)\n+                y[cls_indices] = cls\n+\n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n             for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n                 cls_test_folds = test_folds[y == cls]\n-                # the test split can be too big because we used\n-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n-                # stratifiable for all the classes\n-                # (we use a warning instead of raising an exception)\n-                # If this is the case, let's trim it:\n                 test_split = test_split[test_split < len(cls_test_folds)]\n                 cls_test_folds[test_split] = test_fold_indices\n                 test_folds[y == cls] = cls_test_folds\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex a142d27..dc63942 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -563,6 +563,11 @@ class StratifiedKFold(_BaseKFold):\n         if self.n_splits > min_groups:\n             warnings.warn('The least populated class in y has only %d members, which is too few. The minimum number of members in any class cannot be less than n_splits=%d.' % (min_groups, self.n_splits), Warning)\n         per_cls_cvs = [KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n+        if self.shuffle:\n+            for cls in unique_y:\n+                cls_indices = np.where(y == cls)[0]\n+                rng.shuffle(cls_indices)\n+                y[cls_indices] = cls\n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n             for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n", "normalized_occurrence": 1}
