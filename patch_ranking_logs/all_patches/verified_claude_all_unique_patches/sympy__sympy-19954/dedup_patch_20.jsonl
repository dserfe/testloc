{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex eb05c35..9d2258e 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2198,14 +2198,19 @@ class PermutationGroup(Basic):\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n                         to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)  # Store index to remove later\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n-                # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                # remove non-minimal representative blocks and their corresponding entries\n+                indices_to_remove = [i for i in to_remove if isinstance(i, int)]\n+                indices_to_remove.sort(reverse=True)  # Sort in reverse to safely delete\n+                for i in indices_to_remove:\n+                    del num_blocks[i]\n+                    del blocks[i]\n+                rep_blocks = [r for r in rep_blocks if not isinstance(r, set) or r not in to_remove]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex 19182ce..4d95183 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -840,12 +840,17 @@ class PermutationGroup(Basic):\n                 to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n-                        del num_blocks[i], blocks[i]\n                         to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         minimal = False\n                         break\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                indices_to_remove = [i for i in to_remove if isinstance(i, int)]\n+                indices_to_remove.sort(reverse=True)\n+                for i in indices_to_remove:\n+                    del num_blocks[i]\n+                    del blocks[i]\n+                rep_blocks = [r for r in rep_blocks if not isinstance(r, set) or r not in to_remove]\n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n                     num_blocks.append(num_block)\n", "normalized_occurrence": 1}
