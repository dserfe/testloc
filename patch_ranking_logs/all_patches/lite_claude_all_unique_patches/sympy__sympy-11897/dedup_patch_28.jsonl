{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..cbffb8c 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -463,7 +463,8 @@ class LatexPrinter(Printer):\n             return r\"%s^{%s/%s}\" % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n             # Things like 1/x\n-            return self._print_Mul(expr)\n+            # We want to return a fraction in general\n+            return r\"\\frac{1}{%s}\" % self._print(Pow(expr.base, -expr.exp, evaluate=False))\n         else:\n             if expr.base.is_Function:\n                 return self._print(expr.base, self._print(expr.exp))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..b869e94 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -243,7 +243,7 @@ class LatexPrinter(Printer):\n                 return self._print(expr.base, '%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n-            return self._print_Mul(expr)\n+            return '\\\\frac{1}{%s}' % self._print(Pow(expr.base, -expr.exp, evaluate=False))\n         elif expr.base.is_Function:\n             return self._print(expr.base, self._print(expr.exp))\n         else:\n", "normalized_occurrence": 2}
