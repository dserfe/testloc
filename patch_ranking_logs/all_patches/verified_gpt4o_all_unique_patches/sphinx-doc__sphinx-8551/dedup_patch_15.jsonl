{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..906837e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,18 +78,15 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment) -> addnodes.pending_xref:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n     if text == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n \n-    if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n-                  'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+    kwargs = {'py:module': env.ref_context.get('py:module'),\n+              'py:class': env.ref_context.get('py:class')}\n \n     return pending_xref('', nodes.Text(text),\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n@@ -310,7 +307,7 @@ class PyField(PyXrefMixin, Field):\n     def make_xref(self, rolename: str, domain: str, target: str,\n                   innernode: \"Type[TextlikeNode]\" = nodes.emphasis,\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n-        if rolename == 'class' and target == 'None':\n+        if rolename in ('class', 'obj') and target == 'None':\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n@@ -325,7 +322,7 @@ class PyTypedField(PyXrefMixin, TypedField):\n     def make_xref(self, rolename: str, domain: str, target: str,\n                   innernode: \"Type[TextlikeNode]\" = nodes.emphasis,\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n-        if rolename == 'class' and target == 'None':\n+        if rolename in ('class', 'obj') and target == 'None':\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..1df5a63 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -34,15 +34,12 @@ py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n-def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment) -> addnodes.pending_xref:\n     if text == 'None':\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n-    if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+    kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n@@ -207,14 +204,14 @@ class PyXrefMixin:\n         return results\n class PyField(PyXrefMixin, Field):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n-        if rolename == 'class' and target == 'None':\n+        if rolename in ('class', 'obj') and target == 'None':\n             rolename = 'obj'\n         return super().make_xref(rolename, domain, target, innernode, contnode, env)\n class PyGroupedField(PyXrefMixin, GroupedField):\n     pass\n class PyTypedField(PyXrefMixin, TypedField):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n-        if rolename == 'class' and target == 'None':\n+        if rolename in ('class', 'obj') and target == 'None':\n             rolename = 'obj'\n         return super().make_xref(rolename, domain, target, innernode, contnode, env)\n class PyObject(ObjectDescription):\n", "normalized_occurrence": 1}
