{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..4fb99b7 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -392,20 +392,43 @@ class KeyTransformExact(JSONExact):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n+        \n+        # Handle list parameters (for __in lookups)\n+        is_list_param = len(rhs_params) == 1 and isinstance(json.loads(rhs_params[0]), list)\n+        \n         if connection.vendor == 'oracle':\n             func = []\n-            for value in rhs_params:\n-                value = json.loads(value)\n+            params = json.loads(rhs_params[0]) if is_list_param else rhs_params\n+            for value in params:\n+                if is_list_param:\n+                    value_str = json.dumps(value)\n+                else:\n+                    value = json.loads(value)\n+                    value_str = json.dumps({'value': value})\n                 function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n-                func.append(\"%s('%s', '$.value')\" % (\n+                func.append(\"%s('%s', '%s')\" % (\n                     function,\n-                    json.dumps({'value': value}),\n+                    value_str,\n+                    '$.value' if not is_list_param else '$'\n                 ))\n             rhs = rhs % tuple(func)\n             rhs_params = []\n         elif connection.vendor == 'sqlite':\n-            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n-            rhs = rhs % tuple(func)\n+            if is_list_param:\n+                params = json.loads(rhs_params[0])\n+                func = [\"JSON_QUOTE('%s')\" % json.dumps(value) for value in params]\n+                rhs = '(%s)' % ','.join(func)\n+                rhs_params = []\n+            else:\n+                func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+                rhs = rhs % tuple(func)\n+        elif connection.vendor == 'mysql':\n+            if is_list_param:\n+                params = json.loads(rhs_params[0])\n+                func = [\"CAST('%s' AS JSON)\" % json.dumps(value) for value in params]\n+                rhs = '(%s)' % ','.join(func)\n+                rhs_params = []\n+            \n         return rhs, rhs_params\n \n     def as_oracle(self, compiler, connection):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..009d140 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -262,17 +262,35 @@ class KeyTransformExact(JSONExact):\n         if isinstance(self.rhs, KeyTransform):\n             return super(lookups.Exact, self).process_rhs(compiler, connection)\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n+        is_list_param = len(rhs_params) == 1 and isinstance(json.loads(rhs_params[0]), list)\n         if connection.vendor == 'oracle':\n             func = []\n-            for value in rhs_params:\n-                value = json.loads(value)\n+            params = json.loads(rhs_params[0]) if is_list_param else rhs_params\n+            for value in params:\n+                if is_list_param:\n+                    value_str = json.dumps(value)\n+                else:\n+                    value = json.loads(value)\n+                    value_str = json.dumps({'value': value})\n                 function = 'JSON_QUERY' if isinstance(value, (list, dict)) else 'JSON_VALUE'\n-                func.append(\"%s('%s', '$.value')\" % (function, json.dumps({'value': value})))\n+                func.append(\"%s('%s', '%s')\" % (function, value_str, '$.value' if not is_list_param else '$'))\n             rhs = rhs % tuple(func)\n             rhs_params = []\n         elif connection.vendor == 'sqlite':\n-            func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n-            rhs = rhs % tuple(func)\n+            if is_list_param:\n+                params = json.loads(rhs_params[0])\n+                func = [\"JSON_QUOTE('%s')\" % json.dumps(value) for value in params]\n+                rhs = '(%s)' % ','.join(func)\n+                rhs_params = []\n+            else:\n+                func = [\"JSON_EXTRACT(%s, '$')\" if value != 'null' else '%s' for value in rhs_params]\n+                rhs = rhs % tuple(func)\n+        elif connection.vendor == 'mysql':\n+            if is_list_param:\n+                params = json.loads(rhs_params[0])\n+                func = [\"CAST('%s' AS JSON)\" % json.dumps(value) for value in params]\n+                rhs = '(%s)' % ','.join(func)\n+                rhs_params = []\n         return (rhs, rhs_params)\n     def as_oracle(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n", "normalized_occurrence": 1}
