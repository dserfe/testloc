{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..e3f7c87 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -30,6 +30,12 @@ def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n         raise argparse.ArgumentTypeError(\n             \"{!r} is not in the format 'modname:classname'\".format(value)\n         )\n+    # Ensure literals None, True, False are not used\n+    illegal_literals = {\"None\", \"True\", \"False\"}\n+    if modname in illegal_literals or classname in illegal_literals:\n+        raise argparse.ArgumentTypeError(\n+            \"Illegal value: {!r}. None, True, False cannot be used as module or class names.\".format(value)\n+        )\n     return (modname, classname)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..65ab07b 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -22,6 +22,9 @@ def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n         modname, classname = value.split(':')\n     except ValueError:\n         raise argparse.ArgumentTypeError(\"{!r} is not in the format 'modname:classname'\".format(value))\n+    illegal_literals = {'None', 'True', 'False'}\n+    if modname in illegal_literals or classname in illegal_literals:\n+        raise argparse.ArgumentTypeError('Illegal value: {!r}. None, True, False cannot be used as module or class names.'.format(value))\n     return (modname, classname)\n def pytest_addoption(parser: Parser) -> None:\n     group = parser.getgroup('general')\n", "normalized_occurrence": 1}
