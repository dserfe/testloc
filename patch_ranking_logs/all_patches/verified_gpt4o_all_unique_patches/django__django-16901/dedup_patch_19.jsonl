{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..ac578ff 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -61,8 +61,11 @@ class Q(tree.Node):\n             return self.copy()\n \n         obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR_PARITY:\n+            obj.add(Q(children=[self, other], connector=self.OR) & ~Q(children=[self, other], connector=self.AND), self.AND)\n+        else:\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n \n     def __or__(self, other):\n@@ -72,7 +75,7 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        return self._combine(other, self.XOR_PARITY)\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..eec5bdf 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -28,15 +28,18 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n         obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR_PARITY:\n+            obj.add(Q(children=[self, other], connector=self.OR) & ~Q(children=[self, other], connector=self.AND), self.AND)\n+        else:\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        return self._combine(other, self.XOR_PARITY)\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
