{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..1bf12b8 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -327,11 +327,16 @@ def dup_sqf_list(f, K, all=False):\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n+        if dup_degree(g) > 0:\n+            result.append((g, i))\n+        elif all:\n             result.append((g, i))\n \n         i += 1\n \n+    # Ensure the result is sorted by the degree of the factors\n+    result = sorted(result, key=lambda x: dup_degree(x[0]))\n+\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..891e9f8 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -114,9 +114,12 @@ def dup_sqf_list(f, K, all=False):\n             result.append((p, i))\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n-        if all or dup_degree(g) > 0:\n+        if dup_degree(g) > 0:\n+            result.append((g, i))\n+        elif all:\n             result.append((g, i))\n         i += 1\n+    result = sorted(result, key=lambda x: dup_degree(x[0]))\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n", "normalized_occurrence": 1}
