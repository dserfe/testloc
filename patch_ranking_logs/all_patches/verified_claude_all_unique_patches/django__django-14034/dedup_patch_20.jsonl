{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..f0cc465 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1025,6 +1025,12 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n+                elif not self.require_all_fields:\n+                    # Check if any individual field is required\n+                    for i, field in enumerate(self.fields):\n+                        if field.required and (i >= len(value) or value[i] in self.empty_values):\n+                            raise ValidationError(field.error_messages['incomplete'])\n+                    return self.compress([])\n                 else:\n                     return self.compress([])\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..919066e 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -592,6 +592,11 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n+                elif not self.require_all_fields:\n+                    for i, field in enumerate(self.fields):\n+                        if field.required and (i >= len(value) or value[i] in self.empty_values):\n+                            raise ValidationError(field.error_messages['incomplete'])\n+                    return self.compress([])\n                 else:\n                     return self.compress([])\n         else:\n", "normalized_occurrence": 1}
