{"model_name_or_path": "agentless", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 1309ca5..6402187 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1666,6 +1666,9 @@ class Query(BaseExpression):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         # Generate the inner query.\n         query = Query(self.model)\n+        # Preserve annotations in the subquery\n+        query._annotations = self._annotations.copy()\n+        query._annotation_select_cache = self._annotation_select_cache.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         # Try to have as simple as possible subquery -> trim leading joins from\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 60a9579..72e1ed4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -889,6 +889,8 @@ class Query(BaseExpression):\n         if isinstance(filter_rhs, F):\n             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))\n         query = Query(self.model)\n+        query._annotations = self._annotations.copy()\n+        query._annotation_select_cache = self._annotation_select_cache.copy()\n         query.add_filter(filter_expr)\n         query.clear_ordering(True)\n         trimmed_prefix, contains_louter = query.trim_start(names_with_path)\n", "normalized_occurrence": 1}
