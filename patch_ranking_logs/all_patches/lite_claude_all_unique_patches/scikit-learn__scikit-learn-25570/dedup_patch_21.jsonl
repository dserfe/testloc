{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..87ccd60 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,12 +862,15 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n+                # Only include transformers that produced output (have features)\n+                transformers_with_features = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                    if not (isinstance(t[1], str) and t[1] == \"drop\") and\n+                    not _is_empty_column_selection(t[2])\n                 ]\n                 feature_names_outs = [X.columns for X in Xs]\n                 names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n+                    list(zip(transformers_with_features, feature_names_outs))\n                 )\n                 output.columns = names_out\n                 return output\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..c193ec2 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,9 +257,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n+                transformers_with_features = [t[0] for t in self._iter(fitted=True, replace_strings=True) if not (isinstance(t[1], str) and t[1] == 'drop') and (not _is_empty_column_selection(t[2]))]\n                 feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                names_out = self._add_prefix_for_feature_names_out(list(zip(transformers_with_features, feature_names_outs)))\n                 output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n", "normalized_occurrence": 1}
