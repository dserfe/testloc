{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..0a39b4a 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -956,7 +956,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             self.statements.append(clear)\n         # Fix locations (line numbers/column offsets).\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n+            for node in ast.walk(stmt):  # Use ast.walk to ensure all nodes are traversed\n                 ast.copy_location(node, assert_)\n         return self.statements\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..15ac0f3 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -513,7 +513,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n+            for node in ast.walk(stmt):\n                 ast.copy_location(node, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "normalized_occurrence": 1}
