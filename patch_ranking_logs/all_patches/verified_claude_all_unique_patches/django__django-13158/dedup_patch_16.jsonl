{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 56fc5f8..793e097 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1361,6 +1361,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                     code='invalid_pk_value',\n                     params={'pk': pk},\n                 )\n+        if not value:\n+            return self.queryset.none()\n         qs = self.queryset.filter(**{'%s__in' % key: value})\n         pks = {str(getattr(o, key)) for o in qs}\n         for val in value:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4e65eaf..62d4fcd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -706,6 +706,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                 self.queryset.filter(**{key: pk})\n             except (ValueError, TypeError):\n                 raise ValidationError(self.error_messages['invalid_pk_value'], code='invalid_pk_value', params={'pk': pk})\n+        if not value:\n+            return self.queryset.none()\n         qs = self.queryset.filter(**{'%s__in' % key: value})\n         pks = {str(getattr(o, key)) for o in qs}\n         for val in value:\n", "normalized_occurrence": 1}
