{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..a1d33e7 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -99,6 +99,12 @@ class BlockMatrix(MatrixExpr):\n                     ok = len(set([i.rows for i in r])) == 1\n                     if not ok:\n                         break\n+            if ok:\n+                # Ensure ZeroMatrix objects are used instead of Zero\n+                for i, row in enumerate(rows):\n+                    for j, elem in enumerate(row):\n+                        if elem == S.Zero:\n+                            rows[i][j] = ZeroMatrix(rows[i][j].rows, rows[i][j].cols)\n                 blocky = ok\n                 # same number of cols for each matrix in each col\n                 for c in range(len(rows[0])):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..171282c 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -34,6 +34,11 @@ class BlockMatrix(MatrixExpr):\n                     ok = len(set([i.rows for i in r])) == 1\n                     if not ok:\n                         break\n+            if ok:\n+                for i, row in enumerate(rows):\n+                    for j, elem in enumerate(row):\n+                        if elem == S.Zero:\n+                            rows[i][j] = ZeroMatrix(rows[i][j].rows, rows[i][j].cols)\n                 blocky = ok\n                 for c in range(len(rows[0])):\n                     ok = len(set([rows[i][c].cols for i in range(len(rows))])) == 1\n", "normalized_occurrence": 1}
