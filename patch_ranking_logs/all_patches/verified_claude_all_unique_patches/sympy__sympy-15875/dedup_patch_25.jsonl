{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..b1d2c53 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,8 +536,7 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -546,24 +545,30 @@ class Add(Expr, AssocOp):\n                     nz.append(a)\n                 else:\n                     return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            elif a.is_imaginary or (S.ImaginaryUnit*a).is_real:\n+                im_terms.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n+        \n+        # Handle real parts\n+        b = self.func(*nz) if nz else S.Zero\n         if b.is_zero is False:\n             return False\n+            \n+        # If we have imaginary terms but can't determine if they sum to zero\n+        if im_terms and (self.func(*im_terms)).is_zero is None:\n+            return None\n+            \n+        # If real and imaginary parts are separately zero\n+        if b.is_zero and (not im_terms or (self.func(*im_terms)).is_zero):\n+            return True\n+            \n+        # If we can't determine the result\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..f452e3b 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,8 +290,7 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -300,24 +299,22 @@ class Add(Expr, AssocOp):\n                     nz.append(a)\n                 else:\n                     return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+            elif a.is_imaginary or (S.ImaginaryUnit * a).is_real:\n+                im_terms.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n+        b = self.func(*nz) if nz else S.Zero\n         if b.is_zero is False:\n             return False\n+        if im_terms and self.func(*im_terms).is_zero is None:\n+            return None\n+        if b.is_zero and (not im_terms or self.func(*im_terms).is_zero):\n+            return True\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
