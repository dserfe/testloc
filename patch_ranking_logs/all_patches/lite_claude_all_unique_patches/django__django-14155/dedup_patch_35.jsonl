{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..fe31ae4 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -45,12 +46,35 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+            while isinstance(func, functools.partial):\n+                if func.args:\n+                    self.partial_args = func.args + self.partial_args\n+                if func.keywords:\n+                    self.partial_keywords.update(func.keywords)\n+                func = func.func\n+            self.func = func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n+            if self.partial_args or self.partial_keywords:\n+                partial_str = []\n+                if self.partial_args:\n+                    partial_str.append(f\"args={self.partial_args}\")\n+                if self.partial_keywords:\n+                    partial_str.append(f\"keywords={self.partial_keywords}\")\n+                self._func_path = f\"{self._func_path}(partial: {', '.join(partial_str)})\"\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..1dc6b59 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -29,10 +30,31 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+            while isinstance(func, functools.partial):\n+                if func.args:\n+                    self.partial_args = func.args + self.partial_args\n+                if func.keywords:\n+                    self.partial_keywords.update(func.keywords)\n+                func = func.func\n+            self.func = func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n+            if self.partial_args or self.partial_keywords:\n+                partial_str = []\n+                if self.partial_args:\n+                    partial_str.append(f'args={self.partial_args}')\n+                if self.partial_keywords:\n+                    partial_str.append(f'keywords={self.partial_keywords}')\n+                self._func_path = f\"{self._func_path}(partial: {', '.join(partial_str)})\"\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n", "normalized_occurrence": 1}
