{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..2a58ad1 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,11 +707,15 @@ class _EvaluatorPrinter(object):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n \n+        # When dummify=True, we'll replace unsafe symbols anyway, so skip the safety check\n+        if dummify:\n+            self._is_safe_ident = lambda x: isinstance(x, str)\n+\n         # Args of type Dummy can cause name collisions with args\n         # of type Symbol.  Force dummify of everything in this\n         # situation.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..4538b0f 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -282,9 +282,11 @@ class _EvaluatorPrinter(object):\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n         dummify = self._dummify\n+        if dummify:\n+            self._is_safe_ident = lambda x: isinstance(x, str)\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n         argstrs = []\n", "normalized_occurrence": 1}
