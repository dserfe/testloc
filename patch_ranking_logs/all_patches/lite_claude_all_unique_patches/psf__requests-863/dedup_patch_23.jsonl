{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex bc1c443..cee7d95 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -462,9 +462,14 @@ class Request(object):\n \n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n-\n+        if event not in self.hooks:\n+            self.hooks[event] = []\n+            \n+        if hasattr(hook, '__call__'):\n+            self.hooks[event].append(hook)\n+        elif isinstance(hook, (list, tuple)):\n+            self.hooks[event].extend(h for h in hook if hasattr(h, '__call__'))\n+        \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n         Returns True if the hook existed, False if not.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex ec9ed1c..ef01d3a 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -231,7 +231,12 @@ class Request(object):\n             url.append(query)\n         return ''.join(url)\n     def register_hook(self, event, hook):\n-        self.hooks[event].append(hook)\n+        if event not in self.hooks:\n+            self.hooks[event] = []\n+        if hasattr(hook, '__call__'):\n+            self.hooks[event].append(hook)\n+        elif isinstance(hook, (list, tuple)):\n+            self.hooks[event].extend((h for h in hook if hasattr(h, '__call__')))\n     def deregister_hook(self, event, hook):\n         try:\n             self.hooks[event].remove(hook)\n", "normalized_occurrence": 1}
