{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..934d61c 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,21 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                if uri.startswith(('ftp:', 'mailto:')):\n+                    return 'unchecked', '', 0\n+                else:\n+                    if '#' in uri:\n+                        filename, anchor = uri.split('#', 1)\n+                        if not path.isfile(filename):\n+                            return 'broken', \"Local file does not exist\", 0\n+                        with open(filename, 'r', encoding='utf-8') as f:\n+                            content = f.read()\n+                            if anchor and f'id=\"{anchor}\"' not in content:\n+                                return 'broken', f\"Anchor '{anchor}' not found in local file\", 0\n+                    else:\n+                        if not path.isfile(uri):\n+                            return 'broken', \"Local file does not exist\", 0\n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..37cfe7d 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,20 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith(('ftp:', 'mailto:')):\n+                    return ('unchecked', '', 0)\n+                else:\n+                    if '#' in uri:\n+                        filename, anchor = uri.split('#', 1)\n+                        if not path.isfile(filename):\n+                            return ('broken', 'Local file does not exist', 0)\n+                        with open(filename, 'r', encoding='utf-8') as f:\n+                            content = f.read()\n+                            if anchor and f'id=\"{anchor}\"' not in content:\n+                                return ('broken', f\"Anchor '{anchor}' not found in local file\", 0)\n+                    elif not path.isfile(uri):\n+                        return ('broken', 'Local file does not exist', 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
