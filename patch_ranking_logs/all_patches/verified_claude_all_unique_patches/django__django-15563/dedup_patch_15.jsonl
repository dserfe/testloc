{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..7f267af 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -998,21 +998,7 @@ class QuerySet:\n \n     update.alters_data = True\n \n-    def _update(self, values):\n-        \"\"\"\n-        A version of update() that accepts field objects instead of field names.\n-        Used primarily for model saving and not intended for use by general\n-        code (it requires too much poking around at model internals to be\n-        useful at that level).\n-        \"\"\"\n-        if self.query.is_sliced:\n-            raise TypeError(\"Cannot update a query once a slice has been taken.\")\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_fields(values)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n-        self._result_cache = None\n-        return query.get_compiler(self.db).execute_sql(CURSOR)\n+\n \n     _update.alters_data = True\n     _update.queryset_only = False\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..c6c1758 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -540,14 +540,6 @@ class QuerySet:\n         self._result_cache = None\n         return rows\n     update.alters_data = True\n-    def _update(self, values):\n-        if self.query.is_sliced:\n-            raise TypeError('Cannot update a query once a slice has been taken.')\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_fields(values)\n-        query.annotations = {}\n-        self._result_cache = None\n-        return query.get_compiler(self.db).execute_sql(CURSOR)\n     _update.alters_data = True\n     _update.queryset_only = False\n     def exists(self):\n", "normalized_occurrence": 1}
