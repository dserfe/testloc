{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..d3f5577 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,52 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                # Get the iterator argument\n+                iter_arg = call.args[0]\n+                # Create a result variable to store the function result\n+                result_var = self.variable()\n+                # Create the loop variable\n+                loop_var = self.variable()\n+                \n+                if call.func.id == 'all':\n+                    # for x in iterator:\n+                    #     assert x\n+                    loop_body = ast.Assert(\n+                        test=ast.Name(id=loop_var, ctx=ast.Load()),\n+                        msg=None\n+                    )\n+                else:  # any\n+                    # found = False\n+                    # for x in iterator:\n+                    #     if x:\n+                    #         found = True\n+                    #         break\n+                    # assert found\n+                    found_var = self.variable()\n+                    loop_body = ast.If(\n+                        test=ast.Name(id=loop_var, ctx=ast.Load()),\n+                        body=[\n+                            ast.Assign(\n+                                targets=[ast.Name(id=found_var, ctx=ast.Store())],\n+                                value=ast.Constant(value=True)\n+                            ),\n+                            ast.Break()\n+                        ],\n+                        orelse=[]\n+                    )\n+                    \n+                # Create the for loop\n+                loop = ast.For(\n+                    target=ast.Name(id=loop_var, ctx=ast.Store()),\n+                    iter=iter_arg,\n+                    body=[loop_body],\n+                    orelse=[]\n+                )\n+                \n+                return loop, \"unrolled %s() call\" % call.func.id\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..13f0104 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,18 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                iter_arg = call.args[0]\n+                result_var = self.variable()\n+                loop_var = self.variable()\n+                if call.func.id == 'all':\n+                    loop_body = ast.Assert(test=ast.Name(id=loop_var, ctx=ast.Load()), msg=None)\n+                else:\n+                    found_var = self.variable()\n+                    loop_body = ast.If(test=ast.Name(id=loop_var, ctx=ast.Load()), body=[ast.Assign(targets=[ast.Name(id=found_var, ctx=ast.Store())], value=ast.Constant(value=True)), ast.Break()], orelse=[])\n+                loop = ast.For(target=ast.Name(id=loop_var, ctx=ast.Store()), iter=iter_arg, body=[loop_body], orelse=[])\n+                return (loop, 'unrolled %s() call' % call.func.id)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
