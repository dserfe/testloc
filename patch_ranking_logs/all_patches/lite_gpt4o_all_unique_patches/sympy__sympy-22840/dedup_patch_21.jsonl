{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..75adff2 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -683,7 +683,11 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n             return new_expr\n \n     reduced_exprs = []\n+    from sympy.matrices.expressions.matexpr import MatrixExpr\n+\n     for e in exprs:\n+        if isinstance(e, MatrixExpr):\n+            temp.append(e)\n         if isinstance(e, Basic):\n             reduced_e = _rebuild(e)\n         else:\n@@ -784,12 +788,16 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n         exprs = sympify(exprs)\n \n     # Handle the case if just one expression was passed.\n-    if isinstance(exprs, (Basic, MatrixBase)):\n+    if isinstance(exprs, (Basic, MatrixBase, MatrixSymbol)):\n         exprs = [exprs]\n \n     copy = exprs\n     temp = []\n+    from sympy.matrices.expressions.matexpr import MatrixExpr\n+\n     for e in exprs:\n+        if isinstance(e, MatrixExpr):\n+            temp.append(e)\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n             temp.append(Tuple(*e.flat()))\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..4dc36d3 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -295,7 +295,10 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n         else:\n             return new_expr\n     reduced_exprs = []\n+    from sympy.matrices.expressions.matexpr import MatrixExpr\n     for e in exprs:\n+        if isinstance(e, MatrixExpr):\n+            temp.append(e)\n         if isinstance(e, Basic):\n             reduced_e = _rebuild(e)\n         else:\n@@ -308,11 +311,14 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n         return _cse_homogeneous(exprs, symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order, ignore=ignore)\n     if isinstance(exprs, (int, float)):\n         exprs = sympify(exprs)\n-    if isinstance(exprs, (Basic, MatrixBase)):\n+    if isinstance(exprs, (Basic, MatrixBase, MatrixSymbol)):\n         exprs = [exprs]\n     copy = exprs\n     temp = []\n+    from sympy.matrices.expressions.matexpr import MatrixExpr\n     for e in exprs:\n+        if isinstance(e, MatrixExpr):\n+            temp.append(e)\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n             temp.append(Tuple(*e.flat()))\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n", "normalized_occurrence": 1}
