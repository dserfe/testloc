{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..8df3a2e 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -951,10 +951,40 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n \n+    def _check_max_length_fits_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        \n+        longest_choice = 0\n+        for choices_group in self.choices:\n+            try:\n+                group_name, group_choices = choices_group\n+                # Handle grouped choices\n+                for choice_value, choice_label in group_choices:\n+                    if isinstance(choice_value, str) and len(choice_value) > longest_choice:\n+                        longest_choice = len(choice_value)\n+            except (TypeError, ValueError):\n+                # Handle flat choices\n+                choice_value, choice_label = choices_group\n+                if isinstance(choice_value, str) and len(choice_value) > longest_choice:\n+                    longest_choice = len(choice_value)\n+        \n+        if longest_choice > self.max_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' is too small to fit the longest value in choices \"\n+                    f\"(longest choice is {longest_choice} characters).\",\n+                    obj=self,\n+                    id='fields.E123',\n+                )\n+            ]\n+        return []\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_max_length_fits_choices(**kwargs),\n         ]\n \n     def _check_max_length_attribute(self, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..605685c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -460,8 +460,25 @@ class CharField(Field):\n     def __init__(self, *args, **kwargs):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n+    def _check_max_length_fits_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        longest_choice = 0\n+        for choices_group in self.choices:\n+            try:\n+                group_name, group_choices = choices_group\n+                for choice_value, choice_label in group_choices:\n+                    if isinstance(choice_value, str) and len(choice_value) > longest_choice:\n+                        longest_choice = len(choice_value)\n+            except (TypeError, ValueError):\n+                choice_value, choice_label = choices_group\n+                if isinstance(choice_value, str) and len(choice_value) > longest_choice:\n+                    longest_choice = len(choice_value)\n+        if longest_choice > self.max_length:\n+            return [checks.Error(f\"'max_length' is too small to fit the longest value in choices (longest choice is {longest_choice} characters).\", obj=self, id='fields.E123')]\n+        return []\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs), *self._check_max_length_fits_choices(**kwargs)]\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n", "normalized_occurrence": 1}
