{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13112", "model_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 20d9b09..d6a06f8 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -59,11 +59,20 @@ class MigrationLoader:\n         and a boolean indicating if the module is specified in\n         settings.MIGRATION_MODULE.\n         \"\"\"\n-        if app_label in settings.MIGRATION_MODULES:\n-            return settings.MIGRATION_MODULES[app_label], True\n+        # Case-insensitive lookup in MIGRATION_MODULES\n+        migration_modules = settings.MIGRATION_MODULES\n+        if app_label.lower() in (k.lower() for k in migration_modules):\n+            return migration_modules[app_label], True\n         else:\n-            app_package_name = apps.get_app_config(app_label).name\n-            return '%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False\n+            # Get app config using case-insensitive lookup\n+            app_configs = apps.app_configs\n+            matching_config = next(\n+                (config for name, config in app_configs.items() if name.lower() == app_label.lower()),\n+                None\n+            )\n+            if matching_config is None:\n+                return None, False\n+            return '%s.%s' % (matching_config.name, MIGRATIONS_MODULE_NAME), False\n \n     def load_disk(self):\n         \"\"\"Load the migrations from all INSTALLED_APPS from disk.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex 58d09ae..c7d77e4 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -18,11 +18,15 @@ class MigrationLoader:\n             self.build_graph()\n     @classmethod\n     def migrations_module(cls, app_label):\n-        if app_label in settings.MIGRATION_MODULES:\n-            return (settings.MIGRATION_MODULES[app_label], True)\n+        migration_modules = settings.MIGRATION_MODULES\n+        if app_label.lower() in (k.lower() for k in migration_modules):\n+            return (migration_modules[app_label], True)\n         else:\n-            app_package_name = apps.get_app_config(app_label).name\n-            return ('%s.%s' % (app_package_name, MIGRATIONS_MODULE_NAME), False)\n+            app_configs = apps.app_configs\n+            matching_config = next((config for name, config in app_configs.items() if name.lower() == app_label.lower()), None)\n+            if matching_config is None:\n+                return (None, False)\n+            return ('%s.%s' % (matching_config.name, MIGRATIONS_MODULE_NAME), False)\n     def load_disk(self):\n         self.disk_migrations = {}\n         self.unmigrated_apps = set()\n", "normalized_occurrence": 1}
