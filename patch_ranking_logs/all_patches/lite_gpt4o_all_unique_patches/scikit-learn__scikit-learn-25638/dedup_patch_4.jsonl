{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..1d80966 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -286,6 +286,9 @@ def type_of_target(y, input_name=\"\"):\n         or is_array_api\n     )\n \n+    nullable_pandas_dtypes = [\"Int64\", \"Float64\", \"boolean\"]\n+    if hasattr(y, \"dtype\") and str(y.dtype) in nullable_pandas_dtypes:\n+        y = y.astype(y.dtype.numpy_dtype)\n     if not valid:\n         raise ValueError(\n             \"Expected array-like (array or non-string sequence), got %r\" % y\n@@ -295,6 +298,8 @@ def type_of_target(y, input_name=\"\"):\n     if sparse_pandas:\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n \n+    if hasattr(y, \"dtype\") and str(y.dtype) in nullable_pandas_dtypes:\n+        y = y.astype(y.dtype.numpy_dtype)\n     if is_multilabel(y):\n         return \"multilabel-indicator\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..dcd8746 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -66,11 +66,16 @@ def check_classification_targets(y):\n def type_of_target(y, input_name=''):\n     xp, is_array_api = get_namespace(y)\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n+    nullable_pandas_dtypes = ['Int64', 'Float64', 'boolean']\n+    if hasattr(y, 'dtype') and str(y.dtype) in nullable_pandas_dtypes:\n+        y = y.astype(y.dtype.numpy_dtype)\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n     sparse_pandas = y.__class__.__name__ in ['SparseSeries', 'SparseArray']\n     if sparse_pandas:\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n+    if hasattr(y, 'dtype') and str(y.dtype) in nullable_pandas_dtypes:\n+        y = y.astype(y.dtype.numpy_dtype)\n     if is_multilabel(y):\n         return 'multilabel-indicator'\n     with warnings.catch_warnings():\n", "normalized_occurrence": 1}
