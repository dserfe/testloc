{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13439", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 4594f40..b6378db 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -219,15 +219,24 @@ class Pipeline(_BaseComposition):\n             return self.named_steps[ind]\n         return est\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def _estimator_type(self):\n         return self.steps[-1][1]._estimator_type\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def named_steps(self):\n         # Use Bunch object to improve autocomplete\n         return Bunch(**dict(self.steps))\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def _final_estimator(self):\n         estimator = self.steps[-1][1]\n@@ -462,6 +471,9 @@ class Pipeline(_BaseComposition):\n             Xt = transform.transform(Xt)\n         return self.steps[-1][-1].predict_log_proba(Xt)\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def transform(self):\n         \"\"\"Apply transforms, and transform with the final estimator\n@@ -491,6 +503,9 @@ class Pipeline(_BaseComposition):\n             Xt = transform.transform(Xt)\n         return Xt\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def inverse_transform(self):\n         \"\"\"Apply inverse transformations in reverse order\n@@ -552,10 +567,16 @@ class Pipeline(_BaseComposition):\n             score_params['sample_weight'] = sample_weight\n         return self.steps[-1][-1].score(Xt, y, **score_params)\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def classes_(self):\n         return self.steps[-1][-1].classes_\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     @property\n     def _pairwise(self):\n         # check if first estimator expects pairwise input\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)\n+    def __len__(self):\n+        return len(self.steps)", "normalized_occurrence": 10}
