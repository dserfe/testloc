{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cd0e9c6..27549a8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1266,7 +1266,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=self.env.config.autodoc_typehints != 'none', **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n@@ -1485,7 +1485,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:],\n                                             return_annotation=Parameter.empty)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=self.env.config.autodoc_typehints != 'none', **kwargs)\n                 sigs.append(sig)\n         else:\n             sigs.append(sig)\n", "occurrence": 2, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex be7144a..6c41995 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -701,7 +701,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=self.env.config.autodoc_typehints != 'none', **kwargs)\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n@@ -825,7 +825,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                 overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n                 parameters = list(overload.parameters.values())\n                 overload = overload.replace(parameters=parameters[1:], return_annotation=Parameter.empty)\n-                sig = stringify_signature(overload, **kwargs)\n+                sig = stringify_signature(overload, show_annotation=self.env.config.autodoc_typehints != 'none', **kwargs)\n                 sigs.append(sig)\n         else:\n             sigs.append(sig)\n", "normalized_occurrence": 4}
