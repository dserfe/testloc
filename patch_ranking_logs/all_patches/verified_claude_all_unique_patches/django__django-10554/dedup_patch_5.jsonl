{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..1257225 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -420,6 +420,11 @@ class SQLCompiler:\n                 if compiler.get_order_by():\n                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n         parts = ()\n+        # Clear ordering if database doesn't support it in compounds and ordering is present\n+        saved_ordering = None\n+        if not self.connection.features.supports_slicing_ordering_in_compound and self.query.order_by:\n+            saved_ordering = self.query.order_by\n+            self.query.order_by = ()\n         for compiler in compilers:\n             try:\n                 # If the columns list is limited, then all combined queries\n@@ -460,6 +465,9 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        # Restore ordering\n+        if saved_ordering is not None:\n+            self.query.order_by = saved_ordering\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..3a5cf32 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -238,6 +238,10 @@ class SQLCompiler:\n                 if compiler.get_order_by():\n                     raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n         parts = ()\n+        saved_ordering = None\n+        if not self.connection.features.supports_slicing_ordering_in_compound and self.query.order_by:\n+            saved_ordering = self.query.order_by\n+            self.query.order_by = ()\n         for compiler in compilers:\n             try:\n                 if not compiler.query.values_select and self.query.values_select:\n@@ -265,6 +269,8 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        if saved_ordering is not None:\n+            self.query.order_by = saved_ordering\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
