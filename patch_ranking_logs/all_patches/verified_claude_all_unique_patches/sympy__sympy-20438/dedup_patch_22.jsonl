{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..6adb115 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -777,6 +777,19 @@ class ProductSet(Set):\n \n \n \n+    def _eval_is_subset(self, other):\n+        \"\"\"Returns True if self is a subset of other.\"\"\"\n+        if isinstance(other, FiniteSet):\n+            # Generate all possible tuples from our cartesian product\n+            # and check if they are all in other\n+            from sympy.utilities.iterables import cartes\n+            if not all(s.is_finite_set for s in self.sets):\n+                return None\n+            all_elements = cartes(*[sorted(s) for s in self.sets])\n+            all_elements = [tuple(i) for i in all_elements]\n+            return all(other.contains(i) for i in all_elements)\n+        return None\n+\n     def _contains(self, element):\n         \"\"\"\n         'in' operator for ProductSets.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n+    def _eval_is_subset(self, other):\n+        if isinstance(other, FiniteSet):\n+            from sympy.utilities.iterables import cartes\n+            if not all((s.is_finite_set for s in self.sets)):\n+                return None\n+            all_elements = cartes(*[sorted(s) for s in self.sets])\n+            all_elements = [tuple(i) for i in all_elements]\n+            return all((other.contains(i) for i in all_elements))\n+        return None", "normalized_occurrence": 1}
