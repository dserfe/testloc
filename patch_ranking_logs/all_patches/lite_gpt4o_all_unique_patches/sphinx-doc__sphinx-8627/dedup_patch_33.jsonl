{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..ed0f537 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,6 +10,7 @@\n \n import re\n from collections import OrderedDict\n+import struct\n from typing import Any, Dict, Iterable, cast\n \n from docutils import nodes\n@@ -22,6 +23,11 @@ from sphinx.util import inspect, typing\n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    from sphinx.util.typing import restify\n+    def resolve_struct_typehint(annotation):\n+        if annotation == struct.Struct:\n+            return 'struct.Struct'\n+        return annotation\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..f7612bd 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,5 +1,6 @@\n import re\n from collections import OrderedDict\n+import struct\n from typing import Any, Dict, Iterable, cast\n from docutils import nodes\n from docutils.nodes import Element\n@@ -7,6 +8,12 @@ from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    from sphinx.util.typing import restify\n+    def resolve_struct_typehint(annotation):\n+        if annotation == struct.Struct:\n+            return 'struct.Struct'\n+        return annotation\n+    'Record type hints to env object.'\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n", "normalized_occurrence": 1}
