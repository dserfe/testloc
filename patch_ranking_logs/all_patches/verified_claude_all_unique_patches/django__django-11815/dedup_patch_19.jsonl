{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..dca2c26 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -273,12 +273,33 @@ class MigrationWriter:\n     @classmethod\n     def register_serializer(cls, type_, serializer):\n         Serializer.register(type_, serializer)\n+        \n+    # Register the Enum serializer\n+    register_serializer(enum.Enum, EnumSerializer)\n \n     @classmethod\n     def unregister_serializer(cls, type_):\n         Serializer.unregister(type_)\n \n \n+class EnumSerializer(BaseSerializer):\n+    \"\"\"\n+    Serializes Enum objects using their name rather than value to maintain\n+    compatibility with translations.\n+    \"\"\"\n+    def serialize(self):\n+        imports = [\"import enum\"]\n+        if \".\" in self.value.__class__.__module__:\n+            module_name, class_name = self.value.__class__.__module__.rsplit(\".\", 1)\n+            imports.append(\"from %s import %s\" % (module_name, class_name))\n+        else:\n+            class_name = self.value.__class__.__name__\n+\n+        # Use name instead of value for the enum member\n+        enum_name = self.value.name\n+        return \"%s['%s']\" % (class_name, enum_name), imports\n+\n+\n MIGRATION_HEADER_TEMPLATE = \"\"\"\\\n # Generated by Django %(version)s on %(timestamp)s\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n+    register_serializer(enum.Enum, EnumSerializer)\n+class EnumSerializer(BaseSerializer):\n+    def serialize(self):\n+        imports = ['import enum']\n+        if '.' in self.value.__class__.__module__:\n+            module_name, class_name = self.value.__class__.__module__.rsplit('.', 1)\n+            imports.append('from %s import %s' % (module_name, class_name))\n+        else:\n+            class_name = self.value.__class__.__name__\n+        enum_name = self.value.name\n+        return (\"%s['%s']\" % (class_name, enum_name), imports)", "normalized_occurrence": 1}
