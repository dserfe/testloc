{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..f50cae4 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -208,7 +208,9 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n+                if ret.has(NaN):\n+                    raise ValueError(\"Invalid entry detected leading to NaN comparison\")\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..ce617d9 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -83,7 +83,9 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n+                if ret.has(NaN):\n+                    raise ValueError('Invalid entry detected leading to NaN comparison')\n                 return ret\n             return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n         return cancel(bareiss(self))\n", "normalized_occurrence": 1}
