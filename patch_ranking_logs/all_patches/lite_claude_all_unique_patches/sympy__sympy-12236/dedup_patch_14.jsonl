{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..4cece22 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -118,9 +118,14 @@ def apart(f, x=None, full=False, **options):\n             return f.xreplace(dict(reps))\n \n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n+        # Try to handle symbolic coefficients by factoring out parameters\n+        # that are not the decomposition variable\n+        if x is not None:\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            if P.degree(x) >= 0:  # only proceed if P contains x\n+                return apart_rational_with_parameters(P, Q, x, full, _options)\n \n         raise NotImplementedError(\n             \"multivariate partial fraction decomposition\")\n@@ -149,6 +154,28 @@ def apart(f, x=None, full=False, **options):\n     return common*(poly.as_expr() + terms)\n \n \n+def apart_rational_with_parameters(P, Q, x, full, options):\n+    \"\"\"Handle partial fraction decomposition for expressions with parameters.\"\"\"\n+    from sympy import collect\n+    # Collect terms with respect to the parameters\n+    P_collected = collect(P.as_expr(), x)\n+    Q_collected = collect(Q.as_expr(), x)\n+    \n+    # Process each term separately and combine results\n+    result = 0\n+    for term in Add.make_args(P_collected):\n+        coeff, expr = term.as_coeff_mul(x)\n+        if expr:\n+            # Handle term containing x\n+            new_P = Poly(expr[0], x)\n+            new_Q = Q\n+            part = apart(new_P.as_expr()/new_Q.as_expr(), x, full=full, **options)\n+            result += coeff * part\n+        else:\n+            # Handle constant term\n+            result += term/Q_collected\n+    return result\n+\n def apart_undetermined_coeffs(P, Q):\n     \"\"\"Partial fractions via method of undetermined coefficients. \"\"\"\n     X = numbered_symbols(cls=Dummy)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..16f737b 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -55,9 +55,12 @@ def apart(f, x=None, full=False, **options):\n                     pass\n             return f.xreplace(dict(reps))\n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n+        if x is not None:\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            if P.degree(x) >= 0:\n+                return apart_rational_with_parameters(P, Q, x, full, _options)\n         raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n     poly, P = P.div(Q, auto=True)\n@@ -75,6 +78,21 @@ def apart(f, x=None, full=False, **options):\n         else:\n             terms += factor(term)\n     return common * (poly.as_expr() + terms)\n+def apart_rational_with_parameters(P, Q, x, full, options):\n+    from sympy import collect\n+    P_collected = collect(P.as_expr(), x)\n+    Q_collected = collect(Q.as_expr(), x)\n+    result = 0\n+    for term in Add.make_args(P_collected):\n+        coeff, expr = term.as_coeff_mul(x)\n+        if expr:\n+            new_P = Poly(expr[0], x)\n+            new_Q = Q\n+            part = apart(new_P.as_expr() / new_Q.as_expr(), x, full=full, **options)\n+            result += coeff * part\n+        else:\n+            result += term / Q_collected\n+    return result\n def apart_undetermined_coeffs(P, Q):\n     X = numbered_symbols(cls=Dummy)\n     partial, symbols = ([], [])\n", "normalized_occurrence": 1}
