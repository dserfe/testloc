{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..74ffde4 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -324,7 +324,7 @@ class Token(CodegenAST):\n         ==========\n \n         exclude : collection of str\n-            Collection of keywords to exclude.\n+            Collection of keywords to exclude. By default, excludes 'text' for String.\n \n         apply : callable, optional\n             Function to apply to all values.\n@@ -895,9 +895,13 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n+    def __new__(cls, text, **kwargs):\n+        text = cls._construct_text(text)\n+        return Token.__new__(cls, text=text, **kwargs)\n+\n     @classmethod\n     def _construct_text(cls, text):\n         if not isinstance(text, str):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..7954a61 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -287,7 +287,7 @@ class Token(CodegenAST):\n         ==========\n \n         exclude : collection of str\n-            Collection of keywords to exclude.\n+            Collection of keywords to exclude. By default, excludes 'text' for String.\n \n         apply : callable, optional\n             Function to apply to all values.\n@@ -774,9 +774,13 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n+    def __new__(cls, text, **kwargs):\n+        text = cls._construct_text(text)\n+        return Token.__new__(cls, text=text, **kwargs)\n+\n     @classmethod\n     def _construct_text(cls, text):\n         if not isinstance(text, str):\n", "normalized_occurrence": 1}
