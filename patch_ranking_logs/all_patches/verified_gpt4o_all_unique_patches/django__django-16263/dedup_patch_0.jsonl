{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a096f65..0abd027 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,11 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        # Strip annotations that are not used in filters, other annotations, or ordering\n+        filtered_annotations = {k: v for k, v in self.query.annotations.items() if k in self.query.annotation_select or k in self.query.order_by or k in self.query.group_by}\n+        stripped_query = self.query.clone()\n+        stripped_query.annotations = filtered_annotations\n+        return stripped_query.get_count(using=self.db)\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 56014f8..d456783 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -323,7 +323,10 @@ class QuerySet(AltersData):\n     def count(self):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n-        return self.query.get_count(using=self.db)\n+        filtered_annotations = {k: v for k, v in self.query.annotations.items() if k in self.query.annotation_select or k in self.query.order_by or k in self.query.group_by}\n+        stripped_query = self.query.clone()\n+        stripped_query.annotations = filtered_annotations\n+        return stripped_query.get_count(using=self.db)\n     async def acount(self):\n         return await sync_to_async(self.count)()\n     def get(self, *args, **kwargs):\n", "normalized_occurrence": 1}
