{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 0831e79..757521a 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -234,7 +234,11 @@ class AbstractPythonCodePrinter(CodePrinter):\n \n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n-        return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n+        # Ensure the correct structure when modules=[]\n+        if expr.args[0].is_Mul:  \n+            a, b = expr.args\n+            return '({}) % ({})'.format(self._print(a), self._print(b))\n+        return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n \n     def _print_Piecewise(self, expr):\n         result = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex f217d9a..37eef47 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -109,6 +109,9 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return self._print_NaN(expr)\n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n+        if expr.args[0].is_Mul:\n+            a, b = expr.args\n+            return '({}) % ({})'.format(self._print(a), self._print(b))\n         return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n     def _print_Piecewise(self, expr):\n         result = []\n", "normalized_occurrence": 1}
