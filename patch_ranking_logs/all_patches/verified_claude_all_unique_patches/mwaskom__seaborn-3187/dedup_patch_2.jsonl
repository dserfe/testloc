{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 609c102..41d7ebf 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -647,10 +647,32 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n \n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            # Set offset threshold to ensure proper scaling of large numbers\n+            formatter.set_powerlimits((-3, 4))\n \n         return formatter\n \n+    def format_value(self, value, formatter=None):\n+        \"\"\"Format a value using the scale's formatter, accounting for offset.\"\"\"\n+        if formatter is None:\n+            formatter = self._get_formatter(None, None, None, None, None)\n+        \n+        # Get the offset if using ScalarFormatter\n+        offset = 1\n+        if isinstance(formatter, ScalarFormatter):\n+            # Create a dummy axis to get proper offset\n+            fig, ax = plt.subplots()\n+            ax.yaxis.set_major_formatter(formatter)\n+            ax.set_ylim(0, value)\n+            offset = 10 ** formatter.orderOfMagnitude\n+            plt.close(fig)\n+            \n+        formatted = formatter.format_data(value / offset)\n+        if offset != 1:\n+            return f\"{formatted}×10^{formatter.orderOfMagnitude}\"\n+        return formatted\n+\n \n @dataclass\n class Temporal(ContinuousBase):\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex ff6da17..47c6abc 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -317,8 +317,23 @@ class Continuous(ContinuousBase):\n                 sep = ' '\n             formatter = EngFormatter(unit, sep=sep)\n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            formatter.set_powerlimits((-3, 4))\n         return formatter\n+    def format_value(self, value, formatter=None):\n+        if formatter is None:\n+            formatter = self._get_formatter(None, None, None, None, None)\n+        offset = 1\n+        if isinstance(formatter, ScalarFormatter):\n+            fig, ax = plt.subplots()\n+            ax.yaxis.set_major_formatter(formatter)\n+            ax.set_ylim(0, value)\n+            offset = 10 ** formatter.orderOfMagnitude\n+            plt.close(fig)\n+        formatted = formatter.format_data(value / offset)\n+        if offset != 1:\n+            return f'{formatted}×10^{formatter.orderOfMagnitude}'\n+        return formatted\n @dataclass\n class Temporal(ContinuousBase):\n     trans = None\n", "normalized_occurrence": 1}
