{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..2e80228 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,6 +239,17 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [\n+                        checks.Error(\n+                            f\"'max_length' is too short to fit the longest value in 'choices'. \"\n+                            f\"Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n     def _check_choices(self):\n@@ -280,6 +291,17 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [\n+                        checks.Error(\n+                            f\"'max_length' is too short to fit the longest value in 'choices'. \"\n+                            f\"Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n         return [\n@@ -976,6 +998,17 @@ class CharField(Field):\n                 )\n             ]\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [\n+                        checks.Error(\n+                            f\"'max_length' is too short to fit the longest value in 'choices'. \"\n+                            f\"Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    ]\n             return []\n \n     def cast_db_type(self, connection):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..f2ed50a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -116,6 +116,10 @@ class Field(RegisterLookupMixin):\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [checks.Error(f\"'max_length' is too short to fit the longest value in 'choices'. Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\", obj=self, id='fields.E122')]\n             return []\n     def _check_choices(self):\n         if not self.choices:\n@@ -139,6 +143,10 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [checks.Error(f\"'max_length' is too short to fit the longest value in 'choices'. Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\", obj=self, id='fields.E122')]\n             return []\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n@@ -468,6 +476,10 @@ class CharField(Field):\n         elif not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or self.max_length <= 0:\n             return [checks.Error(\"'max_length' must be a positive integer.\", obj=self, id='fields.E121')]\n         else:\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, display in self.choices), default=0)\n+                if longest_choice > self.max_length:\n+                    return [checks.Error(f\"'max_length' is too short to fit the longest value in 'choices'. Longest value has {longest_choice} characters, but 'max_length' is {self.max_length}.\", obj=self, id='fields.E122')]\n             return []\n     def cast_db_type(self, connection):\n         if self.max_length is None:\n", "normalized_occurrence": 1}
