{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..a0ab02a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -87,6 +87,15 @@ def members_set_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n+def private_members_option(arg: Any) -> Union[bool, Set[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return True\n+    if arg is False:\n+        return False\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n+\n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n@@ -656,8 +665,14 @@ class Documenter:\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, set):\n+                    # specific private members given\n+                    keep = membername in self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n+                else:\n+                    # all private members if private_members is True\n+                    keep = self.options.private_members and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7fb9f3d..9e0a713 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -56,6 +56,14 @@ def members_set_option(arg: Any) -> Union[object, Set[str]]:\n         return ALL\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n+def private_members_option(arg: Any) -> Union[bool, Set[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\"\"\"\n+    if arg is None or arg is True:\n+        return True\n+    if arg is False:\n+        return False\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n+\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n@@ -508,7 +516,10 @@ class Documenter:\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n-                keep = self.options.private_members and (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, set):\n+                    keep = membername in self.options.private_members and (has_doc or self.options.undoc_members)\n+                else:\n+                    keep = self.options.private_members and (has_doc or self.options.undoc_members)\n             elif self.options.members is ALL and is_filtered_inherited_member(membername):\n                 keep = False\n             else:\n", "normalized_occurrence": 1}
