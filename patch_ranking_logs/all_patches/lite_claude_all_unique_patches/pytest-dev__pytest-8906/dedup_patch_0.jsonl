{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..026596f 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -128,13 +128,25 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    When you need to skip an entire module (especially when the module contains syntax\n+    that's incompatible with the current Python version), use ``allow_module_level=True``:\n+\n+    .. code-block:: python\n+\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+    :param str msg:\n+        Message to display for the skip.\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are incompatible with the current Python version.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For simple test skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..faa7cda 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -86,13 +86,25 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    When you need to skip an entire module (especially when the module contains syntax\n+    that's incompatible with the current Python version), use ``allow_module_level=True``:\n+\n+    .. code-block:: python\n+\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+    :param str msg:\n+        Message to display for the skip.\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are incompatible with the current Python version.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For simple test skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n", "normalized_occurrence": 1}
