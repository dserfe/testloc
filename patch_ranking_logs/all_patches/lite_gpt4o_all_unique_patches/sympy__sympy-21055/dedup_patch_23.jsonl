{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..d6a02cf 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -66,7 +67,22 @@ def refine(expr, assumptions=True):\n     return refine(new_expr, assumptions)\n \n \n-def refine_abs(expr, assumptions):\n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg, I\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> refine_arg(arg(I), Q.positive(I))\n+    0\n+    \"\"\"\n+    from sympy.functions.elementary.complexes import arg\n+    if ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    return expr\n     \"\"\"\n     Handler for the absolute value.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..8c1a350 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -22,7 +22,11 @@ def refine(expr, assumptions=True):\n     if not isinstance(new_expr, Expr):\n         return new_expr\n     return refine(new_expr, assumptions)\n-def refine_abs(expr, assumptions):\n+def refine_arg(expr, assumptions):\n+    from sympy.functions.elementary.complexes import arg\n+    if ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    return expr\n     from sympy.core.logic import fuzzy_not\n     from sympy import Abs\n     arg = expr.args[0]\n", "normalized_occurrence": 1}
