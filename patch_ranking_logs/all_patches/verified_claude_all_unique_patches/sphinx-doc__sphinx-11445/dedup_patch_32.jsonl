{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py\nindex ec97f42..da48472 100644\n--- a/sphinx/environment/collectors/title.py\n+++ b/sphinx/environment/collectors/title.py\n@@ -38,8 +38,14 @@ class TitleCollector(EnvironmentCollector):\n             longtitlenode += nodes.Text(doctree['title'])\n         # look for first section title and use that as the title\n         for node in doctree.findall(nodes.section):\n+            title = node[0]\n+            # Handle domain directives in titles by resolving them first\n+            if any(isinstance(child, addnodes.pending_xref) for child in title.children):\n+                resolved_title = nodes.title()\n+                resolved_title.extend(title.traverse(lambda n: isinstance(n, nodes.Text)))\n+                title = resolved_title\n             visitor = SphinxContentsFilter(doctree)\n-            node[0].walkabout(visitor)\n+            title.walkabout(visitor)\n             titlenode += visitor.get_entry_text()\n             break\n         else:\n@@ -56,4 +62,4 @@ def setup(app: Sphinx) -> dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py\nindex 90c3ce6..5facad1 100644\n--- a/sphinx/environment/collectors/title.py\n+++ b/sphinx/environment/collectors/title.py\n@@ -20,8 +20,13 @@ class TitleCollector(EnvironmentCollector):\n             longtitlenode = nodes.title()\n             longtitlenode += nodes.Text(doctree['title'])\n         for node in doctree.findall(nodes.section):\n+            title = node[0]\n+            if any((isinstance(child, addnodes.pending_xref) for child in title.children)):\n+                resolved_title = nodes.title()\n+                resolved_title.extend(title.traverse(lambda n: isinstance(n, nodes.Text)))\n+                title = resolved_title\n             visitor = SphinxContentsFilter(doctree)\n-            node[0].walkabout(visitor)\n+            title.walkabout(visitor)\n             titlenode += visitor.get_entry_text()\n             break\n         else:\n", "normalized_occurrence": 1}
