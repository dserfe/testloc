{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..fcf1ab5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,6 +987,11 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n+        if hasattr(self.model, '_meta') and self.model._meta.parents:\n+            for parent in self.model._meta.parents:\n+                if parent:\n+                    parent_query = parent._default_manager.filter(pk__in=self.values_list('pk', flat=True))\n+                    parent_query.update(**kwargs)\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..69852b6 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,6 +532,11 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n+        if hasattr(self.model, '_meta') and self.model._meta.parents:\n+            for parent in self.model._meta.parents:\n+                if parent:\n+                    parent_query = parent._default_manager.filter(pk__in=self.values_list('pk', flat=True))\n+                    parent_query.update(**kwargs)\n         query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         query.annotations = {}\n", "normalized_occurrence": 1}
