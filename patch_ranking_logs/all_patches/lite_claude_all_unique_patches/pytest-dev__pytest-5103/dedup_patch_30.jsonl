{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..fb94855 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,62 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Check if this is a call to all() or any()\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):\n+                # Get the generator/listcomp internals\n+                gen = call.args[0]\n+                elt = gen.elt\n+                for_loop = gen.generators[0]\n+                \n+                # Create a for loop that checks each element\n+                target = for_loop.target\n+                iter_expr = for_loop.iter\n+                \n+                # Create the loop body\n+                if call.func.id == 'all':\n+                    # for x in iter: if not pred(x): return False\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                else:  # any\n+                    # for x in iter: if pred(x): return True\n+                    test = elt\n+                \n+                loop_body = ast.For(\n+                    target=target,\n+                    iter=iter_expr,\n+                    body=[ast.Assert(test=test, msg=None)],\n+                    orelse=[]\n+                )\n+                \n+                return loop_body, \"unrolled %s() check\" % call.func.id\n+        \n+        # Default handling for other calls\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n+        \"\"\"\n+        visit `ast.Call` nodes on Python3.5 and after\n+        \"\"\"\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..210f902 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,40 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):\n+                gen = call.args[0]\n+                elt = gen.elt\n+                for_loop = gen.generators[0]\n+                target = for_loop.target\n+                iter_expr = for_loop.iter\n+                if call.func.id == 'all':\n+                    test = ast.UnaryOp(op=ast.Not(), operand=elt)\n+                else:\n+                    test = elt\n+                loop_body = ast.For(target=target, iter=iter_expr, body=[ast.Assert(test=test, msg=None)], orelse=[])\n+                return (loop_body, 'unrolled %s() check' % call.func.id)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
