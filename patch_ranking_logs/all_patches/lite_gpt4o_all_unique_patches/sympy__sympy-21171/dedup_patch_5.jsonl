{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21171", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex c36a092..f68cdc1 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -608,6 +608,8 @@ class LatexPrinter(Printer):\n \n         if include_parens:\n             tex += \")\"\n+        if exp:\n+            tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n     def _print_Pow(self, expr):\n@@ -636,7 +638,7 @@ class LatexPrinter(Printer):\n             # issue #12886: add parentheses for superscripts raised to powers\n             if expr.base.is_Symbol:\n                 base = self.parenthesize_super(base)\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and not isinstance(expr.base, SingularityFunction):\n                 return self._print(expr.base, exp=\"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and \\\n@@ -647,7 +649,7 @@ class LatexPrinter(Printer):\n             # things like 1/x\n             return self._print_Mul(expr)\n         else:\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and not isinstance(expr.base, SingularityFunction):\n                 return self._print(expr.base, exp=self._print(expr.exp))\n             else:\n                 tex = r\"%s^{%s}\"\n@@ -1966,16 +1968,22 @@ class LatexPrinter(Printer):\n                 self._print(expr.args[1]), self._print(expr.args[0]))\n         if exp:\n             tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n+        if exp:\n+            tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n-    def _print_SingularityFunction(self, expr):\n+    def _print_SingularityFunction(self, expr, exp=None):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n         tex = r\"{\\left\\langle %s \\right\\rangle}^{%s}\" % (shift, power)\n+        if exp:\n+            tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n \n     def _print_Heaviside(self, expr, exp=None):\n         tex = r\"\\theta\\left(%s\\right)\" % self._print(expr.args[0])\n+        if exp:\n+            tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         if exp:\n             tex = r\"\\left(%s\\right)^{%s}\" % (tex, exp)\n         return tex\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex e1fcf81..430db7e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -316,6 +316,8 @@ class LatexPrinter(Printer):\n                 tex += '\\\\frac{%s}{%s}' % (snumer, sdenom)\n         if include_parens:\n             tex += ')'\n+        if exp:\n+            tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n         return tex\n     def _print_Pow(self, expr):\n         if expr.exp.is_Rational and abs(expr.exp.p) == 1 and (expr.exp.q != 1) and self._settings['root_notation']:\n@@ -336,14 +338,14 @@ class LatexPrinter(Printer):\n             p, q = (expr.exp.p, expr.exp.q)\n             if expr.base.is_Symbol:\n                 base = self.parenthesize_super(base)\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and (not isinstance(expr.base, SingularityFunction)):\n                 return self._print(expr.base, exp='%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n             if expr.base == 1:\n                 return '%s^{%s}' % (expr.base, expr.exp)\n             return self._print_Mul(expr)\n-        elif expr.base.is_Function:\n+        elif expr.base.is_Function and (not isinstance(expr.base, SingularityFunction)):\n             return self._print(expr.base, exp=self._print(expr.exp))\n         else:\n             tex = '%s^{%s}'\n@@ -1270,14 +1272,20 @@ class LatexPrinter(Printer):\n             tex = '\\\\delta^{\\\\left( %s \\\\right)}\\\\left( %s \\\\right)' % (self._print(expr.args[1]), self._print(expr.args[0]))\n         if exp:\n             tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n+        if exp:\n+            tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n         return tex\n-    def _print_SingularityFunction(self, expr):\n+    def _print_SingularityFunction(self, expr, exp=None):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n         tex = '{\\\\left\\\\langle %s \\\\right\\\\rangle}^{%s}' % (shift, power)\n+        if exp:\n+            tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n         return tex\n     def _print_Heaviside(self, expr, exp=None):\n         tex = '\\\\theta\\\\left(%s\\\\right)' % self._print(expr.args[0])\n+        if exp:\n+            tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n         if exp:\n             tex = '\\\\left(%s\\\\right)^{%s}' % (tex, exp)\n         return tex\n", "normalized_occurrence": 1}
