{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cd0e9c6..4e17349 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1248,19 +1248,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             sig = super().format_signature(**kwargs)\n             sigs.append(sig)\n \n-        if inspect.is_singledispatch_function(self.object):\n-            # append signature of singledispatch'ed functions\n-            for typ, func in self.object.registry.items():\n-                if typ is object:\n-                    pass  # default implementation. skipped.\n-                else:\n-                    self.annotate_to_first_argument(func, typ)\n-\n-                    documenter = FunctionDocumenter(self.directive, '')\n-                    documenter.object = func\n-                    documenter.objpath = [None]\n-                    sigs.append(documenter.format_signature())\n         if overloaded:\n+            if self.env.config.autodoc_typehints == 'none':\n+                sigs = [stringify_signature(sig.replace(parameters=[param.replace(annotation=param.empty) for param in sig.parameters.values()], return_annotation=sig.empty), **kwargs) for sig in sigs]\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex be7144a..6719f21 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -687,17 +687,9 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             overloaded = False\n             sig = super().format_signature(**kwargs)\n             sigs.append(sig)\n-        if inspect.is_singledispatch_function(self.object):\n-            for typ, func in self.object.registry.items():\n-                if typ is object:\n-                    pass\n-                else:\n-                    self.annotate_to_first_argument(func, typ)\n-                    documenter = FunctionDocumenter(self.directive, '')\n-                    documenter.object = func\n-                    documenter.objpath = [None]\n-                    sigs.append(documenter.format_signature())\n         if overloaded:\n+            if self.env.config.autodoc_typehints == 'none':\n+                sigs = [stringify_signature(sig.replace(parameters=[param.replace(annotation=param.empty) for param in sig.parameters.values()], return_annotation=sig.empty), **kwargs) for sig in sigs]\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n", "normalized_occurrence": 1}
