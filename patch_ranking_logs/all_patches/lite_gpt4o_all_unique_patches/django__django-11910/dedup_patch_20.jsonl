{"model_name_or_path": "agentless", "instance_id": "django__django-11910", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex 0aa71a3..9901c9b 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -223,10 +223,10 @@ class AlterField(FieldOperation):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n+        fields = state.models[app_label, self.model_name_lower].fields\n         state.models[app_label, self.model_name_lower].fields = [\n-            (n, field if n == self.name else f)\n-            for n, f in\n-            state.models[app_label, self.model_name_lower].fields\n+            (n, self._replace_to_field_reference(f) if n == self.name else f)\n+            for n, f in fields\n         ]\n         # TODO: investigate if old relational fields must be reloaded or if it's\n         # sufficient if the new field is (#27737).\n@@ -236,7 +236,15 @@ class AlterField(FieldOperation):\n             not field.is_relation and\n             not is_referenced_by_foreign_key(state, self.model_name_lower, self.field, self.name)\n         )\n-        state.reload_model(app_label, self.model_name_lower, delay=delay)\n+        def _replace_to_field_reference(self, field):\n+            if hasattr(field.remote_field, 'field_name') and field.remote_field.field_name == self.old_name:\n+                field.remote_field.field_name = self.new_name\n+            return field\n+\n+        state.models[app_label, self.model_name_lower].fields = [\n+            (n, self._replace_to_field_reference(f) if n == self.name else f)\n+            for n, f in state.models[app_label, self.model_name_lower].fields\n+        ]\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n@@ -352,7 +360,15 @@ class RenameField(FieldOperation):\n                                 self.new_name if to_field_name == self.old_name else to_field_name\n                                 for to_field_name in to_fields\n                             ])\n-        state.reload_model(app_label, self.model_name_lower, delay=delay)\n+        def _replace_to_field_reference(self, field):\n+            if hasattr(field.remote_field, 'field_name') and field.remote_field.field_name == self.old_name:\n+                field.remote_field.field_name = self.new_name\n+            return field\n+\n+        state.models[app_label, self.model_name_lower].fields = [\n+            (n, self._replace_to_field_reference(f) if n == self.name else f)\n+            for n, f in state.models[app_label, self.model_name_lower].fields\n+        ]\n \n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex b2b87fe..01abeff 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -133,9 +133,14 @@ class AlterField(FieldOperation):\n             field.default = NOT_PROVIDED\n         else:\n             field = self.field\n-        state.models[app_label, self.model_name_lower].fields = [(n, field if n == self.name else f) for n, f in state.models[app_label, self.model_name_lower].fields]\n+        fields = state.models[app_label, self.model_name_lower].fields\n+        state.models[app_label, self.model_name_lower].fields = [(n, self._replace_to_field_reference(f) if n == self.name else f) for n, f in fields]\n         delay = not field.is_relation and (not is_referenced_by_foreign_key(state, self.model_name_lower, self.field, self.name))\n-        state.reload_model(app_label, self.model_name_lower, delay=delay)\n+        def _replace_to_field_reference(self, field):\n+            if hasattr(field.remote_field, 'field_name') and field.remote_field.field_name == self.old_name:\n+                field.remote_field.field_name = self.new_name\n+            return field\n+        state.models[app_label, self.model_name_lower].fields = [(n, self._replace_to_field_reference(f) if n == self.name else f) for n, f in state.models[app_label, self.model_name_lower].fields]\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, to_model):\n@@ -202,7 +207,11 @@ class RenameField(FieldOperation):\n                         to_fields = getattr(field, 'to_fields', None)\n                         if to_fields:\n                             field.to_fields = tuple([self.new_name if to_field_name == self.old_name else to_field_name for to_field_name in to_fields])\n-        state.reload_model(app_label, self.model_name_lower, delay=delay)\n+        def _replace_to_field_reference(self, field):\n+            if hasattr(field.remote_field, 'field_name') and field.remote_field.field_name == self.old_name:\n+                field.remote_field.field_name = self.new_name\n+            return field\n+        state.models[app_label, self.model_name_lower].fields = [(n, self._replace_to_field_reference(f) if n == self.name else f) for n, f in state.models[app_label, self.model_name_lower].fields]\n     def database_forwards(self, app_label, schema_editor, from_state, to_state):\n         to_model = to_state.apps.get_model(app_label, self.model_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, to_model):\n", "normalized_occurrence": 1}
