{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..53f8bb7 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -913,13 +913,30 @@ class Basic(with_metaclass(ManagedProperties)):\n                     break\n                 reps[d] = new\n             reps[m] = S.One  # get rid of m\n-            return rv.xreplace(reps)\n+            try:\n+                result = rv.xreplace(reps)\n+                # Check if result contains any undefined expressions\n+                if result.has(S.NaN) or result.has(S.ComplexInfinity):\n+                    from sympy import nan\n+                    return nan\n+                return result\n+            except ZeroDivisionError:\n+                from sympy import nan\n+                return nan\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    # Check if result contains any undefined expressions\n+                    if rv.has(S.NaN) or rv.has(S.ComplexInfinity):\n+                        from sympy import nan\n+                        return nan\n+                except ZeroDivisionError:\n+                    from sympy import nan\n+                    return nan\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..881ee9f 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -322,13 +322,28 @@ class Basic(with_metaclass(ManagedProperties)):\n                     break\n                 reps[d] = new\n             reps[m] = S.One\n-            return rv.xreplace(reps)\n+            try:\n+                result = rv.xreplace(reps)\n+                if result.has(S.NaN) or result.has(S.ComplexInfinity):\n+                    from sympy import nan\n+                    return nan\n+                return result\n+            except ZeroDivisionError:\n+                from sympy import nan\n+                return nan\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    if rv.has(S.NaN) or rv.has(S.ComplexInfinity):\n+                        from sympy import nan\n+                        return nan\n+                except ZeroDivisionError:\n+                    from sympy import nan\n+                    return nan\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
