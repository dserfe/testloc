{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..2dc017e 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -495,10 +495,39 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n+            # Special handling for kbd role content\n+            text = node.astext()\n+            if any(sep in text for sep in ['-', '+', '^']):\n+                # This is a compound keystroke\n+                if text.strip() in ['-', '+', '^']:\n+                    # Single separator character - treat as literal\n+                    self.body.append(self.encode(text))\n+                else:\n+                    # Split on common separators keeping them\n+                    parts = []\n+                    current = ''\n+                    for char in text:\n+                        if char in ['-', '+', '^']:\n+                            if current:\n+                                parts.append(current)\n+                                current = ''\n+                            parts.append(char)\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    \n+                    # Write each part with proper markup\n+                    for i, part in enumerate(parts):\n+                        if part in ['-', '+', '^']:\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n \n     def depart_literal(self, node: Element) -> None:\n@@ -841,4 +870,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..f51bf30 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -446,10 +446,39 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n+            # Special handling for kbd role content\n+            text = node.astext()\n+            if any(sep in text for sep in ['-', '+', '^']):\n+                # This is a compound keystroke\n+                if text.strip() in ['-', '+', '^']:\n+                    # Single separator character - treat as literal\n+                    self.body.append(self.encode(text))\n+                else:\n+                    # Split on common separators keeping them\n+                    parts = []\n+                    current = ''\n+                    for char in text:\n+                        if char in ['-', '+', '^']:\n+                            if current:\n+                                parts.append(current)\n+                                current = ''\n+                            parts.append(char)\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    \n+                    # Write each part with proper markup\n+                    for i, part in enumerate(parts):\n+                        if part in ['-', '+', '^']:\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n-                                           CLASS='docutils literal notranslate'))\n+                                         CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n \n     def depart_literal(self, node: Element) -> None:\n@@ -789,4 +818,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..4025a0d 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,29 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in ['-', '+', '^'])):\n+                if text.strip() in ['-', '+', '^']:\n+                    self.body.append(self.encode(text))\n+                else:\n+                    parts = []\n+                    current = ''\n+                    for char in text:\n+                        if char in ['-', '+', '^']:\n+                            if current:\n+                                parts.append(current)\n+                                current = ''\n+                            parts.append(char)\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    for i, part in enumerate(parts):\n+                        if part in ['-', '+', '^']:\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..350c5d6 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,29 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in ['-', '+', '^'])):\n+                if text.strip() in ['-', '+', '^']:\n+                    self.body.append(self.encode(text))\n+                else:\n+                    parts = []\n+                    current = ''\n+                    for char in text:\n+                        if char in ['-', '+', '^']:\n+                            if current:\n+                                parts.append(current)\n+                                current = ''\n+                            parts.append(char)\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    for i, part in enumerate(parts):\n+                        if part in ['-', '+', '^']:\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
