{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..80febfb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1738,9 +1738,9 @@ class QuerySet(AltersData):\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n-        for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+        field_roots = {field.split(LOOKUP_SEP, 1)[0] for field in fields}\n+        for field_root in field_roots:\n+            if field_root in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..17fad99 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -940,9 +940,9 @@ class QuerySet(AltersData):\n             raise TypeError('Cannot call only() after .values() or .values_list()')\n         if fields == (None,):\n             raise TypeError('Cannot pass None as an argument to only().')\n-        for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+        field_roots = {field.split(LOOKUP_SEP, 1)[0] for field in fields}\n+        for field_root in field_roots:\n+            if field_root in self.query._filtered_relations:\n                 raise ValueError('only() is not supported with FilteredRelation.')\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n", "normalized_occurrence": 2}
