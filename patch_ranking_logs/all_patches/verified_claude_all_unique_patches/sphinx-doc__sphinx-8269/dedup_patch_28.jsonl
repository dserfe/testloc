{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..e1fa82f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -162,27 +162,28 @@ class CheckExternalLinksBuilder(Builder):\n             kwargs['headers'] = get_request_headers()\n \n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n-                    # Read the whole document and see if #anchor exists\n+                try:\n+                    # try a HEAD request first, which should be easier on\n+                    # the server and the network\n+                    response = requests.head(req_url, config=self.app.config,\n+                                             auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                except HTTPError:\n+                    # retry with GET request if that fails, some servers\n+                    # don't like HEAD requests.\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n+                    response.raise_for_status()\n \n-                    if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n-                    try:\n-                        # try a HEAD request first, which should be easier on\n-                        # the server and the network\n-                        response = requests.head(req_url, config=self.app.config,\n-                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        # retry with GET request if that fails, some servers\n-                        # don't like HEAD requests.\n+                # Only check for anchor if the base URL is valid\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    # Read the whole document and see if #anchor exists\n+                    if not response or not response.content:\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n                                                 auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n+                    found = check_anchor(response, unquote(anchor))\n+                    if not found:\n+                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     # We'll take \"Unauthorized\" as working.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex ace1ed3..d09875d 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -95,18 +95,18 @@ class CheckExternalLinksBuilder(Builder):\n                 auth_info = None\n             kwargs['headers'] = get_request_headers()\n             try:\n-                if anchor and self.app.config.linkcheck_anchors:\n+                try:\n+                    response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                except HTTPError:\n                     response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n+                    response.raise_for_status()\n+                if anchor and self.app.config.linkcheck_anchors:\n+                    if not response or not response.content:\n+                        response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n                     if not found:\n                         raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n-                    try:\n-                        response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n-                    except HTTPError:\n-                        response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n-                        response.raise_for_status()\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     return ('working', ' - unauthorized', 0)\n", "normalized_occurrence": 1}
