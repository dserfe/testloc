{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..d801199 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -179,7 +179,26 @@ class ValidationError(Exception):\n             return repr(dict(self))\n         return repr(list(self))\n \n-    def __repr__(self):\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict'):\n+            if not hasattr(other, 'error_dict'):\n+                return False\n+            return self._compare_error_dicts(self.error_dict, other.error_dict)\n+        if hasattr(self, 'error_list'):\n+            if not hasattr(other, 'error_list'):\n+                return False\n+            return sorted(self.error_list, key=lambda e: str(e)) == sorted(other.error_list, key=lambda e: str(e))\n+        return self.message == other.message and self.code == other.code and self.params == other.params\n+\n+    def _compare_error_dicts(self, dict1, dict2):\n+        if set(dict1.keys()) != set(dict2.keys()):\n+            return False\n+        for key in dict1:\n+            if sorted(dict1[key], key=lambda e: str(e)) != sorted(dict2[key], key=lambda e: str(e)):\n+                return False\n+        return True\n         return 'ValidationError(%s)' % self\n \n \n@@ -190,4 +209,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7691d44..8e5f9e3 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -152,7 +152,26 @@ class ValidationError(Exception):\n             return repr(dict(self))\n         return repr(list(self))\n \n-    def __repr__(self):\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict'):\n+            if not hasattr(other, 'error_dict'):\n+                return False\n+            return self._compare_error_dicts(self.error_dict, other.error_dict)\n+        if hasattr(self, 'error_list'):\n+            if not hasattr(other, 'error_list'):\n+                return False\n+            return sorted(self.error_list, key=lambda e: str(e)) == sorted(other.error_list, key=lambda e: str(e))\n+        return self.message == other.message and self.code == other.code and (self.params == other.params)\n+\n+    def _compare_error_dicts(self, dict1, dict2):\n+        if set(dict1.keys()) != set(dict2.keys()):\n+            return False\n+        for key in dict1:\n+            if sorted(dict1[key], key=lambda e: str(e)) != sorted(dict2[key], key=lambda e: str(e)):\n+                return False\n+        return True\n         return 'ValidationError(%s)' % self\n \n class EmptyResultSet(Exception):\n", "normalized_occurrence": 1}
