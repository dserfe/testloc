{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..14f6e5e 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,6 +1932,25 @@ class FiniteSet(Set, EvalfMixin):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n+            nums = []\n+            syms = []\n+            others = []\n+            # Separate elements into numbers, symbols and others\n+            for m in self.args:\n+                if m.is_number:\n+                    nums.append(m)\n+                elif m.is_Symbol:\n+                    syms.append(m)\n+                else:\n+                    others.append(m)\n+            \n+            # Numbers in the set but not in the interval\n+            remaining_nums = [n for n in nums if not other.contains(n)]\n+            # Symbols and other expressions are unaffected by real intervals\n+            remaining = syms + others + remaining_nums\n+            if remaining:\n+                return FiniteSet(*remaining)\n+            return S.EmptySet\n             nums = sorted(m for m in self.args if m.is_number)\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..b939091 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -841,6 +841,21 @@ class FiniteSet(Set, EvalfMixin):\n         return self.__class__(*[el for el in self if el in other])\n     def _complement(self, other):\n         if isinstance(other, Interval):\n+            nums = []\n+            syms = []\n+            others = []\n+            for m in self.args:\n+                if m.is_number:\n+                    nums.append(m)\n+                elif m.is_Symbol:\n+                    syms.append(m)\n+                else:\n+                    others.append(m)\n+            remaining_nums = [n for n in nums if not other.contains(n)]\n+            remaining = syms + others + remaining_nums\n+            if remaining:\n+                return FiniteSet(*remaining)\n+            return S.EmptySet\n             nums = sorted((m for m in self.args if m.is_number))\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n", "normalized_occurrence": 1}
