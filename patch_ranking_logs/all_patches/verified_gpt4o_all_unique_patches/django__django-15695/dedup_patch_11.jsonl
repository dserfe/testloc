{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..3ef5f7a 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -976,7 +976,17 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_name is None:\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            auto_generated_name = schema_editor._create_index_name(model._meta.db_table, [field.column for field in from_model_state.fields.values() if field.unique], suffix=\"_uniq\")\n+            self.new_name = auto_generated_name\n+        try:\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        except Exception as e:\n+            if self.old_name is None:\n+                self.new_name = None\n+            raise e\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..01561f1 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -439,7 +439,17 @@ class RenameIndex(IndexOperation):\n             return\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if self.old_name is None:\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            auto_generated_name = schema_editor._create_index_name(model._meta.db_table, [field.column for field in from_model_state.fields.values() if field.unique], suffix='_uniq')\n+            self.new_name = auto_generated_name\n+        try:\n+            self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        except Exception as e:\n+            if self.old_name is None:\n+                self.new_name = None\n+            raise e\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n     def describe(self):\n", "normalized_occurrence": 1}
