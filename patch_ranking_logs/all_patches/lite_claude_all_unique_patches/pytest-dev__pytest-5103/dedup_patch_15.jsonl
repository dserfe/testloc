{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7fcaca7 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,74 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        # Special handling for all() and any() calls\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in ('all', 'any') and \n+            len(call.args) == 1 and \n+            not call.keywords):\n+            \n+            # Get the iterator argument\n+            iter_arg = call.args[0]\n+            \n+            # Create unique variable names for the loop\n+            temp_iter = self.new_name()\n+            temp_item = self.new_name()\n+            \n+            # For 'all', we want to fail on first False\n+            # For 'any', we want to succeed on first True\n+            is_all = call.func.id == 'all'\n+            \n+            store = ast.Store()\n+            load = ast.Load()\n+            \n+            # temp_iter = list(iterator)\n+            assign = ast.Assign(\n+                targets=[ast.Name(id=temp_iter, ctx=store)],\n+                value=ast.Call(\n+                    func=ast.Name(id='list', ctx=load),\n+                    args=[iter_arg],\n+                    keywords=[]\n+                )\n+            )\n+            \n+            # Create the test condition\n+            test = ast.Name(id=temp_item, ctx=load)\n+            if not is_all:\n+                test = ast.UnaryOp(op=ast.Not(), operand=test)\n+            \n+            # Create the assertion\n+            assertion = ast.Assert(test=test, msg=None)\n+            \n+            # Create the for loop\n+            loop = ast.For(\n+                target=ast.Name(id=temp_item, ctx=store),\n+                iter=ast.Name(id=temp_iter, ctx=load),\n+                body=[assertion],\n+                orelse=[]\n+            )\n+            \n+            # Fix missing attributes\n+            ast.fix_missing_locations(assign)\n+            ast.fix_missing_locations(loop)\n+            \n+            return [assign, loop], \"unrolled all/any into loop\"\n+            \n+        # Original implementation for other calls\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..8950d29 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,37 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1) and (not call.keywords):\n+            iter_arg = call.args[0]\n+            temp_iter = self.new_name()\n+            temp_item = self.new_name()\n+            is_all = call.func.id == 'all'\n+            store = ast.Store()\n+            load = ast.Load()\n+            assign = ast.Assign(targets=[ast.Name(id=temp_iter, ctx=store)], value=ast.Call(func=ast.Name(id='list', ctx=load), args=[iter_arg], keywords=[]))\n+            test = ast.Name(id=temp_item, ctx=load)\n+            if not is_all:\n+                test = ast.UnaryOp(op=ast.Not(), operand=test)\n+            assertion = ast.Assert(test=test, msg=None)\n+            loop = ast.For(target=ast.Name(id=temp_item, ctx=store), iter=ast.Name(id=temp_iter, ctx=load), body=[assertion], orelse=[])\n+            ast.fix_missing_locations(assign)\n+            ast.fix_missing_locations(loop)\n+            return ([assign, loop], 'unrolled all/any into loop')\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
