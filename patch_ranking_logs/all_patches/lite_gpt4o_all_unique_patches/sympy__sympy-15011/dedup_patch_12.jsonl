{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..6334aa7 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -725,7 +725,7 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n@@ -748,9 +748,14 @@ class _EvaluatorPrinter(object):\n         from sympy import sympify\n \n         try:\n-            expr = sympify(expr).xreplace(dummies_dict)\n+            if isinstance(expr, MatrixSymbol):\n+                for old, new in dummies_dict.items():\n+                    if isinstance(old, MatrixSymbol):\n+                        expr = expr.__class__(new.name, *old.shape)\n+            else:\n+                expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n-            if isinstance(expr, DeferredVector):\n+            if isinstance(expr, DeferredVector) or isinstance(expr, MatrixSymbol):\n                 pass\n             elif isinstance(expr, dict):\n                 k = [self._subexpr(sympify(a), dummies_dict) for a in expr.keys()]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..b65df66 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -294,7 +294,7 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n                 argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n@@ -313,9 +313,14 @@ class _EvaluatorPrinter(object):\n         from sympy.matrices import DeferredVector\n         from sympy import sympify\n         try:\n-            expr = sympify(expr).xreplace(dummies_dict)\n+            if isinstance(expr, MatrixSymbol):\n+                for old, new in dummies_dict.items():\n+                    if isinstance(old, MatrixSymbol):\n+                        expr = expr.__class__(new.name, *old.shape)\n+            else:\n+                expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n-            if isinstance(expr, DeferredVector):\n+            if isinstance(expr, DeferredVector) or isinstance(expr, MatrixSymbol):\n                 pass\n             elif isinstance(expr, dict):\n                 k = [self._subexpr(sympify(a), dummies_dict) for a in expr.keys()]\n", "normalized_occurrence": 1}
