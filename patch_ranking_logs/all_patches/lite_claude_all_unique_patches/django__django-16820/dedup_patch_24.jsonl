{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..b21ada0 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1501,12 +1501,16 @@ class MigrationAutodetector:\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n             if operation == operations.AlterIndexTogether:\n-                old_value = {\n-                    value\n-                    for value in old_value\n-                    if value\n-                    not in self.renamed_index_together_values[app_label, model_name]\n-                }\n+                # Skip generating AlterIndexTogether operations during squashing\n+                # to remove deprecation warnings - these should be replaced with\n+                # AddIndex/RemoveIndex operations\n+                continue\n+            old_value = {\n+                value\n+                for value in old_value\n+                if value\n+                not in self.renamed_index_together_values.get((app_label, model_name), set())\n+            }\n             removal_value = new_value.intersection(old_value)\n             if removal_value or old_value:\n                 self.add_operation(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..a66baeb 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -612,7 +612,8 @@ class MigrationAutodetector:\n     def _generate_removed_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n             if operation == operations.AlterIndexTogether:\n-                old_value = {value for value in old_value if value not in self.renamed_index_together_values[app_label, model_name]}\n+                continue\n+            old_value = {value for value in old_value if value not in self.renamed_index_together_values.get((app_label, model_name), set())}\n             removal_value = new_value.intersection(old_value)\n             if removal_value or old_value:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n", "normalized_occurrence": 1}
