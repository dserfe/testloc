{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..7edb5b4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -226,6 +226,10 @@ class SQLCompiler:\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n             cols = self.get_default_columns()\n+            # Handle IN subqueries by selecting only ID when comparing against a queryset\n+            if (len(cols) > 1 and self.query.where.children and\n+                any(getattr(child, 'lookup_name', None) == 'in' for child in self.query.where.children)):\n+                cols = [cols[0]]  # Select only the first column (typically ID)\n         else:\n             # self.query.select is a special case. These columns never go to\n             # any model.\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..b0ed131 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -100,6 +100,8 @@ class SQLCompiler:\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n             cols = self.get_default_columns()\n+            if len(cols) > 1 and self.query.where.children and any((getattr(child, 'lookup_name', None) == 'in' for child in self.query.where.children)):\n+                cols = [cols[0]]\n         else:\n             cols = self.query.select\n         if cols:\n", "normalized_occurrence": 1}
