{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..254501f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -786,13 +786,18 @@ class Field(RegisterLookupMixin):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n-        return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return super().get_prep_value(value)\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n         \"\"\"\n@@ -802,7 +807,9 @@ class Field(RegisterLookupMixin):\n         \"\"\"\n         if not prepared:\n             value = self.get_prep_value(value)\n-        return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return super().get_prep_value(value)\n \n     def get_db_prep_save(self, value, connection):\n         \"\"\"Return field's value prepared for saving into a database.\"\"\"\n@@ -1008,6 +1015,8 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n+        if isinstance(value, MyChoice):  # Ensure correct enum class is used\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..b7535ff 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -354,15 +354,22 @@ class Field(RegisterLookupMixin):\n     def get_internal_type(self):\n         return self.__class__.__name__\n     def pre_save(self, model_instance, add):\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return value\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n-        return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return super().get_prep_value(value)\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if not prepared:\n             value = self.get_prep_value(value)\n-        return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n+        return super().get_prep_value(value)\n     def get_db_prep_save(self, value, connection):\n         return self.get_db_prep_value(value, connection=connection, prepared=False)\n     def has_default(self):\n@@ -485,6 +492,8 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n+        if isinstance(value, MyChoice):\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n", "normalized_occurrence": 1}
