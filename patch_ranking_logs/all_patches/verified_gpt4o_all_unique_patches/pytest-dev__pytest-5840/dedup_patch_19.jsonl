{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5840", "model_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex b3d362f..9c61fa6 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -338,9 +338,9 @@ def parts(s):\n \n \n def unique_path(path):\n-    \"\"\"Returns a unique path in case-insensitive (but case-preserving) file\n-    systems such as Windows.\n+    \"\"\"Returns a unique path while preserving the original case on case-insensitive\n+    file systems such as Windows.\n \n     This is needed only for ``py.path.local``; ``pathlib.Path`` handles this\n     natively with ``resolve()``.\"\"\"\n-    return type(path)(normcase(str(path.realpath())))\n+    return path.resolve()\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex 769f60b..0678e04 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -203,4 +203,4 @@ def parts(s):\n     parts = s.split(sep)\n     return {sep.join(parts[:i + 1]) or sep for i in range(len(parts))}\n def unique_path(path):\n-    return type(path)(normcase(str(path.realpath())))\n\\ No newline at end of file\n+    return path.resolve()\n\\ No newline at end of file\n", "normalized_occurrence": 4}
