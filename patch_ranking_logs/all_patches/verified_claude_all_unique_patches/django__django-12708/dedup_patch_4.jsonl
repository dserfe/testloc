{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..1535c5c 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -405,9 +405,13 @@ class BaseDatabaseSchemaEditor:\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n+            index=True,  # Specifically look for index constraints\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n+        if not constraint_names:\n+            return  # If no matching index constraint exists, nothing to do\n+        # There should be at most one matching index constraint\n+        if len(constraint_names) > 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..a00bdbb 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,8 +229,10 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n+        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, index=True, **constraint_kwargs)\n+        if not constraint_names:\n+            return\n+        if len(constraint_names) > 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "normalized_occurrence": 1}
