{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..aa7c63d 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -402,15 +402,14 @@ class LatexPrinter(Printer):\n             if self._settings['fold_short_frac'] \\\n                     and ldenom <= 2 and not \"^\" in sdenom:\n                 # handle short fractions\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n+                if self._needs_mul_brackets(expr, last=False):\n+                    tex += r\"\\left(%s\\right) / {%s}\" % (snumer, sdenom)\n                 else:\n-                    tex += r\"%s / %s\" % (snumer, sdenom)\n+                    tex += r\"%s / {%s}\" % (snumer, sdenom)\n             elif len(snumer.split()) > ratio*ldenom:\n                 # handle long fractions\n                 if self._needs_mul_brackets(numer, last=True):\n-                    tex += r\"\\frac{1}{%s}%s\\left(%s\\right)\" \\\n-                        % (sdenom, separator, snumer)\n+                    tex += r\"\\frac{\\left(%s\\right)}{%s}\" % (snumer, sdenom)\n                 elif numer.is_Mul:\n                     # split a long numerator\n                     a = S.One\n@@ -423,13 +422,13 @@ class LatexPrinter(Printer):\n                         else:\n                             a *= x\n                     if self._needs_mul_brackets(b, last=True):\n-                        tex += r\"\\frac{%s}{%s}%s\\left(%s\\right)\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n+                        tex += r\"\\frac{%s}{%s}\\left(%s\\right)\" \\\n+                            % (convert(a), sdenom, convert(b))\n                     else:\n                         tex += r\"\\frac{%s}{%s}%s%s\" \\\n                             % (convert(a), sdenom, separator, convert(b))\n                 else:\n-                    tex += r\"\\frac{1}{%s}%s%s\" % (sdenom, separator, snumer)\n+                    tex += r\"\\frac{%s}{%s}%s%s\" % (sdenom, separator, snumer)\n             else:\n                 tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..22c3b54 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -197,13 +197,13 @@ class LatexPrinter(Printer):\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n+                if self._needs_mul_brackets(expr, last=False):\n+                    tex += '\\\\left(%s\\\\right) / {%s}' % (snumer, sdenom)\n                 else:\n-                    tex += '%s / %s' % (snumer, sdenom)\n+                    tex += '%s / {%s}' % (snumer, sdenom)\n             elif len(snumer.split()) > ratio * ldenom:\n                 if self._needs_mul_brackets(numer, last=True):\n-                    tex += '\\\\frac{1}{%s}%s\\\\left(%s\\\\right)' % (sdenom, separator, snumer)\n+                    tex += '\\\\frac{\\\\left(%s\\\\right)}{%s}' % (snumer, sdenom)\n                 elif numer.is_Mul:\n                     a = S.One\n                     b = S.One\n@@ -213,11 +213,11 @@ class LatexPrinter(Printer):\n                         else:\n                             a *= x\n                     if self._needs_mul_brackets(b, last=True):\n-                        tex += '\\\\frac{%s}{%s}%s\\\\left(%s\\\\right)' % (convert(a), sdenom, separator, convert(b))\n+                        tex += '\\\\frac{%s}{%s}\\\\left(%s\\\\right)' % (convert(a), sdenom, convert(b))\n                     else:\n                         tex += '\\\\frac{%s}{%s}%s%s' % (convert(a), sdenom, separator, convert(b))\n                 else:\n-                    tex += '\\\\frac{1}{%s}%s%s' % (sdenom, separator, snumer)\n+                    tex += '\\\\frac{%s}{%s}%s%s' % (sdenom, separator, snumer)\n             else:\n                 tex += '\\\\frac{%s}{%s}' % (snumer, sdenom)\n         if include_parens:\n", "normalized_occurrence": 1}
