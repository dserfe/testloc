{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..49cf376 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -247,7 +247,7 @@ def pytest_runtest_setup(item: Item) -> None:\n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n+    if xfailed is None or xfailed is False:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n \n     if not item.config.option.runxfail:\n@@ -276,7 +276,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and xfailed and not isinstance(call.excinfo.value, xfail.Exception):\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n@@ -312,4 +312,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..fc35c0e 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -130,7 +130,7 @@ def pytest_runtest_setup(item: Item) -> None:\n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n+    if xfailed is None or xfailed is False:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n     if not item.config.option.runxfail:\n         if xfailed and (not xfailed.run):\n@@ -154,7 +154,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and xfailed and (not isinstance(call.excinfo.value, xfail.Exception)):\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n", "normalized_occurrence": 1}
