{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12184", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 1a3b6f6..95c6d4c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -155,11 +155,17 @@ class RegexPattern(CheckURLMixin):\n     def match(self, path):\n         match = self.regex.search(path)\n         if match:\n-            # If there are any named groups, use those as kwargs, ignoring\n-            # non-named groups. Otherwise, pass all non-named arguments as\n-            # positional arguments.\n-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n-            args = () if kwargs else match.groups()\n+            # If there are any named groups, use those as kwargs.\n+            # Otherwise, pass all non-named arguments as positional arguments.\n+            groupdict = match.groupdict()\n+            if groupdict:\n+                # Named groups are present, use kwargs\n+                kwargs = match.groupdict()\n+                args = ()\n+            else:\n+                # No named groups, use positional args\n+                kwargs = {}\n+                args = match.groups()\n             return path[match.end():], args, kwargs\n         return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex a06ca7c..d20c5bf 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -91,8 +91,13 @@ class RegexPattern(CheckURLMixin):\n     def match(self, path):\n         match = self.regex.search(path)\n         if match:\n-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}\n-            args = () if kwargs else match.groups()\n+            groupdict = match.groupdict()\n+            if groupdict:\n+                kwargs = match.groupdict()\n+                args = ()\n+            else:\n+                kwargs = {}\n+                args = match.groups()\n             return (path[match.end():], args, kwargs)\n         return None\n     def check(self):\n", "normalized_occurrence": 1}
