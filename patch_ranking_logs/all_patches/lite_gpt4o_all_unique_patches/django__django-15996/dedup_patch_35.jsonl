{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..e882586 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,26 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            name = self.value.name\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, name),\n+                {\"import %s\" % module},\n+            )\n+        except AttributeError:\n+            # Handle combination of Enum flags\n+            names = []\n+            remainder = self.value\n+            for member in enum_class:\n+                if member in self.value:\n+                    names.append(\"%s.%s.%s\" % (module, enum_class.__qualname__, member.name))\n+                    remainder -= member\n+            if remainder:\n+                raise ValueError(\"Cannot serialize Enum value with remaining flags: %r\" % remainder)\n+            return (\n+                \" | \".join(names),\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..dec16fd 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,19 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            name = self.value.name\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, name), {'import %s' % module})\n+        except AttributeError:\n+            names = []\n+            remainder = self.value\n+            for member in enum_class:\n+                if member in self.value:\n+                    names.append('%s.%s.%s' % (module, enum_class.__qualname__, member.name))\n+                    remainder -= member\n+            if remainder:\n+                raise ValueError('Cannot serialize Enum value with remaining flags: %r' % remainder)\n+            return (' | '.join(names), {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
