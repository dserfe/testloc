{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ff9064f..2c7c91d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -873,7 +873,13 @@ warn_explicit(\n             results.append(next_res)\n             sym = binop_map[op.__class__]\n             syms.append(ast.Str(sym))\n-            expl = \"{} {} {}\".format(left_expl, sym, next_expl)\n+            # Handle byte string comparisons specially\n+            if (isinstance(comp.left, ast.Bytes) or \n+                isinstance(next_operand, ast.Bytes)):\n+                expl = \"b'{}' {} b'{}'\".format(\n+                    left_expl.strip(\"b'\"), sym, next_expl.strip(\"b'\"))\n+            else:\n+                expl = \"{} {} {}\".format(left_expl, sym, next_expl)\n             expls.append(ast.Str(expl))\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n@@ -890,4 +896,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex c715f90..0dfba40 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -484,7 +484,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             results.append(next_res)\n             sym = binop_map[op.__class__]\n             syms.append(ast.Str(sym))\n-            expl = '{} {} {}'.format(left_expl, sym, next_expl)\n+            if isinstance(comp.left, ast.Bytes) or isinstance(next_operand, ast.Bytes):\n+                expl = \"b'{}' {} b'{}'\".format(left_expl.strip(\"b'\"), sym, next_expl.strip(\"b'\"))\n+            else:\n+                expl = '{} {} {}'.format(left_expl, sym, next_expl)\n             expls.append(ast.Str(expl))\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n", "normalized_occurrence": 1}
