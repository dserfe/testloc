{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..2d7d1db 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -966,9 +966,17 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        to_model_state = to_state.models[app_label, self.model_name_lower]\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+            # Handle unnamed index case by finding the matching index\n+            matching_indexes = [\n+                name for name, idx in to_model_state.indexes.items()\n+                if idx.fields == self.old_fields\n+            ]\n+            if not matching_indexes:\n+                # If no matching index found, it's a no-op\n+                return\n+            self.old_name = matching_indexes[0]\n \n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..54743a6 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -435,8 +435,12 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        to_model_state = to_state.models[app_label, self.model_name_lower]\n         if self.old_fields:\n-            return\n+            matching_indexes = [name for name, idx in to_model_state.indexes.items() if idx.fields == self.old_fields]\n+            if not matching_indexes:\n+                return\n+            self.old_name = matching_indexes[0]\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "normalized_occurrence": 1}
