{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..aa9ff3c 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -79,6 +79,17 @@ class MigrationAutodetector:\n                 # we have a field which also returns a name\n                 deconstructed = deconstructed[1:]\n             path, args, kwargs = deconstructed\n+            \n+            # Adjust path for nested classes\n+            if isinstance(obj, type) and issubclass(obj, models.Model):\n+                nested_classes = []\n+                cls = obj\n+                while cls.__module__ == obj.__module__:\n+                    nested_classes.insert(0, cls.__name__)\n+                    if cls.__qualname__.count(\".\") == 0:\n+                        break\n+                    cls = cls.__bases__[0]\n+                path = f\"{obj.__module__}.\" + '.'.join(nested_classes)\n             return (\n                 path,\n                 [self.deep_deconstruct(value) for value in args],\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..63e7f7b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -41,6 +41,15 @@ class MigrationAutodetector:\n             if isinstance(obj, models.Field):\n                 deconstructed = deconstructed[1:]\n             path, args, kwargs = deconstructed\n+            if isinstance(obj, type) and issubclass(obj, models.Model):\n+                nested_classes = []\n+                cls = obj\n+                while cls.__module__ == obj.__module__:\n+                    nested_classes.insert(0, cls.__name__)\n+                    if cls.__qualname__.count('.') == 0:\n+                        break\n+                    cls = cls.__bases__[0]\n+                path = f'{obj.__module__}.' + '.'.join(nested_classes)\n             return (path, [self.deep_deconstruct(value) for value in args], {key: self.deep_deconstruct(value) for key, value in kwargs.items()})\n         else:\n             return obj\n", "normalized_occurrence": 1}
