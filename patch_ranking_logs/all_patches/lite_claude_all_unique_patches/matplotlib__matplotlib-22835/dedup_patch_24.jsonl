{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 1878dd6..e2a93c6 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1903,13 +1903,28 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Return the approximate inverse of the normalization mapping.\n+\n+        Returns the middle value of the bin that a color index maps to.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            The color indices to convert to values.\n+\n+        Returns\n+        -------\n+        array-like\n+            The values approximated from the color indices.\n         \"\"\"\n-        raise ValueError(\"BoundaryNorm is not invertible\")\n+        value = np.asarray(value)\n+        # Find which regions the values fall into\n+        regions = value / ((self.Ncmap - 1) / (self._n_regions - 1))\n+        regions = regions.astype(int)\n+        # Clip to valid regions\n+        regions = np.clip(regions, 0, len(self.boundaries) - 2)\n+        # Return centers of regions\n+        return 0.5 * (self.boundaries[regions] + self.boundaries[regions + 1])\n \n \n class NoNorm(Normalize):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b4a7c6b..a25412e 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1631,13 +1631,25 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Return the approximate inverse of the normalization mapping.\n+\n+        Returns the middle value of the bin that a color index maps to.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            The color indices to convert to values.\n+\n+        Returns\n+        -------\n+        array-like\n+            The values approximated from the color indices.\n         \"\"\"\n-        raise ValueError('BoundaryNorm is not invertible')\n+        value = np.asarray(value)\n+        regions = value / ((self.Ncmap - 1) / (self._n_regions - 1))\n+        regions = regions.astype(int)\n+        regions = np.clip(regions, 0, len(self.boundaries) - 2)\n+        return 0.5 * (self.boundaries[regions] + self.boundaries[regions + 1])\n \n class NoNorm(Normalize):\n     \"\"\"\n", "normalized_occurrence": 1}
