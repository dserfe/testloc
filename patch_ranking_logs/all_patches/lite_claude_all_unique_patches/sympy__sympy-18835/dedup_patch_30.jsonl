{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..d8d0e5a 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2085,43 +2085,7 @@ def has_variety(seq):\n     return False\n \n \n-def uniq(seq, result=None):\n-    \"\"\"\n-    Yield unique elements from ``seq`` as an iterator. The second\n-    parameter ``result``  is used internally; it is not necessary to pass\n-    anything for this.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.utilities.iterables import uniq\n-    >>> dat = [1, 4, 1, 5, 4, 2, 1, 2]\n-    >>> type(uniq(dat)) in (list, tuple)\n-    False\n \n-    >>> list(uniq(dat))\n-    [1, 4, 5, 2]\n-    >>> list(uniq(x for x in dat))\n-    [1, 4, 5, 2]\n-    >>> list(uniq([[1], [2, 1], [1]]))\n-    [[1], [2, 1]]\n-    \"\"\"\n-    try:\n-        seen = set()\n-        result = result or []\n-        for i, s in enumerate(seq):\n-            if not (s in seen or seen.add(s)):\n-                yield s\n-    except TypeError:\n-        if s not in result:\n-            yield s\n-            result.append(s)\n-        if hasattr(seq, '__getitem__'):\n-            for s in uniq(seq[i + 1:], result):\n-                yield s\n-        else:\n-            for s in uniq(seq, result):\n-                yield s\n \n \n def generate_bell(n):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..9826e1b 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -729,23 +729,6 @@ def has_variety(seq):\n         elif s != sentinel:\n             return True\n     return False\n-def uniq(seq, result=None):\n-    try:\n-        seen = set()\n-        result = result or []\n-        for i, s in enumerate(seq):\n-            if not (s in seen or seen.add(s)):\n-                yield s\n-    except TypeError:\n-        if s not in result:\n-            yield s\n-            result.append(s)\n-        if hasattr(seq, '__getitem__'):\n-            for s in uniq(seq[i + 1:], result):\n-                yield s\n-        else:\n-            for s in uniq(seq, result):\n-                yield s\n def generate_bell(n):\n     n = as_int(n)\n     if n < 1:\n", "normalized_occurrence": 1}
