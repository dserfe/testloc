{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..d4ec487 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -498,7 +498,26 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # Create proper XOR behavior by using the formula:\n+        # A XOR B = (A AND NOT B) OR (NOT A AND B)\n+        left = query.query.clone()\n+        right = other.query.clone()\n+        not_left = query.query.clone()\n+        not_right = other.query.clone()\n+        \n+        # Negate the queries\n+        not_left.negated = not not_left.negated\n+        not_right.negated = not not_right.negated\n+        \n+        # Build (A AND NOT B)\n+        left.add_q(Q(~Q(pk__in=other.values(\"pk\"))))\n+        \n+        # Build (NOT A AND B)\n+        right.add_q(Q(~Q(pk__in=self.values(\"pk\"))))\n+        \n+        # Combine with OR\n+        combined.query = left\n+        combined.query.combine(right, sql.OR)\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..d4139fe 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,16 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        left = query.query.clone()\n+        right = other.query.clone()\n+        not_left = query.query.clone()\n+        not_right = other.query.clone()\n+        not_left.negated = not not_left.negated\n+        not_right.negated = not not_right.negated\n+        left.add_q(Q(~Q(pk__in=other.values('pk'))))\n+        right.add_q(Q(~Q(pk__in=self.values('pk'))))\n+        combined.query = left\n+        combined.query.combine(right, sql.OR)\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
