{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..91f63de 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        unconverged = True\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n@@ -225,10 +226,9 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n \n-    if return_n_iter:\n-        return cluster_centers_indices, labels, it + 1\n-    else:\n-        return cluster_centers_indices, labels\n+    if return_n_iter or unconverged:\n+        return [], np.array([-1] * n_samples), it + 1\n+    return cluster_centers_indices, labels\n \n \n ###############################################################################\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..ef861eb 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -71,6 +71,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print('Did not converge')\n+        unconverged = True\n     I = np.flatnonzero(E)\n     K = I.size\n     if K > 0:\n@@ -89,10 +90,9 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n-    if return_n_iter:\n-        return (cluster_centers_indices, labels, it + 1)\n-    else:\n-        return (cluster_centers_indices, labels)\n+    if return_n_iter or unconverged:\n+        return ([], np.array([-1] * n_samples), it + 1)\n+    return (cluster_centers_indices, labels)\n class AffinityPropagation(ClusterMixin, BaseEstimator):\n     def __init__(self, damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity='euclidean', verbose=False):\n         self.damping = damping\n", "normalized_occurrence": 1}
