{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..23e2a11 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -205,10 +205,20 @@ class GenericForeignKey(FieldCacheMixin):\n                 return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n                         model)\n \n+        def gfk_key_uuid(obj):\n+            ct_id = getattr(obj, ct_attname)\n+            if ct_id is None:\n+                return None\n+            else:\n+                model = self.get_content_type(id=ct_id,\n+                                              using=obj._state.db).model_class()\n+                pk_val = model._meta.pk.get_prep_value(getattr(obj, self.fk_field))\n+                return (pk_val, model)\n+\n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n-            gfk_key,\n+            lambda obj: (str(obj.pk), obj.__class__) if isinstance(obj.pk, uuid.UUID) else (obj.pk, obj.__class__),\n+            gfk_key_uuid,\n             True,\n             self.name,\n             True,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..14d2f2e 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -101,7 +101,15 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n                 return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n-        return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n+        def gfk_key_uuid(obj):\n+            ct_id = getattr(obj, ct_attname)\n+            if ct_id is None:\n+                return None\n+            else:\n+                model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n+                pk_val = model._meta.pk.get_prep_value(getattr(obj, self.fk_field))\n+                return (pk_val, model)\n+        return (ret_val, lambda obj: (str(obj.pk), obj.__class__) if isinstance(obj.pk, uuid.UUID) else (obj.pk, obj.__class__), gfk_key_uuid, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n", "normalized_occurrence": 1}
