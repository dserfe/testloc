{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..a64d490 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,13 +862,17 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n+                # Only include transformers that produced output (have columns)\n+                names_and_features = []\n+                for t in self._iter(fitted=True, replace_strings=True):\n+                    transformer_idx = next(\n+                        (idx for idx, X in enumerate(Xs) if X.shape[1] == len(t[2])),\n+                        None,\n+                    )\n+                    if transformer_idx is not None:\n+                        names_and_features.append((t[0], Xs[transformer_idx].columns))\n+                \n+                names_out = self._add_prefix_for_feature_names_out(names_and_features)\n                 output.columns = names_out\n                 return output\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..b1963c9 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,9 +257,12 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                names_and_features = []\n+                for t in self._iter(fitted=True, replace_strings=True):\n+                    transformer_idx = next((idx for idx, X in enumerate(Xs) if X.shape[1] == len(t[2])), None)\n+                    if transformer_idx is not None:\n+                        names_and_features.append((t[0], Xs[transformer_idx].columns))\n+                names_out = self._add_prefix_for_feature_names_out(names_and_features)\n                 output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n", "normalized_occurrence": 1}
