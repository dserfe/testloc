{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..8676e91 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -118,16 +118,22 @@ def apart(f, x=None, full=False, **options):\n             return f.xreplace(dict(reps))\n \n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-\n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n+        if P.has(x):\n+            # Only cancel with respect to the main variable\n+            fc = f.cancel(x)\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+        else:\n+            raise NotImplementedError(\n+                \"multivariate partial fraction decomposition\")\n \n     common, P, Q = P.cancel(Q)\n \n-    poly, P = P.div(Q, auto=True)\n+    # Only perform polynomial division if there are no free symbols besides x\n+    if len(P.free_symbols - {x}) == 0 and len(Q.free_symbols - {x}) == 0:\n+        poly, P = P.div(Q, auto=True)\n+    else:\n+        poly = P.zero\n     P, Q = P.rat_clear_denoms(Q)\n \n     if Q.degree() <= 1:\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..c3bee92 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -55,12 +55,17 @@ def apart(f, x=None, full=False, **options):\n                     pass\n             return f.xreplace(dict(reps))\n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n+        if P.has(x):\n+            fc = f.cancel(x)\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+        else:\n+            raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n-    poly, P = P.div(Q, auto=True)\n+    if len(P.free_symbols - {x}) == 0 and len(Q.free_symbols - {x}) == 0:\n+        poly, P = P.div(Q, auto=True)\n+    else:\n+        poly = P.zero\n     P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n         partial = P / Q\n", "normalized_occurrence": 2}
