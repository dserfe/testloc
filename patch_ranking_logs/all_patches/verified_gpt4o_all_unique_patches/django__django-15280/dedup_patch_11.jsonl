{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..593bf4a 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -166,32 +166,39 @@ class ForwardManyToOneDescriptor:\n         if instance is None:\n             return self\n \n-        # The related instance is loaded from the database and then cached\n-        # by the field on the model instance state. It can also be pre-cached\n-        # by the reverse accessor (ReverseOneToOneDescriptor).\n+        # Temporarily store current deferred fields\n+        original_deferred_fields = instance.get_deferred_fields()\n+\n         try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n-            has_value = None not in self.field.get_local_related_value(instance)\n-            ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n-            if ancestor_link and ancestor_link.is_cached(instance):\n-                # An ancestor link will exist if this field is defined on a\n-                # multi-table inheritance parent of the instance's class.\n-                ancestor = ancestor_link.get_cached_value(instance)\n-                # The value might be cached on an ancestor if the instance\n-                # originated from walking down the inheritance chain.\n-                rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n-            if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                # If this is a one-to-one relation, set the reverse accessor\n-                # cache on the related object to the current instance to avoid\n-                # an extra SQL query if it's accessed later on.\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n+            # The related instance is loaded from the database and then cached\n+            # by the field on the model instance state. It can also be pre-cached\n+            # by the reverse accessor (ReverseOneToOneDescriptor).\n+            try:\n+                rel_obj = self.field.get_cached_value(instance)\n+            except KeyError:\n+                has_value = None not in self.field.get_local_related_value(instance)\n+                ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n+                if ancestor_link and ancestor_link.is_cached(instance):\n+                    # An ancestor link will exist if this field is defined on a\n+                    # multi-table inheritance parent of the instance's class.\n+                    ancestor = ancestor_link.get_cached_value(instance)\n+                    # The value might be cached on an ancestor if the instance\n+                    # originated from walking down the inheritance chain.\n+                    rel_obj = self.field.get_cached_value(ancestor, default=None)\n+                else:\n+                    rel_obj = None\n+                if rel_obj is None and has_value:\n+                    rel_obj = self.get_object(instance)\n+                    remote_field = self.field.remote_field\n+                    # If this is a one-to-one relation, set the reverse accessor\n+                    # cache on the related object to the current instance to avoid\n+                    # an extra SQL query if it's accessed later on.\n+                    if not remote_field.multiple:\n+                        remote_field.set_cached_value(rel_obj, instance)\n+                self.field.set_cached_value(instance, rel_obj)\n+        finally:\n+            # Restore deferred fields after processing\n+            instance._deferred_fields = original_deferred_fields\n \n         if rel_obj is None and not self.field.null:\n             raise self.RelatedObjectDoesNotExist(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..3904dd5 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -45,22 +45,26 @@ class ForwardManyToOneDescriptor:\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n+        original_deferred_fields = instance.get_deferred_fields()\n         try:\n-            rel_obj = self.field.get_cached_value(instance)\n-        except KeyError:\n-            has_value = None not in self.field.get_local_related_value(instance)\n-            ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n-            if ancestor_link and ancestor_link.is_cached(instance):\n-                ancestor = ancestor_link.get_cached_value(instance)\n-                rel_obj = self.field.get_cached_value(ancestor, default=None)\n-            else:\n-                rel_obj = None\n-            if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n+            try:\n+                rel_obj = self.field.get_cached_value(instance)\n+            except KeyError:\n+                has_value = None not in self.field.get_local_related_value(instance)\n+                ancestor_link = instance._meta.get_ancestor_link(self.field.model) if has_value else None\n+                if ancestor_link and ancestor_link.is_cached(instance):\n+                    ancestor = ancestor_link.get_cached_value(instance)\n+                    rel_obj = self.field.get_cached_value(ancestor, default=None)\n+                else:\n+                    rel_obj = None\n+                if rel_obj is None and has_value:\n+                    rel_obj = self.get_object(instance)\n+                    remote_field = self.field.remote_field\n+                    if not remote_field.multiple:\n+                        remote_field.set_cached_value(rel_obj, instance)\n+                self.field.set_cached_value(instance, rel_obj)\n+        finally:\n+            instance._deferred_fields = original_deferred_fields\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n         else:\n", "normalized_occurrence": 1}
