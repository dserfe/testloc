{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..f773817 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,17 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+def inherited_members_option(arg: Any) -> Union[str, Set[str]]:\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\n+    \n+    Accepts either a boolean value or a comma-separated list of base class names to ignore.\n+    \"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return set()\n     else:\n-        return arg\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..3c321c9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -55,11 +55,13 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return EMPTY\n     return {x.strip() for x in arg.split(',') if x.strip()}\n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[str, Set[str]]:\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return set()\n     else:\n-        return arg\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n", "normalized_occurrence": 1}
