{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..52337ac 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -32,10 +32,61 @@ if False:\n     from sphinx.environment import BuildEnvironment\n \n \n+def _create_kbd_node(text):\n+    \"\"\"Create a kbd node with proper handling of compound keys.\"\"\"\n+    node = nodes.literal(text, text)\n+    node['classes'].append('kbd')\n+    \n+    # Single character case - don't split\n+    if len(text) == 1:\n+        return node\n+        \n+    # Look for compound key combinations\n+    parts = []\n+    current = \"\"\n+    i = 0\n+    while i < len(text):\n+        if i + 1 < len(text) and text[i:i+2] in ('-', '+', '^'):\n+            if current:\n+                parts.append(current)\n+            parts.append(text[i:i+2])\n+            current = \"\"\n+            i += 2\n+        else:\n+            current += text[i]\n+            i += 1\n+    if current:\n+        parts.append(current)\n+    \n+    # If no valid separators found, return as single node\n+    if len(parts) == 1:\n+        return node\n+        \n+    # Create compound kbd node\n+    compound_node = nodes.literal('', '')\n+    compound_node['classes'].append('kbd')\n+    \n+    for i, part in enumerate(parts):\n+        if part in ('-', '+', '^'):\n+            # Add separator text node\n+            compound_node += nodes.Text(part)\n+        else:\n+            # Add kbd node for key\n+            key_node = nodes.literal(part, part)\n+            key_node['classes'].append('kbd')\n+            compound_node += key_node\n+            \n+    return compound_node\n+\n+def kbd_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n+    \"\"\"Process kbd role with proper compound key handling.\"\"\"\n+    node = _create_kbd_node(text)\n+    return [node], []\n+\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': kbd_role,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+def _create_kbd_node(text):\n+    node = nodes.literal(text, text)\n+    node['classes'].append('kbd')\n+    if len(text) == 1:\n+        return node\n+    parts = []\n+    current = ''\n+    i = 0\n+    while i < len(text):\n+        if i + 1 < len(text) and text[i:i + 2] in ('-', '+', '^'):\n+            if current:\n+                parts.append(current)\n+            parts.append(text[i:i + 2])\n+            current = ''\n+            i += 2\n+        else:\n+            current += text[i]\n+            i += 1\n+    if current:\n+        parts.append(current)\n+    if len(parts) == 1:\n+        return node\n+    compound_node = nodes.literal('', '')\n+    compound_node['classes'].append('kbd')\n+    for i, part in enumerate(parts):\n+        if part in ('-', '+', '^'):\n+            compound_node += nodes.Text(part)\n+        else:\n+            key_node = nodes.literal(part, part)\n+            key_node['classes'].append('kbd')\n+            compound_node += key_node\n+    return compound_node\n+def kbd_role(typ, rawtext, text, lineno, inliner, options={}, content=[]):\n+    node = _create_kbd_node(text)\n+    return ([node], [])\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': kbd_role, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}", "normalized_occurrence": 1}
