{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..a5ec5a4 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -810,7 +810,19 @@ class Piecewise(Function):\n         # somewhat more efficient by avoiding other substitutions\n         # and avoiding invalid conditions that appear after a\n         # True condition\n-        args = list(self.args)\n+        from sympy import simplify\n+\n+        args = [(simplify(e._subs(old, new)), simplify(c._subs(old, new))) for e, c in self.args]\n+\n+        args_exist = False\n+        for i, (e, c) in enumerate(args):\n+            if c != False:\n+                args_exist = True\n+            args[i] = (e, c)\n+            if c == True:\n+                break\n+        if not args_exist:\n+            args = ((Undefined, True),)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..938ebee 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,7 +441,17 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n-        args = list(self.args)\n+        from sympy import simplify\n+        args = [(simplify(e._subs(old, new)), simplify(c._subs(old, new))) for e, c in self.args]\n+        args_exist = False\n+        for i, (e, c) in enumerate(args):\n+            if c != False:\n+                args_exist = True\n+            args[i] = (e, c)\n+            if c == True:\n+                break\n+        if not args_exist:\n+            args = ((Undefined, True),)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "normalized_occurrence": 1}
