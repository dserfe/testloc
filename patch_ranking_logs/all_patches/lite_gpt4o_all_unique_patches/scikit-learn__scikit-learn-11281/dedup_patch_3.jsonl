{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..16d74dc 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -720,6 +720,30 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n+    @property\n+    def labels_(self):\n+        \"\"\"Labels of each point\"\"\"\n+        self._check_is_fitted()\n+        return self.predict(self._X_fit)\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and predict the closest cluster each sample in X belongs to.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            Training instances to cluster.\n+        y : Ignored\n+            not used, present for API consistency by convention.\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Index of the cluster each sample belongs to.\n+        \"\"\"\n+        self.fit(X, y)\n+        return self.labels_\n+\n     def bic(self, X):\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n@@ -747,4 +771,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n+    @property\n+    def labels_(self):\n+        self._check_is_fitted()\n+        return self.predict(self._X_fit)\n+    def fit_predict(self, X, y=None):\n+        self.fit(X, y)\n+        return self.labels_", "normalized_occurrence": 1}
