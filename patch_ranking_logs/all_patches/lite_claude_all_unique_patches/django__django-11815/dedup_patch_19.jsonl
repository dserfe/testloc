{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..d59e77c 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -115,6 +115,8 @@ class OperationWriter:\n         return '\\n'.join(self.buff)\n \n \n+from enum import Enum\n+\n class MigrationWriter:\n     \"\"\"\n     Take a Migration instance and is able to produce the contents\n@@ -268,6 +270,15 @@ class MigrationWriter:\n \n     @classmethod\n     def serialize(cls, value):\n+        # Special handling for Enum values\n+        if value is not None and isinstance(value, Enum):\n+            # Use Enum member name instead of value for serialization\n+            return \"%s['%s']\" % (value.__class__.__name__, value.name), {\n+                \"from %s import %s\" % (\n+                    value.__class__.__module__,\n+                    value.__class__.__name__,\n+                )\n+            }\n         return serializer_factory(value).serialize()\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex acf3688..e7c82b3 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -91,6 +91,7 @@ class OperationWriter:\n         self.buff.append(' ' * (self.indentation * 4) + line)\n     def render(self):\n         return '\\n'.join(self.buff)\n+from enum import Enum\n class MigrationWriter:\n     def __init__(self, migration, include_header=True):\n         self.migration = migration\n@@ -186,6 +187,8 @@ class MigrationWriter:\n         return os.path.join(self.basedir, self.filename)\n     @classmethod\n     def serialize(cls, value):\n+        if value is not None and isinstance(value, Enum):\n+            return (\"%s['%s']\" % (value.__class__.__name__, value.name), {'from %s import %s' % (value.__class__.__module__, value.__class__.__name__)})\n         return serializer_factory(value).serialize()\n     @classmethod\n     def register_serializer(cls, type_, serializer):\n", "normalized_occurrence": 1}
