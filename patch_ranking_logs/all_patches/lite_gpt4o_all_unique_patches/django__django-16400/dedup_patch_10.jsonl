{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 05a8e83..041291b 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -110,7 +110,7 @@ class MigrationExecutor:\n             plan = self.migration_plan(targets)\n         # Create the forwards plan Django would follow on an empty database\n         full_plan = self.migration_plan(\n-            self.loader.graph.leaf_nodes(), clean_start=True\n+            self.loader.graph.leaf_nodes(), clean_start=True, database=database\n         )\n \n         all_forwards = all(not backwards for mig, backwards in plan)\n@@ -133,12 +133,12 @@ class MigrationExecutor:\n                 # The resulting state should still include applied migrations.\n                 state = self._create_project_state(with_applied_migrations=True)\n             state = self._migrate_all_forwards(\n-                state, plan, full_plan, fake=fake, fake_initial=fake_initial\n+                state, plan, full_plan, fake=fake, fake_initial=fake_initial, database=database\n             )\n         else:\n             # No need to check for `elif all_backwards` here, as that condition\n             # would always evaluate to true.\n-            state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n+            state = self._migrate_all_backwards(plan, full_plan, fake=fake, database=database)\n \n         self.check_replacements()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 800f25e..a20488a 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -58,7 +58,7 @@ class MigrationExecutor:\n             self.recorder.ensure_schema()\n         if plan is None:\n             plan = self.migration_plan(targets)\n-        full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True)\n+        full_plan = self.migration_plan(self.loader.graph.leaf_nodes(), clean_start=True, database=database)\n         all_forwards = all((not backwards for mig, backwards in plan))\n         all_backwards = all((backwards for mig, backwards in plan))\n         if not plan:\n@@ -69,9 +69,9 @@ class MigrationExecutor:\n         elif all_forwards:\n             if state is None:\n                 state = self._create_project_state(with_applied_migrations=True)\n-            state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n+            state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial, database=database)\n         else:\n-            state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n+            state = self._migrate_all_backwards(plan, full_plan, fake=fake, database=database)\n         self.check_replacements()\n         return state\n     def _migrate_all_forwards(self, state, plan, full_plan, fake, fake_initial):\n", "normalized_occurrence": 1}
