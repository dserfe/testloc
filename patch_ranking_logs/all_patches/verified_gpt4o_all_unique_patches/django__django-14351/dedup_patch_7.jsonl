{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..37ccf27 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -468,18 +468,14 @@ class Query(BaseExpression):\n \n             relabels = {t: 'subquery' for t in inner_query.alias_map}\n             relabels[None] = 'subquery'\n-            # Remove any aggregates marked for reduction from the subquery\n-            # and move them to the outer AggregateQuery.\n+            # Remove any aggregates marked for reduction from the subquery and move them to the outer AggregateQuery.\n             col_cnt = 0\n             for alias, expression in list(inner_query.annotation_select.items()):\n-                annotation_select_mask = inner_query.annotation_select_mask\n                 if expression.is_summary:\n                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n-                    annotation_select_mask.remove(alias)\n-                # Make sure the annotation_select wont use cached results.\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n                 # In case of Model.objects[0:3].count(), there would be no\n                 # field selected in the inner query, yet we must use a subquery.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..0031866 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -263,13 +263,11 @@ class Query(BaseExpression):\n             relabels[None] = 'subquery'\n             col_cnt = 0\n             for alias, expression in list(inner_query.annotation_select.items()):\n-                annotation_select_mask = inner_query.annotation_select_mask\n                 if expression.is_summary:\n                     expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n                     outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n                     del inner_query.annotations[alias]\n-                    annotation_select_mask.remove(alias)\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n             if inner_query.select == () and (not inner_query.default_cols) and (not inner_query.annotation_select_mask):\n                 inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n         else:\n", "normalized_occurrence": 1}
