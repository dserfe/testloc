{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..54eb06c 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,26 +162,42 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n+            def process_traceback(tb):\n+                traceback_dict = tb.__dict__.copy()\n+                crash_dict = tb.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in traceback_dict[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                traceback_dict[\"reprentries\"] = new_entries\n+                return traceback_dict, crash_dict\n+\n+            reprtraceback, reprcrash = process_traceback(rep.longrepr.reprtraceback)\n+            \n+            # Handle chained exceptions\n+            chain = []\n+            if hasattr(rep.longrepr, \"chain\"):\n+                for exc_repr in rep.longrepr.chain:\n+                    tb_dict, crash_dict = process_traceback(exc_repr[0])\n+                    chain.append({\n+                        \"reprtraceback\": tb_dict,\n+                        \"reprcrash\": crash_dict,\n+                        \"header\": exc_repr[1]\n+                    })\n \n             return {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n+                \"chain\": chain\n             }\n \n         d = self.__dict__.copy()\n@@ -220,8 +236,9 @@ class BaseReport:\n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n \n-                unserialized_entries = []\n-                reprentry = None\n+                def unserialize_traceback(traceback_dict, crash_dict):\n+                    unserialized_entries = []\n+                    reprentry = None\n                 for entry_data in reprtraceback[\"reprentries\"]:\n                     data = entry_data[\"data\"]\n                     entry_type = entry_data[\"type\"]\n@@ -248,13 +265,25 @@ class BaseReport:\n                     else:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n-                reprtraceback[\"reprentries\"] = unserialized_entries\n+                    return unserialized_entries\n \n+                reprtraceback[\"reprentries\"] = unserialize_traceback(reprtraceback, reprcrash)\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n \n+                # Handle chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    for exc_data in reportdict[\"longrepr\"][\"chain\"]:\n+                        tb_dict = exc_data[\"reprtraceback\"]\n+                        tb_dict[\"reprentries\"] = unserialize_traceback(tb_dict, exc_data[\"reprcrash\"])\n+                        chained_exc = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**tb_dict),\n+                            reprcrash=ReprFileLocation(**exc_data[\"reprcrash\"]),\n+                        )\n+                        exception_info.chain.append((chained_exc, exc_data[\"header\"]))\n+\n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..50a5089 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,25 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def process_traceback(tb):\n+                traceback_dict = tb.__dict__.copy()\n+                crash_dict = tb.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in traceback_dict['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                traceback_dict['reprentries'] = new_entries\n+                return (traceback_dict, crash_dict)\n+            reprtraceback, reprcrash = process_traceback(rep.longrepr.reprtraceback)\n+            chain = []\n+            if hasattr(rep.longrepr, 'chain'):\n+                for exc_repr in rep.longrepr.chain:\n+                    tb_dict, crash_dict = process_traceback(exc_repr[0])\n+                    chain.append({'reprtraceback': tb_dict, 'reprcrash': crash_dict, 'header': exc_repr[1]})\n+            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, 'chain': chain}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -108,8 +116,9 @@ class BaseReport:\n             if 'reprcrash' in reportdict['longrepr'] and 'reprtraceback' in reportdict['longrepr']:\n                 reprtraceback = reportdict['longrepr']['reprtraceback']\n                 reprcrash = reportdict['longrepr']['reprcrash']\n-                unserialized_entries = []\n-                reprentry = None\n+                def unserialize_traceback(traceback_dict, crash_dict):\n+                    unserialized_entries = []\n+                    reprentry = None\n                 for entry_data in reprtraceback['reprentries']:\n                     data = entry_data['data']\n                     entry_type = entry_data['type']\n@@ -129,8 +138,15 @@ class BaseReport:\n                     else:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n-                reprtraceback['reprentries'] = unserialized_entries\n+                    return unserialized_entries\n+                reprtraceback['reprentries'] = unserialize_traceback(reprtraceback, reprcrash)\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                if 'chain' in reportdict['longrepr']:\n+                    for exc_data in reportdict['longrepr']['chain']:\n+                        tb_dict = exc_data['reprtraceback']\n+                        tb_dict['reprentries'] = unserialize_traceback(tb_dict, exc_data['reprcrash'])\n+                        chained_exc = ReprExceptionInfo(reprtraceback=ReprTraceback(**tb_dict), reprcrash=ReprFileLocation(**exc_data['reprcrash']))\n+                        exception_info.chain.append((chained_exc, exc_data['header']))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 1}
