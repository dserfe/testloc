{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 67e1797..8da36be 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -219,7 +219,10 @@ class MatrixExpr(Expr):\n             # See if there are other methods using it:\n             return super()._eval_derivative(x)\n         else:\n-            return ZeroMatrix(*self.shape)\n+            from sympy.matrices.expressions.special import ZeroMatrix\n+            ret = ZeroMatrix(*self.shape)\n+            ret.kind = MatrixKind(NumberKind)\n+            return ret\n \n     @classmethod\n     def _check_dim(cls, dim):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 675bb56..5dd2fe5 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -144,7 +144,10 @@ class MatrixExpr(Expr):\n         if self.has(x):\n             return super()._eval_derivative(x)\n         else:\n-            return ZeroMatrix(*self.shape)\n+            from sympy.matrices.expressions.special import ZeroMatrix\n+            ret = ZeroMatrix(*self.shape)\n+            ret.kind = MatrixKind(NumberKind)\n+            return ret\n     @classmethod\n     def _check_dim(cls, dim):\n         from sympy.core.assumptions import check_assumptions\n", "normalized_occurrence": 1}
