{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..43b6edd 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -167,6 +167,16 @@ class Field(RegisterLookupMixin):\n             self.creation_counter = Field.auto_creation_counter\n             Field.auto_creation_counter -= 1\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             self.creation_counter = Field.creation_counter\n             Field.creation_counter += 1\n \n@@ -239,6 +249,16 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             return []\n \n     def _check_choices(self):\n@@ -280,6 +300,16 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             return []\n \n         return [\n@@ -301,6 +331,16 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             return []\n \n     def _check_null_allowed_for_primary_keys(self):\n@@ -319,6 +359,16 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             return []\n \n     def _check_backend_specific_checks(self, **kwargs):\n@@ -382,6 +432,16 @@ class Field(RegisterLookupMixin):\n             from django.db.models.expressions import Col\n             return Col(alias, self, output_field)\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n             return self.cached_col\n \n     @cached_property\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..33d025a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -85,6 +85,10 @@ class Field(RegisterLookupMixin):\n             self.creation_counter = Field.auto_creation_counter\n             Field.auto_creation_counter -= 1\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             self.creation_counter = Field.creation_counter\n             Field.creation_counter += 1\n         self._validators = list(validators)\n@@ -116,6 +120,10 @@ class Field(RegisterLookupMixin):\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             return []\n     def _check_choices(self):\n         if not self.choices:\n@@ -139,17 +147,29 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             return []\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [checks.Error(\"'db_index' must be None, True or False.\", obj=self, id='fields.E006')]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             return []\n     def _check_null_allowed_for_primary_keys(self):\n         if self.primary_key and self.null and (not connection.features.interprets_empty_strings_as_nulls):\n             return [checks.Error('Primary keys must not have null=True.', hint='Set null=False on the field, or remove primary_key=True argument.', obj=self, id='fields.E007')]\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             return []\n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n@@ -176,6 +196,10 @@ class Field(RegisterLookupMixin):\n             from django.db.models.expressions import Col\n             return Col(alias, self, output_field)\n         else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E009')]\n             return self.cached_col\n     @cached_property\n     def cached_col(self):\n", "normalized_occurrence": 1}
