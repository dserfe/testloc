{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..f5088cf 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -174,12 +174,7 @@ class MatrixDeterminant(MatrixCommon):\n         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\n         \"\"\"\n \n-        # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\n-        def _find_pivot(l):\n-            for pos,val in enumerate(l):\n-                if val:\n-                    return (pos, val, None, None)\n-            return (None, None, None, None)\n+        from sympy.matrices.dense import _find_reasonable_pivot\n \n \n         # Recursively implemented Bareiss' algorithm as per Deanna Richelle Leggett's\n@@ -191,8 +186,7 @@ class MatrixDeterminant(MatrixCommon):\n                 return mat[0, 0]\n \n             # find a pivot and extract the remaining matrix\n-            # XXX should use `_find_reasonable_pivot`.  Blocked by issue #12362\n-            pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\n+            pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0])\n             if pivot_pos == None:\n                 return S.Zero\n \n@@ -208,7 +202,7 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..a7bda85 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -63,17 +63,13 @@ class MatrixDeterminant(MatrixCommon):\n         submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()\n         return toeplitz * submat._eval_berkowitz_vector()\n     def _eval_det_bareiss(self):\n-        def _find_pivot(l):\n-            for pos, val in enumerate(l):\n-                if val:\n-                    return (pos, val, None, None)\n-            return (None, None, None, None)\n+        from sympy.matrices.dense import _find_reasonable_pivot\n         def bareiss(mat, cumm=1):\n             if mat.rows == 0:\n                 return S.One\n             elif mat.rows == 1:\n                 return mat[0, 0]\n-            pivot_pos, pivot_val, _, _ = _find_pivot(mat[:, 0])\n+            pivot_pos, pivot_val, _, _ = _find_reasonable_pivot(mat[:, 0])\n             if pivot_pos == None:\n                 return S.Zero\n             sign = (-1) ** (pivot_pos % 2)\n@@ -83,7 +79,7 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n             return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n         return cancel(bareiss(self))\n", "normalized_occurrence": 1}
