{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..989644c 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,29 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = poly.terms()  # Gets terms in order\n+        expr_terms = []\n+        for monom, coeff in terms:\n+            if len(monom) == 1:\n+                # Handle univariate case\n+                if coeff == 1 and monom[0] != 0:\n+                    term = self._print(poly.gens[0]**monom[0])\n+                else:\n+                    term = self._print(coeff)\n+                    if monom[0] > 0:\n+                        term = term + \" \" + self._print(poly.gens[0]**monom[0])\n+            else:\n+                # Handle multivariate case\n+                factors = []\n+                if coeff != 1 or all(m == 0 for m in monom):\n+                    factors.append(self._print(coeff))\n+                for i, exp in enumerate(monom):\n+                    if exp > 0:\n+                        factors.append(self._print(poly.gens[i]**exp))\n+                term = \" \".join(factors)\n+            expr_terms.append(term)\n+\n+        expr = \" + \".join(expr_terms) if expr_terms else \"0\"\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..68cc096 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,26 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = poly.terms()\n+        expr_terms = []\n+        for monom, coeff in terms:\n+            if len(monom) == 1:\n+                if coeff == 1 and monom[0] != 0:\n+                    term = self._print(poly.gens[0] ** monom[0])\n+                else:\n+                    term = self._print(coeff)\n+                    if monom[0] > 0:\n+                        term = term + ' ' + self._print(poly.gens[0] ** monom[0])\n+            else:\n+                factors = []\n+                if coeff != 1 or all((m == 0 for m in monom)):\n+                    factors.append(self._print(coeff))\n+                for i, exp in enumerate(monom):\n+                    if exp > 0:\n+                        factors.append(self._print(poly.gens[i] ** exp))\n+                term = ' '.join(factors)\n+            expr_terms.append(term)\n+        expr = ' + '.join(expr_terms) if expr_terms else '0'\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n", "normalized_occurrence": 1}
