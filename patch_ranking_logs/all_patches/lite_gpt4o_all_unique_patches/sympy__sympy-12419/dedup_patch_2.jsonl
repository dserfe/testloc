{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 9239abf..f838b4f 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from __future__ import print_function, division\n \n from sympy.core import S, Add, Expr, Basic\n@@ -34,15 +35,19 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n-    handler = handlers_dict.get(name, None)\n-    if handler is None:\n-        return expr\n-    new_expr = handler(expr, assumptions)\n-    if (new_expr is None) or (expr == new_expr):\n-        return expr\n-    if not isinstance(new_expr, Expr):\n-        return new_expr\n-    return refine(new_expr, assumptions)\n+    if isinstance(expr, MatrixExpr):\n+        return expr._eval_refine(assumptions)\n+\n+    else:\n+        handler = handlers_dict.get(name, None)\n+        if handler is None:\n+            return expr\n+        new_expr = handler(expr, assumptions)\n+        if (new_expr is None) or (expr == new_expr):\n+            return expr\n+        if not isinstance(new_expr, Expr):\n+            return new_expr\n+        return refine(new_expr, assumptions)\n \n \n def refine_abs(expr, assumptions):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex fd84337..1da3d14 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -12,15 +12,18 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n-    handler = handlers_dict.get(name, None)\n-    if handler is None:\n-        return expr\n-    new_expr = handler(expr, assumptions)\n-    if new_expr is None or expr == new_expr:\n-        return expr\n-    if not isinstance(new_expr, Expr):\n-        return new_expr\n-    return refine(new_expr, assumptions)\n+    if isinstance(expr, MatrixExpr):\n+        return expr._eval_refine(assumptions)\n+    else:\n+        handler = handlers_dict.get(name, None)\n+        if handler is None:\n+            return expr\n+        new_expr = handler(expr, assumptions)\n+        if new_expr is None or expr == new_expr:\n+            return expr\n+        if not isinstance(new_expr, Expr):\n+            return new_expr\n+        return refine(new_expr, assumptions)\n def refine_abs(expr, assumptions):\n     from sympy.core.logic import fuzzy_not\n     arg = expr.args[0]\n", "normalized_occurrence": 1}
