{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..bdcb113 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -131,7 +131,22 @@ class XRefRole(ReferenceRole):\n             return self.create_xref_node()\n \n     def create_non_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n-        text = utils.unescape(self.text[1:])\n+        if self.target == 'kbd':\n+            text = utils.unescape(self.text)\n+            # If text is a single keystroke, handle it directly\n+            if text in ['-', '+', '^']:\n+                node = self.innernodeclass(self.rawtext, text, classes=self.classes)\n+            else:\n+                # Handle compound keystrokes\n+                keys = re.split(r'(?<!\\\\)[-+^]', text)\n+                node = nodes.inline(classes=self.classes)\n+                for key in keys:\n+                    if key:\n+                        node += self.innernodeclass(self.rawtext, key, classes=self.classes)\n+                        if key != keys[-1]:\n+                            node += nodes.Text('-')\n+        else:\n+            text = utils.unescape(self.text[1:])\n         if self.fix_parens:\n             self.has_explicit_title = False  # treat as implicit\n             text, target = self.update_title_and_target(text, \"\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex ef483a8..e5bb518 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -59,7 +59,20 @@ class XRefRole(ReferenceRole):\n         else:\n             return self.create_xref_node()\n     def create_non_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n-        text = utils.unescape(self.text[1:])\n+        if self.target == 'kbd':\n+            text = utils.unescape(self.text)\n+            if text in ['-', '+', '^']:\n+                node = self.innernodeclass(self.rawtext, text, classes=self.classes)\n+            else:\n+                keys = re.split('(?<!\\\\\\\\)[-+^]', text)\n+                node = nodes.inline(classes=self.classes)\n+                for key in keys:\n+                    if key:\n+                        node += self.innernodeclass(self.rawtext, key, classes=self.classes)\n+                        if key != keys[-1]:\n+                            node += nodes.Text('-')\n+        else:\n+            text = utils.unescape(self.text[1:])\n         if self.fix_parens:\n             self.has_explicit_title = False\n             text, target = self.update_title_and_target(text, '')\n", "normalized_occurrence": 1}
