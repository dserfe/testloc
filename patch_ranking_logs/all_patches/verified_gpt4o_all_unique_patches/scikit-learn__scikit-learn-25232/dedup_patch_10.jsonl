{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..5b14686 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -117,6 +117,12 @@ class IterativeImputer(_BaseImputer):\n         Which strategy to use to initialize the missing values. Same as the\n         `strategy` parameter in :class:`~sklearn.impute.SimpleImputer`.\n \n+    fill_value : any, default=None\n+        When `initial_strategy=\"constant\"`, `fill_value` is used to replace\n+        all occurrences of `missing_values`. If left to the default, `fill_value`\n+        will be 0 when imputing numerical data and \"missing_value\" for strings\n+        or object data types.\n+\n     imputation_order : {'ascending', 'descending', 'roman', 'arabic', \\\n             'random'}, default='ascending'\n         The order in which the features will be imputed. Possible values:\n@@ -309,6 +315,7 @@ class IterativeImputer(_BaseImputer):\n         random_state=None,\n         add_indicator=False,\n         keep_empty_features=False,\n+        fill_value=None,\n     ):\n         super().__init__(\n             missing_values=missing_values,\n@@ -328,6 +335,7 @@ class IterativeImputer(_BaseImputer):\n         self.max_value = max_value\n         self.verbose = verbose\n         self.random_state = random_state\n+        self.fill_value = fill_value\n \n     def _impute_one_feature(\n         self,\n@@ -337,6 +345,7 @@ class IterativeImputer(_BaseImputer):\n         neighbor_feat_idx,\n         estimator=None,\n         fit_mode=True,\n+        fill_value=None,\n     ):\n         \"\"\"Impute a single feature from the others provided.\n \n@@ -614,6 +623,7 @@ class IterativeImputer(_BaseImputer):\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n                 keep_empty_features=self.keep_empty_features,\n+                fill_value=self.fill_value,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 2f5de89..3deb738 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -23,7 +23,7 @@ def _assign_where(X1, X2, cond):\n         X1[cond] = X2[cond]\n class IterativeImputer(_BaseImputer):\n     _parameter_constraints: dict = {**_BaseImputer._parameter_constraints, 'estimator': [None, HasMethods(['fit', 'predict'])], 'sample_posterior': ['boolean'], 'max_iter': [Interval(Integral, 0, None, closed='left')], 'tol': [Interval(Real, 0, None, closed='left')], 'n_nearest_features': [None, Interval(Integral, 1, None, closed='left')], 'initial_strategy': [StrOptions({'mean', 'median', 'most_frequent', 'constant'})], 'imputation_order': [StrOptions({'ascending', 'descending', 'roman', 'arabic', 'random'})], 'skip_complete': ['boolean'], 'min_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'max_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'verbose': ['verbose'], 'random_state': ['random_state']}\n-    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False):\n+    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False, fill_value=None):\n         super().__init__(missing_values=missing_values, add_indicator=add_indicator, keep_empty_features=keep_empty_features)\n         self.estimator = estimator\n         self.sample_posterior = sample_posterior\n@@ -37,7 +37,8 @@ class IterativeImputer(_BaseImputer):\n         self.max_value = max_value\n         self.verbose = verbose\n         self.random_state = random_state\n-    def _impute_one_feature(self, X_filled, mask_missing_values, feat_idx, neighbor_feat_idx, estimator=None, fit_mode=True):\n+        self.fill_value = fill_value\n+    def _impute_one_feature(self, X_filled, mask_missing_values, feat_idx, neighbor_feat_idx, estimator=None, fit_mode=True, fill_value=None):\n         if estimator is None and fit_mode is False:\n             raise ValueError('If fit_mode is False, then an already-fitted estimator should be passed in.')\n         if estimator is None:\n@@ -121,7 +122,7 @@ class IterativeImputer(_BaseImputer):\n         X_missing_mask = _get_mask(X, self.missing_values)\n         mask_missing_values = X_missing_mask.copy()\n         if self.initial_imputer_ is None:\n-            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, keep_empty_features=self.keep_empty_features)\n+            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, keep_empty_features=self.keep_empty_features, fill_value=self.fill_value)\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n", "normalized_occurrence": 1}
