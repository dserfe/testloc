{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..4074f57 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -312,7 +312,7 @@ def dup_sqf_list(f, K, all=False):\n     if dup_degree(f) <= 0:\n         return coeff, []\n \n-    result, i = [], 1\n+    result, i = {}, 1\n \n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n@@ -322,17 +322,23 @@ def dup_sqf_list(f, K, all=False):\n         h = dup_sub(q, d, K)\n \n         if not h:\n-            result.append((p, i))\n+            if p in result:\n+                result[p] += i\n+            else:\n+                result[p] = i\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if g in result:\n+                result[g] += i\n+            else:\n+                result[g] = i\n \n         i += 1\n \n-    return coeff, result\n+    return coeff, list(result.items())\n \n \n def dup_sqf_list_include(f, K, all=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..caa735f 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -104,20 +104,26 @@ def dup_sqf_list(f, K, all=False):\n             coeff = -coeff\n     if dup_degree(f) <= 0:\n         return (coeff, [])\n-    result, i = ([], 1)\n+    result, i = ({}, 1)\n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n     while True:\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n         if not h:\n-            result.append((p, i))\n+            if p in result:\n+                result[p] += i\n+            else:\n+                result[p] = i\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if g in result:\n+                result[g] += i\n+            else:\n+                result[g] = i\n         i += 1\n-    return (coeff, result)\n+    return (coeff, list(result.items()))\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n     if factors and factors[0][1] == 1:\n", "normalized_occurrence": 1}
