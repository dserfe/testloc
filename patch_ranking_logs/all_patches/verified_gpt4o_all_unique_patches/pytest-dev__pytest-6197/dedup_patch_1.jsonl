{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-6197", "model_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 272731b..183f34d 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -175,10 +175,10 @@ def pytest_pyfunc_call(pyfuncitem):\n \n def pytest_collect_file(path, parent):\n     ext = path.ext\n-    if ext == \".py\":\n+    if ext == \".py\" and not path.basename == \"__init__.py\":\n         if not parent.session.isinitpath(path):\n             if not path_matches_patterns(\n-                path, parent.config.getini(\"python_files\") + [\"__init__.py\"]\n+                path, parent.config.getini(\"python_files\")\n             ):\n                 return\n         ihook = parent.session.gethookproxy(path)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 33dd083..2eed36c 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -91,9 +91,9 @@ def pytest_pyfunc_call(pyfuncitem):\n     return True\n def pytest_collect_file(path, parent):\n     ext = path.ext\n-    if ext == '.py':\n+    if ext == '.py' and (not path.basename == '__init__.py'):\n         if not parent.session.isinitpath(path):\n-            if not path_matches_patterns(path, parent.config.getini('python_files') + ['__init__.py']):\n+            if not path_matches_patterns(path, parent.config.getini('python_files')):\n                 return\n         ihook = parent.session.gethookproxy(path)\n         return ihook.pytest_pycollect_makemodule(path=path, parent=parent)\n", "normalized_occurrence": 1}
