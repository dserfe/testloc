{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11400", "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex a3dbf34..f01c5d1 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -25,6 +25,7 @@ from sympy.sets.fancysets import Range\n known_functions = {\n     \"Abs\": [(lambda x: not x.is_integer, \"fabs\")],\n     \"gamma\": \"tgamma\",\n+    \"sinc\": \"lambda n: ((n != 0) ? (sin(n)/n) : 1)\",\n     \"sin\": \"sin\",\n     \"cos\": \"cos\",\n     \"tan\": \"tan\",\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex ec38586..d741ad0 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -5,7 +5,7 @@ from sympy.codegen.ast import Assignment\n from sympy.printing.codeprinter import CodePrinter\n from sympy.printing.precedence import precedence\n from sympy.sets.fancysets import Range\n-known_functions = {'Abs': [(lambda x: not x.is_integer, 'fabs')], 'gamma': 'tgamma', 'sin': 'sin', 'cos': 'cos', 'tan': 'tan', 'asin': 'asin', 'acos': 'acos', 'atan': 'atan', 'atan2': 'atan2', 'exp': 'exp', 'log': 'log', 'erf': 'erf', 'sinh': 'sinh', 'cosh': 'cosh', 'tanh': 'tanh', 'asinh': 'asinh', 'acosh': 'acosh', 'atanh': 'atanh', 'floor': 'floor', 'ceiling': 'ceil'}\n+known_functions = {'Abs': [(lambda x: not x.is_integer, 'fabs')], 'gamma': 'tgamma', 'sinc': 'lambda n: ((n != 0) ? (sin(n)/n) : 1)', 'sin': 'sin', 'cos': 'cos', 'tan': 'tan', 'asin': 'asin', 'acos': 'acos', 'atan': 'atan', 'atan2': 'atan2', 'exp': 'exp', 'log': 'log', 'erf': 'erf', 'sinh': 'sinh', 'cosh': 'cosh', 'tanh': 'tanh', 'asinh': 'asinh', 'acosh': 'acosh', 'atanh': 'atanh', 'floor': 'floor', 'ceiling': 'ceil'}\n reserved_words = ['auto', 'if', 'break', 'int', 'case', 'long', 'char', 'register', 'continue', 'return', 'default', 'short', 'do', 'sizeof', 'double', 'static', 'else', 'struct', 'entry', 'switch', 'extern', 'typedef', 'float', 'union', 'for', 'unsigned', 'goto', 'while', 'enum', 'void', 'const', 'signed', 'volatile']\n class CCodePrinter(CodePrinter):\n     printmethod = '_ccode'\n", "normalized_occurrence": 1}
