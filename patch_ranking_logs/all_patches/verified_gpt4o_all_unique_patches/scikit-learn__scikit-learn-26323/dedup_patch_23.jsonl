{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..ae70b2f 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -303,6 +303,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        if hasattr(self, '_remainder') and self._remainder[1] not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         return self\n \n     def get_params(self, deep=True):\n@@ -343,6 +345,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             This estimator.\n         \"\"\"\n         self._set_params(\"_transformers\", **kwargs)\n+        if hasattr(self, '_remainder') and self._remainder[1] not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         return self\n \n     def _iter(self, fitted=False, replace_strings=False, column_as_strings=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..f6e4d9c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -47,11 +47,15 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n+        if hasattr(self, '_remainder') and self._remainder[1] not in {'passthrough', 'drop'}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         return self\n     def get_params(self, deep=True):\n         return self._get_params('_transformers', deep=deep)\n     def set_params(self, **kwargs):\n         self._set_params('_transformers', **kwargs)\n+        if hasattr(self, '_remainder') and self._remainder[1] not in {'passthrough', 'drop'}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         return self\n     def _iter(self, fitted=False, replace_strings=False, column_as_strings=False):\n         if fitted:\n", "normalized_occurrence": 2}
