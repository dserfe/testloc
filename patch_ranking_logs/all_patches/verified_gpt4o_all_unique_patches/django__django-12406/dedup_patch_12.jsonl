{"model_name_or_path": "agentless", "instance_id": "django__django-12406", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex ed2157a..ea4af44 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -755,6 +755,18 @@ class SelectMultiple(Select):\n \n \n class RadioSelect(ChoiceWidget):\n+    def __init__(self, attrs=None, choices=()):\n+        super().__init__(attrs, choices)\n+        # Prevent adding an empty option if the field is required\n+        if self.is_required:\n+            self.choices = [(val, desc) for val, desc in self.choices if val]\n+\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        option = super().create_option(name, value, label, selected, index, subindex=subindex, attrs=attrs)\n+        # Ensure no option is checked initially if the field is required\n+        if self.is_required and not value:\n+            option['selected'] = False\n+        return option\n     input_type = 'radio'\n     template_name = 'django/forms/widgets/radio.html'\n     option_template_name = 'django/forms/widgets/radio_option.html'\n", "occurrence": 1, "normalized_patch": "--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n+    def __init__(self, attrs=None, choices=()):\n+        super().__init__(attrs, choices)\n+        if self.is_required:\n+            self.choices = [(val, desc) for val, desc in self.choices if val]\n+    def create_option(self, name, value, label, selected, index, subindex=None, attrs=None):\n+        option = super().create_option(name, value, label, selected, index, subindex=subindex, attrs=attrs)\n+        if self.is_required and (not value):\n+            option['selected'] = False\n+        return option", "normalized_occurrence": 1}
