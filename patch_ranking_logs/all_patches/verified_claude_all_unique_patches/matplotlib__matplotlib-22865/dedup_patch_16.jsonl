{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..9cca1a3 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,20 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        segments = np.dstack([X, Y])\n+        if self.extend in ['neither', 'both']:\n+            # Include all segments for 'neither' and 'both' cases\n+            segments_to_draw = segments\n+        elif self.extend == 'min':\n+            # Exclude the last segment\n+            segments_to_draw = segments[:-1]\n+        elif self.extend == 'max':\n+            # Exclude the first segment\n+            segments_to_draw = segments[1:]\n+        else:\n+            # Default case, exclude first and last\n+            segments_to_draw = segments[1:-1]\n+        self.dividers.set_segments(segments_to_draw if self.drawedges else [])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..392dd8a 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -262,7 +262,16 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        segments = np.dstack([X, Y])\n+        if self.extend in ['neither', 'both']:\n+            segments_to_draw = segments\n+        elif self.extend == 'min':\n+            segments_to_draw = segments[:-1]\n+        elif self.extend == 'max':\n+            segments_to_draw = segments[1:]\n+        else:\n+            segments_to_draw = segments[1:-1]\n+        self.dividers.set_segments(segments_to_draw if self.drawedges else [])\n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)\n         patches = []\n", "normalized_occurrence": 1}
