{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..fe963e4 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,17 +84,42 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get types from instance attributes and locals\n+        attr_types = {}\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n-            + properties\n         ):\n-            if not self.show_attr(node_name):\n-                continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            if self.show_attr(node_name):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    attr_types[node_name] = names\n+\n+        # Check __init__ method for type annotations\n+        if '__init__' in node and isinstance(node['__init__'], astroid.FunctionDef):\n+            init_method = node['__init__']\n+            if init_method.args and init_method.args.annotations:\n+                for arg_name, annotation in init_method.args.annotations.items():\n+                    if arg_name != 'return' and self.show_attr(arg_name):\n+                        try:\n+                            annotation_name = annotation.name\n+                            if arg_name not in attr_types:\n+                                attr_types[arg_name] = [annotation_name]\n+                        except AttributeError:\n+                            pass\n+\n+        # Build the final attribute list\n+        for node_name in attr_types:\n+            names = attr_types[node_name]\n+            node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n+\n+        # Add properties\n+        for node_name, _ in properties:\n+            if self.show_attr(node_name):\n+                attrs.append(node_name)\n+\n         return sorted(attrs)\n \n     def get_methods(self, node):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..304697f 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,13 +57,30 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n-            if not self.show_attr(node_name):\n-                continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = '{} : {}'.format(node_name, ', '.join(names))\n+        attr_types = {}\n+        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()):\n+            if self.show_attr(node_name):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    attr_types[node_name] = names\n+        if '__init__' in node and isinstance(node['__init__'], astroid.FunctionDef):\n+            init_method = node['__init__']\n+            if init_method.args and init_method.args.annotations:\n+                for arg_name, annotation in init_method.args.annotations.items():\n+                    if arg_name != 'return' and self.show_attr(arg_name):\n+                        try:\n+                            annotation_name = annotation.name\n+                            if arg_name not in attr_types:\n+                                attr_types[arg_name] = [annotation_name]\n+                        except AttributeError:\n+                            pass\n+        for node_name in attr_types:\n+            names = attr_types[node_name]\n+            node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n+        for node_name, _ in properties:\n+            if self.show_attr(node_name):\n+                attrs.append(node_name)\n         return sorted(attrs)\n \n     def get_methods(self, node):\n", "normalized_occurrence": 1}
