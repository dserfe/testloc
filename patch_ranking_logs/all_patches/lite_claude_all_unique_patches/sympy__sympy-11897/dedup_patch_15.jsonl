{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..6c3bada 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -461,8 +461,8 @@ class LatexPrinter(Printer):\n             if expr.base.is_Function:\n                 return self._print(expr.base, \"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n-        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n-            # Things like 1/x\n+        elif (expr.exp == -1 and expr.base.is_commutative and not expr.base.is_Function):\n+            # Only convert simple cases like 1/x to fractions\n             return self._print_Mul(expr)\n         else:\n             if expr.base.is_Function:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..10138a1 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -242,7 +242,7 @@ class LatexPrinter(Printer):\n             if expr.base.is_Function:\n                 return self._print(expr.base, '%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n-        elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n+        elif expr.exp == -1 and expr.base.is_commutative and (not expr.base.is_Function):\n             return self._print_Mul(expr)\n         elif expr.base.is_Function:\n             return self._print(expr.base, self._print(expr.exp))\n", "normalized_occurrence": 1}
