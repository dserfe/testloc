{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..bbb4c5f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -146,6 +146,7 @@ class ForwardManyToOneDescriptor:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n+        queryset._defer_next_values(self.field.model._meta.get_fields())\n         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n     def get_object(self, instance):\n@@ -378,6 +379,7 @@ class ReverseOneToOneDescriptor:\n         for rel_obj in queryset:\n             instance = instances_dict[rel_obj_attr(rel_obj)]\n             self.related.field.set_cached_value(rel_obj, instance)\n+        queryset._defer_next_values(self.related.model._meta.get_fields())\n         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False\n \n     def __get__(self, instance, cls=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..46efcc8 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -38,6 +38,7 @@ class ForwardManyToOneDescriptor:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n+        queryset._defer_next_values(self.field.model._meta.get_fields())\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n@@ -134,6 +135,7 @@ class ReverseOneToOneDescriptor:\n         for rel_obj in queryset:\n             instance = instances_dict[rel_obj_attr(rel_obj)]\n             self.related.field.set_cached_value(rel_obj, instance)\n+        queryset._defer_next_values(self.related.model._meta.get_fields())\n         return (queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
