{"model_name_or_path": "agentless", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 3174ba6..49071ea 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -132,6 +132,9 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n+        missing_padding = len(session_data) % 4\n+        if missing_padding != 0:\n+            session_data += '=' * (4 - missing_padding)\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n             # could produce ValueError if there is no ':'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex cfa6de2..82653be 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -77,6 +77,9 @@ class SessionBase:\n         hash = self._hash(serialized)\n         return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n     def _legacy_decode(self, session_data):\n+        missing_padding = len(session_data) % 4\n+        if missing_padding != 0:\n+            session_data += '=' * (4 - missing_padding)\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n             hash, serialized = encoded_data.split(b':', 1)\n", "normalized_occurrence": 1}
