{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13497", "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex 94d6d73..a72b802 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -249,6 +249,8 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n \n     if discrete_features == 'auto':\n         discrete_features = issparse(X)\n+    elif isinstance(discrete_features, (list, np.ndarray)):\n+        discrete_features = np.asarray(discrete_features)\n \n     if isinstance(discrete_features, bool):\n         discrete_mask = np.empty(n_features, dtype=bool)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex 11d30f9..6be372a 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -82,6 +82,8 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False, n_neighb\n     n_samples, n_features = X.shape\n     if discrete_features == 'auto':\n         discrete_features = issparse(X)\n+    elif isinstance(discrete_features, (list, np.ndarray)):\n+        discrete_features = np.asarray(discrete_features)\n     if isinstance(discrete_features, bool):\n         discrete_mask = np.empty(n_features, dtype=bool)\n         discrete_mask.fill(discrete_features)\n", "normalized_occurrence": 1}
