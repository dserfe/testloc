{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 8743303..6969ddf 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1163,6 +1163,8 @@ class _RepeatedSplits(metaclass=ABCMeta):\n                      **self.cvargs)\n         return cv.get_n_splits(X, y, groups) * self.n_repeats\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n \n class RepeatedKFold(_RepeatedSplits):\n     \"\"\"Repeated K-Fold cross validator.\n@@ -1217,6 +1219,9 @@ class RepeatedKFold(_RepeatedSplits):\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n \n@@ -1269,6 +1274,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         super().__init__(\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n \n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n+    def __repr__(self):\n+        return f'{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})'\n+\n+    def __repr__(self):\n+        return f'{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})'\n+\n+    def __repr__(self):\n+        return f'{self.__class__.__name__}(n_splits={self.n_splits}, n_repeats={self.n_repeats}, random_state={self.random_state})'\n+", "normalized_occurrence": 1}
