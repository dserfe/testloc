{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..9b0b847 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,16 +234,33 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n+        from sympy import Integer\n+\n+        if not isinstance(i, Integer):\n+            row_block = Dummy('row_block')\n+            row_cond = [i < sum(self.rowblocksizes[:row_block+1])]\n+        else:\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < numrows:\n+                    break\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n+\n+        if not isinstance(j, Integer):\n+            col_block = Dummy('col_block')\n+            col_cond = [j < sum(self.colblocksizes[:col_block+1])]\n+        else:\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < numcols:\n+                    break\n                 j -= numcols\n+\n+        if isinstance(i, Integer) and isinstance(j, Integer):\n+            return self.blocks[row_block, col_block][i, j]\n+        else:\n+            from sympy import Piecewise\n+            row_piecewise = Piecewise(*[(self.blocks[row_block, col_block][i, j],\n+                                         row_cond[0]) for row_block in range(len(self.rowblocksizes))])\n+            return Piecewise(*[(row_piecewise, col_cond[0]) for col_block in range(len(self.colblocksizes))])\n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..5967419 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,29 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n+        from sympy import Integer\n+        if not isinstance(i, Integer):\n+            row_block = Dummy('row_block')\n+            row_cond = [i < sum(self.rowblocksizes[:row_block + 1])]\n+        else:\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < numrows:\n+                    break\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n+        if not isinstance(j, Integer):\n+            col_block = Dummy('col_block')\n+            col_cond = [j < sum(self.colblocksizes[:col_block + 1])]\n+        else:\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < numcols:\n+                    break\n                 j -= numcols\n+        if isinstance(i, Integer) and isinstance(j, Integer):\n+            return self.blocks[row_block, col_block][i, j]\n+        else:\n+            from sympy import Piecewise\n+            row_piecewise = Piecewise(*[(self.blocks[row_block, col_block][i, j], row_cond[0]) for row_block in range(len(self.rowblocksizes))])\n+            return Piecewise(*[(row_piecewise, col_cond[0]) for col_block in range(len(self.colblocksizes))])\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
