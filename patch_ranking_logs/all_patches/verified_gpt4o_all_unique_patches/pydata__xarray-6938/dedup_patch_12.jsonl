{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6938", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 656116f..9a11c4e 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -578,6 +578,12 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):\n     def dims(self, value: str | Iterable[Hashable]) -> None:\n         self._dims = self._parse_dimensions(value)\n \n+    def copy_with_new_dims(self, new_dims: str | Iterable[Hashable]) -> 'Variable':\n+        \"\"\"Return a copy of this variable with new dimensions.\"\"\"\n+        new_var = self.copy()\n+        new_var._dims = self._parse_dimensions(new_dims)\n+        return new_var\n+\n     def _parse_dimensions(self, dims: str | Iterable[Hashable]) -> tuple[Hashable, ...]:\n         if isinstance(dims, str):\n             dims = (dims,)\n", "occurrence": 1, "normalized_patch": "--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n+    def copy_with_new_dims(self, new_dims: str | Iterable[Hashable]) -> 'Variable':\n+        \"\"\"Return a copy of this variable with new dimensions.\"\"\"\n+        new_var = self.copy()\n+        new_var._dims = self._parse_dimensions(new_dims)\n+        return new_var\n+", "normalized_occurrence": 1}
