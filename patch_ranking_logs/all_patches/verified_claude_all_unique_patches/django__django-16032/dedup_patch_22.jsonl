{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 250c6ee..cacf03d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1171,6 +1171,11 @@ class Query(BaseExpression):\n             and not connection.features.ignores_unnecessary_order_by_in_subqueries\n         ):\n             self.clear_ordering(force=False)\n+            # Clear annotations and aliases when used as an __in subquery to avoid\n+            # returning unnecessary columns\n+            if getattr(self, 'values_select', None) is None and self._has_filters():\n+                self.annotations = {}\n+                self.alias_map = {}\n             for query in self.combined_queries:\n                 query.clear_ordering(force=False)\n         sql, params = self.get_compiler(connection=connection).as_sql()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4a84de0..df51a70 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -607,6 +607,9 @@ class Query(BaseExpression):\n     def as_sql(self, compiler, connection):\n         if self.subquery and (not connection.features.ignores_unnecessary_order_by_in_subqueries):\n             self.clear_ordering(force=False)\n+            if getattr(self, 'values_select', None) is None and self._has_filters():\n+                self.annotations = {}\n+                self.alias_map = {}\n             for query in self.combined_queries:\n                 query.clear_ordering(force=False)\n         sql, params = self.get_compiler(connection=connection).as_sql()\n", "normalized_occurrence": 1}
