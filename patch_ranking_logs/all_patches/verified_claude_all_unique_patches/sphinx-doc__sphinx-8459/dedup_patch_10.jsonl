{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..96dcd2b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -30,9 +30,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    stringified = typing.stringify(param.annotation)\n+                    for alias, replacement in app.config.autodoc_type_aliases.items():\n+                        if stringified == replacement.split('.')[-1]:\n+                            stringified = replacement\n+                    annotation[param.name] = stringified\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                stringified = typing.stringify(sig.return_annotation)\n+                for alias, replacement in app.config.autodoc_type_aliases.items():\n+                    if stringified == replacement.split('.')[-1]:\n+                        stringified = replacement\n+                annotation['return'] = stringified\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..828a182 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -14,9 +14,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    stringified = typing.stringify(param.annotation)\n+                    for alias, replacement in app.config.autodoc_type_aliases.items():\n+                        if stringified == replacement.split('.')[-1]:\n+                            stringified = replacement\n+                    annotation[param.name] = stringified\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                stringified = typing.stringify(sig.return_annotation)\n+                for alias, replacement in app.config.autodoc_type_aliases.items():\n+                    if stringified == replacement.split('.')[-1]:\n+                        stringified = replacement\n+                annotation['return'] = stringified\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
