{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13241", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex 650c24f..e4d1658 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -275,6 +275,9 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         \"\"\"\n         self.fit(X, **params)\n \n+        # Fix signs of eigenvectors - make maximum absolute value positive\n+        signs = np.sign(self.alphas_[abs(self.alphas_).argmax(axis=0), range(self.alphas_.shape[1])])\n+        self.alphas_ *= signs\n         X_transformed = self.alphas_ * np.sqrt(self.lambdas_)\n \n         if self.fit_inverse_transform:\n@@ -320,4 +323,4 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n \n         K = self._get_kernel(X, self.X_transformed_fit_)\n \n-        return np.dot(K, self.dual_coef_)\n+        return np.dot(K, self.dual_coef_)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex 92bc5ab..a7d5aec 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -82,6 +82,8 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n         return self\n     def fit_transform(self, X, y=None, **params):\n         self.fit(X, **params)\n+        signs = np.sign(self.alphas_[abs(self.alphas_).argmax(axis=0), range(self.alphas_.shape[1])])\n+        self.alphas_ *= signs\n         X_transformed = self.alphas_ * np.sqrt(self.lambdas_)\n         if self.fit_inverse_transform:\n             self._fit_inverse_transform(X_transformed, X)\n", "normalized_occurrence": 1}
