{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..939c967 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -44,6 +44,16 @@ class MigrationOptimizer:\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n             for j, other in enumerate(operations[i + 1:]):\n+                # Special handling for AlterOrderWithRespectTo and AddIndex dependencies\n+                if isinstance(other, AddIndex) and isinstance(operation, AlterOrderWithRespectTo):\n+                    if '_order' in other.index.fields:\n+                        # Move AlterOrderWithRespectTo before the AddIndex\n+                        new_operations.append(operation)\n+                        new_operations.extend(operations[i + 1:i + j + 1])\n+                        new_operations.append(other)\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n+                \n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..76ea66d 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -14,6 +14,13 @@ class MigrationOptimizer:\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n+                if isinstance(other, AddIndex) and isinstance(operation, AlterOrderWithRespectTo):\n+                    if '_order' in other.index.fields:\n+                        new_operations.append(operation)\n+                        new_operations.extend(operations[i + 1:i + j + 1])\n+                        new_operations.append(other)\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n", "normalized_occurrence": 1}
