{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..8984007 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1865,7 +1865,19 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        if not (isinstance(parent, ModuleDocumenter) and isattr):\n+            return False\n+\n+        # Allow private members with :meta public: in their docstring\n+        if membername.startswith('_'):\n+            from sphinx.util.inspect import getdoc\n+            docstring = getdoc(member, cls.env.config, cls.env.app, cls.env, None, parent)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+            if membername.startswith('__'):  # Skip special and private members\n+                return False\n+\n+        return True\n \n     def update_annotations(self, parent: Any) -> None:\n         \"\"\"Update __annotations__ to support type_comment and so on.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f71844a..8607717 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1047,7 +1047,16 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin, Uninitialize\n     option_spec['no-value'] = bool_option\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        if not (isinstance(parent, ModuleDocumenter) and isattr):\n+            return False\n+        if membername.startswith('_'):\n+            from sphinx.util.inspect import getdoc\n+            docstring = getdoc(member, cls.env.config, cls.env.app, cls.env, None, parent)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+            if membername.startswith('__'):\n+                return False\n+        return True\n     def update_annotations(self, parent: Any) -> None:\n         try:\n             annotations = dict(inspect.getannotations(parent))\n", "normalized_occurrence": 1}
