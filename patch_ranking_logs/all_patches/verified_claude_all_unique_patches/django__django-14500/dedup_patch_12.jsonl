{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14500", "model_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex aa36469..1ea1774 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -239,12 +239,13 @@ class MigrationLoader:\n                 # Get applied status of each of this migration's replacement\n                 # targets.\n                 applied_statuses = [(target in self.applied_migrations) for target in migration.replaces]\n-                # The replacing migration is only marked as applied if all of\n-                # its replacement targets are.\n-                if all(applied_statuses):\n+                # The replacing migration stays applied if it was already applied,\n+                # regardless of the replaced migrations' statuses\n+                if key in self.applied_migrations:\n+                    pass  # Keep the existing applied status\n+                elif all(applied_statuses):\n+                    # Only mark as applied if all replaced migrations are applied\n                     self.applied_migrations[key] = migration\n-                else:\n-                    self.applied_migrations.pop(key, None)\n                 # A replacing migration can be used if either all or none of\n                 # its replacement targets have been applied.\n                 if all(applied_statuses) or (not any(applied_statuses)):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py\nindex cb04902..6b73a7b 100644\n--- a/django/db/migrations/loader.py\n+++ b/django/db/migrations/loader.py\n@@ -130,10 +130,10 @@ class MigrationLoader:\n         if self.replace_migrations:\n             for key, migration in self.replacements.items():\n                 applied_statuses = [target in self.applied_migrations for target in migration.replaces]\n-                if all(applied_statuses):\n+                if key in self.applied_migrations:\n+                    pass\n+                elif all(applied_statuses):\n                     self.applied_migrations[key] = migration\n-                else:\n-                    self.applied_migrations.pop(key, None)\n                 if all(applied_statuses) or not any(applied_statuses):\n                     self.graph.remove_replaced_nodes(key, migration.replaces)\n                 else:\n", "normalized_occurrence": 2}
