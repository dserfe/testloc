{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..c9832ba 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -42,7 +43,16 @@ class MigrationOptimizer:\n         new_operations = []\n         for i, operation in enumerate(operations):\n             right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n+            # Special case for AddIndex and RemoveIndex optimization\n+            if (\n+                i + 1 < len(operations)\n+                and isinstance(operation, AddIndex)\n+                and isinstance(operations[i + 1], RemoveIndex)\n+                and operation.model_name == operations[i + 1].model_name\n+                and operation.index.name == operations[i + 1].name\n+            ):\n+                # Skip both AddIndex and RemoveIndex operations as they cancel each other out\n+                continue\n             for j, other in enumerate(operations[i + 1 :]):\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n@@ -66,4 +76,4 @@ class MigrationOptimizer:\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..a439bef 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -13,6 +13,8 @@ class MigrationOptimizer:\n         new_operations = []\n         for i, operation in enumerate(operations):\n             right = True\n+            if i + 1 < len(operations) and isinstance(operation, AddIndex) and isinstance(operations[i + 1], RemoveIndex) and (operation.model_name == operations[i + 1].model_name) and (operation.index.name == operations[i + 1].name):\n+                continue\n             for j, other in enumerate(operations[i + 1:]):\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n", "normalized_occurrence": 1}
