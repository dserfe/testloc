{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..ad51405 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1278,13 +1278,19 @@ class PythonDomain(Domain):\n             elif type == 'mod':\n                 # only exact matches allowed for modules\n                 return []\n-            elif classname and classname + '.' + name in self.objects:\n-                newname = classname + '.' + name\n-            elif modname and modname + '.' + name in self.objects:\n-                newname = modname + '.' + name\n-            elif modname and classname and \\\n-                    modname + '.' + classname + '.' + name in self.objects:\n-                newname = modname + '.' + classname + '.' + name\n+            else:\n+                # Search in the current module and then parent modules\n+                if classname and classname + '.' + name in self.objects:\n+                    newname = classname + '.' + name\n+                elif modname and modname + '.' + name in self.objects:\n+                    newname = modname + '.' + name\n+                elif modname and classname and \\\n+                        modname + '.' + classname + '.' + name in self.objects:\n+                    newname = modname + '.' + classname + '.' + name\n+                elif modname and ('.' in modname) and \\\n+                        modname.rsplit('.', 1)[0] + '.' + name in self.objects:\n+                    newname = modname.rsplit('.', 1)[0] + '.' + name\n+        \n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..ca7e82a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -776,6 +776,8 @@ class PythonDomain(Domain):\n             newname = modname + '.' + name\n         elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n             newname = modname + '.' + classname + '.' + name\n+        elif modname and '.' in modname and (modname.rsplit('.', 1)[0] + '.' + name in self.objects):\n+            newname = modname.rsplit('.', 1)[0] + '.' + name\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "normalized_occurrence": 1}
