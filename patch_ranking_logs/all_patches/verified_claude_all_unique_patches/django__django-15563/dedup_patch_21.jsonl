{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..f675fda 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,14 +987,44 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        \n+        # Handle updates for each parent model in multi-table inheritance\n+        updated_rows = 0\n+        opts = self.model._meta\n+        if opts.parents:\n+            # Group updates by parent model\n+            updates_by_model = {}\n+            for field_name, value in kwargs.items():\n+                # Find which model this field belongs to\n+                field = opts.get_field(field_name)\n+                model = field.model._meta.concrete_model\n+                if model not in updates_by_model:\n+                    updates_by_model[model] = {}\n+                updates_by_model[model][field_name] = value\n+            \n+            # Perform updates for each parent model\n+            for model, model_updates in updates_by_model.items():\n+                if model_updates:\n+                    query = self.query.chain(sql.UpdateQuery)\n+                    query.model = model\n+                    query.add_update_values(model_updates)\n+                    query.annotations = {}\n+                    with transaction.mark_for_rollback_on_error(using=self.db):\n+                        rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                        if rows is not None:\n+                            updated_rows = rows\n+        else:\n+            # Single table update\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(kwargs)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if rows is not None:\n+                    updated_rows = rows\n+                    \n         self._result_cache = None\n-        return rows\n+        return updated_rows\n \n     update.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..81f8a2f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,13 +532,36 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        updated_rows = 0\n+        opts = self.model._meta\n+        if opts.parents:\n+            updates_by_model = {}\n+            for field_name, value in kwargs.items():\n+                field = opts.get_field(field_name)\n+                model = field.model._meta.concrete_model\n+                if model not in updates_by_model:\n+                    updates_by_model[model] = {}\n+                updates_by_model[model][field_name] = value\n+            for model, model_updates in updates_by_model.items():\n+                if model_updates:\n+                    query = self.query.chain(sql.UpdateQuery)\n+                    query.model = model\n+                    query.add_update_values(model_updates)\n+                    query.annotations = {}\n+                    with transaction.mark_for_rollback_on_error(using=self.db):\n+                        rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                        if rows is not None:\n+                            updated_rows = rows\n+        else:\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(kwargs)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if rows is not None:\n+                    updated_rows = rows\n         self._result_cache = None\n-        return rows\n+        return updated_rows\n     update.alters_data = True\n     def _update(self, values):\n         if self.query.is_sliced:\n", "normalized_occurrence": 1}
