{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11001", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 4247e29..8c0c241 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,9 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            # Normalize multiline SQL to single line before regex search\n+            sql_normalized = ' '.join(sql.split())\n+            without_ordering = self.ordering_parts.search(sql_normalized).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7c00edb..8e895a5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -187,7 +187,8 @@ class SQLCompiler:\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_normalized = ' '.join(sql.split())\n+            without_ordering = self.ordering_parts.search(sql_normalized).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n", "normalized_occurrence": 1}
