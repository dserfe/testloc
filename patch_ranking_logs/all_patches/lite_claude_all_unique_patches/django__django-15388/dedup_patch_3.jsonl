{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py\nindex 5325bda..c8af182 100644\n--- a/django/template/loaders/filesystem.py\n+++ b/django/template/loaders/filesystem.py\n@@ -31,6 +31,10 @@ class Loader(BaseLoader):\n         in template_dirs. For security reasons, if a path doesn't lie inside\n         one of the template_dirs it is excluded from the result set.\n         \"\"\"\n+        # Only process files that look like templates\n+        if not any(template_name.endswith(ext) for ext in ['.html', '.htm', '.django', '.jinja']):\n+            return\n+\n         for template_dir in self.get_dirs():\n             try:\n                 name = safe_join(template_dir, template_name)\n@@ -43,4 +47,4 @@ class Loader(BaseLoader):\n                 name=name,\n                 template_name=template_name,\n                 loader=self,\n-            )\n+            )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py\nindex f84d4ea..e2a2d6d 100644\n--- a/django/template/loaders/filesystem.py\n+++ b/django/template/loaders/filesystem.py\n@@ -15,6 +15,8 @@ class Loader(BaseLoader):\n         except FileNotFoundError:\n             raise TemplateDoesNotExist(origin)\n     def get_template_sources(self, template_name):\n+        if not any((template_name.endswith(ext) for ext in ['.html', '.htm', '.django', '.jinja'])):\n+            return\n         for template_dir in self.get_dirs():\n             try:\n                 name = safe_join(template_dir, template_name)\n", "normalized_occurrence": 1}
