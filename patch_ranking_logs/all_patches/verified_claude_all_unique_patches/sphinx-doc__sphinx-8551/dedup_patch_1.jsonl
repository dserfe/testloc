{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..1033f76 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1266,11 +1266,25 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        # First try current module scope\n+                        if modname:\n+                            # Split module path and try from most specific to least specific\n+                            parts = modname.split('.')\n+                            for i in range(len(parts), -1, -1):\n+                                current_modname = '.'.join(parts[:i])\n+                                if current_modname:\n+                                    current_modname += '.'\n+                                fullname = current_modname + name\n+                                if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                    newname = fullname\n+                                    break\n+                            \n+                        # If still not found, try \"fuzzy\" searching mode\n+                        if not newname:\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                       if oname.endswith(searchname) and\n+                                       self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..8321b37 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -764,8 +764,19 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        if modname:\n+                            parts = modname.split('.')\n+                            for i in range(len(parts), -1, -1):\n+                                current_modname = '.'.join(parts[:i])\n+                                if current_modname:\n+                                    current_modname += '.'\n+                                fullname = current_modname + name\n+                                if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                    newname = fullname\n+                                    break\n+                        if not newname:\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
