{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..9af4ec1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -92,7 +92,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(' +', field_name.lstrip('*'))\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n@@ -118,12 +118,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n@@ -148,7 +148,7 @@ def augment_descriptions_with_types(\n     has_type = set()  # type: Set[str]\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(' +', field_name.lstrip('*'))\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n@@ -172,7 +172,7 @@ def augment_descriptions_with_types(\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..cc273b0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -66,7 +66,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(' +', field_name.lstrip('*'))\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 arg = arguments.setdefault(parts[1], {})\n@@ -88,12 +88,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n@@ -110,7 +110,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     has_type = set()\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(' +', field_name.lstrip('*'))\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 has_description.add(parts[1])\n@@ -130,7 +130,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + ('*' if name.startswith('*') else '') + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n     if 'return' in annotations:\n", "normalized_occurrence": 1}
