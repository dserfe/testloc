{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..cbf6292 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -211,18 +211,19 @@ class ConditionSet(Set):\n             # that should go away, eventually.\n             return self\n         sym, cond, base = self.args\n+        # Ensure that the old symbol is not mistaken for the bound symbol\n         if old == sym:\n-            # we try to be as lenient as possible to allow\n+            # We try to be as lenient as possible to allow\n             # the dummy symbol to be changed\n             base = base.subs(old, new)\n             if isinstance(new, Symbol):\n-                # if the assumptions don't match, the cond\n+                # If the assumptions don't match, the cond\n                 # might evaluate or change\n                 if (new.assumptions0 == old.assumptions0 or\n                         len(new.assumptions0) == 1 and\n                         old.is_commutative == new.is_commutative):\n                     if base != self.base_set:\n-                        # it will be aggravating to have the dummy\n+                        # It will be aggravating to have the dummy\n                         # symbol change if you are trying to target\n                         # the base set so if the base set is changed\n                         # leave the dummy symbol alone -- a second\n@@ -236,12 +237,19 @@ class ConditionSet(Set):\n                     assumptions or one having a single assumption\n                     having the same commutativity.\n                 '''))\n-            # don't target cond: it is there to tell how\n+            # Don't target cond: it is there to tell how\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n+\n+        # Ensure that the substitution is correctly applied to the condition\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n+\n+        # Avoid confusion between the bound symbol and other symbols\n+        if old == self.sym and new not in base.free_symbols:\n+            return self\n+\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n         return self.func(self.sym, cond, base)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..205bb68 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -91,6 +91,8 @@ class ConditionSet(Set):\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n+        if old == self.sym and new not in base.free_symbols:\n+            return self\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n         return self.func(self.sym, cond, base)\n", "normalized_occurrence": 1}
