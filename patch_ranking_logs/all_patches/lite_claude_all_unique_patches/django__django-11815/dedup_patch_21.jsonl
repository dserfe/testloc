{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..e0d28bb 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -274,11 +274,33 @@ class MigrationWriter:\n     def register_serializer(cls, type_, serializer):\n         Serializer.register(type_, serializer)\n \n+    def __init__(self, migration, include_header=True):\n+        self.migration = migration\n+        self.include_header = include_header\n+        self.needs_manual_porting = False\n+        # Register the Enum serializer\n+        self.register_serializer(Enum, EnumSerializer)\n+\n     @classmethod\n     def unregister_serializer(cls, type_):\n         Serializer.unregister(type_)\n \n \n+class EnumSerializer(BaseSerializer):\n+    \"\"\"\n+    Serializes Enum objects using their name rather than value to maintain\n+    compatibility with translations.\n+    \"\"\"\n+    def serialize(self):\n+        enum_class = self.value.__class__\n+        enum_name = self.value.name\n+        imports = {\"from enum import Enum\"}\n+        # Add the module import for the enum class if it's not in builtins\n+        if enum_class.__module__ != 'builtins':\n+            imports.add(f\"from {enum_class.__module__} import {enum_class.__name__}\")\n+        return f\"{enum_class.__name__}['{enum_name}']\", imports\n+\n+\n MIGRATION_HEADER_TEMPLATE = \"\"\"\\\n # Generated by Django %(version)s on %(timestamp)s\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex acf3688..97737d6 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -190,8 +190,21 @@ class MigrationWriter:\n     @classmethod\n     def register_serializer(cls, type_, serializer):\n         Serializer.register(type_, serializer)\n+    def __init__(self, migration, include_header=True):\n+        self.migration = migration\n+        self.include_header = include_header\n+        self.needs_manual_porting = False\n+        self.register_serializer(Enum, EnumSerializer)\n     @classmethod\n     def unregister_serializer(cls, type_):\n         Serializer.unregister(type_)\n+class EnumSerializer(BaseSerializer):\n+    def serialize(self):\n+        enum_class = self.value.__class__\n+        enum_name = self.value.name\n+        imports = {'from enum import Enum'}\n+        if enum_class.__module__ != 'builtins':\n+            imports.add(f'from {enum_class.__module__} import {enum_class.__name__}')\n+        return (f\"{enum_class.__name__}['{enum_name}']\", imports)\n MIGRATION_HEADER_TEMPLATE = '# Generated by Django %(version)s on %(timestamp)s\\n\\n'\n MIGRATION_TEMPLATE = '%(migration_header)s%(imports)s\\n\\nclass Migration(migrations.Migration):\\n%(replaces_str)s%(initial_str)s\\n    dependencies = [\\n%(dependencies)s    ]\\n\\n    operations = [\\n%(operations)s    ]\\n'\n\\ No newline at end of file\n", "normalized_occurrence": 1}
