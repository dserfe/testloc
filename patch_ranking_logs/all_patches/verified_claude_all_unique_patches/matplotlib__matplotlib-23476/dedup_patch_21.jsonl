{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..6870820 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3026,6 +3026,10 @@ class Figure(FigureBase):\n         # add version information to the state\n         state['__mpl_version__'] = mpl.__version__\n \n+        # preserve the original DPI value\n+        if hasattr(self, '_original_dpi'):\n+            state['_original_dpi'] = self._original_dpi\n+\n         # check whether the figure manager (if any) is registered with pyplot\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n@@ -3035,11 +3039,15 @@ class Figure(FigureBase):\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n+        original_dpi = state.pop('_original_dpi', None)\n \n         if version != mpl.__version__:\n             _api.warn_external(\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n+        \n+        if original_dpi is not None:\n+            self._original_dpi = original_dpi\n \n         self.__dict__ = state\n \n", "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..9c46982 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,8 @@ class Figure(FigureBase):\n         state.pop('canvas')\n         state['_cachedRenderer'] = None\n         state['__mpl_version__'] = mpl.__version__\n+        if hasattr(self, '_original_dpi'):\n+            state['_original_dpi'] = self._original_dpi\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n@@ -958,8 +960,11 @@ class Figure(FigureBase):\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n+        original_dpi = state.pop('_original_dpi', None)\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n+        if original_dpi is not None:\n+            self._original_dpi = original_dpi\n         self.__dict__ = state\n         FigureCanvasBase(self)\n         if restore_to_pylab:\n", "normalized_occurrence": 1}
