{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..472f2be 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,13 +707,21 @@ class _EvaluatorPrinter(object):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n-\n+        \n+        def should_dummify(arg):\n+            # Always dummify if dummify=True or if the name is not a valid Python identifier\n+            if isinstance(arg, (Symbol, MatrixSymbol)):\n+                return dummify or not self._is_safe_ident(arg.name)\n+            return False\n+\n+        # If dummify=True, force dummification regardless of the name\n+        # If dummify=False, only dummify invalid Python identifiers\n         # Args of type Dummy can cause name collisions with args\n-        # of type Symbol.  Force dummify of everything in this\n+        # of type Symbol. Force dummify of everything in this case.\n         # situation.\n         if not dummify:\n             dummify = any(isinstance(arg, Dummy) for arg in flatten(args))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..9ce31cc 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -282,9 +282,13 @@ class _EvaluatorPrinter(object):\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n         dummify = self._dummify\n+        def should_dummify(arg):\n+            if isinstance(arg, (Symbol, MatrixSymbol)):\n+                return dummify or not self._is_safe_ident(arg.name)\n+            return False\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n         argstrs = []\n", "normalized_occurrence": 1}
