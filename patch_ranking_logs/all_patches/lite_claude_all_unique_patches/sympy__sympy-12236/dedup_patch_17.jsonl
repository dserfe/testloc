{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..73ae44c 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -118,12 +118,21 @@ def apart(f, x=None, full=False, **options):\n             return f.xreplace(dict(reps))\n \n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-\n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n+        # Only consider other symbols as variables if they are in x\n+        # Otherwise treat them as coefficients\n+        if x is not None and not any(sym in P.free_symbols - {x} for sym in P.gens):\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            raise NotImplementedError(\n+                \"multivariate partial fraction decomposition\")\n+        # If x is None, try each variable\n+        elif x is None:\n+            for var in P.gens:\n+                try:\n+                    return apart(f, var, full=full, **_options)\n+                except NotImplementedError:\n+                    continue\n \n     common, P, Q = P.cancel(Q)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..3ae3e77 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -55,10 +55,17 @@ def apart(f, x=None, full=False, **options):\n                     pass\n             return f.xreplace(dict(reps))\n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n+        if x is not None and (not any((sym in P.free_symbols - {x} for sym in P.gens))):\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            raise NotImplementedError('multivariate partial fraction decomposition')\n+        elif x is None:\n+            for var in P.gens:\n+                try:\n+                    return apart(f, var, full=full, **_options)\n+                except NotImplementedError:\n+                    continue\n     common, P, Q = P.cancel(Q)\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n", "normalized_occurrence": 1}
