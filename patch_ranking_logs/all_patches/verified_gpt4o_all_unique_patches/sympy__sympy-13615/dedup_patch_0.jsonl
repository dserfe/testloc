{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..1f89ab8 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -205,7 +205,10 @@ class Set(Basic):\n \n         elif isinstance(other, Interval):\n             if isinstance(self, Interval) or isinstance(self, FiniteSet):\n-                return Intersection(other, self.complement(S.Reals))\n+                if all(el.is_number for el in self):\n+                    return Intersection(other, self.complement(S.Reals))\n+                else:\n+                    return Complement(other, self, evaluate=False)\n \n         elif isinstance(other, Union):\n             return Union(o - self for o in other.args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..7276aab 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -62,7 +62,10 @@ class Set(Basic):\n             return Union((p for p in product_sets if p != other))\n         elif isinstance(other, Interval):\n             if isinstance(self, Interval) or isinstance(self, FiniteSet):\n-                return Intersection(other, self.complement(S.Reals))\n+                if all((el.is_number for el in self)):\n+                    return Intersection(other, self.complement(S.Reals))\n+                else:\n+                    return Complement(other, self, evaluate=False)\n         elif isinstance(other, Union):\n             return Union((o - self for o in other.args))\n         elif isinstance(other, Complement):\n", "normalized_occurrence": 1}
