{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..ebb4204 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -425,6 +425,18 @@ class Expression(BaseExpression, Combinable):\n class CombinedExpression(SQLiteNumericMixin, Expression):\n \n     def __init__(self, lhs, connector, rhs, output_field=None):\n+        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+        try:\n+            lhs_type = lhs.output_field.get_internal_type()\n+            rhs_type = rhs.output_field.get_internal_type()\n+        except FieldError:\n+            lhs_type = rhs_type = None\n+        if (connector == self.SUB and \n+            lhs_type in datetime_fields and \n+            lhs_type == rhs_type and \n+            output_field is None):\n+            from django.db.models import DurationField\n+            output_field = DurationField()\n         super().__init__(output_field=output_field)\n         self.connector = connector\n         self.lhs = lhs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..9726c6e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -226,6 +226,15 @@ class Expression(BaseExpression, Combinable):\n     pass\n class CombinedExpression(SQLiteNumericMixin, Expression):\n     def __init__(self, lhs, connector, rhs, output_field=None):\n+        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+        try:\n+            lhs_type = lhs.output_field.get_internal_type()\n+            rhs_type = rhs.output_field.get_internal_type()\n+        except FieldError:\n+            lhs_type = rhs_type = None\n+        if connector == self.SUB and lhs_type in datetime_fields and (lhs_type == rhs_type) and (output_field is None):\n+            from django.db.models import DurationField\n+            output_field = DurationField()\n         super().__init__(output_field=output_field)\n         self.connector = connector\n         self.lhs = lhs\n", "normalized_occurrence": 1}
