{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..faebd89 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,7 +972,20 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n+    import numbers\n+    import numpy as np\n+\n+    # Special handling for numeric types\n+    if isinstance(target_type, type) and issubclass(target_type, numbers.Number):\n+        # Allow int values where float is expected\n+        if (target_type is float and isinstance(x, (int, np.integer)) or\n+            # Handle numpy numeric types\n+            isinstance(x, (np.integer, np.floating)) and np.issubdtype(type(x), target_type) or\n+            isinstance(x, target_type)):\n+            return\n+        raise TypeError('`{}` must be a number of type {}, not {}.'\n+                        .format(name, target_type, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n                         .format(name, target_type, type(x)))\n \n@@ -980,4 +993,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..0dcf66a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,13 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    import numbers\n+    import numpy as np\n+    if isinstance(target_type, type) and issubclass(target_type, numbers.Number):\n+        if target_type is float and isinstance(x, (int, np.integer)) or (isinstance(x, (np.integer, np.floating)) and np.issubdtype(type(x), target_type)) or isinstance(x, target_type):\n+            return\n+        raise TypeError('`{}` must be a number of type {}, not {}.'.format(name, target_type, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
