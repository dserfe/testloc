{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5413", "model_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 4c5d4d8..8348e42 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -715,14 +715,16 @@ class RaisesContext:\n \n     def __enter__(self):\n         self.excinfo = _pytest._code.ExceptionInfo.for_later()\n-        return self.excinfo\n+        return self\n \n     def __exit__(self, *tp):\n         __tracebackhide__ = True\n         if tp[0] is None:\n             fail(self.message)\n         self.excinfo.__init__(tp)\n+        if tp[1] is not None:\n+            self.value = tp[1]  # Store the actual exception instance\n         suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n-        return suppress_exception\n+        return suppress_exception\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 75af5d2..3f1b1b2 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -221,12 +221,14 @@ class RaisesContext:\n         self.excinfo = None\n     def __enter__(self):\n         self.excinfo = _pytest._code.ExceptionInfo.for_later()\n-        return self.excinfo\n+        return self\n     def __exit__(self, *tp):\n         __tracebackhide__ = True\n         if tp[0] is None:\n             fail(self.message)\n         self.excinfo.__init__(tp)\n+        if tp[1] is not None:\n+            self.value = tp[1]\n         suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n", "normalized_occurrence": 1}
