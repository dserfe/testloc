{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13878", "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e880705..c78b819 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -150,9 +150,20 @@ def rv(symbol, cls, args):\n class ArcsinDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 'b')\n \n+    @property\n+    def set(self):\n+        return Interval(self.a, self.b)\n+\n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n \n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x <= a),\n+            ((2/pi)*asin(sqrt((x - a)/(b - a))), And(a <= x, x <= b)),\n+            (S.One, True))\n+\n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n     Create a Continuous Random Variable with an arcsin distribution.\n@@ -666,10 +677,20 @@ def ChiSquared(name, k):\n class DagumDistribution(SingleContinuousDistribution):\n     _argnames = ('p', 'a', 'b')\n \n+    @property\n+    def set(self):\n+        return Interval(0, oo)\n+\n     def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return Piecewise(\n+            (S.Zero, x <= 0),\n+            ((1 + (x/b)**(-a))**(-p), x > 0))\n+\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -1032,7 +1053,9 @@ def FisherZ(name, d1, d2):\n class FrechetDistribution(SingleContinuousDistribution):\n     _argnames = ('a', 's', 'm')\n \n-    set = Interval(0, oo)\n+    @property\n+    def set(self):\n+        return Interval(self.m, oo)\n \n     def __new__(cls, a, s=1, m=0):\n         a, s, m = list(map(sympify, (a, s, m)))\n@@ -1042,6 +1065,12 @@ class FrechetDistribution(SingleContinuousDistribution):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n \n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return Piecewise(\n+            (S.Zero, x <= m),\n+            (exp(-((x-m)/s)**(-a)), x > m))\n+\n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n     Create a continuous random variable with a Frechet distribution.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+    @property\n+    def set(self):\n+        return Interval(self.a, self.b)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return Piecewise((S.Zero, x <= a), (2 / pi * asin(sqrt((x - a) / (b - a))), And(a <= x, x <= b)), (S.One, True))\n+    @property\n+    def set(self):\n+        return Interval(0, oo)\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return Piecewise((S.Zero, x <= 0), ((1 + (x / b) ** (-a)) ** (-p), x > 0))\n-    set = Interval(0, oo)\n+    @property\n+    def set(self):\n+        return Interval(self.m, oo)\n+    def _cdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return Piecewise((S.Zero, x <= m), (exp(-((x - m) / s) ** (-a)), x > m))", "normalized_occurrence": 1}
