{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..875ed36 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,7 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return max(0, len(self._dataset._variables) - len(self._dataset._coord_names))\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n@@ -1694,6 +1694,7 @@ class Dataset(\n         self._assert_all_in_dataset(names)\n         obj = self.copy()\n         obj._coord_names.update(names)\n+        obj._coord_names.intersection_update(obj._variables)\n         return obj\n \n     def reset_coords(\n@@ -1731,6 +1732,8 @@ class Dataset(\n                 )\n         obj = self.copy()\n         obj._coord_names.difference_update(names)\n+        obj._coord_names.intersection_update(obj._variables)\n+        \n         if drop:\n             for name in names:\n                 del obj._variables[name]\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex fa0ec48..82cc313 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -163,7 +163,7 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     def __iter__(self) -> Iterator[Hashable]:\n         return (key for key in self._dataset._variables if key not in self._dataset._coord_names)\n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return max(0, len(self._dataset._variables) - len(self._dataset._coord_names))\n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n     def __getitem__(self, key: Hashable) -> DataArray:\n@@ -671,6 +671,7 @@ class Dataset(DataWithCoords, DatasetReductions, DatasetArithmetic, Mapping[Hash\n         self._assert_all_in_dataset(names)\n         obj = self.copy()\n         obj._coord_names.update(names)\n+        obj._coord_names.intersection_update(obj._variables)\n         return obj\n     def reset_coords(self: T_Dataset, names: Hashable | Iterable[Hashable] | None=None, drop: bool=False) -> T_Dataset:\n         if names is None:\n@@ -686,6 +687,7 @@ class Dataset(DataWithCoords, DatasetReductions, DatasetArithmetic, Mapping[Hash\n                 raise ValueError(f'cannot remove index coordinates with reset_coords: {bad_coords}')\n         obj = self.copy()\n         obj._coord_names.difference_update(names)\n+        obj._coord_names.intersection_update(obj._variables)\n         if drop:\n             for name in names:\n                 del obj._variables[name]\n", "normalized_occurrence": 1}
