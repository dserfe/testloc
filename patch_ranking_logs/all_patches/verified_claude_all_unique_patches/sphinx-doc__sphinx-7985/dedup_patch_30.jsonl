{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..b0e190d 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,6 +213,17 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n+                # Check if local reference exists in the documentation\n+                if uri.startswith('#'):\n+                    # Fragment-only reference - check in current document\n+                    target = uri[1:]\n+                    if target not in self.env.toc_secnumbers and target not in self.env.labels:\n+                        return 'broken', 'Anchor not found', 0\n+                else:\n+                    # Cross-document reference\n+                    docname, labelid = self.env.reftarget_roles.get(uri, (None, None))\n+                    if docname is None and uri not in self.env.titles:\n+                        return 'broken', 'Document or reference not found', 0\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..63c7436 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,6 +133,14 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n+                if uri.startswith('#'):\n+                    target = uri[1:]\n+                    if target not in self.env.toc_secnumbers and target not in self.env.labels:\n+                        return ('broken', 'Anchor not found', 0)\n+                else:\n+                    docname, labelid = self.env.reftarget_roles.get(uri, (None, None))\n+                    if docname is None and uri not in self.env.titles:\n+                        return ('broken', 'Document or reference not found', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n", "normalized_occurrence": 1}
