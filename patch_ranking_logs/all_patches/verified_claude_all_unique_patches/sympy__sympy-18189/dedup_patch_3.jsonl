{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..f1738d0 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -348,6 +348,11 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 final_soln.add(sol)\n         else:\n                 final_soln.add(sol)\n+    # Apply symbol reordering if needed\n+    if syms and syms != orig_var:\n+        dict_sym_index = dict(zip(syms, range(len(syms))))\n+        final_soln = {tuple([t[dict_sym_index[i]] for i in orig_var])\n+                    for t in final_soln}\n     return final_soln\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..1e504d6 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -189,6 +189,9 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 final_soln.add(sol)\n         else:\n             final_soln.add(sol)\n+    if syms and syms != orig_var:\n+        dict_sym_index = dict(zip(syms, range(len(syms))))\n+        final_soln = {tuple([t[dict_sym_index[i]] for i in orig_var]) for t in final_soln}\n     return final_soln\n def merge_solution(var, var_t, solution):\n     sol = []\n", "normalized_occurrence": 1}
