{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..fb179d0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -688,6 +688,16 @@ class SQLCompiler:\n         if opts is None:\n             opts = self.query.get_meta()\n         only_load = self.deferred_to_columns()\n+        \n+        # Special case: if this is a subquery for an '__in' lookup, only return the primary key\n+        if getattr(self.query, 'subquery', False) and any(\n+            child for child in getattr(self.query, 'where', [])\n+            if getattr(child, 'lookup_name', None) == 'in'\n+        ):\n+            pk = opts.pk\n+            alias = self.query.get_initial_alias()\n+            result.append(pk.get_col(alias))\n+            return result\n         start_alias = start_alias or self.query.get_initial_alias()\n         # The 'seen_models' is used to optimize checking the needed parent\n         # alias for a given field. This also includes None -> start_alias to\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..4a9efb1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -391,6 +391,11 @@ class SQLCompiler:\n         if opts is None:\n             opts = self.query.get_meta()\n         only_load = self.deferred_to_columns()\n+        if getattr(self.query, 'subquery', False) and any((child for child in getattr(self.query, 'where', []) if getattr(child, 'lookup_name', None) == 'in')):\n+            pk = opts.pk\n+            alias = self.query.get_initial_alias()\n+            result.append(pk.get_col(alias))\n+            return result\n         start_alias = start_alias or self.query.get_initial_alias()\n         seen_models = {None: start_alias}\n         for field in opts.concrete_fields:\n", "normalized_occurrence": 1}
