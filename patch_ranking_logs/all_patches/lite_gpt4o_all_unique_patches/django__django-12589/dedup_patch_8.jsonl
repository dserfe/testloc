{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..27b80ff 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -130,17 +130,20 @@ class SQLCompiler:\n             expressions.append(expr)\n         result = []\n         seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        expressions = self.collapse_group_by(expressions, having_group_by, select)\n \n         for expr in expressions:\n             sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n-            if (sql, params_hash) not in seen:\n+            # Avoid ambiguity in GROUP BY clause by checking against select aliases\n+            if (sql, params_hash) not in seen and sql not in select_aliases:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n         return result\n \n-    def collapse_group_by(self, expressions, having):\n+    def collapse_group_by(self, expressions, having, select):\n+        # Collect select aliases to remove ambiguity in GROUP BY clause\n+        select_aliases = {expr.target.alias for expr, _, _ in select if hasattr(expr, 'target') and expr.target}\n         # If the DB can group by primary key, then group by the primary key of\n         # query's main model. Note that for PostgreSQL the GROUP BY clause must\n         # include the primary key of every table, but for MySQL it is enough to\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..c5da2e3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -62,15 +62,16 @@ class SQLCompiler:\n             expressions.append(expr)\n         result = []\n         seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        expressions = self.collapse_group_by(expressions, having_group_by, select)\n         for expr in expressions:\n             sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n-            if (sql, params_hash) not in seen:\n+            if (sql, params_hash) not in seen and sql not in select_aliases:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n         return result\n-    def collapse_group_by(self, expressions, having):\n+    def collapse_group_by(self, expressions, having, select):\n+        select_aliases = {expr.target.alias for expr, _, _ in select if hasattr(expr, 'target') and expr.target}\n         if self.connection.features.allows_group_by_pk:\n             pk = None\n             for expr in expressions:\n", "normalized_occurrence": 1}
