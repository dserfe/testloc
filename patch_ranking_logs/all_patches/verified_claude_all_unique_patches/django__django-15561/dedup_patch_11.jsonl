{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15561", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 86692c3..f37fa33 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -429,6 +429,20 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         strict=False,\n     ):\n         \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n+        # Skip field alteration if only non-database relevant attributes\n+        # have changed, like 'choices' or other validation-related options\n+        if (\n+            old_type == new_type\n+            and old_field.column == new_field.column\n+            and old_field.null == new_field.null\n+            and old_field.unique == new_field.unique\n+            and old_field.primary_key == new_field.primary_key\n+            and old_field.db_index == new_field.db_index\n+            and bool(old_field.remote_field) == bool(new_field.remote_field)\n+            and old_db_params == new_db_params\n+        ):\n+            return\n+\n         # Use \"ALTER TABLE ... RENAME COLUMN\" if only the column name\n         # changed and there aren't any constraints.\n         if (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 9a783c9..bc37ac2 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -177,6 +177,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 return\n             self._remake_table(model, delete_field=field)\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n+        if old_type == new_type and old_field.column == new_field.column and (old_field.null == new_field.null) and (old_field.unique == new_field.unique) and (old_field.primary_key == new_field.primary_key) and (old_field.db_index == new_field.db_index) and (bool(old_field.remote_field) == bool(new_field.remote_field)) and (old_db_params == new_db_params):\n+            return\n         if self.connection.features.can_alter_table_rename_column and old_field.column != new_field.column and (self.column_sql(model, old_field) == self.column_sql(model, new_field)) and (not (old_field.remote_field and old_field.db_constraint or (new_field.remote_field and new_field.db_constraint))):\n             return self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))\n         self._remake_table(model, alter_field=(old_field, new_field))\n", "normalized_occurrence": 1}
