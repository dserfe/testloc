{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..42610ac 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -920,6 +920,13 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            # Check if the substituted expression is undefined\n+            if rv.has(zoo, oo, -oo, nan):\n+                from sympy.series.limits import Limit\n+                for old, new in sequence:\n+                    if old in rv.free_symbols:\n+                        rv = Limit(rv, old, new).doit()\n+                        break\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..5e1bbf3 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -329,6 +329,12 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            if rv.has(zoo, oo, -oo, nan):\n+                from sympy.series.limits import Limit\n+                for old, new in sequence:\n+                    if old in rv.free_symbols:\n+                        rv = Limit(rv, old, new).doit()\n+                        break\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
