{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..aeba1af 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,6 +73,7 @@ def unique_labels(*ys):\n     >>> unique_labels([1, 2, 10], [5, 11])\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n+    ys = [pd.Series(y).astype(y.dtype.numpy_dtype) if isinstance(y, pd.Series) and y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"] else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..2752314 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -17,6 +17,7 @@ def _unique_indicator(y):\n     return np.arange(check_array(y, input_name='y', accept_sparse=['csr', 'csc', 'coo']).shape[1])\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n+    ys = [pd.Series(y).astype(y.dtype.numpy_dtype) if isinstance(y, pd.Series) and y.dtype.name in ['Int64', 'Float64', 'boolean'] else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError('No argument has been passed.')\n", "normalized_occurrence": 1}
