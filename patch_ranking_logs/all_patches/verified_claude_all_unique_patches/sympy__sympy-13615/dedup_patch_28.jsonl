{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..d2c9794 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,6 +1932,9 @@ class FiniteSet(Set, EvalfMixin):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n+            # When other is an interval and self is the first arg of Complement\n+            return FiniteSet(*[el for el in self.args if (el.is_number and not other.contains(el)) or el.is_Symbol])\n+        elif isinstance(other, FiniteSet):\n             nums = sorted(m for m in self.args if m.is_number)\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..955d1a6 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -841,6 +841,8 @@ class FiniteSet(Set, EvalfMixin):\n         return self.__class__(*[el for el in self if el in other])\n     def _complement(self, other):\n         if isinstance(other, Interval):\n+            return FiniteSet(*[el for el in self.args if el.is_number and (not other.contains(el)) or el.is_Symbol])\n+        elif isinstance(other, FiniteSet):\n             nums = sorted((m for m in self.args if m.is_number))\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n", "normalized_occurrence": 1}
