{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..717156c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,12 +987,47 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        \n+        # Get the concrete model and its parents\n+        model = self.model\n+        parents = [\n+            parent for parent in model._meta.parents.keys()\n+            if not parent._meta.abstract\n+        ]\n+        \n+        # Handle updates for each parent model if field belongs to parent\n+        rows = 0\n+        fields_updated = set()\n+        for parent in parents:\n+            parent_fields = {f.name for f in parent._meta.fields}\n+            parent_updates = {\n+                k: v for k, v in kwargs.items() \n+                if k in parent_fields and k not in fields_updated\n+            }\n+            if parent_updates:\n+                # Get parent PKs for the matching child records\n+                child_pks = self.values_list('pk', flat=True)\n+                parent_filter = {\n+                    f\"{model._meta.model_name}_ptr_id__in\": child_pks\n+                }\n+                # Update the parent records\n+                parent_rows = parent.objects.filter(**parent_filter).update(**parent_updates)\n+                rows += parent_rows\n+                fields_updated.update(parent_updates.keys())\n+        \n+        # Handle remaining fields that belong to the child model\n+        remaining_updates = {\n+            k: v for k, v in kwargs.items()\n+            if k not in fields_updated\n+        }\n+        if remaining_updates:\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(remaining_updates)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                child_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            rows += child_rows or 0\n+            \n         self._result_cache = None\n         return rows\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..1fbb1b7 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,11 +532,27 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        model = self.model\n+        parents = [parent for parent in model._meta.parents.keys() if not parent._meta.abstract]\n+        rows = 0\n+        fields_updated = set()\n+        for parent in parents:\n+            parent_fields = {f.name for f in parent._meta.fields}\n+            parent_updates = {k: v for k, v in kwargs.items() if k in parent_fields and k not in fields_updated}\n+            if parent_updates:\n+                child_pks = self.values_list('pk', flat=True)\n+                parent_filter = {f'{model._meta.model_name}_ptr_id__in': child_pks}\n+                parent_rows = parent.objects.filter(**parent_filter).update(**parent_updates)\n+                rows += parent_rows\n+                fields_updated.update(parent_updates.keys())\n+        remaining_updates = {k: v for k, v in kwargs.items() if k not in fields_updated}\n+        if remaining_updates:\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.add_update_values(remaining_updates)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                child_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            rows += child_rows or 0\n         self._result_cache = None\n         return rows\n     update.alters_data = True\n", "normalized_occurrence": 1}
