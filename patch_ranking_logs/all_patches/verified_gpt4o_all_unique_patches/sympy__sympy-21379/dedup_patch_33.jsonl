{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..e0cb501 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -799,7 +799,13 @@ class Piecewise(Function):\n \n     def _eval_nseries(self, x, n, logx, cdir=0):\n         args = [(ec.expr._eval_nseries(x, n, logx), ec.cond) for ec in self.args]\n-        return self.func(*args)\n+        piecewise_expr = self.func(*args)\n+        # Revalidate assumptions after substitution\n+        if piecewise_expr.has(Piecewise):\n+            for expr, cond in piecewise_expr.args:\n+                if not cond.is_Boolean:\n+                    raise ValueError(\"Invalid condition detected after substitution\")\n+        return piecewise_expr\n \n     def _eval_power(self, s):\n         return self.func(*[(e**s, c) for e, c in self.args])\n@@ -813,7 +819,11 @@ class Piecewise(Function):\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n+            try:\n+                c = c._subs(old, new)\n+            except PolynomialError:\n+                # Skip substitution for conditions that raise PolynomialError\n+                continue\n             if c != False:\n                 args_exist = True\n                 e = e._subs(old, new)\n@@ -822,7 +832,13 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        piecewise_expr = self.func(*args)\n+        # Revalidate assumptions after substitution\n+        if piecewise_expr.has(Piecewise):\n+            for expr, cond in piecewise_expr.args:\n+                if not cond.is_Boolean:\n+                    raise ValueError(\"Invalid condition detected after substitution\")\n+        return piecewise_expr\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..5255e2c 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -437,14 +437,22 @@ class Piecewise(Function):\n         return list(uniq(int_expr))\n     def _eval_nseries(self, x, n, logx, cdir=0):\n         args = [(ec.expr._eval_nseries(x, n, logx), ec.cond) for ec in self.args]\n-        return self.func(*args)\n+        piecewise_expr = self.func(*args)\n+        if piecewise_expr.has(Piecewise):\n+            for expr, cond in piecewise_expr.args:\n+                if not cond.is_Boolean:\n+                    raise ValueError('Invalid condition detected after substitution')\n+        return piecewise_expr\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n+            try:\n+                c = c._subs(old, new)\n+            except PolynomialError:\n+                continue\n             if c != False:\n                 args_exist = True\n                 e = e._subs(old, new)\n@@ -453,7 +461,12 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        piecewise_expr = self.func(*args)\n+        if piecewise_expr.has(Piecewise):\n+            for expr, cond in piecewise_expr.args:\n+                if not cond.is_Boolean:\n+                    raise ValueError('Invalid condition detected after substitution')\n+        return piecewise_expr\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
