{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..b6e4f8a 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -810,7 +810,12 @@ class Piecewise(Function):\n         # somewhat more efficient by avoiding other substitutions\n         # and avoiding invalid conditions that appear after a\n         # True condition\n+        from sympy.core.relational import Relational\n+\n         args = list(self.args)\n+        real_assumptions = all([s.is_real for s in old.free_symbols]) if isinstance(old, Relational) else True\n+        if not real_assumptions:\n+            return self\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..7741701 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,7 +441,11 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n+        from sympy.core.relational import Relational\n         args = list(self.args)\n+        real_assumptions = all([s.is_real for s in old.free_symbols]) if isinstance(old, Relational) else True\n+        if not real_assumptions:\n+            return self\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "normalized_occurrence": 1}
