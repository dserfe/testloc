{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..e6a55f3 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -812,6 +812,13 @@ class AssertionRewriter(ast.NodeVisitor):\n         return res, self.explanation_param(self.display(res))\n \n     def visit_Assert(self, assert_):\n+\n+        def is_any_all_call(node):\n+            return (\n+                isinstance(node, ast.Call)\n+                and isinstance(node.func, ast.Name)\n+                and node.func.id in {\"all\", \"any\"}\n+            )\n         \"\"\"Return the AST statements to replace the ast.Assert instance.\n \n         This rewrites the test of an assertion to provide\n@@ -832,8 +839,9 @@ class AssertionRewriter(ast.NodeVisitor):\n                 filename=str(self.module_path),\n                 lineno=assert_.lineno,\n             )\n-\n-        self.statements = []\n+        if is_any_all_call(assert_.test):\n+            self.statements = self._rewrite_any_all_call(assert_)\n+            return self.statements\n         self.variables = []\n         self.variable_counter = itertools.count()\n         self.stack = []\n@@ -914,8 +922,56 @@ warn_explicit(\n         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n         expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n         return name, self.explanation_param(expr)\n-\n-    def visit_BoolOp(self, boolop):\n+            \n+    def _rewrite_any_all_call(self, assert_):\n+        assert_func = assert_.test.func.id\n+        test_iterable = assert_.test.args[0]\n+        \n+        # prepare to iterate over the iterable\n+        iter_var = self.variable()\n+        iter_assign = ast.Assign(\n+            targets=[ast.Name(id=iter_var, ctx=ast.Store())],\n+            value=test_iterable\n+        )\n+        \n+        # prepare the loop\n+        loop_var = self.variable()\n+        loop = ast.For(\n+            target=ast.Name(id=loop_var, ctx=ast.Store()),\n+            iter=ast.Name(id=iter_var, ctx=ast.Load()),\n+            body=[\n+                ast.If(\n+                    test=ast.UnaryOp(\n+                        op=ast.Not(),\n+                        operand=ast.Call(\n+                            func=assert_.test.args[0].elt if isinstance(assert_.test.args[0], ast.GeneratorExp) else assert_.test.args[0].elts[0],\n+                            args=[ast.Name(id=loop_var, ctx=ast.Load())],\n+                            keywords=[]\n+                        )\n+                    ),\n+                    body=[\n+                        ast.Raise(\n+                            exc=ast.Call(\n+                                func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                                args=[\n+                                    ast.BinOp(\n+                                        left=ast.Str(s=f\"{assert_func}({loop_var}) failed for \"),\n+                                        right=ast.Name(id=loop_var, ctx=ast.Load()),\n+                                        op=ast.Mod()\n+                                    )\n+                                ],\n+                                keywords=[]\n+                            ),\n+                            cause=None\n+                        )\n+                    ],\n+                    orelse=[]\n+                )\n+            ],\n+            orelse=[]\n+        )\n+        \n+        return [iter_assign, loop]\n         res_var = self.variable()\n         expl_list = self.assign(ast.List([], ast.Load()))\n         app = ast.Attribute(expl_list, \"append\", ast.Load())\n@@ -1081,4 +1137,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..5102134 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -448,11 +448,16 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(node)\n         return (res, self.explanation_param(self.display(res)))\n     def visit_Assert(self, assert_):\n+        def is_any_all_call(node):\n+            return isinstance(node, ast.Call) and isinstance(node.func, ast.Name) and (node.func.id in {'all', 'any'})\n+        'Return the AST statements to replace the ast.Assert instance.\\n\\n        This rewrites the test of an assertion to provide\\n        intermediate values and replace it with an if statement which\\n        raises an assertion error with a detailed explanation in case\\n        the expression is false.\\n\\n        '\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n             warnings.warn_explicit(PytestAssertRewriteWarning('assertion is always true, perhaps remove parentheses?'), category=None, filename=str(self.module_path), lineno=assert_.lineno)\n-        self.statements = []\n+        if is_any_all_call(assert_.test):\n+            self.statements = self._rewrite_any_all_call(assert_)\n+            return self.statements\n         self.variables = []\n         self.variable_counter = itertools.count()\n         self.stack = []\n@@ -499,7 +504,14 @@ class AssertionRewriter(ast.NodeVisitor):\n         test = ast.BoolOp(ast.Or(), [inlocs, dorepr])\n         expr = ast.IfExp(test, self.display(name), ast.Str(name.id))\n         return (name, self.explanation_param(expr))\n-    def visit_BoolOp(self, boolop):\n+    def _rewrite_any_all_call(self, assert_):\n+        assert_func = assert_.test.func.id\n+        test_iterable = assert_.test.args[0]\n+        iter_var = self.variable()\n+        iter_assign = ast.Assign(targets=[ast.Name(id=iter_var, ctx=ast.Store())], value=test_iterable)\n+        loop_var = self.variable()\n+        loop = ast.For(target=ast.Name(id=loop_var, ctx=ast.Store()), iter=ast.Name(id=iter_var, ctx=ast.Load()), body=[ast.If(test=ast.UnaryOp(op=ast.Not(), operand=ast.Call(func=assert_.test.args[0].elt if isinstance(assert_.test.args[0], ast.GeneratorExp) else assert_.test.args[0].elts[0], args=[ast.Name(id=loop_var, ctx=ast.Load())], keywords=[])), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.BinOp(left=ast.Str(s=f'{assert_func}({loop_var}) failed for '), right=ast.Name(id=loop_var, ctx=ast.Load()), op=ast.Mod())], keywords=[]), cause=None)], orelse=[])], orelse=[])\n+        return [iter_assign, loop]\n         res_var = self.variable()\n         expl_list = self.assign(ast.List([], ast.Load()))\n         app = ast.Attribute(expl_list, 'append', ast.Load())\n", "normalized_occurrence": 1}
