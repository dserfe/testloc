{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..bf01448 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,8 +355,11 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n-        # if initial was provided, it should override the values from instance\n+        # Ensure callable defaults in initial are executed\n         if initial is not None:\n+            for key, value in initial.items():\n+                if callable(value):\n+                    initial[key] = value()\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n         # It is False by default so overriding self.clean() and failing to call\n@@ -374,7 +377,9 @@ class BaseModelForm(BaseForm, AltersData):\n             use_required_attribute=use_required_attribute,\n             renderer=renderer,\n         )\n-        for formfield in self.fields.values():\n+        for formfield_name, formfield in self.fields.items():\n+            if hasattr(self, 'initial') and formfield_name in self.initial:\n+                formfield.show_hidden_initial = False\n             apply_limit_choices_to_to_formfield(formfield)\n \n     def _get_validation_exclusions(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..59dda5a 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -149,10 +149,15 @@ class BaseModelForm(BaseForm, AltersData):\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n         if initial is not None:\n+            for key, value in initial.items():\n+                if callable(value):\n+                    initial[key] = value()\n             object_data.update(initial)\n         self._validate_unique = False\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n-        for formfield in self.fields.values():\n+        for formfield_name, formfield in self.fields.items():\n+            if hasattr(self, 'initial') and formfield_name in self.initial:\n+                formfield.show_hidden_initial = False\n             apply_limit_choices_to_to_formfield(formfield)\n     def _get_validation_exclusions(self):\n         exclude = set()\n", "normalized_occurrence": 1}
