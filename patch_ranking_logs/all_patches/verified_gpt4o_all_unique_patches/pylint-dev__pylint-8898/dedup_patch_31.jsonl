{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..db6bd5a 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,7 +114,26 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    \n+    def custom_split(value: str) -> list[str]:\n+        \"\"\"Split the input string by commas not enclosed in parentheses.\"\"\"\n+        parts = []\n+        current = []\n+        depth = 0\n+        for char in value:\n+            if char == ',' and depth == 0:\n+                parts.append(''.join(current).strip())\n+                current = []\n+            else:\n+                if char == '(':\n+                    depth += 1\n+                elif char == ')':\n+                    depth -= 1\n+                current.append(char)\n+        parts.append(''.join(current).strip())\n+        return parts\n+    \n+    for pattern in custom_split(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..c23eb64 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,7 +55,23 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    def custom_split(value: str) -> list[str]:\n+        parts = []\n+        current = []\n+        depth = 0\n+        for char in value:\n+            if char == ',' and depth == 0:\n+                parts.append(''.join(current).strip())\n+                current = []\n+            else:\n+                if char == '(':\n+                    depth += 1\n+                elif char == ')':\n+                    depth -= 1\n+                current.append(char)\n+        parts.append(''.join(current).strip())\n+        return parts\n+    for pattern in custom_split(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
