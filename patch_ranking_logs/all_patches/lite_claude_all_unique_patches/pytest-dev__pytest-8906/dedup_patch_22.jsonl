{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..8e2e8f1 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -124,17 +124,26 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n \n-    This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n-    be called in doctests as well.\n+    This function can be used in two ways:\n+    \n+    1. Inside a test function to skip the current test\n+    2. At module level with ``allow_module_level=True`` to skip an entire module,\n+       which is particularly useful when the module contains syntax or imports\n+       that are only valid on certain Python versions::\n+\n+           if sys.version_info < (3, 8):\n+               skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+           \n+           # imports that require Python 3.8+\n+           from module_with_38_syntax import *\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level, skipping the rest\n+        of the module. Required for module-level skipping. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For simple test-level skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..d68b24f 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -82,17 +82,26 @@ def exit(msg: str, returncode: Optional[int]=None) -> 'NoReturn':\n def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     \"\"\"Skip an executing test with the given message.\n \n-    This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n-    be called in doctests as well.\n+    This function can be used in two ways:\n+    \n+    1. Inside a test function to skip the current test\n+    2. At module level with ``allow_module_level=True`` to skip an entire module,\n+       which is particularly useful when the module contains syntax or imports\n+       that are only valid on certain Python versions::\n+\n+           if sys.version_info < (3, 8):\n+               skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+           \n+           # imports that require Python 3.8+\n+           from module_with_38_syntax import *\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level, skipping the rest\n+        of the module. Required for module-level skipping. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For simple test-level skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n", "normalized_occurrence": 1}
