{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..24b2e62 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1350,16 +1350,19 @@ class ManyToManyField(RelatedField):\n         swappable=True,\n         **kwargs,\n     ):\n-        try:\n-            to._meta\n-        except AttributeError:\n-            if not isinstance(to, str):\n+        if isinstance(to, str):\n+            to_model = _lazy_related_operation(lambda: self.set_attributes_from_name(to), to)\n+        else:\n+            to_model = to\n+            try:\n+                to_model._meta\n+            except AttributeError:\n                 raise TypeError(\n                     \"%s(%r) is invalid. First parameter to ManyToManyField \"\n                     \"must be either a model, a model name, or the string %r\"\n                     % (\n                         self.__class__.__name__,\n-                        to,\n+                        to_model,\n                         RECURSIVE_RELATIONSHIP_CONSTANT,\n                     )\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..a9d8aa4 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -533,11 +533,14 @@ class ManyToManyField(RelatedField):\n     rel_class = ManyToManyRel\n     description = _('Many-to-many relationship')\n     def __init__(self, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=None, through=None, through_fields=None, db_constraint=True, db_table=None, swappable=True, **kwargs):\n-        try:\n-            to._meta\n-        except AttributeError:\n-            if not isinstance(to, str):\n-                raise TypeError('%s(%r) is invalid. First parameter to ManyToManyField must be either a model, a model name, or the string %r' % (self.__class__.__name__, to, RECURSIVE_RELATIONSHIP_CONSTANT))\n+        if isinstance(to, str):\n+            to_model = _lazy_related_operation(lambda: self.set_attributes_from_name(to), to)\n+        else:\n+            to_model = to\n+            try:\n+                to_model._meta\n+            except AttributeError:\n+                raise TypeError('%s(%r) is invalid. First parameter to ManyToManyField must be either a model, a model name, or the string %r' % (self.__class__.__name__, to_model, RECURSIVE_RELATIONSHIP_CONSTANT))\n         if symmetrical is None:\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n         if through is not None and db_table is not None:\n", "normalized_occurrence": 1}
