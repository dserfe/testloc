{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..dba2c28 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -218,7 +218,14 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                     self.visit_module(frame)\n \n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+\n+            # Check for type annotations in the function signature\n+            if isinstance(frame, astroid.FunctionDef) and node.name in frame.args.annotations:\n+                annotation = frame.args.annotations[node.name]\n+                values = {annotation}\n+            else:\n+                values = set(node.infer())\n+\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..ad13bb3 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -110,7 +110,11 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                 else:\n                     self.visit_module(frame)\n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+            if isinstance(frame, astroid.FunctionDef) and node.name in frame.args.annotations:\n+                annotation = frame.args.annotations[node.name]\n+                values = {annotation}\n+            else:\n+                values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n", "normalized_occurrence": 1}
