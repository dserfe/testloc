{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..9c33cf4 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -345,7 +345,9 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        # Use the validated X directly to avoid feature names warning\n+        scores = self.score_samples(X if issparse(X) else self._validate_data(X, reset=False))\n+        self.offset_ = np.percentile(scores, 100.0 * self.contamination)\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..b23a6eb 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -46,7 +46,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        scores = self.score_samples(X if issparse(X) else self._validate_data(X, reset=False))\n+        self.offset_ = np.percentile(scores, 100.0 * self.contamination)\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
