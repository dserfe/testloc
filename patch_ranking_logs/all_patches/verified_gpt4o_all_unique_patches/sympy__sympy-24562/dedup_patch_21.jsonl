{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..b5331ec 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1605,19 +1605,23 @@ class Rational(Number):\n                 else:\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp/fq\n-                    try:\n-                        p = fractions.Fraction(p)\n-                    except ValueError:\n-                        pass  # error will raise below\n+                    if q is None:\n+                        p = p.replace(' ', '')\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            fp = fractions.Fraction(p)\n+                            fq = fractions.Fraction(q)\n+                            p = fp/fq\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass  # error will raise below\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n                     else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        p = fractions.Fraction(p)\n+                        q = fractions.Fraction(q)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..35031bf 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1391,19 +1391,23 @@ class Rational(Number):\n                 else:\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp / fq\n-                    try:\n-                        p = fractions.Fraction(p)\n-                    except ValueError:\n-                        pass\n+                    if q is None:\n+                        p = p.replace(' ', '')\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            fp = fractions.Fraction(p)\n+                            fq = fractions.Fraction(q)\n+                            p = fp / fq\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n                     else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        p = fractions.Fraction(p)\n+                        q = fractions.Fraction(q)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n", "normalized_occurrence": 1}
