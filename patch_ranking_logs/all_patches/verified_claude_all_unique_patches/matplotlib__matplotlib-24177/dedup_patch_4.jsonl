{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..3e16cc1 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,8 +6737,10 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n+        # Always pass density to np.histogram for non-stacked cases\n+        # This ensures proper scaling for all histtypes\n         if density and not stacked:\n-            hist_kwargs['density'] = density\n+            hist_kwargs['density'] = True\n \n         # List to store all the top coordinates of the histograms\n         tops = []  # Will have shape (n_datasets, n_bins).\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..8b1927f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1944,7 +1944,7 @@ class Axes(_AxesBase):\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n         if density and (not stacked):\n-            hist_kwargs['density'] = density\n+            hist_kwargs['density'] = True\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n", "normalized_occurrence": 1}
