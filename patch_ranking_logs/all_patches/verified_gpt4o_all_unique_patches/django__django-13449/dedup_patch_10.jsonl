{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..5e00cb4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1253,8 +1253,14 @@ class OrderBy(BaseExpression):\n         self.descending = True\n \n \n-class Window(Expression):\n+class Window(Expression, SQLiteNumericMixin):\n     template = '%(expression)s OVER (%(window)s)'\n+\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        sql, params = super().as_sqlite(compiler, connection, **extra_context)\n+        if isinstance(self.source_expression, Lag) and self.source_expression.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n+        return sql, params\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n     # be introduced in the query as a result is not desired.\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n-class Window(Expression):\n+class Window(Expression, SQLiteNumericMixin):\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        sql, params = super().as_sqlite(compiler, connection, **extra_context)\n+        if isinstance(self.source_expression, Lag) and self.source_expression.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n+        return (sql, params)", "normalized_occurrence": 1}
