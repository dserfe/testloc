{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..6b04c28 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -96,12 +96,16 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n+            # The group_by values need to be preserved exactly as they were set,\n+            # especially for subqueries\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n+                    resolved = self.query.resolve_ref(expr)\n+                    # Ensure we keep the original reference for subqueries\n+                    if hasattr(resolved, 'target'):\n+                        expressions.append(resolved)\n+                    else:\n+                        expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n         # Note that even if the group_by is set, it is only the minimal\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..e7bdffb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -42,7 +42,11 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n+                    resolved = self.query.resolve_ref(expr)\n+                    if hasattr(resolved, 'target'):\n+                        expressions.append(resolved)\n+                    else:\n+                        expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n         for expr, _, _ in select:\n", "normalized_occurrence": 1}
