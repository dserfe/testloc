{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..baad51b 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -40,6 +40,32 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n+        \n+        # Pre-process to move AlterOrderWithRespectTo before dependent AddIndex\n+        reordered_operations = []\n+        alter_order_ops = {}  # model_name -> operation\n+        dependent_indexes = []  # (model_name, operation) pairs\n+        \n+        for operation in operations:\n+            if isinstance(operation, migrations.AlterOrderWithRespectTo):\n+                alter_order_ops[operation.name] = operation\n+            elif isinstance(operation, migrations.AddIndex):\n+                if '_order' in operation.index.fields:\n+                    dependent_indexes.append((operation.model_name, operation))\n+                else:\n+                    reordered_operations.append(operation)\n+            else:\n+                reordered_operations.append(operation)\n+        \n+        # Add AlterOrderWithRespectTo operations before their dependent indexes\n+        for model_name, alter_op in alter_order_ops.items():\n+            reordered_operations.append(alter_op)\n+            for idx_model, idx_op in dependent_indexes:\n+                if idx_model == model_name:\n+                    reordered_operations.append(idx_op)\n+        \n+        operations = reordered_operations\n+        \n         for i, operation in enumerate(operations):\n             right = True  # Should we reduce on the right or on the left.\n             # Compare it to each operation after it\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..fb866b2 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,6 +11,25 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n+        reordered_operations = []\n+        alter_order_ops = {}\n+        dependent_indexes = []\n+        for operation in operations:\n+            if isinstance(operation, migrations.AlterOrderWithRespectTo):\n+                alter_order_ops[operation.name] = operation\n+            elif isinstance(operation, migrations.AddIndex):\n+                if '_order' in operation.index.fields:\n+                    dependent_indexes.append((operation.model_name, operation))\n+                else:\n+                    reordered_operations.append(operation)\n+            else:\n+                reordered_operations.append(operation)\n+        for model_name, alter_op in alter_order_ops.items():\n+            reordered_operations.append(alter_op)\n+            for idx_model, idx_op in dependent_indexes:\n+                if idx_model == model_name:\n+                    reordered_operations.append(idx_op)\n+        operations = reordered_operations\n         for i, operation in enumerate(operations):\n             right = True\n             for j, other in enumerate(operations[i + 1:]):\n", "normalized_occurrence": 1}
