diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 2ec3cf6..89249c1 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1091,8 +1091,33 @@ def evaluateFalse(s: str):
     """
     Replaces operators with the SymPy equivalent and sets evaluate=False.
     """
-    node = ast.parse(s)
-    transformed_node = EvaluateFalseTransformer().visit(node)
+    # Special handling for relational operations
+    if any(op in s for op in ['<', '>', '<=', '>=', '==', '!=']):
+        # Parse into a Module node
+        node = ast.parse(s)
+        # Transform the node
+        transformed_node = EvaluateFalseTransformer().visit(node)
+        # Add evaluate=False parameter for relational operations
+        if isinstance(transformed_node.body[0].value, ast.Compare):
+            comp = transformed_node.body[0].value
+            func_name = {
+                ast.Lt: 'Lt',
+                ast.Gt: 'Gt',
+                ast.LtE: 'Le',
+                ast.GtE: 'Ge',
+                ast.Eq: 'Eq',
+                ast.NotEq: 'Ne'
+            }[type(comp.ops[0])]
+            # Create a new call node with evaluate=False
+            new_node = ast.Call(
+                func=ast.Name(id=func_name, ctx=ast.Load()),
+                args=[comp.left, comp.comparators[0]],
+                keywords=[ast.keyword(arg='evaluate', value=ast.Constant(value=False))]
+            )
+            transformed_node.body[0].value = new_node
+    else:
+        node = ast.parse(s)
+        transformed_node = EvaluateFalseTransformer().visit(node)
     # node is a Module, we want an Expression
     transformed_node = ast.Expression(transformed_node.body[0].value)
 
