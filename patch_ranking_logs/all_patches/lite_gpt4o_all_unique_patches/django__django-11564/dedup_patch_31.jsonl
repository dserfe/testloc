{"model_name_or_path": "agentless", "instance_id": "django__django-11564", "model_patch": "diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\nindex 3fb46e2..cd883fc 100644\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -440,8 +440,9 @@ class URLNode(Node):\n         # Try to look up the URL. If it fails, raise NoReverseMatch unless the\n         # {% url ... as var %} construct is used, in which case return nothing.\n         url = ''\n+        script_name = context.request.META.get('SCRIPT_NAME', '')\n         try:\n-            url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n+            url = script_name + reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n         except NoReverseMatch:\n             if self.asvar is None:\n                 raise\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaulttags.py b/django/template/defaulttags.py\nindex 06a9a59..1c31d44 100644\n--- a/django/template/defaulttags.py\n+++ b/django/template/defaulttags.py\n@@ -289,8 +289,9 @@ class URLNode(Node):\n             except AttributeError:\n                 current_app = None\n         url = ''\n+        script_name = context.request.META.get('SCRIPT_NAME', '')\n         try:\n-            url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n+            url = script_name + reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n         except NoReverseMatch:\n             if self.asvar is None:\n                 raise\n", "normalized_occurrence": 1}
