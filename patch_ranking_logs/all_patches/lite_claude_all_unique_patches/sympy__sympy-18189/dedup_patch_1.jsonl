{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..36d72cb 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -174,15 +174,15 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n     try:\n         var = list(eq.expand(force=True).free_symbols)\n         var.sort(key=default_sort_key)\n+        orig_var = var.copy()\n+        reorder_needed = False\n         if syms:\n             if not is_sequence(syms):\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                reorder_needed = True\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n@@ -348,6 +348,10 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 final_soln.add(sol)\n         else:\n                 final_soln.add(sol)\n+    if reorder_needed:\n+        dict_sym_index = dict(zip(syms, range(len(syms))))\n+        final_soln = {tuple([t[dict_sym_index[i]] for i in orig_var])\n+                    for t in final_soln}\n     return final_soln\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..c8bd25d 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -66,13 +66,14 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n     try:\n         var = list(eq.expand(force=True).free_symbols)\n         var.sort(key=default_sort_key)\n+        orig_var = var.copy()\n+        reorder_needed = False\n         if syms:\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                reorder_needed = True\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n@@ -189,6 +190,9 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 final_soln.add(sol)\n         else:\n             final_soln.add(sol)\n+    if reorder_needed:\n+        dict_sym_index = dict(zip(syms, range(len(syms))))\n+        final_soln = {tuple([t[dict_sym_index[i]] for i in orig_var]) for t in final_soln}\n     return final_soln\n def merge_solution(var, var_t, solution):\n     sol = []\n", "normalized_occurrence": 1}
