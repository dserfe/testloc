{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..4984db7 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -805,24 +805,23 @@ class Piecewise(Function):\n         return self.func(*[(e**s, c) for e, c in self.args])\n \n     def _eval_subs(self, old, new):\n-        # this is strictly not necessary, but we can keep track\n-        # of whether True or False conditions arise and be\n-        # somewhat more efficient by avoiding other substitutions\n-        # and avoiding invalid conditions that appear after a\n-        # True condition\n+        # Handle substitutions while preserving Piecewise structure\n         args = list(self.args)\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n+        newargs = []\n+        for e, c in args:\n+            # First substitute in the condition to avoid premature evaluation\n             c = c._subs(old, new)\n             if c != False:\n                 args_exist = True\n+                # Only substitute in expression if condition is not False\n                 e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n-                break\n+                newargs.append((e, c))\n+                if c == True:\n+                    break\n         if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+            newargs = [(Undefined, True)]\n+        return self.func(*newargs)\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..f3e2b27 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -443,17 +443,18 @@ class Piecewise(Function):\n     def _eval_subs(self, old, new):\n         args = list(self.args)\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n+        newargs = []\n+        for e, c in args:\n             c = c._subs(old, new)\n             if c != False:\n                 args_exist = True\n                 e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n-                break\n+                newargs.append((e, c))\n+                if c == True:\n+                    break\n         if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+            newargs = [(Undefined, True)]\n+        return self.func(*newargs)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
