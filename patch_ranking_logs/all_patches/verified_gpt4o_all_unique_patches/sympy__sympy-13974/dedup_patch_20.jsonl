{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..ab41e46 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -340,7 +340,9 @@ def tensor_product_simp_Mul(e):\n                 for i in range(len(new_args)):\n                     new_args[i] = new_args[i] * next\n             current = next\n-        return Mul(*c_part) * TensorProduct(*new_args)\n+        if c_part:\n+            return Mul(*c_part) * TensorProduct(*new_args)\n+        return TensorProduct(*new_args)\n     else:\n         return e\n \n@@ -382,7 +384,10 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            return TensorProduct(*(arg**e.exp for arg in base.args))\n+        return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +395,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..6e8df88 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -154,14 +154,19 @@ def tensor_product_simp_Mul(e):\n                 for i in range(len(new_args)):\n                     new_args[i] = new_args[i] * next\n             current = next\n-        return Mul(*c_part) * TensorProduct(*new_args)\n+        if c_part:\n+            return Mul(*c_part) * TensorProduct(*new_args)\n+        return TensorProduct(*new_args)\n     else:\n         return e\n def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            return TensorProduct(*(arg ** e.exp for arg in base.args))\n+        return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
