{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..e613894 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -340,6 +340,12 @@ class LiteralIncludeReader:\n \n         return lines\n \n+    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        if 'dedent' in self.options:\n+            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+        else:\n+            return lines\n+\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n@@ -354,12 +360,6 @@ class LiteralIncludeReader:\n \n         return lines\n \n-    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n-        else:\n-            return lines\n-\n \n class LiteralInclude(SphinxDirective):\n     \"\"\"\n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..ad20e5d 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -223,6 +223,11 @@ class LiteralIncludeReader:\n             else:\n                 raise ValueError('end-before pattern not found: %s' % end)\n         return lines\n+    def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n+        if 'dedent' in self.options:\n+            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+        else:\n+            return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n@@ -233,11 +238,6 @@ class LiteralIncludeReader:\n         if append:\n             lines.append(append + '\\n')\n         return lines\n-    def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n-        else:\n-            return lines\n class LiteralInclude(SphinxDirective):\n     has_content = False\n     required_arguments = 1\n", "normalized_occurrence": 8}
