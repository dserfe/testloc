{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cd0e9c6..2138626 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1209,7 +1209,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n \n     def format_args(self, **kwargs: Any) -> str:\n         if self.env.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n+            if self.env.config.autodoc_typehints in ('none', 'description'):\n+                kwargs.setdefault('show_annotation', False)\n \n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n@@ -1265,6 +1266,14 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__,\n                                               self.env.config.autodoc_type_aliases)\n+                if self.env.config.autodoc_typehints == 'none':\n+                    overload = overload.replace(\n+                        parameters=[\n+                            param.replace(annotation=Parameter.empty)\n+                            for param in overload.parameters.values()\n+                        ],\n+                        return_annotation=Signature.empty\n+                    )\n \n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n@@ -1451,7 +1460,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n \n     def format_args(self, **kwargs: Any) -> str:\n         if self.env.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n+            if self.env.config.autodoc_typehints in ('none', 'description'):\n+                kwargs.setdefault('show_annotation', False)\n \n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex be7144a..a12b9f4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -659,7 +659,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         return inspect.isfunction(member) or inspect.isbuiltin(member) or (inspect.isroutine(member) and isinstance(parent, ModuleDocumenter))\n     def format_args(self, **kwargs: Any) -> str:\n         if self.env.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n+            if self.env.config.autodoc_typehints in ('none', 'description'):\n+                kwargs.setdefault('show_annotation', False)\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n@@ -701,6 +702,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n             for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n                 overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n+                if self.env.config.autodoc_typehints == 'none':\n+                    overload = overload.replace(parameters=[param.replace(annotation=Parameter.empty) for param in overload.parameters.values()], return_annotation=Signature.empty)\n                 sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n@@ -803,7 +806,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         return (None, None, None)\n     def format_args(self, **kwargs: Any) -> str:\n         if self.env.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n+            if self.env.config.autodoc_typehints in ('none', 'description'):\n+                kwargs.setdefault('show_annotation', False)\n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n         except TypeError as exc:\n", "normalized_occurrence": 1}
