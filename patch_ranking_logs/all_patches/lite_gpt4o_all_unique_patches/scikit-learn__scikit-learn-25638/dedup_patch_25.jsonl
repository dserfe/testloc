{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..95dcbf6 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -74,6 +74,14 @@ def unique_labels(*ys):\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n     xp, is_array_api = get_namespace(*ys)\n+\n+    # Handle nullable pandas dtypes by converting them to their numpy equivalents\n+    ys = [\n+        y.astype('int64') if y.dtype.name == 'Int64' else\n+        y.astype('float64') if y.dtype.name == 'Float64' else\n+        y.astype('bool') if y.dtype.name == 'boolean' else y\n+        for y in ys\n+    ]\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..9221817 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -18,6 +18,7 @@ def _unique_indicator(y):\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n+    ys = [y.astype('int64') if y.dtype.name == 'Int64' else y.astype('float64') if y.dtype.name == 'Float64' else y.astype('bool') if y.dtype.name == 'boolean' else y for y in ys]\n     if not ys:\n         raise ValueError('No argument has been passed.')\n     ys_types = set((type_of_target(x) for x in ys))\n", "normalized_occurrence": 1}
