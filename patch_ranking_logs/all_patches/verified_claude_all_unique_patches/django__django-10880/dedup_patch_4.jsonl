{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..902b86e 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -14,7 +14,17 @@ __all__ = [\n \n \n class Aggregate(Func):\n-    template = '%(function)s(%(distinct)s%(expressions)s)'\n+    def __init__(self, *expressions, distinct=False, filter=None, **extra):\n+        if distinct and not self.allow_distinct:\n+            raise TypeError(\"%s does not allow distinct.\" % self.__class__.__name__)\n+        self.distinct = distinct\n+        super().__init__(*expressions, filter=filter, **extra)\n+        \n+    @property\n+    def template(self):\n+        if self.distinct:\n+            return '%(function)s(%(distinct)s %(expressions)s)'\n+        return '%(function)s(%(expressions)s)'\n     contains_aggregate = True\n     name = None\n     filter_template = '%s FILTER (WHERE %%(filter)s)'\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n-    template = '%(function)s(%(distinct)s%(expressions)s)'\n+    def __init__(self, *expressions, distinct=False, filter=None, **extra):\n+        if distinct and (not self.allow_distinct):\n+            raise TypeError('%s does not allow distinct.' % self.__class__.__name__)\n+        self.distinct = distinct\n+        super().__init__(*expressions, filter=filter, **extra)\n+    @property\n+    def template(self):\n+        if self.distinct:\n+            return '%(function)s(%(distinct)s %(expressions)s)'\n+        return '%(function)s(%(expressions)s)'", "normalized_occurrence": 1}
