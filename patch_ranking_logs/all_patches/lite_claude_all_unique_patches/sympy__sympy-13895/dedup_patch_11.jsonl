{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..59e82d6 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -255,36 +255,11 @@ class Pow(Expr):\n             elif ask(Q.odd(e), assumptions):\n                 return -Pow(-b, e)\n \n-    def _eval_power(self, other):\n-        from sympy import Abs, arg, exp, floor, im, log, re, sign\n-        b, e = self.as_base_exp()\n-        if b is S.NaN:\n-            return (b**e)**other  # let __new__ handle it\n-\n-        s = None\n-        if other.is_integer:\n-            s = 1\n-        elif b.is_polar:  # e.g. exp_polar, besselj, var('p', polar=True)...\n-            s = 1\n-        elif e.is_real is not None:\n-            # helper functions ===========================\n-            def _half(e):\n-                \"\"\"Return True if the exponent has a literal 2 as the\n-                denominator, else None.\"\"\"\n-                if getattr(e, 'q', None) == 2:\n-                    return True\n-                n, d = e.as_numer_denom()\n-                if n.is_integer and d == 2:\n-                    return True\n-            def _n2(e):\n-                \"\"\"Return ``e`` evaluated to a Number with 2 significant\n-                digits, else None.\"\"\"\n-                try:\n-                    rv = e.evalf(2, strict=True)\n-                    if rv.is_Number:\n-                        return rv\n-                except PrecisionExhausted:\n-                    pass\n+\n+            \n+            # For negative bases with non-integer exponents, use complex log\n+            if b.is_negative and not e.is_integer:\n+                return exp(other * e * (log(abs(b)) + S.Pi*S.ImaginaryUnit))\n             # ===================================================\n             if e.is_real:\n                 # we need _half(other) with constant floor or\n@@ -1581,4 +1556,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..a7fd66a 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -120,30 +120,8 @@ class Pow(Expr):\n                 return Pow(-b, e)\n             elif ask(Q.odd(e), assumptions):\n                 return -Pow(-b, e)\n-    def _eval_power(self, other):\n-        from sympy import Abs, arg, exp, floor, im, log, re, sign\n-        b, e = self.as_base_exp()\n-        if b is S.NaN:\n-            return (b ** e) ** other\n-        s = None\n-        if other.is_integer:\n-            s = 1\n-        elif b.is_polar:\n-            s = 1\n-        elif e.is_real is not None:\n-            def _half(e):\n-                if getattr(e, 'q', None) == 2:\n-                    return True\n-                n, d = e.as_numer_denom()\n-                if n.is_integer and d == 2:\n-                    return True\n-            def _n2(e):\n-                try:\n-                    rv = e.evalf(2, strict=True)\n-                    if rv.is_Number:\n-                        return rv\n-                except PrecisionExhausted:\n-                    pass\n+            if b.is_negative and (not e.is_integer):\n+                return exp(other * e * (log(abs(b)) + S.Pi * S.ImaginaryUnit))\n             if e.is_real:\n                 if e == -1:\n                     if _half(other):\n", "normalized_occurrence": 1}
