{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..d0df3e2 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -958,9 +958,13 @@ class ComboField(Field):\n         list of Field instances.\n         \"\"\"\n         super().clean(value)\n-        for field in self.fields:\n-            value = field.clean(value)\n-        return value\n+        cleaned_data = []\n+        for i, field in enumerate(self.fields):\n+            field_value = value[i] if i < len(value) else None\n+            if field_value in self.empty_values and field.required:\n+                raise ValidationError(self.error_messages['incomplete'], code='incomplete')\n+            cleaned_data.append(field.clean(field_value))\n+        return cleaned_data\n \n \n class MultiValueField(Field):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..b20b82e 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -562,9 +562,13 @@ class ComboField(Field):\n         self.fields = fields\n     def clean(self, value):\n         super().clean(value)\n-        for field in self.fields:\n-            value = field.clean(value)\n-        return value\n+        cleaned_data = []\n+        for i, field in enumerate(self.fields):\n+            field_value = value[i] if i < len(value) else None\n+            if field_value in self.empty_values and field.required:\n+                raise ValidationError(self.error_messages['incomplete'], code='incomplete')\n+            cleaned_data.append(field.clean(field_value))\n+        return cleaned_data\n class MultiValueField(Field):\n     default_error_messages = {'invalid': _('Enter a list of values.'), 'incomplete': _('Enter a complete value.')}\n     def __init__(self, fields, *, require_all_fields=True, **kwargs):\n", "normalized_occurrence": 1}
