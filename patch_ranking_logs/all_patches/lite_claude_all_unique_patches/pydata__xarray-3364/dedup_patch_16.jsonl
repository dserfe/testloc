{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..b933d33 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -16,6 +17,7 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing=True,  # New parameter to control handling of missing variables\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -80,6 +82,10 @@ def concat(\n     join : {'outer', 'inner', 'left', 'right', 'exact'}, optional\n         String indicating how to combine differing indexes\n         (excluding dim) in objects\n+    ignore_missing : bool, optional\n+        If True (default), automatically handle missing variables by filling them\n+        with NaN values, similar to pandas concat behavior. If False, raise an\n+        error when encountering datasets with different variables.\n \n         - 'outer': use the union of object indexes\n         - 'inner': use the intersection of object indexes\n@@ -128,7 +134,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing)\n \n \n def _calc_concat_dim_coord(dim):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..2f6b724 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -4,7 +4,7 @@ from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n from .variable import IndexVariable, Variable, as_variable\n from .variable import concat as concat_vars\n-def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer'):\n+def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer', ignore_missing=True):\n     from .dataset import Dataset\n     from .dataarray import DataArray\n     try:\n@@ -19,7 +19,7 @@ def concat(objs, dim, data_vars='all', coords='different', compat='equals', posi\n         f = _dataset_concat\n     else:\n         raise TypeError('can only concatenate xarray Dataset and DataArray objects, got %s' % type(first_obj))\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing)\n def _calc_concat_dim_coord(dim):\n     from .dataarray import DataArray\n     if isinstance(dim, str):\n", "normalized_occurrence": 1}
