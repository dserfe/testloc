{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..49076d7 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -42,6 +42,11 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     ``target_units`` may be a single unit/quantity, or a collection of\n     units/quantities.\n \n+    Raises\n+    ======\n+    ValueError\n+        If the target units are not dimensionally compatible with the expression.\n+\n     Examples\n     ========\n \n@@ -101,6 +106,12 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n \n+    # Check dimensional compatibility\n+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    target_dim = Dimension(unit_system.get_dimensional_expr(Mul.fromiter(target_units)))\n+    if expr_dim != target_dim:\n+        raise ValueError(\"Target units are not dimensionally compatible with expression\")\n+\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..3a60c3b 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -38,6 +38,10 @@ def convert_to(expr, target_units, unit_system='SI'):\n         elif isinstance(expr, Quantity):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    target_dim = Dimension(unit_system.get_dimensional_expr(Mul.fromiter(target_units)))\n+    if expr_dim != target_dim:\n+        raise ValueError('Target units are not dimensionally compatible with expression')\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "normalized_occurrence": 1}
