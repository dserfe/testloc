{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..96de754 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -194,7 +194,10 @@ class NDimArray(Printable):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n \n-            result = []\n+            if not pointer:\n+                return [], ()\n+            if not pointer:\n+                return [], ()\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n                 raise ValueError(\"could not determine shape unambiguously\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..9d6f028 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -70,7 +70,10 @@ class NDimArray(Printable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n-            result = []\n+            if not pointer:\n+                return ([], ())\n+            if not pointer:\n+                return ([], ())\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n                 raise ValueError('could not determine shape unambiguously')\n", "normalized_occurrence": 1}
