{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14349", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex fde6d56..5b3083d 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        # Check for control characters\n+        if '\\r' in value or '\\n' in value or '\\t' in value:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n", "occurrence": 18, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex b926208..2fc4acd 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -58,6 +58,8 @@ class URLValidator(RegexValidator):\n     def __call__(self, value):\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n+        if '\\r' in value or '\\n' in value or '\\t' in value:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         scheme = value.split('://')[0].lower()\n         if scheme not in self.schemes:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n", "normalized_occurrence": 35}
