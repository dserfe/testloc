{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..99444e8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,16 +234,21 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        current_row = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if current_row < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            current_row -= numrows\n+\n+        current_col = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if current_col < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            current_col -= numcols\n+\n+        if isinstance(i, Symbol) or isinstance(j, Symbol):\n+            return MatrixElement(self.blocks[row_block, col_block], i - sum(self.rowblocksizes[:row_block]), j - sum(self.colblocksizes[:col_block])).doit()\n+        return self.blocks[row_block, col_block][current_row, current_col]\n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..f20b5b1 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,19 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        current_row = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if current_row < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            current_row -= numrows\n+        current_col = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if current_col < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            current_col -= numcols\n+        if isinstance(i, Symbol) or isinstance(j, Symbol):\n+            return MatrixElement(self.blocks[row_block, col_block], i - sum(self.rowblocksizes[:row_block]), j - sum(self.colblocksizes[:col_block])).doit()\n+        return self.blocks[row_block, col_block][current_row, current_col]\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
