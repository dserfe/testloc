{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..3401cec 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -934,9 +934,14 @@ class Model(metaclass=ModelBase):\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n                 elif getattr(self, field.attname) is None:\n+                    # Use pk from related object if it has been saved after\n+                    # an assignment.\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n+                    # Ensure the field is updated in case of non-numeric primary key.\n+                    if field.is_relation and not field.remote_field.multiple:\n+                        field.remote_field.set_cached_value(self, obj)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..11ca2af 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -495,6 +495,8 @@ class Model(metaclass=ModelBase):\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n                 elif getattr(self, field.attname) is None:\n                     setattr(self, field.attname, obj.pk)\n+                    if field.is_relation and (not field.remote_field.multiple):\n+                        field.remote_field.set_cached_value(self, obj)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n     def delete(self, using=None, keep_parents=False):\n", "normalized_occurrence": 1}
