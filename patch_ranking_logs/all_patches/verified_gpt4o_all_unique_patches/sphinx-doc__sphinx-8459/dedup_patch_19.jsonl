{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..d4d1345 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -30,10 +30,19 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n     except (TypeError, ValueError):\n+        if app.config.autodoc_type_aliases:\n+            try:\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n+            except (TypeError, ValueError):\n+                pass\n         pass\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..044e7ff 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -14,10 +14,19 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n     except (TypeError, ValueError):\n+        if app.config.autodoc_type_aliases:\n+            try:\n+                for param in sig.parameters.values():\n+                    if param.annotation is not param.empty:\n+                        annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n+                if sig.return_annotation is not sig.empty:\n+                    annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n+            except (TypeError, ValueError):\n+                pass\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n", "normalized_occurrence": 1}
