{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..3ec7761 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -132,15 +132,16 @@ class Piecewise(Function):\n             if cond is true:\n                 break\n \n-        if options.pop('evaluate', True):\n+        evaluate = options.pop('evaluate', True)\n+        if evaluate:\n             r = cls.eval(*newargs)\n-        else:\n-            r = None\n-\n-        if r is None:\n+            if r is not None:\n+                return r\n+        \n+        if any(isinstance(arg, ExprCondPair) for arg in newargs):\n             return Basic.__new__(cls, *newargs, **options)\n         else:\n-            return r\n+            return cls(*newargs, evaluate=False)\n \n     @classmethod\n     def eval(cls, *_args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..9bab0c1 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -50,14 +50,15 @@ class Piecewise(Function):\n             newargs.append(pair)\n             if cond is true:\n                 break\n-        if options.pop('evaluate', True):\n+        evaluate = options.pop('evaluate', True)\n+        if evaluate:\n             r = cls.eval(*newargs)\n-        else:\n-            r = None\n-        if r is None:\n+            if r is not None:\n+                return r\n+        if any((isinstance(arg, ExprCondPair) for arg in newargs)):\n             return Basic.__new__(cls, *newargs, **options)\n         else:\n-            return r\n+            return cls(*newargs, evaluate=False)\n     @classmethod\n     def eval(cls, *_args):\n         from sympy.functions.elementary.complexes import im, re\n", "normalized_occurrence": 1}
