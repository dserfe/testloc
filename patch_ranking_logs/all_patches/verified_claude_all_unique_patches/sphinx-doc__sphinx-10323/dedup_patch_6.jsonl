{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..38f3892 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -341,22 +341,31 @@ class LiteralIncludeReader:\n         return lines\n \n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n-\n+        # Prepend is now handled in dedent_filter to preserve indentation\n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n-\n+        # Append is now handled in dedent_filter to preserve indentation\n         return lines\n \n     def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+            # Only dedent the original content lines, not prepended/appended lines\n+            prepend = self.options.get('prepend')\n+            append = self.options.get('append')\n+            dedent_amount = self.options.get('dedent')\n+            \n+            result = []\n+            if prepend:\n+                result.append(prepend + '\\n')\n+            \n+            # Dedent only the main content\n+            result.extend(dedent_lines(lines, dedent_amount, location=location))\n+            \n+            if append:\n+                result.append(append + '\\n')\n+            \n+            return result\n         else:\n             return lines\n \n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..521aa89 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -224,18 +224,21 @@ class LiteralIncludeReader:\n                 raise ValueError('end-before pattern not found: %s' % end)\n         return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n         return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+            prepend = self.options.get('prepend')\n+            append = self.options.get('append')\n+            dedent_amount = self.options.get('dedent')\n+            result = []\n+            if prepend:\n+                result.append(prepend + '\\n')\n+            result.extend(dedent_lines(lines, dedent_amount, location=location))\n+            if append:\n+                result.append(append + '\\n')\n+            return result\n         else:\n             return lines\n class LiteralInclude(SphinxDirective):\n", "normalized_occurrence": 1}
