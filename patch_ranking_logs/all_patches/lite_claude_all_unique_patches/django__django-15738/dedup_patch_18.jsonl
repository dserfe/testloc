{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 5562d34..1bd05fe 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -189,10 +189,16 @@ class ProjectState:\n \n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n         model_state = self.models[app_label, model_name]\n-        if objs := model_state.options.get(option_name):\n+        if value_to_remove is None:\n+            # Remove the entire option if value_to_remove is None\n+            model_state.options.pop(option_name, None)\n+        elif objs := model_state.options.get(option_name):\n             model_state.options[option_name] = [\n                 obj for obj in objs if tuple(obj) != tuple(value_to_remove)\n             ]\n+            # Remove the option entirely if no constraints remain\n+            if not model_state.options[option_name]:\n+                model_state.options.pop(option_name)\n         self.reload_model(app_label, model_name, delay=True)\n \n     def alter_model_managers(self, app_label, model_name, managers):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 18747a4..f0d023d 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -123,8 +123,12 @@ class ProjectState:\n         self.reload_model(app_label, model_name, delay=True)\n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n         model_state = self.models[app_label, model_name]\n-        if (objs := model_state.options.get(option_name)):\n+        if value_to_remove is None:\n+            model_state.options.pop(option_name, None)\n+        elif (objs := model_state.options.get(option_name)):\n             model_state.options[option_name] = [obj for obj in objs if tuple(obj) != tuple(value_to_remove)]\n+            if not model_state.options[option_name]:\n+                model_state.options.pop(option_name)\n         self.reload_model(app_label, model_name, delay=True)\n     def alter_model_managers(self, app_label, model_name, managers):\n         model_state = self.models[app_label, model_name]\n", "normalized_occurrence": 1}
