{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..cb42674 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -366,6 +366,27 @@ class TestReport(BaseReport):\n                     )\n         for rwhen, key, content in item._report_sections:\n             sections.append((\"Captured {} {}\".format(key, rwhen), content))\n+        if isinstance(longrepr, ExceptionInfo):\n+            reprcrash = longrepr._getreprcrash()\n+            reprcrash_dict = {\n+                \"path\": str(reprcrash.path),\n+                \"lineno\": reprcrash.lineno,\n+                \"message\": reprcrash.message,\n+            }\n+            chain = []\n+            exc = longrepr\n+            while exc is not None:\n+                reprtraceback = exc._getreprcrash()\n+                chain.append({\n+                    \"path\": str(reprtraceback.path),\n+                    \"lineno\": reprtraceback.lineno,\n+                    \"message\": reprtraceback.message,\n+                })\n+                exc = exc.__cause__ if exc.__cause__ is not None else exc.__context__\n+            longrepr = {\n+                \"reprcrash\": reprcrash_dict,\n+                \"chain\": chain,\n+            }\n         return cls(\n             item.nodeid,\n             item.location,\n@@ -418,6 +439,15 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n+            if isinstance(data['longrepr'], dict) and 'reprcrash' in data['longrepr']:\n+                reprcrash = data['longrepr']['reprcrash']\n+                chain = data['longrepr']['chain']\n+\n+                excinfo = ExceptionInfo.from_dict({\n+                    \"reprcrash\": reprcrash,\n+                    \"chain\": chain,\n+                })\n+                data['longrepr'] = excinfo\n             return TestReport._from_json(data)\n         elif data[\"_report_type\"] == \"CollectReport\":\n             return CollectReport._from_json(data)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..3e80f68 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -185,6 +185,16 @@ class TestReport(BaseReport):\n                 longrepr = item._repr_failure_py(excinfo, style=item.config.getoption('tbstyle', 'auto'))\n         for rwhen, key, content in item._report_sections:\n             sections.append(('Captured {} {}'.format(key, rwhen), content))\n+        if isinstance(longrepr, ExceptionInfo):\n+            reprcrash = longrepr._getreprcrash()\n+            reprcrash_dict = {'path': str(reprcrash.path), 'lineno': reprcrash.lineno, 'message': reprcrash.message}\n+            chain = []\n+            exc = longrepr\n+            while exc is not None:\n+                reprtraceback = exc._getreprcrash()\n+                chain.append({'path': str(reprtraceback.path), 'lineno': reprtraceback.lineno, 'message': reprtraceback.message})\n+                exc = exc.__cause__ if exc.__cause__ is not None else exc.__context__\n+            longrepr = {'reprcrash': reprcrash_dict, 'chain': chain}\n         return cls(item.nodeid, item.location, keywords, outcome, longrepr, when, sections, duration, user_properties=item.user_properties)\n class CollectReport(BaseReport):\n     when = 'collect'\n@@ -213,6 +223,11 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n+            if isinstance(data['longrepr'], dict) and 'reprcrash' in data['longrepr']:\n+                reprcrash = data['longrepr']['reprcrash']\n+                chain = data['longrepr']['chain']\n+                excinfo = ExceptionInfo.from_dict({'reprcrash': reprcrash, 'chain': chain})\n+                data['longrepr'] = excinfo\n             return TestReport._from_json(data)\n         elif data['_report_type'] == 'CollectReport':\n             return CollectReport._from_json(data)\n", "normalized_occurrence": 1}
