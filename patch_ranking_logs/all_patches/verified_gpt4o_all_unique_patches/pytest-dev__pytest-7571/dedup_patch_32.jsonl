{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..ff68a77 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -352,6 +352,9 @@ class LogCaptureFixture:\n \n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n+        # restore handler level\n+        self.handler.setLevel(self._initial_logger_levels.get(None, logging.NOTSET))\n+\n         # restore log levels\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n@@ -435,6 +438,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self.handler.setLevel(level)\n \n     @contextmanager\n     def at_level(\n@@ -449,6 +453,7 @@ class LogCaptureFixture:\n         logger_obj = logging.getLogger(logger)\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n+        self.handler.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..6d309d0 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -165,6 +165,7 @@ class LogCaptureFixture:\n         self._item = item\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n+        self.handler.setLevel(self._initial_logger_levels.get(None, logging.NOTSET))\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n@@ -192,11 +193,13 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        self.handler.setLevel(level)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n+        self.handler.setLevel(level)\n         handler_orig_level = self.handler.level\n         self.handler.setLevel(level)\n         try:\n", "normalized_occurrence": 1}
