{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..de73817 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -981,6 +981,17 @@ class Piecewise(Function):\n             last = ITE(c, a, last)\n         return _canonical(last)\n \n+    def _eval_subs(self, old, new):\n+        \"\"\"\n+        Handles substitutions for Piecewise expressions\n+        \"\"\"\n+        if old.is_number and new.is_number:\n+            # For numeric substitutions, substitute in each branch expression\n+            # but leave conditions unchanged\n+            return self.func(*[(e._subs(old, new), c) for e, c in self.args])\n+        # For symbolic substitutions, let the parent class handle it\n+        return None\n+\n     def _eval_rewrite_as_KroneckerDelta(self, *args):\n         from sympy import Ne, Eq, Not, KroneckerDelta\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..70a9e0a 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -548,6 +548,10 @@ class Piecewise(Function):\n         for a, c in reversed(args[:i]):\n             last = ITE(c, a, last)\n         return _canonical(last)\n+    def _eval_subs(self, old, new):\n+        if old.is_number and new.is_number:\n+            return self.func(*[(e._subs(old, new), c) for e, c in self.args])\n+        return None\n     def _eval_rewrite_as_KroneckerDelta(self, *args):\n         from sympy import Ne, Eq, Not, KroneckerDelta\n         rules = {And: [False, False], Or: [True, True], Not: [True, False], Eq: [None, None], Ne: [None, None]}\n", "normalized_occurrence": 1}
