{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..fba64f2 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -69,7 +69,10 @@ class MigrationAutodetector:\n             )\n         elif isinstance(obj, COMPILED_REGEX_TYPE):\n             return RegexObject(obj)\n-        elif isinstance(obj, type):\n+        elif isinstance(obj, type) or (hasattr(obj, \"__func__\") and hasattr(obj, \"__self__\")):\n+            if hasattr(obj, \"__func__\") and hasattr(obj, \"__self__\"):\n+                # Handle methods from nested classes\n+                return f\"{obj.__self__.__module__}.{obj.__self__.__qualname__}.{obj.__func__.__name__}\"\n             # If this is a type that implements 'deconstruct' as an instance method,\n             # avoid treating this as being deconstructible itself - see #22951\n             return obj\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..67e49d6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -34,7 +34,9 @@ class MigrationAutodetector:\n             return (obj.func, self.deep_deconstruct(obj.args), self.deep_deconstruct(obj.keywords))\n         elif isinstance(obj, COMPILED_REGEX_TYPE):\n             return RegexObject(obj)\n-        elif isinstance(obj, type):\n+        elif isinstance(obj, type) or (hasattr(obj, '__func__') and hasattr(obj, '__self__')):\n+            if hasattr(obj, '__func__') and hasattr(obj, '__self__'):\n+                return f'{obj.__self__.__module__}.{obj.__self__.__qualname__}.{obj.__func__.__name__}'\n             return obj\n         elif hasattr(obj, 'deconstruct'):\n             deconstructed = obj.deconstruct()\n", "normalized_occurrence": 1}
