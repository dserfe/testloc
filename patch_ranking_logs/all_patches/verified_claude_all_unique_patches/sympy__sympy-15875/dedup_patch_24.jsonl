{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..acefb5d 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -535,35 +535,37 @@ class Add(Expr, AssocOp):\n             # is zero or not\n             return\n         nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        im_I = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n                     nz.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                if a.is_zero:\n+                    continue\n+                elif a.is_zero is False:\n+                    im_I.append(a)\n+                else:\n+                    return\n             elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                im_I.append(a*S.ImaginaryUnit)\n             else:\n                 return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n+        \n+        b = self.func(*nz) if nz else S.Zero\n+        im_sum = self.func(*im_I) if im_I else S.Zero\n+        \n+        if b.is_zero is None or im_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n+        if b.is_zero and im_sum.is_zero:\n+            return True\n+        if b.is_zero is False or im_sum.is_zero is False:\n             return False\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..52d6b84 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -289,35 +289,35 @@ class Add(Expr, AssocOp):\n         if self.is_commutative is False:\n             return\n         nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        im_I = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n                     nz.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                if a.is_zero:\n+                    continue\n+                elif a.is_zero is False:\n+                    im_I.append(a)\n+                else:\n+                    return\n             elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                im_I.append(a * S.ImaginaryUnit)\n             else:\n                 return\n-        if z == len(self.args):\n-            return True\n-        if len(nz) == len(self.args):\n+        b = self.func(*nz) if nz else S.Zero\n+        im_sum = self.func(*im_I) if im_I else S.Zero\n+        if b.is_zero is None or im_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n-        if b.is_zero is False:\n+        if b.is_zero and im_sum.is_zero:\n+            return True\n+        if b.is_zero is False or im_sum.is_zero is False:\n             return False\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
