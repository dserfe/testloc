{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..9d6ce73 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -997,10 +997,13 @@ class QuerySet:\n         return clone\n \n     def union(self, *other_qs, all=False):\n-        # If the query is an EmptyQuerySet, combine all nonempty querysets.\n+        # If the query is an EmptyQuerySet, return it directly\n         if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+            return self\n+        # If any of the other querysets is empty, the union with it can be skipped\n+        other_qs = tuple(q for q in other_qs if not isinstance(q, EmptyQuerySet))\n+        if not other_qs:\n+            return self\n         return self._combinator_query('union', *other_qs, all=all)\n \n     def intersection(self, *other_qs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..2ea34f2 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -588,8 +588,10 @@ class QuerySet:\n         return clone\n     def union(self, *other_qs, all=False):\n         if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+            return self\n+        other_qs = tuple((q for q in other_qs if not isinstance(q, EmptyQuerySet)))\n+        if not other_qs:\n+            return self\n         return self._combinator_query('union', *other_qs, all=all)\n     def intersection(self, *other_qs):\n         if isinstance(self, EmptyQuerySet):\n", "normalized_occurrence": 1}
