{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..522ec72 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2085,8 +2085,12 @@ class Query(BaseExpression):\n             # Add to existing deferred names.\n             self.deferred_loading = existing.union(field_names), True\n         else:\n-            # Remove names from the set of any existing \"immediate load\" names.\n+            # If we're in immediate mode, we need to keep only the fields that\n+            # are both in the immediate set and not in the deferred set\n             self.deferred_loading = existing.difference(field_names), False\n+            if existing:\n+                # If we have immediate fields set, we need to further filter them\n+                self.deferred_loading = self.deferred_loading[0], False\n \n     def add_immediate_loading(self, field_names):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..df80bac 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1141,6 +1141,8 @@ class Query(BaseExpression):\n             self.deferred_loading = (existing.union(field_names), True)\n         else:\n             self.deferred_loading = (existing.difference(field_names), False)\n+            if existing:\n+                self.deferred_loading = (self.deferred_loading[0], False)\n     def add_immediate_loading(self, field_names):\n         existing, defer = self.deferred_loading\n         field_names = set(field_names)\n", "normalized_occurrence": 1}
