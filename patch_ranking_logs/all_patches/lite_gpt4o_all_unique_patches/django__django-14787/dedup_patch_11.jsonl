{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..ac8dd1a 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,10 +37,10 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        func = method.__get__(self, type(self))\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n-        return bound_method(*args, **kwargs)\n+            func = dec(func)\n+        return func(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n     for dec in decorators:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..8d4511f 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -15,10 +15,10 @@ def _multi_decorate(decorators, method):\n     else:\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n-        bound_method = partial(method.__get__(self, type(self)))\n+        func = method.__get__(self, type(self))\n         for dec in decorators:\n-            bound_method = dec(bound_method)\n-        return bound_method(*args, **kwargs)\n+            func = dec(func)\n+        return func(*args, **kwargs)\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n     update_wrapper(_wrapper, method)\n", "normalized_occurrence": 1}
