{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..d44c3ca 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -95,6 +95,17 @@ def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n         return arg\n \n \n+def private_members_option(arg: Any) -> Union[object, List[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\n+    \n+    Similar to :members: option, this allows specifying which private members\n+    to document. If no argument is given, all private members are documented.\n+    \"\"\"\n+    if arg is None or arg is True:\n+        return ALL\n+    return [x.strip() for x in arg.split(',') if x.strip()]\n+\n+\n def member_order_option(arg: Any) -> Optional[str]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg is None:\n", "occurrence": 2, "normalized_patch": "--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n+def private_members_option(arg: Any) -> Union[object, List[str]]:\n+    \"\"\"Used to convert the :private-members: option to auto directives.\n+    \n+    Similar to :members: option, this allows specifying which private members\n+    to document. If no argument is given, all private members are documented.\n+    \"\"\"\n+    if arg is None or arg is True:\n+        return ALL\n+    return [x.strip() for x in arg.split(',') if x.strip()]\n+", "normalized_occurrence": 2}
