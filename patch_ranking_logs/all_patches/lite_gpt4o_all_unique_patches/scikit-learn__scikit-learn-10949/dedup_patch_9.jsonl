{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..3c8843d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -514,6 +514,19 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             except ComplexWarning:\n                 raise ValueError(\"Complex data not supported\\n\"\n                                  \"{}\\n\".format(array))\n+                \n+        # Check if input is a pandas DataFrame\n+        if isinstance(array, pd.DataFrame):\n+            dtype_orig = array.dtypes\n+            array = array.values\n+            if dtype_numeric:\n+                array = array.astype(np.float64)\n+            if warn_on_dtype and not all(dtype_orig == array.dtype):\n+                msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                       % (dtype_orig, array.dtype, context))\n+                warnings.warn(msg, DataConversionWarning)\n+                raise ValueError(\"Complex data not supported\\n\"\n+                                 \"{}\\n\".format(array))\n \n         # It is possible that the np.array(..) gave no warning. This happens\n         # when no dtype conversion happened, for example dtype = None. The\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..1a36d1b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -158,6 +158,15 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n                 array = np.asarray(array, dtype=dtype, order=order)\n             except ComplexWarning:\n                 raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n+        if isinstance(array, pd.DataFrame):\n+            dtype_orig = array.dtypes\n+            array = array.values\n+            if dtype_numeric:\n+                array = array.astype(np.float64)\n+            if warn_on_dtype and (not all(dtype_orig == array.dtype)):\n+                msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+                warnings.warn(msg, DataConversionWarning)\n+                raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n         _ensure_no_complex_data(array)\n         if ensure_2d:\n             if array.ndim == 0:\n", "normalized_occurrence": 1}
