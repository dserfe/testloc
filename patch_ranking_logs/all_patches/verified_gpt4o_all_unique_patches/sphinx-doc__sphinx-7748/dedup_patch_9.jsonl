{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..6c7755f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1067,8 +1067,11 @@ class DocstringSignatureMixin:\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n             result = args, retann\n-            # don't look any further\n-            break\n+            # continue to look for additional signatures if found\n+            if result is None:\n+                result = args, retann\n+            else:\n+                result = (result[0] + \"\\n\" + args, result[1] + \"\\n\" + retann)\n         return result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n@@ -1088,7 +1091,15 @@ class DocstringSignatureMixin:\n             result = self._find_signature()\n             if result is not None:\n                 self.args, self.retann = result\n-        return super().format_signature(**kwargs)  # type: ignore\n+        if self.args:\n+            # handle multiple signatures\n+            signatures = []\n+            for sig, retann in zip(self.args.split(\"\\n\"), self.retann.split(\"\\n\")):\n+                formatted_signature = f\"{sig} -> {retann}\" if retann else sig\n+                signatures.append(formatted_signature)\n+            return \"\\n\".join(signatures)\n+        else:\n+            return super().format_signature(**kwargs)  # type: ignore\n \n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..38d75d9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -777,7 +777,10 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n             result = (args, retann)\n-            break\n+            if result is None:\n+                result = (args, retann)\n+            else:\n+                result = (result[0] + '\\n' + args, result[1] + '\\n' + retann)\n         return result\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n@@ -793,7 +796,14 @@ class DocstringSignatureMixin:\n             result = self._find_signature()\n             if result is not None:\n                 self.args, self.retann = result\n-        return super().format_signature(**kwargs)\n+        if self.args:\n+            signatures = []\n+            for sig, retann in zip(self.args.split('\\n'), self.retann.split('\\n')):\n+                formatted_signature = f'{sig} -> {retann}' if retann else sig\n+                signatures.append(formatted_signature)\n+            return '\\n'.join(signatures)\n+        else:\n+            return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n     \"\"\"\n", "normalized_occurrence": 1}
