{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..ece825c 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,7 +343,11 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Split prepend into lines and insert each line\n+            prepend_lines = prepend.split('\\n')\n+            # Ensure each line gets the appropriate indentation\n+            for index, prepend_line in enumerate(prepend_lines):\n+                lines.insert(index, prepend_line + '\\n')\n \n         return lines\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..24f0231 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,7 +226,9 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            prepend_lines = prepend.split('\\n')\n+            for index, prepend_line in enumerate(prepend_lines):\n+                lines.insert(index, prepend_line + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 1}
