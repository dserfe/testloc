{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..d784204 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1156,9 +1156,15 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n+                        # Only match within the same module/class context\n+                        context = ''\n+                        if modname:\n+                            context = modname + '.'\n+                            if classname:\n+                                context += classname + '.'\n+                        searchname = context + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n+                                   if (oname == searchname) and\n                                    self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..f6bbe57 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -683,8 +683,13 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        context = ''\n+                        if modname:\n+                            context = modname + '.'\n+                            if classname:\n+                                context += classname + '.'\n+                        searchname = context + name\n+                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname == searchname and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
