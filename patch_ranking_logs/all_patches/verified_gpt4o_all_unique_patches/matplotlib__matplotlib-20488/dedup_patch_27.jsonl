{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..ff86086 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1474,7 +1474,12 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n-                raise ValueError(\"Invalid vmin or vmax\")\n+                if t_vmin < np.finfo(float).eps:\n+                    t_vmin = np.finfo(float).eps\n+                if t_vmax < np.finfo(float).eps:\n+                    t_vmax = np.finfo(float).eps\n+                if not np.isfinite([t_vmin, t_vmax]).all():\n+                    raise ValueError(\"Invalid vmin or vmax\")\n             t_value -= t_vmin\n             t_value /= (t_vmax - t_vmin)\n             t_value = np.ma.masked_invalid(t_value, copy=False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..dab7257 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1270,7 +1270,12 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n-                raise ValueError('Invalid vmin or vmax')\n+                if t_vmin < np.finfo(float).eps:\n+                    t_vmin = np.finfo(float).eps\n+                if t_vmax < np.finfo(float).eps:\n+                    t_vmax = np.finfo(float).eps\n+                if not np.isfinite([t_vmin, t_vmax]).all():\n+                    raise ValueError('Invalid vmin or vmax')\n             t_value -= t_vmin\n             t_value /= t_vmax - t_vmin\n             t_value = np.ma.masked_invalid(t_value, copy=False)\n", "normalized_occurrence": 1}
