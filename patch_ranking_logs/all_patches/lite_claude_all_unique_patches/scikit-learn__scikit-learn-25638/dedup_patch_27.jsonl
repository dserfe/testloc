{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..a5501d0 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -340,9 +340,21 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n-        # [obj_1] and not [\"label_1\"]\n-        return \"unknown\"\n+    if not issparse(y) and y.dtype == object:\n+        if hasattr(y, \"flags\") and y.flags.writeable:\n+            # Try to convert object array with numbers only to numeric array\n+            try:\n+                numeric_y = xp.asarray(y, dtype=float)\n+                # No error raised => array contains only numbers\n+                y = numeric_y\n+            except (ValueError, TypeError):\n+                if not isinstance(y.flat[0], str):\n+                    # [obj_1] and not [\"label_1\"]\n+                    return \"unknown\"\n+        else:\n+            if not isinstance(y.flat[0], str):\n+                # [obj_1] and not [\"label_1\"]\n+                return \"unknown\"\n \n     # Check if multioutput\n     if y.ndim == 2 and y.shape[1] > 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..d6e169b 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -91,8 +91,16 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n-        return 'unknown'\n+    if not issparse(y) and y.dtype == object:\n+        if hasattr(y, 'flags') and y.flags.writeable:\n+            try:\n+                numeric_y = xp.asarray(y, dtype=float)\n+                y = numeric_y\n+            except (ValueError, TypeError):\n+                if not isinstance(y.flat[0], str):\n+                    return 'unknown'\n+        elif not isinstance(y.flat[0], str):\n+            return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n     else:\n", "normalized_occurrence": 1}
