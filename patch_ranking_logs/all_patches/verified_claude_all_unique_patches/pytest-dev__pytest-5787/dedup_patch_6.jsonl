{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..5e08d44 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,27 +162,33 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            def _disassemble_tb(tb):\n+                result = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in result[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                result[\"reprentries\"] = new_entries\n+                return result\n+\n+            def _disassemble_chain(excinfo):\n+                result = {\n+                    \"reprtraceback\": _disassemble_tb(excinfo.reprtraceback),\n+                    \"reprcrash\": excinfo.reprcrash.__dict__.copy(),\n+                    \"sections\": excinfo.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n+                # Handle chained exceptions\n+                if hasattr(excinfo, \"chain\"):\n+                    result[\"chain\"] = [_disassemble_chain(exc) for exc in excinfo.chain]\n+                return result\n \n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+            return _disassemble_chain(rep.longrepr)\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n@@ -218,6 +224,57 @@ class BaseReport:\n             ):\n \n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n+                def _unserialize_entries(reprtraceback):\n+                    unserialized_entries = []\n+                    for entry_data in reprtraceback[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                filelocrepr=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    return unserialized_entries\n+\n+                def _unserialize_exc_info(exc_data):\n+                    _reprtraceback = exc_data[\"reprtraceback\"]\n+                    _reprcrash = exc_data[\"reprcrash\"]\n+                    \n+                    _reprtraceback[\"reprentries\"] = _unserialize_entries(_reprtraceback)\n+                    \n+                    exception_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**_reprtraceback),\n+                        reprcrash=ReprFileLocation(**_reprcrash),\n+                    )\n+                    \n+                    for section in exc_data[\"sections\"]:\n+                        exception_info.addsection(*section)\n+                        \n+                    if \"chain\" in exc_data:\n+                        exception_info.chain = [\n+                            _unserialize_exc_info(chain_exc) for chain_exc in exc_data[\"chain\"]\n+                        ]\n+                        \n+                    return exception_info\n+\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n \n                 unserialized_entries = []\n@@ -250,14 +307,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n-\n-                for section in reportdict[\"longrepr\"][\"sections\"]:\n-                    exception_info.addsection(*section)\n-                reportdict[\"longrepr\"] = exception_info\n+                reportdict[\"longrepr\"] = _unserialize_exc_info(reportdict[\"longrepr\"])\n \n         return cls(**reportdict)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..9ce1264 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,23 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def _disassemble_tb(tb):\n+                result = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in result['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                result['reprentries'] = new_entries\n+                return result\n+            def _disassemble_chain(excinfo):\n+                result = {'reprtraceback': _disassemble_tb(excinfo.reprtraceback), 'reprcrash': excinfo.reprcrash.__dict__.copy(), 'sections': excinfo.sections}\n+                if hasattr(excinfo, 'chain'):\n+                    result['chain'] = [_disassemble_chain(exc) for exc in excinfo.chain]\n+                return result\n+            return _disassemble_chain(rep.longrepr)\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -107,6 +113,38 @@ class BaseReport:\n         if reportdict['longrepr']:\n             if 'reprcrash' in reportdict['longrepr'] and 'reprtraceback' in reportdict['longrepr']:\n                 reprtraceback = reportdict['longrepr']['reprtraceback']\n+                def _unserialize_entries(reprtraceback):\n+                    unserialized_entries = []\n+                    for entry_data in reprtraceback['reprentries']:\n+                        data = entry_data['data']\n+                        entry_type = entry_data['type']\n+                        if entry_type == 'ReprEntry':\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data['reprfuncargs']:\n+                                reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                            if data['reprfileloc']:\n+                                reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                            if data['reprlocals']:\n+                                reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                            reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                        elif entry_type == 'ReprEntryNative':\n+                            reprentry = ReprEntryNative(data['lines'])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    return unserialized_entries\n+                def _unserialize_exc_info(exc_data):\n+                    _reprtraceback = exc_data['reprtraceback']\n+                    _reprcrash = exc_data['reprcrash']\n+                    _reprtraceback['reprentries'] = _unserialize_entries(_reprtraceback)\n+                    exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**_reprtraceback), reprcrash=ReprFileLocation(**_reprcrash))\n+                    for section in exc_data['sections']:\n+                        exception_info.addsection(*section)\n+                    if 'chain' in exc_data:\n+                        exception_info.chain = [_unserialize_exc_info(chain_exc) for chain_exc in exc_data['chain']]\n+                    return exception_info\n                 reprcrash = reportdict['longrepr']['reprcrash']\n                 unserialized_entries = []\n                 reprentry = None\n@@ -130,10 +168,7 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n-                for section in reportdict['longrepr']['sections']:\n-                    exception_info.addsection(*section)\n-                reportdict['longrepr'] = exception_info\n+                reportdict['longrepr'] = _unserialize_exc_info(reportdict['longrepr'])\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n     url = 'https://github.com/pytest-dev/pytest/issues'\n", "normalized_occurrence": 1}
