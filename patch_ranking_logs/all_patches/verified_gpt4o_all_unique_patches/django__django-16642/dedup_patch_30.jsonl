{"model_name_or_path": "agentless", "instance_id": "django__django-16642", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex b918697..fdbd959 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -605,14 +605,20 @@ class FileResponse(StreamingHttpResponse):\n         filename = os.path.basename(self.filename or filename)\n         if self._no_explicit_content_type:\n             if filename:\n-                content_type, encoding = mimetypes.guess_type(filename)\n-                # Encoding isn't set to prevent browsers from automatically\n-                # uncompressing files.\n-                content_type = {\n-                    \"bzip2\": \"application/x-bzip\",\n-                    \"gzip\": \"application/gzip\",\n-                    \"xz\": \"application/x-xz\",\n-                }.get(encoding, content_type)\n+                extension = os.path.splitext(filename)[1].lower()\n+                if extension == '.br':\n+                    content_type = 'application/x-brotli'\n+                elif extension == '.z':\n+                    content_type = 'application/x-compress'\n+                else:\n+                    content_type, encoding = mimetypes.guess_type(filename)\n+                    # Encoding isn't set to prevent browsers from automatically\n+                    # uncompressing files.\n+                    content_type = {\n+                        \"bzip2\": \"application/x-bzip\",\n+                        \"gzip\": \"application/gzip\",\n+                        \"xz\": \"application/x-xz\",\n+                    }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 508a8a7..99a9196 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -328,8 +328,14 @@ class FileResponse(StreamingHttpResponse):\n         filename = os.path.basename(self.filename or filename)\n         if self._no_explicit_content_type:\n             if filename:\n-                content_type, encoding = mimetypes.guess_type(filename)\n-                content_type = {'bzip2': 'application/x-bzip', 'gzip': 'application/gzip', 'xz': 'application/x-xz'}.get(encoding, content_type)\n+                extension = os.path.splitext(filename)[1].lower()\n+                if extension == '.br':\n+                    content_type = 'application/x-brotli'\n+                elif extension == '.z':\n+                    content_type = 'application/x-compress'\n+                else:\n+                    content_type, encoding = mimetypes.guess_type(filename)\n+                    content_type = {'bzip2': 'application/x-bzip', 'gzip': 'application/gzip', 'xz': 'application/x-xz'}.get(encoding, content_type)\n                 self.headers['Content-Type'] = content_type or 'application/octet-stream'\n             else:\n                 self.headers['Content-Type'] = 'application/octet-stream'\n", "normalized_occurrence": 1}
