{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..75622ca 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1330,7 +1330,14 @@ class PairGrid(Grid):\n         \"\"\"\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        if 'hue' in kwargs:\n+            hue = kwargs.pop('hue')\n+            self.data['_hue_temp_'] = hue\n+            self._hue_var = '_hue_temp_'\n         self._map_bivariate(func, indices, **kwargs)\n+        if '_hue_temp_' in self.data.columns:\n+            del self.data['_hue_temp_']\n+            self._hue_var = None\n \n         return self\n \n@@ -1565,11 +1572,14 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n+        if self._hue_var is not None:\n+            hue = self.data[self._hue_var]\n             kwargs.update({\n                 \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n             })\n         func(x=x, y=y, **kwargs)\n+        if '_hue_temp_' in self.data.columns:\n+            self._hue_var = None\n \n         self._update_legend_data(ax)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..b2bedae 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -607,7 +607,14 @@ class PairGrid(Grid):\n     def map(self, func, **kwargs):\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n+        if 'hue' in kwargs:\n+            hue = kwargs.pop('hue')\n+            self.data['_hue_temp_'] = hue\n+            self._hue_var = '_hue_temp_'\n         self._map_bivariate(func, indices, **kwargs)\n+        if '_hue_temp_' in self.data.columns:\n+            del self.data['_hue_temp_']\n+            self._hue_var = None\n         return self\n     def map_lower(self, func, **kwargs):\n         indices = zip(*np.tril_indices_from(self.axes, -1))\n@@ -747,9 +754,12 @@ class PairGrid(Grid):\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n+        if self._hue_var is not None:\n+            hue = self.data[self._hue_var]\n             kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n         func(x=x, y=y, **kwargs)\n+        if '_hue_temp_' in self.data.columns:\n+            self._hue_var = None\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n         kwargs = kwargs.copy()\n", "normalized_occurrence": 1}
