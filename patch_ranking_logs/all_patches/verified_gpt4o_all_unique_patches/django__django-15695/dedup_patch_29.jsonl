{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..ad7c01c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,7 +967,28 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            from_model = from_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                from_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                from_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        from_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            new_index = models.Index(\n+                fields=self.old_fields,\n+                name=matching_index_name[0],\n+            )\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            schema_editor.rename_index(model, new_index, self.old_name)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..cda6310 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -436,6 +436,14 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n+            from_model = from_state.apps.get_model(app_label, self.model_name)\n+            columns = [from_model._meta.get_field(field).column for field in self.old_fields]\n+            matching_index_name = schema_editor._constraint_names(from_model, column_names=columns, index=True)\n+            if len(matching_index_name) != 1:\n+                raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), from_model._meta.db_table, ', '.join(columns)))\n+            new_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            schema_editor.rename_index(model, new_index, self.old_name)\n             return\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n", "normalized_occurrence": 1}
