{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..0c83c45 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -72,6 +72,22 @@ class DraggableLegend(DraggableOffsetBox):\n         self._update = update\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+        \n+    def __getstate__(self):\n+        \"\"\"Get state for pickling.\"\"\"\n+        state = self.__dict__.copy()\n+        # Remove unpicklable canvas reference\n+        state['canvas'] = None\n+        state['figure'] = None\n+        return state\n+        \n+    def __setstate__(self, state):\n+        \"\"\"Set state when unpickling.\"\"\"\n+        self.__dict__ = state\n+        # Restore canvas reference from legend when unpickled\n+        if self.legend is not None:\n+            self.canvas = self.legend.figure.canvas\n+            self.figure = self.legend.figure\n \n     def finalize_offset(self):\n         if self._update == \"loc\":\n", "normalized_patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['canvas'] = None\n+        state['figure'] = None\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__ = state\n+        if self.legend is not None:\n+            self.canvas = self.legend.figure.canvas\n+            self.figure = self.legend.figure", "normalized_occurrence": 1}
