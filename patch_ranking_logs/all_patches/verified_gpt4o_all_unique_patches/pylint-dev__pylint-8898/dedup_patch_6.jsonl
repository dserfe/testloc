{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..2c17613 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,7 +114,11 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n+    # Use a delimiter that is unlikely to appear in regex patterns\n+    delimiter = '|||'\n+    value = value.replace('\\\\,', delimiter)  # Temporarily replace escaped commas\n     for pattern in _csv_transformer(value):\n+        pattern = pattern.replace(delimiter, ',')  # Restore commas\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..be86b34 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,7 +55,10 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n+    delimiter = '|||'\n+    value = value.replace('\\\\,', delimiter)\n     for pattern in _csv_transformer(value):\n+        pattern = pattern.replace(delimiter, ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
