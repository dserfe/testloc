{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..92feaef 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -473,13 +473,20 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n-        params = []\n-        for part in args_parts:\n-            params.extend(part)\n-        return result, params\n+        combinator_sql_parts = []\n+        result_params = []\n+        for sql, params in parts:\n+            combinator_sql_parts.append('({})'.format(sql))\n+            result_params.extend(params)\n+\n+        base_sql = ' {} '.format(combinator_sql).join(combinator_sql_parts)\n+        if self.query.distinct:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            result = ['SELECT DISTINCT ON ({}) * FROM ({})'.format(', '.join(distinct_fields), base_sql)]\n+            result_params = distinct_params + result_params\n+        else:\n+            result = [base_sql]\n+        return result, result_params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..af024f4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,13 +265,19 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n-        params = []\n-        for part in args_parts:\n-            params.extend(part)\n-        return (result, params)\n+        combinator_sql_parts = []\n+        result_params = []\n+        for sql, params in parts:\n+            combinator_sql_parts.append('({})'.format(sql))\n+            result_params.extend(params)\n+        base_sql = ' {} '.format(combinator_sql).join(combinator_sql_parts)\n+        if self.query.distinct:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            result = ['SELECT DISTINCT ON ({}) * FROM ({})'.format(', '.join(distinct_fields), base_sql)]\n+            result_params = distinct_params + result_params\n+        else:\n+            result = [base_sql]\n+        return (result, result_params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n         try:\n", "normalized_occurrence": 1}
