{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex a94a471..82e7a3b 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -288,7 +288,23 @@ class _RelationalPlotter(VectorPlotter):\n             update((self.variables[\"size\"], \"title\"),\n                    self.variables[\"size\"], **title_kws)\n \n-        # Add the size semantic labels\n+        # Add the Offset information to the Size legend's title if applicable\n+        if isinstance(self._size_map.norm, mpl.colors.Normalize):\n+            # Use ScalarFormatter to determine the offset\n+            formatter = ScalarFormatter()\n+            formatter.set_scientific(True)\n+            offset = formatter.get_offset()\n+            if offset:\n+                size_legend_title = f\"{self.variables['size']} ({offset})\"\n+            else:\n+                size_legend_title = self.variables['size']\n+        else:\n+            size_legend_title = self.variables['size']\n+\n+        if not legend_title and self.variables.get(\"size\", None) is not None:\n+            update((self.variables[\"size\"], \"title\"), size_legend_title, **title_kws)\n+        \n+        # Add the size semantic labels with offset consideration\n         for level, formatted_level in zip(size_levels, size_formatted_levels):\n             if level is not None:\n                 size = self._size_map(level)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex 1613149..82f8683 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -70,6 +70,18 @@ class _RelationalPlotter(VectorPlotter):\n             size_levels = size_formatted_levels = self._size_map.levels\n         if not legend_title and self.variables.get('size', None) is not None:\n             update((self.variables['size'], 'title'), self.variables['size'], **title_kws)\n+        if isinstance(self._size_map.norm, mpl.colors.Normalize):\n+            formatter = ScalarFormatter()\n+            formatter.set_scientific(True)\n+            offset = formatter.get_offset()\n+            if offset:\n+                size_legend_title = f\"{self.variables['size']} ({offset})\"\n+            else:\n+                size_legend_title = self.variables['size']\n+        else:\n+            size_legend_title = self.variables['size']\n+        if not legend_title and self.variables.get('size', None) is not None:\n+            update((self.variables['size'], 'title'), size_legend_title, **title_kws)\n         for level, formatted_level in zip(size_levels, size_formatted_levels):\n             if level is not None:\n                 size = self._size_map(level)\n", "normalized_occurrence": 1}
