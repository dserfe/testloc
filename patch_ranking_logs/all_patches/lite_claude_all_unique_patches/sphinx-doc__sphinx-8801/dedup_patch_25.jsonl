{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..c3abb44 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2518,6 +2518,13 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n         if comment:\n             return [comment]\n \n+        # Check for docstring-comments in parent classes\n+        if inspect.isclass(self.parent):\n+            for parent in self.parent.__mro__[1:]:\n+                parent_comment = self.get_attribute_comment(parent, self.objpath[-1])\n+                if parent_comment:\n+                    return [parent_comment]\n+\n         try:\n             # Disable `autodoc_inherit_docstring` temporarily to avoid to obtain\n             # a docstring from the value which descriptor returns unexpectedly.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..7b3a822 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1488,6 +1488,11 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin, TypeVarMi\n         comment = self.get_attribute_comment(self.parent, self.objpath[-1])\n         if comment:\n             return [comment]\n+        if inspect.isclass(self.parent):\n+            for parent in self.parent.__mro__[1:]:\n+                parent_comment = self.get_attribute_comment(parent, self.objpath[-1])\n+                if parent_comment:\n+                    return [parent_comment]\n         try:\n             orig = self.config.autodoc_inherit_docstrings\n             self.config.autodoc_inherit_docstrings = False\n", "normalized_occurrence": 1}
