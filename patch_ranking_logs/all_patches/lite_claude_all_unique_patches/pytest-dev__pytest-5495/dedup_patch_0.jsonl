{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ff9064f..0332985 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -879,15 +879,28 @@ warn_explicit(\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = next_res, next_expl\n         # Use pytest.assertion.util._reprcompare if that's available.\n-        expl_call = self.helper(\n-            \"_call_reprcompare\",\n-            ast.Tuple(syms, ast.Load()),\n-            ast.Tuple(load_names, ast.Load()),\n-            ast.Tuple(expls, ast.Load()),\n-            ast.Tuple(results, ast.Load()),\n-        )\n+        # Special handling for byte string comparisons\n+        if (isinstance(comp.left, ast.Bytes) or \n+            any(isinstance(c, ast.Bytes) for c in comp.comparators)):\n+            # For byte strings, we want to show the actual content rather than ordinals\n+            expl_call = self.helper(\n+                \"_call_reprcompare\",\n+                ast.Tuple(syms, ast.Load()),\n+                ast.Tuple(load_names, ast.Load()),\n+                ast.Tuple(expls, ast.Load()),\n+                ast.Tuple(results, ast.Load()),\n+                ast.Constant(value=True),  # indicate this is a bytes comparison\n+            )\n+        else:\n+            expl_call = self.helper(\n+                \"_call_reprcompare\",\n+                ast.Tuple(syms, ast.Load()),\n+                ast.Tuple(load_names, ast.Load()),\n+                ast.Tuple(expls, ast.Load()),\n+                ast.Tuple(results, ast.Load()),\n+            )\n         if len(comp.ops) > 1:\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex c715f90..db6fde1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -489,7 +489,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = (next_res, next_expl)\n-        expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(results, ast.Load()))\n+        if isinstance(comp.left, ast.Bytes) or any((isinstance(c, ast.Bytes) for c in comp.comparators)):\n+            expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(results, ast.Load()), ast.Constant(value=True))\n+        else:\n+            expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(results, ast.Load()))\n         if len(comp.ops) > 1:\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n", "normalized_occurrence": 2}
