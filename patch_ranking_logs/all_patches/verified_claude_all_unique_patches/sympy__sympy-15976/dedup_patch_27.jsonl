{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..e60db0a 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -772,10 +772,19 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n             else:\n                 return s\n \n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n+        # Check if the symbol name ends with digits\n+        import re\n+        if re.match(r'^[a-zA-Z]+\\d+$', sym.name):\n+            # If it's a simple symbol with numeric suffix, treat it as a single name\n+            name = sym.name\n+            supers = []\n+            subs = []\n+        else:\n+            # Otherwise split as usual\n+            name, supers, subs = split_super_sub(sym.name)\n+            name = translate(name)\n+            supers = [translate(sup) for sup in supers]\n+            subs = [translate(sub) for sub in subs]\n \n         mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..1ea0ed8 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -540,10 +540,16 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                 return greek_unicode.get(s)\n             else:\n                 return s\n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n+        import re\n+        if re.match('^[a-zA-Z]+\\\\d+$', sym.name):\n+            name = sym.name\n+            supers = []\n+            subs = []\n+        else:\n+            name, supers, subs = split_super_sub(sym.name)\n+            name = translate(name)\n+            supers = [translate(sup) for sup in supers]\n+            subs = [translate(sub) for sub in subs]\n         mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n", "normalized_occurrence": 1}
