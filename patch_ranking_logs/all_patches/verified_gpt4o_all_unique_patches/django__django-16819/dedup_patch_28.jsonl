{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..b1acaaa 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -61,9 +62,17 @@ class MigrationOptimizer:\n                         break\n                     new_operations.extend(operations[i + j + 2 :])\n                     return new_operations\n+                elif isinstance(operation, AddIndex) and isinstance(other, RemoveIndex) and operation.index.name == other.name:\n+                    # Combine AddIndex followed by RemoveIndex into a no-op.\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n+                elif isinstance(operation, RemoveIndex) and isinstance(other, AddIndex) and operation.name == other.index.name:\n+                    # Combine RemoveIndex followed by AddIndex into a no-op.\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n                 elif not result:\n                     # Can't perform a right reduction.\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..bbd59ed 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -28,6 +28,12 @@ class MigrationOptimizer:\n                         break\n                     new_operations.extend(operations[i + j + 2:])\n                     return new_operations\n+                elif isinstance(operation, AddIndex) and isinstance(other, RemoveIndex) and (operation.index.name == other.name):\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n+                elif isinstance(operation, RemoveIndex) and isinstance(other, AddIndex) and (operation.name == other.index.name):\n+                    new_operations.extend(operations[i + j + 2:])\n+                    return new_operations\n                 elif not result:\n                     right = False\n             else:\n", "normalized_occurrence": 1}
