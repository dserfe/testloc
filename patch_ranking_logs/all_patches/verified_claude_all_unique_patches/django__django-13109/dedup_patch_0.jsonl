{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13109", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 72731ef..42136c1 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -914,7 +914,7 @@ class ForeignKey(ForeignObject):\n             return\n \n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(\n+        qs = self.remote_field.model._base_manager.using(using).filter(\n             **{self.remote_field.field_name: value}\n         )\n         qs = qs.complex_filter(self.get_limit_choices_to())\n", "occurrence": 40, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 5053ff0..38eda0b 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -398,7 +398,7 @@ class ForeignKey(ForeignObject):\n         if value is None:\n             return\n         using = router.db_for_read(self.remote_field.model, instance=model_instance)\n-        qs = self.remote_field.model._default_manager.using(using).filter(**{self.remote_field.field_name: value})\n+        qs = self.remote_field.model._base_manager.using(using).filter(**{self.remote_field.field_name: value})\n         qs = qs.complex_filter(self.get_limit_choices_to())\n         if not qs.exists():\n             raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'model': self.remote_field.model._meta.verbose_name, 'pk': value, 'field': self.remote_field.field_name, 'value': value})\n", "normalized_occurrence": 40}
