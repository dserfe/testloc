{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..44ae333 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,6 +347,27 @@ class SQLCompiler:\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n+                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                    if is_ref and col_alias == src.refs:\n+                        src = src.source\n+                    # Skip non-matching aliases but don't require them\n+                    if col_alias and col_alias != getattr(src, 'refs', None):\n+                        continue\n+                    if src == sel_expr:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+                    # Try comparing the output expressions if direct comparison fails\n+                    if hasattr(src, 'output_field') and hasattr(sel_expr, 'output_field'):\n+                        if src.output_field == sel_expr.output_field:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n+                else:\n+                    # If no match was found, default to first column to prevent invalid references\n+                    resolved.set_source_expressions([RawSQL('1', ())])\n+                src = resolved.get_source_expressions()[0]\n+                # Relabel order by columns to raw numbers if this is a combined\n+                # query; necessary since the columns can't be referenced by the\n+                # fully qualified name and the simple column names may collide.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..298829d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -183,6 +183,21 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n+                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                    if is_ref and col_alias == src.refs:\n+                        src = src.source\n+                    if col_alias and col_alias != getattr(src, 'refs', None):\n+                        continue\n+                    if src == sel_expr:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+                    if hasattr(src, 'output_field') and hasattr(sel_expr, 'output_field'):\n+                        if src.output_field == sel_expr.output_field:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n+                else:\n+                    resolved.set_source_expressions([RawSQL('1', ())])\n+                src = resolved.get_source_expressions()[0]\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n", "normalized_occurrence": 1}
