{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..0333880 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -599,7 +599,7 @@ class BaseModelFormSet(BaseFormSet):\n         return field.to_python\n \n     def _construct_form(self, i, **kwargs):\n-        pk_required = i < self.initial_form_count()\n+        pk_required = i < self.initial_form_count() or not self.can_create\n         if pk_required:\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n@@ -813,16 +813,17 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            # If someone has marked an add form for deletion, don't save the\n-            # object.\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n+        if self.can_create:\n+            for form in self.extra_forms:\n+                if not form.has_changed():\n+                    continue\n+                # If someone has marked an add form for deletion, don't save the\n+                # object.\n+                if self.can_delete and self._should_delete_form(form):\n+                    continue\n+                self.new_objects.append(self.save_new(form, commit=commit))\n+                if not commit:\n+                    self.saved_forms.append(form)\n         return self.new_objects\n \n     def add_fields(self, form, index):\n@@ -870,7 +871,7 @@ class BaseModelFormSet(BaseFormSet):\n \n \n def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n-                         formset=BaseModelFormSet, extra=1, can_delete=False,\n+                         formset=BaseModelFormSet, extra=1, can_delete=False, can_create=True,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n@@ -891,7 +892,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                              labels=labels, help_texts=help_texts,\n                              error_messages=error_messages, field_classes=field_classes)\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n-                              can_order=can_order, can_delete=can_delete,\n+                              can_order=can_order, can_delete=can_delete, can_create=can_create,\n                               validate_min=validate_min, validate_max=validate_max,\n                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n                               renderer=renderer)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..f472206 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -290,7 +290,7 @@ class BaseModelFormSet(BaseFormSet):\n             field = field.remote_field.get_related_field()\n         return field.to_python\n     def _construct_form(self, i, **kwargs):\n-        pk_required = i < self.initial_form_count()\n+        pk_required = i < self.initial_form_count() or not self.can_create\n         if pk_required:\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n@@ -418,14 +418,15 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n-        for form in self.extra_forms:\n-            if not form.has_changed():\n-                continue\n-            if self.can_delete and self._should_delete_form(form):\n-                continue\n-            self.new_objects.append(self.save_new(form, commit=commit))\n-            if not commit:\n-                self.saved_forms.append(form)\n+        if self.can_create:\n+            for form in self.extra_forms:\n+                if not form.has_changed():\n+                    continue\n+                if self.can_delete and self._should_delete_form(form):\n+                    continue\n+                self.new_objects.append(self.save_new(form, commit=commit))\n+                if not commit:\n+                    self.saved_forms.append(form)\n         return self.new_objects\n     def add_fields(self, form, index):\n         from django.db.models import AutoField, ForeignKey, OneToOneField\n@@ -454,12 +455,12 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_create=True, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback, widgets=widgets, localized_fields=localized_fields, labels=labels, help_texts=help_texts, error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, can_create=can_create, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n class BaseInlineFormSet(BaseModelFormSet):\n", "normalized_occurrence": 1}
