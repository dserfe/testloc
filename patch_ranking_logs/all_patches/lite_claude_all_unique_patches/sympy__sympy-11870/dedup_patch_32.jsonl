{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..893f260 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -535,6 +535,30 @@ def exptrigsimp(expr):\n         # select the better of e, and e rewritten in terms of exp or trig\n         # functions\n         choices = [e]\n+        \n+        # Handle common exponential to trig patterns\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            # Extract coefficient and terms\n+            coeff = 1\n+            exp_terms = []\n+            other_terms = []\n+            \n+            for arg in e.args:\n+                if isinstance(arg, exp):\n+                    exp_terms.append(arg)\n+                else:\n+                    coeff *= arg\n+                    \n+            # Check for sin pattern: (-I*exp(I*k) + I*exp(-I*k))/2\n+            if len(exp_terms) == 2 and coeff.has(S.ImaginaryUnit):\n+                exp1, exp2 = exp_terms\n+                if (exp1.args[0].has(S.ImaginaryUnit) and \n+                    exp2.args[0].has(S.ImaginaryUnit) and\n+                    exp1.args[0] == -exp2.args[0]):\n+                    arg = exp1.args[0]/S.ImaginaryUnit\n+                    if coeff == S.ImaginaryUnit/2:\n+                        return sin(arg)\n+                        \n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..15602b0 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -177,6 +177,21 @@ def exptrigsimp(expr):\n     from sympy.simplify.simplify import bottom_up\n     def exp_trig(e):\n         choices = [e]\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            coeff = 1\n+            exp_terms = []\n+            other_terms = []\n+            for arg in e.args:\n+                if isinstance(arg, exp):\n+                    exp_terms.append(arg)\n+                else:\n+                    coeff *= arg\n+            if len(exp_terms) == 2 and coeff.has(S.ImaginaryUnit):\n+                exp1, exp2 = exp_terms\n+                if exp1.args[0].has(S.ImaginaryUnit) and exp2.args[0].has(S.ImaginaryUnit) and (exp1.args[0] == -exp2.args[0]):\n+                    arg = exp1.args[0] / S.ImaginaryUnit\n+                    if coeff == S.ImaginaryUnit / 2:\n+                        return sin(arg)\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "normalized_occurrence": 1}
