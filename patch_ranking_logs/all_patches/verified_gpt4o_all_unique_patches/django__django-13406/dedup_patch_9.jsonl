{"model_name_or_path": "agentless", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..3421753 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -195,7 +195,7 @@ class QuerySet:\n         self._prefetch_related_lookups = ()\n         self._prefetch_done = False\n         self._known_related_objects = {}  # {rel_field: {pk: rel_obj}}\n-        self._iterable_class = ModelIterable\n+        self._iterable_class = getattr(self, '_iterable_class', ModelIterable)\n         self._fields = None\n         self._defer_next_filter = False\n         self._deferred_filter = None\n@@ -831,6 +831,15 @@ class QuerySet:\n         clone._iterable_class = ValuesIterable\n         return clone\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['_iterable_class'] = self._iterable_class\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self._iterable_class = state['_iterable_class']\n+\n     def values_list(self, *fields, flat=False, named=False):\n         if flat and named:\n             raise TypeError(\"'flat' and 'named' can't be used together.\")\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..0e829a0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -112,7 +112,7 @@ class QuerySet:\n         self._prefetch_related_lookups = ()\n         self._prefetch_done = False\n         self._known_related_objects = {}\n-        self._iterable_class = ModelIterable\n+        self._iterable_class = getattr(self, '_iterable_class', ModelIterable)\n         self._fields = None\n         self._defer_next_filter = False\n         self._deferred_filter = None\n@@ -499,6 +499,13 @@ class QuerySet:\n         clone = self._values(*fields, **expressions)\n         clone._iterable_class = ValuesIterable\n         return clone\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['_iterable_class'] = self._iterable_class\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        self._iterable_class = state['_iterable_class']\n     def values_list(self, *fields, flat=False, named=False):\n         if flat and named:\n             raise TypeError(\"'flat' and 'named' can't be used together.\")\n", "normalized_occurrence": 1}
