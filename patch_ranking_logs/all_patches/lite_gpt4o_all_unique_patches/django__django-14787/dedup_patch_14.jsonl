{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..da37fdc 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,9 +37,12 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        def bound_method(*args, **kwargs):\n+            return method.__get__(self, type(self))(*args, **kwargs)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        # Preserve any existing attributes of 'method', including the name.\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..89232ac 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -15,9 +15,11 @@ def _multi_decorate(decorators, method):\n     else:\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n-        bound_method = partial(method.__get__(self, type(self)))\n+        def bound_method(*args, **kwargs):\n+            return method.__get__(self, type(self))(*args, **kwargs)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n", "normalized_occurrence": 1}
