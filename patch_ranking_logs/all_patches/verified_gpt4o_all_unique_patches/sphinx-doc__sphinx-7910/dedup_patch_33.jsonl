{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..e42cb75 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -120,14 +120,12 @@ def getargspec(func: Callable) -> Any:\n \n def unwrap(obj: Any) -> Any:\n     \"\"\"Get an original object from wrapped object (wrapped functions).\"\"\"\n-    try:\n-        return inspect.unwrap(obj)\n-    except ValueError:\n-        # might be a mock object\n-        return obj\n+    while hasattr(obj, '__wrapped__'):\n+        obj = obj.__wrapped__\n+    return obj\n \n \n-def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n+def unwrap_all(obj: Any, *, stop: Callable = None, _seen: set = None) -> Any:\n     \"\"\"\n     Get an original object from wrapped object (unwrapping partials, wrapped\n     functions, and other decorators).\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 6e5e6c6..ed7ab55 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -65,11 +65,10 @@ def getargspec(func: Callable) -> Any:\n         defaults = None\n     return inspect.FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwdefaults, annotations)\n def unwrap(obj: Any) -> Any:\n-    try:\n-        return inspect.unwrap(obj)\n-    except ValueError:\n-        return obj\n-def unwrap_all(obj: Any, *, stop: Callable=None) -> Any:\n+    while hasattr(obj, '__wrapped__'):\n+        obj = obj.__wrapped__\n+    return obj\n+def unwrap_all(obj: Any, *, stop: Callable=None, _seen: set=None) -> Any:\n     while True:\n         if stop and stop(obj):\n             return obj\n", "normalized_occurrence": 1}
