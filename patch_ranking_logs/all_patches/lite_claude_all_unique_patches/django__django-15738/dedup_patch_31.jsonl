{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 5562d34..d31b6b4 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -185,6 +185,9 @@ class ProjectState:\n             for key in option_keys:\n                 if key not in options:\n                     model_state.options.pop(key, False)\n+                elif not options[key] and key in model_state.options:\n+                    # If the option value is empty/None and it exists, remove it entirely\n+                    del model_state.options[key]\n         self.reload_model(app_label, model_name, delay=True)\n \n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 18747a4..9496a9b 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -120,6 +120,8 @@ class ProjectState:\n             for key in option_keys:\n                 if key not in options:\n                     model_state.options.pop(key, False)\n+                elif not options[key] and key in model_state.options:\n+                    del model_state.options[key]\n         self.reload_model(app_label, model_name, delay=True)\n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n         model_state = self.models[app_label, model_name]\n", "normalized_occurrence": 1}
