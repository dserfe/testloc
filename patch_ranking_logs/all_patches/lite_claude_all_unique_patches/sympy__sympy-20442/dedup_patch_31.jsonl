{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..e14a4e1 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -21,7 +21,15 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n \n-    if not canon_expr_units.issubset(set(canon_dim_units)):\n+    # Check if dimensions match exactly\n+    expr_dim_dict = {dim: exp for dim, exp in dim_dependencies.items()}\n+    target_dim_dict = {}\n+    for target_dim in target_dims:\n+        target_deps = dimension_system.get_dimensional_dependencies(target_dim, mark_dimensionless=True)\n+        for dim, exp in target_deps.items():\n+            target_dim_dict[dim] = target_dim_dict.get(dim, 0) + exp\n+    \n+    if expr_dim_dict != target_dim_dict:\n         return None\n \n     seen = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..4213ea4 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -12,7 +12,13 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n-    if not canon_expr_units.issubset(set(canon_dim_units)):\n+    expr_dim_dict = {dim: exp for dim, exp in dim_dependencies.items()}\n+    target_dim_dict = {}\n+    for target_dim in target_dims:\n+        target_deps = dimension_system.get_dimensional_dependencies(target_dim, mark_dimensionless=True)\n+        for dim, exp in target_deps.items():\n+            target_dim_dict[dim] = target_dim_dict.get(dim, 0) + exp\n+    if expr_dim_dict != target_dim_dict:\n         return None\n     seen = set()\n     canon_dim_units = [i for i in canon_dim_units if not (i in seen or seen.add(i))]\n", "normalized_occurrence": 1}
