{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..eb8abc3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1734,6 +1734,9 @@ class Query(BaseExpression):\n             if len(targets) > 1:\n                 raise FieldError(\"Referencing multicolumn fields with F() objects \"\n                                  \"isn't supported\")\n+            # For __in lookups with model instances, only select the primary key\n+            if len(field_list) > 1 and field_list[-1] == 'in' and not self.select:\n+                self.default_cols = False\n             # Verify that the last lookup in name is a field or a transform:\n             # transform_function() raises FieldError if not.\n             transform = join_info.transform_function(targets[0], final_alias)\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..b16c651 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -950,6 +950,8 @@ class Query(BaseExpression):\n                 raise FieldError('Joined field references are not permitted in this query')\n             if len(targets) > 1:\n                 raise FieldError(\"Referencing multicolumn fields with F() objects isn't supported\")\n+            if len(field_list) > 1 and field_list[-1] == 'in' and (not self.select):\n+                self.default_cols = False\n             transform = join_info.transform_function(targets[0], final_alias)\n             if reuse is not None:\n                 reuse.update(join_list)\n", "normalized_occurrence": 1}
