{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..e7d1d7b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -350,13 +350,21 @@ class SQLCompiler:\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    # Handle the case where the order by expression matches the selected column alias\n+                    elif col_alias and col_alias == src.target.column:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Add missing select columns when doing order by\n+                    if not is_ref:\n+                        select_sql = [t[1] for t in self.select]\n+                        sql, params = self.compile(src, select_format=True)\n+                        if (sql, params) not in select_sql:\n+                            self.select.append((src, (sql, params), None))\n+                        resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..a494be9 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -186,13 +186,19 @@ class SQLCompiler:\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    elif col_alias and col_alias == src.target.column:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    if not is_ref:\n+                        select_sql = [t[1] for t in self.select]\n+                        sql, params = self.compile(src, select_format=True)\n+                        if (sql, params) not in select_sql:\n+                            self.select.append((src, (sql, params), None))\n+                        resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
