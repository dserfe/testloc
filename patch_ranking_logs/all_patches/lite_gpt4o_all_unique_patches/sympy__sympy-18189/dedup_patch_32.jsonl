{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..e0dd3ba 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -179,10 +179,14 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+            if set(syms) != set(var):\n+                raise ValueError('syms must be a permutation of the free symbols in the equation')\n+            dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+            results = diophantine(eq, param)\n+            permuted_results = set()\n+            for result in results:\n+                permuted_results.update(signed_permutations(result))\n+            return {tuple(permuted_result[dict_sym_index[sym]] for sym in syms) for permuted_result in permuted_results}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..37f27c6 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,9 +70,14 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+            if set(syms) != set(var):\n+                raise ValueError('syms must be a permutation of the free symbols in the equation')\n+            dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+            results = diophantine(eq, param)\n+            permuted_results = set()\n+            for result in results:\n+                permuted_results.update(signed_permutations(result))\n+            return {tuple((permuted_result[dict_sym_index[sym]] for sym in syms)) for permuted_result in permuted_results}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
