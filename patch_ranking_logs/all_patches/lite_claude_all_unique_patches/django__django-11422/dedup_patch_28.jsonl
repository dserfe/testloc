{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11422", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 2510c51..ae4715f 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -110,6 +110,24 @@ def iter_all_python_module_files():\n def iter_modules_and_files(modules, extra_files):\n     \"\"\"Iterate through all modules needed to be watched.\"\"\"\n     sys_file_paths = []\n+    # Add the current script to the paths to watch\n+    if '__main__' in sys.modules:\n+        main_module = sys.modules['__main__']\n+        if hasattr(main_module, '__file__'):\n+            sys_file_paths.append(main_module.__file__)\n+\n+    for module in modules:\n+        # During debugging (with PyDev) the 'typing.io' and 'typing.re' objects\n+        # are added to sys.modules, however they are types not modules and so\n+        # cause issues here.\n+        if not isinstance(module, ModuleType) or getattr(module, '__spec__', None) is None:\n+            continue\n+        spec = module.__spec__\n+        # Modules could be loaded from places without a concrete location. If\n+        # this is the case, skip them.\n+        if spec.has_location:\n+            origin = spec.loader.archive if isinstance(spec.loader, zipimporter) else spec.origin\n+            sys_file_paths.append(origin)\n     for module in modules:\n         # During debugging (with PyDev) the 'typing.io' and 'typing.re' objects\n         # are added to sys.modules, however they are types not modules and so\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex bb4b189..ecc5663 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -74,6 +74,17 @@ def iter_all_python_module_files():\n @functools.lru_cache(maxsize=1)\n def iter_modules_and_files(modules, extra_files):\n     sys_file_paths = []\n+    if '__main__' in sys.modules:\n+        main_module = sys.modules['__main__']\n+        if hasattr(main_module, '__file__'):\n+            sys_file_paths.append(main_module.__file__)\n+    for module in modules:\n+        if not isinstance(module, ModuleType) or getattr(module, '__spec__', None) is None:\n+            continue\n+        spec = module.__spec__\n+        if spec.has_location:\n+            origin = spec.loader.archive if isinstance(spec.loader, zipimporter) else spec.origin\n+            sys_file_paths.append(origin)\n     for module in modules:\n         if not isinstance(module, ModuleType) or getattr(module, '__spec__', None) is None:\n             continue\n", "normalized_occurrence": 1}
