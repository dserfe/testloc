{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..5c0026a 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,13 +895,26 @@ class Permutation(Basic):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n+        if has_dups(temp) and is_cycle:\n+            # Apply non-disjoint cycles in left-to-right order\n+            c = Cycle()\n+            for ci in args:\n+                c = c(*ci)\n+            aform = c.list()\n+        else:\n+            temp = set(temp)\n+            if not is_cycle and any(i not in temp for i in range(len(temp))):\n+                raise ValueError(\"Integers 0 through %s must be present.\" %\n+                                 max(temp))\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # it's not necessarily canonical so we won't store\n+                # it -- use the array form instead\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n             else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+                aform = list(args)\n \n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..629e514 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -194,12 +194,22 @@ class Permutation(Basic):\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n-        if has_dups(temp):\n+        if has_dups(temp) and is_cycle:\n+            c = Cycle()\n+            for ci in args:\n+                c = c(*ci)\n+            aform = c.list()\n+        else:\n+            temp = set(temp)\n+            if not is_cycle and any((i not in temp for i in range(len(temp)))):\n+                raise ValueError('Integers 0 through %s must be present.' % max(temp))\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n             else:\n-                raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+                aform = list(args)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n", "normalized_occurrence": 1}
