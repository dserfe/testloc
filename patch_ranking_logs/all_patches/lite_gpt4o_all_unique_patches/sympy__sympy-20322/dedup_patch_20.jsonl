{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20322", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 3bfc4b1..d1d7347 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -477,7 +477,18 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n \n     try:\n         a = a.replace('\\n', '')\n+        from sympy import ceiling\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.expr import Expr\n+\n+        def custom_eval(node):\n+            if isinstance(node, Expr) and not isinstance(node, Symbol):\n+                return node\n+            return node.func(*map(custom_eval, node.args))\n+\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if not evaluate and expr.has(ceiling):\n+            expr = custom_eval(expr)\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex d4b8b6a..6890ef9 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -123,7 +123,16 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, eval\n         transformations += (t_convert_xor,)\n     try:\n         a = a.replace('\\n', '')\n+        from sympy import ceiling\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.expr import Expr\n+        def custom_eval(node):\n+            if isinstance(node, Expr) and (not isinstance(node, Symbol)):\n+                return node\n+            return node.func(*map(custom_eval, node.args))\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if not evaluate and expr.has(ceiling):\n+            expr = custom_eval(expr)\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n     return expr\n", "normalized_occurrence": 1}
