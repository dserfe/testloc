{"model_name_or_path": "agentless", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..9b4ece0 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1523,6 +1523,7 @@ class MigrationAutodetector:\n     # RemovedInDjango51Warning.\n     def generate_removed_altered_index_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+        self.generate_altered_indexes()\n \n     def _generate_altered_foo_together(self, operation):\n         for (\n@@ -1532,7 +1533,7 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n+            removal_value = set(old_value).intersection(new_value)\n             if new_value != removal_value:\n                 self.add_operation(\n                     app_label,\n@@ -1546,6 +1547,7 @@ class MigrationAutodetector:\n     # RemovedInDjango51Warning.\n     def generate_altered_index_together(self):\n         self._generate_altered_foo_together(operations.AlterIndexTogether)\n+        self.generate_altered_indexes()\n \n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..d2e6d1c 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -620,15 +620,17 @@ class MigrationAutodetector:\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_removed_altered_index_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+        self.generate_altered_indexes()\n     def _generate_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n+            removal_value = set(old_value).intersection(new_value)\n             if new_value != removal_value:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: new_value}), dependencies=dependencies)\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_altered_index_together(self):\n         self._generate_altered_foo_together(operations.AlterIndexTogether)\n+        self.generate_altered_indexes()\n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)\n         for app_label, model_name in sorted(models_to_check):\n", "normalized_occurrence": 1}
