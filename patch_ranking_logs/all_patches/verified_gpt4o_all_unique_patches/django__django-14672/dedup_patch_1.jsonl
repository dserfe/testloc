{"model_name_or_path": "agentless", "instance_id": "django__django-14672", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 7ae0a4d..82fd284 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -277,6 +277,11 @@ class OneToOneRel(ManyToOneRel):\n         self.multiple = False\n \n \n+from django.utils.functional import make_hashable\n+...\n+from django.utils.functional import make_hashable\n+...\n+\n class ManyToManyRel(ForeignObjectRel):\n     \"\"\"\n     Used by ManyToManyField to store information about the relation.\n@@ -301,7 +306,7 @@ class ManyToManyRel(ForeignObjectRel):\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n-        self.through_fields = through_fields\n+        self.through_fields = make_hashable(through_fields)\n \n         self.symmetrical = symmetrical\n         self.db_constraint = db_constraint\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 32fd814..a3400de 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -119,6 +119,10 @@ class OneToOneRel(ManyToOneRel):\n     def __init__(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None):\n         super().__init__(field, to, field_name, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, parent_link=parent_link, on_delete=on_delete)\n         self.multiple = False\n+from django.utils.functional import make_hashable\n+...\n+from django.utils.functional import make_hashable\n+...\n class ManyToManyRel(ForeignObjectRel):\n     def __init__(self, field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True):\n         super().__init__(field, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to)\n@@ -127,7 +131,7 @@ class ManyToManyRel(ForeignObjectRel):\n         self.through = through\n         if through_fields and (not through):\n             raise ValueError('Cannot specify through_fields without a through model')\n-        self.through_fields = through_fields\n+        self.through_fields = make_hashable(through_fields)\n         self.symmetrical = symmetrical\n         self.db_constraint = db_constraint\n     @property\n", "normalized_occurrence": 1}
