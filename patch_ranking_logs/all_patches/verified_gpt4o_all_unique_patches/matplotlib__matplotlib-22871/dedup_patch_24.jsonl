{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22871", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex cc65fc1..bc4f45a 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -797,7 +797,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n-                if level < 2:\n+                if level < 1:\n                     show_offset = False\n                 break\n             elif level == 0:\n@@ -838,7 +838,7 @@ class ConciseDateFormatter(ticker.Formatter):\n                     if '.' in labels[nn]:\n                         labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')\n \n-        if show_offset:\n+        if show_offset or (level > 0 and level < 2):\n             # set the offset string:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n             if self._usetex:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 6ad34f7..2a0bd6c 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -197,7 +197,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         show_offset = self.show_offset\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n-                if level < 2:\n+                if level < 1:\n                     show_offset = False\n                 break\n             elif level == 0:\n@@ -221,7 +221,7 @@ class ConciseDateFormatter(ticker.Formatter):\n                 for nn in range(len(labels)):\n                     if '.' in labels[nn]:\n                         labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')\n-        if show_offset:\n+        if show_offset or (level > 0 and level < 2):\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n             if self._usetex:\n                 self.offset_string = _wrap_in_tex(self.offset_string)\n", "normalized_occurrence": 1}
