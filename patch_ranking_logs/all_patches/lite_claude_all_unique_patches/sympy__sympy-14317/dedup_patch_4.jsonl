{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..2617c08 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,29 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        \n+        # Get coefficients and monomial orders from the poly's rep\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and any(m != 0 for m in monom):\n+                # Don't print coefficient 1\n+                term = ''\n+            else:\n+                term = self._print(coeff)\n+                \n+            for x, m in zip(poly.gens, monom):\n+                if m == 0:\n+                    continue\n+                elif m == 1:\n+                    term += self._print(x)\n+                else:\n+                    term += '%s^{%d}' % (self._print(x), m)\n+                    \n+            if not term:\n+                term = '1'\n+            terms.append(term)\n+            \n+        expr = ' + '.join(terms) if terms else '0'\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..068d267 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,23 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in poly.terms():\n+            if coeff == 1 and any((m != 0 for m in monom)):\n+                term = ''\n+            else:\n+                term = self._print(coeff)\n+            for x, m in zip(poly.gens, monom):\n+                if m == 0:\n+                    continue\n+                elif m == 1:\n+                    term += self._print(x)\n+                else:\n+                    term += '%s^{%d}' % (self._print(x), m)\n+            if not term:\n+                term = '1'\n+            terms.append(term)\n+        expr = ' + '.join(terms) if terms else '0'\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n", "normalized_occurrence": 1}
