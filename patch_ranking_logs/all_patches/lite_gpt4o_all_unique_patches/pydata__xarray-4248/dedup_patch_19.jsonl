{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4248", "model_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 91a7f67..96bcab1 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -271,6 +271,9 @@ def inline_variable_array_repr(var, max_width):\n def summarize_variable(\n     name: Hashable, var, col_width: int, marker: str = \" \", max_width: int = None\n ):\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units = f\", in {units}\"\n     \"\"\"Summarize a variable in one line, e.g., for the Dataset.__repr__.\"\"\"\n     if max_width is None:\n         max_width_options = OPTIONS[\"display_width\"]\n@@ -278,7 +281,7 @@ def summarize_variable(\n             raise TypeError(f\"`max_width` value of `{max_width}` is not a valid int\")\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f\"  {marker} {name} \", col_width)\n+    first_col = pretty_print(f\"  {marker} {name}{units} \", col_width)\n     if var.dims:\n         dims_str = \"({}) \".format(\", \".join(map(str, var.dims)))\n     else:\n@@ -306,12 +309,16 @@ def _summarize_coord_levels(coord, col_width, marker=\"-\"):\n \n \n def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n+    return summarize_variable(name, var, col_width)\n \n \n def summarize_coord(name: Hashable, var, col_width: int):\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units = f\", in {units}\"\n     is_index = name in var.dims\n     marker = \"*\" if is_index else \" \"\n+    first_col = pretty_print(f\"  {marker} {name}{units} \", col_width)\n     if is_index:\n         coord = var.variable.to_index_variable()\n         if coord.level_names is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py\nindex 6d31a74..53eda34 100644\n--- a/xarray/core/formatting.py\n+++ b/xarray/core/formatting.py\n@@ -152,13 +152,17 @@ def inline_variable_array_repr(var, max_width):\n     else:\n         return '...'\n def summarize_variable(name: Hashable, var, col_width: int, marker: str=' ', max_width: int=None):\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units = f', in {units}'\n+    'Summarize a variable in one line, e.g., for the Dataset.__repr__.'\n     if max_width is None:\n         max_width_options = OPTIONS['display_width']\n         if not isinstance(max_width_options, int):\n             raise TypeError(f'`max_width` value of `{max_width}` is not a valid int')\n         else:\n             max_width = max_width_options\n-    first_col = pretty_print(f'  {marker} {name} ', col_width)\n+    first_col = pretty_print(f'  {marker} {name}{units} ', col_width)\n     if var.dims:\n         dims_str = '({}) '.format(', '.join(map(str, var.dims)))\n     else:\n@@ -173,10 +177,14 @@ def _summarize_coord_multiindex(coord, col_width, marker):\n def _summarize_coord_levels(coord, col_width, marker='-'):\n     return '\\n'.join((summarize_variable(lname, coord.get_level_variable(lname), col_width, marker=marker) for lname in coord.level_names))\n def summarize_datavar(name, var, col_width):\n-    return summarize_variable(name, var.variable, col_width)\n+    return summarize_variable(name, var, col_width)\n def summarize_coord(name: Hashable, var, col_width: int):\n+    units = var.attrs.get('units', '')\n+    if units:\n+        units = f', in {units}'\n     is_index = name in var.dims\n     marker = '*' if is_index else ' '\n+    first_col = pretty_print(f'  {marker} {name}{units} ', col_width)\n     if is_index:\n         coord = var.variable.to_index_variable()\n         if coord.level_names is not None:\n", "normalized_occurrence": 1}
