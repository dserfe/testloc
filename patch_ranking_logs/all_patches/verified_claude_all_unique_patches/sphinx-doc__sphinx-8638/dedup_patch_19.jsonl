{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..b4a3902 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1157,9 +1157,22 @@ class PythonDomain(Domain):\n                     else:\n                         # \"fuzzy\" searching mode\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        # For instance variables, only match within the same class\n+                        if classname and modname:\n+                            fullname = modname + '.' + classname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                matches.append((fullname, self.objects[fullname]))\n+                        # For module-level variables, only match within the same module\n+                        elif modname:\n+                            fullname = modname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                matches.append((fullname, self.objects[fullname]))\n+                        # Only fall back to fuzzy matching for non-instance, non-module variables\n+                        elif type not in ('attribute', 'data'):\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..106128d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -684,7 +684,17 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        if classname and modname:\n+                            fullname = modname + '.' + classname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                matches.append((fullname, self.objects[fullname]))\n+                        elif modname:\n+                            fullname = modname + '.' + name\n+                            if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                matches.append((fullname, self.objects[fullname]))\n+                        elif type not in ('attribute', 'data'):\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
