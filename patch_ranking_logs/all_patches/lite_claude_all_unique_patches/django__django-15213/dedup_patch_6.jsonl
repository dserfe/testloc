{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..45976f6 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,6 +979,10 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n+        if hasattr(self.expression, 'resolve_expression'):\n+            resolved = self.expression.resolve_expression(query=compiler.query)\n+            sql, params = compiler.compile(resolved)\n+            return sql, params\n         return compiler.compile(self.expression)\n \n     def __repr__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 7926e3e..1b494e5 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -590,6 +590,10 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n             return expression.get_group_by_cols(alias=alias)\n         return super().get_group_by_cols()\n     def as_sql(self, compiler, connection):\n+        if hasattr(self.expression, 'resolve_expression'):\n+            resolved = self.expression.resolve_expression(query=compiler.query)\n+            sql, params = compiler.compile(resolved)\n+            return (sql, params)\n         return compiler.compile(self.expression)\n     def __repr__(self):\n         return '{}({})'.format(self.__class__.__name__, self.expression)\n", "normalized_occurrence": 1}
