{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..fa98a17 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,12 +984,68 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if isinstance(call.func, ast.Name) and call.func.id in (\"all\", \"any\") and len(call.args) == 1:\n+            new_func, func_expl = self.visit(call.func)\n+            iter_arg = call.args[0]\n+            iter_res, iter_expl = self.visit(iter_arg)\n+            iter_name = self.variable()\n+            iter_assign = ast.Assign([ast.Name(iter_name, ast.Store())], iter_res)\n+            self.statements.append(iter_assign)\n+            iter_var = ast.Name(iter_name, ast.Load())\n+\n+            loop_var = self.variable()\n+            loop_assign = ast.Assign([ast.Name(loop_var, ast.Store())], ast.NameConstant(None))\n+            self.statements.append(loop_assign)\n+            loop_var_load = ast.Name(loop_var, ast.Load())\n+            loop_var_store = ast.Name(loop_var, ast.Store())\n+\n+            loop_body = []\n+            self.statements.append(ast.For(\n+                target=loop_var_store,\n+                iter=iter_var,\n+                body=loop_body,\n+                orelse=[]\n+            ))\n+\n+            if call.func.id == \"all\":\n+                loop_test = loop_var_load\n+            else:\n+                loop_test = ast.UnaryOp(ast.Not(), loop_var_load)\n+\n+            fail_inner = []\n+            self.on_failure.append(ast.If(loop_test, fail_inner, []))\n+            self.on_failure = fail_inner\n+\n+            loop_res, loop_expl = self.visit(loop_var_load)\n+            loop_body.append(ast.Assert(loop_res, None))\n+            loop_expl_format = self.pop_format_context(ast.Str(loop_expl))\n+            call = ast_Call(app, [loop_expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+\n+            return ast.BoolOp(ast.And(), []), func_expl\n+        else:\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            new_kwargs = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + \"=\" + expl)\n+                else:  # **args have `arg` keywords with an .arg of None\n+                    arg_expls.append(\"**\" + expl)\n+\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1137,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..5370489 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,12 +559,56 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1):\n+            new_func, func_expl = self.visit(call.func)\n+            iter_arg = call.args[0]\n+            iter_res, iter_expl = self.visit(iter_arg)\n+            iter_name = self.variable()\n+            iter_assign = ast.Assign([ast.Name(iter_name, ast.Store())], iter_res)\n+            self.statements.append(iter_assign)\n+            iter_var = ast.Name(iter_name, ast.Load())\n+            loop_var = self.variable()\n+            loop_assign = ast.Assign([ast.Name(loop_var, ast.Store())], ast.NameConstant(None))\n+            self.statements.append(loop_assign)\n+            loop_var_load = ast.Name(loop_var, ast.Load())\n+            loop_var_store = ast.Name(loop_var, ast.Store())\n+            loop_body = []\n+            self.statements.append(ast.For(target=loop_var_store, iter=iter_var, body=loop_body, orelse=[]))\n+            if call.func.id == 'all':\n+                loop_test = loop_var_load\n+            else:\n+                loop_test = ast.UnaryOp(ast.Not(), loop_var_load)\n+            fail_inner = []\n+            self.on_failure.append(ast.If(loop_test, fail_inner, []))\n+            self.on_failure = fail_inner\n+            loop_res, loop_expl = self.visit(loop_var_load)\n+            loop_body.append(ast.Assert(loop_res, None))\n+            loop_expl_format = self.pop_format_context(ast.Str(loop_expl))\n+            call = ast_Call(app, [loop_expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+            return (ast.BoolOp(ast.And(), []), func_expl)\n+        else:\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            new_kwargs = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + '=' + expl)\n+                else:\n+                    arg_expls.append('**' + expl)\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
