{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..ea9bc19 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -57,6 +57,15 @@ class CommandParser(ArgumentParser):\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n \n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        subparsers._parser_class = type(self)\n+        return subparsers\n+\n+    def add_parser(self, *args, **kwargs):\n+        subparser_class = kwargs.pop('parser_class', type(self))\n+        return super().add_parser(*args, parser_class=subparser_class, **kwargs)\n+\n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n         if self.missing_args_message and not (\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        subparsers._parser_class = type(self)\n+        return subparsers\n+    def add_parser(self, *args, **kwargs):\n+        subparser_class = kwargs.pop('parser_class', type(self))\n+        return super().add_parser(*args, parser_class=subparser_class, **kwargs)", "normalized_occurrence": 1}
