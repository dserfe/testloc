{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13757", "model_patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\nindex dd02372..902af99 100644\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -1430,6 +1430,15 @@ class Mul(Expr, AssocOp):\n                 co_xmul = co_self.extract_multiplicatively(co_old)\n         elif co_old.is_Rational:\n             return rv\n+        \n+        # Convert to Poly if one of the terms is a Poly\n+        from sympy.polys.polytools import Poly\n+        for arg in self2.args:\n+            if isinstance(arg, Poly):\n+                other_args = list(self2.args)\n+                other_args.remove(arg)\n+                # Convert other terms to Poly and multiply\n+                return arg*Mul(*other_args)\n \n         # break self and old into factors\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\nindex 6739e29..85dffb3 100644\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -914,6 +914,12 @@ class Mul(Expr, AssocOp):\n                 co_xmul = co_self.extract_multiplicatively(co_old)\n         elif co_old.is_Rational:\n             return rv\n+        from sympy.polys.polytools import Poly\n+        for arg in self2.args:\n+            if isinstance(arg, Poly):\n+                other_args = list(self2.args)\n+                other_args.remove(arg)\n+                return arg * Mul(*other_args)\n         c, nc = breakup(self2)\n         old_c, old_nc = breakup(old)\n         if co_xmul and co_xmul.is_Rational and (abs(co_old) != 1):\n", "normalized_occurrence": 1}
