{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..aedb397 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,10 +403,20 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(\n-            model, columns, exclude=meta_constraint_names | meta_index_names,\n-            **constraint_kwargs\n+        # Filter constraints based on both the columns and the type of constraint\n+        constraint_names = []\n+        all_names = self._constraint_names(\n+            model, columns, exclude=meta_constraint_names | meta_index_names\n         )\n+        for name in all_names:\n+            if sql == self.sql_delete_index:\n+                # For indexes, only include if it's an index (ends with _idx)\n+                if name.endswith('_idx'):\n+                    constraint_names.append(name)\n+            else:\n+                # For other constraints, include if it doesn't end with _idx\n+                if not name.endswith('_idx'):\n+                    constraint_names.append(name)\n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..5940cfd 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,7 +229,14 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        constraint_names = []\n+        all_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names)\n+        for name in all_names:\n+            if sql == self.sql_delete_index:\n+                if name.endswith('_idx'):\n+                    constraint_names.append(name)\n+            elif not name.endswith('_idx'):\n+                constraint_names.append(name)\n         if len(constraint_names) != 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n", "normalized_occurrence": 1}
