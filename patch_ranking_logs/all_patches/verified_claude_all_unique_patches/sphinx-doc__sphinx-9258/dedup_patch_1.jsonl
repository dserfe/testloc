{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..18498e8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -112,10 +112,30 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n         elif isinstance(node, ast.BinOp):\n-            result: List[Node] = unparse(node.left)\n-            result.extend(unparse(node.op))\n-            result.extend(unparse(node.right))\n-            return result\n+            if isinstance(node.op, ast.BitOr):\n+                # Special handling for union types (|)\n+                result: List[Node] = []\n+                # Left side of union\n+                left = unparse(node.left)\n+                if len(left) == 1 and isinstance(left[0], nodes.Text):\n+                    result.append(type_to_xref(str(left[0]), env))\n+                else:\n+                    result.extend(left)\n+                # Union operator\n+                result.extend([nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')])\n+                # Right side of union\n+                right = unparse(node.right)\n+                if len(right) == 1 and isinstance(right[0], nodes.Text):\n+                    result.append(type_to_xref(str(right[0]), env))\n+                else:\n+                    result.extend(right)\n+                return result\n+            else:\n+                # Handle other binary operators normally\n+                result = unparse(node.left)\n+                result.extend(unparse(node.op))\n+                result.extend(unparse(node.right))\n+                return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n         elif isinstance(node, ast.Constant):  # type: ignore\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..d6fd2c8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -61,10 +61,25 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n         elif isinstance(node, ast.BinOp):\n-            result: List[Node] = unparse(node.left)\n-            result.extend(unparse(node.op))\n-            result.extend(unparse(node.right))\n-            return result\n+            if isinstance(node.op, ast.BitOr):\n+                result: List[Node] = []\n+                left = unparse(node.left)\n+                if len(left) == 1 and isinstance(left[0], nodes.Text):\n+                    result.append(type_to_xref(str(left[0]), env))\n+                else:\n+                    result.extend(left)\n+                result.extend([nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')])\n+                right = unparse(node.right)\n+                if len(right) == 1 and isinstance(right[0], nodes.Text):\n+                    result.append(type_to_xref(str(right[0]), env))\n+                else:\n+                    result.extend(right)\n+                return result\n+            else:\n+                result = unparse(node.left)\n+                result.extend(unparse(node.op))\n+                result.extend(unparse(node.right))\n+                return result\n         elif isinstance(node, ast.BitOr):\n             return [nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')]\n         elif isinstance(node, ast.Constant):\n", "normalized_occurrence": 1}
