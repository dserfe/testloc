{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..d16c77c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -109,12 +109,16 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[str], List[str]]:\n     \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n+    elif isinstance(arg, list):\n+        return [x.strip() for x in arg if x.strip()]\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -142,8 +146,12 @@ def annotation_option(arg: Any) -> Any:\n     if arg in (None, True):\n         # suppress showing the representation of the object\n         return SUPPRESS\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n+    elif isinstance(arg, list):\n+        return [x.strip() for x in arg if x.strip()]\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n \n \n def bool_option(arg: Any) -> bool:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..abf91bc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -55,11 +55,15 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return EMPTY\n     return {x.strip() for x in arg.split(',') if x.strip()}\n-def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n+def inherited_members_option(arg: Any) -> Union[object, Set[str], List[str]]:\n     if arg in (None, True):\n         return 'object'\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n+    elif isinstance(arg, list):\n+        return [x.strip() for x in arg if x.strip()]\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -76,8 +80,12 @@ SUPPRESS = object()\n def annotation_option(arg: Any) -> Any:\n     if arg in (None, True):\n         return SUPPRESS\n+    elif isinstance(arg, str):\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n+    elif isinstance(arg, list):\n+        return [x.strip() for x in arg if x.strip()]\n     else:\n-        return arg\n+        raise ValueError(__('invalid value for inherited-members option: %s') % arg)\n def bool_option(arg: Any) -> bool:\n     return True\n def merge_special_members_option(options: Dict) -> None:\n", "normalized_occurrence": 1}
