{"model_name_or_path": "agentless", "instance_id": "django__django-11265", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 1309ca5..3f001b3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1683,22 +1683,31 @@ class Query(BaseExpression):\n             lookup_class = select_field.get_lookup('isnull')\n             lookup = lookup_class(select_field.get_col(alias), False)\n             query.where.add(lookup, AND)\n-        if alias in can_reuse:\n-            pk = select_field.model._meta.pk\n-            # Need to add a restriction so that outer query's filters are in effect for\n-            # the subquery, too.\n-            query.bump_prefix(self)\n-            lookup_class = select_field.get_lookup('exact')\n-            # Note that the query.select[0].alias is different from alias\n-            # due to bump_prefix above.\n-            lookup = lookup_class(pk.get_col(query.select[0].alias),\n-                                  pk.get_col(alias))\n-            query.where.add(lookup, AND)\n-            query.external_aliases.add(alias)\n-\n-        condition, needed_inner = self.build_filter(\n-            ('%s__in' % trimmed_prefix, query),\n-            current_negated=True, branch_negated=True, can_reuse=can_reuse)\n+        # Handle FilteredRelation annotations when excluding\n+        if filter_lhs in self.annotation_select:\n+            annotation = self.annotation_select[filter_lhs]\n+            query.add_annotation(annotation, alias)\n+            query.clear_ordering(True)\n+            condition, needed_inner = self.build_filter(\n+                ('%s__in' % trimmed_prefix, query),\n+                current_negated=True, branch_negated=True, can_reuse=can_reuse)\n+        else:\n+            if alias in can_reuse:\n+                pk = select_field.model._meta.pk\n+                # Need to add a restriction so that outer query's filters are in effect for\n+                # the subquery, too.\n+                query.bump_prefix(self)\n+                lookup_class = select_field.get_lookup('exact')\n+                # Note that the query.select[0].alias is different from alias\n+                # due to bump_prefix above.\n+                lookup = lookup_class(pk.get_col(query.select[0].alias),\n+                                      pk.get_col(alias))\n+                query.where.add(lookup, AND)\n+                query.external_aliases.add(alias)\n+\n+            condition, needed_inner = self.build_filter(\n+                ('%s__in' % trimmed_prefix, query),\n+                current_negated=True, branch_negated=True, can_reuse=can_reuse)\n         if contains_louter:\n             or_null_condition, _ = self.build_filter(\n                 ('%s__isnull' % trimmed_prefix, True),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 60a9579..d8cdfad 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -899,14 +899,20 @@ class Query(BaseExpression):\n             lookup_class = select_field.get_lookup('isnull')\n             lookup = lookup_class(select_field.get_col(alias), False)\n             query.where.add(lookup, AND)\n-        if alias in can_reuse:\n-            pk = select_field.model._meta.pk\n-            query.bump_prefix(self)\n-            lookup_class = select_field.get_lookup('exact')\n-            lookup = lookup_class(pk.get_col(query.select[0].alias), pk.get_col(alias))\n-            query.where.add(lookup, AND)\n-            query.external_aliases.add(alias)\n-        condition, needed_inner = self.build_filter(('%s__in' % trimmed_prefix, query), current_negated=True, branch_negated=True, can_reuse=can_reuse)\n+        if filter_lhs in self.annotation_select:\n+            annotation = self.annotation_select[filter_lhs]\n+            query.add_annotation(annotation, alias)\n+            query.clear_ordering(True)\n+            condition, needed_inner = self.build_filter(('%s__in' % trimmed_prefix, query), current_negated=True, branch_negated=True, can_reuse=can_reuse)\n+        else:\n+            if alias in can_reuse:\n+                pk = select_field.model._meta.pk\n+                query.bump_prefix(self)\n+                lookup_class = select_field.get_lookup('exact')\n+                lookup = lookup_class(pk.get_col(query.select[0].alias), pk.get_col(alias))\n+                query.where.add(lookup, AND)\n+                query.external_aliases.add(alias)\n+            condition, needed_inner = self.build_filter(('%s__in' % trimmed_prefix, query), current_negated=True, branch_negated=True, can_reuse=can_reuse)\n         if contains_louter:\n             or_null_condition, _ = self.build_filter(('%s__isnull' % trimmed_prefix, True), current_negated=True, branch_negated=True, can_reuse=can_reuse)\n             condition.add(or_null_condition, OR)\n", "normalized_occurrence": 1}
