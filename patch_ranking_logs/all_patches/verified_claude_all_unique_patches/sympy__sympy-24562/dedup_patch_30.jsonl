{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..d5d6ca5 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1613,11 +1613,18 @@ class Rational(Number):\n                         fq = fractions.Fraction(q)\n                         p = fp/fq\n                     try:\n-                        p = fractions.Fraction(p)\n+                        if q is None:\n+                            p = fractions.Fraction(p)\n+                            return Rational(p.numerator, p.denominator, 1)\n+                        else:\n+                            # If we have both p and q as strings representing numbers,\n+                            # convert p to Fraction first, then apply q\n+                            p = fractions.Fraction(p)\n+                            q = fractions.Fraction(q)\n+                            p = p/q\n+                            return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass  # error will raise below\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..0923ce9 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1399,11 +1399,16 @@ class Rational(Number):\n                         fq = fractions.Fraction(q)\n                         p = fp / fq\n                     try:\n-                        p = fractions.Fraction(p)\n+                        if q is None:\n+                            p = fractions.Fraction(p)\n+                            return Rational(p.numerator, p.denominator, 1)\n+                        else:\n+                            p = fractions.Fraction(p)\n+                            q = fractions.Fraction(q)\n+                            p = p / q\n+                            return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n", "normalized_occurrence": 1}
