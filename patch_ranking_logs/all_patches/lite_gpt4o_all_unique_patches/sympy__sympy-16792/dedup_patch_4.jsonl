{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..1a2e2f3 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -462,9 +462,15 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n-            return \"&{0}\".format(self._string_var(arg.name))\n+            if isinstance(arg, MatrixSymbol):\n+                return \"<{0}*> {1}.data\".format(arg.dtype, self._string_var(arg.name))\n+            else:\n+                return \"&{0}\".format(self._string_var(arg.name))\n         else:\n-            return self._string_var(arg.name)\n+            if isinstance(arg, MatrixSymbol):\n+                return \"<{0}*> {1}.data\".format(arg.dtype, self._string_var(arg.name))\n+            else:\n+                return self._string_var(arg.name)\n \n     def _string_var(self, var):\n         printer = self.generator.printer.doprint\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..fe505f0 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -213,7 +213,12 @@ class CythonCodeWrapper(CodeWrapper):\n             t = arg.get_datatype('c')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n-            return '&{0}'.format(self._string_var(arg.name))\n+            if isinstance(arg, MatrixSymbol):\n+                return '<{0}*> {1}.data'.format(arg.dtype, self._string_var(arg.name))\n+            else:\n+                return '&{0}'.format(self._string_var(arg.name))\n+        elif isinstance(arg, MatrixSymbol):\n+            return '<{0}*> {1}.data'.format(arg.dtype, self._string_var(arg.name))\n         else:\n             return self._string_var(arg.name)\n     def _string_var(self, var):\n", "normalized_occurrence": 1}
