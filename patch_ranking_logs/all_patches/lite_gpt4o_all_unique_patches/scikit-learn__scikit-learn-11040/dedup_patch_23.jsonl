{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..9141420 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,7 +107,7 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n-        self.n_neighbors = n_neighbors\n+        self.n_neighbors = self._validate_n_neighbors(n_neighbors)\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -261,7 +261,11 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n \n         return self\n \n-    @property\n+    def _validate_n_neighbors(self, n_neighbors):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(\"n_neighbors must be an integer\")\n+        return n_neighbors\n     def _pairwise(self):\n         # For cross-validation routines to split data correctly\n         return self.metric == 'precomputed'\n@@ -328,6 +332,8 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n \n+        n_neighbors = self._validate_n_neighbors(n_neighbors)\n+\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..abb63d1 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,7 +47,7 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n-        self.n_neighbors = n_neighbors\n+        self.n_neighbors = self._validate_n_neighbors(n_neighbors)\n         self.radius = radius\n         self.algorithm = algorithm\n         self.leaf_size = leaf_size\n@@ -154,7 +154,11 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n             if self.n_neighbors <= 0:\n                 raise ValueError('Expected n_neighbors > 0. Got %d' % self.n_neighbors)\n         return self\n-    @property\n+    def _validate_n_neighbors(self, n_neighbors):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError('n_neighbors must be an integer')\n+        return n_neighbors\n     def _pairwise(self):\n         return self.metric == 'precomputed'\n class KNeighborsMixin(object):\n@@ -162,6 +166,7 @@ class KNeighborsMixin(object):\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        n_neighbors = self._validate_n_neighbors(n_neighbors)\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n", "normalized_occurrence": 1}
