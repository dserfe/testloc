{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..b0b1173 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -255,7 +255,28 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n-        elif term.is_polynomial(k):\n+        elif term.is_polynomial(k) and (a.is_Integer and n.is_Integer):\n+            poly = term.as_poly(k)\n+\n+            A = B = Q = S.One\n+\n+            all_roots = roots(poly)\n+\n+            M = 0\n+            for r, m in all_roots.items():\n+                M += m\n+                A *= RisingFactorial(a - r, n - a + 1)**m\n+                Q *= (n - r)**m\n+\n+            if M < poly.degree():\n+                arg = quo(poly, Q.as_poly(k))\n+                B = self.func(arg, (k, a, n)).doit()\n+\n+            return poly.LC()**(n - a + 1) * A * B\n+        elif term.is_polynomial(k) and (a.is_Integer and n.is_Integer):\n+            from sympy.functions.special.q_functions import q_pochhammer\n+            q = 1 / 2\n+            return q_pochhammer(q**a, q, n-a)\n             poly = term.as_poly(k)\n \n             A = B = Q = S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..4225266 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,7 +61,23 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n-        elif term.is_polynomial(k):\n+        elif term.is_polynomial(k) and (a.is_Integer and n.is_Integer):\n+            poly = term.as_poly(k)\n+            A = B = Q = S.One\n+            all_roots = roots(poly)\n+            M = 0\n+            for r, m in all_roots.items():\n+                M += m\n+                A *= RisingFactorial(a - r, n - a + 1) ** m\n+                Q *= (n - r) ** m\n+            if M < poly.degree():\n+                arg = quo(poly, Q.as_poly(k))\n+                B = self.func(arg, (k, a, n)).doit()\n+            return poly.LC() ** (n - a + 1) * A * B\n+        elif term.is_polynomial(k) and (a.is_Integer and n.is_Integer):\n+            from sympy.functions.special.q_functions import q_pochhammer\n+            q = 1 / 2\n+            return q_pochhammer(q ** a, q, n - a)\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n             all_roots = roots(poly)\n", "normalized_occurrence": 1}
