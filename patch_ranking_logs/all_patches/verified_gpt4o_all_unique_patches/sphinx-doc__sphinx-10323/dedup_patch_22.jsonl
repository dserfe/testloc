{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..a68077d 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,7 +343,17 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Find first non-empty line to determine the indentation level\n+            for line in lines:\n+                stripped_line = line.lstrip()\n+                if stripped_line:\n+                    indent = len(line) - len(stripped_line)\n+                    break\n+            else:\n+                indent = 0\n+\n+            indent_spaces = ' ' * indent\n+            lines.insert(0, indent_spaces + prepend + '\\n')\n \n         return lines\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..2946851 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,7 +226,15 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            for line in lines:\n+                stripped_line = line.lstrip()\n+                if stripped_line:\n+                    indent = len(line) - len(stripped_line)\n+                    break\n+            else:\n+                indent = 0\n+            indent_spaces = ' ' * indent\n+            lines.insert(0, indent_spaces + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 1}
