{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..03fd4e0 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,14 +120,19 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if not isinstance(other, Basic):\n+            try:\n+                # Only attempt to convert types that we know are safe\n+                if isinstance(other, (int, float, complex)):\n+                    other = sympify(other)\n+                else:\n+                    return False\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        if not isinstance(other, Expr):\n             return False\n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n+        if not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..b34ad73 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,11 +46,15 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if not isinstance(other, Basic):\n+            try:\n+                if isinstance(other, (int, float, complex)):\n+                    other = sympify(other)\n+                else:\n+                    return False\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        if not isinstance(other, Expr):\n             return False\n         if not (self.is_Number and other.is_Number) and type(self) != type(other):\n             return False\n", "normalized_occurrence": 4}
