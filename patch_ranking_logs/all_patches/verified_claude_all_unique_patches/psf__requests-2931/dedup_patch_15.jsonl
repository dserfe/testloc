{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2931", "model_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 7aa8a2f..6acc93b 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -689,15 +689,15 @@ def to_native_string(string, encoding='ascii'):\n     string in the native string type, encoding and decoding where necessary.\n     This assumes ASCII unless told otherwise.\n     \"\"\"\n-    out = None\n-\n+    # Note: Some code will pass a bytes/str instance, others will pass a unicode/str\n+    # instance. This method handles both cases.\n     if isinstance(string, builtin_str):\n         out = string\n     else:\n         if is_py2:\n-            out = string.encode(encoding)\n+            out = string.encode(encoding) if isinstance(string, unicode) else string\n         else:\n-            out = string.decode(encoding)\n+            out = string.decode(encoding) if isinstance(string, bytes) else string\n \n     return out\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 69197df..96e5cc7 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -316,13 +316,12 @@ def get_auth_from_url(url):\n         auth = ('', '')\n     return auth\n def to_native_string(string, encoding='ascii'):\n-    out = None\n     if isinstance(string, builtin_str):\n         out = string\n     elif is_py2:\n-        out = string.encode(encoding)\n+        out = string.encode(encoding) if isinstance(string, unicode) else string\n     else:\n-        out = string.decode(encoding)\n+        out = string.decode(encoding) if isinstance(string, bytes) else string\n     return out\n def urldefragauth(url):\n     scheme, netloc, path, params, query, fragment = urlparse(url)\n", "normalized_occurrence": 1}
