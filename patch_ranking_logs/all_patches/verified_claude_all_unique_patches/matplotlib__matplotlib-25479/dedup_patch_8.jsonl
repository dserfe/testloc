{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 79762f1..8259120 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -145,7 +145,10 @@ class ColormapRegistry(Mapping):\n             _api.warn_external(f\"Overwriting the cmap {name!r} \"\n                                \"that was already in the registry.\")\n \n-        self._cmaps[name] = cmap.copy()\n+        # Create a copy and ensure its name matches the registered name\n+        registered_cmap = cmap.copy()\n+        registered_cmap.name = name\n+        self._cmaps[name] = registered_cmap\n \n     def unregister(self, name):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex aa7fbd0..c574156 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -42,7 +42,9 @@ class ColormapRegistry(Mapping):\n             elif name in self._builtin_cmaps and (not self._allow_override_builtin):\n                 raise ValueError(f'Re-registering the builtin cmap {name!r} is not allowed.')\n             _api.warn_external(f'Overwriting the cmap {name!r} that was already in the registry.')\n-        self._cmaps[name] = cmap.copy()\n+        registered_cmap = cmap.copy()\n+        registered_cmap.name = name\n+        self._cmaps[name] = registered_cmap\n     def unregister(self, name):\n         if name in self._builtin_cmaps:\n             raise ValueError(f'cannot unregister {name!r} which is a builtin colormap.')\n", "normalized_occurrence": 4}
