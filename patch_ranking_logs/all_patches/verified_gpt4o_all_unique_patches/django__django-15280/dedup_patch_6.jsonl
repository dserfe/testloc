{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..2f57a69 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -149,7 +149,7 @@ class ForwardManyToOneDescriptor:\n         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n     def get_object(self, instance):\n-        qs = self.get_queryset(instance=instance)\n+        qs = self.get_queryset(instance=instance).only(*instance.get_deferred_fields())\n         # Assuming the database enforces foreign keys, this won't fail.\n         return qs.get(self.field.get_reverse_related_filter(instance))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..ea5db07 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -40,7 +40,7 @@ class ForwardManyToOneDescriptor:\n                 remote_field.set_cached_value(rel_obj, instance)\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n-        qs = self.get_queryset(instance=instance)\n+        qs = self.get_queryset(instance=instance).only(*instance.get_deferred_fields())\n         return qs.get(self.field.get_reverse_related_filter(instance))\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
