{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7229", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 952c546..c3576eb 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -309,9 +309,15 @@ def merge_collected(\n                         raise\n \n                 if name in merged_vars:\n-                    merged_vars[name].attrs = merge_attrs(\n-                        [var.attrs for var in variables], combine_attrs=combine_attrs\n-                    )\n+                    if name in merged_vars:\n+                        if name in prioritized:\n+                            merged_vars[name].attrs = merge_attrs(\n+                                [prioritized[name][0].attrs], combine_attrs=combine_attrs\n+                            )\n+                        else:\n+                            merged_vars[name].attrs = merge_attrs(\n+                                [var.attrs for var in variables], combine_attrs=combine_attrs\n+                            )\n \n     return merged_vars, merged_indexes\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex ca74f84..ce92c3d 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -192,7 +192,11 @@ def merge_collected(grouped: dict[Hashable, list[MergeElement]], prioritized: Ma\n                     if compat != 'minimal':\n                         raise\n                 if name in merged_vars:\n-                    merged_vars[name].attrs = merge_attrs([var.attrs for var in variables], combine_attrs=combine_attrs)\n+                    if name in merged_vars:\n+                        if name in prioritized:\n+                            merged_vars[name].attrs = merge_attrs([prioritized[name][0].attrs], combine_attrs=combine_attrs)\n+                        else:\n+                            merged_vars[name].attrs = merge_attrs([var.attrs for var in variables], combine_attrs=combine_attrs)\n     return (merged_vars, merged_indexes)\n \n def collect_variables_and_indexes(list_of_mappings: list[DatasetLike], indexes: Mapping[Any, Any] | None=None) -> dict[Hashable, list[MergeElement]]:\n", "normalized_occurrence": 1}
