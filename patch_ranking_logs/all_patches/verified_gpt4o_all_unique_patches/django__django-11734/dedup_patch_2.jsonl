{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..27e6802 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -553,10 +553,9 @@ class ResolvedOuterRef(F):\n     contains_aggregate = False\n \n     def as_sql(self, *args, **kwargs):\n-        raise ValueError(\n-            'This queryset contains a reference to an outer query and may '\n-            'only be used in a subquery.'\n-        )\n+        if self.negated:\n+            sql = 'NOT ({})'.format(sql)\n+        return sql, params\n \n     def relabeled_clone(self, relabels):\n         return self\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..4dc7afb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -316,7 +316,9 @@ class F(Combinable):\n class ResolvedOuterRef(F):\n     contains_aggregate = False\n     def as_sql(self, *args, **kwargs):\n-        raise ValueError('This queryset contains a reference to an outer query and may only be used in a subquery.')\n+        if self.negated:\n+            sql = 'NOT ({})'.format(sql)\n+        return (sql, params)\n     def relabeled_clone(self, relabels):\n         return self\n class OuterRef(F):\n", "normalized_occurrence": 1}
