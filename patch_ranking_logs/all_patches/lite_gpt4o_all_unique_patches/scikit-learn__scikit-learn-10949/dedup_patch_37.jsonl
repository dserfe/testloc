{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..f0ae3b4 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -466,7 +466,13 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # not a data type (e.g. a column named dtype in a pandas DataFrame)\n         dtype_orig = None\n \n+    # Check if the input is a pandas DataFrame\n+    is_dataframe = isinstance(array, pd.DataFrame)\n+    \n     if dtype_numeric:\n+        # Special handling for pandas DataFrame\n+        if is_dataframe:\n+            array_orig_dtype = array.dtypes\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n             # if input is object, convert to float.\n             dtype = np.float64\n@@ -556,6 +562,13 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             _assert_all_finite(array,\n                                allow_nan=force_all_finite == 'allow-nan')\n \n+    # Ensure dtype conversion warning for pandas DataFrame\n+    if is_dataframe and warn_on_dtype:\n+        if any(array_orig_dtype != array.dtypes):\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (array_orig_dtype.to_string(), array.dtypes.to_string(), context))\n+            warnings.warn(msg, DataConversionWarning)\n+    \n     shape_repr = _shape_repr(array.shape)\n     if ensure_min_samples > 0:\n         n_samples = _num_samples(array)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..08a419a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -128,7 +128,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n     dtype_orig = getattr(array, 'dtype', None)\n     if not hasattr(dtype_orig, 'kind'):\n         dtype_orig = None\n+    is_dataframe = isinstance(array, pd.DataFrame)\n     if dtype_numeric:\n+        if is_dataframe:\n+            array_orig_dtype = array.dtypes\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n             dtype = np.float64\n         else:\n@@ -172,6 +175,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n         if force_all_finite:\n             _assert_all_finite(array, allow_nan=force_all_finite == 'allow-nan')\n+    if is_dataframe and warn_on_dtype:\n+        if any(array_orig_dtype != array.dtypes):\n+            msg = 'Data with input dtype %s was converted to %s%s.' % (array_orig_dtype.to_string(), array.dtypes.to_string(), context)\n+            warnings.warn(msg, DataConversionWarning)\n     shape_repr = _shape_repr(array.shape)\n     if ensure_min_samples > 0:\n         n_samples = _num_samples(array)\n", "normalized_occurrence": 1}
