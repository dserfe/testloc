{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a6a3e97..465aac8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,7 +1124,8 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n+        # Only check filterable attribute if it's explicitly set as an expression property\n+        if hasattr(type(expression), 'filterable') and not expression.filterable:\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n                 'clause.'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5b98027..f28dfb8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -611,7 +611,7 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n     def check_filterable(self, expression):\n-        if not getattr(expression, 'filterable', True):\n+        if hasattr(type(expression), 'filterable') and (not expression.filterable):\n             raise NotSupportedError(expression.__class__.__name__ + ' is disallowed in the filter clause.')\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n", "normalized_occurrence": 2}
