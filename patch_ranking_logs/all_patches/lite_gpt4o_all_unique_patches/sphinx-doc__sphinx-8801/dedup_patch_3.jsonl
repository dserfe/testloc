{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..40e2c92 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -659,7 +659,7 @@ class Documenter:\n             return False, [(m.name, m.value) for m in members.values()]\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n-                           if m.directly_defined]\n+                           if m.directly_defined or isinstance(m.value, INSTANCEATTR)]\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..e097b88 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -343,7 +343,7 @@ class Documenter:\n         elif self.options.inherited_members:\n             return (False, [(m.name, m.value) for m in members.values()])\n         else:\n-            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n+            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined or isinstance(m.value, INSTANCEATTR)])\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n", "normalized_occurrence": 1}
