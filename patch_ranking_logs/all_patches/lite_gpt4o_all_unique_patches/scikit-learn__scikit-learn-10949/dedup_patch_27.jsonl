{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..d0b98c1 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -491,7 +491,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             estimator_name = estimator\n         else:\n             estimator_name = estimator.__class__.__name__\n-    else:\n+    elif hasattr(array, \"dtypes\") and hasattr(array, \"columns\"):\n+        # Handling for pandas DataFrame\n+        dtype_orig = array.dtypes\n+        array = array.to_numpy(dtype=dtype, copy=copy)\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n@@ -501,7 +504,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       dtype=dtype, copy=copy,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n-    else:\n+    elif hasattr(array, \"dtypes\") and hasattr(array, \"columns\"):\n+        # Handling for pandas DataFrame\n+        dtype_orig = array.dtypes\n+        array = array.to_numpy(dtype=dtype, copy=copy)\n         # If np.array(..) gives ComplexWarning, then we convert the warning\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..fe05306 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -145,13 +145,17 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             estimator_name = estimator\n         else:\n             estimator_name = estimator.__class__.__name__\n-    else:\n+    elif hasattr(array, 'dtypes') and hasattr(array, 'columns'):\n+        dtype_orig = array.dtypes\n+        array = array.to_numpy(dtype=dtype, copy=copy)\n         estimator_name = 'Estimator'\n     context = ' by %s' % estimator_name if estimator is not None else ''\n     if sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n-    else:\n+    elif hasattr(array, 'dtypes') and hasattr(array, 'columns'):\n+        dtype_orig = array.dtypes\n+        array = array.to_numpy(dtype=dtype, copy=copy)\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n", "normalized_occurrence": 1}
