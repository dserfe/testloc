{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..30ec618 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,6 +336,18 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n+        # Handle foreign key fields that use natural keys\n+        for field in Model._meta.fields:\n+            if field.is_relation and field.many_to_one:\n+                field_value = data.get(field.name)\n+                if isinstance(field_value, (list, tuple)):\n+                    try:\n+                        related_model = field.remote_field.model\n+                        if hasattr(related_model._default_manager, 'get_by_natural_key'):\n+                            data[field.attname] = related_model._default_manager.db_manager(db).get_by_natural_key(*field_value).pk\n+                    except (related_model.DoesNotExist, AttributeError):\n+                        pass\n+        \n         natural_key = Model(**data).natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..4aa7324 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,6 +144,16 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n+        for field in Model._meta.fields:\n+            if field.is_relation and field.many_to_one:\n+                field_value = data.get(field.name)\n+                if isinstance(field_value, (list, tuple)):\n+                    try:\n+                        related_model = field.remote_field.model\n+                        if hasattr(related_model._default_manager, 'get_by_natural_key'):\n+                            data[field.attname] = related_model._default_manager.db_manager(db).get_by_natural_key(*field_value).pk\n+                    except (related_model.DoesNotExist, AttributeError):\n+                        pass\n         natural_key = Model(**data).natural_key()\n         try:\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n", "normalized_occurrence": 1}
