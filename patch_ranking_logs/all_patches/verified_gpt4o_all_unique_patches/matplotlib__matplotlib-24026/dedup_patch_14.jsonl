{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24026", "model_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex 718e3a5..5254a2c 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -70,7 +70,9 @@ def stackplot(axes, x, *args,\n \n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        # Convert color cycle references (like 'C0', 'C1') to actual colors\n+        validated_colors = [axes._get_lines.prop_cycler.by_key()['color'][int(c[1])] if isinstance(c, str) and c.startswith('C') else c for c in colors]\n+        axes.set_prop_cycle(color=validated_colors)\n \n     # Assume data passed has not been 'stacked', so stack it here.\n     # We'll need a float buffer for the upcoming calculations.\n@@ -121,4 +123,4 @@ def stackplot(axes, x, *args,\n         r.append(axes.fill_between(x, stack[i, :], stack[i + 1, :],\n                                    facecolor=color, label=next(labels, None),\n                                    **kwargs))\n-    return r\n+    return r\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/stackplot.py b/lib/matplotlib/stackplot.py\nindex a81621f..248a810 100644\n--- a/lib/matplotlib/stackplot.py\n+++ b/lib/matplotlib/stackplot.py\n@@ -5,7 +5,8 @@ def stackplot(axes, x, *args, labels=(), colors=None, baseline='zero', **kwargs)\n     y = np.row_stack(args)\n     labels = iter(labels)\n     if colors is not None:\n-        axes.set_prop_cycle(color=colors)\n+        validated_colors = [axes._get_lines.prop_cycler.by_key()['color'][int(c[1])] if isinstance(c, str) and c.startswith('C') else c for c in colors]\n+        axes.set_prop_cycle(color=validated_colors)\n     stack = np.cumsum(y, axis=0, dtype=np.promote_types(y.dtype, np.float32))\n     _api.check_in_list(['zero', 'sym', 'wiggle', 'weighted_wiggle'], baseline=baseline)\n     if baseline == 'zero':\n", "normalized_occurrence": 1}
