{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..3b4968c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -238,7 +238,18 @@ class Field(RegisterLookupMixin):\n                     id='fields.E003',\n                 )\n             ]\n-        else:\n+            # Check if max_length is sufficient for each choice\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"One or more choices are too long for the field's max_length.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n+\n             return []\n \n     def _check_choices(self):\n@@ -279,7 +290,18 @@ class Field(RegisterLookupMixin):\n             # Special case: choices=['ab']\n             if isinstance(choices_group, str):\n                 break\n-        else:\n+            # Check if max_length is sufficient for each choice\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"One or more choices are too long for the field's max_length.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n+\n             return []\n \n         return [\n@@ -300,7 +322,18 @@ class Field(RegisterLookupMixin):\n                     id='fields.E006',\n                 )\n             ]\n-        else:\n+            # Check if max_length is sufficient for each choice\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"One or more choices are too long for the field's max_length.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n+\n             return []\n \n     def _check_null_allowed_for_primary_keys(self):\n@@ -318,7 +351,18 @@ class Field(RegisterLookupMixin):\n                     id='fields.E007',\n                 )\n             ]\n-        else:\n+            # Check if max_length is sufficient for each choice\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [\n+                            checks.Error(\n+                                \"One or more choices are too long for the field's max_length.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        ]\n+\n             return []\n \n     def _check_backend_specific_checks(self, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..e521acc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -115,7 +115,10 @@ class Field(RegisterLookupMixin):\n             return [checks.Error('Field names must not contain \"%s\".' % (LOOKUP_SEP,), obj=self, id='fields.E002')]\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n-        else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"One or more choices are too long for the field's max_length.\", obj=self, id='fields.E009')]\n             return []\n     def _check_choices(self):\n         if not self.choices:\n@@ -138,18 +141,27 @@ class Field(RegisterLookupMixin):\n                     break\n             if isinstance(choices_group, str):\n                 break\n-        else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"One or more choices are too long for the field's max_length.\", obj=self, id='fields.E009')]\n             return []\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [checks.Error(\"'db_index' must be None, True or False.\", obj=self, id='fields.E006')]\n-        else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"One or more choices are too long for the field's max_length.\", obj=self, id='fields.E009')]\n             return []\n     def _check_null_allowed_for_primary_keys(self):\n         if self.primary_key and self.null and (not connection.features.interprets_empty_strings_as_nulls):\n             return [checks.Error('Primary keys must not have null=True.', hint='Set null=False on the field, or remove primary_key=True argument.', obj=self, id='fields.E007')]\n-        else:\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        return [checks.Error(\"One or more choices are too long for the field's max_length.\", obj=self, id='fields.E009')]\n             return []\n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n", "normalized_occurrence": 1}
