{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c5f3683..7712c5e 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -204,8 +204,11 @@ class Options:\n \n         # If the db_table wasn't provided, use the app_label + model_name.\n         if not self.db_table:\n+            # Ensure unique table names by prefixing them with the app label\n             self.db_table = \"%s_%s\" % (self.app_label, self.model_name)\n             self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            if self.app_label:\n+                self.db_table = \"%s_%s\" % (self.app_label, self.db_table)\n \n     def _format_names_with_class(self, cls, objs):\n         \"\"\"App label/class name interpolation for object names.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbc5560..77eb2d6 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -128,6 +128,8 @@ class Options:\n         if not self.db_table:\n             self.db_table = '%s_%s' % (self.app_label, self.model_name)\n             self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            if self.app_label:\n+                self.db_table = '%s_%s' % (self.app_label, self.db_table)\n     def _format_names_with_class(self, cls, objs):\n         new_objs = []\n         for obj in objs:\n", "normalized_occurrence": 1}
