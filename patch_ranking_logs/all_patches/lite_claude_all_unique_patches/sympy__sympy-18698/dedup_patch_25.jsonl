{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..d9b2ce0 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -322,13 +322,29 @@ def dup_sqf_list(f, K, all=False):\n         h = dup_sub(q, d, K)\n \n         if not h:\n-            result.append((p, i))\n+            # Find existing factor with same multiplicity\n+            found = False\n+            for j, (factor, mult) in enumerate(result):\n+                if mult == i:\n+                    result[j] = (dup_mul(factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            # Find existing factor with same multiplicity\n+            found = False\n+            for j, (factor, mult) in enumerate(result):\n+                if mult == i:\n+                    result[j] = (dup_mul(factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n \n         i += 1\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..7887706 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -111,11 +111,25 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n         if not h:\n-            result.append((p, i))\n+            found = False\n+            for j, (factor, mult) in enumerate(result):\n+                if mult == i:\n+                    result[j] = (dup_mul(factor, p, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((p, i))\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            found = False\n+            for j, (factor, mult) in enumerate(result):\n+                if mult == i:\n+                    result[j] = (dup_mul(factor, g, K), i)\n+                    found = True\n+                    break\n+            if not found:\n+                result.append((g, i))\n         i += 1\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n", "normalized_occurrence": 1}
