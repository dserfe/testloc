{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..605de5d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -297,7 +297,17 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    # Skip watching directories that are too broad (like project root)\n+                    if directory.name in {'.git', '__pycache__', 'node_modules'}:\n+                        continue\n+                    # Only watch template files and python files in glob patterns\n+                    if any(pattern.endswith(ext) for ext in ['.py', '.html', '.htm', '.django']):\n+                        yield from directory.glob(pattern)\n+                    else:\n+                        # For other patterns, only watch if they're not too broad\n+                        path_parts = len(directory.parts)\n+                        if path_parts > 2:  # Skip if it's too close to root\n+                            yield from directory.glob(pattern)\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..12b266d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -185,7 +185,14 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    if directory.name in {'.git', '__pycache__', 'node_modules'}:\n+                        continue\n+                    if any((pattern.endswith(ext) for ext in ['.py', '.html', '.htm', '.django'])):\n+                        yield from directory.glob(pattern)\n+                    else:\n+                        path_parts = len(directory.parts)\n+                        if path_parts > 2:\n+                            yield from directory.glob(pattern)\n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         while django_main_thread.is_alive():\n             if app_reg.ready_event.wait(timeout=0.1):\n", "normalized_occurrence": 1}
