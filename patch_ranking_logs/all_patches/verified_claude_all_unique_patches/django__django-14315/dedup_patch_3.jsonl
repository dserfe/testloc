{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14315", "model_patch": "diff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\nindex e5f3723..bc011bb 100644\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -21,6 +21,5 @@ class BaseDatabaseClient:\n \n     def runshell(self, parameters):\n         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n-        if env:\n-            env = {**os.environ, **env}\n-        subprocess.run(args, env=env, check=True)\n+        env = {**os.environ, **env} if env is not None else None\n+        subprocess.run(args, env=env, check=True)\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py\nindex 7269017..955a2ec 100644\n--- a/django/db/backends/base/client.py\n+++ b/django/db/backends/base/client.py\n@@ -9,6 +9,5 @@ class BaseDatabaseClient:\n         raise NotImplementedError('subclasses of BaseDatabaseClient must provide a settings_to_cmd_args_env() method or override a runshell().')\n     def runshell(self, parameters):\n         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n-        if env:\n-            env = {**os.environ, **env}\n+        env = {**os.environ, **env} if env is not None else None\n         subprocess.run(args, env=env, check=True)\n\\ No newline at end of file\n", "normalized_occurrence": 2}
