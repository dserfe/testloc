{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..81e509c 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -56,6 +56,18 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers = None\n+\n+    def add_subparsers(self, **kwargs):\n+        if 'parser_class' not in kwargs:\n+            kwargs['parser_class'] = type(self)\n+        self._subparsers = super().add_subparsers(**kwargs)\n+        return self._subparsers\n+\n+    def add_parser(self, name, **kwargs):\n+        if self._subparsers is None:\n+            raise RuntimeError(\"Subparsers need to be created first using add_subparsers()\")\n+        return self._subparsers.add_parser(name, **kwargs)\n \n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 14f4b26..138082f 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -20,6 +20,16 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers = None\n+    def add_subparsers(self, **kwargs):\n+        if 'parser_class' not in kwargs:\n+            kwargs['parser_class'] = type(self)\n+        self._subparsers = super().add_subparsers(**kwargs)\n+        return self._subparsers\n+    def add_parser(self, name, **kwargs):\n+        if self._subparsers is None:\n+            raise RuntimeError('Subparsers need to be created first using add_subparsers()')\n+        return self._subparsers.add_parser(name, **kwargs)\n     def parse_args(self, args=None, namespace=None):\n         if self.missing_args_message and (not (args or any((not arg.startswith('-') for arg in args)))):\n             self.error(self.missing_args_message)\n", "normalized_occurrence": 1}
