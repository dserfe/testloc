{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13837", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 3b7178c..2ceba20 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -216,15 +216,17 @@ def get_child_arguments():\n     executable is reported to not have the .exe extension which can cause bugs\n     on reloading.\n     \"\"\"\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n \n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        # The server was started with `python -m django runserver`.\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None:\n+        # The Python process was started with -m\n+        package = __main__.__spec__.parent\n+        if package:  # Empty string means script was a directory/zip file\n+            # The server was started with `python -m some_package`\n+            args += ['-m', package]\n+            args += sys.argv[1:]\n     elif not py_script.exists():\n         # sys.argv[0] may not exist for several reasons on Windows.\n         # It may exist with a .exe extension or have a -script.py suffix.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 9acf8d8..e539369 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -131,13 +131,14 @@ def sys_path_directories():\n         else:\n             yield resolved_path\n def get_child_arguments():\n-    import django.__main__\n-    django_main_path = Path(django.__main__.__file__)\n+    import __main__\n     py_script = Path(sys.argv[0])\n     args = [sys.executable] + ['-W%s' % o for o in sys.warnoptions]\n-    if py_script == django_main_path:\n-        args += ['-m', 'django']\n-        args += sys.argv[1:]\n+    if hasattr(__main__, '__spec__') and __main__.__spec__ is not None:\n+        package = __main__.__spec__.parent\n+        if package:\n+            args += ['-m', package]\n+            args += sys.argv[1:]\n     elif not py_script.exists():\n         exe_entrypoint = py_script.with_suffix('.exe')\n         if exe_entrypoint.exists():\n", "normalized_occurrence": 6}
