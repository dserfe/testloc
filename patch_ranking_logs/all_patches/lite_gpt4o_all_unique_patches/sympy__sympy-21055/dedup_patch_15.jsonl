{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..961a901 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -6,7 +7,11 @@ from sympy.logic.boolalg import Boolean\n from sympy.assumptions import ask, Q  # type: ignore\n \n \n+from sympy.functions.elementary.complexes import arg as sympy_arg\n+\n def refine(expr, assumptions=True):\n+    if isinstance(expr, sympy_arg) and ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n     \"\"\"\n     Simplify an expression using assumptions.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..f5b9c49 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -2,7 +2,11 @@ from typing import Dict, Callable\n from sympy.core import S, Add, Expr, Basic, Mul\n from sympy.logic.boolalg import Boolean\n from sympy.assumptions import ask, Q\n+from sympy.functions.elementary.complexes import arg as sympy_arg\n def refine(expr, assumptions=True):\n+    if isinstance(expr, sympy_arg) and ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    '\\n    Simplify an expression using assumptions.\\n\\n    Explanation\\n    ===========\\n\\n    Unlike :func:`~.simplify()` which performs structural simplification\\n    without any assumption, this function transforms the expression into\\n    the form which is only valid under certain assumptions. Note that\\n    ``simplify()`` is generally not done in refining process.\\n\\n    Refining boolean expression involves reducing it to ``True`` or\\n    ``False``. Unlike :func:~.`ask()`, the expression will not be reduced\\n    if the truth value cannot be determined.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import refine, sqrt, Q\\n    >>> from sympy.abc import x\\n    >>> refine(sqrt(x**2), Q.real(x))\\n    Abs(x)\\n    >>> refine(sqrt(x**2), Q.positive(x))\\n    x\\n\\n    >>> refine(Q.real(x), Q.positive(x))\\n    True\\n    >>> refine(Q.positive(x), Q.real(x))\\n    Q.positive(x)\\n\\n    See Also\\n    ========\\n\\n    sympy.simplify.simplify.simplify : Structural simplification without assumptions.\\n    sympy.assumptions.ask.ask : Query for boolean expressions using assumptions.\\n    '\n     if not isinstance(expr, Basic):\n         return expr\n     if not expr.is_Atom:\n", "normalized_occurrence": 1}
