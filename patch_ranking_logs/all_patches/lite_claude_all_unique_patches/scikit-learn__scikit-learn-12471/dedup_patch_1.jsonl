{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 80fea06..045fd87 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -110,7 +110,8 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # continue `The rows are marked `X_mask` and will be\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    # Ensure array is of object dtype for string categories to prevent truncation\n+                    Xi = Xi.astype(object) if Xi.dtype.kind in ('U', 'S') else Xi.copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 8703749..71f91d8 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -63,7 +63,7 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     raise ValueError(msg)\n                 else:\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    Xi = Xi.astype(object) if Xi.dtype.kind in ('U', 'S') else Xi.copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "normalized_occurrence": 2}
