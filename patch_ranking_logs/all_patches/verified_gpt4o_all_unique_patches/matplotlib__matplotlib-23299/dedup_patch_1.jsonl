{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23299", "model_patch": "diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py\nindex 3123d3a..df3a84f 100644\n--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n@@ -1,9 +1,11 @@\n+\n \"\"\"\n Manage figures for the pyplot interface.\n \"\"\"\n \n import atexit\n from collections import OrderedDict\n+import matplotlib\n import gc\n \n \n@@ -64,7 +66,13 @@ class Gcf:\n                 return\n         if hasattr(manager, \"_cidgcf\"):\n             manager.canvas.mpl_disconnect(manager._cidgcf)\n+        # Temporarily disable interactive mode to prevent figures from being removed\n+        interactive = matplotlib.is_interactive()\n+        if interactive:\n+            matplotlib.interactive(False)\n         manager.destroy()\n+        if interactive:\n+            matplotlib.interactive(True)\n         del manager, num\n         # Full cyclic garbage collection may be too expensive to do on every\n         # figure destruction, so we collect only the youngest two generations.\n@@ -141,4 +149,4 @@ class Gcf:\n                 manager.canvas.draw_idle()\n \n \n-atexit.register(Gcf.destroy_all)\n+atexit.register(Gcf.destroy_all)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/_pylab_helpers.py b/lib/matplotlib/_pylab_helpers.py\nindex 75c28d8..0969c31 100644\n--- a/lib/matplotlib/_pylab_helpers.py\n+++ b/lib/matplotlib/_pylab_helpers.py\n@@ -1,5 +1,6 @@\n import atexit\n from collections import OrderedDict\n+import matplotlib\n import gc\n class Gcf:\n     figs = OrderedDict()\n@@ -22,7 +23,12 @@ class Gcf:\n                 return\n         if hasattr(manager, '_cidgcf'):\n             manager.canvas.mpl_disconnect(manager._cidgcf)\n+        interactive = matplotlib.is_interactive()\n+        if interactive:\n+            matplotlib.interactive(False)\n         manager.destroy()\n+        if interactive:\n+            matplotlib.interactive(True)\n         del manager, num\n         gc.collect(1)\n     @classmethod\n", "normalized_occurrence": 1}
