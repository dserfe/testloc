{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..9b17173 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -356,7 +356,14 @@ class SQLCompiler:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Ensure the column is part of the select clause when using union queries\n+                    if self.query.combinator:\n+                        select_list = [sel_expr for sel_expr, _, _ in self.select]\n+                        if src not in select_list:\n+                            raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                        resolved.set_source_expressions([RawSQL('%d' % (select_list.index(src) + 1), ())])\n+                    else:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..4f864ae 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -192,7 +192,13 @@ class SQLCompiler:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    if self.query.combinator:\n+                        select_list = [sel_expr for sel_expr, _, _ in self.select]\n+                        if src not in select_list:\n+                            raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                        resolved.set_source_expressions([RawSQL('%d' % (select_list.index(src) + 1), ())])\n+                    else:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
