{"model_name_or_path": "agentless", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..dbb3b2e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -730,21 +730,11 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n+        # Use raw delete to avoid performance regression with subqueries\n+        using = self.db\n         del_query = self._chain()\n-\n-        # The delete is actually 2 queries - one to find related objects,\n-        # and one to delete. Make sure that the discovery of related\n-        # objects is performed on the same database as the deletion.\n-        del_query._for_write = True\n-\n-        # Disable non-supported fields.\n-        del_query.query.select_for_update = False\n-        del_query.query.select_related = False\n-        del_query.query.clear_ordering(force_empty=True)\n-\n-        collector = Collector(using=del_query.db)\n-        collector.collect(del_query)\n-        deleted, _rows_count = collector.delete()\n+        del_query = del_query._for_write\n+        deleted, _rows_count = del_query._raw_delete(using)\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..e2e2f64 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -438,14 +438,10 @@ class QuerySet:\n         assert not self.query.is_sliced, \"Cannot use 'limit' or 'offset' with delete.\"\n         if self._fields is not None:\n             raise TypeError('Cannot call delete() after .values() or .values_list()')\n+        using = self.db\n         del_query = self._chain()\n-        del_query._for_write = True\n-        del_query.query.select_for_update = False\n-        del_query.query.select_related = False\n-        del_query.query.clear_ordering(force_empty=True)\n-        collector = Collector(using=del_query.db)\n-        collector.collect(del_query)\n-        deleted, _rows_count = collector.delete()\n+        del_query = del_query._for_write\n+        deleted, _rows_count = del_query._raw_delete(using)\n         self._result_cache = None\n         return (deleted, _rows_count)\n     delete.alters_data = True\n", "normalized_occurrence": 1}
