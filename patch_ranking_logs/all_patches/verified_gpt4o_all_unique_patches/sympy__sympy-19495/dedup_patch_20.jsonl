{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..758d2bc 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -239,6 +239,9 @@ class ConditionSet(Set):\n             # don't target cond: it is there to tell how\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n+            # Ensure substitution is applied correctly to the base set and condition\n+            base = base.subs(old, new)\n+            cond = cond.subs(old, new)\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..16d1b42 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -88,6 +88,8 @@ class ConditionSet(Set):\n                     else:\n                         return self.func(new, cond.subs(old, new), base)\n                 raise ValueError(filldedent('\\n                    A dummy symbol can only be\\n                    replaced with a symbol having the same\\n                    assumptions or one having a single assumption\\n                    having the same commutativity.\\n                '))\n+            base = base.subs(old, new)\n+            cond = cond.subs(old, new)\n             return self.func(sym, cond, base)\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n", "normalized_occurrence": 1}
