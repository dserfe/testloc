{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..3f25e2b 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -388,7 +388,10 @@ def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    # Ensure unique markers by merging existing with new ones, considering MRO.\n+    existing_marks = {m.name: m for m in get_unpacked_marks(obj)}\n+    existing_marks[mark.name] = mark\n+    obj.pytestmark = list(existing_marks.values())\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..b5cd87b 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -173,7 +173,9 @@ def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iter\n         yield mark_obj\n def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    existing_marks = {m.name: m for m in get_unpacked_marks(obj)}\n+    existing_marks[mark.name] = mark\n+    obj.pytestmark = list(existing_marks.values())\n if TYPE_CHECKING:\n     from _pytest.scope import _ScopeName\n     class _SkipMarkDecorator(MarkDecorator):\n", "normalized_occurrence": 1}
