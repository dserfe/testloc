{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..ff8ff1e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1084,6 +1084,10 @@ class Exists(Subquery):\n \n     def __invert__(self):\n         clone = self.copy()\n+        clone.queryset.query.annotations = {\n+            k: v for k, v in clone.queryset.query.annotations.items()\n+            if k != self.queryset.query.annotation_aliases[self.queryset.query]\n+        }\n         clone.negated = not self.negated\n         return clone\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..1850cf2 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -662,6 +662,7 @@ class Exists(Subquery):\n         super().__init__(queryset, **kwargs)\n     def __invert__(self):\n         clone = self.copy()\n+        clone.queryset.query.annotations = {k: v for k, v in clone.queryset.query.annotations.items() if k != self.queryset.query.annotation_aliases[self.queryset.query]}\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n", "normalized_occurrence": 1}
