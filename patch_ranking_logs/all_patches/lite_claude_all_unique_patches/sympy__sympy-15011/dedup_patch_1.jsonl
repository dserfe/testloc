{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 366a5ab..5e91ad1 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -216,6 +216,11 @@ class Symbol(AtomicExpr, Boolean):\n         if not isinstance(name, string_types):\n             raise TypeError(\"name should be a string, not %s\" % repr(type(name)))\n \n+        # Validate symbol name for special characters that could cause issues with lambdify\n+        if '{' in name or '}' in name:\n+            from warnings import warn\n+            warn(\"Symbol names containing '{}' may cause issues with lambdify\", SyntaxWarning)\n+\n         obj = Expr.__new__(cls)\n         obj.name = name\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex f7af064..cce712a 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -73,6 +73,9 @@ class Symbol(AtomicExpr, Boolean):\n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, string_types):\n             raise TypeError('name should be a string, not %s' % repr(type(name)))\n+        if '{' in name or '}' in name:\n+            from warnings import warn\n+            warn(\"Symbol names containing '{}' may cause issues with lambdify\", SyntaxWarning)\n         obj = Expr.__new__(cls)\n         obj.name = name\n         tmp_asm_copy = assumptions.copy()\n", "normalized_occurrence": 1}
