{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..81e176b 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,15 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n+        \n+        if isinstance(other, Mul):\n+            scalar, point = other.args\n+            if isinstance(point, Point):\n+                s, o = Point._normalize_dimension(self, Point(point, evaluate=False))\n+                coords = [simplify(a + scalar * b) for a, b in zip(s, o)]\n+                return Point(coords, evaluate=False)\n+        \n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..3a96adc 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,6 +62,13 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n+        from sympy.core.mul import Mul\n+        if isinstance(other, Mul):\n+            scalar, point = other.args\n+            if isinstance(point, Point):\n+                s, o = Point._normalize_dimension(self, Point(point, evaluate=False))\n+                coords = [simplify(a + scalar * b) for a, b in zip(s, o)]\n+                return Point(coords, evaluate=False)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "normalized_occurrence": 1}
