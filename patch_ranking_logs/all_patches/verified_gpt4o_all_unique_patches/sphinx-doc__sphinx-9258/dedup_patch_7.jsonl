{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..4c77674 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -161,7 +161,16 @@ def augment_descriptions_with_types(\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            if '|' in annotations[name]:\n+                union_types = annotations[name].split('|')\n+                paragraph = nodes.paragraph()\n+                for i, union_type in enumerate(union_types):\n+                    paragraph += nodes.Text(union_type.strip())\n+                    if i < len(union_types) - 1:\n+                        paragraph += nodes.Text(' or ')\n+                field += nodes.field_body('', paragraph)\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..1bdd174 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -119,7 +119,16 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            if '|' in annotations[name]:\n+                union_types = annotations[name].split('|')\n+                paragraph = nodes.paragraph()\n+                for i, union_type in enumerate(union_types):\n+                    paragraph += nodes.Text(union_type.strip())\n+                    if i < len(union_types) - 1:\n+                        paragraph += nodes.Text(' or ')\n+                field += nodes.field_body('', paragraph)\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n", "normalized_occurrence": 1}
