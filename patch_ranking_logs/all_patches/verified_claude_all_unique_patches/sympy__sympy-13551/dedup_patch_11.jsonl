{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..3ac3125 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -275,15 +275,21 @@ class Product(ExprWithIntLimits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n+            # For simple integer differences in limits, multiply out term directly\n+            dif = n - a\n+            if dif.is_Integer:\n+                return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+            \n+            # Otherwise try to handle more complex cases\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n-\n-                # There is expression, which couldn't change by\n-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n-                # We have to catch this case.\n-\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                # Only split into sum for rational terms\n+                if all(i.is_rational for i in p.args):\n+                    p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                else:\n+                    # For non-rational terms, keep expression together\n+                    p = self._eval_product(p, (k, a, n))\n             else:\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..bc91392 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -75,10 +75,16 @@ class Product(ExprWithIntLimits):\n                 B = self.func(arg, (k, a, n)).doit()\n             return poly.LC() ** (n - a + 1) * A * B\n         elif term.is_Add:\n+            dif = n - a\n+            if dif.is_Integer:\n+                return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                if all((i.is_rational for i in p.args)):\n+                    p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                else:\n+                    p = self._eval_product(p, (k, a, n))\n             else:\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n", "normalized_occurrence": 1}
