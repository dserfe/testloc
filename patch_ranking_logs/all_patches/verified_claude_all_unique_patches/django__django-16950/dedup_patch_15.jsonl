{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16950", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 71f23cb..8ad1844 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -69,12 +69,16 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         # checkbox inputs because they don't appear in POST data if not checked.\n         if (\n             f.has_default()\n+            and not isinstance(f, models.UUIDField)  # Don't skip UUID fields with defaults\n             and form[f.name].field.widget.value_omitted_from_data(\n                 form.data, form.files, form.add_prefix(f.name)\n             )\n             and cleaned_data.get(f.name) in form[f.name].field.empty_values\n         ):\n             continue\n+        # Always set default for non-editable fields with defaults\n+        if not f.editable and f.has_default() and cleaned_data.get(f.name) in form[f.name].field.empty_values:\n+            cleaned_data[f.name] = f.get_default()\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 69a73a2..2bb4141 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -23,8 +23,10 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         if exclude and f.name in exclude:\n             continue\n-        if f.has_default() and form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and (cleaned_data.get(f.name) in form[f.name].field.empty_values):\n+        if f.has_default() and (not isinstance(f, models.UUIDField)) and form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and (cleaned_data.get(f.name) in form[f.name].field.empty_values):\n             continue\n+        if not f.editable and f.has_default() and (cleaned_data.get(f.name) in form[f.name].field.empty_values):\n+            cleaned_data[f.name] = f.get_default()\n         if isinstance(f, models.FileField):\n             file_field_list.append(f)\n         else:\n", "normalized_occurrence": 1}
