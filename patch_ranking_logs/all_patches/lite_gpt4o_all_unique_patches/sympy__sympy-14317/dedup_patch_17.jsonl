{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..77fe0be 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,17 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in sorted(poly.terms(), key=lambda term: term[0], reverse=True):\n+            s_monom = self._print(coeff)\n+            for i, exp in enumerate(monom):\n+                if exp > 0:\n+                    if exp == 1:\n+                        s_monom += r' %s' % self._print(poly.gens[i])\n+                    else:\n+                        s_monom += r' %s^{%d}' % (self._print(poly.gens[i]), exp)\n+            terms.append(s_monom)\n+        expr = \" + \".join(terms)\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..ed8fbaf 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,17 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in sorted(poly.terms(), key=lambda term: term[0], reverse=True):\n+            s_monom = self._print(coeff)\n+            for i, exp in enumerate(monom):\n+                if exp > 0:\n+                    if exp == 1:\n+                        s_monom += ' %s' % self._print(poly.gens[i])\n+                    else:\n+                        s_monom += ' %s^{%d}' % (self._print(poly.gens[i]), exp)\n+            terms.append(s_monom)\n+        expr = ' + '.join(terms)\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n", "normalized_occurrence": 1}
