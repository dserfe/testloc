{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..761ffb0 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -135,6 +135,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = x, y\n         self._text = ''\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self._reset_visual_defaults(\n             text=text,\n             color=color,\n@@ -150,6 +151,7 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self.set_antialiased(kwargs.pop(\"antialiased\", self._antialiased))\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -567,6 +569,23 @@ class Text(Artist):\n         super().set_clip_on(b)\n         self._update_clip_properties()\n \n+    def get_antialiased(self):\n+        \"\"\"\n+        Return the antialiased state of the text.\n+        \"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiasing for the text.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n+\n     def get_wrap(self):\n         \"\"\"Return whether the text can be wrapped.\"\"\"\n         return self._wrap\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..4c1bbc5 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -45,7 +45,9 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self.set_antialiased(kwargs.pop('antialiased', self._antialiased))\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n@@ -279,6 +281,11 @@ class Text(Artist):\n     def set_clip_on(self, b):\n         super().set_clip_on(b)\n         self._update_clip_properties()\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n     def get_wrap(self):\n         return self._wrap\n     def set_wrap(self, wrap):\n", "normalized_occurrence": 1}
