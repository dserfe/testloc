{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14730", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d685b12..48eb10a 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1214,8 +1214,20 @@ class ManyToManyField(RelatedField):\n             *self._check_relationship_model(**kwargs),\n             *self._check_ignored_options(**kwargs),\n             *self._check_table_uniqueness(**kwargs),\n+            *self._check_related_name_on_symmetrical(**kwargs),\n         ]\n \n+    def _check_related_name_on_symmetrical(self, **kwargs):\n+        if self.remote_field.related_name is not None and self.remote_field.symmetrical:\n+            return [\n+                checks.Error(\n+                    'related_name cannot be set on a symmetrical ManyToManyField.',\n+                    obj=self,\n+                    id='fields.E345',\n+                )\n+            ]\n+        return []\n+\n     def _check_unique(self, **kwargs):\n         if self.unique:\n             return [\n@@ -1719,4 +1731,4 @@ class ManyToManyField(RelatedField):\n         return None\n \n     def db_parameters(self, connection):\n-        return {\"type\": None, \"check\": None}\n+        return {\"type\": None, \"check\": None}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 6fd437b..e636da2 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -535,7 +535,11 @@ class ManyToManyField(RelatedField):\n         self.db_table = db_table\n         self.swappable = swappable\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_unique(**kwargs), *self._check_relationship_model(**kwargs), *self._check_ignored_options(**kwargs), *self._check_table_uniqueness(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_unique(**kwargs), *self._check_relationship_model(**kwargs), *self._check_ignored_options(**kwargs), *self._check_table_uniqueness(**kwargs), *self._check_related_name_on_symmetrical(**kwargs)]\n+    def _check_related_name_on_symmetrical(self, **kwargs):\n+        if self.remote_field.related_name is not None and self.remote_field.symmetrical:\n+            return [checks.Error('related_name cannot be set on a symmetrical ManyToManyField.', obj=self, id='fields.E345')]\n+        return []\n     def _check_unique(self, **kwargs):\n         if self.unique:\n             return [checks.Error('ManyToManyFields cannot be unique.', obj=self, id='fields.E330')]\n", "normalized_occurrence": 1}
