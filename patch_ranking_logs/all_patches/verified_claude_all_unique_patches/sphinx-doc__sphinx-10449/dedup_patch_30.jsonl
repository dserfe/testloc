{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..b02709b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -169,10 +169,12 @@ def augment_descriptions_with_types(\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n+    # Skip return type for __init__ methods\n     if 'return' in annotations:\n         rtype = annotations['return']\n-        if 'return' not in has_type and ('return' in has_description or\n-                                         (force_rtype and rtype != \"None\")):\n+        if (not getattr(obj, '__name__', '') == '__init__' and\n+            'return' not in has_type and ('return' in has_description or\n+                                         (force_rtype and rtype != \"None\"))):\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', rtype))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..aaf6d89 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -129,7 +129,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             node += field\n     if 'return' in annotations:\n         rtype = annotations['return']\n-        if 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n+        if not getattr(obj, '__name__', '') == '__init__' and 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', rtype))\n", "normalized_occurrence": 1}
