{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..9bd42e0 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,35 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if it's an internal reference\n+                if uri.startswith('#'):\n+                    # Strip the # for anchor\n+                    anchor = uri[1:]\n+                    # Check if anchor exists in current document\n+                    if docname not in self.env.tocs:\n+                        return 'broken', 'Document not found', 0\n+                    doctree = self.env.tocs[docname]\n+                    # Look for matching IDs in the document\n+                    for node in doctree.traverse():\n+                        if 'ids' in node and anchor in node['ids']:\n+                            return 'working', '', 0\n+                    return 'broken', 'Anchor not found', 0\n+                else:\n+                    # Check if target document exists\n+                    doc = uri.split('#')[0]\n+                    if doc not in self.env.all_docs:\n+                        return 'broken', 'Document not found', 0\n+                    if '#' in uri:\n+                        # If there's an anchor, check it exists in target doc\n+                        anchor = uri.split('#')[1]\n+                        if doc not in self.env.tocs:\n+                            return 'broken', 'Target document not built', 0\n+                        doctree = self.env.tocs[doc]\n+                        for node in doctree.traverse():\n+                            if 'ids' in node and anchor in node['ids']:\n+                                return 'working', '', 0\n+                        return 'broken', 'Anchor not found', 0\n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..94c4306 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,29 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    anchor = uri[1:]\n+                    if docname not in self.env.tocs:\n+                        return ('broken', 'Document not found', 0)\n+                    doctree = self.env.tocs[docname]\n+                    for node in doctree.traverse():\n+                        if 'ids' in node and anchor in node['ids']:\n+                            return ('working', '', 0)\n+                    return ('broken', 'Anchor not found', 0)\n+                else:\n+                    doc = uri.split('#')[0]\n+                    if doc not in self.env.all_docs:\n+                        return ('broken', 'Document not found', 0)\n+                    if '#' in uri:\n+                        anchor = uri.split('#')[1]\n+                        if doc not in self.env.tocs:\n+                            return ('broken', 'Target document not built', 0)\n+                        doctree = self.env.tocs[doc]\n+                        for node in doctree.traverse():\n+                            if 'ids' in node and anchor in node['ids']:\n+                                return ('working', '', 0)\n+                        return ('broken', 'Anchor not found', 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
