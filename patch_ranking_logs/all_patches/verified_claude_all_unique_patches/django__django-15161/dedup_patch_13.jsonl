{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..d506a8d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -814,6 +814,14 @@ class RawSQL(Expression):\n         self.sql, self.params = sql, params\n         super().__init__(output_field=output_field)\n \n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __repr__(self):\n         return \"{}({}, {})\".format(self.__class__.__name__, self.sql, self.params)\n \n@@ -963,6 +971,11 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n \n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return path, args, {}\n+\n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n \n@@ -990,6 +1003,12 @@ class When(Expression):\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return path, args, kwargs\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1067,6 +1086,16 @@ class Case(SQLiteNumericMixin, Expression):\n     template = 'CASE %(cases)s ELSE %(default)s END'\n     case_joiner = ' '\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default is not None:\n+            kwargs['default'] = self.default\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __init__(self, *cases, default=None, output_field=None, **extra):\n         if not all(isinstance(case, When) for case in cases):\n             raise TypeError(\"Positional arguments must all be When objects.\")\n@@ -1316,6 +1345,20 @@ class Window(SQLiteNumericMixin, Expression):\n     contains_over_clause = True\n     filterable = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __init__(self, expression, partition_by=None, order_by=None, frame=None, output_field=None):\n         self.partition_by = partition_by\n         self.order_by = order_by\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return (path, args, {})\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default is not None:\n+            kwargs['default'] = self.default\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self._output_field_or_none is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
