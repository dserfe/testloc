{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..0ceb301 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -582,41 +582,7 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n-        \"\"\"Discover python modules and packages in sub-directory.\n \n-        Returns iterator of paths to discovered modules and packages.\n-        \"\"\"\n-        for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n-                        continue\n-\n-                    if _is_ignored_file(\n-                        root,\n-                        self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n-                    ):\n-                        skip_subtrees.append(root)\n-                        continue\n-\n-                    if \"__init__.py\" in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n-                    else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n-            else:\n-                yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n", "occurrence": 2, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..f159923 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -223,23 +223,6 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n         for msg in self.msgs_store.messages:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n-    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n-        for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any((root.startswith(s) for s in skip_subtrees)):\n-                        continue\n-                    if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n-                        skip_subtrees.append(root)\n-                        continue\n-                    if '__init__.py' in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n-                    else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n-            else:\n-                yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         self.initialize()\n         if not isinstance(files_or_modules, (list, tuple)):\n", "normalized_occurrence": 2}
