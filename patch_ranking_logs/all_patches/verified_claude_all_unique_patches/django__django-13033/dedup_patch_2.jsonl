{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..2281585 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1909,15 +1909,29 @@ class Query(BaseExpression):\n                     continue\n                 if item == '?':\n                     continue\n+                \n+                # Handle direction prefix\n+                descending = False\n                 if item.startswith('-'):\n+                    descending = True\n                     item = item[1:]\n+                    \n                 if item in self.annotations:\n                     continue\n                 if self.extra and item in self.extra:\n                     continue\n+                \n+                # Clear any default ordering when explicit ordering is specified\n+                if LOOKUP_SEP in item:\n+                    self.clear_ordering(True)\n+                \n                 # names_to_path() validates the lookup. A descriptive\n                 # FieldError will be raise if it's not.\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+                try:\n+                    parts = item.split(LOOKUP_SEP)\n+                    self.names_to_path(parts, self.model._meta)\n+                except FieldError:\n+                    errors.append(item)\n             elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n             if getattr(item, 'contains_aggregate', False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..8754b97 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1015,13 +1015,21 @@ class Query(BaseExpression):\n                     continue\n                 if item == '?':\n                     continue\n+                descending = False\n                 if item.startswith('-'):\n+                    descending = True\n                     item = item[1:]\n                 if item in self.annotations:\n                     continue\n                 if self.extra and item in self.extra:\n                     continue\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n+                if LOOKUP_SEP in item:\n+                    self.clear_ordering(True)\n+                try:\n+                    parts = item.split(LOOKUP_SEP)\n+                    self.names_to_path(parts, self.model._meta)\n+                except FieldError:\n+                    errors.append(item)\n             elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n             if getattr(item, 'contains_aggregate', False):\n", "normalized_occurrence": 1}
