{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08b07d9..c42b1ce 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2728,8 +2728,11 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                 signature = inspect.signature(func,\n                                               type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n-                    objrepr = stringify_typehint(signature.return_annotation)\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    if self.config.autodoc_typehints_format == 'short':\n+                        objrepr = stringify_typehint(signature.return_annotation, 'smart')\n+                    else:\n+                        objrepr = stringify_typehint(signature.return_annotation)\n+                    self.add_line('   :rtype: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                                self.fullname, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 3c49975..5c04ffb 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1646,8 +1646,11 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             try:\n                 signature = inspect.signature(func, type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n-                    objrepr = stringify_typehint(signature.return_annotation)\n-                    self.add_line('   :type: ' + objrepr, sourcename)\n+                    if self.config.autodoc_typehints_format == 'short':\n+                        objrepr = stringify_typehint(signature.return_annotation, 'smart')\n+                    else:\n+                        objrepr = stringify_typehint(signature.return_annotation)\n+                    self.add_line('   :rtype: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n                 return None\n", "normalized_occurrence": 1}
