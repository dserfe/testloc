{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..4865552 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -704,7 +704,7 @@ class Model(metaclass=ModelBase):\n                     field.delete_cached_value(self)\n \n         using = using or router.db_for_write(self.__class__, instance=self)\n-        if force_insert and (force_update or update_fields):\n+        if (self.pk is None) or (force_insert and (force_update or update_fields)):\n             raise ValueError(\"Cannot force both insert and updating in model saving.\")\n \n         deferred_fields = self.get_deferred_fields()\n@@ -743,7 +743,7 @@ class Model(metaclass=ModelBase):\n             if loaded_fields:\n                 update_fields = frozenset(loaded_fields)\n \n-        self.save_base(using=using, force_insert=force_insert,\n+        self.save_base(using=using, force_insert=force_insert or self.pk is None,\n                        force_update=force_update, update_fields=update_fields)\n     save.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9dcf0cd..f8464b2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -379,7 +379,7 @@ class Model(metaclass=ModelBase):\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n         using = using or router.db_for_write(self.__class__, instance=self)\n-        if force_insert and (force_update or update_fields):\n+        if self.pk is None or (force_insert and (force_update or update_fields)):\n             raise ValueError('Cannot force both insert and updating in model saving.')\n         deferred_fields = self.get_deferred_fields()\n         if update_fields is not None:\n@@ -403,7 +403,7 @@ class Model(metaclass=ModelBase):\n             loaded_fields = field_names.difference(deferred_fields)\n             if loaded_fields:\n                 update_fields = frozenset(loaded_fields)\n-        self.save_base(using=using, force_insert=force_insert, force_update=force_update, update_fields=update_fields)\n+        self.save_base(using=using, force_insert=force_insert or self.pk is None, force_update=force_update, update_fields=update_fields)\n     save.alters_data = True\n     def save_base(self, raw=False, force_insert=False, force_update=False, using=None, update_fields=None):\n         using = using or router.db_for_write(self.__class__, instance=self)\n", "normalized_occurrence": 1}
