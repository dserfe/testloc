{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..2f69d2e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -123,7 +123,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n-    if 'return' in annotations and 'return' not in arguments:\n+    if 'return' in annotations and 'return' not in arguments and annotations['return'] != 'None':\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n         field += nodes.field_body('', nodes.paragraph('', annotation))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..39a3a9a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,7 +93,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n-    if 'return' in annotations and 'return' not in arguments:\n+    if 'return' in annotations and 'return' not in arguments and (annotations['return'] != 'None'):\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n         field += nodes.field_body('', nodes.paragraph('', annotation))\n", "normalized_occurrence": 1}
