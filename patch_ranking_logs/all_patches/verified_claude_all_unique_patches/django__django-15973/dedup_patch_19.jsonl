{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..a19e249 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1448,10 +1448,15 @@ class ManyToManyField(RelatedField):\n         return warnings\n \n     def _check_relationship_model(self, from_model=None, **kwargs):\n-        if hasattr(self.remote_field.through, \"_meta\"):\n+        through = self.remote_field.through\n+        if isinstance(through, str):\n+            through = self.opts.apps.lazy_model_operation(\n+                lambda models: models[through], through\n+            )\n+        if hasattr(through, \"_meta\"):\n             qualified_model_name = \"%s.%s\" % (\n-                self.remote_field.through._meta.app_label,\n-                self.remote_field.through.__name__,\n+                through._meta.app_label,\n+                through.__name__,\n             )\n         else:\n             qualified_model_name = self.remote_field.through\n@@ -1990,4 +1995,4 @@ class ManyToManyField(RelatedField):\n         return None\n \n     def db_parameters(self, connection):\n-        return {\"type\": None, \"check\": None}\n+        return {\"type\": None, \"check\": None}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..3a908fa 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -563,8 +563,11 @@ class ManyToManyField(RelatedField):\n             warnings.append(checks.Warning('related_name has no effect on ManyToManyField with a symmetrical relationship, e.g. to \"self\".', obj=self, id='fields.W345'))\n         return warnings\n     def _check_relationship_model(self, from_model=None, **kwargs):\n-        if hasattr(self.remote_field.through, '_meta'):\n-            qualified_model_name = '%s.%s' % (self.remote_field.through._meta.app_label, self.remote_field.through.__name__)\n+        through = self.remote_field.through\n+        if isinstance(through, str):\n+            through = self.opts.apps.lazy_model_operation(lambda models: models[through], through)\n+        if hasattr(through, '_meta'):\n+            qualified_model_name = '%s.%s' % (through._meta.app_label, through.__name__)\n         else:\n             qualified_model_name = self.remote_field.through\n         errors = []\n", "normalized_occurrence": 1}
