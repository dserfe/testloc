{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..8bc3bdd 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -310,7 +310,7 @@ def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars',\n                               algorithm=algorithm,\n                               regularization=regularization, copy_cov=copy_cov,\n                               init=init,\n-                              max_iter=max_iter,\n+                              max_iter=self.max_iter,\n                               check_input=False,\n                               verbose=verbose,\n                               positive=positive)\n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..01da975 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -83,7 +83,7 @@ def sparse_encode(X, dictionary, gram=None, cov=None, algorithm='lasso_lars', n_\n         if regularization is None:\n             regularization = 1.0\n     if effective_n_jobs(n_jobs) == 1 or algorithm == 'threshold':\n-        code = _sparse_encode(X, dictionary, gram, cov=cov, algorithm=algorithm, regularization=regularization, copy_cov=copy_cov, init=init, max_iter=max_iter, check_input=False, verbose=verbose, positive=positive)\n+        code = _sparse_encode(X, dictionary, gram, cov=cov, algorithm=algorithm, regularization=regularization, copy_cov=copy_cov, init=init, max_iter=self.max_iter, check_input=False, verbose=verbose, positive=positive)\n         return code\n     code = np.empty((n_samples, n_components))\n     slices = list(gen_even_slices(n_samples, effective_n_jobs(n_jobs)))\n", "normalized_occurrence": 2}
