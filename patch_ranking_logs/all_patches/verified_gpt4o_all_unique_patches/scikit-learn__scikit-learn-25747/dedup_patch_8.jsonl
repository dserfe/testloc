{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..714dbd3 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    original_index=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -55,11 +57,18 @@ def _wrap_in_pandas_container(\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n+        elif original_index is not None and len(original_index) == len(data_to_wrap):\n+            data_to_wrap.index = original_index\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if index is not None and len(index) == len(data_to_wrap):\n+        return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    elif original_index is not None and len(original_index) == len(data_to_wrap):\n+        return pd.DataFrame(data_to_wrap, index=original_index, columns=columns)\n+    else:\n+        return pd.DataFrame(data_to_wrap, columns=columns)\n \n \n def _get_output_config(method, estimator=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..937032d 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -3,7 +3,7 @@ from scipy.sparse import issparse\n from . import check_pandas_support\n from .._config import get_config\n from ._available_if import available_if\n-def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n+def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None, original_index=None):\n     if issparse(data_to_wrap):\n         raise ValueError('Pandas output does not support sparse data.')\n     if callable(columns):\n@@ -15,10 +15,17 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n+        if index is not None and len(index) == len(data_to_wrap):\n             data_to_wrap.index = index\n+        elif original_index is not None and len(original_index) == len(data_to_wrap):\n+            data_to_wrap.index = original_index\n         return data_to_wrap\n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if index is not None and len(index) == len(data_to_wrap):\n+        return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    elif original_index is not None and len(original_index) == len(data_to_wrap):\n+        return pd.DataFrame(data_to_wrap, index=original_index, columns=columns)\n+    else:\n+        return pd.DataFrame(data_to_wrap, columns=columns)\n def _get_output_config(method, estimator=None):\n     est_sklearn_output_config = getattr(estimator, '_sklearn_output_config', {})\n     if method in est_sklearn_output_config:\n", "normalized_occurrence": 1}
