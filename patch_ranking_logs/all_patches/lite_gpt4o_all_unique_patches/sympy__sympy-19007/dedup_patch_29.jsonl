{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..d19a47d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,17 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        row_block, row_offset = self._get_block_index(i, self.rowblocksizes)\n+        col_block, col_offset = self._get_block_index(j, self.colblocksizes)\n+        return self.blocks[row_block, col_block][row_offset, col_offset]\n+\n+    def _get_block_index(self, idx, blocksizes):\n+        offset = idx\n+        for block, size in enumerate(blocksizes):\n+            if offset < size:\n+                return block, offset\n+            offset -= size\n+        raise IndexError(\"Index out of bounds\")\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..e948333 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,16 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        row_block, row_offset = self._get_block_index(i, self.rowblocksizes)\n+        col_block, col_offset = self._get_block_index(j, self.colblocksizes)\n+        return self.blocks[row_block, col_block][row_offset, col_offset]\n+    def _get_block_index(self, idx, blocksizes):\n+        offset = idx\n+        for block, size in enumerate(blocksizes):\n+            if offset < size:\n+                return (block, offset)\n+            offset -= size\n+        raise IndexError('Index out of bounds')\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
