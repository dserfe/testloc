{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-6197", "model_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 272731b..820fc88 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -177,8 +177,8 @@ def pytest_collect_file(path, parent):\n     ext = path.ext\n     if ext == \".py\":\n         if not parent.session.isinitpath(path):\n-            if not path_matches_patterns(\n-                path, parent.config.getini(\"python_files\") + [\"__init__.py\"]\n+            if not path.basename == \"__init__.py\" and not path_matches_patterns(\n+                path, parent.config.getini(\"python_files\")\n             ):\n                 return\n         ihook = parent.session.gethookproxy(path)\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 33dd083..40c5f39 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -93,7 +93,7 @@ def pytest_collect_file(path, parent):\n     ext = path.ext\n     if ext == '.py':\n         if not parent.session.isinitpath(path):\n-            if not path_matches_patterns(path, parent.config.getini('python_files') + ['__init__.py']):\n+            if not path.basename == '__init__.py' and (not path_matches_patterns(path, parent.config.getini('python_files'))):\n                 return\n         ihook = parent.session.gethookproxy(path)\n         return ihook.pytest_pycollect_makemodule(path=path, parent=parent)\n", "normalized_occurrence": 2}
