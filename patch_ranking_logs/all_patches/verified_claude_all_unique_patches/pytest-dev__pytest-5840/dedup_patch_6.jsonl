{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5840", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex be5f299..89dbeb8 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -640,7 +640,8 @@ class Session(nodes.FSCollector):\n                     \"file or package not found: \" + arg + \" (missing __init__.py?)\"\n                 )\n             raise UsageError(\"file not found: \" + arg)\n-        parts[0] = path.realpath()\n+        # Use str() to preserve the original path casing on Windows\n+        parts[0] = str(path)\n         return parts\n \n     def matchnodes(self, matching, names):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex ea2d5dc..4c5f51b 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -419,7 +419,7 @@ class Session(nodes.FSCollector):\n             if self.config.option.pyargs:\n                 raise UsageError('file or package not found: ' + arg + ' (missing __init__.py?)')\n             raise UsageError('file not found: ' + arg)\n-        parts[0] = path.realpath()\n+        parts[0] = str(path)\n         return parts\n \n     def matchnodes(self, matching, names):\n", "normalized_occurrence": 8}
