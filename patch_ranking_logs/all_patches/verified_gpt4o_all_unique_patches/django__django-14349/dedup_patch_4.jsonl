{"model_name_or_path": "agentless", "instance_id": "django__django-14349", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex fde6d56..3932f5b 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -99,6 +99,9 @@ class URLValidator(RegexValidator):\n             self.schemes = schemes\n \n     def __call__(self, value):\n+        # Strip LF, CR, and tab characters from the URL before validation\n+        if isinstance(value, str):\n+            value = value.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex b926208..d2d15f0 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -56,6 +56,8 @@ class URLValidator(RegexValidator):\n         if schemes is not None:\n             self.schemes = schemes\n     def __call__(self, value):\n+        if isinstance(value, str):\n+            value = value.replace('\\n', '').replace('\\r', '').replace('\\t', '')\n         if not isinstance(value, str):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         scheme = value.split('://')[0].lower()\n", "normalized_occurrence": 1}
