{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..93a38ad 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -20,11 +20,14 @@ class SQLiteNumericMixin:\n     Some expressions with output_field=DecimalField() must be cast to\n     numeric to be properly filtered.\n     \"\"\"\n-    def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n+    def as_sqlite(self, compiler, connection, template=None, **extra_context):\n+        sql, params = self.as_sql(compiler, connection, template, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                if 'OVER' in sql:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n+                else:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql.split(' AS ')[0]\n         except FieldError:\n             pass\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..f7851f8 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -13,11 +13,14 @@ from django.utils.deconstruct import deconstructible\n from django.utils.functional import cached_property\n from django.utils.hashable import make_hashable\n class SQLiteNumericMixin:\n-    def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n+    def as_sqlite(self, compiler, connection, template=None, **extra_context):\n+        sql, params = self.as_sql(compiler, connection, template, **extra_context)\n         try:\n             if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n+                if 'OVER' in sql:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql\n+                else:\n+                    sql = 'CAST(%s AS NUMERIC)' % sql.split(' AS ')[0]\n         except FieldError:\n             pass\n         return (sql, params)\n", "normalized_occurrence": 1}
