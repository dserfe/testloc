{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..43e06ab 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -761,7 +761,11 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Find the next available number that won't conflict with existing aliases\n+            next_num = len(self.alias_map) + 1\n+            while '%s%d' % (self.alias_prefix, next_num) in self.alias_map:\n+                next_num += 1\n+            alias = '%s%d' % (self.alias_prefix, next_num)\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n@@ -845,8 +849,13 @@ class Query(BaseExpression):\n         Change the aliases in change_map (which maps old-alias -> new-alias),\n         relabelling any references to them in select columns and the where\n         clause.\n+        \n+        The assertion ensures that no alias is changed twice (for example T4 -> T5\n+        followed by T5 -> T6), which could lead to incorrect alias substitutions.\n         \"\"\"\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), (\n+            \"Alias conflict detected: some aliases would be changed multiple times. \"\n+            \"This usually happens when combining queries with overlapping aliases.\")\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..d16e2fd 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -429,7 +429,10 @@ class Query(BaseExpression):\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            next_num = len(self.alias_map) + 1\n+            while '%s%d' % (self.alias_prefix, next_num) in self.alias_map:\n+                next_num += 1\n+            alias = '%s%d' % (self.alias_prefix, next_num)\n             alias_list.append(alias)\n         else:\n             alias = filtered_relation.alias if filtered_relation is not None else table_name\n@@ -467,7 +470,7 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), 'Alias conflict detected: some aliases would be changed multiple times. This usually happens when combining queries with overlapping aliases.'\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n", "normalized_occurrence": 1}
