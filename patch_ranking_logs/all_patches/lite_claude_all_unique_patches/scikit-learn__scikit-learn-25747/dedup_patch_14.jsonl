{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 2f2ca70..b3766cf 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1266,6 +1266,10 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n             The `hstack` of results of transformers. `sum_n_components` is the\n             sum of `n_components` (output dimension) over transformers.\n         \"\"\"\n+        # Store original index for pandas output alignment\n+        if hasattr(X, \"index\"):\n+            self._original_index = X.index\n+\n         Xs = Parallel(n_jobs=self.n_jobs)(\n             delayed(_transform_one)(trans, X, None, weight)\n             for name, trans, weight in self._iter()\n@@ -1280,6 +1284,10 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config(\"transform\", self)\n         if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n             pd = check_pandas_support(\"transform\")\n+            # Ensure index alignment by reindexing to the original index\n+            original_index = getattr(self, \"_original_index\", None)\n+            if original_index is not None:\n+                Xs = [X.reindex(original_index) if hasattr(X, \"reindex\") else X for X in Xs]\n             return pd.concat(Xs, axis=1)\n \n         if any(sparse.issparse(f) for f in Xs):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex f4194e0..386f991 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -342,6 +342,8 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         transformers = list(self._iter())\n         return Parallel(n_jobs=self.n_jobs)((delayed(func)(transformer, X, y, weight, message_clsname='FeatureUnion', message=self._log_message(name, idx, len(transformers)), **fit_params) for idx, (name, transformer, weight) in enumerate(transformers, 1)))\n     def transform(self, X):\n+        if hasattr(X, 'index'):\n+            self._original_index = X.index\n         Xs = Parallel(n_jobs=self.n_jobs)((delayed(_transform_one)(trans, X, None, weight) for name, trans, weight in self._iter()))\n         if not Xs:\n             return np.zeros((X.shape[0], 0))\n@@ -350,6 +352,9 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         config = _get_output_config('transform', self)\n         if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n             pd = check_pandas_support('transform')\n+            original_index = getattr(self, '_original_index', None)\n+            if original_index is not None:\n+                Xs = [X.reindex(original_index) if hasattr(X, 'reindex') else X for X in Xs]\n             return pd.concat(Xs, axis=1)\n         if any((sparse.issparse(f) for f in Xs)):\n             Xs = sparse.hstack(Xs).tocsr()\n", "normalized_occurrence": 1}
