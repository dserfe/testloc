{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..523a0cd 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -31,7 +32,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + args\n+            self.kwargs = {**func.keywords, **kwargs}\n+        else:\n+            self.func = func\n+            self.args = args\n+            self.kwargs = kwargs\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -45,7 +53,9 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            self._func_path = func.func.__module__ + '.' + func.func.__name__\n+        elif not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..9c7f86b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -19,7 +20,14 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + args\n+            self.kwargs = {**func.keywords, **kwargs}\n+        else:\n+            self.func = func\n+            self.args = args\n+            self.kwargs = kwargs\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -29,7 +37,9 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            self._func_path = func.func.__module__ + '.' + func.func.__name__\n+        elif not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n", "normalized_occurrence": 1}
