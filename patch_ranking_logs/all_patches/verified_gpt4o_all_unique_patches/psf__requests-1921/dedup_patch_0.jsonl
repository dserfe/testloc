{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0d0af12..6097fab 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -391,6 +391,10 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n+            # Remove headers that have None as their value\n+            headers = {k: v for k, v in headers.items() if v is not None}\n+            # Remove headers that have None as their value\n+            headers = {k: v for k, v in headers.items() if v is not None}\n             self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n         else:\n             self.headers = CaseInsensitiveDict()\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 29581be..b87dfe1 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -204,6 +204,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.url = url\n     def prepare_headers(self, headers):\n         if headers:\n+            headers = {k: v for k, v in headers.items() if v is not None}\n+            headers = {k: v for k, v in headers.items() if v is not None}\n             self.headers = CaseInsensitiveDict(((to_native_string(name), value) for name, value in headers.items()))\n         else:\n             self.headers = CaseInsensitiveDict()\n", "normalized_occurrence": 1}
