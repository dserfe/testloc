{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..50c4044 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,7 +191,15 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            # Combine fast delete queries by table using OR condition to minimize round trips.\n+            model_table = objs[0]._meta.db_table\n+            combined_objs = objs\n+            for i, fast_delete_objs in enumerate(self.fast_deletes):\n+                if fast_delete_objs[0]._meta.db_table == model_table:\n+                    combined_objs = list(set(combined_objs + fast_delete_objs))\n+                    self.fast_deletes.pop(i)\n+                    break\n+            self.fast_deletes.append(combined_objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..ee162af 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -80,7 +80,14 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model_table = objs[0]._meta.db_table\n+            combined_objs = objs\n+            for i, fast_delete_objs in enumerate(self.fast_deletes):\n+                if fast_delete_objs[0]._meta.db_table == model_table:\n+                    combined_objs = list(set(combined_objs + fast_delete_objs))\n+                    self.fast_deletes.pop(i)\n+                    break\n+            self.fast_deletes.append(combined_objs)\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n", "normalized_occurrence": 1}
