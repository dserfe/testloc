{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..150394a 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,13 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Remove weak references to avoid pickling issues.\n+        state[\"_shared_axes\"] = {\n+            name: [ax() for ax in self._shared_axes[name].get_siblings(self)\n+                   if ax() is not None]\n+            for name in self._axis_names if self in self._shared_axes[name]}\n+        state[\"_twinned_axes\"] = [ax() for ax in self._twinned_axes.get_siblings(self)\n+                                  if ax() is not None] if self in self._twinned_axes else None\n         return state\n \n     def __setstate__(self, state):\n@@ -763,7 +770,14 @@ class _AxesBase(martist.Artist):\n         twinned_siblings = state.pop(\"_twinned_axes\")\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n-        self.__dict__ = state\n+        # Reconstruct weak references post-unpickling.\n+        shared_axes = state.pop(\"_shared_axes\")\n+        for name, shared_siblings in shared_axes.items():\n+            self._shared_axes[name].join(*[ax for ax in shared_siblings if ax is not None])\n+        twinned_siblings = state.pop(\"_twinned_axes\")\n+        if twinned_siblings:\n+            self._twinned_axes.join(*[ax for ax in twinned_siblings if ax is not None])\n+        self.__dict__.update(state)\n         self._stale = True\n \n     def __repr__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..320da29 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,6 +345,8 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        state['_shared_axes'] = {name: [ax() for ax in self._shared_axes[name].get_siblings(self) if ax() is not None] for name in self._axis_names if self in self._shared_axes[name]}\n+        state['_twinned_axes'] = [ax() for ax in self._twinned_axes.get_siblings(self) if ax() is not None] if self in self._twinned_axes else None\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n@@ -353,7 +355,13 @@ class _AxesBase(martist.Artist):\n         twinned_siblings = state.pop('_twinned_axes')\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n-        self.__dict__ = state\n+        shared_axes = state.pop('_shared_axes')\n+        for name, shared_siblings in shared_axes.items():\n+            self._shared_axes[name].join(*[ax for ax in shared_siblings if ax is not None])\n+        twinned_siblings = state.pop('_twinned_axes')\n+        if twinned_siblings:\n+            self._twinned_axes.join(*[ax for ax in twinned_siblings if ax is not None])\n+        self.__dict__.update(state)\n         self._stale = True\n     def __repr__(self):\n         fields = []\n", "normalized_occurrence": 1}
