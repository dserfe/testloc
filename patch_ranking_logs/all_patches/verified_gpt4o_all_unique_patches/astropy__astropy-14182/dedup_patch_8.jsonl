{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..1f1f9c4 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,23 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n+        self.header_rows = header_rows\n         super().__init__(delimiter_pad=None, bookend=False)\n \n     def write(self, lines):\n         lines = super().write(lines)\n+        if self.header_rows:\n+            hdr_lines = self._generate_header_lines()\n+            lines = hdr_lines + lines\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        return lines\n+\n+    def _generate_header_lines(self):\n+        hdr_lines = []\n+        hdr_rows_map = {\"name\": self.header.names, \"unit\": [col.unit for col in self.header.cols]}\n+        for row in self.header_rows:\n+            hdr_lines.append(\" \".join(str(hdr_rows_map[row][i]) for i in range(len(self.header.names))))\n+        hdr_lines.insert(0, \"=\" * len(hdr_lines[0]))\n+        hdr_lines.append(\"=\" * len(hdr_lines[0]))\n+        return hdr_lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..11c7b9f 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,9 +18,21 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n+        self.header_rows = header_rows\n         super().__init__(delimiter_pad=None, bookend=False)\n     def write(self, lines):\n         lines = super().write(lines)\n+        if self.header_rows:\n+            hdr_lines = self._generate_header_lines()\n+            lines = hdr_lines + lines\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n\\ No newline at end of file\n+        return lines\n+    def _generate_header_lines(self):\n+        hdr_lines = []\n+        hdr_rows_map = {'name': self.header.names, 'unit': [col.unit for col in self.header.cols]}\n+        for row in self.header_rows:\n+            hdr_lines.append(' '.join((str(hdr_rows_map[row][i]) for i in range(len(self.header.names)))))\n+        hdr_lines.insert(0, '=' * len(hdr_lines[0]))\n+        hdr_lines.append('=' * len(hdr_lines[0]))\n+        return hdr_lines\n\\ No newline at end of file\n", "normalized_occurrence": 1}
