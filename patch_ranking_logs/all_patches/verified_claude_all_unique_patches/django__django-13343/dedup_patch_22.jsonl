{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13343", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 4e9ee79..fd765d9 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -224,17 +224,33 @@ class FileField(Field):\n \n     description = _(\"File\")\n \n-    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n-        self._primary_key_set_explicitly = 'primary_key' in kwargs\n-\n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n+    @property\n+    def storage(self):\n+        if self._storage_callable is not None and self._storage is None:\n+            self._storage = self._storage_callable()\n+            if not isinstance(self._storage, Storage):\n                 raise TypeError(\n                     \"%s.storage must be a subclass/instance of %s.%s\"\n                     % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n                 )\n+        return self._storage or default_storage\n+\n+    @storage.setter\n+    def storage(self, value):\n+        self._storage = value\n+        self._storage_callable = None\n+        if callable(value):\n+            self._storage_callable = value\n+            self._storage = None\n+\n+    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n+        self._primary_key_set_explicitly = 'primary_key' in kwargs\n+\n+        self._storage = storage or default_storage\n+        self._storage_callable = None\n+        if callable(self._storage):\n+            self._storage_callable = self._storage\n+            self._storage = None\n         self.upload_to = upload_to\n \n         kwargs.setdefault('max_length', 100)\n@@ -278,8 +294,10 @@ class FileField(Field):\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage_callable is not None:\n+            kwargs['storage'] = self._storage_callable\n+        elif self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex fc9a6b0..3bd21b9 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -117,13 +117,27 @@ class FileField(Field):\n     attr_class = FieldFile\n     descriptor_class = FileDescriptor\n     description = _('File')\n+    @property\n+    def storage(self):\n+        if self._storage_callable is not None and self._storage is None:\n+            self._storage = self._storage_callable()\n+            if not isinstance(self._storage, Storage):\n+                raise TypeError('%s.storage must be a subclass/instance of %s.%s' % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__))\n+        return self._storage or default_storage\n+    @storage.setter\n+    def storage(self, value):\n+        self._storage = value\n+        self._storage_callable = None\n+        if callable(value):\n+            self._storage_callable = value\n+            self._storage = None\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n-                raise TypeError('%s.storage must be a subclass/instance of %s.%s' % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__))\n+        self._storage = storage or default_storage\n+        self._storage_callable = None\n+        if callable(self._storage):\n+            self._storage_callable = self._storage\n+            self._storage = None\n         self.upload_to = upload_to\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -144,8 +158,10 @@ class FileField(Field):\n         if kwargs.get('max_length') == 100:\n             del kwargs['max_length']\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage_callable is not None:\n+            kwargs['storage'] = self._storage_callable\n+        elif self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return (name, path, args, kwargs)\n     def get_internal_type(self):\n         return 'FileField'\n", "normalized_occurrence": 1}
