{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..05488d4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -559,8 +559,13 @@ class Documenter:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n                           RemovedInSphinx50Warning, stacklevel=2)\n-        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n-                           self.parent, self.object_name)\n+        # Handle type aliases documentation\n+        if hasattr(self.object, '__origin__') and self.object.__origin__ is Union:\n+            # This is a type alias, fetch its docstring differently\n+            docstring = self.object.__doc__\n+        else:\n+            docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings,\n+                               self.parent, self.object_name)\n         if docstring:\n             tab_width = self.directive.state.document.settings.tab_width\n             return [prepare_docstring(docstring, ignore, tab_width)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7792226..a55fa7a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -286,7 +286,10 @@ class Documenter:\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n         if ignore is not None:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx50Warning, stacklevel=2)\n-        docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+        if hasattr(self.object, '__origin__') and self.object.__origin__ is Union:\n+            docstring = self.object.__doc__\n+        else:\n+            docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n         if docstring:\n             tab_width = self.directive.state.document.settings.tab_width\n             return [prepare_docstring(docstring, ignore, tab_width)]\n", "normalized_occurrence": 1}
