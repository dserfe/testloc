{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..e9e9e0f 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -651,8 +651,30 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        # Calculate divider segments including extensions if present\n+        if self.drawedges:\n+            if self.orientation == 'vertical':\n+                # For vertical orientation, X values stay at 0/1, Y values need extension\n+                ny = len(Y)\n+                if self._extend_lower():\n+                    Y = np.insert(Y, 0, Y[0] + (Y[0] - Y[1]))  # Add point below\n+                    X = np.insert(X, 0, X[0])  # Match X dimension\n+                if self._extend_upper():\n+                    Y = np.append(Y, Y[-1] + (Y[-1] - Y[-2]))  # Add point above  \n+                    X = np.append(X, X[-1])  # Match X dimension\n+            else:\n+                # For horizontal orientation, Y values stay at 0/1, X values need extension\n+                nx = len(X)\n+                if self._extend_lower():\n+                    X = np.insert(X, 0, X[0] + (X[0] - X[1]))  # Add point to left\n+                    Y = np.insert(Y, 0, Y[0])  # Match Y dimension\n+                if self._extend_upper():\n+                    X = np.append(X, X[-1] + (X[-1] - X[-2]))  # Add point to right\n+                    Y = np.append(Y, Y[-1])  # Match Y dimension\n+            segments = np.dstack([X, Y])[1:-1]\n+        else:\n+            segments = []\n+        self.dividers.set_segments(segments)\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..0edcd64 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -262,7 +262,27 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            if self.orientation == 'vertical':\n+                ny = len(Y)\n+                if self._extend_lower():\n+                    Y = np.insert(Y, 0, Y[0] + (Y[0] - Y[1]))\n+                    X = np.insert(X, 0, X[0])\n+                if self._extend_upper():\n+                    Y = np.append(Y, Y[-1] + (Y[-1] - Y[-2]))\n+                    X = np.append(X, X[-1])\n+            else:\n+                nx = len(X)\n+                if self._extend_lower():\n+                    X = np.insert(X, 0, X[0] + (X[0] - X[1]))\n+                    Y = np.insert(Y, 0, Y[0])\n+                if self._extend_upper():\n+                    X = np.append(X, X[-1] + (X[-1] - X[-2]))\n+                    Y = np.append(Y, Y[-1])\n+            segments = np.dstack([X, Y])[1:-1]\n+        else:\n+            segments = []\n+        self.dividers.set_segments(segments)\n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)\n         patches = []\n", "normalized_occurrence": 1}
