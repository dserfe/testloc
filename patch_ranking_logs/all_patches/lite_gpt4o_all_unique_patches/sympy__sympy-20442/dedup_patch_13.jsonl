{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..42092b7 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -102,7 +102,7 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n         return expr\n \n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    if depmat is None or any(not d.is_Rational for d in depmat):\n         return expr\n \n     expr_scale_factor = get_total_scale_factor(expr)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..4725933 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -39,7 +39,7 @@ def convert_to(expr, target_units, unit_system='SI'):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    if depmat is None or any((not d.is_Rational for d in depmat)):\n         return expr\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n", "normalized_occurrence": 1}
