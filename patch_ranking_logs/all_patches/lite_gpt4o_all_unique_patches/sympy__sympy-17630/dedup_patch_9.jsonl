{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..3ac705d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,23 @@ class BlockMatrix(MatrixExpr):\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n-        if (isinstance(other, BlockMatrix) and\n-                self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+        if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n+            new_blocks = []\n+            for i in range(self.blockshape[0]):\n+                new_row = []\n+                for j in range(other.blockshape[1]):\n+                    sum_block = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+                    for k in range(self.blockshape[1]):\n+                        prod_block = self.blocks[i, k] * other.blocks[k, j]\n+                        if isinstance(prod_block, ZeroMatrix):\n+                            continue\n+                        if isinstance(sum_block, ZeroMatrix):\n+                            sum_block = prod_block\n+                        else:\n+                            sum_block += prod_block\n+                    new_row.append(sum_block)\n+                new_blocks.append(new_row)\n+            return BlockMatrix(new_blocks)\n \n         return self * other\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..ae3236b 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -72,7 +72,22 @@ class BlockMatrix(MatrixExpr):\n         return isinstance(other, BlockMatrix) and self.shape == other.shape and (self.blockshape == other.blockshape) and (self.rowblocksizes == other.rowblocksizes) and (self.colblocksizes == other.colblocksizes)\n     def _blockmul(self, other):\n         if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n-            return BlockMatrix(self.blocks * other.blocks)\n+            new_blocks = []\n+            for i in range(self.blockshape[0]):\n+                new_row = []\n+                for j in range(other.blockshape[1]):\n+                    sum_block = ZeroMatrix(self.rowblocksizes[i], other.colblocksizes[j])\n+                    for k in range(self.blockshape[1]):\n+                        prod_block = self.blocks[i, k] * other.blocks[k, j]\n+                        if isinstance(prod_block, ZeroMatrix):\n+                            continue\n+                        if isinstance(sum_block, ZeroMatrix):\n+                            sum_block = prod_block\n+                        else:\n+                            sum_block += prod_block\n+                    new_row.append(sum_block)\n+                new_blocks.append(new_row)\n+            return BlockMatrix(new_blocks)\n         return self * other\n     def _blockadd(self, other):\n         if isinstance(other, BlockMatrix) and self.structurally_equal(other):\n", "normalized_occurrence": 1}
