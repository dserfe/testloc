{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..9afe646 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -191,7 +191,7 @@ class ForwardManyToOneDescriptor:\n                 # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n+            self.field.set_cached_value(instance, rel_obj, from_instance=True)\n \n         if rel_obj is None and not self.field.null:\n             raise self.RelatedObjectDoesNotExist(\n@@ -414,7 +414,7 @@ class ReverseOneToOneDescriptor:\n                     # Set the forward accessor cache on the related object to\n                     # the current instance to avoid an extra SQL query if it's\n                     # accessed later on.\n-                    self.related.field.set_cached_value(rel_obj, instance)\n+                    self.related.field.set_cached_value(rel_obj, instance, from_instance=True)\n             self.related.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..03e6b0e 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -60,7 +60,7 @@ class ForwardManyToOneDescriptor:\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n-            self.field.set_cached_value(instance, rel_obj)\n+            self.field.set_cached_value(instance, rel_obj, from_instance=True)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n         else:\n@@ -151,7 +151,7 @@ class ReverseOneToOneDescriptor:\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n-                    self.related.field.set_cached_value(rel_obj, instance)\n+                    self.related.field.set_cached_value(rel_obj, instance, from_instance=True)\n             self.related.set_cached_value(instance, rel_obj)\n         if rel_obj is None:\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (instance.__class__.__name__, self.related.get_accessor_name()))\n", "normalized_occurrence": 1}
