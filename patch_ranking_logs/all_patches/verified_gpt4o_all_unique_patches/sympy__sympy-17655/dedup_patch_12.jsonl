{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..4bb016a 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -215,7 +215,19 @@ class Point(GeometryEntity):\n         \"\"\"\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n+        except TypeError as e:\n+            # Check if `other` is a Mul object with a scalar and a Point\n+            if isinstance(other, sympy.Mul):\n+                scalar, point = None, None\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    elif arg.is_Number:\n+                        scalar = arg\n+                if scalar is not None and point is not None:\n+                    s, o = Point._normalize_dimension(self, point)\n+                    coords = [simplify(a + scalar * b) for a, b in zip(s, o)]\n+                    return Point(coords, evaluate=False)\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n         coords = [simplify(a + b) for a, b in zip(s, o)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..2e20d15 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -64,7 +64,18 @@ class Point(GeometryEntity):\n     def __add__(self, other):\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n-        except TypeError:\n+        except TypeError as e:\n+            if isinstance(other, sympy.Mul):\n+                scalar, point = (None, None)\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    elif arg.is_Number:\n+                        scalar = arg\n+                if scalar is not None and point is not None:\n+                    s, o = Point._normalize_dimension(self, point)\n+                    coords = [simplify(a + scalar * b) for a, b in zip(s, o)]\n+                    return Point(coords, evaluate=False)\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n", "normalized_occurrence": 1}
