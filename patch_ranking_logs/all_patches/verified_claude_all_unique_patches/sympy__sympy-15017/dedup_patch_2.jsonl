{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15017", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 0b1a18b..20461a6 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -164,6 +164,9 @@ class NDimArray(object):\n     def __len__(self):\n         \"\"\"Overload common function len(). Returns number of elements in array.\n \n+        For arrays of rank > 0, returns the total number of elements.\n+        For rank-0 arrays (scalars), returns 1.\n+\n         Examples\n         ========\n \n@@ -173,9 +176,12 @@ class NDimArray(object):\n         [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n         >>> len(a)\n         9\n+        >>> b = MutableDenseNDimArray(1)  # rank-0 array\n+        >>> len(b)\n+        1\n \n         \"\"\"\n-        return self._loop_size\n+        return max(1, self._loop_size)\n \n     @property\n     def shape(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex a3ef23c..7dc1380 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -78,7 +78,7 @@ class NDimArray(object):\n             raise TypeError('Shape should contain integers only.')\n         return (tuple(shape), iterable)\n     def __len__(self):\n-        return self._loop_size\n+        return max(1, self._loop_size)\n     @property\n     def shape(self):\n         return self._shape\n", "normalized_occurrence": 4}
