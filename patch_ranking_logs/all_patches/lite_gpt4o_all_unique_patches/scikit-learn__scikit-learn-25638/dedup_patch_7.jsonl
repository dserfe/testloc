{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..38afac2 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,6 +73,8 @@ def unique_labels(*ys):\n     >>> unique_labels([1, 2, 10], [5, 11])\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n+    # Convert pandas nullable dtypes to their corresponding numpy dtypes\n+    ys = [np.asarray(y.dropna().astype(y.dtype.name.replace('Int64', 'int64').replace('Float64', 'float64').replace('boolean', 'bool'))) if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean'] else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n@@ -342,7 +344,10 @@ def type_of_target(y, input_name=\"\"):\n         return \"unknown\"\n     if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n         # [obj_1] and not [\"label_1\"]\n-        return \"unknown\"\n+        if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean']:\n+            pass  # continue to the next checks; these are valid dtypes\n+        else:\n+            return \"unknown\"\n \n     # Check if multioutput\n     if y.ndim == 2 and y.shape[1] > 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..cad29d9 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -17,6 +17,7 @@ def _unique_indicator(y):\n     return np.arange(check_array(y, input_name='y', accept_sparse=['csr', 'csc', 'coo']).shape[1])\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n+    ys = [np.asarray(y.dropna().astype(y.dtype.name.replace('Int64', 'int64').replace('Float64', 'float64').replace('boolean', 'bool'))) if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean'] else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError('No argument has been passed.')\n@@ -92,7 +93,10 @@ def type_of_target(y, input_name=''):\n             return 'binary'\n         return 'unknown'\n     if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n-        return 'unknown'\n+        if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean']:\n+            pass\n+        else:\n+            return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n     else:\n", "normalized_occurrence": 1}
