{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..4558de8 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -312,15 +313,14 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    # Create a dummy variable filled with fill_value\n+                    fill_dims = {d: ds.dims[d] for d in ds.dims if d in concat_dim_lengths}\n+                    dummy_var = Variable(fill_dims, fill_value)\n+                    to_merge[var].append(dummy_var)\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..156e03d 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -126,11 +126,13 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n+                else:\n+                    fill_dims = {d: ds.dims[d] for d in ds.dims if d in concat_dim_lengths}\n+                    dummy_var = Variable(fill_dims, fill_value)\n+                    to_merge[var].append(dummy_var)\n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(var, to_merge[var], compat=compat, equals=equals.get(var, None))\n     else:\n", "normalized_occurrence": 1}
