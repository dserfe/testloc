{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..2cc78ac 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -425,7 +425,8 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n class EncodedFile(object):\n     errors = \"strict\"  # possibly needed by py3 code (issue555)\n \n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode='w'):\n+        self.mode = mode\n         self.buffer = buffer\n         self.encoding = encoding\n \n@@ -443,6 +444,8 @@ class EncodedFile(object):\n         self.write(data)\n \n     @property\n+    def mode(self):\n+        return self._mode\n     def name(self):\n         \"\"\"Ensure that file.name is a string.\"\"\"\n         return repr(self.buffer)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..ce8e5b4 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -247,7 +247,8 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n     return EncodedFile(f, encoding or default_encoding)\n class EncodedFile(object):\n     errors = 'strict'\n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode='w'):\n+        self.mode = mode\n         self.buffer = buffer\n         self.encoding = encoding\n     def write(self, obj):\n@@ -260,6 +261,8 @@ class EncodedFile(object):\n         data = ''.join(linelist)\n         self.write(data)\n     @property\n+    def mode(self):\n+        return self._mode\n     def name(self):\n         return repr(self.buffer)\n     def __getattr__(self, name):\n", "normalized_occurrence": 1}
