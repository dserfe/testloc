{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..89c82bb 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,7 +93,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n             if len(parts) == 2:\n                 # :param xxx:\n                 arg = arguments.setdefault(parts[1], {})\n@@ -121,7 +121,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and not arg.get('*param') and not arg.get('**param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -149,7 +149,7 @@ def augment_descriptions_with_types(\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n             if len(parts) == 2:\n                 # :param xxx:\n                 has_description.add(parts[1])\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..3f1bc56 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -67,7 +67,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n             if len(parts) == 2:\n                 arg = arguments.setdefault(parts[1], {})\n                 arg['param'] = True\n@@ -91,7 +91,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and (not arg.get('*param')) and (not arg.get('**param')):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -111,7 +111,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n             if len(parts) == 2:\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n", "normalized_occurrence": 1}
