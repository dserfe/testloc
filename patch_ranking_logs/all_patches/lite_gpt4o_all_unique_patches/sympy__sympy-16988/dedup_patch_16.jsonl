{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..7f2000b 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1261,10 +1261,11 @@ class Intersection(Set, LatticeOp):\n \n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n+        args = list(ordered(set(args), Set._infimum_key))\n \n         # Reduce sets using known rules\n         if evaluate:\n-            args = list(cls._new_args_filter(args))\n+            args = list(cls._new_args_filter(set(args)))\n             return simplify_intersection(args)\n \n         args = list(ordered(args, Set._infimum_key))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..76b0eb7 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -474,8 +474,9 @@ class Intersection(Set, LatticeOp):\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n         args = _sympify(args)\n+        args = list(ordered(set(args), Set._infimum_key))\n         if evaluate:\n-            args = list(cls._new_args_filter(args))\n+            args = list(cls._new_args_filter(set(args)))\n             return simplify_intersection(args)\n         args = list(ordered(args, Set._infimum_key))\n         obj = Basic.__new__(cls, *args)\n", "normalized_occurrence": 1}
