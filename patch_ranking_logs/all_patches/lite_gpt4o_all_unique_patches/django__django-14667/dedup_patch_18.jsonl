{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..9554ff8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1218,7 +1218,7 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n         clone = self._chain()\n-        if fields == (None,):\n+        if fields == (None,) or not fields:\n             clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n@@ -1233,7 +1233,7 @@ class QuerySet:\n         self._not_support_combined_queries('only')\n         if self._fields is not None:\n             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n-        if fields == (None,):\n+        if fields == (None,) or not fields:\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..7bfa92a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -738,7 +738,7 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError('Cannot call defer() after .values() or .values_list()')\n         clone = self._chain()\n-        if fields == (None,):\n+        if fields == (None,) or not fields:\n             clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n@@ -747,7 +747,7 @@ class QuerySet:\n         self._not_support_combined_queries('only')\n         if self._fields is not None:\n             raise TypeError('Cannot call only() after .values() or .values_list()')\n-        if fields == (None,):\n+        if fields == (None,) or not fields:\n             raise TypeError('Cannot pass None as an argument to only().')\n         for field in fields:\n             field = field.split(LOOKUP_SEP, 1)[0]\n", "normalized_occurrence": 1}
