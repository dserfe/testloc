{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..07b4bfb 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -186,6 +187,40 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n \n+    def _drop_unique_constraint(self, model, field):\n+        \"\"\"\n+        Drop a unique constraint for a field, handling the case where multiple unique\n+        constraints might exist on the same column (e.g., primary key and unique_together).\n+        \"\"\"\n+        table = model._meta.db_table\n+        column = field.column\n+        \n+        # Get all unique constraints for this column\n+        with self.connection.cursor() as cursor:\n+            cursor.execute(\"\"\"\n+                SELECT con.conname\n+                FROM pg_constraint con\n+                INNER JOIN pg_class rel ON rel.oid = con.conrelid\n+                INNER JOIN pg_namespace nsp ON nsp.oid = rel.relnamespace\n+                WHERE rel.relname = %s\n+                AND con.contype = 'u'\n+                AND con.conkey @> ARRAY[\n+                    (SELECT attnum FROM pg_attribute\n+                     WHERE attrelid = rel.oid AND attname = %s)\n+                ]::smallint[];\n+            \"\"\", [table, column])\n+            constraints = [row[0] for row in cursor.fetchall()]\n+            \n+        # Drop each constraint except the primary key\n+        for constraint in constraints:\n+            if not constraint.endswith('_pkey'):\n+                self.execute(\n+                    'ALTER TABLE %s DROP CONSTRAINT %s' % (\n+                        self.quote_name(table),\n+                        self.quote_name(constraint),\n+                    )\n+                )\n+\n     def _alter_field(\n         self,\n         model,\n@@ -197,6 +232,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         new_db_params,\n         strict=False,\n     ):\n+        # If we're removing a unique constraint and the field is a primary key,\n+        # use our special handling to properly remove the constraint\n+        if old_field.unique and not new_field.unique and old_field.primary_key:\n+            self._drop_unique_constraint(model, old_field)\n+            \n         # Drop indexes on varchar/text/citext columns that are changing to a\n         # different type.\n         if (old_field.db_index or old_field.unique) and (\n@@ -296,4 +336,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex d911e18..5137cd5 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -71,7 +71,18 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             return (fragment, [(self.sql_delete_sequence % {'sequence': self.quote_name(sequence_name)}, [])])\n         else:\n             return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n+    def _drop_unique_constraint(self, model, field):\n+        table = model._meta.db_table\n+        column = field.column\n+        with self.connection.cursor() as cursor:\n+            cursor.execute(\"\\n                SELECT con.conname\\n                FROM pg_constraint con\\n                INNER JOIN pg_class rel ON rel.oid = con.conrelid\\n                INNER JOIN pg_namespace nsp ON nsp.oid = rel.relnamespace\\n                WHERE rel.relname = %s\\n                AND con.contype = 'u'\\n                AND con.conkey @> ARRAY[\\n                    (SELECT attnum FROM pg_attribute\\n                     WHERE attrelid = rel.oid AND attname = %s)\\n                ]::smallint[];\\n            \", [table, column])\n+            constraints = [row[0] for row in cursor.fetchall()]\n+        for constraint in constraints:\n+            if not constraint.endswith('_pkey'):\n+                self.execute('ALTER TABLE %s DROP CONSTRAINT %s' % (self.quote_name(table), self.quote_name(constraint)))\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n+        if old_field.unique and (not new_field.unique) and old_field.primary_key:\n+            self._drop_unique_constraint(model, old_field)\n         if (old_field.db_index or old_field.unique) and (old_type.startswith('varchar') and (not new_type.startswith('varchar')) or (old_type.startswith('text') and (not new_type.startswith('text'))) or (old_type.startswith('citext') and (not new_type.startswith('citext')))):\n             index_name = self._create_index_name(model._meta.db_table, [old_field.column], suffix='_like')\n             self.execute(self._delete_index_sql(model, index_name))\n", "normalized_occurrence": 1}
