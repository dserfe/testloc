{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..fded8ca 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,8 +120,16 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n+        # Fast path: if other is not a Basic instance, or does not implement\n+        # __sympy__, it cannot be equal to self\n+        if not isinstance(other, Basic) and getattr(other, '__sympy__', None) is None:\n+            return False\n         try:\n-            other = sympify(other)\n+            # Only sympify objects we know we can safely convert\n+            if isinstance(other, Basic) or hasattr(other, '__sympy__'):\n+                other = sympify(other)\n+            else:\n+                return False\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..1349bf5 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,8 +46,13 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n+        if not isinstance(other, Basic) and getattr(other, '__sympy__', None) is None:\n+            return False\n         try:\n-            other = sympify(other)\n+            if isinstance(other, Basic) or hasattr(other, '__sympy__'):\n+                other = sympify(other)\n+            else:\n+                return False\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\n", "normalized_occurrence": 1}
