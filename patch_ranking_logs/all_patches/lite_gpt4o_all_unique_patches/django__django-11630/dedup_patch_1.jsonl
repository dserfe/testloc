{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 7ba849d..d6c5546 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -114,7 +114,7 @@ class ModelBase(type):\n             else:\n                 app_label = app_config.label\n \n-        new_class.add_to_class('_meta', Options(meta, app_label))\n+        new_class.add_to_class('_meta', Options(meta, app_label, name))\n         if not abstract:\n             new_class.add_to_class(\n                 'DoesNotExist',\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex c4aea35..77faa4f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -61,7 +61,7 @@ class ModelBase(type):\n                     raise RuntimeError(\"Model class %s.%s doesn't declare an explicit app_label and isn't in an application in INSTALLED_APPS.\" % (module, name))\n             else:\n                 app_label = app_config.label\n-        new_class.add_to_class('_meta', Options(meta, app_label))\n+        new_class.add_to_class('_meta', Options(meta, app_label, name))\n         if not abstract:\n             new_class.add_to_class('DoesNotExist', subclass_exception('DoesNotExist', tuple((x.DoesNotExist for x in parents if hasattr(x, '_meta') and (not x._meta.abstract))) or (ObjectDoesNotExist,), module, attached_to=new_class))\n             new_class.add_to_class('MultipleObjectsReturned', subclass_exception('MultipleObjectsReturned', tuple((x.MultipleObjectsReturned for x in parents if hasattr(x, '_meta') and (not x._meta.abstract))) or (MultipleObjectsReturned,), module, attached_to=new_class))\n", "normalized_occurrence": 1}
