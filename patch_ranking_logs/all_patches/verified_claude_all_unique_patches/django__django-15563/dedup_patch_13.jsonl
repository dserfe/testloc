{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..5b760f8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,6 +988,12 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n+        # For multi-table inheritance, ensure we update the correct table\n+        if self.model._meta.parents:\n+            query.related_updates = {}\n+            for parent, field in self.model._meta.parents.items():\n+                if field and any(f.model == parent for f in kwargs):\n+                    query.related_updates[parent] = []\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..0997d7e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,6 +533,11 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n+        if self.model._meta.parents:\n+            query.related_updates = {}\n+            for parent, field in self.model._meta.parents.items():\n+                if field and any((f.model == parent for f in kwargs)):\n+                    query.related_updates[parent] = []\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "normalized_occurrence": 1}
