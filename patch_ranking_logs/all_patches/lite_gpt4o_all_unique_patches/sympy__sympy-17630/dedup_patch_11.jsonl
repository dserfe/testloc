{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..57dfad8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -463,8 +463,11 @@ def bc_matmul(expr):\n     i = 0\n     while (i+1 < len(matrices)):\n         A, B = matrices[i:i+2]\n+        from sympy import ZeroMatrix\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            # Ensure that Zero objects are converted to ZeroMatrix\n+            matrices[i] = A._blockmul(B).applyfunc(\n+                lambda x: ZeroMatrix(x.rows, x.cols) if x == 0 else x)\n             matrices.pop(i+1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..13bee8d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -236,8 +236,9 @@ def bc_matmul(expr):\n     i = 0\n     while i + 1 < len(matrices):\n         A, B = matrices[i:i + 2]\n+        from sympy import ZeroMatrix\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n-            matrices[i] = A._blockmul(B)\n+            matrices[i] = A._blockmul(B).applyfunc(lambda x: ZeroMatrix(x.rows, x.cols) if x == 0 else x)\n             matrices.pop(i + 1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n", "normalized_occurrence": 1}
