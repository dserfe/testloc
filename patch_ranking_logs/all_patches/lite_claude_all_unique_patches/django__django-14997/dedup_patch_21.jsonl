{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 142a7e1..866b75b 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -189,6 +189,9 @@ class UniqueConstraint(BaseConstraint):\n         include = [model._meta.get_field(field_name).column for field_name in self.include]\n         condition = self._get_condition_sql(model, schema_editor)\n         expressions = self._get_index_expressions(model, schema_editor)\n+        # SQLite doesn't support expressions in unique constraints\n+        if expressions and schema_editor.connection.vendor == 'sqlite':\n+            expressions = None\n         return schema_editor._unique_sql(\n             model, fields, self.name, condition=condition,\n             deferrable=self.deferrable, include=include,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex d5c0339..def66db 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -118,6 +118,8 @@ class UniqueConstraint(BaseConstraint):\n         include = [model._meta.get_field(field_name).column for field_name in self.include]\n         condition = self._get_condition_sql(model, schema_editor)\n         expressions = self._get_index_expressions(model, schema_editor)\n+        if expressions and schema_editor.connection.vendor == 'sqlite':\n+            expressions = None\n         return schema_editor._unique_sql(model, fields, self.name, condition=condition, deferrable=self.deferrable, include=include, opclasses=self.opclasses, expressions=expressions)\n     def create_sql(self, model, schema_editor):\n         fields = [model._meta.get_field(field_name) for field_name in self.fields]\n", "normalized_occurrence": 1}
