{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11583", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex f44661f..1233cb3 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -139,10 +139,16 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            # The module could have been removed, don't fail loudly if this\n-            # is the case.\n-            continue\n+        except (FileNotFoundError, ValueError):\n+            # The module could have been removed or the path might contain null bytes.\n+            # In case of null bytes, try a non-strict resolution or fall back to the original path.\n+            try:\n+                resolved_path = path.resolve(strict=False).absolute()\n+            except ValueError:\n+                # If we still get ValueError, just use the original path\n+                resolved_path = path.absolute()\n+            except FileNotFoundError:\n+                continue\n         results.add(resolved_path)\n     return frozenset(results)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex e37abac..00af5d0 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -93,8 +93,13 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            continue\n+        except (FileNotFoundError, ValueError):\n+            try:\n+                resolved_path = path.resolve(strict=False).absolute()\n+            except ValueError:\n+                resolved_path = path.absolute()\n+            except FileNotFoundError:\n+                continue\n         results.add(resolved_path)\n     return frozenset(results)\n @functools.lru_cache(maxsize=1)\n", "normalized_occurrence": 1}
