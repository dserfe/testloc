{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..6f09112 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -218,7 +218,10 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                     self.visit_module(frame)\n \n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+            if node.annotation:\n+                values = {node.annotation}\n+            else:\n+                values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n@@ -230,7 +233,10 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n         handle instance_attrs_type\n         \"\"\"\n         try:\n-            values = set(node.infer())\n+            if node.annotation:\n+                values = {node.annotation}\n+            else:\n+                values = set(node.infer())\n             current = set(parent.instance_attrs_type[node.attrname])\n             parent.instance_attrs_type[node.attrname] = list(current | values)\n         except astroid.InferenceError:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..42b330c 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -110,14 +110,20 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                 else:\n                     self.visit_module(frame)\n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+            if node.annotation:\n+                values = {node.annotation}\n+            else:\n+                values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n     @staticmethod\n     def handle_assignattr_type(node, parent):\n         try:\n-            values = set(node.infer())\n+            if node.annotation:\n+                values = {node.annotation}\n+            else:\n+                values = set(node.infer())\n             current = set(parent.instance_attrs_type[node.attrname])\n             parent.instance_attrs_type[node.attrname] = list(current | values)\n         except astroid.InferenceError:\n", "normalized_occurrence": 1}
