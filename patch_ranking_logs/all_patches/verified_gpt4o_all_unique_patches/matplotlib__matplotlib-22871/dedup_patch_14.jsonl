{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22871", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex cc65fc1..6d5b9e9 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -795,8 +795,10 @@ class ConciseDateFormatter(ticker.Formatter):\n         # determine the level we will label at:\n         # mostly 0: years,  1: months,  2: days,\n         # 3: hours, 4: minutes, 5: seconds, 6: microseconds\n+        unique_level_found = False\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n+                unique_level_found = True\n                 if level < 2:\n                     show_offset = False\n                 break\n@@ -805,6 +807,12 @@ class ConciseDateFormatter(ticker.Formatter):\n                 # set to the most precise (6: microseconds doesn't exist...)\n                 level = 5\n \n+        # Ensure year is in offset if less than a year but spans multiple months\n+        if not unique_level_found:\n+            if len(np.unique(tickdate[:, 1])) > 1:\n+                level = 1\n+                show_offset = True\n+\n         # level is the basic level we will label at.\n         # now loop through and decide the actual ticklabels\n         zerovals = [0, 1, 1, 0, 0, 0, 0]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 6ad34f7..a8cb97f 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -195,13 +195,19 @@ class ConciseDateFormatter(ticker.Formatter):\n         zerofmts = self.zero_formats\n         offsetfmts = self.offset_formats\n         show_offset = self.show_offset\n+        unique_level_found = False\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n+                unique_level_found = True\n                 if level < 2:\n                     show_offset = False\n                 break\n             elif level == 0:\n                 level = 5\n+        if not unique_level_found:\n+            if len(np.unique(tickdate[:, 1])) > 1:\n+                level = 1\n+                show_offset = True\n         zerovals = [0, 1, 1, 0, 0, 0, 0]\n         labels = [''] * len(tickdate)\n         for nn in range(len(tickdate)):\n", "normalized_occurrence": 1}
