{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4493", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8003c0d..f8be929 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3906,6 +3906,9 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any dimensions would have inconsistent sizes in the updated\n             dataset.\n         \"\"\"\n+        if isinstance(other, dict):\n+            other = {k: v if not isinstance(v, tuple) else (v[0], v[1].copy(deep=False))\n+                    for k, v in other.items()}\n         merge_result = dataset_update_method(self, other)\n         return self._replace(inplace=True, **merge_result._asdict())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 5bd37a8..aff10a3 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1253,6 +1253,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                 result = result._unstack_once(dim, fill_value)\n         return result\n     def update(self, other: 'CoercibleMapping') -> 'Dataset':\n+        if isinstance(other, dict):\n+            other = {k: v if not isinstance(v, tuple) else (v[0], v[1].copy(deep=False)) for k, v in other.items()}\n         merge_result = dataset_update_method(self, other)\n         return self._replace(inplace=True, **merge_result._asdict())\n     def merge(self, other: Union['CoercibleMapping', 'DataArray'], overwrite_vars: Union[Hashable, Iterable[Hashable]]=frozenset(), compat: str='no_conflicts', join: str='outer', fill_value: Any=dtypes.NA) -> 'Dataset':\n", "normalized_occurrence": 1}
