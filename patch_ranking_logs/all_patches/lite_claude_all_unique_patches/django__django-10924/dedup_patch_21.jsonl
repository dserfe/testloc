{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f5823d9..f990715 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,11 +1663,22 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.path_value, self.match, self.recursive = path, match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n \n+    def _get_path(self):\n+        \"\"\"Returns the resolved path value.\"\"\"\n+        if callable(self.path_value):\n+            return self.path_value()\n+        return self.path_value\n+\n+    @property\n+    def path(self):\n+        \"\"\"Property that resolves and returns the path value.\"\"\"\n+        return self._get_path()\n+\n     def check(self, **kwargs):\n         return [\n             *super().check(**kwargs),\n@@ -1687,8 +1698,8 @@ class FilePathField(Field):\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n-            kwargs['path'] = self.path\n+        if self.path_value != '':\n+            kwargs['path'] = self.path_value\n         if self.match is not None:\n             kwargs['match'] = self.match\n         if self.recursive is not False:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 285706a..ba1e742 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -844,10 +844,17 @@ class EmailField(CharField):\n class FilePathField(Field):\n     description = _('File path')\n     def __init__(self, verbose_name=None, name=None, path='', match=None, recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = (path, match, recursive)\n+        self.path_value, self.match, self.recursive = (path, match, recursive)\n         self.allow_files, self.allow_folders = (allow_files, allow_folders)\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n+    def _get_path(self):\n+        if callable(self.path_value):\n+            return self.path_value()\n+        return self.path_value\n+    @property\n+    def path(self):\n+        return self._get_path()\n     def check(self, **kwargs):\n         return [*super().check(**kwargs), *self._check_allowing_files_or_folders(**kwargs)]\n     def _check_allowing_files_or_folders(self, **kwargs):\n@@ -856,8 +863,8 @@ class FilePathField(Field):\n         return []\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n-        if self.path != '':\n-            kwargs['path'] = self.path\n+        if self.path_value != '':\n+            kwargs['path'] = self.path_value\n         if self.match is not None:\n             kwargs['match'] = self.match\n         if self.recursive is not False:\n", "normalized_occurrence": 1}
