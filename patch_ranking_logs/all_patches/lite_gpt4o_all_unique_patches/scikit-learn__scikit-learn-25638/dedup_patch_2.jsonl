{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..1222aaa 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -279,7 +279,11 @@ def type_of_target(y, input_name=\"\"):\n     >>> type_of_target(np.array([[0, 1], [1, 1]]))\n     'multilabel-indicator'\n     \"\"\"\n+    import pandas as pd\n     xp, is_array_api = get_namespace(y)\n+\n+    if isinstance(y, pd.Series) and str(y.dtype) in [\"Int64\", \"Float64\", \"boolean\"]:\n+        y = y.to_numpy()\n     valid = (\n         (isinstance(y, Sequence) or issparse(y) or hasattr(y, \"__array__\"))\n         and not isinstance(y, str)\n@@ -312,7 +316,10 @@ def type_of_target(y, input_name=\"\"):\n                 # see NEP 34\n                 y = xp.asarray(y, dtype=object)\n \n-    # The old sequence of sequences format\n+    # Handle nullable pandas dtypes: 'Int64', 'Float64', 'boolean'\n+    if isinstance(y, pd.Series):\n+        if str(y.dtype) in [\"Int64\", \"Float64\", \"boolean\"]:\n+            y = y.to_numpy(dtype=y.dtype)\n     try:\n         if (\n             not hasattr(y[0], \"__array__\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..6bff7dc 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -64,7 +64,10 @@ def check_classification_targets(y):\n     if y_type not in ['binary', 'multiclass', 'multiclass-multioutput', 'multilabel-indicator', 'multilabel-sequences']:\n         raise ValueError('Unknown label type: %r' % y_type)\n def type_of_target(y, input_name=''):\n+    import pandas as pd\n     xp, is_array_api = get_namespace(y)\n+    if isinstance(y, pd.Series) and str(y.dtype) in ['Int64', 'Float64', 'boolean']:\n+        y = y.to_numpy()\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n@@ -80,6 +83,9 @@ def type_of_target(y, input_name=''):\n                 y = xp.asarray(y)\n             except (np.VisibleDeprecationWarning, ValueError):\n                 y = xp.asarray(y, dtype=object)\n+    if isinstance(y, pd.Series):\n+        if str(y.dtype) in ['Int64', 'Float64', 'boolean']:\n+            y = y.to_numpy(dtype=y.dtype)\n     try:\n         if not hasattr(y[0], '__array__') and isinstance(y[0], Sequence) and (not isinstance(y[0], str)):\n             raise ValueError('You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.')\n", "normalized_occurrence": 1}
