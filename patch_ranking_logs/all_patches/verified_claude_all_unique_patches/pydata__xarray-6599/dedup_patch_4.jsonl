{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..4c0ca88 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -443,10 +443,16 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n \n     # Convert np.NaT to np.nan\n     elif array.dtype.kind in \"mM\":\n-\n-        # Convert to specified timedelta units.\n+        # First convert to nanoseconds for consistent handling\n+        array = array.astype('timedelta64[ns]')\n+        \n+        # Convert to specified timedelta units\n         if datetime_unit:\n             array = array / np.timedelta64(1, datetime_unit)\n+        else:\n+            # Default to nanoseconds if no unit specified\n+            array = array.astype(np.float64)\n+            \n         return np.where(isnull(array), np.nan, array.astype(dtype))\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..c40288f 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -237,8 +237,11 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     if array.dtype.kind in 'O':\n         return py_timedelta_to_float(array, datetime_unit or 'ns').astype(dtype)\n     elif array.dtype.kind in 'mM':\n+        array = array.astype('timedelta64[ns]')\n         if datetime_unit:\n             array = array / np.timedelta64(1, datetime_unit)\n+        else:\n+            array = array.astype(np.float64)\n         return np.where(isnull(array), np.nan, array.astype(dtype))\n def timedelta_to_numeric(value, datetime_unit='ns', dtype=float):\n     import datetime as dt\n", "normalized_occurrence": 1}
