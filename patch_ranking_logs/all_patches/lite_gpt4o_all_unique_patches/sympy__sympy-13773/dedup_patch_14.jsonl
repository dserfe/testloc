{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 13b44f5..559a946 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -134,7 +134,10 @@ class MatMul(MatrixExpr):\n \n \n def validate(*matrices):\n-    \"\"\" Checks for valid shapes for args of MatMul \"\"\"\n+    \"\"\" Checks for valid shapes for args of MatMul and ensures all arguments are matrices \"\"\"\n+    for matrix in matrices:\n+        if not hasattr(matrix, 'shape'):\n+            raise ValueError(\"All operands must be matrices\")\n     for i in range(len(matrices)-1):\n         A, B = matrices[i:i+2]\n         if A.cols != B.rows:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex c9124f3..880b30e 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -86,6 +86,9 @@ class MatMul(MatrixExpr):\n         coeff_c, coeff_nc = coeff.args_cnc(**kwargs)\n         return (coeff_c, coeff_nc + matrices)\n def validate(*matrices):\n+    for matrix in matrices:\n+        if not hasattr(matrix, 'shape'):\n+            raise ValueError('All operands must be matrices')\n     for i in range(len(matrices) - 1):\n         A, B = matrices[i:i + 2]\n         if A.cols != B.rows:\n", "normalized_occurrence": 1}
