{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..20657e7 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -37,7 +37,11 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = method.__get__(self, type(self))\n+        # Preserve the wrapper attributes\n+        for attr in ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'):\n+            if hasattr(method, attr):\n+                setattr(bound_method, attr, getattr(method, attr))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..249940d 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -15,7 +15,10 @@ def _multi_decorate(decorators, method):\n     else:\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = method.__get__(self, type(self))\n+        for attr in ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'):\n+            if hasattr(method, attr):\n+                setattr(bound_method, attr, getattr(method, attr))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "normalized_occurrence": 1}
