{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..a0bd223 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1377,6 +1377,16 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n \n         return s in typing.__all__  # type: ignore\n \n+    def isstdlib(s: str) -> bool:\n+        if '.' not in s:\n+            return False\n+        module_name, cls_name = s.rsplit('.', 1)\n+        try:\n+            module = __import__(module_name, fromlist=[cls_name])\n+            return inspect.isclass(getattr(module, cls_name, None))\n+        except ImportError:\n+            return False\n+\n     if node.get('refdomain') != 'py':\n         return None\n     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':\n@@ -1389,6 +1399,9 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        elif isstdlib(reftarget):\n+            # standard library class\n+            return contnode\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..9960830 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -837,6 +837,15 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n         return s in typing.__all__\n+    def isstdlib(s: str) -> bool:\n+        if '.' not in s:\n+            return False\n+        module_name, cls_name = s.rsplit('.', 1)\n+        try:\n+            module = __import__(module_name, fromlist=[cls_name])\n+            return inspect.isclass(getattr(module, cls_name, None))\n+        except ImportError:\n+            return False\n     if node.get('refdomain') != 'py':\n         return None\n     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':\n@@ -847,6 +856,8 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        elif isstdlib(reftarget):\n+            return contnode\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
