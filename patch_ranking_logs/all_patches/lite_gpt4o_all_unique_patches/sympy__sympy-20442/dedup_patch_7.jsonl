{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..1bfcfc1 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -101,6 +101,9 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n \n+    if unit_system.get_dimensional_dependencies(expr) != unit_system.get_dimensional_dependencies(Mul.fromiter(target_units)):\n+        raise ValueError(\"Incompatible dimensions for conversion\")\n+\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..56f9b59 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -38,6 +38,8 @@ def convert_to(expr, target_units, unit_system='SI'):\n         elif isinstance(expr, Quantity):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n+    if unit_system.get_dimensional_dependencies(expr) != unit_system.get_dimensional_dependencies(Mul.fromiter(target_units)):\n+        raise ValueError('Incompatible dimensions for conversion')\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "normalized_occurrence": 1}
