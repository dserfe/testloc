{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex fa27bfc..09add8f 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -124,10 +124,11 @@ class Command(BaseCommand):\n                             \"self\" if relations[column_name][1] == table_name\n                             else table2model(relations[column_name][1])\n                         )\n+                        referenced_field = relations[column_name][0]\n                         if rel_to in known_models:\n-                            field_type = '%s(%s' % (rel_type, rel_to)\n+                            field_type = '%s(%s, to_field=%r' % (rel_type, rel_to, referenced_field)\n                         else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                            field_type = \"%s('%s', to_field=%r\" % (rel_type, rel_to, referenced_field)\n                     else:\n                         # Calling `get_field_type` to get the field type string and any\n                         # additional parameters and notes.\ndiff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex bdb6b4c..e8c63ac 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -121,7 +121,11 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         Return a dictionary of {field_name: (field_name_other_table, other_table)}\n         representing all relationships to the given table.\n         \"\"\"\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        relations = {}\n+        key_columns = self.get_key_columns(cursor, table_name)\n+        for row in key_columns:\n+            relations[row[0]] = (row[2], row[1])\n+        return relations\n \n     def get_key_columns(self, cursor, table_name):\n         cursor.execute(\"\"\"\n@@ -136,6 +140,7 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n                 con.contype = 'f' AND\n                 c1.relnamespace = c2.relnamespace AND\n                 pg_catalog.pg_table_is_visible(c1.oid)\n+            ORDER BY a1.attnum\n         \"\"\", [table_name])\n         return cursor.fetchall()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/introspection.py b/django/db/backends/postgresql/introspection.py\nindex c5c043d..b04eb7a 100644\n--- a/django/db/backends/postgresql/introspection.py\n+++ b/django/db/backends/postgresql/introspection.py\n@@ -26,9 +26,13 @@ class DatabaseIntrospection(BaseDatabaseIntrospection):\n         cursor.execute(\"\\n            SELECT s.relname as sequence_name, col.attname\\n            FROM pg_class s\\n                JOIN pg_namespace sn ON sn.oid = s.relnamespace\\n                JOIN pg_depend d ON d.refobjid = s.oid AND d.refclassid = 'pg_class'::regclass\\n                JOIN pg_attrdef ad ON ad.oid = d.objid AND d.classid = 'pg_attrdef'::regclass\\n                JOIN pg_attribute col ON col.attrelid = ad.adrelid AND col.attnum = ad.adnum\\n                JOIN pg_class tbl ON tbl.oid = ad.adrelid\\n            WHERE s.relkind = 'S'\\n              AND d.deptype in ('a', 'n')\\n              AND pg_catalog.pg_table_is_visible(tbl.oid)\\n              AND tbl.relname = %s\\n        \", [table_name])\n         return [{'name': row[0], 'table': table_name, 'column': row[1]} for row in cursor.fetchall()]\n     def get_relations(self, cursor, table_name):\n-        return {row[0]: (row[2], row[1]) for row in self.get_key_columns(cursor, table_name)}\n+        relations = {}\n+        key_columns = self.get_key_columns(cursor, table_name)\n+        for row in key_columns:\n+            relations[row[0]] = (row[2], row[1])\n+        return relations\n     def get_key_columns(self, cursor, table_name):\n-        cursor.execute(\"\\n            SELECT a1.attname, c2.relname, a2.attname\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE\\n                c1.relname = %s AND\\n                con.contype = 'f' AND\\n                c1.relnamespace = c2.relnamespace AND\\n                pg_catalog.pg_table_is_visible(c1.oid)\\n        \", [table_name])\n+        cursor.execute(\"\\n            SELECT a1.attname, c2.relname, a2.attname\\n            FROM pg_constraint con\\n            LEFT JOIN pg_class c1 ON con.conrelid = c1.oid\\n            LEFT JOIN pg_class c2 ON con.confrelid = c2.oid\\n            LEFT JOIN pg_attribute a1 ON c1.oid = a1.attrelid AND a1.attnum = con.conkey[1]\\n            LEFT JOIN pg_attribute a2 ON c2.oid = a2.attrelid AND a2.attnum = con.confkey[1]\\n            WHERE\\n                c1.relname = %s AND\\n                con.contype = 'f' AND\\n                c1.relnamespace = c2.relnamespace AND\\n                pg_catalog.pg_table_is_visible(c1.oid)\\n            ORDER BY a1.attnum\\n        \", [table_name])\n         return cursor.fetchall()\n     def get_constraints(self, cursor, table_name):\n         constraints = {}\ndiff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex 09bd4a3..662604f 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -86,10 +86,11 @@ class Command(BaseCommand):\n                         else:\n                             rel_type = 'ForeignKey'\n                         rel_to = 'self' if relations[column_name][1] == table_name else table2model(relations[column_name][1])\n+                        referenced_field = relations[column_name][0]\n                         if rel_to in known_models:\n-                            field_type = '%s(%s' % (rel_type, rel_to)\n+                            field_type = '%s(%s, to_field=%r' % (rel_type, rel_to, referenced_field)\n                         else:\n-                            field_type = \"%s('%s'\" % (rel_type, rel_to)\n+                            field_type = \"%s('%s', to_field=%r\" % (rel_type, rel_to, referenced_field)\n                     else:\n                         field_type, field_params, field_notes = self.get_field_type(connection, table_name, row)\n                         extra_params.update(field_params)\n", "normalized_occurrence": 1}
