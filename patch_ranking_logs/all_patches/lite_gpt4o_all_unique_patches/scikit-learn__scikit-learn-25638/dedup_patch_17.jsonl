{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..6e03b2a 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,7 +73,22 @@ def unique_labels(*ys):\n     >>> unique_labels([1, 2, 10], [5, 11])\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n+    from pandas.api.types import is_extension_array_dtype\n+\n     xp, is_array_api = get_namespace(*ys)\n+\n+    # Convert nullable pandas dtypes to their non-nullable equivalents\n+    def convert_nullable_dtype(y):\n+        if is_extension_array_dtype(y):\n+            if y.dtype.name == \"Int64\":\n+                return y.astype(\"int64\")\n+            elif y.dtype.name == \"Float64\":\n+                return y.astype(\"float64\")\n+            elif y.dtype.name == \"boolean\":\n+                return y.astype(\"bool\")\n+        return y\n+\n+    ys = [convert_nullable_dtype(y) for y in ys]\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..0750d44 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -17,7 +17,18 @@ def _unique_indicator(y):\n     return np.arange(check_array(y, input_name='y', accept_sparse=['csr', 'csc', 'coo']).shape[1])\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n+    from pandas.api.types import is_extension_array_dtype\n     xp, is_array_api = get_namespace(*ys)\n+    def convert_nullable_dtype(y):\n+        if is_extension_array_dtype(y):\n+            if y.dtype.name == 'Int64':\n+                return y.astype('int64')\n+            elif y.dtype.name == 'Float64':\n+                return y.astype('float64')\n+            elif y.dtype.name == 'boolean':\n+                return y.astype('bool')\n+        return y\n+    ys = [convert_nullable_dtype(y) for y in ys]\n     if not ys:\n         raise ValueError('No argument has been passed.')\n     ys_types = set((type_of_target(x) for x in ys))\n", "normalized_occurrence": 1}
