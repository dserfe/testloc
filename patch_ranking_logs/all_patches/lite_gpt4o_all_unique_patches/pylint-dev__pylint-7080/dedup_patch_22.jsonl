{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 440e6fe..cdc2f45 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -632,6 +632,9 @@ class PyLinter(\n             )\n             files_or_modules = (files_or_modules,)  # type: ignore[assignment]\n         if self.config.recursive:\n+            ignore_paths = self.config.ignore_paths\n+            if ignore_paths:\n+                files_or_modules = [f for f in files_or_modules if not _is_ignored_file(f, [], [], ignore_paths)]\n             files_or_modules = tuple(self._discover_files(files_or_modules))\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex afb1178..cbe2353 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -246,6 +246,9 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             warnings.warn('In pylint 3.0, the checkers check function will only accept sequence of string', DeprecationWarning)\n             files_or_modules = (files_or_modules,)\n         if self.config.recursive:\n+            ignore_paths = self.config.ignore_paths\n+            if ignore_paths:\n+                files_or_modules = [f for f in files_or_modules if not _is_ignored_file(f, [], [], ignore_paths)]\n             files_or_modules = tuple(self._discover_files(files_or_modules))\n         if self.config.from_stdin:\n             if len(files_or_modules) != 1:\n", "normalized_occurrence": 1}
