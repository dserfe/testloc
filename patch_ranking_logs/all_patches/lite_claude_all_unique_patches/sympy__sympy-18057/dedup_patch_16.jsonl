{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..4646afc 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,14 +120,30 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            # If it's already a SymPy type, proceed with normal comparison\n+            pass\n+        elif hasattr(other, '_sympy_'):\n+            # If it has an explicit conversion method, use it\n+            try:\n+                other = other._sympy_()\n+            except Exception:\n+                return False\n+        elif not isinstance(other, str):\n+            # Don't attempt to sympify arbitrary objects\n+            return False\n+            \n+        # Now safely sympify if needed\n         try:\n-            other = sympify(other)\n+            if not isinstance(other, Basic):\n+                other = _sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\n             return False\n+            \n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n+        if not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..aaf60e5 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,8 +46,18 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n+        if isinstance(other, Basic):\n+            pass\n+        elif hasattr(other, '_sympy_'):\n+            try:\n+                other = other._sympy_()\n+            except Exception:\n+                return False\n+        elif not isinstance(other, str):\n+            return False\n         try:\n-            other = sympify(other)\n+            if not isinstance(other, Basic):\n+                other = _sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n         except (SympifyError, SyntaxError):\n", "normalized_occurrence": 1}
