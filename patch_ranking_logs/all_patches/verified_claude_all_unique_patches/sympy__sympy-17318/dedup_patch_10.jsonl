{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17318", "model_patch": "diff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex ea8922d..4ad8713 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -157,9 +157,12 @@ def _sqrt_match(p):\n     elif p.is_Add:\n         pargs = sorted(p.args, key=default_sort_key)\n         if all((x**2).is_Rational for x in pargs):\n-            r, b, a = split_surds(p)\n-            res = a, b, r\n-            return list(res)\n+            try:\n+                r, b, a = split_surds(p)\n+                res = a, b, r\n+                return list(res)\n+            except:\n+                return []\n         # to make the process canonical, the argument is included in the tuple\n         # so when the max is selected, it will be the largest arg having a\n         # given depth\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex d4a8177..dedaf58 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -57,9 +57,12 @@ def _sqrt_match(p):\n     elif p.is_Add:\n         pargs = sorted(p.args, key=default_sort_key)\n         if all(((x ** 2).is_Rational for x in pargs)):\n-            r, b, a = split_surds(p)\n-            res = (a, b, r)\n-            return list(res)\n+            try:\n+                r, b, a = split_surds(p)\n+                res = (a, b, r)\n+                return list(res)\n+            except:\n+                return []\n         v = [(sqrt_depth(x), x, i) for i, x in enumerate(pargs)]\n         nmax = max(v, key=default_sort_key)\n         if nmax[0] == 0:\n", "normalized_occurrence": 1}
