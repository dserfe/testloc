{"model_name_or_path": "agentless", "instance_id": "django__django-13023", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex b1fce64..81380da 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1497,6 +1497,12 @@ class DecimalField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(\n+                self.error_messages['invalid'],\n+                code='invalid',\n+                params={'value': value},\n+            )\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d93730b..38d533f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -747,6 +747,8 @@ class DecimalField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, dict):\n+            raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n", "normalized_occurrence": 2}
