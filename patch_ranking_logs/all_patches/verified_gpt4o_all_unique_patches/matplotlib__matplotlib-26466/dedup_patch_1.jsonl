{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26466", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 7ccddf3..1fba35c 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -705,9 +705,13 @@ class Axes(_AxesBase):\n                  arrowprops=None, annotation_clip=None, **kwargs):\n         # Signature must match Annotation. This is verified in\n         # test_annotate_signature().\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords,\n-                             textcoords=textcoords, arrowprops=arrowprops,\n-                             annotation_clip=annotation_clip, **kwargs)\n+        import numpy as np\n+        a = mtext.Annotation(text, \n+                             np.copy(xy) if isinstance(xy, np.ndarray) else xy, \n+                             xytext=np.copy(xytext) if isinstance(xytext, np.ndarray) else xytext, \n+                             xycoords=xycoords, textcoords=textcoords, \n+                             arrowprops=arrowprops, annotation_clip=annotation_clip, \n+                             **kwargs)\n         a.set_transform(mtransforms.IdentityTransform())\n         if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n             a.set_clip_path(self.patch)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 6b25eeb..69953c2 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -150,7 +150,8 @@ class Axes(_AxesBase):\n         return t\n     @_docstring.dedent_interpd\n     def annotate(self, text, xy, xytext=None, xycoords='data', textcoords=None, arrowprops=None, annotation_clip=None, **kwargs):\n-        a = mtext.Annotation(text, xy, xytext=xytext, xycoords=xycoords, textcoords=textcoords, arrowprops=arrowprops, annotation_clip=annotation_clip, **kwargs)\n+        import numpy as np\n+        a = mtext.Annotation(text, np.copy(xy) if isinstance(xy, np.ndarray) else xy, xytext=np.copy(xytext) if isinstance(xytext, np.ndarray) else xytext, xycoords=xycoords, textcoords=textcoords, arrowprops=arrowprops, annotation_clip=annotation_clip, **kwargs)\n         a.set_transform(mtransforms.IdentityTransform())\n         if kwargs.get('clip_on', False) and a.get_clip_path() is None:\n             a.set_clip_path(self.patch)\n", "normalized_occurrence": 1}
