{"model_name_or_path": "agentless", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..c35bde2 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -125,10 +125,16 @@ class DjangoHelpFormatter(HelpFormatter):\n         )\n \n     def add_usage(self, usage, actions, *args, **kwargs):\n-        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+        # Ensure help text maintains its formatting\n+        formatted_usage = usage.replace('\\n', '\\n\\t')\n+        super().add_usage(formatted_usage, self._reordered_actions(actions), *args, **kwargs)\n \n     def add_arguments(self, actions):\n-        super().add_arguments(self._reordered_actions(actions))\n+        # Ensure help text maintains its formatting\n+        for action in self._reordered_actions(actions):\n+            if action.help is not None:\n+                action.help = action.help.replace('\\n', '\\n\\t')\n+        super().add_arguments(actions)\n \n \n class OutputWrapper(TextIOBase):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 2883dc3..28ba9f0 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -51,9 +51,13 @@ class DjangoHelpFormatter(HelpFormatter):\n     def _reordered_actions(self, actions):\n         return sorted(actions, key=lambda a: set(a.option_strings) & self.show_last != set())\n     def add_usage(self, usage, actions, *args, **kwargs):\n-        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+        formatted_usage = usage.replace('\\n', '\\n\\t')\n+        super().add_usage(formatted_usage, self._reordered_actions(actions), *args, **kwargs)\n     def add_arguments(self, actions):\n-        super().add_arguments(self._reordered_actions(actions))\n+        for action in self._reordered_actions(actions):\n+            if action.help is not None:\n+                action.help = action.help.replace('\\n', '\\n\\t')\n+        super().add_arguments(actions)\n class OutputWrapper(TextIOBase):\n     @property\n     def style_func(self):\n", "normalized_occurrence": 1}
