{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..4e400ae 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -217,6 +217,15 @@ class Nominal(Scale):\n             # TODO how to handle color representation consistency?\n         ]\n \n+        def _adjust_nominal_axis(self, ax, axis):\n+            n = len(getattr(ax, f\"get_{axis}ticks\")())\n+            if axis == \"x\":\n+                ax.xaxis.grid(False)\n+                ax.set_xlim(-.5, n - .5, auto=None)\n+            else:\n+                ax.yaxis.grid(False)\n+                ax.set_ylim(n - .5, -.5, auto=None)\n+\n         def spacer(x):\n             return 1\n \n@@ -225,6 +234,8 @@ class Nominal(Scale):\n         if prop.legend:\n             new._legend = units_seed, list(stringify(units_seed))\n \n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n+\n         return new\n \n     def tick(self, locator: Locator | None = None):\n@@ -249,6 +260,8 @@ class Nominal(Scale):\n         new._tick_params = {\n             \"locator\": locator,\n         }\n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n+\n         return new\n \n     def label(self, formatter: Formatter | None = None):\n@@ -274,6 +287,8 @@ class Nominal(Scale):\n         new._label_params = {\n             \"formatter\": formatter,\n         }\n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n+\n         return new\n \n     def _get_locators(self, locator):\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..ac7e3b6 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -103,19 +103,30 @@ class Nominal(Scale):\n             out[keep] = axis.convert_units(stringify(x[keep]))\n             return out\n         new._pipeline = [convert_units, prop.get_mapping(new, data)]\n+        def _adjust_nominal_axis(self, ax, axis):\n+            n = len(getattr(ax, f'get_{axis}ticks')())\n+            if axis == 'x':\n+                ax.xaxis.grid(False)\n+                ax.set_xlim(-0.5, n - 0.5, auto=None)\n+            else:\n+                ax.yaxis.grid(False)\n+                ax.set_ylim(n - 0.5, -0.5, auto=None)\n         def spacer(x):\n             return 1\n         new._spacer = spacer\n         if prop.legend:\n             new._legend = (units_seed, list(stringify(units_seed)))\n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n         return new\n     def tick(self, locator: Locator | None=None):\n         new = copy(self)\n         new._tick_params = {'locator': locator}\n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n         return new\n     def label(self, formatter: Formatter | None=None):\n         new = copy(self)\n         new._label_params = {'formatter': formatter}\n+        new._adjust_nominal_axis = new._adjust_nominal_axis\n         return new\n     def _get_locators(self, locator):\n         if locator is not None:\n", "normalized_occurrence": 1}
