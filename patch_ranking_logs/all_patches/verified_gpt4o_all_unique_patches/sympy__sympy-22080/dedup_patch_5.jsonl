{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 0831e79..33fee48 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -234,6 +234,10 @@ class AbstractPythonCodePrinter(CodePrinter):\n \n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n+        if expr.args[0].is_Mul:\n+            mul_args = expr.args[0].as_ordered_factors()\n+            if any(isinstance(arg, Mod) for arg in mul_args):\n+                return ('(%s)' % self._print(Mul(*mul_args)))\n         return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n \n     def _print_Piecewise(self, expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex f217d9a..f712cc4 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -109,6 +109,10 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return self._print_NaN(expr)\n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n+        if expr.args[0].is_Mul:\n+            mul_args = expr.args[0].as_ordered_factors()\n+            if any((isinstance(arg, Mod) for arg in mul_args)):\n+                return '(%s)' % self._print(Mul(*mul_args))\n         return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n     def _print_Piecewise(self, expr):\n         result = []\n", "normalized_occurrence": 1}
