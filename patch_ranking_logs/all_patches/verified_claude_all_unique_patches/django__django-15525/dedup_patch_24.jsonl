{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..96cdd6c 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,8 +336,22 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        # First create an instance and resolve any foreign keys\n+        instance = Model()\n+        for field_name, field_value in data.items():\n+            field = Model._meta.get_field(field_name)\n+            if field.is_relation and hasattr(field.remote_field.model._default_manager, 'get_by_natural_key'):\n+                if isinstance(field_value, (list, tuple)):\n+                    try:\n+                        related_obj = field.remote_field.model._default_manager.db_manager(db).get_by_natural_key(*field_value)\n+                        setattr(instance, field_name, related_obj)\n+                    except field.remote_field.model.DoesNotExist:\n+                        pass\n+            else:\n+                setattr(instance, field_name, field_value)\n+        \n         try:\n+            natural_key = instance.natural_key()\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..083ddb8 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,8 +144,20 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n-        natural_key = Model(**data).natural_key()\n+        instance = Model()\n+        for field_name, field_value in data.items():\n+            field = Model._meta.get_field(field_name)\n+            if field.is_relation and hasattr(field.remote_field.model._default_manager, 'get_by_natural_key'):\n+                if isinstance(field_value, (list, tuple)):\n+                    try:\n+                        related_obj = field.remote_field.model._default_manager.db_manager(db).get_by_natural_key(*field_value)\n+                        setattr(instance, field_name, related_obj)\n+                    except field.remote_field.model.DoesNotExist:\n+                        pass\n+            else:\n+                setattr(instance, field_name, field_value)\n         try:\n+            natural_key = instance.natural_key()\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n         except Model.DoesNotExist:\n             pass\n", "normalized_occurrence": 1}
