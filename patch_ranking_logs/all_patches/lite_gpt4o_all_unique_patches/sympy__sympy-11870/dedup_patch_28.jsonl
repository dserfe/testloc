{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..99efa89 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -510,7 +510,8 @@ def trigsimp(expr, **opts):\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n \n-    return trigsimpfunc(expr)\n+    expr = trigsimpfunc(expr)\n+    return exptrigsimp(expr)\n \n \n def exptrigsimp(expr):\n@@ -528,7 +529,7 @@ def exptrigsimp(expr):\n     >>> exptrigsimp(cosh(z) - sinh(z))\n     exp(-z)\n     \"\"\"\n-    from sympy.simplify.fu import hyper_as_trig, TR2i\n+    from sympy.simplify.fu import hyper_as_trig, TR2i, TR22\n     from sympy.simplify.simplify import bottom_up\n \n     def exp_trig(e):\n@@ -538,7 +539,10 @@ def exptrigsimp(expr):\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n-        return min(*choices, key=count_ops)\n+        min_choice = min(*choices, key=count_ops)\n+        if min_choice.has(exp):\n+            min_choice = min_choice.rewrite(sin)\n+        return min_choice\n     newexpr = bottom_up(expr, exp_trig)\n \n     def f(rv):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..701ebe5 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -171,16 +171,20 @@ def trigsimp(expr, **opts):\n             return new\n         return trigsimp_groebner(new, **opts)\n     trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n-    return trigsimpfunc(expr)\n+    expr = trigsimpfunc(expr)\n+    return exptrigsimp(expr)\n def exptrigsimp(expr):\n-    from sympy.simplify.fu import hyper_as_trig, TR2i\n+    from sympy.simplify.fu import hyper_as_trig, TR2i, TR22\n     from sympy.simplify.simplify import bottom_up\n     def exp_trig(e):\n         choices = [e]\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n-        return min(*choices, key=count_ops)\n+        min_choice = min(*choices, key=count_ops)\n+        if min_choice.has(exp):\n+            min_choice = min_choice.rewrite(sin)\n+        return min_choice\n     newexpr = bottom_up(expr, exp_trig)\n     def f(rv):\n         if not rv.is_Mul:\n", "normalized_occurrence": 1}
