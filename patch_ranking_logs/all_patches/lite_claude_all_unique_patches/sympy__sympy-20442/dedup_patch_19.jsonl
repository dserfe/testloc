{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..5b9e5f5 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -16,6 +16,16 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     dimension_system = unit_system.get_dimension_system()\n \n     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    \n+    # Calculate the combined dimension of target units\n+    target_dim = Dimension(1)\n+    for unit in target_units:\n+        target_dim = target_dim * Dimension(unit_system.get_dimensional_expr(unit))\n+    \n+    # Check dimensional compatibility\n+    if expr_dim != target_dim:\n+        return None\n+\n     dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..01f5616 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -8,6 +8,11 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     from sympy import Matrix\n     dimension_system = unit_system.get_dimension_system()\n     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    target_dim = Dimension(1)\n+    for unit in target_units:\n+        target_dim = target_dim * Dimension(unit_system.get_dimensional_expr(unit))\n+    if expr_dim != target_dim:\n+        return None\n     dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n", "normalized_occurrence": 1}
