{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..124b9ea 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -256,6 +256,10 @@ class Product(ExprWithIntLimits):\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n         elif term.is_polynomial(k):\n+            # If the term contains exponential in k (like 2**k), don't treat it as polynomial\n+            if any(sub.is_Pow and sub.exp.has(k) for sub in term.atoms()):\n+                return None\n+                \n             poly = term.as_poly(k)\n \n             A = B = Q = S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..4cd3866 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -62,6 +62,8 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n         elif term.is_polynomial(k):\n+            if any((sub.is_Pow and sub.exp.has(k) for sub in term.atoms())):\n+                return None\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n             all_roots = roots(poly)\n", "normalized_occurrence": 1}
