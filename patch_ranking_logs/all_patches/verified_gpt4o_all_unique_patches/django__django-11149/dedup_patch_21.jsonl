{"model_name_or_path": "agentless", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..b23d2f6 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2047,8 +2047,14 @@ class InlineModelAdmin(BaseModelAdmin):\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n+        can_view = self.has_view_permission(request, obj) if request else True\n \n-        class DeleteProtectedModelForm(base_model_form):\n+        class ReadOnlyModelForm(base_model_form):\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                if not can_change and not can_add and can_view:\n+                    for field in self.fields.values():\n+                        field.disabled = True\n \n             def hand_clean_DELETE(self):\n                 \"\"\"\n@@ -2095,7 +2101,7 @@ class InlineModelAdmin(BaseModelAdmin):\n                     return False\n                 return super().has_changed()\n \n-        defaults['form'] = DeleteProtectedModelForm\n+        defaults['form'] = ReadOnlyModelForm if not can_change and not can_add and can_view else DeleteProtectedModelForm\n \n         if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n             defaults['fields'] = forms.ALL_FIELDS\n@@ -2159,4 +2165,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..174f52f 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1004,7 +1004,13 @@ class InlineModelAdmin(BaseModelAdmin):\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n-        class DeleteProtectedModelForm(base_model_form):\n+        can_view = self.has_view_permission(request, obj) if request else True\n+        class ReadOnlyModelForm(base_model_form):\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                if not can_change and (not can_add) and can_view:\n+                    for field in self.fields.values():\n+                        field.disabled = True\n             def hand_clean_DELETE(self):\n                 if self.cleaned_data.get(DELETION_FIELD_NAME, False):\n                     using = router.db_for_write(self._meta.model)\n@@ -1029,7 +1035,7 @@ class InlineModelAdmin(BaseModelAdmin):\n                 if not can_add and self.instance._state.adding:\n                     return False\n                 return super().has_changed()\n-        defaults['form'] = DeleteProtectedModelForm\n+        defaults['form'] = ReadOnlyModelForm if not can_change and (not can_add) and can_view else DeleteProtectedModelForm\n         if defaults['fields'] is None and (not modelform_defines_fields(defaults['form'])):\n             defaults['fields'] = forms.ALL_FIELDS\n         return inlineformset_factory(self.parent_model, self.model, **defaults)\n", "normalized_occurrence": 1}
