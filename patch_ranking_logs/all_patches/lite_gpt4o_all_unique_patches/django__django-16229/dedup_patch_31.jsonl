{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..b422f4d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -362,6 +362,13 @@ class BaseModelForm(BaseForm, AltersData):\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n         self._validate_unique = False\n+        # When dealing with inline forms and ArrayField, we do not want to show hidden initial values\n+        # Force show_hidden_initial=False for ArrayField\n+        if any(isinstance(f, ArrayField) for f in self.instance._meta.fields):\n+            show_hidden_initial = False\n+        else:\n+            show_hidden_initial = True\n+\n         super().__init__(\n             data,\n             files,\n@@ -374,6 +381,9 @@ class BaseModelForm(BaseForm, AltersData):\n             use_required_attribute=use_required_attribute,\n             renderer=renderer,\n         )\n+        for field_name, formfield in self.fields.items():\n+            if isinstance(formfield, ArrayField):\n+                formfield.show_hidden_initial = show_hidden_initial\n         for formfield in self.fields.values():\n             apply_limit_choices_to_to_formfield(formfield)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..b5318af 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -151,7 +151,14 @@ class BaseModelForm(BaseForm, AltersData):\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n+        if any((isinstance(f, ArrayField) for f in self.instance._meta.fields)):\n+            show_hidden_initial = False\n+        else:\n+            show_hidden_initial = True\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n+        for field_name, formfield in self.fields.items():\n+            if isinstance(formfield, ArrayField):\n+                formfield.show_hidden_initial = show_hidden_initial\n         for formfield in self.fields.values():\n             apply_limit_choices_to_to_formfield(formfield)\n     def _get_validation_exclusions(self):\n", "normalized_occurrence": 1}
