{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22871", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex cc65fc1..4cbd412 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -790,7 +790,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         # offset fmt are for the offset in the upper left of the\n         # or lower right of the axis.\n         offsetfmts = self.offset_formats\n-        show_offset = self.show_offset\n+        show_offset = self.show_offset or level == 1\n \n         # determine the level we will label at:\n         # mostly 0: years,  1: months,  2: days,\n@@ -841,7 +841,9 @@ class ConciseDateFormatter(ticker.Formatter):\n         if show_offset:\n             # set the offset string:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n-            if self._usetex:\n+            if level < 2:\n+                self.offset_string = tickdatetime[-1].strftime('%Y')\n+            elif self._usetex:\n                 self.offset_string = _wrap_in_tex(self.offset_string)\n         else:\n             self.offset_string = ''\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 6ad34f7..75d1a3d 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -194,7 +194,7 @@ class ConciseDateFormatter(ticker.Formatter):\n         fmts = self.formats\n         zerofmts = self.zero_formats\n         offsetfmts = self.offset_formats\n-        show_offset = self.show_offset\n+        show_offset = self.show_offset or level == 1\n         for level in range(5, -1, -1):\n             if len(np.unique(tickdate[:, level])) > 1:\n                 if level < 2:\n@@ -223,7 +223,9 @@ class ConciseDateFormatter(ticker.Formatter):\n                         labels[nn] = labels[nn][:-trailing_zeros].rstrip('.')\n         if show_offset:\n             self.offset_string = tickdatetime[-1].strftime(offsetfmts[level])\n-            if self._usetex:\n+            if level < 2:\n+                self.offset_string = tickdatetime[-1].strftime('%Y')\n+            elif self._usetex:\n                 self.offset_string = _wrap_in_tex(self.offset_string)\n         else:\n             self.offset_string = ''\n", "normalized_occurrence": 1}
