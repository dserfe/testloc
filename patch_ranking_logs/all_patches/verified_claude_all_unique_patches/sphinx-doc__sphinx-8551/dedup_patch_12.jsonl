{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..4faf0e4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -314,7 +314,11 @@ class PyField(PyXrefMixin, Field):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Make type fields use exact matching like explicit refs\n+        node = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if isinstance(node, addnodes.pending_xref):\n+            node['refspecific'] = True\n+        return node\n \n \n class PyGroupedField(PyXrefMixin, GroupedField):\n@@ -329,7 +333,11 @@ class PyTypedField(PyXrefMixin, TypedField):\n             # None is not a type, so use obj role instead.\n             rolename = 'obj'\n \n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        # Make type fields use exact matching like explicit refs\n+        node = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if isinstance(node, addnodes.pending_xref):\n+            node['refspecific'] = True\n+        return node\n \n \n class PyObject(ObjectDescription):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..6c7db58 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -209,14 +209,20 @@ class PyField(PyXrefMixin, Field):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n         if rolename == 'class' and target == 'None':\n             rolename = 'obj'\n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        node = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if isinstance(node, addnodes.pending_xref):\n+            node['refspecific'] = True\n+        return node\n class PyGroupedField(PyXrefMixin, GroupedField):\n     pass\n class PyTypedField(PyXrefMixin, TypedField):\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n         if rolename == 'class' and target == 'None':\n             rolename = 'obj'\n-        return super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        node = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if isinstance(node, addnodes.pending_xref):\n+            node['refspecific'] = True\n+        return node\n class PyObject(ObjectDescription):\n     option_spec = {'noindex': directives.flag, 'noindexentry': directives.flag, 'module': directives.unchanged, 'annotation': directives.unchanged}\n     doc_field_types = [PyTypedField('parameter', label=_('Parameters'), names=('param', 'parameter', 'arg', 'argument', 'keyword', 'kwarg', 'kwparam'), typerolename='class', typenames=('paramtype', 'type'), can_collapse=True), PyTypedField('variable', label=_('Variables'), rolename='obj', names=('var', 'ivar', 'cvar'), typerolename='class', typenames=('vartype',), can_collapse=True), PyGroupedField('exceptions', label=_('Raises'), rolename='exc', names=('raises', 'raise', 'exception', 'except'), can_collapse=True), Field('returnvalue', label=_('Returns'), has_arg=False, names=('returns', 'return')), PyField('returntype', label=_('Return type'), has_arg=False, names=('rtype',), bodyrolename='class')]\n", "normalized_occurrence": 1}
