{"model_name_or_path": "agentless", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..fc91318 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -115,7 +115,8 @@ class URLValidator(RegexValidator):\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                except ValueError as ve:  # for example, \"Invalid IPv6 URL\"\n+                    raise ValidationError(self.message, code=self.code, params={'value': value}) from ve\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n", "occurrence": 2, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..28a45f3 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -68,7 +68,8 @@ class URLValidator(RegexValidator):\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:\n+                except ValueError as ve:\n+                    raise ValidationError(self.message, code=self.code, params={'value': value}) from ve\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n                 try:\n                     netloc = punycode(netloc)\n", "normalized_occurrence": 2}
