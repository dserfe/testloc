{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..f6df288 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,10 +178,38 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n+            # Handle chained exceptions\n+            chain = []\n+            current = rep.longrepr\n+            while current is not None:\n+                chain_entry = {\n+                    \"reprcrash\": current.reprcrash.__dict__.copy(),\n+                    \"reprtraceback\": current.reprtraceback.__dict__.copy(),\n+                    \"sections\": current.sections,\n+                }\n+                \n+                # Process reprentries for the chained exception\n+                new_entries = []\n+                for entry in chain_entry[\"reprtraceback\"][\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                chain_entry[\"reprtraceback\"][\"reprentries\"] = new_entries\n+                chain.append(chain_entry)\n+                \n+                # Move to the next exception in the chain\n+                current = getattr(current, \"cause\", None) or getattr(current, \"context\", None)\n+            \n             return {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n+                \"chain\": chain[1:],  # Skip first one as it's already included in main report\n             }\n \n         d = self.__dict__.copy()\n@@ -250,6 +278,7 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+                # Create the main exception info\n                 exception_info = ReprExceptionInfo(\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n@@ -257,6 +286,24 @@ class BaseReport:\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n+\n+                # Reconstruct the exception chain\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    current = exception_info\n+                    for chained in reportdict[\"longrepr\"][\"chain\"]:\n+                        chain_exc = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**chained[\"reprtraceback\"]),\n+                            reprcrash=ReprFileLocation(**chained[\"reprcrash\"]),\n+                        )\n+                        for section in chained[\"sections\"]:\n+                            chain_exc.addsection(*section)\n+                            \n+                        if \"During handling of the above exception\" in str(chain_exc.reprcrash):\n+                            current.context = chain_exc\n+                        else:\n+                            current.cause = chain_exc\n+                        current = chain_exc\n+\n                 reportdict[\"longrepr\"] = exception_info\n \n         return cls(**reportdict)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..27c2e8e 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,21 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            chain = []\n+            current = rep.longrepr\n+            while current is not None:\n+                chain_entry = {'reprcrash': current.reprcrash.__dict__.copy(), 'reprtraceback': current.reprtraceback.__dict__.copy(), 'sections': current.sections}\n+                new_entries = []\n+                for entry in chain_entry['reprtraceback']['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                chain_entry['reprtraceback']['reprentries'] = new_entries\n+                chain.append(chain_entry)\n+                current = getattr(current, 'cause', None) or getattr(current, 'context', None)\n+            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, 'chain': chain[1:]}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -133,6 +147,17 @@ class BaseReport:\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n+                if 'chain' in reportdict['longrepr']:\n+                    current = exception_info\n+                    for chained in reportdict['longrepr']['chain']:\n+                        chain_exc = ReprExceptionInfo(reprtraceback=ReprTraceback(**chained['reprtraceback']), reprcrash=ReprFileLocation(**chained['reprcrash']))\n+                        for section in chained['sections']:\n+                            chain_exc.addsection(*section)\n+                        if 'During handling of the above exception' in str(chain_exc.reprcrash):\n+                            current.context = chain_exc\n+                        else:\n+                            current.cause = chain_exc\n+                        current = chain_exc\n                 reportdict['longrepr'] = exception_info\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n", "normalized_occurrence": 1}
