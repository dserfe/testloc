{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..571d14d 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -24,6 +24,18 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     if not canon_expr_units.issubset(set(canon_dim_units)):\n         return None\n \n+    # Check if dimensions are exactly equal\n+    expr_dim_dict = dim_dependencies\n+    target_dim_dict = {}\n+    for target_dim in target_dims:\n+        target_deps = dimension_system.get_dimensional_dependencies(target_dim, mark_dimensionless=True)\n+        for dim, power in target_deps.items():\n+            target_dim_dict[dim] = target_dim_dict.get(dim, 0) + power\n+\n+    # If dimensions don't match exactly, return None\n+    if expr_dim_dict != target_dim_dict:\n+        return None\n+\n     seen = set()\n     canon_dim_units = [i for i in canon_dim_units if not (i in seen or seen.add(i))]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..9f4e245 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -14,6 +14,14 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     canon_expr_units = {i for i in dim_dependencies}\n     if not canon_expr_units.issubset(set(canon_dim_units)):\n         return None\n+    expr_dim_dict = dim_dependencies\n+    target_dim_dict = {}\n+    for target_dim in target_dims:\n+        target_deps = dimension_system.get_dimensional_dependencies(target_dim, mark_dimensionless=True)\n+        for dim, power in target_deps.items():\n+            target_dim_dict[dim] = target_dim_dict.get(dim, 0) + power\n+    if expr_dim_dict != target_dim_dict:\n+        return None\n     seen = set()\n     canon_dim_units = [i for i in canon_dim_units if not (i in seen or seen.add(i))]\n     camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])\n", "normalized_occurrence": 1}
