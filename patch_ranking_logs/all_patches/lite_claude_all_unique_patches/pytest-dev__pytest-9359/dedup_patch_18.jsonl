{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..a7811c8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -940,6 +940,8 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 assertmsg = ast.Str(\"\")\n                 explanation = \"assert \" + explanation\n+            # Only include nodes from the current assertion line\n+            self.expl_stmts = [stmt for stmt in self.expl_stmts if hasattr(stmt, 'lineno') and stmt.lineno == assert_.lineno]\n             template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n             msg = self.pop_format_context(template)\n             fmt = self.helper(\"_format_explanation\", msg)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..7694551 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -501,6 +501,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 assertmsg = ast.Str('')\n                 explanation = 'assert ' + explanation\n+            self.expl_stmts = [stmt for stmt in self.expl_stmts if hasattr(stmt, 'lineno') and stmt.lineno == assert_.lineno]\n             template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n             msg = self.pop_format_context(template)\n             fmt = self.helper('_format_explanation', msg)\n", "normalized_occurrence": 1}
