{"model_name_or_path": "agentless", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..da7dc9c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -798,13 +798,13 @@ class Query(BaseExpression):\n         most recently created alias for the table (if one exists) is reused.\n         \"\"\"\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and alias_list and filtered_relation is None:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return alias, False\n \n         # Create a new alias for this table.\n-        if alias_list:\n+        if alias_list and filtered_relation is None:\n             alias = \"%s%d\" % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..fcae1d8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -426,11 +426,11 @@ class Query(BaseExpression):\n                 callback(target, model, values)\n     def table_alias(self, table_name, create=False, filtered_relation=None):\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and alias_list and (filtered_relation is None):\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n-        if alias_list:\n+        if alias_list and filtered_relation is None:\n             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n", "normalized_occurrence": 1}
