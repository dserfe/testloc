2025-08-25 02:48:36,275 - INFO - Creating container for astropy__astropy-8707...
2025-08-25 02:48:43,519 - INFO - Container for astropy__astropy-8707 created: 67f7aaeee2ca9d9c1debe5ddb7b190a9b8b071bc2e0afc58996251386f932aad
2025-08-25 02:48:52,605 - INFO - Container for astropy__astropy-8707 started: 67f7aaeee2ca9d9c1debe5ddb7b190a9b8b071bc2e0afc58996251386f932aad
2025-08-25 02:48:52,605 - INFO - Intermediate patch for astropy__astropy-8707 written to logs/run_evaluation/verified_claude_new/agentless_claude/astropy__astropy-8707/patch.diff, now applying to container...
2025-08-25 02:48:53,388 - INFO - >>>>> Applied Patch:
/tmp/patch.diff:50: trailing whitespace.
        
Checking patch astropy/io/fits/card.py...
Checking patch astropy/io/fits/header.py...
Applied patch astropy/io/fits/card.py cleanly.
Applied patch astropy/io/fits/header.py cleanly.
warning: 1 line adds whitespace errors.

2025-08-25 02:48:54,420 - INFO - Git diff before:
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d73..4f9a3994d 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,11 +547,18 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        Parameters
+        ----------
+        image : str or bytes
+            String or bytes containing the card image.
         """
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
 
         card = cls()
         card._image = _pad(image)
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52..221174f17 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,13 +329,13 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a string or bytes containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -347,6 +347,9 @@ class Header:
         header
             A new `Header` instance.
         """
+        
+        if isinstance(data, bytes):
+            data = data.decode('ascii')
 
         cards = []
2025-08-25 02:48:54,422 - INFO - Eval script for astropy__astropy-8707 written to logs/run_evaluation/verified_claude_new/agentless_claude/astropy__astropy-8707/eval.sh; copying to container...
2025-08-25 02:49:40,648 - INFO - Test runtime: 45.33 seconds
2025-08-25 02:49:40,650 - INFO - Test output for astropy__astropy-8707 written to logs/run_evaluation/verified_claude_new/agentless_claude/astropy__astropy-8707/test_output.txt
2025-08-25 02:49:41,332 - INFO - Git diff after:
diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d73..4f9a3994d 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,11 +547,18 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        Parameters
+        ----------
+        image : str or bytes
+            String or bytes containing the card image.
         """
+        if isinstance(image, bytes):
+            image = image.decode('ascii')
 
         card = cls()
         card._image = _pad(image)
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52..221174f17 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,13 +329,13 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a string or bytes containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -347,6 +347,9 @@ class Header:
         header
             A new `Header` instance.
         """
+        
+        if isinstance(data, bytes):
+            data = data.decode('ascii')
 
         cards = []
2025-08-25 02:49:41,334 - INFO - Grading answer for astropy__astropy-8707...
2025-08-25 02:49:41,608 - INFO - report: {'astropy__astropy-8707': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_card_from_bytes']}, 'PASS_TO_PASS': {'success': ['astropy/io/fits/tests/test_header.py::test_shallow_copy', 'astropy/io/fits/tests/test_header.py::test_init_with_header', 'astropy/io/fits/tests/test_header.py::test_init_with_dict', 'astropy/io/fits/tests/test_header.py::test_init_with_ordereddict'], 'failure': ['astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_rename_keyword', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_card_constructor_default_args', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_string_value_card', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_boolean_value_card', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_long_integer_value_card', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_floating_point_value_card', 'astropy/io/fits/tests/test_header.py::TestHeaderFunctions::test_complex_value_card']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for astropy__astropy-8707: resolved: False
2025-08-25 02:49:41,612 - INFO - Attempting to stop container sweb.eval.astropy__astropy-8707.verified_claude_new...
2025-08-25 02:49:57,177 - INFO - Attempting to remove container sweb.eval.astropy__astropy-8707.verified_claude_new...
2025-08-25 02:49:57,590 - INFO - Container sweb.eval.astropy__astropy-8707.verified_claude_new removed.
2025-08-25 02:49:57,590 - INFO - Attempting to remove image swebench/sweb.eval.x86_64.astropy_1776_astropy-8707:latest...
2025-08-25 02:49:58,857 - INFO - Image swebench/sweb.eval.x86_64.astropy_1776_astropy-8707:latest removed.
