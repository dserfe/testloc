{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 79762f1..5283dfe 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -581,7 +581,11 @@ class ScalarMappable:\n         \"\"\"\n         in_init = self.cmap is None\n \n-        self.cmap = _ensure_cmap(cmap)\n+        cmap_obj = _ensure_cmap(cmap)\n+        # If we got a string name, ensure the colormap's internal name matches the registered name\n+        if isinstance(cmap, str) and cmap in _colormaps:\n+            cmap_obj.name = cmap\n+        self.cmap = cmap_obj\n         if not in_init:\n             self.changed()  # Things are not set up properly yet.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex aa7fbd0..027b380 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -168,7 +168,10 @@ class ScalarMappable:\n         return 1.0\n     def set_cmap(self, cmap):\n         in_init = self.cmap is None\n-        self.cmap = _ensure_cmap(cmap)\n+        cmap_obj = _ensure_cmap(cmap)\n+        if isinstance(cmap, str) and cmap in _colormaps:\n+            cmap_obj.name = cmap\n+        self.cmap = cmap_obj\n         if not in_init:\n             self.changed()\n     @property\n", "normalized_occurrence": 1}
