{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/_layoutgrid.py b/lib/matplotlib/_layoutgrid.py\nindex c834b91..ff1b16f 100644\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n@@ -223,8 +223,12 @@ class LayoutGrid:\n                  self.margins['leftcb'][i])\n             c = (w == w0 * self.width_ratios[i])\n             self.solver.addConstraint(c | 'strong')\n-            # constrain the grid cells to be directly next to each other.\n-            c = (self.rights[i - 1] == self.lefts[i])\n+            # Add spacing between columns based on wspace\n+            if self.parent.gridspec.wspace is not None:\n+                w_space = w0 * self.parent.gridspec.wspace\n+                c = (self.lefts[i] == self.rights[i - 1] + w_space)\n+            else:\n+                c = (self.lefts[i] == self.rights[i - 1])\n             self.solver.addConstraint(c | 'strong')\n \n         # constrain heights:\n@@ -240,8 +244,12 @@ class LayoutGrid:\n                  self.margins['bottomcb'][i])\n             c = (h == h0 * self.height_ratios[i])\n             self.solver.addConstraint(c | 'strong')\n-            # constrain the grid cells to be directly above each other.\n-            c = (self.bottoms[i - 1] == self.tops[i])\n+            # Add spacing between rows based on hspace\n+            if self.parent.gridspec.hspace is not None:\n+                h_space = h0 * self.parent.gridspec.hspace\n+                c = (self.tops[i] == self.bottoms[i - 1] - h_space)\n+            else:\n+                c = (self.tops[i] == self.bottoms[i - 1])\n             self.solver.addConstraint(c | 'strong')\n \n     # Margin editing:  The margins are variable and meant to\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/_layoutgrid.py b/lib/matplotlib/_layoutgrid.py\nindex 08c1909..f868ea4 100644\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n@@ -110,7 +110,11 @@ class LayoutGrid:\n             w = w - self.lefts[i] - self.margins['left'][i] - self.margins['leftcb'][i]\n             c = w == w0 * self.width_ratios[i]\n             self.solver.addConstraint(c | 'strong')\n-            c = self.rights[i - 1] == self.lefts[i]\n+            if self.parent.gridspec.wspace is not None:\n+                w_space = w0 * self.parent.gridspec.wspace\n+                c = self.lefts[i] == self.rights[i - 1] + w_space\n+            else:\n+                c = self.lefts[i] == self.rights[i - 1]\n             self.solver.addConstraint(c | 'strong')\n         h = self.tops[0] - self.margins['top'][0] - self.margins['topcb'][0]\n         h = h - self.bottoms[0] - self.margins['bottom'][0] - self.margins['bottomcb'][0]\n@@ -120,7 +124,11 @@ class LayoutGrid:\n             h = h - self.bottoms[i] - self.margins['bottom'][i] - self.margins['bottomcb'][i]\n             c = h == h0 * self.height_ratios[i]\n             self.solver.addConstraint(c | 'strong')\n-            c = self.bottoms[i - 1] == self.tops[i]\n+            if self.parent.gridspec.hspace is not None:\n+                h_space = h0 * self.parent.gridspec.hspace\n+                c = self.tops[i] == self.bottoms[i - 1] - h_space\n+            else:\n+                c = self.tops[i] == self.bottoms[i - 1]\n             self.solver.addConstraint(c | 'strong')\n     def edit_margin(self, todo, size, cell):\n         self.solver.suggestValue(self.margins[todo][cell], size)\n", "normalized_occurrence": 1}
