{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..63cb2e7 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -96,17 +96,22 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n-                arg = arguments.setdefault(parts[1], {})\n+                name = parts[1]\n+                # Remove asterisks for storage but keep original name\n+                storage_name = name.replace('*', '')\n+                arg = arguments.setdefault(storage_name, {'orig_name': name})\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n                 name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n+                storage_name = name.replace('*', '')\n+                arg = arguments.setdefault(storage_name, {'orig_name': name})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n+            storage_name = name.replace('*', '')\n+            arg = arguments.setdefault(storage_name, {'orig_name': name})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n@@ -115,15 +120,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n-        arg = arguments.get(name, {})\n+        storage_name = name.replace('*', '')\n+        arg = arguments.get(storage_name, {'orig_name': name})\n+        display_name = arg.get('orig_name', name)\n+        \n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..454a716 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -69,31 +69,37 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         parts = re.split(' +', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n-                arg = arguments.setdefault(parts[1], {})\n+                name = parts[1]\n+                storage_name = name.replace('*', '')\n+                arg = arguments.setdefault(storage_name, {'orig_name': name})\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n+                storage_name = name.replace('*', '')\n+                arg = arguments.setdefault(storage_name, {'orig_name': name})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n+            storage_name = name.replace('*', '')\n+            arg = arguments.setdefault(storage_name, {'orig_name': name})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n-        arg = arguments.get(name, {})\n+        storage_name = name.replace('*', '')\n+        arg = arguments.get(storage_name, {'orig_name': name})\n+        display_name = arg.get('orig_name', name)\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n", "normalized_occurrence": 1}
