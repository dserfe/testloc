{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..16df5c1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -555,6 +555,10 @@ class Documenter:\n         When it returns None value, autodoc-process-docstring will not be called for this\n         object.\n         \"\"\"\n+        if self.objtype == 'alias':\n+            # Handle type alias docstrings\n+            return [self.object.__doc__.splitlines()]\n+\n         if ignore is not None:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\"\n                           % self.__class__.__name__,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7792226..8ef9c52 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -284,6 +284,8 @@ class Documenter:\n         if self.objpath:\n             self.add_line('   :module: %s' % self.modname, sourcename)\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n+        if self.objtype == 'alias':\n+            return [self.object.__doc__.splitlines()]\n         if ignore is not None:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx50Warning, stacklevel=2)\n         docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n", "normalized_occurrence": 1}
