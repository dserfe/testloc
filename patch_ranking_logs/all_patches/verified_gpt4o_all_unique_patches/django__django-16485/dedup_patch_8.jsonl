{"model_name_or_path": "agentless", "instance_id": "django__django-16485", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex edd25c0..5c5d329 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -183,7 +183,9 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    # Ensure precision is within the valid range\n+    MAX_PREC = Context().prec\n+    prec = min(abs(p) + units + 1, MAX_PREC)\n \n     # Avoid conversion to scientific notation by accessing `sign`, `digits`,\n     # and `exponent` from Decimal.as_tuple() directly.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 7f9a709..31449cd 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -87,7 +87,8 @@ def floatformat(text, arg=-1):\n     tupl = d.as_tuple()\n     units = len(tupl[1])\n     units += -tupl[2] if m else tupl[2]\n-    prec = abs(p) + units + 1\n+    MAX_PREC = Context().prec\n+    prec = min(abs(p) + units + 1, MAX_PREC)\n     rounded_d = d.quantize(exp, ROUND_HALF_UP, Context(prec=prec))\n     sign, digits, exponent = rounded_d.as_tuple()\n     digits = [str(digit) for digit in reversed(digits)]\n", "normalized_occurrence": 1}
