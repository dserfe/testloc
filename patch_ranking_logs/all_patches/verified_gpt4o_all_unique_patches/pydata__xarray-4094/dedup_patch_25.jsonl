{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..751a6ff 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1477,6 +1477,9 @@ class Variable(\n         new_data = reordered.data.reshape(new_shape)\n         new_dims = reordered.dims[: len(other_dims)] + new_dim_names\n \n+        if len(new_dims) == 1:\n+            # Ensure that new_dims is a tuple for single-dimension variables\n+            new_dims = (new_dims[0],)\n         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)\n \n     def unstack(self, dimensions=None, **dimensions_kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..339d322 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1121,6 +1121,8 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         new_shape = reordered.shape[:len(other_dims)] + new_dim_sizes\n         new_data = reordered.data.reshape(new_shape)\n         new_dims = reordered.dims[:len(other_dims)] + new_dim_names\n+        if len(new_dims) == 1:\n+            new_dims = (new_dims[0],)\n         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)\n \n     def unstack(self, dimensions=None, **dimensions_kwargs):\n", "normalized_occurrence": 1}
