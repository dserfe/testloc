{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 01e5980..176dff0 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -46,8 +46,23 @@ class LagLeadFunction(Func):\n \n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n+        # If output_field is explicitly set, use that\n+        if hasattr(self, '_output_field'):\n+            return self._output_field\n         return sources[0].output_field\n \n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        # For DecimalField, cast the whole expression to NUMERIC\n+        if self.output_field.get_internal_type() == 'DecimalField':\n+            from django.db.models import DecimalField\n+            clone = self.copy()\n+            clone.set_source_expressions([*self.get_source_expressions()])\n+            return compiler.process(\n+                functions.Cast(clone, output_field=DecimalField()),\n+                **extra_context,\n+            )\n+        return super().as_sqlite(compiler, connection, **extra_context)\n+\n \n class Lag(LagLeadFunction):\n     function = 'LAG'\n", "normalized_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 88926d4..f6945c1 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -26,7 +26,16 @@ class LagLeadFunction(Func):\n         super().__init__(*args, **extra)\n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n+        if hasattr(self, '_output_field'):\n+            return self._output_field\n         return sources[0].output_field\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        if self.output_field.get_internal_type() == 'DecimalField':\n+            from django.db.models import DecimalField\n+            clone = self.copy()\n+            clone.set_source_expressions([*self.get_source_expressions()])\n+            return compiler.process(functions.Cast(clone, output_field=DecimalField()), **extra_context)\n+        return super().as_sqlite(compiler, connection, **extra_context)\n class Lag(LagLeadFunction):\n     function = 'LAG'\n class LastValue(Func):\n", "normalized_occurrence": 1}
