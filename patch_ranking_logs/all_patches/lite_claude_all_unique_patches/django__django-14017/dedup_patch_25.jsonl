{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..c24a114 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -16,6 +16,7 @@ from django.utils import tree\n # PathInfo is used when converting lookups (fk__somecol). The contents\n # describe the relation in Model terms (model Options and Fields for both\n # sides of the relation. The join_field is the field backing the relation.\n+from django.db.models.expressions import Exists\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n \n \n@@ -40,17 +41,18 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n-        if not other:\n-            _, args, kwargs = self.deconstruct()\n-            return type(self)(*args, **kwargs)\n-        # Or if this Q is empty, ignore it and just use `other`.\n-        elif not self:\n-            _, args, kwargs = other.deconstruct()\n-            return type(other)(*args, **kwargs)\n+        if isinstance(other, Q):\n+            if not other:\n+                _, args, kwargs = self.deconstruct()\n+                return type(self)(*args, **kwargs)\n+            # Or if this Q is empty, ignore it and just use `other`.\n+            elif not self:\n+                _, args, kwargs = other.deconstruct()\n+                return type(other)(*args, **kwargs)\n \n         obj = type(self)()\n         obj.connector = conn\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..452bc32 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -4,6 +4,7 @@ from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db.models.constants import LOOKUP_SEP\n from django.utils import tree\n+from django.db.models.expressions import Exists\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n def subclasses(cls):\n     yield cls\n@@ -17,14 +18,15 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n-        if not other:\n-            _, args, kwargs = self.deconstruct()\n-            return type(self)(*args, **kwargs)\n-        elif not self:\n-            _, args, kwargs = other.deconstruct()\n-            return type(other)(*args, **kwargs)\n+        if isinstance(other, Q):\n+            if not other:\n+                _, args, kwargs = self.deconstruct()\n+                return type(self)(*args, **kwargs)\n+            elif not self:\n+                _, args, kwargs = other.deconstruct()\n+                return type(other)(*args, **kwargs)\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n", "normalized_occurrence": 1}
