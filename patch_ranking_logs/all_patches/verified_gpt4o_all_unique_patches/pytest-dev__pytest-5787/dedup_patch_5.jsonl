{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..1ba610d 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,7 +408,42 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple):\n+        return longrepr\n+    elif isinstance(longrepr, ExceptionInfo):\n+        chain = []\n+        current = longrepr\n+        while current:\n+            chain.append({\n+                \"repr\": current._getreprcrash(),\n+                \"type\": current.type,\n+                \"value\": current.value,\n+            })\n+            current = current._cause or current._context\n+        return {\"chain\": chain}\n+    return str(longrepr)\n+\n+def deserialize_longrepr(data):\n+    if isinstance(data, tuple):\n+        return data\n+    elif isinstance(data, dict) and \"chain\" in data:\n+        chain = []\n+        for item in data[\"chain\"]:\n+            excinfo = ExceptionInfo()\n+            excinfo._reprcrash = item[\"repr\"]\n+            excinfo.type = item[\"type\"]\n+            excinfo.value = item[\"value\"]\n+            chain.append(excinfo)\n+        return chain\n+    return data\n+\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        data[\"longrepr\"] = serialize_longrepr(report.longrepr)\n+        return data\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n@@ -416,6 +451,17 @@ def pytest_report_to_serializable(report):\n \n \n def pytest_report_from_serializable(data):\n+    if \"_report_type\" in data:\n+        if data[\"_report_type\"] == \"TestReport\":\n+            report = TestReport._from_json(data)\n+        elif data[\"_report_type\"] == \"CollectReport\":\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(\n+                data[\"_report_type\"]\n+            )\n+        report.longrepr = deserialize_longrepr(data[\"longrepr\"])\n+        return report\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n             return TestReport._from_json(data)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..32991e7 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,12 +205,50 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple):\n+        return longrepr\n+    elif isinstance(longrepr, ExceptionInfo):\n+        chain = []\n+        current = longrepr\n+        while current:\n+            chain.append({'repr': current._getreprcrash(), 'type': current.type, 'value': current.value})\n+            current = current._cause or current._context\n+        return {'chain': chain}\n+    return str(longrepr)\n+def deserialize_longrepr(data):\n+    if isinstance(data, tuple):\n+        return data\n+    elif isinstance(data, dict) and 'chain' in data:\n+        chain = []\n+        for item in data['chain']:\n+            excinfo = ExceptionInfo()\n+            excinfo._reprcrash = item['repr']\n+            excinfo.type = item['type']\n+            excinfo.value = item['value']\n+            chain.append(excinfo)\n+        return chain\n+    return data\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        data['longrepr'] = serialize_longrepr(report.longrepr)\n+        return data\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n         return data\n def pytest_report_from_serializable(data):\n+    if '_report_type' in data:\n+        if data['_report_type'] == 'TestReport':\n+            report = TestReport._from_json(data)\n+        elif data['_report_type'] == 'CollectReport':\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        report.longrepr = deserialize_longrepr(data['longrepr'])\n+        return report\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n             return TestReport._from_json(data)\n", "normalized_occurrence": 1}
