{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..e44ed08 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -864,12 +864,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n \n                 transformer_names = [\n                     t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                    if not _is_empty_column_selection(t[2])\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+                feature_names_outs = [X.columns for X in Xs if X.shape[1] != 0]\n+                if transformer_names and feature_names_outs:\n+                    names_out = self._add_prefix_for_feature_names_out(\n+                        list(zip(transformer_names, feature_names_outs))\n+                    )\n+                    output.columns = names_out\n                 return output\n \n             return np.hstack(Xs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..91799e5 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,10 +257,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n-                output.columns = names_out\n+                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True) if not _is_empty_column_selection(t[2])]\n+                feature_names_outs = [X.columns for X in Xs if X.shape[1] != 0]\n+                if transformer_names and feature_names_outs:\n+                    names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                    output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n     def _sk_visual_block_(self):\n", "normalized_occurrence": 1}
