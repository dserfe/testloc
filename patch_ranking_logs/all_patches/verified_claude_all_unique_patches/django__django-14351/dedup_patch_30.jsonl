{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..b87d905 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1278,6 +1278,12 @@ class Query(BaseExpression):\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n+        # For __in lookups with a queryset, ensure we only select the primary key\n+        if (len(lookups) == 1 and lookups[0] == 'in' and \n+            isinstance(value, Query) and not value.has_select_fields):\n+            value.clear_select_clause()\n+            value.add_fields([value.model._meta.pk.name], True)\n+\n         if check_filterable:\n             self.check_filterable(value)\n \n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..23a9da4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -688,6 +688,9 @@ class Query(BaseExpression):\n         pre_joins = self.alias_refcount.copy()\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n+        if len(lookups) == 1 and lookups[0] == 'in' and isinstance(value, Query) and (not value.has_select_fields):\n+            value.clear_select_clause()\n+            value.add_fields([value.model._meta.pk.name], True)\n         if check_filterable:\n             self.check_filterable(value)\n         clause = self.where_class()\n", "normalized_occurrence": 1}
