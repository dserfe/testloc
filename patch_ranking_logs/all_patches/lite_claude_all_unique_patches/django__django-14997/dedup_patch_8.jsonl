{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..5952ea9 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -236,7 +236,29 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 if delete_field.name not in index.fields\n             ]\n \n-        constraints = list(model._meta.constraints)\n+        # For SQLite, convert F() expressions in unique constraints to simple field references\n+        constraints = []\n+        for constraint in model._meta.constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                # Convert F() expressions to field names for SQLite\n+                fields = []\n+                expressions = []\n+                for expr in getattr(constraint, 'expressions', []):\n+                    if isinstance(expr, F):\n+                        fields.append(expr.name)\n+                    else:\n+                        expressions.append(expr)\n+                if fields or expressions:\n+                    constraint = UniqueConstraint(\n+                        *fields,\n+                        *expressions,\n+                        name=constraint.name,\n+                        condition=constraint.condition,\n+                        deferrable=constraint.deferrable,\n+                        include=constraint.include,\n+                        opclasses=constraint.opclasses,\n+                    )\n+            constraints.append(constraint)\n \n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..00ceabb 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -128,7 +128,19 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         indexes = model._meta.indexes\n         if delete_field:\n             indexes = [index for index in indexes if delete_field.name not in index.fields]\n-        constraints = list(model._meta.constraints)\n+        constraints = []\n+        for constraint in model._meta.constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                fields = []\n+                expressions = []\n+                for expr in getattr(constraint, 'expressions', []):\n+                    if isinstance(expr, F):\n+                        fields.append(expr.name)\n+                    else:\n+                        expressions.append(expr)\n+                if fields or expressions:\n+                    constraint = UniqueConstraint(*fields, *expressions, name=constraint.name, condition=constraint.condition, deferrable=constraint.deferrable, include=constraint.include, opclasses=constraint.opclasses)\n+            constraints.append(constraint)\n         body_copy = copy.deepcopy(body)\n         meta_contents = {'app_label': model._meta.app_label, 'db_table': model._meta.db_table, 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n", "normalized_occurrence": 1}
