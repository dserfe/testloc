{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..229e3c4 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -15,6 +16,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     )\n \n     sql_delete_sequence = \"DROP SEQUENCE IF EXISTS %(sequence)s CASCADE\"\n+    \n+    # Custom SQL to drop a unique constraint by name\n+    sql_delete_unique = \"ALTER TABLE %(table)s DROP CONSTRAINT IF EXISTS %(name)s\"\n \n     sql_create_index = (\n         \"CREATE INDEX %(name)s ON %(table)s%(using)s \"\n@@ -253,6 +257,13 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def remove_index(self, model, index, concurrently=False):\n         self.execute(index.remove_sql(model, self, concurrently=concurrently))\n \n+    def _delete_unique_constraint(self, model, constraint_name):\n+        sql = self.sql_delete_unique % {\n+            \"table\": self.quote_name(model._meta.db_table),\n+            \"name\": self.quote_name(constraint_name),\n+        }\n+        self.execute(sql)\n+\n     def _delete_index_sql(self, model, name, sql=None, concurrently=False):\n         sql = (\n             self.sql_delete_index_concurrently\n@@ -296,4 +307,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n+    sql_delete_unique = 'ALTER TABLE %(table)s DROP CONSTRAINT IF EXISTS %(name)s'\n+    def _delete_unique_constraint(self, model, constraint_name):\n+        sql = self.sql_delete_unique % {'table': self.quote_name(model._meta.db_table), 'name': self.quote_name(constraint_name)}\n+        self.execute(sql)", "normalized_occurrence": 1}
