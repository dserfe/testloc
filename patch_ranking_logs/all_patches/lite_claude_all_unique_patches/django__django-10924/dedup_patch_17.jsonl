{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f5823d9..cf281d2 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1672,8 +1672,20 @@ class FilePathField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_allowing_files_or_folders(**kwargs),\n+            *self._check_path(**kwargs),\n         ]\n \n+    def _check_path(self, **kwargs):\n+        if not callable(self.path) and not isinstance(self.path, str):\n+            return [\n+                checks.Error(\n+                    \"'path' must be a string or callable.\",\n+                    obj=self,\n+                    id='fields.E141',\n+                )\n+            ]\n+        return []\n+\n     def _check_allowing_files_or_folders(self, **kwargs):\n         if not self.allow_files and not self.allow_folders:\n             return [\n@@ -1708,8 +1720,9 @@ class FilePathField(Field):\n         return str(value)\n \n     def formfield(self, **kwargs):\n+        path = self.path() if callable(self.path) else self.path\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': path,\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 285706a..1864fc5 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -849,7 +849,11 @@ class FilePathField(Field):\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_allowing_files_or_folders(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_allowing_files_or_folders(**kwargs), *self._check_path(**kwargs)]\n+    def _check_path(self, **kwargs):\n+        if not callable(self.path) and (not isinstance(self.path, str)):\n+            return [checks.Error(\"'path' must be a string or callable.\", obj=self, id='fields.E141')]\n+        return []\n     def _check_allowing_files_or_folders(self, **kwargs):\n         if not self.allow_files and (not self.allow_folders):\n             return [checks.Error(\"FilePathFields must have either 'allow_files' or 'allow_folders' set to True.\", obj=self, id='fields.E140')]\n@@ -875,7 +879,8 @@ class FilePathField(Field):\n             return None\n         return str(value)\n     def formfield(self, **kwargs):\n-        return super().formfield(**{'path': self.path, 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n+        path = self.path() if callable(self.path) else self.path\n+        return super().formfield(**{'path': path, 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n     def get_internal_type(self):\n         return 'FilePathField'\n class FloatField(Field):\n", "normalized_occurrence": 1}
