{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..342552c 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -898,8 +898,26 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            # Try to get an attribute or property from the model\n             try:\n-                field = getattr(obj.model, item)\n+                attr = getattr(obj.model, item)\n+                # Verify the attribute is either callable or a property\n+                if not (callable(attr) or isinstance(attr, property)):\n+                    return [\n+                        checks.Error(\n+                            \"The value of '%s' refers to '%s', which is not a \"\n+                            \"callable, a property, an attribute of '%s', or a field on '%s'.\"\n+                            % (\n+                                label,\n+                                item,\n+                                obj.__class__.__name__,\n+                                obj.model._meta.label,\n+                            ),\n+                            obj=obj.__class__,\n+                            id=\"admin.E108\",\n+                        )\n+                    ]\n+                return []\n             except AttributeError:\n                 return [\n                     checks.Error(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..a191f16 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -341,7 +341,10 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n             try:\n-                field = getattr(obj.model, item)\n+                attr = getattr(obj.model, item)\n+                if not (callable(attr) or isinstance(attr, property)):\n+                    return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, a property, an attribute of '%s', or a field on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n+                return []\n             except AttributeError:\n                 return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n         if isinstance(field, models.ManyToManyField) or (getattr(field, 'rel', None) and field.rel.field.many_to_one):\n", "normalized_occurrence": 1}
