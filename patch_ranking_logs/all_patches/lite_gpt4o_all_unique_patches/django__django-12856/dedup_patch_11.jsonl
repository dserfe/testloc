{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..4a8f5a6 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -80,6 +80,10 @@ class UniqueConstraint(BaseConstraint):\n     def __init__(self, *, fields, name, condition=None, deferrable=None):\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n+        # Check if fields exist in the model\n+        for field_name in fields:\n+            if not hasattr(model, field_name):\n+                raise ValueError(f\"The field '{field_name}' does not exist in the model.\")\n         if not isinstance(condition, (type(None), Q)):\n             raise ValueError('UniqueConstraint.condition must be a Q instance.')\n         if condition and deferrable:\n@@ -150,4 +154,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 76d46f4..9c9dc86 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -55,6 +55,9 @@ class UniqueConstraint(BaseConstraint):\n     def __init__(self, *, fields, name, condition=None, deferrable=None):\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n+        for field_name in fields:\n+            if not hasattr(model, field_name):\n+                raise ValueError(f\"The field '{field_name}' does not exist in the model.\")\n         if not isinstance(condition, (type(None), Q)):\n             raise ValueError('UniqueConstraint.condition must be a Q instance.')\n         if condition and deferrable:\n", "normalized_occurrence": 1}
