{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py\nindex 496df38..c069377 100644\n--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n@@ -69,4 +69,18 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):\n     are sliced.\n     \"\"\"\n \n-    pass\n+    def _propagate_mask(self, operand, handle_mask):\n+        if self.mask is None:\n+            if operand.mask is None:\n+                return None\n+            else:\n+                return operand.mask\n+        elif operand.mask is None:\n+            return self.mask\n+        else:\n+            return handle_mask(self.mask, operand.mask)\n+\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result_data = self.data * operand\n+        result_mask = self._propagate_mask(operand, handle_mask)\n+        return NDDataRef(result_data, mask=result_mask)\n", "occurrence": 1, "normalized_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _propagate_mask(self, operand, handle_mask):\n+        if self.mask is None:\n+            if operand.mask is None:\n+                return None\n+            else:\n+                return operand.mask\n+        elif operand.mask is None:\n+            return self.mask\n+        else:\n+            return handle_mask(self.mask, operand.mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result_data = self.data * operand\n+        result_mask = self._propagate_mask(operand, handle_mask)\n+        return NDDataRef(result_data, mask=result_mask)", "normalized_occurrence": 1}
