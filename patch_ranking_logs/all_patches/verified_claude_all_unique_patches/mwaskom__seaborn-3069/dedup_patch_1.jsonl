{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 5b43615..4b1ecc3 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1638,12 +1638,17 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    scale = p._scales[axis_key]\n+                    if isinstance(scale, Nominal) or isinstance(a, str):\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(scale, Nominal) or isinstance(b, str):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                    \n+                    # Suppress grid for Nominal scales\n+                    if isinstance(p._scales[axis_key], Nominal):\n+                        ax.grid(False, axis=axis)\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n-        set_layout_engine(self._figure, layout_engine)\n+        set_layout_engine(self._figure, layout_engine)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 860ca1c..5d65709 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -754,11 +754,14 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    scale = p._scales[axis_key]\n+                    if isinstance(scale, Nominal) or isinstance(a, str):\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(scale, Nominal) or isinstance(b, str):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f'{axis}lim': (lo, hi)})\n+                    if isinstance(p._scales[axis_key], Nominal):\n+                        ax.grid(False, axis=axis)\n         engine_default = None if p._target is not None else 'tight'\n         layout_engine = p._layout_spec.get('engine', engine_default)\n         set_layout_engine(self._figure, layout_engine)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
