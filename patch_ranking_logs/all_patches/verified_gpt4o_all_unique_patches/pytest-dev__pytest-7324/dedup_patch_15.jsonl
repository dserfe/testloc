{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..7ee5aed 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -23,6 +23,10 @@ if TYPE_CHECKING:\n \n \n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    if value in {\"None\", \"True\", \"False\"}:\n+        raise argparse.ArgumentTypeError(\n+            \"{!r} is not a valid module or class name\".format(value)\n+        )\n     \"\"\"Validate syntax of --pdbcls option.\"\"\"\n     try:\n         modname, classname = value.split(\":\")\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..0c4c8a5 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -18,6 +18,9 @@ if TYPE_CHECKING:\n     from _pytest.capture import CaptureManager\n     from _pytest.runner import CallInfo\n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    if value in {'None', 'True', 'False'}:\n+        raise argparse.ArgumentTypeError('{!r} is not a valid module or class name'.format(value))\n+    'Validate syntax of --pdbcls option.'\n     try:\n         modname, classname = value.split(':')\n     except ValueError:\n", "normalized_occurrence": 1}
