{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..18e63bb 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,13 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if the local reference exists in the environment\n+                refs = self.env.get_doctree(docname).traverse(nodes.reference)\n+                for ref in refs:\n+                    if 'refname' in ref and ref['refname'] == uri:\n+                        if 'refid' in ref:  # Reference exists\n+                            return 'working', '', 0\n+                return 'broken', 'Reference not found', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -267,10 +273,7 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n+        # Remove 'local' status handling since we now check local links as working/broken\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..6d769eb 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,12 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                refs = self.env.get_doctree(docname).traverse(nodes.reference)\n+                for ref in refs:\n+                    if 'refname' in ref and ref['refname'] == uri:\n+                        if 'refid' in ref:\n+                            return ('working', '', 0)\n+                return ('broken', 'Reference not found', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n@@ -178,10 +183,6 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n", "normalized_occurrence": 1}
