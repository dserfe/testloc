{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..22bfa19 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -32,10 +32,53 @@ if False:\n     from sphinx.environment import BuildEnvironment\n \n \n+class KbdRole(SphinxRole):\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        # Handle single keystroke with separator characters\n+        if self.text in ('-', '+', '^'):\n+            node = nodes.literal(self.rawtext, self.text, classes=['kbd'])\n+            return [node], []\n+            \n+        # Split only on actual separators (when not escaped and between valid keystrokes)\n+        parts = []\n+        current = ''\n+        i = 0\n+        while i < len(self.text):\n+            if i > 0 and self.text[i] in ('-', '+', '^'):\n+                # Check if it's a separator (not at start/end, has non-empty keystrokes around it)\n+                if current and i < len(self.text) - 1:\n+                    parts.append(current)\n+                    parts.append(self.text[i])\n+                    current = ''\n+                else:\n+                    current += self.text[i]\n+            else:\n+                current += self.text[i]\n+            i += 1\n+        if current:\n+            parts.append(current)\n+\n+        if len(parts) == 1:\n+            # Single keystroke\n+            node = nodes.literal(self.rawtext, parts[0], classes=['kbd'])\n+            return [node], []\n+        else:\n+            # Compound keystroke\n+            node = nodes.literal(self.rawtext, '', classes=['kbd'])\n+            for i, part in enumerate(parts):\n+                if part in ('-', '+', '^'):\n+                    # Add separator\n+                    node += nodes.Text(part, part)\n+                else:\n+                    # Add keystroke\n+                    child = nodes.literal('', part, classes=['kbd'])\n+                    node += child\n+            return [node], []\n+\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': KbdRole,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+class KbdRole(SphinxRole):\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        if self.text in ('-', '+', '^'):\n+            node = nodes.literal(self.rawtext, self.text, classes=['kbd'])\n+            return ([node], [])\n+        parts = []\n+        current = ''\n+        i = 0\n+        while i < len(self.text):\n+            if i > 0 and self.text[i] in ('-', '+', '^'):\n+                if current and i < len(self.text) - 1:\n+                    parts.append(current)\n+                    parts.append(self.text[i])\n+                    current = ''\n+                else:\n+                    current += self.text[i]\n+            else:\n+                current += self.text[i]\n+            i += 1\n+        if current:\n+            parts.append(current)\n+        if len(parts) == 1:\n+            node = nodes.literal(self.rawtext, parts[0], classes=['kbd'])\n+            return ([node], [])\n+        else:\n+            node = nodes.literal(self.rawtext, '', classes=['kbd'])\n+            for i, part in enumerate(parts):\n+                if part in ('-', '+', '^'):\n+                    node += nodes.Text(part, part)\n+                else:\n+                    child = nodes.literal('', part, classes=['kbd'])\n+                    node += child\n+            return ([node], [])\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': KbdRole, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}", "normalized_occurrence": 1}
