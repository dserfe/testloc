{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..09ceaf1 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,12 +45,29 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self._partial_args = None\n+            self._partial_keywords = None\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n+            # Add partial info if present\n+            if self._partial_args or self._partial_keywords:\n+                partial_info = []\n+                if self._partial_args:\n+                    partial_info.append('args=' + repr(self._partial_args))\n+                if self._partial_keywords:\n+                    partial_info.append('keywords=' + repr(self._partial_keywords))\n+                self._func_path += '[partial: ' + ', '.join(partial_info) + ']'\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..776b10d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,10 +29,24 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self._partial_args = None\n+            self._partial_keywords = None\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n+            if self._partial_args or self._partial_keywords:\n+                partial_info = []\n+                if self._partial_args:\n+                    partial_info.append('args=' + repr(self._partial_args))\n+                if self._partial_keywords:\n+                    partial_info.append('keywords=' + repr(self._partial_keywords))\n+                self._func_path += '[partial: ' + ', '.join(partial_info) + ']'\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n", "normalized_occurrence": 1}
