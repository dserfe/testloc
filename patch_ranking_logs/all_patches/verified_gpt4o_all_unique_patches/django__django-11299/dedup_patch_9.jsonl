{"model_name_or_path": "agentless", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 4b9cb31..63f7b62 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -37,6 +37,10 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n+        # Replace fully qualified column names with just the column names\n+        columns = [model._meta.get_field(f.name).column for f in self.check.children]\n+        for column in columns:\n+            sql = sql.replace(f'{model._meta.db_table}.{column}', column)\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n \n     def constraint_sql(self, model, schema_editor):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex cc6f0d3..7539cbb 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -26,6 +26,9 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n+        columns = [model._meta.get_field(f.name).column for f in self.check.children]\n+        for column in columns:\n+            sql = sql.replace(f'{model._meta.db_table}.{column}', column)\n         return sql % tuple((schema_editor.quote_value(p) for p in params))\n     def constraint_sql(self, model, schema_editor):\n         check = self._get_check_sql(model, schema_editor)\n", "normalized_occurrence": 1}
