{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..4227db0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -992,7 +992,11 @@ class QuerySet:\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            compiler = query.get_compiler(self.db)\n+            if hasattr(self.model, '_meta') and hasattr(self.model._meta, 'concrete_model'):\n+                concrete_model = self.model._meta.concrete_model\n+                compiler.query.model = concrete_model\n+            rows = compiler.execute_sql(CURSOR)\n         self._result_cache = None\n         return rows\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..a4c99da 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -536,7 +536,11 @@ class QuerySet:\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            compiler = query.get_compiler(self.db)\n+            if hasattr(self.model, '_meta') and hasattr(self.model._meta, 'concrete_model'):\n+                concrete_model = self.model._meta.concrete_model\n+                compiler.query.model = concrete_model\n+            rows = compiler.execute_sql(CURSOR)\n         self._result_cache = None\n         return rows\n     update.alters_data = True\n", "normalized_occurrence": 1}
