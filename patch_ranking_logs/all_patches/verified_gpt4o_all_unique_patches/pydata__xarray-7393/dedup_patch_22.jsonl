{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex d49b2c1..e8b04b6 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -711,6 +711,9 @@ class PandasMultiIndex(PandasIndex):\n         labels = [x.ravel() for x in labels_mesh]\n \n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n+        for level, original_var in zip(index.levels, variables.values()):\n+            if level.dtype != original_var.dtype:\n+                level = level.astype(original_var.dtype)\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n \n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 6be2e3c..38726a1 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -375,6 +375,9 @@ class PandasMultiIndex(PandasIndex):\n         labels_mesh = np.meshgrid(*split_labels, indexing='ij')\n         labels = [x.ravel() for x in labels_mesh]\n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n+        for level, original_var in zip(index.levels, variables.values()):\n+            if level.dtype != original_var.dtype:\n+                level = level.astype(original_var.dtype)\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n     def unstack(self) -> tuple[dict[Hashable, Index], pd.MultiIndex]:\n", "normalized_occurrence": 1}
