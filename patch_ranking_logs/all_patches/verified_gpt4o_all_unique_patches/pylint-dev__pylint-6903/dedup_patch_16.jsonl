{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6903", "model_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex aabf0aa..f96ccbf 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -52,12 +52,12 @@ def _query_cpu() -> int | None:\n         with open(\"/sys/fs/cgroup/cpu/cpu.cfs_period_us\", encoding=\"utf-8\") as file:\n             cpu_period = int(file.read().rstrip())\n         # Divide quota by period and you should get num of allotted CPU to the container, rounded down if fractional.\n-        avail_cpu = int(cpu_quota / cpu_period)\n+        avail_cpu = max(1, int(cpu_quota / cpu_period))\n     elif Path(\"/sys/fs/cgroup/cpu/cpu.shares\").is_file():\n         with open(\"/sys/fs/cgroup/cpu/cpu.shares\", encoding=\"utf-8\") as file:\n             cpu_shares = int(file.read().rstrip())\n         # For AWS, gives correct value * 1024.\n-        avail_cpu = int(cpu_shares / 1024)\n+        avail_cpu = max(1, int(cpu_shares / 1024))\n     return avail_cpu\n \n \n@@ -76,7 +76,7 @@ def _cpu_count() -> int:\n     else:\n         cpu_count = 1\n     if cpu_share is not None:\n-        return min(cpu_share, cpu_count)\n+        return max(1, min(cpu_share, cpu_count))\n     return cpu_count\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex 1397b08..6e1fd99 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -27,11 +27,11 @@ def _query_cpu() -> int | None:\n     if cpu_quota and cpu_quota != -1 and Path('/sys/fs/cgroup/cpu/cpu.cfs_period_us').is_file():\n         with open('/sys/fs/cgroup/cpu/cpu.cfs_period_us', encoding='utf-8') as file:\n             cpu_period = int(file.read().rstrip())\n-        avail_cpu = int(cpu_quota / cpu_period)\n+        avail_cpu = max(1, int(cpu_quota / cpu_period))\n     elif Path('/sys/fs/cgroup/cpu/cpu.shares').is_file():\n         with open('/sys/fs/cgroup/cpu/cpu.shares', encoding='utf-8') as file:\n             cpu_shares = int(file.read().rstrip())\n-        avail_cpu = int(cpu_shares / 1024)\n+        avail_cpu = max(1, int(cpu_shares / 1024))\n     return avail_cpu\n def _cpu_count() -> int:\n     cpu_share = _query_cpu()\n@@ -44,7 +44,7 @@ def _cpu_count() -> int:\n     else:\n         cpu_count = 1\n     if cpu_share is not None:\n-        return min(cpu_share, cpu_count)\n+        return max(1, min(cpu_share, cpu_count))\n     return cpu_count\n UNUSED_PARAM_SENTINEL = object()\n class Run:\n", "normalized_occurrence": 1}
