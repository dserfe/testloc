{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14711", "model_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex 77e79b6..622e662 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -57,6 +57,8 @@ class Vector(object):\n \n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n \n@@ -721,6 +723,6 @@ class VectorTypeError(TypeError):\n \n \n def _check_vector(other):\n-    if not isinstance(other, Vector):\n+    if other != 0 and not isinstance(other, Vector):\n         raise TypeError('A Vector must be supplied')\n     return other\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex 22f61ec..7270868 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -24,6 +24,8 @@ class Vector(object):\n     def __hash__(self):\n         return hash(tuple(self.args))\n     def __add__(self, other):\n+        if other == 0:\n+            return self\n         other = _check_vector(other)\n         return Vector(self.args + other.args)\n     def __and__(self, other):\n@@ -299,6 +301,6 @@ class VectorTypeError(TypeError):\n         msg = filldedent(\"Expected an instance of %s, but received object '%s' of %s.\" % (type(want), other, type(other)))\n         super(VectorTypeError, self).__init__(msg)\n def _check_vector(other):\n-    if not isinstance(other, Vector):\n+    if other != 0 and (not isinstance(other, Vector)):\n         raise TypeError('A Vector must be supplied')\n     return other\n\\ No newline at end of file\n", "normalized_occurrence": 1}
