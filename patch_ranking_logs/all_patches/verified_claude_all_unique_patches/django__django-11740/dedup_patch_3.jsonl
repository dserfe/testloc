{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..1421023 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -851,6 +851,19 @@ class MigrationAutodetector:\n \n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+        # Check if this is actually a field type change from UUID to FK\n+        old_field = None\n+        if (app_label, model_name, field_name) in self.old_field_keys:\n+            try:\n+                old_model = self.old_apps.get_model(app_label, model_name)\n+                old_field = old_model._meta.get_field(field_name)\n+                if isinstance(old_field, models.UUIDField) and field.remote_field and field.remote_field.model:\n+                    # This is a UUID to FK conversion - treat as AlterField\n+                    self._generate_altered_field(app_label, model_name, field_name, old_field, field)\n+                    return\n+            except:\n+                pass\n+                \n         # Fields that are foreignkeys/m2ms depend on stuff\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..bf7743a 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -412,6 +412,16 @@ class MigrationAutodetector:\n             self._generate_added_field(app_label, model_name, field_name)\n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+        old_field = None\n+        if (app_label, model_name, field_name) in self.old_field_keys:\n+            try:\n+                old_model = self.old_apps.get_model(app_label, model_name)\n+                old_field = old_model._meta.get_field(field_name)\n+                if isinstance(old_field, models.UUIDField) and field.remote_field and field.remote_field.model:\n+                    self._generate_altered_field(app_label, model_name, field_name, old_field, field)\n+                    return\n+            except:\n+                pass\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(self._get_dependencies_for_foreign_key(field))\n", "normalized_occurrence": 1}
