{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..147322e 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -720,7 +720,39 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n-    def bic(self, X):\n+    def fit(self, X, y=None):\n+        \"\"\"Estimate model parameters with the EM algorithm.\n+\n+        The method fits the model on the data X and assigns the labels\n+        to the training data.\n+\n+        Parameters\n+        ----------\n+        X : array_like, shape (n, n_features)\n+            List of n_features-dimensional data points. Each row\n+            corresponds to a single data point.\n+\n+        Returns\n+        -------\n+        self\n+        \"\"\"\n+        self._fit(X, y)\n+        self.labels_ = self.predict(X)\n+        return self\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape = [n_samples, n_features]\n+\n+        Returns\n+        -------\n+        C : array, shape = (n_samples,) component memberships\n+        \"\"\"\n+        self.fit(X, y)\n+        return self.labels_\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n         Parameters\n@@ -747,4 +779,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..e8e66dd 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -185,7 +185,13 @@ class GaussianMixture(BaseMixture):\n             cov_params = self.n_components\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n-    def bic(self, X):\n+    def fit(self, X, y=None):\n+        self._fit(X, y)\n+        self.labels_ = self.predict(X)\n+        return self\n+    def fit_predict(self, X, y=None):\n+        self.fit(X, y)\n+        return self.labels_\n         return -2 * self.score(X) * X.shape[0] + self._n_parameters() * np.log(X.shape[0])\n     def aic(self, X):\n         return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n\\ No newline at end of file\n", "normalized_occurrence": 1}
