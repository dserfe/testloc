{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..def2b86 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,14 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.match(r'(\\d+(\\.\\d+)?|\\.\\d+)[eE][+-]?\\d+|(\\d+(\\.\\d*)?)|(\\.\\d+)'):\n+            number = self.matched_text\n+            self.skip_ws()\n+            if not self.match(identifier_re):\n+                self.fail(\"Expected user-defined literal suffix.\")\n+            suffix = self.matched_text\n+            return ASTUserDefinedLiteral(number, suffix)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..f1921e8 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,13 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match('(\\\\d+(\\\\.\\\\d+)?|\\\\.\\\\d+)[eE][+-]?\\\\d+|(\\\\d+(\\\\.\\\\d*)?)|(\\\\.\\\\d+)'):\n+            number = self.matched_text\n+            self.skip_ws()\n+            if not self.match(identifier_re):\n+                self.fail('Expected user-defined literal suffix.')\n+            suffix = self.matched_text\n+            return ASTUserDefinedLiteral(number, suffix)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
