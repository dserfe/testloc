{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..10814c5 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1074,6 +1074,12 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n \n+    if not evaluate:\n+        code = stringify_expr(s, local_dict, global_dict, _transformations)\n+        code = compile(evaluateFalse(code), '<string>', 'eval')\n+    else:\n+        code = stringify_expr(s, local_dict, global_dict, _transformations)\n+    \n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         # restore neutral definitions for names\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..f9d55da 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -512,6 +512,11 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n+    if not evaluate:\n+        code = stringify_expr(s, local_dict, global_dict, _transformations)\n+        code = compile(evaluateFalse(code), '<string>', 'eval')\n+    else:\n+        code = stringify_expr(s, local_dict, global_dict, _transformations)\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(null, ()):\n", "normalized_occurrence": 1}
