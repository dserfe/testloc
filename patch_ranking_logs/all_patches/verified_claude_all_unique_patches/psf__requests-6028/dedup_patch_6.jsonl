{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..31f4fbe 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -386,7 +386,9 @@ class HTTPAdapter(BaseAdapter):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n \n-        if username:\n+        # Only set basic auth from URL if explicit auth is not being used\n+        # This prevents conflicts with HTTPProxyAuth\n+        if username and not any(isinstance(auth, HTTPProxyAuth) for auth in self._auth):\n             headers['Proxy-Authorization'] = _basic_auth_str(username,\n                                                              password)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..0454185 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -156,7 +156,7 @@ class HTTPAdapter(BaseAdapter):\n     def proxy_headers(self, proxy):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n-        if username:\n+        if username and (not any((isinstance(auth, HTTPProxyAuth) for auth in self._auth))):\n             headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n         return headers\n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n", "normalized_occurrence": 1}
