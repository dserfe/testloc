{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..aa684c5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -50,10 +50,10 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, self.query.group_by)\n         return extra_select, order_by, group_by\n \n-    def get_group_by(self, select, order_by):\n+    def get_group_by(self, select, order_by, initial_group_by):\n         \"\"\"\n         Return a list of 2-tuples of form (sql, params).\n \n@@ -90,16 +90,16 @@ class SQLCompiler:\n         # The query.group_by is either None (no GROUP BY at all), True\n         # (group by select fields), or a list of expressions to be added\n         # to the group by.\n-        if self.query.group_by is None:\n+        if initial_group_by is None:\n             return []\n         expressions = []\n-        if self.query.group_by is not True:\n+        if initial_group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n             # Backwards compatibility hack for setting query.group_by. Remove\n             # when  we have public API way of forcing the GROUP BY clause.\n             # Converts string references to expressions.\n-            for expr in self.query.group_by:\n+            for expr in initial_group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..fa4fe53 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -33,14 +33,14 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, self.query.group_by)\n         return (extra_select, order_by, group_by)\n-    def get_group_by(self, select, order_by):\n-        if self.query.group_by is None:\n+    def get_group_by(self, select, order_by, initial_group_by):\n+        if initial_group_by is None:\n             return []\n         expressions = []\n-        if self.query.group_by is not True:\n-            for expr in self.query.group_by:\n+        if initial_group_by is not True:\n+            for expr in initial_group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n", "normalized_occurrence": 1}
