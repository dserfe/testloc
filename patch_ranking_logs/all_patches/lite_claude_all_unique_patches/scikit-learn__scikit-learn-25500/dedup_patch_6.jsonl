{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..692f813 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -652,6 +652,8 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     return predictions\n \n \n+from sklearn.base import set_output\n+\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     \"\"\"Fit calibrator(s) and return a `_CalibratedClassifier`\n     instance.\n@@ -690,7 +692,11 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     calibrators = []\n     for class_idx, this_pred in zip(pos_class_indices, predictions.T):\n         if method == \"isotonic\":\n-            calibrator = IsotonicRegression(out_of_bounds=\"clip\")\n+            # Force numpy output for the calibrator regardless of global config\n+            calibrator = set_output(\n+                IsotonicRegression(out_of_bounds=\"clip\"),\n+                transform_output=\"default\"\n+            )\n         else:  # \"sigmoid\"\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..ae990f1 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -140,6 +140,7 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     else:\n         raise ValueError(f'Invalid prediction method: {method_name}')\n     return predictions\n+from sklearn.base import set_output\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     Y = label_binarize(y, classes=classes)\n     label_encoder = LabelEncoder().fit(classes)\n@@ -147,7 +148,7 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     calibrators = []\n     for class_idx, this_pred in zip(pos_class_indices, predictions.T):\n         if method == 'isotonic':\n-            calibrator = IsotonicRegression(out_of_bounds='clip')\n+            calibrator = set_output(IsotonicRegression(out_of_bounds='clip'), transform_output='default')\n         else:\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n", "normalized_occurrence": 1}
