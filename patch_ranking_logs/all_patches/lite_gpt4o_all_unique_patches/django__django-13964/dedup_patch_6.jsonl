{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..6cf4f7a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -937,9 +937,12 @@ class Model(metaclass=ModelBase):\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n+                # Ensure that the related field is correctly updated with the pk\n+                # of the related object.\n+                setattr(self, field.attname, obj.pk)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n+                if field.is_cached(self) and getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n \n     def delete(self, using=None, keep_parents=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..8b9d242 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -495,7 +495,8 @@ class Model(metaclass=ModelBase):\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n                 elif getattr(self, field.attname) is None:\n                     setattr(self, field.attname, obj.pk)\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n+                setattr(self, field.attname, obj.pk)\n+                if field.is_cached(self) and getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\n", "normalized_occurrence": 1}
