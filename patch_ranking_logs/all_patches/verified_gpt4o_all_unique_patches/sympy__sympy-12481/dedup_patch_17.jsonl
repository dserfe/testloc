{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..cd1e569 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -912,9 +912,10 @@ class Permutation(Basic):\n             # it's not necessarily canonical so we won't store\n             # it -- use the array form instead\n             c = Cycle()\n+            aform = list(range(size or max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci) - 1):\n+                    aform[ci[i]], aform[ci[i + 1]] = aform[ci[i + 1]], aform[ci[i]]\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..6e25547 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -204,9 +204,10 @@ class Permutation(Basic):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n             c = Cycle()\n+            aform = list(range(size or max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci) - 1):\n+                    aform[ci[i]], aform[ci[i + 1]] = (aform[ci[i + 1]], aform[ci[i]])\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "normalized_occurrence": 1}
