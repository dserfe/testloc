{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..42cd2cf 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2082,11 +2082,19 @@ class Query(BaseExpression):\n         # get_columns()).\n         existing, defer = self.deferred_loading\n         if defer:\n-            # Add to existing deferred names.\n+            # Add to existing deferred names and remove from immediate load set\n             self.deferred_loading = existing.union(field_names), True\n         else:\n-            # Remove names from the set of any existing \"immediate load\" names.\n+            # When we're not deferring (i.e., immediate loading), remove the\n+            # names from the existing set.\n             self.deferred_loading = existing.difference(field_names), False\n+            \n+        # If this is a defer() and we have an immediate load list (from only()),\n+        # we need to remove the deferred fields from that list\n+        if defer and hasattr(self, '_only_loaded'):\n+            immediate = getattr(self, '_only_loaded')\n+            if immediate is not None:\n+                setattr(self, '_only_loaded', immediate.difference(field_names))\n \n     def add_immediate_loading(self, field_names):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..cf976ae 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1141,6 +1141,10 @@ class Query(BaseExpression):\n             self.deferred_loading = (existing.union(field_names), True)\n         else:\n             self.deferred_loading = (existing.difference(field_names), False)\n+        if defer and hasattr(self, '_only_loaded'):\n+            immediate = getattr(self, '_only_loaded')\n+            if immediate is not None:\n+                setattr(self, '_only_loaded', immediate.difference(field_names))\n     def add_immediate_loading(self, field_names):\n         existing, defer = self.deferred_loading\n         field_names = set(field_names)\n", "normalized_occurrence": 1}
