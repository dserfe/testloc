{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..629fcd0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,17 +1260,28 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n+                    # First try in current module\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n+                        matches = [(newname, self.objects[newname])]\n+                    # For unqualified names, prefer matches in current module\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+                        matches = [(newname, self.objects[newname])]\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode - prioritize current module\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        current_mod_matches = []\n+                        other_matches = []\n+                        for oname, obj in self.objects.items():\n+                            if oname.endswith(searchname) and obj.objtype in objtypes:\n+                                if modname and oname.startswith(modname + '.'):\n+                                    current_mod_matches.append((oname, obj))\n+                                else:\n+                                    other_matches.append((oname, obj))\n+                        # Prefer matches in current module\n+                        matches = current_mod_matches or other_matches\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..d245e95 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,11 +761,21 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n+                        matches = [(newname, self.objects[newname])]\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n+                        matches = [(newname, self.objects[newname])]\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        current_mod_matches = []\n+                        other_matches = []\n+                        for oname, obj in self.objects.items():\n+                            if oname.endswith(searchname) and obj.objtype in objtypes:\n+                                if modname and oname.startswith(modname + '.'):\n+                                    current_mod_matches.append((oname, obj))\n+                                else:\n+                                    other_matches.append((oname, obj))\n+                        matches = current_mod_matches or other_matches\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
