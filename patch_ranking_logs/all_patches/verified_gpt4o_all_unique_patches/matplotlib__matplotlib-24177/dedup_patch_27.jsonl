{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8900d1c..b983e2f 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -2970,9 +2970,21 @@ class _AxesBase(martist.Artist):\n             set_bound(x0, x1)\n             # End of definition of internal function 'handle_single_axis'.\n \n+        # Adjust for density when histtype is 'step'\n+        if scaley and any(isinstance(child, mpl.patches.Polygon) for child in self.get_children()):\n+            density_tops = max(np.amax(artist.get_ydata()) for artist in self.get_lines() if isinstance(artist, mpl.lines.Line2D))\n+            if density_tops > self.dataLim.ymax:\n+                self.dataLim.ymax = density_tops\n+\n         handle_single_axis(\n             scalex, self._shared_axes[\"x\"], 'x', self.xaxis, self._xmargin,\n             x_stickies, self.set_xbound)\n+        # Adjust for density when histtype is 'step'\n+        if scaley and any(isinstance(child, mpl.patches.Polygon) for child in self.get_children()):\n+            density_tops = max(np.amax(artist.get_ydata()) for artist in self.get_lines() if isinstance(artist, mpl.lines.Line2D))\n+            if density_tops > self.dataLim.ymax:\n+                self.dataLim.ymax = density_tops\n+\n         handle_single_axis(\n             scaley, self._shared_axes[\"y\"], 'y', self.yaxis, self._ymargin,\n             y_stickies, self.set_ybound)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eafcc46..4a26495 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1216,7 +1216,15 @@ class _AxesBase(martist.Artist):\n             if not self._tight:\n                 x0, x1 = locator.view_limits(x0, x1)\n             set_bound(x0, x1)\n+        if scaley and any((isinstance(child, mpl.patches.Polygon) for child in self.get_children())):\n+            density_tops = max((np.amax(artist.get_ydata()) for artist in self.get_lines() if isinstance(artist, mpl.lines.Line2D)))\n+            if density_tops > self.dataLim.ymax:\n+                self.dataLim.ymax = density_tops\n         handle_single_axis(scalex, self._shared_axes['x'], 'x', self.xaxis, self._xmargin, x_stickies, self.set_xbound)\n+        if scaley and any((isinstance(child, mpl.patches.Polygon) for child in self.get_children())):\n+            density_tops = max((np.amax(artist.get_ydata()) for artist in self.get_lines() if isinstance(artist, mpl.lines.Line2D)))\n+            if density_tops > self.dataLim.ymax:\n+                self.dataLim.ymax = density_tops\n         handle_single_axis(scaley, self._shared_axes['y'], 'y', self.yaxis, self._ymargin, y_stickies, self.set_ybound)\n     def _update_title_position(self, renderer):\n         if self._autotitlepos is not None and (not self._autotitlepos):\n", "normalized_occurrence": 1}
