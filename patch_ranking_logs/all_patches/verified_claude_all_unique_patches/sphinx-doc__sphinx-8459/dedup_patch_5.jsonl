{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..50e9852 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,11 +28,28 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n+            \n+            # Get type aliases from config\n+            type_aliases = app.config.autodoc_type_aliases or {}\n+            \n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    stringified = typing.stringify(param.annotation)\n+                    # Check if the type matches any aliases\n+                    for alias_name, alias_target in type_aliases.items():\n+                        if stringified == alias_target.split('.')[-1]:\n+                            stringified = alias_name\n+                            break\n+                    annotation[param.name] = stringified\n+            \n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                stringified = typing.stringify(sig.return_annotation)\n+                # Check if the return type matches any aliases\n+                for alias_name, alias_target in type_aliases.items():\n+                    if stringified == alias_target.split('.')[-1]:\n+                        stringified = alias_name\n+                        break\n+                annotation['return'] = stringified\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..a4bd537 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -12,11 +12,22 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n+            type_aliases = app.config.autodoc_type_aliases or {}\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    stringified = typing.stringify(param.annotation)\n+                    for alias_name, alias_target in type_aliases.items():\n+                        if stringified == alias_target.split('.')[-1]:\n+                            stringified = alias_name\n+                            break\n+                    annotation[param.name] = stringified\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                stringified = typing.stringify(sig.return_annotation)\n+                for alias_name, alias_target in type_aliases.items():\n+                    if stringified == alias_target.split('.')[-1]:\n+                        stringified = alias_name\n+                        break\n+                annotation['return'] = stringified\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
