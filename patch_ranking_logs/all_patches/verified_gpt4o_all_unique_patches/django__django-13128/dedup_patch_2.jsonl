{"model_name_or_path": "agentless", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..1362355 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -458,8 +458,11 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         ):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n-        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+        if self.connector == self.SUB and lhs_type in datetime_fields:\n+            if lhs_type == rhs_type:\n+                return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+            if rhs_type in datetime_fields:\n+                self.output_field = fields.DurationField()\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -517,9 +520,10 @@ class TemporalSubtraction(CombinedExpression):\n \n     def as_sql(self, compiler, connection):\n         connection.ops.check_expression_support(self)\n-        lhs = compiler.compile(self.lhs)\n-        rhs = compiler.compile(self.rhs)\n-        return connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), lhs, rhs)\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        rhs_sql, rhs_params = compiler.compile(self.rhs)\n+        sql, params = connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), (lhs_sql, lhs_params), (rhs_sql, rhs_params))\n+        return sql, params\n \n \n @deconstructible\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..7a529d4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -250,8 +250,11 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         if not connection.features.has_native_duration_field and 'DurationField' in {lhs_type, rhs_type} and (lhs_type != rhs_type):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n-        if self.connector == self.SUB and lhs_type in datetime_fields and (lhs_type == rhs_type):\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+        if self.connector == self.SUB and lhs_type in datetime_fields:\n+            if lhs_type == rhs_type:\n+                return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+            if rhs_type in datetime_fields:\n+                self.output_field = fields.DurationField()\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -299,9 +302,10 @@ class TemporalSubtraction(CombinedExpression):\n         super().__init__(lhs, self.SUB, rhs)\n     def as_sql(self, compiler, connection):\n         connection.ops.check_expression_support(self)\n-        lhs = compiler.compile(self.lhs)\n-        rhs = compiler.compile(self.rhs)\n-        return connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), lhs, rhs)\n+        lhs_sql, lhs_params = compiler.compile(self.lhs)\n+        rhs_sql, rhs_params = compiler.compile(self.rhs)\n+        sql, params = connection.ops.subtract_temporals(self.lhs.output_field.get_internal_type(), (lhs_sql, lhs_params), (rhs_sql, rhs_params))\n+        return (sql, params)\n @deconstructible\n class F(Combinable):\n     def __init__(self, name):\n", "normalized_occurrence": 1}
