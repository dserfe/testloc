{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..47420e0 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,7 +212,12 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', 'file:')):\n+                # Check if the local file exists\n+                if os.path.exists(uri):\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', 'Local file does not exist', 0\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..7d9a69c 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -132,7 +132,11 @@ class CheckExternalLinksBuilder(Builder):\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', 'file:')):\n+                if os.path.exists(uri):\n+                    return ('working', '', 0)\n+                else:\n+                    return ('broken', 'Local file does not exist', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n", "normalized_occurrence": 1}
