{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..314d521 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,5 +1,7 @@\n+\n import pandas as pd\n \n+import numpy as np\n from . import dtypes, utils\n from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n@@ -312,14 +314,14 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n+                if var not in ds.variables:\n+                    # create a dummy variable filled with NaNs\n+                    dtype = datasets[0].variables[var].dtype if var in datasets[0].variables else 'float'\n+                    fill_value = np.nan\n+                    shape = [dims_sizes[dim] for dim in datasets[0].variables[var].dims]\n+                    data = np.full(shape, fill_value, dtype=dtype)\n+                    ds[var] = Variable(dims=datasets[0].variables[var].dims, data=data)\n                 to_merge[var].append(ds.variables[var])\n \n         for var in variables_to_merge:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..0357a1c 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,4 +1,5 @@\n import pandas as pd\n+import numpy as np\n from . import dtypes, utils\n from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n@@ -126,10 +127,13 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n+                if var not in ds.variables:\n+                    dtype = datasets[0].variables[var].dtype if var in datasets[0].variables else 'float'\n+                    fill_value = np.nan\n+                    shape = [dims_sizes[dim] for dim in datasets[0].variables[var].dims]\n+                    data = np.full(shape, fill_value, dtype=dtype)\n+                    ds[var] = Variable(dims=datasets[0].variables[var].dims, data=data)\n                 to_merge[var].append(ds.variables[var])\n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(var, to_merge[var], compat=compat, equals=equals.get(var, None))\n", "normalized_occurrence": 1}
