{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23534", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex e6fdcf8..7976b7a 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -790,10 +790,17 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n \n         return tuple(result)\n     else:\n-        for name in names:\n-            result.append(symbols(name, **args))\n+        if isinstance(names, (tuple, list)) and all(isinstance(name, str) for name in names):\n+            for name in names:\n+                result.append(symbols(name, **args))\n+        else:\n+            for name in names:\n+                if isinstance(name, (tuple, list)):\n+                    result.append(symbols(name, **args))\n+                else:\n+                    result.extend([cls(name, **args)])\n \n-        return type(names)(result)\n+        return tuple(result)\n \n \n def var(names, **args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 6e0b9ca..4629588 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -290,9 +290,16 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n             return result[0]\n         return tuple(result)\n     else:\n-        for name in names:\n-            result.append(symbols(name, **args))\n-        return type(names)(result)\n+        if isinstance(names, (tuple, list)) and all((isinstance(name, str) for name in names)):\n+            for name in names:\n+                result.append(symbols(name, **args))\n+        else:\n+            for name in names:\n+                if isinstance(name, (tuple, list)):\n+                    result.append(symbols(name, **args))\n+                else:\n+                    result.extend([cls(name, **args)])\n+        return tuple(result)\n def var(names, **args):\n     def traverse(symbols, frame):\n         for symbol in symbols:\n", "normalized_occurrence": 1}
