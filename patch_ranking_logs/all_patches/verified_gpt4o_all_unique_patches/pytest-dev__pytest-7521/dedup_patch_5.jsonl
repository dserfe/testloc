{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7521", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex f40cad0..3de5bb8 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -342,7 +342,7 @@ class SysCapture(SysCaptureBinary):\n \n     def writeorg(self, data):\n         self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n-        self._old.write(data)\n+        self._old.write(data.replace('\\r', '\\r'))\n         self._old.flush()\n \n \n@@ -485,7 +485,7 @@ class FDCapture(FDCaptureBinary):\n \n     def writeorg(self, data):\n         \"\"\" write to original file descriptor. \"\"\"\n-        super().writeorg(data.encode(\"utf-8\"))  # XXX use encoding of original stream\n+        super().writeorg(data.replace('\\r', '\\r').encode(\"utf-8\"))  # XXX use encoding of original stream\n \n \n # MultiCapture\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 230e591..cbc88f5 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -177,7 +177,7 @@ class SysCapture(SysCaptureBinary):\n         return res\n     def writeorg(self, data):\n         self._assert_state('writeorg', ('started', 'suspended'))\n-        self._old.write(data)\n+        self._old.write(data.replace('\\r', '\\r'))\n         self._old.flush()\n class FDCaptureBinary:\n     EMPTY_BUFFER = b''\n@@ -257,7 +257,7 @@ class FDCapture(FDCaptureBinary):\n         self.tmpfile.truncate()\n         return res\n     def writeorg(self, data):\n-        super().writeorg(data.encode('utf-8'))\n+        super().writeorg(data.replace('\\r', '\\r').encode('utf-8'))\n CaptureResult = collections.namedtuple('CaptureResult', ['out', 'err'])\n class MultiCapture:\n     _state = None\n", "normalized_occurrence": 1}
