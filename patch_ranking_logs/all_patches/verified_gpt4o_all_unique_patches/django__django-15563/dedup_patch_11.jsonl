{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..4b29884 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -992,7 +992,19 @@ class QuerySet:\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            opts = self.model._meta\n+            base_update = {}\n+            for field, model in opts.get_fields_with_model():\n+                if model is not None and model != self.model:\n+                    base_update.setdefault(model, {}).update({field.attname: kwargs[field.name]})\n+                else:\n+                    base_update.setdefault(self.model, {}).update({field.attname: kwargs[field.name]})\n+            rows = 0\n+            for model, update_kwargs in base_update.items():\n+                query = self.query.chain(sql.UpdateQuery, model=model)\n+                query.add_update_values(update_kwargs)\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n         self._result_cache = None\n         return rows\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..6a80803 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -536,7 +536,19 @@ class QuerySet:\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            opts = self.model._meta\n+            base_update = {}\n+            for field, model in opts.get_fields_with_model():\n+                if model is not None and model != self.model:\n+                    base_update.setdefault(model, {}).update({field.attname: kwargs[field.name]})\n+                else:\n+                    base_update.setdefault(self.model, {}).update({field.attname: kwargs[field.name]})\n+            rows = 0\n+            for model, update_kwargs in base_update.items():\n+                query = self.query.chain(sql.UpdateQuery, model=model)\n+                query.add_update_values(update_kwargs)\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows += query.get_compiler(self.db).execute_sql(CURSOR)\n         self._result_cache = None\n         return rows\n     update.alters_data = True\n", "normalized_occurrence": 1}
