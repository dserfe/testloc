{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..d2ca8d6 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,12 +972,24 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n+    # For numeric types, try to convert to the target type\n+    if isinstance(target_type, type):\n+        target_types = (target_type,)\n+    else:\n+        target_types = target_type\n+\n+    if any(issubclass(t, (int, float)) for t in target_types):\n+        try:\n+            x = target_types[0](x)\n+        except (TypeError, ValueError):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                          .format(name, target_type, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+                      .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..3b0f639 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,16 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    if isinstance(target_type, type):\n+        target_types = (target_type,)\n+    else:\n+        target_types = target_type\n+    if any((issubclass(t, (int, float)) for t in target_types)):\n+        try:\n+            x = target_types[0](x)\n+        except (TypeError, ValueError):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
