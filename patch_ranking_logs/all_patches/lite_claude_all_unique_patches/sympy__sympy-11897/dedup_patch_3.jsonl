{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..1d15bbf 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,10 +356,33 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        \n+        # Handle factors like pretty printer\n+        a = []  # items in the numerator\n+        b = []  # items that are in the denominator\n+\n+        if self.order not in ('old', 'none'):\n+            args = expr.as_ordered_factors()\n+        else:\n+            args = expr.args\n+\n+        # Split factors into numerator/denominator like pretty printer\n+        for item in args:\n+            if (item.is_commutative and item.is_Pow and \n+                item.exp.is_Rational and item.exp.is_negative):\n+                if item.exp != -1:\n+                    b.append(Pow(item.base, -item.exp, evaluate=False))\n+                else:\n+                    b.append(Pow(item.base, -item.exp))\n+            elif item.is_Rational and item is not S.Infinity:\n+                if item.p != 1:\n+                    a.append(Rational(item.p))\n+                if item.q != 1:\n+                    b.append(Rational(item.q))\n+            else:\n+                a.append(item)\n \n         def convert(expr):\n             if not expr.is_Mul:\n@@ -390,13 +413,13 @@ class LatexPrinter(Printer):\n                     last_term_tex = term_tex\n                 return _tex\n \n-        if denom is S.One:\n-            # use the original expression here, since fraction() may have\n-            # altered it when producing numer and denom\n-            tex += convert(expr)\n+        if not b:\n+            # No denominators - just multiply numerator terms\n+            tex += convert(Mul(*a))\n         else:\n-            snumer = convert(numer)\n-            sdenom = convert(denom)\n+            # Convert numerator and denominator\n+            snumer = convert(Mul(*a)) if a else \"1\"\n+            sdenom = convert(Mul(*b))\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] \\\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..6385ebd 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,10 +165,27 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        a = []\n+        b = []\n+        if self.order not in ('old', 'none'):\n+            args = expr.as_ordered_factors()\n+        else:\n+            args = expr.args\n+        for item in args:\n+            if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n+                if item.exp != -1:\n+                    b.append(Pow(item.base, -item.exp, evaluate=False))\n+                else:\n+                    b.append(Pow(item.base, -item.exp))\n+            elif item.is_Rational and item is not S.Infinity:\n+                if item.p != 1:\n+                    a.append(Rational(item.p))\n+                if item.q != 1:\n+                    b.append(Rational(item.q))\n+            else:\n+                a.append(item)\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n@@ -189,11 +206,11 @@ class LatexPrinter(Printer):\n                     _tex += term_tex\n                     last_term_tex = term_tex\n                 return _tex\n-        if denom is S.One:\n-            tex += convert(expr)\n+        if not b:\n+            tex += convert(Mul(*a))\n         else:\n-            snumer = convert(numer)\n-            sdenom = convert(denom)\n+            snumer = convert(Mul(*a)) if a else '1'\n+            sdenom = convert(Mul(*b))\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n", "normalized_occurrence": 1}
