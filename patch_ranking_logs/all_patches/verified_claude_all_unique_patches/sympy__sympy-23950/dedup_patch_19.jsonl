{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..829789b 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,9 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Returns the set that contains all values satisfying this Contains expression.\n+        For Contains(element, container), this returns the container set itself.\n+        \"\"\"\n+        element, container = self.args\n+        return container\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..98cf9cf 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,5 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        element, container = self.args\n+        return container\n\\ No newline at end of file\n", "normalized_occurrence": 1}
