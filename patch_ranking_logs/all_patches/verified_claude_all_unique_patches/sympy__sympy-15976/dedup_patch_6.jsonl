{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..2e9b9ed 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -772,6 +772,11 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n             else:\n                 return s\n \n+        # If the symbol name contains digits, treat it as a single unit\n+        if any(c.isdigit() for c in sym.name):\n+            x.appendChild(self.dom.createTextNode(sym.name))\n+            return x\n+\n         name, supers, subs = split_super_sub(sym.name)\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..c52e834 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -540,6 +540,9 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                 return greek_unicode.get(s)\n             else:\n                 return s\n+        if any((c.isdigit() for c in sym.name)):\n+            x.appendChild(self.dom.createTextNode(sym.name))\n+            return x\n         name, supers, subs = split_super_sub(sym.name)\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n", "normalized_occurrence": 2}
