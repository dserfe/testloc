{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..a3c0a43 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -756,14 +756,27 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                         mo = self.dom.createElement('mo')\n                         mo.appendChild(self.dom.createTextNode(\" \"))\n                         mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mi')\n-                    mi.appendChild(self.dom.createTextNode(item))\n-                    mrow.appendChild(mi)\n+                    # Check if the item is purely numeric\n+                    if item.isdigit():\n+                        mn = self.dom.createElement('mn')\n+                        mn.appendChild(self.dom.createTextNode(item))\n+                        mrow.appendChild(mn)\n+                    else:\n+                        mi = self.dom.createElement('mi')\n+                        mi.appendChild(self.dom.createTextNode(item))\n+                        mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n+                item = items[0]\n+                # Check if the item is purely numeric\n+                if item.isdigit():\n+                    mn = self.dom.createElement('mn')\n+                    mn.appendChild(self.dom.createTextNode(item))\n+                    return mn\n+                else:\n+                    mi = self.dom.createElement('mi')\n+                    mi.appendChild(self.dom.createTextNode(item))\n+                    return mi\n \n         # translate name, supers and subs to unicode characters\n         def translate(s):\n@@ -777,7 +790,24 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n \n-        mname = self.dom.createElement('mi')\n+        # Check if name contains both letters and numbers\n+        if any(c.isdigit() for c in name) and not name.isdigit():\n+            # Split name into text and number parts\n+            import re\n+            parts = re.split('([0-9]+)', name)\n+            mname = self.dom.createElement('mrow')\n+            for part in parts:\n+                if part:  # Skip empty parts\n+                    if part.isdigit():\n+                        mn = self.dom.createElement('mn')\n+                        mn.appendChild(self.dom.createTextNode(part))\n+                        mname.appendChild(mn)\n+                    else:\n+                        mi = self.dom.createElement('mi')\n+                        mi.appendChild(self.dom.createTextNode(part))\n+                        mname.appendChild(mi)\n+        else:\n+            mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..6356f8d 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -527,14 +527,25 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                         mo = self.dom.createElement('mo')\n                         mo.appendChild(self.dom.createTextNode(' '))\n                         mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mi')\n-                    mi.appendChild(self.dom.createTextNode(item))\n-                    mrow.appendChild(mi)\n+                    if item.isdigit():\n+                        mn = self.dom.createElement('mn')\n+                        mn.appendChild(self.dom.createTextNode(item))\n+                        mrow.appendChild(mn)\n+                    else:\n+                        mi = self.dom.createElement('mi')\n+                        mi.appendChild(self.dom.createTextNode(item))\n+                        mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n+                item = items[0]\n+                if item.isdigit():\n+                    mn = self.dom.createElement('mn')\n+                    mn.appendChild(self.dom.createTextNode(item))\n+                    return mn\n+                else:\n+                    mi = self.dom.createElement('mi')\n+                    mi.appendChild(self.dom.createTextNode(item))\n+                    return mi\n         def translate(s):\n             if s in greek_unicode:\n                 return greek_unicode.get(s)\n@@ -544,7 +555,22 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mi')\n+        if any((c.isdigit() for c in name)) and (not name.isdigit()):\n+            import re\n+            parts = re.split('([0-9]+)', name)\n+            mname = self.dom.createElement('mrow')\n+            for part in parts:\n+                if part:\n+                    if part.isdigit():\n+                        mn = self.dom.createElement('mn')\n+                        mn.appendChild(self.dom.createTextNode(part))\n+                        mname.appendChild(mn)\n+                    else:\n+                        mi = self.dom.createElement('mi')\n+                        mi.appendChild(self.dom.createTextNode(part))\n+                        mname.appendChild(mi)\n+        else:\n+            mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n", "normalized_occurrence": 1}
