{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 9239abf..6d7acbb 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from __future__ import print_function, division\n \n from sympy.core import S, Add, Expr, Basic\n@@ -33,6 +34,8 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n+    if isinstance(expr, Identity):\n+        return refine_identity(expr, assumptions)\n     name = expr.__class__.__name__\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n@@ -45,7 +48,23 @@ def refine(expr, assumptions=True):\n     return refine(new_expr, assumptions)\n \n \n-def refine_abs(expr, assumptions):\n+def refine_identity(expr, assumptions):\n+    \"\"\"\n+    Handler for Identity matrix.\n+\n+    Ensures that summing over all elements of an identity matrix gives `n`.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Identity, Q, refine\n+    >>> n = Symbol('n', integer=True, positive=True)\n+    >>> I = Identity(n)\n+    >>> refine(Sum(Sum(I[i, j], (i, 0, n-1)), (j, 0, n-1)).doit())\n+    n\n+    \"\"\"\n+    n = expr.rows\n+    return n\n     \"\"\"\n     Handler for the absolute value.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex fd84337..118fe11 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -11,6 +11,8 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n+    if isinstance(expr, Identity):\n+        return refine_identity(expr, assumptions)\n     name = expr.__class__.__name__\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n@@ -21,7 +23,9 @@ def refine(expr, assumptions=True):\n     if not isinstance(new_expr, Expr):\n         return new_expr\n     return refine(new_expr, assumptions)\n-def refine_abs(expr, assumptions):\n+def refine_identity(expr, assumptions):\n+    n = expr.rows\n+    return n\n     from sympy.core.logic import fuzzy_not\n     arg = expr.args[0]\n     if ask(Q.real(arg), assumptions) and fuzzy_not(ask(Q.negative(arg), assumptions)):\n", "normalized_occurrence": 1}
