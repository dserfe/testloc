{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..fb8c87f 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,7 +191,10 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs[0].__class__\n+            if model not in self.fast_deletes:\n+                self.fast_deletes[model] = []\n+            self.fast_deletes[model].extend(objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n@@ -310,9 +313,12 @@ class Collector:\n                     )\n \n             # fast deletes\n-            for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+            # combine fast deletes by model\n+            for model, objs in self.fast_deletes.items():\n+                pk_list = [obj.pk for obj in objs]\n+                query = sql.DeleteQuery(model)\n+                count = query.delete_batch(pk_list, self.using)\n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..97e9b39 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -80,7 +80,10 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs[0].__class__\n+            if model not in self.fast_deletes:\n+                self.fast_deletes[model] = []\n+            self.fast_deletes[model].extend(objs)\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n@@ -156,9 +159,11 @@ class Collector:\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n                     signals.pre_delete.send(sender=model, instance=obj, using=self.using)\n-            for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+            for model, objs in self.fast_deletes.items():\n+                pk_list = [obj.pk for obj in objs]\n+                query = sql.DeleteQuery(model)\n+                count = query.delete_batch(pk_list, self.using)\n+                deleted_counter[model._meta.label] += count\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n", "normalized_occurrence": 1}
