{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..367beca 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,6 +502,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n+        # If input is a DataFrame, convert it to a numpy array\n+        if hasattr(array, 'values'):\n+            array = array.values\n+\n         # If np.array(..) gives ComplexWarning, then we convert the warning\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..e4c7b42 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,6 +152,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if hasattr(array, 'values'):\n+            array = array.values\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n", "normalized_occurrence": 1}
