{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..d5636a9 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,17 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get attributes from type annotations in __init__\n+        if '__init__' in node.locals:\n+            init = node.locals['__init__'][0]\n+            if init.args and init.args.annotations:\n+                for arg_name, annotation in init.args.annotations.items():\n+                    if arg_name != 'self' and arg_name != 'return':\n+                        if self.show_attr(arg_name):\n+                            attrs.append(f\"{arg_name} : {annotation.as_string()}\")\n+\n+        # Get attributes from instance_attrs_type and locals_type\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..06cdf85 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,6 +57,13 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n+        if '__init__' in node.locals:\n+            init = node.locals['__init__'][0]\n+            if init.args and init.args.annotations:\n+                for arg_name, annotation in init.args.annotations.items():\n+                    if arg_name != 'self' and arg_name != 'return':\n+                        if self.show_attr(arg_name):\n+                            attrs.append(f'{arg_name} : {annotation.as_string()}')\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n", "normalized_occurrence": 1}
