{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8474", "model_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex 9c4674f..2fef906 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -112,13 +112,16 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n         #       There are related codes in inline_all_toctres() and\n         #       HTMLTranslter#add_fignumber().\n         new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n+        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}, 'table': {'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n         for docname, fignumlist in self.env.toc_fignumbers.items():\n             for figtype, fignums in fignumlist.items():\n                 alias = \"%s/%s\" % (docname, figtype)\n                 new_fignumbers.setdefault(alias, {})\n                 for id, fignum in fignums.items():\n                     new_fignumbers[alias][id] = fignum\n+                    # Ensure table numbers are properly assigned\n+                    if figtype == 'table' and not fignum:\n+                        new_fignumbers[alias][id] = (1,)\n \n         return {self.config.master_doc: new_fignumbers}\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex 542a568..830f418 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -66,6 +66,8 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n                 new_fignumbers.setdefault(alias, {})\n                 for id, fignum in fignums.items():\n                     new_fignumbers[alias][id] = fignum\n+                    if figtype == 'table' and (not fignum):\n+                        new_fignumbers[alias][id] = (1,)\n         return {self.config.master_doc: new_fignumbers}\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n", "normalized_occurrence": 1}
