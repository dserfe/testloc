{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 56fc5f8..0205e87 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1323,6 +1323,12 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and not value:\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and not value:\n+            # Ensure that none() works correctly with combined queries\n+            if isinstance(self.queryset.query.combinator, str):\n+                combined_query = self.queryset.query.clone()\n+                combined_query.clear_limits()\n+                combined_query.clear_ordering(True)\n+                return self.queryset.model.objects.none()\n             return self.queryset.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4e65eaf..f8463fc 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -689,6 +689,11 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and (not value):\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and (not value):\n+            if isinstance(self.queryset.query.combinator, str):\n+                combined_query = self.queryset.query.clone()\n+                combined_query.clear_limits()\n+                combined_query.clear_ordering(True)\n+                return self.queryset.model.objects.none()\n             return self.queryset.none()\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['invalid_list'], code='invalid_list')\n", "normalized_occurrence": 1}
