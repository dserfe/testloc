{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 83e696f..b25f102 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -78,23 +78,11 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n-        pos = 0\n-        for line in content:\n-            if docinfo_re.match(line):\n-                pos += 1\n-            else:\n-                break\n-\n-        if pos > 0:\n-            # insert a blank line after docinfo\n-            content.insert(pos, '', '<generated>', 0)\n-            pos += 1\n-\n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n-\n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+        # Ensure prolog does not interfere with the first heading or domain directives\n+        if content:\n+            for lineno, line in enumerate(prolog.splitlines()):\n+                content.insert(0, line, '<rst_prolog>', lineno)\n+            content.insert(len(prolog.splitlines()), '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 911aea2..676a25f 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -51,18 +51,10 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     if prolog:\n-        pos = 0\n-        for line in content:\n-            if docinfo_re.match(line):\n-                pos += 1\n-            else:\n-                break\n-        if pos > 0:\n-            content.insert(pos, '', '<generated>', 0)\n-            pos += 1\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+        if content:\n+            for lineno, line in enumerate(prolog.splitlines()):\n+                content.insert(0, line, '<rst_prolog>', lineno)\n+            content.insert(len(prolog.splitlines()), '', '<generated>', 0)\n def append_epilog(content: StringList, epilog: str) -> None:\n     if epilog:\n         if len(content) > 0:\n", "normalized_occurrence": 1}
