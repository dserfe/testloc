{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..9764741 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -206,6 +206,17 @@ class ConditionSet(Set):\n             other), self.base_set.contains(other))\n \n     def _eval_subs(self, old, new):\n+        if not isinstance(self.sym, Expr):\n+            # Don't do anything with the equation set syntax;\n+            # that should go away, eventually.\n+            return self\n+        sym, cond, base = self.args\n+        if old == sym:\n+            return self\n+        # Perform substitution in condition and base set\n+        cond = self.condition.subs(old, new)\n+        base = self.base_set.subs(old, new)\n+        return self.func(self.sym, cond, base)\n         if not isinstance(self.sym, Expr):\n             # Don't do anything with the equation set syntax;\n             # that should go away, eventually.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..3f9840b 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -76,6 +76,14 @@ class ConditionSet(Set):\n     def as_relational(self, other):\n         return And(Lambda(self.sym, self.condition)(other), self.base_set.contains(other))\n     def _eval_subs(self, old, new):\n+        if not isinstance(self.sym, Expr):\n+            return self\n+        sym, cond, base = self.args\n+        if old == sym:\n+            return self\n+        cond = self.condition.subs(old, new)\n+        base = self.base_set.subs(old, new)\n+        return self.func(self.sym, cond, base)\n         if not isinstance(self.sym, Expr):\n             return self\n         sym, cond, base = self.args\n", "normalized_occurrence": 1}
