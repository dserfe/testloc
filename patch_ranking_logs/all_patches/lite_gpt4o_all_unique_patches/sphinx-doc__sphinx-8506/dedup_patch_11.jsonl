{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 4f93923..60067bb 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -106,6 +106,15 @@ class RSTParser(docutils.parsers.rst.Parser, Parser):\n \n     def decorate(self, content: StringList) -> None:\n         \"\"\"Preprocess reST content before parsing.\"\"\"\n+\n+        # Allow flexible option descriptions\n+        for i, line in enumerate(content):\n+            if line.startswith('.. option::'):\n+                pattern_match = re.match(r'\\.\\. option:: (\\[.*?\\])?(.*?)$', line)\n+                if pattern_match:\n+                    content[i] = f\".. option:: {pattern_match.group(1) or ''}{pattern_match.group(2)}\"\n+        prepend_prolog(content, self.config.rst_prolog)\n+        append_epilog(content, self.config.rst_epilog)\n         prepend_prolog(content, self.config.rst_prolog)\n         append_epilog(content, self.config.rst_epilog)\n \n@@ -117,4 +126,4 @@ def setup(app: \"Sphinx\") -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 101a425..60f8802 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -38,6 +38,13 @@ class RSTParser(docutils.parsers.rst.Parser, Parser):\n         self.statemachine.run(inputlines, document, inliner=self.inliner)\n         self.finish_parse()\n     def decorate(self, content: StringList) -> None:\n+        for i, line in enumerate(content):\n+            if line.startswith('.. option::'):\n+                pattern_match = re.match('\\\\.\\\\. option:: (\\\\[.*?\\\\])?(.*?)$', line)\n+                if pattern_match:\n+                    content[i] = f\".. option:: {pattern_match.group(1) or ''}{pattern_match.group(2)}\"\n+        prepend_prolog(content, self.config.rst_prolog)\n+        append_epilog(content, self.config.rst_epilog)\n         prepend_prolog(content, self.config.rst_prolog)\n         append_epilog(content, self.config.rst_epilog)\n def setup(app: 'Sphinx') -> Dict[str, Any]:\n", "normalized_occurrence": 1}
