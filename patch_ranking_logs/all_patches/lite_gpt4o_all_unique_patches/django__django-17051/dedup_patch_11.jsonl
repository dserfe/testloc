{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..91a38c4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1761,7 +1761,7 @@ class SQLInsertCompiler(SQLCompiler):\n         # necessary and it should be possible to use placeholders and\n         # expressions in bulk inserts too.\n         can_bulk = (\n-            not self.returning_fields and self.connection.features.has_bulk_insert\n+            not self.returning_fields and self.connection.features.has_bulk_insert and not self.query.on_conflict\n         )\n \n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n@@ -1786,6 +1786,7 @@ class SQLInsertCompiler(SQLCompiler):\n                 params = [param_rows[0]]\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             # Skip empty r_sql to allow subclasses to customize behavior for\n             # 3rd party backends. Refs #19096.\n             r_sql, self.returning_params = self.connection.ops.return_insert_columns(\n@@ -1800,10 +1801,12 @@ class SQLInsertCompiler(SQLCompiler):\n             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             return [(\" \".join(result), tuple(p for ps in param_rows for p in ps))]\n         else:\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             return [\n                 (\" \".join(result + [\"VALUES (%s)\" % \", \".join(p)]), vals)\n                 for p, vals in zip(placeholder_rows, param_rows)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..941f4aa 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -872,7 +872,7 @@ class SQLInsertCompiler(SQLCompiler):\n         else:\n             value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]\n             fields = [None]\n-        can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert\n+        can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert and (not self.query.on_conflict)\n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(fields, self.query.on_conflict, (f.column for f in self.query.update_fields), (f.column for f in self.query.unique_fields))\n         if self.returning_fields and self.connection.features.can_return_columns_from_insert:\n@@ -884,6 +884,7 @@ class SQLInsertCompiler(SQLCompiler):\n                 params = [param_rows[0]]\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)\n             if r_sql:\n                 result.append(r_sql)\n@@ -893,10 +894,12 @@ class SQLInsertCompiler(SQLCompiler):\n             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             return [(' '.join(result), tuple((p for ps in param_rows for p in ps)))]\n         else:\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+                result.append(on_conflict_suffix_sql)\n             return [(' '.join(result + ['VALUES (%s)' % ', '.join(p)]), vals) for p, vals in zip(placeholder_rows, param_rows)]\n     def execute_sql(self, returning_fields=None):\n         assert not (returning_fields and len(self.query.objs) != 1 and (not self.connection.features.can_return_rows_from_bulk_insert))\n", "normalized_occurrence": 1}
