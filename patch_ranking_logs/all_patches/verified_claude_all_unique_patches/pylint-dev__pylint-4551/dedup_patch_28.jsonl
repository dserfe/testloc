{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..fab395a 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,8 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Handle regular attributes and properties\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n@@ -95,6 +97,25 @@ class ClassDiagram(Figure, FilterMixIn):\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n+            \n+        # Handle __init__ parameter type annotations\n+        if \"__init__\" in node:\n+            init_method = node[\"__init__\"]\n+            if hasattr(init_method, \"args\") and hasattr(init_method.args, \"annotations\"):\n+                for arg_name, annotation in init_method.args.annotations.items():\n+                    if arg_name == \"self\":\n+                        continue\n+                    if not self.show_attr(arg_name):\n+                        continue\n+                    try:\n+                        type_name = annotation.as_string()\n+                        # Clean up type name (remove 'typing.' prefix if present)\n+                        type_name = type_name.replace(\"typing.\", \"\")\n+                        if arg_name not in {attr.split(\" : \")[0] for attr in attrs}:\n+                            attrs.append(\"{} : {}\".format(arg_name, type_name))\n+                    except (AttributeError, TypeError):\n+                        continue\n+                        \n         return sorted(attrs)\n \n     def get_methods(self, node):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..f467ff6 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -64,6 +64,21 @@ class ClassDiagram(Figure, FilterMixIn):\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n+        if '__init__' in node:\n+            init_method = node['__init__']\n+            if hasattr(init_method, 'args') and hasattr(init_method.args, 'annotations'):\n+                for arg_name, annotation in init_method.args.annotations.items():\n+                    if arg_name == 'self':\n+                        continue\n+                    if not self.show_attr(arg_name):\n+                        continue\n+                    try:\n+                        type_name = annotation.as_string()\n+                        type_name = type_name.replace('typing.', '')\n+                        if arg_name not in {attr.split(' : ')[0] for attr in attrs}:\n+                            attrs.append('{} : {}'.format(arg_name, type_name))\n+                    except (AttributeError, TypeError):\n+                        continue\n         return sorted(attrs)\n \n     def get_methods(self, node):\n", "normalized_occurrence": 1}
