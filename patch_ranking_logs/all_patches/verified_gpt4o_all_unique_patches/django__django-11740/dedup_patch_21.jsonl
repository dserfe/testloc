{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..877d816 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -96,11 +96,27 @@ class MigrationAutodetector:\n         for name, field in sorted(fields):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n+                related_model = field.remote_field.model\n+                if isinstance(related_model, str):\n+                    related_model_key = tuple(related_model.lower().split('.'))\n+                else:\n+                    related_model_key = (related_model._meta.app_label, related_model._meta.model_name)\n+                self.add_dependency(related_model_key)\n                 del deconstruction[2]['to']\n             fields_def.append(deconstruction)\n         return fields_def\n \n-    def _detect_changes(self, convert_apps=None, graph=None):\n+    def add_dependency(self, related_model_key):\n+        if related_model_key not in self.new_model_keys:\n+            return\n+        related_app_label, related_model_name = related_model_key\n+        dependency = (\n+            self.new_apps.get_model(related_app_label, related_model_name)._meta.app_label,\n+            self.new_apps.get_model(related_app_label, related_model_name)._meta.model_name\n+        )\n+        self.generated_operations.setdefault(self.current_app, []).append(\n+            migrations.swappable_dependency(dependency)\n+        )\n         \"\"\"\n         Return a dict of migration plans which will achieve the\n         change from from_state to to_state. The dict has app labels\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..1bae94f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -48,10 +48,21 @@ class MigrationAutodetector:\n         for name, field in sorted(fields):\n             deconstruction = self.deep_deconstruct(field)\n             if field.remote_field and field.remote_field.model:\n+                related_model = field.remote_field.model\n+                if isinstance(related_model, str):\n+                    related_model_key = tuple(related_model.lower().split('.'))\n+                else:\n+                    related_model_key = (related_model._meta.app_label, related_model._meta.model_name)\n+                self.add_dependency(related_model_key)\n                 del deconstruction[2]['to']\n             fields_def.append(deconstruction)\n         return fields_def\n-    def _detect_changes(self, convert_apps=None, graph=None):\n+    def add_dependency(self, related_model_key):\n+        if related_model_key not in self.new_model_keys:\n+            return\n+        related_app_label, related_model_name = related_model_key\n+        dependency = (self.new_apps.get_model(related_app_label, related_model_name)._meta.app_label, self.new_apps.get_model(related_app_label, related_model_name)._meta.model_name)\n+        self.generated_operations.setdefault(self.current_app, []).append(migrations.swappable_dependency(dependency))\n         self.generated_operations = {}\n         self.altered_indexes = {}\n         self.altered_constraints = {}\n", "normalized_occurrence": 1}
