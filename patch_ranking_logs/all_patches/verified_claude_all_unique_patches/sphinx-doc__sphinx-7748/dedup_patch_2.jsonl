{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..106eaa1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1066,9 +1066,15 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n+            if result is None:\n+                result = [], []\n+            result[0].append(args)\n+            result[1].append(retann)\n+        # If we found any signatures, combine them with ' | ' for overloaded methods\n+        if result is not None:\n+            combined_args = ' | '.join(filter(None, result[0]))\n+            combined_retann = ' | '.join(filter(None, result[1]))\n+            result = combined_args, combined_retann\n         return result\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..c68f872 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -776,8 +776,14 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n+            if result is None:\n+                result = ([], [])\n+            result[0].append(args)\n+            result[1].append(retann)\n+        if result is not None:\n+            combined_args = ' | '.join(filter(None, result[0]))\n+            combined_retann = ' | '.join(filter(None, result[1]))\n+            result = (combined_args, combined_retann)\n         return result\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n", "normalized_occurrence": 1}
