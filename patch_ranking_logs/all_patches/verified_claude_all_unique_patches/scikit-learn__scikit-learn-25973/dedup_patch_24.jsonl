{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25973", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex f742a36..c16a795 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2354,7 +2354,8 @@ class _CVIterableWrapper(BaseCrossValidator):\n     \"\"\"Wrapper class for old style cv objects and iterables.\"\"\"\n \n     def __init__(self, cv):\n-        self.cv = list(cv)\n+        self.cv = cv\n+        self._splits = None\n \n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n@@ -2375,7 +2376,9 @@ class _CVIterableWrapper(BaseCrossValidator):\n         n_splits : int\n             Returns the number of splitting iterations in the cross-validator.\n         \"\"\"\n-        return len(self.cv)\n+        if self._splits is None:\n+            self._splits = list(self.cv)\n+        return len(self._splits)\n \n     def split(self, X=None, y=None, groups=None):\n         \"\"\"Generate indices to split data into training and test set.\n@@ -2399,7 +2402,9 @@ class _CVIterableWrapper(BaseCrossValidator):\n         test : ndarray\n             The testing set indices for that split.\n         \"\"\"\n-        for train, test in self.cv:\n+        if self._splits is None:\n+            self._splits = list(self.cv)\n+        for train, test in self._splits:\n             yield train, test\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c67b459..8146c33 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2015,7 +2015,8 @@ class _CVIterableWrapper(BaseCrossValidator):\n     \"\"\"Wrapper class for old style cv objects and iterables.\"\"\"\n \n     def __init__(self, cv):\n-        self.cv = list(cv)\n+        self.cv = cv\n+        self._splits = None\n \n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n@@ -2036,7 +2037,9 @@ class _CVIterableWrapper(BaseCrossValidator):\n         n_splits : int\n             Returns the number of splitting iterations in the cross-validator.\n         \"\"\"\n-        return len(self.cv)\n+        if self._splits is None:\n+            self._splits = list(self.cv)\n+        return len(self._splits)\n \n     def split(self, X=None, y=None, groups=None):\n         \"\"\"Generate indices to split data into training and test set.\n@@ -2060,7 +2063,9 @@ class _CVIterableWrapper(BaseCrossValidator):\n         test : ndarray\n             The testing set indices for that split.\n         \"\"\"\n-        for train, test in self.cv:\n+        if self._splits is None:\n+            self._splits = list(self.cv)\n+        for train, test in self._splits:\n             yield (train, test)\n \n def check_cv(cv=5, y=None, *, classifier=False):\n", "normalized_occurrence": 1}
