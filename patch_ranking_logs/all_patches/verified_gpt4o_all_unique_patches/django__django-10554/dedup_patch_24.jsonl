{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..999ecfd 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -348,11 +348,8 @@ class SQLCompiler:\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n+                    if (is_ref and col_alias == src.refs) or col_alias == src.name:\n+                        src = src.source if is_ref else src\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n@@ -418,7 +415,7 @@ class SQLCompiler:\n                 if query.low_mark or query.high_mark:\n                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n                 if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+                    continue\n         parts = ()\n         for compiler in compilers:\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..ffd9ed0 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -184,11 +184,8 @@ class SQLCompiler:\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n+                    if is_ref and col_alias == src.refs or col_alias == src.name:\n+                        src = src.source if is_ref else src\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n@@ -236,7 +233,7 @@ class SQLCompiler:\n                 if query.low_mark or query.high_mark:\n                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n                 if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+                    continue\n         parts = ()\n         for compiler in compilers:\n             try:\n", "normalized_occurrence": 1}
