{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15629", "model_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex a65d38d..5db77e8 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -1,3 +1,4 @@\n+\n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n from django.db.models import NOT_PROVIDED\n \n@@ -12,6 +13,17 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     sql_alter_column_collate = \"MODIFY %(column)s %(type)s%(collation)s\"\n     sql_alter_column_no_default_null = \"ALTER COLUMN %(column)s SET DEFAULT NULL\"\n \n+    def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n+        \"\"\"Overridden to handle collation propagation for foreign keys.\"\"\"\n+        sql = super()._alter_column_type_sql(model, old_field, new_field, new_type)\n+        if (getattr(new_field, 'db_collation', None) or \n+            (new_field.remote_field and \n+             getattr(new_field.remote_field.model._meta.pk, 'db_collation', None))):\n+            collation = (new_field.db_collation or \n+                        new_field.remote_field.model._meta.pk.db_collation)\n+            sql = f\"{sql} COLLATE {collation}\"\n+        return sql\n+\n     # No 'CASCADE' which works as a no-op in MySQL but is undocumented\n     sql_delete_column = \"ALTER TABLE %(table)s DROP COLUMN %(column)s\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/mysql/schema.py b/django/db/backends/mysql/schema.py\nindex a0e95ce..4e61407 100644\n--- a/django/db/backends/mysql/schema.py\n+++ b/django/db/backends/mysql/schema.py\n@@ -7,6 +7,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     sql_alter_column_type = 'MODIFY %(column)s %(type)s'\n     sql_alter_column_collate = 'MODIFY %(column)s %(type)s%(collation)s'\n     sql_alter_column_no_default_null = 'ALTER COLUMN %(column)s SET DEFAULT NULL'\n+    def _alter_column_type_sql(self, model, old_field, new_field, new_type):\n+        sql = super()._alter_column_type_sql(model, old_field, new_field, new_type)\n+        if getattr(new_field, 'db_collation', None) or (new_field.remote_field and getattr(new_field.remote_field.model._meta.pk, 'db_collation', None)):\n+            collation = new_field.db_collation or new_field.remote_field.model._meta.pk.db_collation\n+            sql = f'{sql} COLLATE {collation}'\n+        return sql\n     sql_delete_column = 'ALTER TABLE %(table)s DROP COLUMN %(column)s'\n     sql_delete_unique = 'ALTER TABLE %(table)s DROP INDEX %(name)s'\n     sql_create_column_inline_fk = ', ADD CONSTRAINT %(name)s FOREIGN KEY (%(column)s) REFERENCES %(to_table)s(%(to_column)s)'\n", "normalized_occurrence": 1}
