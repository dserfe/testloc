{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..c61c5ee 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -110,11 +110,12 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n \n \n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n         return 'object'\n-    else:\n-        return arg\n+    elif arg is False:\n+        return EMPTY\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -1710,7 +1711,15 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, list(members.values())\n+            if isinstance(self.options.inherited_members, str) and self.options.inherited_members == 'object':\n+                return False, list(members.values())\n+            else:\n+                # Filter out members from specified base classes\n+                ignored_bases = self.options.inherited_members\n+                return False, [m for m in members.values() \n+                             if m.class_ == self.object or\n+                             (m.class_ is not None and \n+                              m.class_.__name__ not in ignored_bases)]\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..1d2ed70 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -58,8 +58,9 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return 'object'\n-    else:\n-        return arg\n+    elif arg is False:\n+        return EMPTY\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -980,7 +981,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+            if isinstance(self.options.inherited_members, str) and self.options.inherited_members == 'object':\n+                return (False, list(members.values()))\n+            else:\n+                ignored_bases = self.options.inherited_members\n+                return (False, [m for m in members.values() if m.class_ == self.object or (m.class_ is not None and m.class_.__name__ not in ignored_bases)])\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
