{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..99f2503 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -688,13 +688,14 @@ class Response(object):\n         elif not isinstance(chunk_size, int):\n             raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n         # simulate reading small chunks of the content\n-        reused_chunks = iter_slices(self._content, chunk_size)\n+        reused_chunks = (self._content[i:i + chunk_size] for i in range(0, len(self._content), chunk_size))\n \n         stream_chunks = generate()\n \n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n-        if decode_unicode:\n+        if decode_unicode and not self._content_consumed:\n+            # Ensure chunks are decoded properly when decode_unicode is True\n             chunks = stream_decode_response_unicode(chunks, self)\n \n         return chunks\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..01cd645 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -356,10 +356,10 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n-        reused_chunks = iter_slices(self._content, chunk_size)\n+        reused_chunks = (self._content[i:i + chunk_size] for i in range(0, len(self._content), chunk_size))\n         stream_chunks = generate()\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n-        if decode_unicode:\n+        if decode_unicode and (not self._content_consumed):\n             chunks = stream_decode_response_unicode(chunks, self)\n         return chunks\n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n", "normalized_occurrence": 1}
