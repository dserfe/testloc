{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ff9064f..6394b1f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -878,6 +878,19 @@ warn_explicit(\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = next_res, next_expl\n+        # Special handling for byte string comparisons\n+        if (isinstance(comp.left, ast.Bytes) or \n+            any(isinstance(c, ast.Bytes) for c in comp.comparators)):\n+            # Convert bytes objects to their string representation for clearer output\n+            results = [\n+                ast.Call(\n+                    func=ast.Name(id='repr', ctx=ast.Load()),\n+                    args=[r],\n+                    keywords=[],\n+                )\n+                for r in results\n+            ]\n+            \n         # Use pytest.assertion.util._reprcompare if that's available.\n         expl_call = self.helper(\n             \"_call_reprcompare\",\n@@ -890,4 +903,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex c715f90..424fa06 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -489,6 +489,8 @@ class AssertionRewriter(ast.NodeVisitor):\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = (next_res, next_expl)\n+        if isinstance(comp.left, ast.Bytes) or any((isinstance(c, ast.Bytes) for c in comp.comparators)):\n+            results = [ast.Call(func=ast.Name(id='repr', ctx=ast.Load()), args=[r], keywords=[]) for r in results]\n         expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(results, ast.Load()))\n         if len(comp.ops) > 1:\n             res = ast.BoolOp(ast.And(), load_names)\n", "normalized_occurrence": 1}
