{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..a55b5c5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1944,28 +1944,31 @@ class FiniteSet(Set, EvalfMixin):\n                 intervals.append(Interval(nums[-1], S.Infinity, True, True))\n \n                 if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n+                    return Complement(Union(*intervals, evaluate=False),\n                             FiniteSet(*syms), evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n+                    return Union(*intervals, evaluate=False)\n             elif nums == []:\n                 return None\n \n         elif isinstance(other, FiniteSet):\n-            unk = []\n-            for i in self:\n-                c = sympify(other.contains(i))\n-                if c is not S.true and c is not S.false:\n-                    unk.append(i)\n-            unk = FiniteSet(*unk)\n-            if unk == self:\n-                return\n-            not_true = []\n-            for i in other:\n-                c = sympify(self.contains(i))\n-                if c is not S.true:\n-                    not_true.append(i)\n-            return Complement(FiniteSet(*not_true), unk)\n+            nums = [m for m in self.args if m.is_number]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            not_in_other = [el for el in other if self.contains(el) != True]\n+            if nums != []:\n+                intervals = []  # Build up a list of intervals between the elements\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))  # both open\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+\n+                if syms != []:\n+                    return Complement(Union(*intervals, evaluate=False),\n+                            FiniteSet(*(syms + not_in_other)), evaluate=False)\n+                else:\n+                    return Union(*intervals, evaluate=False)\n+\n+            return FiniteSet(*not_in_other)\n \n         return Set._complement(self, other)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..ede55a0 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -850,26 +850,26 @@ class FiniteSet(Set, EvalfMixin):\n                     intervals.append(Interval(a, b, True, True))\n                 intervals.append(Interval(nums[-1], S.Infinity, True, True))\n                 if syms != []:\n-                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+                    return Complement(Union(*intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n+                    return Union(*intervals, evaluate=False)\n             elif nums == []:\n                 return None\n         elif isinstance(other, FiniteSet):\n-            unk = []\n-            for i in self:\n-                c = sympify(other.contains(i))\n-                if c is not S.true and c is not S.false:\n-                    unk.append(i)\n-            unk = FiniteSet(*unk)\n-            if unk == self:\n-                return\n-            not_true = []\n-            for i in other:\n-                c = sympify(self.contains(i))\n-                if c is not S.true:\n-                    not_true.append(i)\n-            return Complement(FiniteSet(*not_true), unk)\n+            nums = [m for m in self.args if m.is_number]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            not_in_other = [el for el in other if self.contains(el) != True]\n+            if nums != []:\n+                intervals = []\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+                if syms != []:\n+                    return Complement(Union(*intervals, evaluate=False), FiniteSet(*syms + not_in_other), evaluate=False)\n+                else:\n+                    return Union(*intervals, evaluate=False)\n+            return FiniteSet(*not_in_other)\n         return Set._complement(self, other)\n     def _union(self, other):\n         if other.is_FiniteSet:\n", "normalized_occurrence": 1}
