{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..7f2416a 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -596,6 +596,37 @@ class GaussianMixture(BaseMixture):\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Warning: Due to the final maximization step in the EM algorithm,\n+        with low iterations the prediction may not be 100% accurate.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape = [n_samples, n_features]\n+\n+        Returns\n+        -------\n+        C : array, shape = (n_samples,) component memberships\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\n+\n+    def predict(self, X):\n+        \"\"\"Predict labels for the data samples in X using trained model.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        return self.predict_proba(X).argmax(axis=1)\n+\n     def _check_parameters(self, X):\n         \"\"\"Check the Gaussian mixture parameters are well defined.\"\"\"\n         _, n_features = X.shape\n@@ -747,4 +778,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.predict(X)\n+    def predict(self, X):\n+        return self.predict_proba(X).argmax(axis=1)", "normalized_occurrence": 1}
