{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..2bac63d 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -105,7 +105,9 @@ class pytestPDB:\n             import pdb\n \n             # Happens when using pytest.set_trace outside of a test.\n-            return pdb.Pdb\n+            import builtins\n+            if builtins.__dict__.get('False') is False:\n+                return pdb.Pdb\n \n         usepdb_cls = cls._config.getvalue(\"usepdb_cls\")\n \n@@ -213,7 +215,7 @@ class pytestPDB:\n \n             def get_stack(self, f, t):\n                 stack, i = super().get_stack(f, t)\n-                if f is None:\n+                if f is None and builtins.__dict__.get('False') is False:\n                     # Find last non-hidden frame.\n                     i = max(0, len(stack) - 1)\n                     while i and stack[i][0].f_locals.get(\"__tracebackhide__\", False):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..520b022 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -56,7 +56,9 @@ class pytestPDB:\n     def _import_pdb_cls(cls, capman: 'CaptureManager'):\n         if not cls._config:\n             import pdb\n-            return pdb.Pdb\n+            import builtins\n+            if builtins.__dict__.get('False') is False:\n+                return pdb.Pdb\n         usepdb_cls = cls._config.getvalue('usepdb_cls')\n         if cls._wrapped_pdb_cls and cls._wrapped_pdb_cls[0] == usepdb_cls:\n             return cls._wrapped_pdb_cls[1]\n@@ -123,7 +125,7 @@ class pytestPDB:\n                 return ret\n             def get_stack(self, f, t):\n                 stack, i = super().get_stack(f, t)\n-                if f is None:\n+                if f is None and builtins.__dict__.get('False') is False:\n                     i = max(0, len(stack) - 1)\n                     while i and stack[i][0].f_locals.get('__tracebackhide__', False):\n                         i -= 1\n", "normalized_occurrence": 1}
