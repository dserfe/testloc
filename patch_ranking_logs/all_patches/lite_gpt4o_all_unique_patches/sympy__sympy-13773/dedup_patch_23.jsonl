{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 13b44f5..a86a1a4 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -30,6 +30,9 @@ class MatMul(MatrixExpr):\n \n     def __new__(cls, *args, **kwargs):\n         check = kwargs.get('check', True)\n+        # Ensure all arguments are matrices\n+        if any(not isinstance(arg, MatrixBase) for arg in args):\n+            raise ValueError(\"All arguments to MatMul must be matrices\")\n \n         args = list(map(sympify, args))\n         obj = Basic.__new__(cls, *args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex c9124f3..38347a2 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -11,6 +11,8 @@ class MatMul(MatrixExpr):\n     is_MatMul = True\n     def __new__(cls, *args, **kwargs):\n         check = kwargs.get('check', True)\n+        if any((not isinstance(arg, MatrixBase) for arg in args)):\n+            raise ValueError('All arguments to MatMul must be matrices')\n         args = list(map(sympify, args))\n         obj = Basic.__new__(cls, *args)\n         factor, matrices = obj.as_coeff_matrices()\n", "normalized_occurrence": 1}
