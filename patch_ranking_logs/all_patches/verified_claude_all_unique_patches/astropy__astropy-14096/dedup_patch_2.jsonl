{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..0676b18 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -894,7 +894,13 @@ class SkyCoord(ShapedLikeNDArray):\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n \n-        # Fail\n+        # First check if it's a property that exists but failed during access\n+        if attr in type(self).__dict__:\n+            if isinstance(type(self).__dict__[attr], property):\n+                # Let the original AttributeError propagate\n+                return object.__getattribute__(self, attr)\n+\n+        # Fail - attribute truly doesn't exist\n         raise AttributeError(\n             f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n         )\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..4b5923e 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -275,6 +275,9 @@ class SkyCoord(ShapedLikeNDArray):\n             frame_cls = frame_transform_graph.lookup_name(attr)\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n+        if attr in type(self).__dict__:\n+            if isinstance(type(self).__dict__[attr], property):\n+                return object.__getattribute__(self, attr)\n         raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n     def __setattr__(self, attr, val):\n         if '_sky_coord_frame' in self.__dict__:\n", "normalized_occurrence": 1}
