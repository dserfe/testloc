{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 5801e03..ad5f913 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -668,8 +668,21 @@ class BaseDatabaseOperations:\n         can vary between backends (e.g., Oracle with %% and &) and between\n         subexpression types (e.g., date expressions).\n         \"\"\"\n-        conn = \" %s \" % connector\n-        return conn.join(sub_expressions)\n+        if connector == '^':\n+            # Handle XOR as \"odd number of true values\" using boolean algebra\n+            if len(sub_expressions) <= 2:\n+                conn = \" %s \" % connector\n+                return conn.join(sub_expressions)\n+            else:\n+                # For 3+ expressions, we need to implement proper XOR logic\n+                # Build it as: (a ^ b) ^ c ^ d...\n+                result = \"(%s)\" % (\" %s \" % connector).join(sub_expressions[:2])\n+                for expr in sub_expressions[2:]:\n+                    result = \"(%s %s %s)\" % (result, connector, expr)\n+                return result\n+        else:\n+            conn = \" %s \" % connector\n+            return conn.join(sub_expressions)\n \n     def combine_duration_expression(self, connector, sub_expressions):\n         return self.combine_expression(connector, sub_expressions)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex ba948a6..2bc11ac 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -215,8 +215,18 @@ class BaseDatabaseOperations:\n     def conditional_expression_supported_in_where_clause(self, expression):\n         return True\n     def combine_expression(self, connector, sub_expressions):\n-        conn = ' %s ' % connector\n-        return conn.join(sub_expressions)\n+        if connector == '^':\n+            if len(sub_expressions) <= 2:\n+                conn = ' %s ' % connector\n+                return conn.join(sub_expressions)\n+            else:\n+                result = '(%s)' % (' %s ' % connector).join(sub_expressions[:2])\n+                for expr in sub_expressions[2:]:\n+                    result = '(%s %s %s)' % (result, connector, expr)\n+                return result\n+        else:\n+            conn = ' %s ' % connector\n+            return conn.join(sub_expressions)\n     def combine_duration_expression(self, connector, sub_expressions):\n         return self.combine_expression(connector, sub_expressions)\n     def binary_placeholder_sql(self, value):\n", "normalized_occurrence": 1}
