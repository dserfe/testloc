{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..4bb91f1 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,6 +3174,18 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove weak references that cannot be pickled\n+        state = self._remove_weakrefs(state)\n+        return state\n+\n+    def _remove_weakrefs(self, state):\n+        for key, value in state.items():\n+            if isinstance(value, weakref.ReferenceType):\n+                state[key] = None\n+            elif isinstance(value, dict):\n+                state[key] = self._remove_weakrefs(value)\n+            elif isinstance(value, list):\n+                state[key] = [v if not isinstance(v, weakref.ReferenceType) else None for v in value]\n         return state\n \n     def __setstate__(self, state):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..a661d73 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,16 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state = self._remove_weakrefs(state)\n+        return state\n+    def _remove_weakrefs(self, state):\n+        for key, value in state.items():\n+            if isinstance(value, weakref.ReferenceType):\n+                state[key] = None\n+            elif isinstance(value, dict):\n+                state[key] = self._remove_weakrefs(value)\n+            elif isinstance(value, list):\n+                state[key] = [v if not isinstance(v, weakref.ReferenceType) else None for v in value]\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n", "normalized_occurrence": 1}
