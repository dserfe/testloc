{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5840", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex be5f299..f76645e 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -640,7 +640,21 @@ class Session(nodes.FSCollector):\n                     \"file or package not found: \" + arg + \" (missing __init__.py?)\"\n                 )\n             raise UsageError(\"file not found: \" + arg)\n-        parts[0] = path.realpath()\n+        # Preserve the original path casing on Windows\n+        if os.name == 'nt':\n+            # Use the original casing from the argument\n+            orig_parts = os.path.normpath(parts[0]).split(os.sep)\n+            real_parts = path.realpath().strpath.split(os.sep)\n+            # Keep drive letter from realpath\n+            final_path = real_parts[0]\n+            for orig, real in zip(orig_parts, real_parts[1:]):\n+                if orig.lower() == real.lower():\n+                    final_path = os.path.join(final_path, orig)\n+                else:\n+                    final_path = os.path.join(final_path, real)\n+            parts[0] = py.path.local(final_path)\n+        else:\n+            parts[0] = path.realpath()\n         return parts\n \n     def matchnodes(self, matching, names):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex ea2d5dc..8a43701 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -419,7 +419,18 @@ class Session(nodes.FSCollector):\n             if self.config.option.pyargs:\n                 raise UsageError('file or package not found: ' + arg + ' (missing __init__.py?)')\n             raise UsageError('file not found: ' + arg)\n-        parts[0] = path.realpath()\n+        if os.name == 'nt':\n+            orig_parts = os.path.normpath(parts[0]).split(os.sep)\n+            real_parts = path.realpath().strpath.split(os.sep)\n+            final_path = real_parts[0]\n+            for orig, real in zip(orig_parts, real_parts[1:]):\n+                if orig.lower() == real.lower():\n+                    final_path = os.path.join(final_path, orig)\n+                else:\n+                    final_path = os.path.join(final_path, real)\n+            parts[0] = py.path.local(final_path)\n+        else:\n+            parts[0] = path.realpath()\n         return parts\n \n     def matchnodes(self, matching, names):\n", "normalized_occurrence": 1}
