{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..d8e3aae 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -451,15 +451,15 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             rhs_type = self.rhs.output_field.get_internal_type()\n         except FieldError:\n             rhs_type = None\n+        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         if (\n             not connection.features.has_native_duration_field and\n             'DurationField' in {lhs_type, rhs_type} and\n             lhs_type != rhs_type\n         ):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n-        datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n-        if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n", "occurrence": 7, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..e6b7aab 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -247,11 +247,11 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             rhs_type = self.rhs.output_field.get_internal_type()\n         except FieldError:\n             rhs_type = None\n-        if not connection.features.has_native_duration_field and 'DurationField' in {lhs_type, rhs_type} and (lhs_type != rhs_type):\n-            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n         if self.connector == self.SUB and lhs_type in datetime_fields and (lhs_type == rhs_type):\n             return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+        if not connection.features.has_native_duration_field and 'DurationField' in {lhs_type, rhs_type} and (lhs_type != rhs_type):\n+            return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n", "normalized_occurrence": 7}
