{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..13bac21 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -42,6 +43,15 @@ class Mod(Function):\n         from sympy.core.exprtools import gcd_terms\n         from sympy.polys.polyerrors import PolynomialError\n         from sympy.polys.polytools import gcd\n+        from sympy.core.numbers import Integer\n+\n+        # Handle negation specially to avoid moving it inside Mod\n+        if p.could_extract_minus_sign():\n+            if p.is_Mul:\n+                p = Mul._from_args([Integer(-1)] + [arg for arg in p.args if arg != Integer(-1)])\n+            else:\n+                p = -p\n+            return -cls(p, q)\n \n         def doit(p, q):\n             \"\"\"Try to return p % q if both are numbers or +/-p is known\n@@ -240,4 +250,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..bcee056 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -11,6 +11,13 @@ class Mod(Function):\n         from sympy.core.exprtools import gcd_terms\n         from sympy.polys.polyerrors import PolynomialError\n         from sympy.polys.polytools import gcd\n+        from sympy.core.numbers import Integer\n+        if p.could_extract_minus_sign():\n+            if p.is_Mul:\n+                p = Mul._from_args([Integer(-1)] + [arg for arg in p.args if arg != Integer(-1)])\n+            else:\n+                p = -p\n+            return -cls(p, q)\n         def doit(p, q):\n             if q.is_zero:\n                 raise ZeroDivisionError('Modulo by zero')\n", "normalized_occurrence": 1}
