{"model_name_or_path": "agentless", "instance_id": "django__django-15863", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 9a0415d..d85b88b 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -151,22 +151,25 @@ def floatformat(text, arg=-1):\n             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n+        if isinstance(text, Decimal):\n+            d = text\n+        else:\n+            input_val = repr(text)\n+            d = Decimal(input_val)\n     except InvalidOperation:\n         try:\n-            d = Decimal(str(float(text)))\n+            d = Decimal(str(text))\n         except (ValueError, InvalidOperation, TypeError):\n             return \"\"\n     try:\n         p = int(arg)\n     except ValueError:\n-        return input_val\n+        return repr(text)\n \n     try:\n         m = int(d) - d\n     except (ValueError, OverflowError, InvalidOperation):\n-        return input_val\n+        return repr(text)\n \n     if not m and p < 0:\n         return mark_safe(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 9243484..da39965 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -66,21 +66,24 @@ def floatformat(text, arg=-1):\n             use_l10n = False\n             arg = arg[:-1] or -1\n     try:\n-        input_val = repr(text)\n-        d = Decimal(input_val)\n+        if isinstance(text, Decimal):\n+            d = text\n+        else:\n+            input_val = repr(text)\n+            d = Decimal(input_val)\n     except InvalidOperation:\n         try:\n-            d = Decimal(str(float(text)))\n+            d = Decimal(str(text))\n         except (ValueError, InvalidOperation, TypeError):\n             return ''\n     try:\n         p = int(arg)\n     except ValueError:\n-        return input_val\n+        return repr(text)\n     try:\n         m = int(d) - d\n     except (ValueError, OverflowError, InvalidOperation):\n-        return input_val\n+        return repr(text)\n     if not m and p < 0:\n         return mark_safe(formats.number_format('%d' % int(d), 0, use_l10n=use_l10n, force_grouping=force_grouping))\n     exp = Decimal(1).scaleb(-abs(p))\n", "normalized_occurrence": 1}
