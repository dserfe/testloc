{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex 2b9692e..8a1508b 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -106,7 +106,7 @@ class ListTable(tables.ListTable):\n         return title, message\n \n \n-class Code(SphinxDirective):\n+class Option(SphinxDirective):\n     \"\"\"Parse and mark up content of a code block.\n \n     This is compatible with docutils' :rst:dir:`code` directive.\n@@ -120,34 +120,15 @@ class Code(SphinxDirective):\n     }\n     has_content = True\n \n+    option_spec = {}\n+    has_content = True\n+\n     def run(self) -> List[Node]:\n         self.assert_has_content()\n-\n-        code = '\\n'.join(self.content)\n-        node = nodes.literal_block(code, code,\n-                                   classes=self.options.get('classes', []),\n-                                   force='force' in self.options,\n-                                   highlight_args={})\n+        text = '\\n'.join(self.content)\n+        node = nodes.option(text, text)\n         self.add_name(node)\n         set_source_info(self, node)\n-\n-        if self.arguments:\n-            # highlight language specified\n-            node['language'] = self.arguments[0]\n-        else:\n-            # no highlight language specified.  Then this directive refers the current\n-            # highlight setting via ``highlight`` directive or ``highlight_language``\n-            # configuration.\n-            node['language'] = self.env.temp_data.get('highlight_language',\n-                                                      self.config.highlight_language)\n-\n-        if 'number-lines' in self.options:\n-            node['linenos'] = True\n-\n-            # if number given, treat as lineno-start.\n-            if self.options['number-lines']:\n-                node['highlight_args']['linenostart'] = self.options['number-lines']\n-\n         return [node]\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex d675290..7c64c4b 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -54,24 +54,18 @@ class ListTable(tables.ListTable):\n         if title:\n             set_source_info(self, title)\n         return (title, message)\n-class Code(SphinxDirective):\n+class Option(SphinxDirective):\n     optional_arguments = 1\n     option_spec = {'class': directives.class_option, 'force': directives.flag, 'name': directives.unchanged, 'number-lines': optional_int}\n     has_content = True\n+    option_spec = {}\n+    has_content = True\n     def run(self) -> List[Node]:\n         self.assert_has_content()\n-        code = '\\n'.join(self.content)\n-        node = nodes.literal_block(code, code, classes=self.options.get('classes', []), force='force' in self.options, highlight_args={})\n+        text = '\\n'.join(self.content)\n+        node = nodes.option(text, text)\n         self.add_name(node)\n         set_source_info(self, node)\n-        if self.arguments:\n-            node['language'] = self.arguments[0]\n-        else:\n-            node['language'] = self.env.temp_data.get('highlight_language', self.config.highlight_language)\n-        if 'number-lines' in self.options:\n-            node['linenos'] = True\n-            if self.options['number-lines']:\n-                node['highlight_args']['linenostart'] = self.options['number-lines']\n         return [node]\n class MathDirective(SphinxDirective):\n     has_content = True\n", "normalized_occurrence": 1}
