{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..967847c 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -208,23 +208,11 @@ class Token(CodegenAST):\n             else:\n                 return cls._get_constructor(attr)(arg)\n \n-    def __new__(cls, *args, **kwargs):\n+    def __new__(cls, text, **kwargs):\n         # Pass through existing instances when given as sole argument\n-        if len(args) == 1 and not kwargs and isinstance(args[0], cls):\n-            return args[0]\n-\n-        if len(args) > len(cls.__slots__):\n-            raise ValueError(\"Too many arguments (%d), expected at most %d\" % (len(args), len(cls.__slots__)))\n-\n-        attrvals = []\n-\n-        # Process positional arguments\n-        for attrname, argval in zip(cls.__slots__, args):\n-            if attrname in kwargs:\n-                raise TypeError('Got multiple values for attribute %r' % attrname)\n-\n-            attrvals.append(cls._construct(attrname, argval))\n-\n+        if not isinstance(text, str):\n+            raise TypeError(\"Argument text is not a string type.\")\n+        attrvals = [cls._construct_text(text)]\n         # Process keyword arguments\n         for attrname in cls.__slots__[len(args):]:\n             if attrname in kwargs:\n@@ -895,7 +883,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..b8ef528 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -198,16 +198,10 @@ class Token(CodegenAST):\n         else:\n             return cls._get_constructor(attr)(arg)\n \n-    def __new__(cls, *args, **kwargs):\n-        if len(args) == 1 and (not kwargs) and isinstance(args[0], cls):\n-            return args[0]\n-        if len(args) > len(cls.__slots__):\n-            raise ValueError('Too many arguments (%d), expected at most %d' % (len(args), len(cls.__slots__)))\n-        attrvals = []\n-        for attrname, argval in zip(cls.__slots__, args):\n-            if attrname in kwargs:\n-                raise TypeError('Got multiple values for attribute %r' % attrname)\n-            attrvals.append(cls._construct(attrname, argval))\n+    def __new__(cls, text, **kwargs):\n+        if not isinstance(text, str):\n+            raise TypeError('Argument text is not a string type.')\n+        attrvals = [cls._construct_text(text)]\n         for attrname in cls.__slots__[len(args):]:\n             if attrname in kwargs:\n                 argval = kwargs.pop(attrname)\n@@ -774,7 +768,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "normalized_occurrence": 1}
