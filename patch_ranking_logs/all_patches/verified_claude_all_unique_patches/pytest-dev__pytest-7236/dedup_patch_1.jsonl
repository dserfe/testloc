{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7236", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..0ccd31f 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -205,6 +205,13 @@ class TestCaseFunction(Function):\n         expecting_failure_class = getattr(self, \"__unittest_expecting_failure__\", False)\n         return bool(expecting_failure_class or expecting_failure_method)\n \n+    def _is_skipped(self) -> bool:\n+        \"\"\"Return True if the test method (or the entire class) is marked as skipped\"\"\"\n+        test_method = getattr(self._testcase, self.name)\n+        skip_method = getattr(test_method, \"__unittest_skip__\", False)\n+        skip_class = getattr(self._testcase, \"__unittest_skip__\", False)\n+        return bool(skip_class or skip_method)\n+\n     def runtest(self):\n         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n \n@@ -220,7 +227,7 @@ class TestCaseFunction(Function):\n             # arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not self._is_skipped():\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 4eb682f..9d9c685 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -146,13 +146,18 @@ class TestCaseFunction(Function):\n         expecting_failure_method = getattr(test_method, '__unittest_expecting_failure__', False)\n         expecting_failure_class = getattr(self, '__unittest_expecting_failure__', False)\n         return bool(expecting_failure_class or expecting_failure_method)\n+    def _is_skipped(self) -> bool:\n+        test_method = getattr(self._testcase, self.name)\n+        skip_method = getattr(test_method, '__unittest_skip__', False)\n+        skip_class = getattr(self._testcase, '__unittest_skip__', False)\n+        return bool(skip_class or skip_method)\n     def runtest(self):\n         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n         maybe_wrap_pytest_function_for_tracing(self)\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            if self.config.getoption('usepdb'):\n+            if self.config.getoption('usepdb') and (not self._is_skipped()):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, 'tearDown', lambda *args: None)\n             setattr(self._testcase, self.name, self.obj)\n", "normalized_occurrence": 1}
