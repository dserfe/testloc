{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..585c576 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,8 +213,23 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy import Mul\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            if isinstance(other, Mul):\n+                point = None\n+                scalar = None\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    else:\n+                        scalar = arg\n+                if point is not None and scalar is not None:\n+                    s, o = Point._normalize_dimension(self, point)\n+                    o = [scalar * coord for coord in o]\n+                else:\n+                    raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            else:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..ceb04a4 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,8 +62,23 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n+        from sympy import Mul\n         try:\n-            s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n+            if isinstance(other, Mul):\n+                point = None\n+                scalar = None\n+                for arg in other.args:\n+                    if isinstance(arg, Point):\n+                        point = arg\n+                    else:\n+                        scalar = arg\n+                if point is not None and scalar is not None:\n+                    s, o = Point._normalize_dimension(self, point)\n+                    o = [scalar * coord for coord in o]\n+                else:\n+                    raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n+            else:\n+                s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n", "normalized_occurrence": 1}
