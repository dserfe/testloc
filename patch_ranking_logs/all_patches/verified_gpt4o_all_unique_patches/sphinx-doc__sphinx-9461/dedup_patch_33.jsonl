{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 9e39b23..8579a5a 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -390,7 +390,7 @@ def isproperty(obj: Any) -> bool:\n         if isinstance(obj, cached_property):\n             return True\n \n-    return isinstance(obj, property)\n+    return isinstance(obj, property) or (isinstance(obj, classmethod) and isinstance(obj.__func__, property))\n \n \n def isgenericalias(obj: Any) -> bool:\n@@ -838,9 +838,11 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,\n     * inherited decorated methods\n     \"\"\"\n     doc = attrgetter(obj, '__doc__', None)\n-    if ispartial(obj) and doc == obj.__class__.__doc__:\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        doc = attrgetter(obj.__func__, '__doc__', None)\n+    elif ispartial(obj) and doc == obj.__class__.__doc__:\n         return getdoc(obj.func)\n-    elif doc is None and allow_inherited:\n+    if doc is None and allow_inherited:\n         if cls and name:\n             # Check a docstring of the attribute or method from super classes.\n             for basecls in getmro(cls):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 7ca87ab..467d1f5 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -229,7 +229,7 @@ def isproperty(obj: Any) -> bool:\n         from functools import cached_property\n         if isinstance(obj, cached_property):\n             return True\n-    return isinstance(obj, property)\n+    return isinstance(obj, property) or (isinstance(obj, classmethod) and isinstance(obj.__func__, property))\n def isgenericalias(obj: Any) -> bool:\n     if hasattr(typing, '_GenericAlias') and isinstance(obj, typing._GenericAlias):\n         return True\n@@ -499,9 +499,11 @@ def signature_from_ast(node: ast.FunctionDef, code: str='') -> inspect.Signature\n     return inspect.Signature(params, return_annotation=return_annotation)\n def getdoc(obj: Any, attrgetter: Callable=safe_getattr, allow_inherited: bool=False, cls: Any=None, name: str=None) -> str:\n     doc = attrgetter(obj, '__doc__', None)\n-    if ispartial(obj) and doc == obj.__class__.__doc__:\n+    if isinstance(obj, classmethod) and isinstance(obj.__func__, property):\n+        doc = attrgetter(obj.__func__, '__doc__', None)\n+    elif ispartial(obj) and doc == obj.__class__.__doc__:\n         return getdoc(obj.func)\n-    elif doc is None and allow_inherited:\n+    if doc is None and allow_inherited:\n         if cls and name:\n             for basecls in getmro(cls):\n                 meth = safe_getattr(basecls, name, None)\n", "normalized_occurrence": 1}
