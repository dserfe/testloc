{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..fbfae8c 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,22 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        \n+        window_size = int(self.window[0])\n+        if self.center:\n+            # For centered windows, adjust both start and stop\n+            offset = window_size // 2\n+            stops = np.arange(1, len(self.window_labels) + 1) + offset\n+            starts = stops - window_size\n+        else:\n+            # Original behavior for non-centered windows\n+            stops = np.arange(1, len(self.window_labels) + 1)\n+            starts = stops - window_size\n+            \n+        # Ensure we don't go out of bounds\n+        starts = np.maximum(starts, 0)\n+        stops = np.minimum(stops, len(self.window_labels))\n+        \n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 870b974..be8ce21 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -106,9 +106,16 @@ class DataArrayRolling(Rolling['DataArray']):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError('__iter__ is only supported for 1d-rolling')\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[:int(self.window[0])] = 0\n+        window_size = int(self.window[0])\n+        if self.center:\n+            offset = window_size // 2\n+            stops = np.arange(1, len(self.window_labels) + 1) + offset\n+            starts = stops - window_size\n+        else:\n+            stops = np.arange(1, len(self.window_labels) + 1)\n+            starts = stops - window_size\n+        starts = np.maximum(starts, 0)\n+        stops = np.minimum(stops, len(self.window_labels))\n         for label, start, stop in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n             counts = window.count(dim=self.dim[0])\n", "normalized_occurrence": 1}
