{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 05a8e83..7ba559c 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -140,7 +140,7 @@ class MigrationExecutor:\n             # would always evaluate to true.\n             state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n \n-        self.check_replacements()\n+        self.check_replacements(connection.alias)\n \n         return state\n \n@@ -249,26 +249,26 @@ class MigrationExecutor:\n                 with self.connection.schema_editor(\n                     atomic=migration.atomic\n                 ) as schema_editor:\n-                    state = migration.apply(state, schema_editor)\n+                    state = migration.apply(state, schema_editor, connection.alias)\n                     if not schema_editor.deferred_sql:\n-                        self.record_migration(migration)\n+                        self.record_migration(migration, connection.alias)\n                         migration_recorded = True\n         if not migration_recorded:\n-            self.record_migration(migration)\n+            self.record_migration(migration, connection.alias)\n         # Report progress\n         if self.progress_callback:\n             self.progress_callback(\"apply_success\", migration, fake)\n         return state\n \n-    def record_migration(self, migration):\n+    def record_migration(self, migration, database):\n         # For replacement migrations, record individual statuses\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n-                self.recorder.record_applied(app_label, name)\n+                self.recorder.record_applied(app_label, name, database)\n         else:\n-            self.recorder.record_applied(migration.app_label, migration.name)\n+            self.recorder.record_applied(migration.app_label, migration.name, database)\n \n-    def unapply_migration(self, state, migration, fake=False):\n+    def unapply_migration(self, state, migration, fake=False, database=None):\n         \"\"\"Run a migration backwards.\"\"\"\n         if self.progress_callback:\n             self.progress_callback(\"unapply_start\", migration, fake)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 800f25e..7975791 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -72,7 +72,7 @@ class MigrationExecutor:\n             state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)\n         else:\n             state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n-        self.check_replacements()\n+        self.check_replacements(connection.alias)\n         return state\n     def _migrate_all_forwards(self, state, plan, full_plan, fake, fake_initial):\n         migrations_to_run = {m[0] for m in plan}\n@@ -132,22 +132,22 @@ class MigrationExecutor:\n                     fake = True\n             if not fake:\n                 with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n-                    state = migration.apply(state, schema_editor)\n+                    state = migration.apply(state, schema_editor, connection.alias)\n                     if not schema_editor.deferred_sql:\n-                        self.record_migration(migration)\n+                        self.record_migration(migration, connection.alias)\n                         migration_recorded = True\n         if not migration_recorded:\n-            self.record_migration(migration)\n+            self.record_migration(migration, connection.alias)\n         if self.progress_callback:\n             self.progress_callback('apply_success', migration, fake)\n         return state\n-    def record_migration(self, migration):\n+    def record_migration(self, migration, database):\n         if migration.replaces:\n             for app_label, name in migration.replaces:\n-                self.recorder.record_applied(app_label, name)\n+                self.recorder.record_applied(app_label, name, database)\n         else:\n-            self.recorder.record_applied(migration.app_label, migration.name)\n-    def unapply_migration(self, state, migration, fake=False):\n+            self.recorder.record_applied(migration.app_label, migration.name, database)\n+    def unapply_migration(self, state, migration, fake=False, database=None):\n         if self.progress_callback:\n             self.progress_callback('unapply_start', migration, fake)\n         if not fake:\n", "normalized_occurrence": 1}
