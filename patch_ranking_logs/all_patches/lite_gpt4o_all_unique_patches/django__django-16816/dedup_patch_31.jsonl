{"model_name_or_path": "agentless", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..d8966d4 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -898,6 +898,14 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            # Check if it's a related model field\n+            if '__' in item:\n+                related_model, related_field = item.split('__', 1)\n+                try:\n+                    field = obj.model._meta.get_field(related_model).related_model._meta.get_field(related_field)\n+                    return []\n+                except FieldDoesNotExist:\n+                    pass\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..9e8ab64 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -340,6 +340,13 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n+            if '__' in item:\n+                related_model, related_field = item.split('__', 1)\n+                try:\n+                    field = obj.model._meta.get_field(related_model).related_model._meta.get_field(related_field)\n+                    return []\n+                except FieldDoesNotExist:\n+                    pass\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n", "normalized_occurrence": 1}
