{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..76509f2 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,13 +100,17 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Split only the last part if it's a django.db.models path\n+        if path.startswith(\"django.db.models.\"):\n+            module, name = path.rsplit(\".\", 1)\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            # For other paths, import the module part (everything up to the first class)\n+            parts = path.split(\".\")\n+            module = \".\".join(parts[:-1])\n+            name = path  # Keep the full path for the name\n+            imports = {\"import %s\" % parts[0]}  # Import just the top-level module\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..8f0f8f8 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,13 +70,15 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n+            module, name = path.rsplit('.', 1)\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n-            imports = {'import %s' % module}\n+            parts = path.split('.')\n+            module = '.'.join(parts[:-1])\n             name = path\n+            imports = {'import %s' % parts[0]}\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
