{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..b63e7fe 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -88,6 +88,57 @@ def insert_field_list(node: Element) -> nodes.field_list:\n \n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n                       suppress_rtype: bool = False) -> None:\n+    def normalize_name(name: str) -> str:\n+        \"\"\"Normalize parameter name by removing asterisks.\"\"\"\n+        return name.replace('*', '')\n+\n+    arguments: Dict[str, Dict[str, bool]] = {}\n+    fields = cast(Iterable[nodes.field], node)\n+    for field in fields:\n+        field_name = field[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                # :param xxx:\n+                name = parts[1]\n+                normalized_name = normalize_name(name)\n+                arg = arguments.setdefault(normalized_name, {})\n+                arg['param'] = True\n+                arg['original_name'] = name\n+            elif len(parts) > 2:\n+                # :param xxx yyy:\n+                name = ' '.join(parts[2:])\n+                normalized_name = normalize_name(name)\n+                arg = arguments.setdefault(normalized_name, {})\n+                arg['param'] = True\n+                arg['type'] = True\n+                arg['original_name'] = name\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            normalized_name = normalize_name(name)\n+            arg = arguments.setdefault(normalized_name, {})\n+            arg['type'] = True\n+            arg['original_name'] = name\n+        elif parts[0] == 'rtype':\n+            arguments['return'] = {'type': True}\n+\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+\n+        normalized_name = normalize_name(name)\n+        arg = arguments.get(normalized_name, {})\n+        original_name = arg.get('original_name', name)\n+        \n+        if not arg.get('type'):\n+            field = nodes.field()\n+            field += nodes.field_name('', 'type ' + original_name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            node += field\n+        if not arg.get('param'):\n+            field = nodes.field()\n+            field += nodes.field_name('', 'param ' + original_name)\n+            field += nodes.field_body('', nodes.paragraph('', ''))\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..82e8773 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -62,6 +62,50 @@ def insert_field_list(node: Element) -> nodes.field_list:\n         node += field_list\n     return field_list\n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppress_rtype: bool=False) -> None:\n+    def normalize_name(name: str) -> str:\n+        return name.replace('*', '')\n+    arguments: Dict[str, Dict[str, bool]] = {}\n+    fields = cast(Iterable[nodes.field], node)\n+    for field in fields:\n+        field_name = field[0].astext()\n+        parts = re.split(' +', field_name)\n+        if parts[0] == 'param':\n+            if len(parts) == 2:\n+                name = parts[1]\n+                normalized_name = normalize_name(name)\n+                arg = arguments.setdefault(normalized_name, {})\n+                arg['param'] = True\n+                arg['original_name'] = name\n+            elif len(parts) > 2:\n+                name = ' '.join(parts[2:])\n+                normalized_name = normalize_name(name)\n+                arg = arguments.setdefault(normalized_name, {})\n+                arg['param'] = True\n+                arg['type'] = True\n+                arg['original_name'] = name\n+        elif parts[0] == 'type':\n+            name = ' '.join(parts[1:])\n+            normalized_name = normalize_name(name)\n+            arg = arguments.setdefault(normalized_name, {})\n+            arg['type'] = True\n+            arg['original_name'] = name\n+        elif parts[0] == 'rtype':\n+            arguments['return'] = {'type': True}\n+    for name, annotation in annotations.items():\n+        if name == 'return':\n+            continue\n+        normalized_name = normalize_name(name)\n+        arg = arguments.get(normalized_name, {})\n+        original_name = arg.get('original_name', name)\n+        if not arg.get('type'):\n+            field = nodes.field()\n+            field += nodes.field_name('', 'type ' + original_name)\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            node += field\n+        if not arg.get('param'):\n+            field = nodes.field()\n+            field += nodes.field_name('', 'param ' + original_name)\n+            field += nodes.field_body('', nodes.paragraph('', ''))\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n", "normalized_occurrence": 1}
