{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..190fb8d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1010,10 +1010,14 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         return str(value)\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         return self.to_python(value)\n \n     def formfield(self, **kwargs):\n@@ -1769,6 +1773,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..d6285cc 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -487,9 +487,13 @@ class CharField(Field):\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n             return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         return str(value)\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         return self.to_python(value)\n     def formfield(self, **kwargs):\n         defaults = {'max_length': self.max_length}\n@@ -892,6 +896,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, enum.Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "normalized_occurrence": 1}
