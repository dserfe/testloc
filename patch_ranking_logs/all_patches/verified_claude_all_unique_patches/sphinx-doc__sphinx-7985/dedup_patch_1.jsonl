{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..06edebe 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,19 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if the local reference exists in the environment\n+                if uri.startswith('/'):\n+                    # absolute path from the source directory\n+                    target = uri[1:]\n+                else:\n+                    # relative path\n+                    target = uri\n+                \n+                # Check if target exists in the Sphinx environment\n+                if target in self.env.all_docs or target in self.env.titles:\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', 'Target not found: ' + target, 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..6ba14ed 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,14 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('/'):\n+                    target = uri[1:]\n+                else:\n+                    target = uri\n+                if target in self.env.all_docs or target in self.env.titles:\n+                    return ('working', '', 0)\n+                else:\n+                    return ('broken', 'Target not found: ' + target, 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
