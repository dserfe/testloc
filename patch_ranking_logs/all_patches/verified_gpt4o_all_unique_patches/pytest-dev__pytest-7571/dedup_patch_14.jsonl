{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..642c327 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -432,9 +432,11 @@ class LogCaptureFixture:\n         \"\"\"\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        initial_level = logger_obj.level\n+        self._initial_logger_levels.setdefault(logger, initial_level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        request.addfinalizer(lambda: self._finalize_logger(logger, initial_level))\n \n     @contextmanager\n     def at_level(\n@@ -458,6 +460,10 @@ class LogCaptureFixture:\n             self.handler.setLevel(handler_orig_level)\n \n \n+def _finalize_logger(self, logger, initial_level):\n+    logger_obj = logging.getLogger(logger)\n+    logger_obj.setLevel(initial_level)\n+\n @pytest.fixture\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     \"\"\"Access and control log capturing.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..ddb330a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -189,9 +189,11 @@ class LogCaptureFixture:\n         self.handler.reset()\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        initial_level = logger_obj.level\n+        self._initial_logger_levels.setdefault(logger, initial_level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+        request.addfinalizer(lambda: self._finalize_logger(logger, initial_level))\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n@@ -204,6 +206,9 @@ class LogCaptureFixture:\n         finally:\n             logger_obj.setLevel(orig_level)\n             self.handler.setLevel(handler_orig_level)\n+def _finalize_logger(self, logger, initial_level):\n+    logger_obj = logging.getLogger(logger)\n+    logger_obj.setLevel(initial_level)\n @pytest.fixture\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n     result = LogCaptureFixture(request.node)\n", "normalized_occurrence": 1}
