{"model_name_or_path": "agentless", "instance_id": "django__django-13448", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex d751f3a..30dd25e 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -58,17 +58,19 @@ class BaseDatabaseCreation:\n         settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n         self.connection.settings_dict[\"NAME\"] = test_database_name\n \n-        if self.connection.settings_dict['TEST']['MIGRATE']:\n-            # We report migrate messages at one level lower than that\n-            # requested. This ensures we don't get flooded with messages during\n-            # testing (unless you really ask to be flooded).\n-            call_command(\n-                'migrate',\n-                verbosity=max(verbosity - 1, 0),\n-                interactive=False,\n-                database=self.connection.alias,\n-                run_syncdb=True,\n-            )\n+        if self.connection.settings_dict['TEST'].get('MIGRATE', True):\n+            migrate_cmd = 'migrate'\n+        else:\n+            migrate_cmd = 'migrate --run-syncdb'\n+        # We report migrate messages at one level lower than that\n+        # requested. This ensures we don't get flooded with messages during\n+        # testing (unless you really ask to be flooded).\n+        call_command(\n+            migrate_cmd,\n+            verbosity=max(verbosity - 1, 0),\n+            interactive=False,\n+            database=self.connection.alias,\n+        )\n \n         # We then serialize the current state of the database into a string\n         # and store it on the connection. This slightly horrific process is so people\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 4f2d479..678d326 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -26,8 +26,11 @@ class BaseDatabaseCreation:\n         self.connection.close()\n         settings.DATABASES[self.connection.alias]['NAME'] = test_database_name\n         self.connection.settings_dict['NAME'] = test_database_name\n-        if self.connection.settings_dict['TEST']['MIGRATE']:\n-            call_command('migrate', verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias, run_syncdb=True)\n+        if self.connection.settings_dict['TEST'].get('MIGRATE', True):\n+            migrate_cmd = 'migrate'\n+        else:\n+            migrate_cmd = 'migrate --run-syncdb'\n+        call_command(migrate_cmd, verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias)\n         if serialize:\n             self.connection._test_serialized_contents = self.serialize_db_to_string()\n         call_command('createcachetable', database=self.connection.alias)\n", "normalized_occurrence": 1}
