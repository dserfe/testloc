{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..7e9023e 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -328,9 +328,15 @@ class Collector:\n             # delete instances\n             for model, instances in self.data.items():\n                 query = sql.DeleteQuery(model)\n-                pk_list = [obj.pk for obj in instances]\n-                count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                pk_dict = {}\n+                for obj in instances:\n+                    for related in model._meta.related_objects:\n+                        if related.name not in pk_dict:\n+                            pk_dict[related.name] = []\n+                        pk_dict[related.name].append(obj.pk)\n+                for related_field, related_pks in pk_dict.items():\n+                    count = query.delete_batch(related_pks, self.using)\n+                    deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\n@@ -346,4 +352,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..0a100a3 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -167,9 +167,15 @@ class Collector:\n                 instances.reverse()\n             for model, instances in self.data.items():\n                 query = sql.DeleteQuery(model)\n-                pk_list = [obj.pk for obj in instances]\n-                count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                pk_dict = {}\n+                for obj in instances:\n+                    for related in model._meta.related_objects:\n+                        if related.name not in pk_dict:\n+                            pk_dict[related.name] = []\n+                        pk_dict[related.name].append(obj.pk)\n+                for related_field, related_pks in pk_dict.items():\n+                    count = query.delete_batch(related_pks, self.using)\n+                    deleted_counter[model._meta.label] += count\n                 if not model._meta.auto_created:\n                     for obj in instances:\n                         signals.post_delete.send(sender=model, instance=obj, using=self.using)\n", "normalized_occurrence": 1}
