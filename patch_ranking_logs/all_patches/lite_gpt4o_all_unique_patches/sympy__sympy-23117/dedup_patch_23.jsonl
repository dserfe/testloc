{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..d983208 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -195,6 +195,8 @@ class NDimArray(Printable):\n                 return [pointer], ()\n \n             result = []\n+            if len(pointer) == 0:\n+                return [], ()\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n                 raise ValueError(\"could not determine shape unambiguously\")\n@@ -211,8 +213,8 @@ class NDimArray(Printable):\n \n         if shape is None:\n             if iterable is None:\n-                shape = ()\n-                iterable = ()\n+                shape = (0,)\n+                iterable = []\n             # Construction of a sparse array from a sparse array\n             elif isinstance(iterable, SparseNDimArray):\n                 return iterable._shape, iterable._sparse_array\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..9d32342 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -71,6 +71,8 @@ class NDimArray(Printable):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n             result = []\n+            if len(pointer) == 0:\n+                return ([], ())\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n                 raise ValueError('could not determine shape unambiguously')\n@@ -84,8 +86,8 @@ class NDimArray(Printable):\n         from sympy.tensor.array import SparseNDimArray\n         if shape is None:\n             if iterable is None:\n-                shape = ()\n-                iterable = ()\n+                shape = (0,)\n+                iterable = []\n             elif isinstance(iterable, SparseNDimArray):\n                 return (iterable._shape, iterable._sparse_array)\n             elif isinstance(iterable, NDimArray):\n", "normalized_occurrence": 1}
