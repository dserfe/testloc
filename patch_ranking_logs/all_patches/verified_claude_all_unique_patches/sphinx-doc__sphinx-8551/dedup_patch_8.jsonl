{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..2d276fd 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,17 +1260,25 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n+                    # First try fully qualified name in current module\n                     if modname and modname + '.' + name in self.objects and \\\n                        self.objects[modname + '.' + name].objtype in objtypes:\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n+                    # If not found and we're in fuzzy mode, search more broadly\n+                    elif searchmode == 1:\n+                        # First try exact matches in the current context\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        current_matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                         if oname.endswith(searchname) and\n+                                         oname.startswith(modname + '.') and\n+                                         self.objects[oname].objtype in objtypes]\n+                        if current_matches:\n+                            matches = current_matches\n+                        else:\n+                            # Fall back to searching everywhere\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..4d4bdf5 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -761,11 +761,13 @@ class PythonDomain(Domain):\n                 if not newname:\n                     if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n+                    elif searchmode == 1:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        current_matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and oname.startswith(modname + '.') and (self.objects[oname].objtype in objtypes)]\n+                        if current_matches:\n+                            matches = current_matches\n+                        else:\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
