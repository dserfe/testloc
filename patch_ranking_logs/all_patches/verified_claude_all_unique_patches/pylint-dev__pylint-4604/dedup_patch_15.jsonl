{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..90f851a 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1829,13 +1829,11 @@ class VariablesChecker(BaseChecker):\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \n-        if (\n-            isinstance(type_annotation.value, astroid.Attribute)\n-            and isinstance(type_annotation.value.expr, astroid.Name)\n-            and type_annotation.value.expr.name == TYPING_MODULE\n-        ):\n-            self._type_annotation_names.append(TYPING_MODULE)\n-            return\n+        if isinstance(type_annotation.value, astroid.Attribute):\n+            if isinstance(type_annotation.value.expr, astroid.Name):\n+                # Store any module name used in type annotations (like abc.ABC)\n+                self._type_annotation_names.append(type_annotation.value.expr.name)\n+                return\n \n         self._type_annotation_names.extend(\n             annotation.name\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..d698272 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -684,9 +684,10 @@ class VariablesChecker(BaseChecker):\n             return\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n-        if isinstance(type_annotation.value, astroid.Attribute) and isinstance(type_annotation.value.expr, astroid.Name) and (type_annotation.value.expr.name == TYPING_MODULE):\n-            self._type_annotation_names.append(TYPING_MODULE)\n-            return\n+        if isinstance(type_annotation.value, astroid.Attribute):\n+            if isinstance(type_annotation.value.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.value.expr.name)\n+                return\n         self._type_annotation_names.extend((annotation.name for annotation in type_annotation.nodes_of_class(astroid.Name)))\n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n", "normalized_occurrence": 1}
