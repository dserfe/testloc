{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..4000ee4 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1029,33 +1029,50 @@ class MultiValueField(Field):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n-        for i, field in enumerate(self.fields):\n-            try:\n-                field_value = value[i]\n-            except IndexError:\n-                field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n-            try:\n-                clean_data.append(field.clean(field_value))\n-            except ValidationError as e:\n-                # Collect all validation errors in a single list, which we'll\n-                # raise at the end of clean(), rather than raising a single\n-                # exception for the first error we encounter. Skip duplicates.\n-                errors.extend(m for m in e.error_list if m not in errors)\n-        if errors:\n-            raise ValidationError(errors)\n+        # If require_all_fields is False, validate subfields independently\n+        if not self.require_all_fields and not self.required:\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field_value in self.empty_values and field.required:\n+                    errors.append(field.error_messages['required'])\n+                else:\n+                    try:\n+                        clean_data.append(field.clean(field_value))\n+                    except ValidationError as e:\n+                        errors.extend(m for m in e.error_list if m not in errors)\n+            if errors:\n+                raise ValidationError(errors)\n+        else:\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field_value in self.empty_values:\n+                    if self.require_all_fields:\n+                        # Raise a 'required' error if the MultiValueField is\n+                        # required and any field is empty.\n+                        if self.required:\n+                            raise ValidationError(self.error_messages['required'], code='required')\n+                    elif field.required:\n+                        # Otherwise, add an 'incomplete' error to the list of\n+                        # collected errors and skip field cleaning, if a required\n+                        # field is empty.\n+                        if field.error_messages['incomplete'] not in errors:\n+                            errors.append(field.error_messages['incomplete'])\n+                        continue\n+                try:\n+                    clean_data.append(field.clean(field_value))\n+                except ValidationError as e:\n+                    # Collect all validation errors in a single list, which we'll\n+                    # raise at the end of clean(), rather than raising a single\n+                    # exception for the first error we encounter. Skip duplicates.\n+                    errors.extend(m for m in e.error_list if m not in errors)\n+            if errors:\n+                raise ValidationError(errors)\n \n         out = self.compress(clean_data)\n         self.validate(out)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..a3cd2c5 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -596,25 +596,41 @@ class MultiValueField(Field):\n                     return self.compress([])\n         else:\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n-        for i, field in enumerate(self.fields):\n-            try:\n-                field_value = value[i]\n-            except IndexError:\n-                field_value = None\n-            if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n-            try:\n-                clean_data.append(field.clean(field_value))\n-            except ValidationError as e:\n-                errors.extend((m for m in e.error_list if m not in errors))\n-        if errors:\n-            raise ValidationError(errors)\n+        if not self.require_all_fields and (not self.required):\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field_value in self.empty_values and field.required:\n+                    errors.append(field.error_messages['required'])\n+                else:\n+                    try:\n+                        clean_data.append(field.clean(field_value))\n+                    except ValidationError as e:\n+                        errors.extend((m for m in e.error_list if m not in errors))\n+            if errors:\n+                raise ValidationError(errors)\n+        else:\n+            for i, field in enumerate(self.fields):\n+                try:\n+                    field_value = value[i]\n+                except IndexError:\n+                    field_value = None\n+                if field_value in self.empty_values:\n+                    if self.require_all_fields:\n+                        if self.required:\n+                            raise ValidationError(self.error_messages['required'], code='required')\n+                    elif field.required:\n+                        if field.error_messages['incomplete'] not in errors:\n+                            errors.append(field.error_messages['incomplete'])\n+                        continue\n+                try:\n+                    clean_data.append(field.clean(field_value))\n+                except ValidationError as e:\n+                    errors.extend((m for m in e.error_list if m not in errors))\n+            if errors:\n+                raise ValidationError(errors)\n         out = self.compress(clean_data)\n         self.validate(out)\n         self.run_validators(out)\n", "normalized_occurrence": 1}
