{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23413", "model_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex aec23b1..5da90bb 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -235,11 +235,20 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n         if iszerofunc(d) is False:\n             return 2\n \n-    mat, _       = _permute_complexity_right(M, iszerofunc=iszerofunc)\n-    _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True,\n-            normalize=False, zero_above=False)\n-\n-    return len(pivots)\n+    mat, _ = _permute_complexity_right(M, iszerofunc=iszerofunc)\n+    reduced_mat, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True,\n+                                         normalize=False, zero_above=False)\n+\n+    # Ensure that the rank is correctly identified\n+    rank = len(pivots)\n+    if rank < min(M.rows, M.cols):\n+        # Check if the remaining rows are all zero\n+        remaining_rows = reduced_mat[rank:, :]\n+        if all(iszerofunc(e) for e in remaining_rows):\n+            return rank\n+        else:\n+            return rank + 1\n+    return rank\n \n \n def _rref(M, iszerofunc=_iszero, simplify=False, pivots=True,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex bf0ff55..525b00a 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -89,8 +89,15 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n         if iszerofunc(d) is False:\n             return 2\n     mat, _ = _permute_complexity_right(M, iszerofunc=iszerofunc)\n-    _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n-    return len(pivots)\n+    reduced_mat, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n+    rank = len(pivots)\n+    if rank < min(M.rows, M.cols):\n+        remaining_rows = reduced_mat[rank:, :]\n+        if all((iszerofunc(e) for e in remaining_rows)):\n+            return rank\n+        else:\n+            return rank + 1\n+    return rank\n def _rref(M, iszerofunc=_iszero, simplify=False, pivots=True, normalize_last=True):\n     simpfunc = simplify if isinstance(simplify, FunctionType) else _simplify\n     mat, pivot_cols, _ = _row_reduce(M, iszerofunc, simpfunc, normalize_last, normalize=True, zero_above=True)\n", "normalized_occurrence": 1}
