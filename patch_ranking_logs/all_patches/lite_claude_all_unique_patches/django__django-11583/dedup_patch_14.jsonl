{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11583", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex f44661f..7e6a6a8 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -138,10 +138,11 @@ def iter_modules_and_files(modules, extra_files):\n             continue\n         path = Path(filename)\n         try:\n-            resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            # The module could have been removed, don't fail loudly if this\n-            # is the case.\n+            # Use non-strict resolution and handle ValueError from null bytes\n+            resolved_path = path.resolve(strict=False).absolute()\n+        except (FileNotFoundError, ValueError):\n+            # The module could have been removed or path could contain null bytes\n+            # Don't fail loudly in either case\n             continue\n         results.add(resolved_path)\n     return frozenset(results)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex e37abac..6489439 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -92,8 +92,8 @@ def iter_modules_and_files(modules, extra_files):\n             continue\n         path = Path(filename)\n         try:\n-            resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n+            resolved_path = path.resolve(strict=False).absolute()\n+        except (FileNotFoundError, ValueError):\n             continue\n         results.add(resolved_path)\n     return frozenset(results)\n", "normalized_occurrence": 2}
