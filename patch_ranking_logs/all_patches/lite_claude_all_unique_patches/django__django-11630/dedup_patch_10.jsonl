{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 231b761..3240fc6 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,50 +1,17 @@\n+\n import inspect\n import types\n from collections import defaultdict\n from itertools import chain\n \n from django.apps import apps\n+from django.conf import settings\n from django.core.checks import Error, Tags, register\n \n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n-    indexes = defaultdict(list)\n-    constraints = defaultdict(list)\n-    errors = []\n-    if app_configs is None:\n-        models = apps.get_models()\n-    else:\n-        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n-    for model in models:\n-        if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n-            errors.append(\n-                Error(\n-                    \"The '%s.check()' class method is currently overridden by %r.\"\n-                    % (model.__name__, model.check),\n-                    obj=model,\n-                    id='models.E020'\n-                )\n-            )\n-        else:\n-            errors.extend(model.check(**kwargs))\n-        for model_index in model._meta.indexes:\n-            indexes[model_index.name].append(model._meta.label)\n-        for model_constraint in model._meta.constraints:\n-            constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n-                )\n-            )\n+\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8001d47..ca8591f 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -3,31 +3,10 @@ import types\n from collections import defaultdict\n from itertools import chain\n from django.apps import apps\n+from django.conf import settings\n from django.core.checks import Error, Tags, register\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n-    db_table_models = defaultdict(list)\n-    indexes = defaultdict(list)\n-    constraints = defaultdict(list)\n-    errors = []\n-    if app_configs is None:\n-        models = apps.get_models()\n-    else:\n-        models = chain.from_iterable((app_config.get_models() for app_config in app_configs))\n-    for model in models:\n-        if model._meta.managed and (not model._meta.proxy):\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n-        if not inspect.ismethod(model.check):\n-            errors.append(Error(\"The '%s.check()' class method is currently overridden by %r.\" % (model.__name__, model.check), obj=model, id='models.E020'))\n-        else:\n-            errors.extend(model.check(**kwargs))\n-        for model_index in model._meta.indexes:\n-            indexes[model_index.name].append(model._meta.label)\n-        for model_constraint in model._meta.constraints:\n-            constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(Error(\"db_table '%s' is used by multiple models: %s.\" % (db_table, ', '.join(db_table_models[db_table])), obj=db_table, id='models.E028'))\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n", "normalized_occurrence": 1}
