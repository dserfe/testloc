{"model_name_or_path": "agentless", "instance_id": "django__django-12915", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex f289230..e82ec37 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -85,4 +85,17 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n+\n+    async def get_response_async(self, request):\n+        \"\"\"\n+        Returns the response for a given request asynchronously.\n+        \"\"\"\n+        filename = self.get_path(request.path_info)\n+        if not self.file_access_safe(filename):\n+            return await super().get_response_async(request)\n+        try:\n+            statobj = await sync_to_async(os.stat)(filename)\n+        except FileNotFoundError:\n+            return await super().get_response_async(request)\n+        return await self.serve(request, filename, statobj)\n", "occurrence": 1, "normalized_patch": "--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n+    async def get_response_async(self, request):\n+        filename = self.get_path(request.path_info)\n+        if not self.file_access_safe(filename):\n+            return await super().get_response_async(request)\n+        try:\n+            statobj = await sync_to_async(os.stat)(filename)\n+        except FileNotFoundError:\n+            return await super().get_response_async(request)\n+        return await self.serve(request, filename, statobj)", "normalized_occurrence": 1}
