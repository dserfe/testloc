{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..d09df67 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1528,18 +1528,19 @@ class PairGrid(Grid):\n             ax = self.axes[i, j]\n             if ax is None:  # i.e. we are in corner mode\n                 continue\n+            if \"hue\" in signature(func).parameters and \"hue\" in kws:\n+                self._hue_var = \"hue\"\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n         self._add_axis_labels()\n \n-        if \"hue\" in signature(func).parameters:\n-            self.hue_names = list(self._legend_data)\n-\n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot on the specified axes.\"\"\"\n         if \"hue\" not in signature(func).parameters:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n \n+        if \"hue\" not in kwargs and self._hue_var is not None:\n+            kwargs[\"hue\"] = hue\n         kwargs = kwargs.copy()\n         if str(func.__module__).startswith(\"seaborn\"):\n             kwargs[\"ax\"] = ax\n@@ -1575,6 +1576,8 @@ class PairGrid(Grid):\n \n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot while iterating over hue subsets.\"\"\"\n+        if \"hue\" not in kwargs and self._hue_var is not None:\n+            kwargs[\"hue\"] = hue\n         kwargs = kwargs.copy()\n         if str(func.__module__).startswith(\"seaborn\"):\n             kwargs[\"ax\"] = ax\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..4baf974 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -719,14 +719,16 @@ class PairGrid(Grid):\n             ax = self.axes[i, j]\n             if ax is None:\n                 continue\n+            if 'hue' in signature(func).parameters and 'hue' in kws:\n+                self._hue_var = 'hue'\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n         self._add_axis_labels()\n-        if 'hue' in signature(func).parameters:\n-            self.hue_names = list(self._legend_data)\n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         if 'hue' not in signature(func).parameters:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n+        if 'hue' not in kwargs and self._hue_var is not None:\n+            kwargs['hue'] = hue\n         kwargs = kwargs.copy()\n         if str(func.__module__).startswith('seaborn'):\n             kwargs['ax'] = ax\n@@ -752,6 +754,8 @@ class PairGrid(Grid):\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n+        if 'hue' not in kwargs and self._hue_var is not None:\n+            kwargs['hue'] = hue\n         kwargs = kwargs.copy()\n         if str(func.__module__).startswith('seaborn'):\n             kwargs['ax'] = ax\n", "normalized_occurrence": 1}
