{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..d55ea69 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -45,4 +45,23 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Returns the set-theoretic definition of the Contains predicate.\n+        \n+        Examples\n+        ========\n+        \n+        >>> from sympy import Contains, Symbol, FiniteSet\n+        >>> x = Symbol('x')\n+        >>> Contains(x, FiniteSet(1, 2)).as_set()\n+        FiniteSet(x)\n+        \"\"\"\n+        from sympy.sets.sets import FiniteSet\n+        # If we can evaluate the contains to a boolean, return empty/singleton set\n+        result = self.evaluate()\n+        if result is S.true:\n+            return FiniteSet(self.args[0])\n+        elif result is S.false:\n+            return EmptySet\n+        # Otherwise return unevaluated\n+        return FiniteSet(self.args[0])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..307b501 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,10 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        from sympy.sets.sets import FiniteSet\n+        result = self.evaluate()\n+        if result is S.true:\n+            return FiniteSet(self.args[0])\n+        elif result is S.false:\n+            return EmptySet\n+        return FiniteSet(self.args[0])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
