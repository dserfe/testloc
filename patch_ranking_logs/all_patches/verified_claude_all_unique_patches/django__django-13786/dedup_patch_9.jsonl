{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13786", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 05e9a94..6ed7449 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,19 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            # Create a copy of the current options and update with new options\n+            options = self.options.copy()\n+            # Remove any option that isn't specified in the AlterModelOptions operation\n+            for key in list(options):\n+                if key not in operation.options:\n+                    del options[key]\n+            # Update with the new options\n+            options.update(operation.options)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex bf5c114..294709c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -74,7 +74,12 @@ class CreateModel(ModelOperation):\n         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:\n             return [CreateModel(operation.new_name, fields=self.fields, options=self.options, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n-            return [CreateModel(self.name, fields=self.fields, options={**self.options, **operation.options}, bases=self.bases, managers=self.managers)]\n+            options = self.options.copy()\n+            for key in list(options):\n+                if key not in operation.options:\n+                    del options[key]\n+            options.update(operation.options)\n+            return [CreateModel(self.name, fields=self.fields, options=options, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:\n             return [CreateModel(self.name, fields=self.fields, options={**self.options, **{operation.option_name: operation.option_value}}, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:\n", "normalized_occurrence": 4}
