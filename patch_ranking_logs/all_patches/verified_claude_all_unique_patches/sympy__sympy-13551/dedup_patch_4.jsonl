{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..1442c7c 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -275,6 +275,23 @@ class Product(ExprWithIntLimits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n+            # For simple polynomial cases in k, evaluate directly\n+            if term.is_polynomial(k):\n+                dif = n - a\n+                if dif.is_Integer:\n+                    return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+\n+            # Otherwise try to handle as ratio\n+            p, q = term.as_numer_denom()\n+            q = self._eval_product(q, (k, a, n))\n+            if q.is_Number:\n+                # There is expression, which couldn't change by\n+                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n+                # We have to catch this case.\n+                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+            else:\n+                p = self._eval_product(p, (k, a, n))\n+            return p / q\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..e3aa447 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -75,6 +75,17 @@ class Product(ExprWithIntLimits):\n                 B = self.func(arg, (k, a, n)).doit()\n             return poly.LC() ** (n - a + 1) * A * B\n         elif term.is_Add:\n+            if term.is_polynomial(k):\n+                dif = n - a\n+                if dif.is_Integer:\n+                    return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+            p, q = term.as_numer_denom()\n+            q = self._eval_product(q, (k, a, n))\n+            if q.is_Number:\n+                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+            else:\n+                p = self._eval_product(p, (k, a, n))\n+            return p / q\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n", "normalized_occurrence": 1}
