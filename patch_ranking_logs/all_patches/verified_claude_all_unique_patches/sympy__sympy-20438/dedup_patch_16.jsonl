{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..4104df0 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -397,6 +397,11 @@ class Set(Basic):\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n+        if isinstance(self, ProductSet) and isinstance(other, FiniteSet):\n+            # Convert ProductSet to its expanded form for comparison with FiniteSet\n+            expanded = self.rewrite(FiniteSet)\n+            if expanded != self:  # Only proceed if rewrite was successful\n+                return expanded.is_subset(other)\n         return None\n \n     def _eval_is_superset(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..9d4d642 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -140,6 +140,10 @@ class Set(Basic):\n         if self.intersect(other) == self:\n             return True\n     def _eval_is_subset(self, other):\n+        if isinstance(self, ProductSet) and isinstance(other, FiniteSet):\n+            expanded = self.rewrite(FiniteSet)\n+            if expanded != self:\n+                return expanded.is_subset(other)\n         return None\n     def _eval_is_superset(self, other):\n         return None\n", "normalized_occurrence": 1}
