{"model_name_or_path": "agentless", "instance_id": "django__django-15503", "model_patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex d5dff6f..feb86d4 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -308,8 +308,20 @@ class DatabaseOperations(BaseDatabaseOperations):\n             converters.append(self.convert_uuidfield_value)\n         elif internal_type == \"BooleanField\":\n             converters.append(self.convert_booleanfield_value)\n+        elif internal_type == \"JSONField\":\n+            converters.append(self.convert_jsonfield_value)\n         return converters\n \n+    def convert_jsonfield_value(self, value, expression, connection):\n+        if isinstance(value, str):\n+            try:\n+                value = json.loads(value)\n+            except json.JSONDecodeError:\n+                pass\n+        if isinstance(value, dict):\n+            value = {str(k): v for k, v in value.items()}\n+        return value\n+\n     def convert_datetimefield_value(self, value, expression, connection):\n         if value is not None:\n             if not isinstance(value, datetime.datetime):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 042ffd6..8afb390 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -150,7 +150,18 @@ class DatabaseOperations(BaseDatabaseOperations):\n             converters.append(self.convert_uuidfield_value)\n         elif internal_type == 'BooleanField':\n             converters.append(self.convert_booleanfield_value)\n+        elif internal_type == 'JSONField':\n+            converters.append(self.convert_jsonfield_value)\n         return converters\n+    def convert_jsonfield_value(self, value, expression, connection):\n+        if isinstance(value, str):\n+            try:\n+                value = json.loads(value)\n+            except json.JSONDecodeError:\n+                pass\n+        if isinstance(value, dict):\n+            value = {str(k): v for k, v in value.items()}\n+        return value\n     def convert_datetimefield_value(self, value, expression, connection):\n         if value is not None:\n             if not isinstance(value, datetime.datetime):\n", "normalized_occurrence": 1}
