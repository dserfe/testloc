{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..ddef3f5 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1826,6 +1826,11 @@ class VariablesChecker(BaseChecker):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n \n+        if isinstance(type_annotation, astroid.Attribute):\n+            if isinstance(type_annotation.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.expr.name)\n+            return\n+\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \n@@ -1837,6 +1842,10 @@ class VariablesChecker(BaseChecker):\n             self._type_annotation_names.append(TYPING_MODULE)\n             return\n \n+        if isinstance(type_annotation.value, astroid.Attribute):\n+            if isinstance(type_annotation.value.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.value.expr.name)\n+\n         self._type_annotation_names.extend(\n             annotation.name\n             for annotation in type_annotation.nodes_of_class(astroid.Name)\n", "occurrence": 2, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..70263c7 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -682,11 +682,18 @@ class VariablesChecker(BaseChecker):\n         if isinstance(type_annotation, astroid.Name):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n+        if isinstance(type_annotation, astroid.Attribute):\n+            if isinstance(type_annotation.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.expr.name)\n+            return\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n         if isinstance(type_annotation.value, astroid.Attribute) and isinstance(type_annotation.value.expr, astroid.Name) and (type_annotation.value.expr.name == TYPING_MODULE):\n             self._type_annotation_names.append(TYPING_MODULE)\n             return\n+        if isinstance(type_annotation.value, astroid.Attribute):\n+            if isinstance(type_annotation.value.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.value.expr.name)\n         self._type_annotation_names.extend((annotation.name for annotation in type_annotation.nodes_of_class(astroid.Name)))\n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n", "normalized_occurrence": 2}
