{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..f693115 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -408,7 +408,8 @@ class Collector:\n             # fast deletes\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                # Always include the model in counter, even if count is 0\n+                deleted_counter[qs.model._meta.label] = deleted_counter[qs.model._meta.label] + count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,7 +427,8 @@ class Collector:\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                # Always include the model in counter, even if count is 0\n+                deleted_counter[model._meta.label] = deleted_counter[model._meta.label] + count\n \n                 if not model._meta.auto_created:\n                     for obj in instances:\n@@ -442,4 +444,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..f938f48 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -212,7 +212,7 @@ class Collector:\n                     signals.pre_delete.send(sender=model, instance=obj, using=self.using)\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                deleted_counter[qs.model._meta.label] = deleted_counter[qs.model._meta.label] + count\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n@@ -223,7 +223,7 @@ class Collector:\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n-                deleted_counter[model._meta.label] += count\n+                deleted_counter[model._meta.label] = deleted_counter[model._meta.label] + count\n                 if not model._meta.auto_created:\n                     for obj in instances:\n                         signals.post_delete.send(sender=model, instance=obj, using=self.using)\n", "normalized_occurrence": 1}
