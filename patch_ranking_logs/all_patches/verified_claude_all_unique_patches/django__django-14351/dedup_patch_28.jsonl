{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..5d2c926 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -225,7 +225,12 @@ class SQLCompiler:\n             select_idx += 1\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n-            cols = self.get_default_columns()\n+            # For __in lookups in subqueries, we only need the primary key\n+            if self.query.subquery and any(child[0].endswith('__in') for child in self.query.where.children):\n+                pk = self.query.model._meta.pk\n+                cols = [pk.get_col(self.query.get_initial_alias())]\n+            else:\n+                cols = self.get_default_columns()\n         else:\n             # self.query.select is a special case. These columns never go to\n             # any model.\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..c7242d6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -99,7 +99,11 @@ class SQLCompiler:\n             select_idx += 1\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n-            cols = self.get_default_columns()\n+            if self.query.subquery and any((child[0].endswith('__in') for child in self.query.where.children)):\n+                pk = self.query.model._meta.pk\n+                cols = [pk.get_col(self.query.get_initial_alias())]\n+            else:\n+                cols = self.get_default_columns()\n         else:\n             cols = self.query.select\n         if cols:\n", "normalized_occurrence": 1}
