{"model_name_or_path": "agentless", "instance_id": "django__django-16950", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex f9e6a6e..523c534 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -215,6 +215,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                     **wrapper_kwargs,\n                 )\n \n+            # Ensure default UUID is set for UUIDFields\n+            if formfield and isinstance(db_field, models.UUIDField) and not formfield.initial:\n+                formfield.initial = db_field.default() if callable(db_field.default) else db_field.default\n+\n             return formfield\n \n         # If we've got overrides for the formfield defined, use 'em. **kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 7be1ef7..e49d328 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -95,6 +95,8 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 else:\n                     wrapper_kwargs = {'can_add_related': related_modeladmin.has_add_permission(request), 'can_change_related': related_modeladmin.has_change_permission(request), 'can_delete_related': related_modeladmin.has_delete_permission(request), 'can_view_related': related_modeladmin.has_view_permission(request)}\n                 formfield.widget = widgets.RelatedFieldWidgetWrapper(formfield.widget, db_field.remote_field, self.admin_site, **wrapper_kwargs)\n+            if formfield and isinstance(db_field, models.UUIDField) and (not formfield.initial):\n+                formfield.initial = db_field.default() if callable(db_field.default) else db_field.default\n             return formfield\n         for klass in db_field.__class__.mro():\n             if klass in self.formfield_overrides:\n", "normalized_occurrence": 1}
