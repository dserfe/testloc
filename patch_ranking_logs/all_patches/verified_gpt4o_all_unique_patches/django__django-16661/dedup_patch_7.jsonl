{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..4c20f84 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -488,6 +488,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             elif isinstance(filter_item, (list, tuple)):\n                 valid_lookups.add(filter_item[0])\n             else:\n+                # Adjust valid lookups for foreign keys that are primary keys\n+                if LOOKUP_SEP in filter_item:\n+                    parts = filter_item.split(LOOKUP_SEP)\n+                    for i in range(1, len(parts)):\n+                        valid_lookups.add(LOOKUP_SEP.join(parts[:i]))\n                 valid_lookups.add(filter_item)\n \n         # Is it a valid relational lookup?\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 061e1b9..be93366 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -220,6 +220,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             elif isinstance(filter_item, (list, tuple)):\n                 valid_lookups.add(filter_item[0])\n             else:\n+                if LOOKUP_SEP in filter_item:\n+                    parts = filter_item.split(LOOKUP_SEP)\n+                    for i in range(1, len(parts)):\n+                        valid_lookups.add(LOOKUP_SEP.join(parts[:i]))\n                 valid_lookups.add(filter_item)\n         return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)\n     def to_field_allowed(self, request, to_field):\n", "normalized_occurrence": 1}
