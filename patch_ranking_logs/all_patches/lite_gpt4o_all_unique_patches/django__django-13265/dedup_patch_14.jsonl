{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..9956424 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1188,6 +1188,8 @@ class MigrationAutodetector:\n                         options=new_options,\n                     )\n                 )\n+            # Ensure AlterOrderWithRespectTo is handled before AddIndex\n+            self.generate_altered_order_with_respect_to()\n \n     def generate_altered_order_with_respect_to(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..429ea95 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -573,6 +573,7 @@ class MigrationAutodetector:\n             new_options = {key: value for key, value in new_model_state.options.items() if key in AlterModelOptions.ALTER_OPTION_KEYS}\n             if old_options != new_options:\n                 self.add_operation(app_label, operations.AlterModelOptions(name=model_name, options=new_options))\n+            self.generate_altered_order_with_respect_to()\n     def generate_altered_order_with_respect_to(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n", "normalized_occurrence": 1}
