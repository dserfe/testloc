{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08b07d9..57a8060 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2728,7 +2728,18 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                 signature = inspect.signature(func,\n                                               type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n-                    objrepr = stringify_typehint(signature.return_annotation)\n+                    if sys.version_info >= (3, 7):  # for NewType support\n+                        from typing import _type_check  # type: ignore\n+                        try:\n+                            _type_check(signature.return_annotation, '')\n+                        except TypeError:\n+                            objrepr = stringify_typehint(signature.return_annotation)\n+                        else:\n+                            objrepr = stringify_typehint(signature.return_annotation,\n+                                                       unqualified_typehints=self.config.autodoc_typehints_format == \"short\")\n+                    else:\n+                        objrepr = stringify_typehint(signature.return_annotation,\n+                                                   unqualified_typehints=self.config.autodoc_typehints_format == \"short\")\n                     self.add_line('   :type: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 3c49975..15e38d8 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1646,7 +1646,16 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             try:\n                 signature = inspect.signature(func, type_aliases=self.config.autodoc_type_aliases)\n                 if signature.return_annotation is not Parameter.empty:\n-                    objrepr = stringify_typehint(signature.return_annotation)\n+                    if sys.version_info >= (3, 7):\n+                        from typing import _type_check\n+                        try:\n+                            _type_check(signature.return_annotation, '')\n+                        except TypeError:\n+                            objrepr = stringify_typehint(signature.return_annotation)\n+                        else:\n+                            objrepr = stringify_typehint(signature.return_annotation, unqualified_typehints=self.config.autodoc_typehints_format == 'short')\n+                    else:\n+                        objrepr = stringify_typehint(signature.return_annotation, unqualified_typehints=self.config.autodoc_typehints_format == 'short')\n                     self.add_line('   :type: ' + objrepr, sourcename)\n             except TypeError as exc:\n                 logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n", "normalized_occurrence": 1}
