{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 721709f..1caa652 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -74,7 +74,8 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     def __init__(self, n_components, tol, reg_covar,\n                  max_iter, n_init, init_params, random_state, warm_start,\n                  verbose, verbose_interval):\n-        self.n_components = n_components\n+        # For clusterer interface compatibility, n_components is an alias for n_clusters\n+        self.n_clusters = self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -239,6 +240,9 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n \n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        \n+        # Store labels_ for clusterer interface compatibility\n+        self.labels_ = self.predict(X)\n \n         return self\n \n@@ -340,6 +344,23 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         X = _check_X(X, None, self.means_.shape[1])\n         return self._estimate_weighted_log_prob(X).argmax(axis=1)\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict labels for X.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+            List of n_features-dimensional data points. Each row\n+            corresponds to a single data point.\n+        y : ignored\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        return self.fit(X).predict(X)\n+\n     def predict_proba(self, X):\n         \"\"\"Predict posterior probability of each component given the data.\n \n@@ -500,4 +521,4 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n             print(\"Initialization converged: %s\" % self.converged_)\n         elif self.verbose >= 2:\n             print(\"Initialization converged: %s\\t time lapse %.5fs\\t ll %.5f\" %\n-                  (self.converged_, time() - self._init_prev_time, ll))\n+                  (self.converged_, time() - self._init_prev_time, ll))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 71fc3c3..17c1e8e 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -23,7 +23,7 @@ def _check_X(X, n_components=None, n_features=None, ensure_min_samples=1):\n     return X\n class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n     def __init__(self, n_components, tol, reg_covar, max_iter, n_init, init_params, random_state, warm_start, verbose, verbose_interval):\n-        self.n_components = n_components\n+        self.n_clusters = self.n_components = n_components\n         self.tol = tol\n         self.reg_covar = reg_covar\n         self.max_iter = max_iter\n@@ -96,6 +96,7 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n             warnings.warn('Initialization %d did not converge. Try different init parameters, or increase max_iter, tol or check for degenerate data.' % (init + 1), ConvergenceWarning)\n         self._set_parameters(best_params)\n         self.n_iter_ = best_n_iter\n+        self.labels_ = self.predict(X)\n         return self\n     def _e_step(self, X):\n         log_prob_norm, log_resp = self._estimate_log_prob_resp(X)\n@@ -122,6 +123,8 @@ class BaseMixture(six.with_metaclass(ABCMeta, DensityMixin, BaseEstimator)):\n         self._check_is_fitted()\n         X = _check_X(X, None, self.means_.shape[1])\n         return self._estimate_weighted_log_prob(X).argmax(axis=1)\n+    def fit_predict(self, X, y=None):\n+        return self.fit(X).predict(X)\n     def predict_proba(self, X):\n         self._check_is_fitted()\n         X = _check_X(X, None, self.means_.shape[1])\n", "normalized_occurrence": 1}
