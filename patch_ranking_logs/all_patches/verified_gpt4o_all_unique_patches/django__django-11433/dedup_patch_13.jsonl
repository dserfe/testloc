{"model_name_or_path": "agentless", "instance_id": "django__django-11433", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 74a2377..ab4fdb1 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -46,11 +46,12 @@ def construct_instance(form, instance, fields=None, exclude=None):\n             continue\n         if exclude and f.name in exclude:\n             continue\n-        # Leave defaults for fields that aren't in POST data, except for\n-        # checkbox inputs because they don't appear in POST data if not checked.\n+        # Allow cleaned_data to overwrite fields' default values, even if they \n+        # aren't in POST data.\n         if (f.has_default() and\n                 form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):\n-            continue\n+            if f.name not in cleaned_data:\n+                continue\n         # Defer saving file-type fields until after the other fields, so a\n         # callable upload_to can use the values from other fields.\n         if isinstance(f, models.FileField):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4660b84..7af60a8 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -22,7 +22,8 @@ def construct_instance(form, instance, fields=None, exclude=None):\n         if exclude and f.name in exclude:\n             continue\n         if f.has_default() and form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)):\n-            continue\n+            if f.name not in cleaned_data:\n+                continue\n         if isinstance(f, models.FileField):\n             file_field_list.append(f)\n         else:\n", "normalized_occurrence": 3}
