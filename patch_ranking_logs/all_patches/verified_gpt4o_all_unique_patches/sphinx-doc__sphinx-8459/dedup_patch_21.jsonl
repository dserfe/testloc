{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..f6057a2 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -62,8 +62,10 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n+        type_aliases = app.config.autodoc_type_aliases\n+\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], type_aliases)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -79,7 +81,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -103,7 +105,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n-    for name, annotation in annotations.items():\n+    for name, annotation_value in annotations.items():\n+        if name in type_aliases:\n+            annotation_value = type_aliases[name]\n         if name == 'return':\n             continue\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..39e85f7 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -40,8 +40,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         if field_lists == []:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n+        type_aliases = app.config.autodoc_type_aliases\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], type_aliases)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n@@ -51,7 +52,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], type_aliases: Dict[str, str]) -> None:\n     arguments = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -72,7 +73,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n-    for name, annotation in annotations.items():\n+    for name, annotation_value in annotations.items():\n+        if name in type_aliases:\n+            annotation_value = type_aliases[name]\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n", "normalized_occurrence": 1}
