{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11999", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e63da1b..37c30b0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -939,6 +939,12 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n \n     def _get_FIELD_display(self, field):\n+        # Check for an explicit override method first\n+        method_name = 'get_%s_display' % field.name\n+        if hasattr(self, method_name) and method_name != '_get_FIELD_display':\n+            return getattr(self, method_name)()\n+        \n+        # Fall back to default implementation\n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex f4898c2..6f84620 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -497,6 +497,9 @@ class Model(metaclass=ModelBase):\n         return collector.delete()\n     delete.alters_data = True\n     def _get_FIELD_display(self, field):\n+        method_name = 'get_%s_display' % field.name\n+        if hasattr(self, method_name) and method_name != '_get_FIELD_display':\n+            return getattr(self, method_name)()\n         value = getattr(self, field.attname)\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n", "normalized_occurrence": 1}
