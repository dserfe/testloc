{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..69a7d4f 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,9 +40,17 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        from django.db.models import Exists\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n+        if isinstance(other, Exists):\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             _, args, kwargs = self.deconstruct()\n@@ -70,6 +78,9 @@ class Q(tree.Node):\n         obj.negate()\n         return obj\n \n+    def __rand__(self, other):\n+        return self.__and__(other)\n+\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         # We must promote any new joins to left outer joins so that when Q is\n         # used as an expression, rows aren't filtered due to joins.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..e07ad07 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -17,8 +17,15 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        from django.db.models import Exists\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n+        if isinstance(other, Exists):\n+            obj = type(self)()\n+            obj.connector = conn\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n@@ -39,6 +46,8 @@ class Q(tree.Node):\n         obj.add(self, self.AND)\n         obj.negate()\n         return obj\n+    def __rand__(self, other):\n+        return self.__and__(other)\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         clause, joins = query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False, check_filterable=False)\n         query.promote_joins(joins)\n", "normalized_occurrence": 1}
