{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15503", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 0a76a39..ca19546 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -227,9 +227,24 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(\n-            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        )\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs = self.rhs\n+        rhs_params = []\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        for key in rhs:\n+            if isinstance(key, KeyTransform):\n+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n+            else:\n+                rhs_key_transforms = [key]\n+                # Ensure numeric keys are properly quoted\n+                if str(key).isdigit():\n+                    rhs_key_transforms = ['\"%s\"' % key]\n+            rhs_params.extend(rhs_key_transforms)\n+        template = \"JSON_TYPE(%s, '$.' || %%s) IS NOT NULL\"\n+        if self.logical_operator:\n+            template = '(%s)' % self.logical_operator.join([template] * len(rhs_params))\n+        return template % lhs, tuple(lhs_params) + tuple(rhs_params)\n \n \n class HasKey(HasKeyLookup):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 272d7b8..278ff7a 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -141,7 +141,23 @@ class HasKeyLookup(PostgresOperatorLookup):\n             self.rhs = rhs_key_transforms[-1]\n         return super().as_postgresql(compiler, connection)\n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(compiler, connection, template='JSON_TYPE(%s, %%s) IS NOT NULL')\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs = self.rhs\n+        rhs_params = []\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        for key in rhs:\n+            if isinstance(key, KeyTransform):\n+                *_, rhs_key_transforms = key.preprocess_lhs(compiler, connection)\n+            else:\n+                rhs_key_transforms = [key]\n+                if str(key).isdigit():\n+                    rhs_key_transforms = ['\"%s\"' % key]\n+            rhs_params.extend(rhs_key_transforms)\n+        template = \"JSON_TYPE(%s, '$.' || %%s) IS NOT NULL\"\n+        if self.logical_operator:\n+            template = '(%s)' % self.logical_operator.join([template] * len(rhs_params))\n+        return (template % lhs, tuple(lhs_params) + tuple(rhs_params))\n class HasKey(HasKeyLookup):\n     lookup_name = 'has_key'\n     postgres_operator = '?'\n", "normalized_occurrence": 1}
