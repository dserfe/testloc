{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..03205a7 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -66,6 +66,17 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"loc\", update the *loc* parameter of the legend upon finalizing.\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n+        \n+    def __getstate__(self):\n+        # Return a picklable state\n+        return {'legend': self.legend, 'update': self._update}\n+        \n+    def __setstate__(self, state):\n+        # Restore the object's state\n+        self.legend = state['legend']\n+        self._update = state['update']\n+        # Reinitialize the parent class with the restored values\n+        super().__init__(self.legend, self.legend._legend_box, use_blit=False)\n         self.legend = legend\n \n         _api.check_in_list([\"loc\", \"bbox\"], update=update)\n", "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 4a521b5..0c34bfe 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -56,6 +56,14 @@ class DraggableLegend(DraggableOffsetBox):\n             If \"loc\", update the *loc* parameter of the legend upon finalizing.\n             If \"bbox\", update the *bbox_to_anchor* parameter.\n         \"\"\"\n+\n+    def __getstate__(self):\n+        return {'legend': self.legend, 'update': self._update}\n+\n+    def __setstate__(self, state):\n+        self.legend = state['legend']\n+        self._update = state['update']\n+        super().__init__(self.legend, self.legend._legend_box, use_blit=False)\n         self.legend = legend\n         _api.check_in_list(['loc', 'bbox'], update=update)\n         self._update = update\n", "normalized_occurrence": 1}
