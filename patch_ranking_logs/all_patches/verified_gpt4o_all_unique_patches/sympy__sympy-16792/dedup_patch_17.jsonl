{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..795e504 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -361,7 +361,11 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         headers = []\n         functions = []\n         for routine in routines:\n+            # Ensure that the prototype correctly handles array arguments\n             prototype = self.generator.get_prototype(routine)\n+            for arg in routine.arguments:\n+                if isinstance(arg, MatrixSymbol):\n+                    prototype = prototype.replace(f\"double {arg.name}\", f\"double *{arg.name}\")\n \n             # C Function Header Import\n             headers.append(self.pyx_header.format(header_file=prefix,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..ddbea27 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -139,6 +139,9 @@ class CythonCodeWrapper(CodeWrapper):\n         functions = []\n         for routine in routines:\n             prototype = self.generator.get_prototype(routine)\n+            for arg in routine.arguments:\n+                if isinstance(arg, MatrixSymbol):\n+                    prototype = prototype.replace(f'double {arg.name}', f'double *{arg.name}')\n             headers.append(self.pyx_header.format(header_file=prefix, prototype=prototype))\n             py_rets, py_args, py_loc, py_inf = self._partition_args(routine.arguments)\n             name = routine.name\n", "normalized_occurrence": 1}
