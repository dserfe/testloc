{"model_name_or_path": "agentless", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7fd21f6..8b36c2f 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,7 +90,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n                 cleansed = value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n@@ -165,7 +166,8 @@ class SafeExceptionReporterFilter:\n                         if param in cleansed:\n                             cleansed[param] = self.cleansed_substitute\n                     return cleansed\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n                 return request.POST\n \n     def cleanse_special_types(self, request, value):\n@@ -207,7 +209,8 @@ class SafeExceptionReporterFilter:\n                 # Cleanse all variables\n                 for name in tb_frame.f_locals:\n                     cleansed[name] = self.cleansed_substitute\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n                 # Cleanse specified variables\n                 for name, value in tb_frame.f_locals.items():\n                     if name in sensitive_variables:\n", "occurrence": 2, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex b98e7c2..61bc3ab 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,7 +47,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)((self.cleanse_setting(key, v) for v in value))\n                 cleansed = value\n         except TypeError:\n             cleansed = value\n@@ -90,7 +91,8 @@ class SafeExceptionReporterFilter:\n                         if param in cleansed:\n                             cleansed[param] = self.cleansed_substitute\n                     return cleansed\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)((self.cleanse_setting(key, v) for v in value))\n                 return request.POST\n     def cleanse_special_types(self, request, value):\n         try:\n@@ -114,7 +116,8 @@ class SafeExceptionReporterFilter:\n             if sensitive_variables == '__ALL__':\n                 for name in tb_frame.f_locals:\n                     cleansed[name] = self.cleansed_substitute\n-            else:\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = type(value)((self.cleanse_setting(key, v) for v in value))\n                 for name, value in tb_frame.f_locals.items():\n                     if name in sensitive_variables:\n                         value = self.cleansed_substitute\n", "normalized_occurrence": 2}
