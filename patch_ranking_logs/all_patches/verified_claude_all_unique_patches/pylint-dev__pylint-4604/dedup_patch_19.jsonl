{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..d0e6cb5 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1826,6 +1826,12 @@ class VariablesChecker(BaseChecker):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n \n+        if isinstance(type_annotation, astroid.Attribute):\n+            # Handle attribute access like abc.ABC\n+            if isinstance(type_annotation.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.expr.name)\n+            return\n+\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..de6816b 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -682,6 +682,10 @@ class VariablesChecker(BaseChecker):\n         if isinstance(type_annotation, astroid.Name):\n             self._type_annotation_names.append(type_annotation.name)\n             return\n+        if isinstance(type_annotation, astroid.Attribute):\n+            if isinstance(type_annotation.expr, astroid.Name):\n+                self._type_annotation_names.append(type_annotation.expr.name)\n+            return\n         if not isinstance(type_annotation, astroid.Subscript):\n             return\n         if isinstance(type_annotation.value, astroid.Attribute) and isinstance(type_annotation.value.expr, astroid.Name) and (type_annotation.value.expr.name == TYPING_MODULE):\n", "normalized_occurrence": 5}
