{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..c1016ee 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -184,13 +184,16 @@ class ForwardManyToOneDescriptor:\n             else:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n+                # Ensure deferred fields do not affect the related queryset\n+                rel_obj = self.get_object(instance).only(*instance.get_deferred_fields())\n                 remote_field = self.field.remote_field\n                 # If this is a one-to-one relation, set the reverse accessor\n                 # cache on the related object to the current instance to avoid\n                 # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                # Ensure the deferred fields for the parent are reset for the related object\n+                rel_obj._deferred = False\n             self.field.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None and not self.field.null:\n@@ -407,7 +410,8 @@ class ReverseOneToOneDescriptor:\n             else:\n                 filter_args = self.related.field.get_forward_related_filter(instance)\n                 try:\n-                    rel_obj = self.get_queryset(instance=instance).get(**filter_args)\n+                    # Ensure deferred fields do not affect the related queryset\n+                    rel_obj = self.get_queryset(instance=instance).only(*instance.get_deferred_fields()).get(**filter_args)\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..8080ea4 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -56,10 +56,11 @@ class ForwardManyToOneDescriptor:\n             else:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n-                rel_obj = self.get_object(instance)\n+                rel_obj = self.get_object(instance).only(*instance.get_deferred_fields())\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                rel_obj._deferred = False\n             self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n@@ -147,7 +148,7 @@ class ReverseOneToOneDescriptor:\n             else:\n                 filter_args = self.related.field.get_forward_related_filter(instance)\n                 try:\n-                    rel_obj = self.get_queryset(instance=instance).get(**filter_args)\n+                    rel_obj = self.get_queryset(instance=instance).only(*instance.get_deferred_fields()).get(**filter_args)\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n", "normalized_occurrence": 1}
