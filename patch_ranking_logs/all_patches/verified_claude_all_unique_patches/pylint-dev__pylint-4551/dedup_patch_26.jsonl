{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..e2fce65 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,13 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get type annotations from __init__ method\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_annotations = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            init_annotations = init_method.args.annotations\n+            \n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n@@ -91,9 +98,18 @@ class ClassDiagram(Figure, FilterMixIn):\n         ):\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            \n+            # First check if we have a type annotation from __init__\n+            if node_name in init_annotations:\n+                annotation = init_annotations[node_name]\n+                if hasattr(annotation, 'name'):\n+                    node_name = \"{} : {}\".format(node_name, annotation.name)\n+            else:\n+                # Fall back to inferred types\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            \n             attrs.append(node_name)\n         return sorted(attrs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..a014778 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,12 +57,21 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_annotations = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            init_annotations = init_method.args.annotations\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = '{} : {}'.format(node_name, ', '.join(names))\n+            if node_name in init_annotations:\n+                annotation = init_annotations[node_name]\n+                if hasattr(annotation, 'name'):\n+                    node_name = '{} : {}'.format(node_name, annotation.name)\n+            else:\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n         return sorted(attrs)\n \n", "normalized_occurrence": 1}
