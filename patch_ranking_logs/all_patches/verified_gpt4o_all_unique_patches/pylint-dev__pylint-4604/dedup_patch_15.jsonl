{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..9c877e8 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -542,6 +542,11 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n \n+            # Check if the import is used in type comments\n+            if any(name in comment for comment in node.root().type_comments):\n+                self._add_imported_module(node, imported_module.name)\n+                continue\n+\n             self._add_imported_module(node, imported_module.name)\n \n     @check_messages(*MSGS)\n@@ -568,9 +573,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             return\n         for name, _ in node.names:\n             if name != \"*\":\n-                self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n+                full_name = f\"{imported_module.name}.{name}\"\n             else:\n-                self._add_imported_module(node, imported_module.name)\n+                full_name = imported_module.name\n+\n+            # Check if the import is used in type comments\n+            if any(full_name in comment for comment in node.root().type_comments):\n+                self._add_imported_module(node, full_name)\n+                continue\n+\n+            self._add_imported_module(node, full_name)\n \n     @check_messages(*MSGS)\n     def leave_module(self, node):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..e0ea76c 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -183,6 +183,9 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n                 continue\n+            if any((name in comment for comment in node.root().type_comments)):\n+                self._add_imported_module(node, imported_module.name)\n+                continue\n             self._add_imported_module(node, imported_module.name)\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n@@ -204,9 +207,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             return\n         for name, _ in node.names:\n             if name != '*':\n-                self._add_imported_module(node, f'{imported_module.name}.{name}')\n+                full_name = f'{imported_module.name}.{name}'\n             else:\n-                self._add_imported_module(node, imported_module.name)\n+                full_name = imported_module.name\n+            if any((full_name in comment for comment in node.root().type_comments)):\n+                self._add_imported_module(node, full_name)\n+                continue\n+            self._add_imported_module(node, full_name)\n     @check_messages(*MSGS)\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n", "normalized_occurrence": 1}
