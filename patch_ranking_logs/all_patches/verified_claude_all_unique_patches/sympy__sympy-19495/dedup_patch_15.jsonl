{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..c7ad356 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -244,7 +244,9 @@ class ConditionSet(Set):\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        # Keep original symbol unless it's being substituted\n+        sym = new if old == self.sym else self.sym\n+        return self.func(sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..ae6ec72 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -93,7 +93,8 @@ class ConditionSet(Set):\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n             return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        sym = new if old == self.sym else self.sym\n+        return self.func(sym, cond, base)\n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n             return False\n", "normalized_occurrence": 1}
