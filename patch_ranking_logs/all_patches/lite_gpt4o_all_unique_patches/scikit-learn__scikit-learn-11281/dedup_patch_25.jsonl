{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..9e1eafe 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -670,6 +670,23 @@ class GaussianMixture(BaseMixture):\n         self.weights_ /= n_samples\n         self.precisions_cholesky_ = _compute_precision_cholesky(\n             self.covariances_, self.covariance_type)\n+        self.labels_ = None  # Adding labels_ attribute to store cluster assignments.\n+        \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict the labels for the data.\n+        \n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+        \n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component memberships for each sample.\n+        \"\"\"\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n \n     def _estimate_log_prob(self, X):\n         return _estimate_log_gaussian_prob(\n@@ -747,4 +764,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..1fc9f9c 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -152,6 +152,11 @@ class GaussianMixture(BaseMixture):\n         self.weights_, self.means_, self.covariances_ = _estimate_gaussian_parameters(X, np.exp(log_resp), self.reg_covar, self.covariance_type)\n         self.weights_ /= n_samples\n         self.precisions_cholesky_ = _compute_precision_cholesky(self.covariances_, self.covariance_type)\n+        self.labels_ = None\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n     def _estimate_log_prob(self, X):\n         return _estimate_log_gaussian_prob(X, self.means_, self.precisions_cholesky_, self.covariance_type)\n     def _estimate_log_weights(self):\n", "normalized_occurrence": 1}
