{"model_name_or_path": "agentless", "instance_id": "django__django-16408", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 490b14c..f474225 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1535,12 +1535,15 @@ class QuerySet(AltersData):\n             )\n \n         obj = self._chain()\n-        if fields == (None,):\n-            obj.query.select_related = False\n-        elif fields:\n-            obj.query.add_select_related(fields)\n+        if self._fields is None:\n+            if fields == (None,):\n+                obj.query.select_related = False\n+            elif fields:\n+                obj.query.add_select_related(fields)\n+            else:\n+                obj.query.select_related = True\n         else:\n-            obj.query.select_related = True\n+            raise TypeError(\"Cannot call select_related() after .values() or .values_list()\")\n         return obj\n \n     def prefetch_related(self, *lookups):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex aec69ea..a9cc243 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -823,12 +823,15 @@ class QuerySet(AltersData):\n         if self._fields is not None:\n             raise TypeError('Cannot call select_related() after .values() or .values_list()')\n         obj = self._chain()\n-        if fields == (None,):\n-            obj.query.select_related = False\n-        elif fields:\n-            obj.query.add_select_related(fields)\n+        if self._fields is None:\n+            if fields == (None,):\n+                obj.query.select_related = False\n+            elif fields:\n+                obj.query.add_select_related(fields)\n+            else:\n+                obj.query.select_related = True\n         else:\n-            obj.query.select_related = True\n+            raise TypeError('Cannot call select_related() after .values() or .values_list()')\n         return obj\n     def prefetch_related(self, *lookups):\n         self._not_support_combined_queries('prefetch_related')\n", "normalized_occurrence": 1}
