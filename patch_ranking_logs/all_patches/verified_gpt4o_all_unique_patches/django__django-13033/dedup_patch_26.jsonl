{"model_name_or_path": "agentless", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..02742e3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1927,9 +1927,9 @@ class Query(BaseExpression):\n                 )\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n+        # Ensure explicit ordering takes precedence over model's default ordering\n+        self.order_by = ordering if ordering else self.order_by\n         if ordering:\n-            self.order_by += ordering\n-        else:\n             self.default_ordering = False\n \n     def clear_ordering(self, force_empty):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..a44c1c4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1028,9 +1028,8 @@ class Query(BaseExpression):\n                 raise FieldError('Using an aggregate in order_by() without also including it in annotate() is not allowed: %s' % item)\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n+        self.order_by = ordering if ordering else self.order_by\n         if ordering:\n-            self.order_by += ordering\n-        else:\n             self.default_ordering = False\n     def clear_ordering(self, force_empty):\n         self.order_by = ()\n", "normalized_occurrence": 1}
