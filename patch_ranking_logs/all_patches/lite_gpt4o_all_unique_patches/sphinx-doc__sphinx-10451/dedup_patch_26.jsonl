{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..ad4ed0c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,7 +93,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] in {'param', 'type'}:\n+            if parts[0] == 'param' and parts[1] in {'*args', '**kwargs'}:\n+                continue\n             if len(parts) == 2:\n                 # :param xxx:\n                 arg = arguments.setdefault(parts[1], {})\n@@ -111,7 +113,11 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n+    processed_star_args = set()\n     for name, annotation in annotations.items():\n+        if name in {'*args', '**kwargs'} and name in processed_star_args:\n+            continue\n+        processed_star_args.add(name)\n         if name == 'return':\n             continue\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..acaae4e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -67,7 +67,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n+        if parts[0] in {'param', 'type'}:\n+            if parts[0] == 'param' and parts[1] in {'*args', '**kwargs'}:\n+                continue\n             if len(parts) == 2:\n                 arg = arguments.setdefault(parts[1], {})\n                 arg['param'] = True\n@@ -82,7 +84,11 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n+    processed_star_args = set()\n     for name, annotation in annotations.items():\n+        if name in {'*args', '**kwargs'} and name in processed_star_args:\n+            continue\n+        processed_star_args.add(name)\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n", "normalized_occurrence": 1}
