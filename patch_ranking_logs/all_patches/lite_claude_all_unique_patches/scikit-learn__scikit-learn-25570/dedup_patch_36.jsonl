{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..f8d8d82 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -358,15 +358,21 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 # Replace \"passthrough\" with the fitted version in\n                 # _name_to_fitted_passthrough\n                 def replace_passthrough(name, trans, columns):\n+                    if _is_empty_column_selection(columns):\n+                        return None\n                     if name not in self._name_to_fitted_passthrough:\n                         return name, trans, columns\n                     return name, self._name_to_fitted_passthrough[name], columns\n \n                 transformers = [\n-                    replace_passthrough(*trans) for trans in self.transformers_\n+                    result for result in (replace_passthrough(*trans) for trans in self.transformers_)\n+                    if result is not None\n                 ]\n             else:\n-                transformers = self.transformers_\n+                transformers = [\n+                    trans for trans in self.transformers_\n+                    if not _is_empty_column_selection(trans[2])\n+                ]\n         else:\n             # interleave the validated column specifiers\n             transformers = [\n@@ -391,8 +397,6 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..94eefb1 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -56,12 +56,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         if fitted:\n             if replace_strings:\n                 def replace_passthrough(name, trans, columns):\n+                    if _is_empty_column_selection(columns):\n+                        return None\n                     if name not in self._name_to_fitted_passthrough:\n                         return (name, trans, columns)\n                     return (name, self._name_to_fitted_passthrough[name], columns)\n-                transformers = [replace_passthrough(*trans) for trans in self.transformers_]\n+                transformers = [result for result in (replace_passthrough(*trans) for trans in self.transformers_) if result is not None]\n             else:\n-                transformers = self.transformers_\n+                transformers = [trans for trans in self.transformers_ if not _is_empty_column_selection(trans[2])]\n         else:\n             transformers = [(name, trans, column) for (name, trans, _), column in zip(self.transformers, self._columns)]\n             if self._remainder[2]:\n@@ -74,8 +76,6 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     trans = FunctionTransformer(accept_sparse=True, check_inverse=False, feature_names_out='one-to-one').set_output(transform=output_config['dense'])\n                 elif trans == 'drop':\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n             if column_as_strings:\n                 columns_is_scalar = np.isscalar(columns)\n                 indices = self._transformer_to_input_indices[name]\n", "normalized_occurrence": 1}
