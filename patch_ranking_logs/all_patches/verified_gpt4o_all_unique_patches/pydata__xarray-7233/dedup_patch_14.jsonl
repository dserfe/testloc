{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7233", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex d923cdb..34255d1 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -1107,11 +1107,10 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n                     **kwargs,\n                 )\n \n-            coords = {}\n+            new_coords = {}\n             for c, v in self.obj.coords.items():\n-                # variable.coarsen returns variables not containing the window dims\n-                # unchanged (maybe removes attrs)\n-                coords[c] = v.variable.coarsen(\n+                # preserve coordinates as coordinates\n+                new_coords[c] = v.variable.coarsen(\n                     self.windows,\n                     self.coord_func[c],\n                     self.boundary,\n@@ -1119,8 +1118,16 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n                     keep_attrs=keep_attrs,\n                     **kwargs,\n                 )\n+                if c in self.obj.dims:\n+                    new_coords[c] = ('__coarsen_dims__', new_coords[c])\n+\n+            # Ensure that the new coordinates are promoted back to coordinates.\n+            new_ds = Dataset(reduced, coords=new_coords, attrs=attrs)\n+            for coord in new_coords:\n+                if coord not in new_ds.coords:\n+                    new_ds = new_ds.set_coords(coord)\n \n-            return Dataset(reduced, coords=coords, attrs=attrs)\n+            return new_ds\n \n         return wrapped_func\n \n@@ -1148,4 +1155,4 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n             Arrays with summarized data.\n         \"\"\"\n         wrapped_func = self._reduce_method(func)\n-        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n+        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 988b7e6..82d3a6a 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -352,10 +352,16 @@ class DatasetCoarsen(Coarsen['Dataset']):\n             reduced = {}\n             for key, da in self.obj.data_vars.items():\n                 reduced[key] = da.variable.coarsen(self.windows, func, self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n-            coords = {}\n+            new_coords = {}\n             for c, v in self.obj.coords.items():\n-                coords[c] = v.variable.coarsen(self.windows, self.coord_func[c], self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n-            return Dataset(reduced, coords=coords, attrs=attrs)\n+                new_coords[c] = v.variable.coarsen(self.windows, self.coord_func[c], self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n+                if c in self.obj.dims:\n+                    new_coords[c] = ('__coarsen_dims__', new_coords[c])\n+            new_ds = Dataset(reduced, coords=new_coords, attrs=attrs)\n+            for coord in new_coords:\n+                if coord not in new_ds.coords:\n+                    new_ds = new_ds.set_coords(coord)\n+            return new_ds\n         return wrapped_func\n     def reduce(self, func: Callable, keep_attrs=None, **kwargs) -> Dataset:\n         wrapped_func = self._reduce_method(func)\n", "normalized_occurrence": 1}
