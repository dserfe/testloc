{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..ae63014 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -341,6 +341,22 @@ class sin(TrigonometricFunction):\n             if m:\n                 return sin(m)*cos(x) + cos(m)*sin(x)\n \n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m)*cos(x) - sin(m)*sin(x)\n+\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m)*cos(x) + cos(m)*sin(x)\n+\n         if arg.is_zero:\n             return S.Zero\n \n@@ -655,6 +671,22 @@ class cos(TrigonometricFunction):\n \n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m)*cos(x) + cos(m)*sin(x)\n+\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m)*cos(x) - sin(m)*sin(x)\n+\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..f0f408b 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -191,6 +191,20 @@ class sin(TrigonometricFunction):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m) * cos(x) - sin(m) * sin(x)\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m) * cos(x) + cos(m) * sin(x)\n         if arg.is_zero:\n             return S.Zero\n         if isinstance(arg, asin):\n@@ -381,6 +395,20 @@ class cos(TrigonometricFunction):\n             return None\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n+            if m:\n+                return sin(m) * cos(x) + cos(m) * sin(x)\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n+            if m:\n+                return cos(m) * cos(x) - sin(m) * sin(x)\n+        if isinstance(arg, sqrt):\n+            base, exp = arg.as_base_exp()\n+            if exp == S.Half and base.func == sin:\n+                return abs(base)\n+            x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n         if arg.is_zero:\n", "normalized_occurrence": 1}
