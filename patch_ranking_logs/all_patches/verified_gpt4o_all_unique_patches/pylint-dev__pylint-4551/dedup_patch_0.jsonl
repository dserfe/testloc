{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..016b378 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,14 +84,15 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n-        for node_name, associated_nodes in (\n+        for node_name, assoc_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n             + properties\n+            + [(arg.arg, [arg.annotation]) for arg in node.args.args if arg.annotation]\n         ):\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            names = self.class_names(assoc_nodes)\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..1f93f67 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,10 +57,10 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n+        for node_name, assoc_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties + [(arg.arg, [arg.annotation]) for arg in node.args.args if arg.annotation]:\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            names = self.class_names(assoc_nodes)\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n", "normalized_occurrence": 1}
