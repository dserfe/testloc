{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..81f6847 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1383,6 +1383,18 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        module = node.get('py:module', '')\n+        \n+        # Handle cases like struct.Struct where the full path is in the module attribute\n+        if module and '.' in module:\n+            mod_name = module.split('.')[0]\n+            try:\n+                mod = __import__(mod_name)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n+        \n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             # built-in class\n             return contnode\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..9a33c22 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -843,6 +843,15 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        module = node.get('py:module', '')\n+        if module and '.' in module:\n+            mod_name = module.split('.')[0]\n+            try:\n+                mod = __import__(mod_name)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n", "normalized_occurrence": 1}
