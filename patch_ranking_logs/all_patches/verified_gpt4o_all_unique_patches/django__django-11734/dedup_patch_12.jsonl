{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..6e3f209 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -564,7 +564,7 @@ class ResolvedOuterRef(F):\n \n class OuterRef(F):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None,\n-                           summarize=False, for_save=False, simple_col=False):\n+                           summarize=False, for_save=False, simple_col=False, outer_ref=False):\n         if isinstance(self.name, self.__class__):\n             return self.name\n         return ResolvedOuterRef(self.name)\n@@ -1088,6 +1088,9 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        # Adjust the template if this is a negated EXISTS\n+        if self.negated:\n+            template = 'NOT EXISTS(%(subquery)s)'\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..6f2180a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -320,7 +320,7 @@ class ResolvedOuterRef(F):\n     def relabeled_clone(self, relabels):\n         return self\n class OuterRef(F):\n-    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False):\n+    def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False, simple_col=False, outer_ref=False):\n         if isinstance(self.name, self.__class__):\n             return self.name\n         return ResolvedOuterRef(self.name)\n@@ -665,6 +665,8 @@ class Exists(Subquery):\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        if self.negated:\n+            template = 'NOT EXISTS(%(subquery)s)'\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "normalized_occurrence": 1}
