{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..0828ed7 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -885,7 +885,19 @@ class Permutation(Basic):\n \n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:  # e\n+            # Convert cycles to integer lists\n             args = [[int(i) for i in c] for c in args]\n+            # Handle non-disjoint cycles by applying them in order\n+            size = max(max(c) for c in args) + 1 if args else 0\n+            perm = list(range(size))\n+            for cycle in args:\n+                if len(cycle) > 1:  # Only apply non-trivial cycles\n+                    # Rotate the elements in the cycle\n+                    temp = perm[cycle[0]]\n+                    for i in range(len(cycle) - 1):\n+                        perm[cycle[i]] = perm[cycle[i + 1]]\n+                    perm[cycle[-1]] = temp\n+            return _af_new(perm)\n         else:  # d\n             args = [int(i) for i in args]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..2e95bd7 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -191,6 +191,15 @@ class Permutation(Basic):\n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:\n             args = [[int(i) for i in c] for c in args]\n+            size = max((max(c) for c in args)) + 1 if args else 0\n+            perm = list(range(size))\n+            for cycle in args:\n+                if len(cycle) > 1:\n+                    temp = perm[cycle[0]]\n+                    for i in range(len(cycle) - 1):\n+                        perm[cycle[i]] = perm[cycle[i + 1]]\n+                    perm[cycle[-1]] = temp\n+            return _af_new(perm)\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n", "normalized_occurrence": 1}
