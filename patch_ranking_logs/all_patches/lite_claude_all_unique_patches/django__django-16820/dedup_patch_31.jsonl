{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex cffcd20..57d6447 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -647,6 +647,27 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterIndexTogether):\n+            # If the other operation is also AlterIndexTogether, and\n+            # it's a noop, then this operation should be a noop too.\n+            if not operation.index_together:\n+                return [AlterIndexTogether(self.name, set())]\n+        elif isinstance(operation, AddIndex):\n+            # Convert index_together to AddIndex operations\n+            if not self.index_together:\n+                return []\n+            from django.db.models import Index\n+            indexes = []\n+            for field_names in self.index_together:\n+                index = Index(\n+                    fields=list(field_names),\n+                    name=f\"idx_{'_'.join(field_names)}\"\n+                )\n+                indexes.append(AddIndex(self.name, index))\n+            return indexes\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterIndexTogether):\n+            if not operation.index_together:\n+                return [AlterIndexTogether(self.name, set())]\n+        elif isinstance(operation, AddIndex):\n+            if not self.index_together:\n+                return []\n+            from django.db.models import Index\n+            indexes = []\n+            for field_names in self.index_together:\n+                index = Index(fields=list(field_names), name=f\"idx_{'_'.join(field_names)}\")\n+                indexes.append(AddIndex(self.name, index))\n+            return indexes\n+        return super().reduce(operation, app_label)", "normalized_occurrence": 1}
