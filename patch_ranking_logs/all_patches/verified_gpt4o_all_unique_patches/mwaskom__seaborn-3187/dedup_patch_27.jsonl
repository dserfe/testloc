{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex a94a471..81da70a 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -288,13 +288,20 @@ class _RelationalPlotter(VectorPlotter):\n             update((self.variables[\"size\"], \"title\"),\n                    self.variables[\"size\"], **title_kws)\n \n+        # Retrieve the offset value from the formatter if available\n+        formatter = ScalarFormatter()\n+        formatter.set_scientific(True)\n+        formatter.create_offset_string(min(size_levels))\n+        offset_string = formatter.get_offset()\n+\n         # Add the size semantic labels\n         for level, formatted_level in zip(size_levels, size_formatted_levels):\n             if level is not None:\n                 size = self._size_map(level)\n+                label = f\"{formatted_level} {offset_string}\".strip()\n                 update(\n                     self.variables[\"size\"],\n-                    formatted_level,\n+                    label,\n                     linewidth=size,\n                     s=size,\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex 1613149..b14c43f 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -70,10 +70,15 @@ class _RelationalPlotter(VectorPlotter):\n             size_levels = size_formatted_levels = self._size_map.levels\n         if not legend_title and self.variables.get('size', None) is not None:\n             update((self.variables['size'], 'title'), self.variables['size'], **title_kws)\n+        formatter = ScalarFormatter()\n+        formatter.set_scientific(True)\n+        formatter.create_offset_string(min(size_levels))\n+        offset_string = formatter.get_offset()\n         for level, formatted_level in zip(size_levels, size_formatted_levels):\n             if level is not None:\n                 size = self._size_map(level)\n-                update(self.variables['size'], formatted_level, linewidth=size, s=size)\n+                label = f'{formatted_level} {offset_string}'.strip()\n+                update(self.variables['size'], label, linewidth=size, s=size)\n         if not legend_title and self.variables.get('style', None) is not None:\n             update((self.variables['style'], 'title'), self.variables['style'], **title_kws)\n         if self._style_map.levels is not None:\n", "normalized_occurrence": 1}
