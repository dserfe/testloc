{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..ab5dbc8 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -204,7 +204,9 @@ class Set(Basic):\n             return Union(p for p in product_sets if p != other)\n \n         elif isinstance(other, Interval):\n-            if isinstance(self, Interval) or isinstance(self, FiniteSet):\n+            if isinstance(self, FiniteSet):\n+                return self\n+            elif isinstance(self, Interval):\n                 return Intersection(other, self.complement(S.Reals))\n \n         elif isinstance(other, Union):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..6ba4155 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -61,7 +61,9 @@ class Set(Basic):\n             product_sets = (ProductSet(*set) for set in switch_sets)\n             return Union((p for p in product_sets if p != other))\n         elif isinstance(other, Interval):\n-            if isinstance(self, Interval) or isinstance(self, FiniteSet):\n+            if isinstance(self, FiniteSet):\n+                return self\n+            elif isinstance(self, Interval):\n                 return Intersection(other, self.complement(S.Reals))\n         elif isinstance(other, Union):\n             return Union((o - self for o in other.args))\n", "normalized_occurrence": 1}
