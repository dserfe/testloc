{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 80fea06..7fec942 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -89,7 +89,9 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n             self.categories_.append(cats)\n \n     def _transform(self, X, handle_unknown='error'):\n-        X = self._check_X(X)\n+        X = self._check_X(X, force_all_finite=\"allow-nan\")\n+        if X.dtype.kind in 'UO':\n+            X = X.astype(object, copy=False)\n \n         _, n_features = X.shape\n         X_int = np.zeros_like(X, dtype=np.int)\n@@ -110,7 +112,7 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # continue `The rows are marked `X_mask` and will be\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    Xi = Xi.astype(object, copy=False).copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 8703749..c08a394 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -50,7 +50,9 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                         raise ValueError(msg)\n             self.categories_.append(cats)\n     def _transform(self, X, handle_unknown='error'):\n-        X = self._check_X(X)\n+        X = self._check_X(X, force_all_finite='allow-nan')\n+        if X.dtype.kind in 'UO':\n+            X = X.astype(object, copy=False)\n         _, n_features = X.shape\n         X_int = np.zeros_like(X, dtype=np.int)\n         X_mask = np.ones_like(X, dtype=np.bool)\n@@ -63,7 +65,7 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     raise ValueError(msg)\n                 else:\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    Xi = Xi.astype(object, copy=False).copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "normalized_occurrence": 1}
