{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..8a3f2a0 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -367,15 +367,23 @@ class Node(metaclass=NodeMeta):\n         except OSError:\n             abspath = True\n \n-        return excinfo.getrepr(\n+        # Capture the current working directory at the start of the session\n+        initial_cwd = self.config.invocation_dir\n+\n+        repr = excinfo.getrepr(\n             funcargs=True,\n             abspath=abspath,\n             showlocals=self.config.getoption(\"showlocals\", False),\n             style=style,\n-            tbfilter=False,  # pruned already, or in --fulltrace mode.\n+            tbfilter=False,  # pruned already or in --fulltrace mode.\n             truncate_locals=truncate_locals,\n+            cwd=initial_cwd,  # Pass the initial working directory for proper path resolution\n         )\n \n+        # Ensure paths in the traceback are relative to the initial working directory\n+        repr.relocate_paths(initial_cwd)\n+        return repr\n+\n     def repr_failure(\n         self, excinfo, style=None\n     ) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..2c2d762 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -294,7 +294,10 @@ class Node(metaclass=NodeMeta):\n             abspath = False\n         except OSError:\n             abspath = True\n-        return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        initial_cwd = self.config.invocation_dir\n+        repr = excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals, cwd=initial_cwd)\n+        repr.relocate_paths(initial_cwd)\n+        return repr\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n         \"\"\"\n", "normalized_occurrence": 1}
