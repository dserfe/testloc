{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..cba0999 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -51,10 +51,20 @@ class Q(tree.Node):\n         elif not self:\n             return copy.deepcopy(other)\n \n+        # Convert any dict_keys objects to lists to make them pickleable\n+        def make_pickleable(node):\n+            if node.children:\n+                for child in node.children:\n+                    if isinstance(child, (list, tuple)) and len(child) == 2:\n+                        key, value = child\n+                        if isinstance(value, type({}.keys())):\n+                            node.children[node.children.index(child)] = (key, list(value))\n+            return node\n+\n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        obj.add(make_pickleable(copy.deepcopy(self)), conn)\n+        obj.add(make_pickleable(copy.deepcopy(other)), conn)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..89c6a69 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -24,10 +24,18 @@ class Q(tree.Node):\n             return copy.deepcopy(self)\n         elif not self:\n             return copy.deepcopy(other)\n+        def make_pickleable(node):\n+            if node.children:\n+                for child in node.children:\n+                    if isinstance(child, (list, tuple)) and len(child) == 2:\n+                        key, value = child\n+                        if isinstance(value, type({}.keys())):\n+                            node.children[node.children.index(child)] = (key, list(value))\n+            return node\n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        obj.add(make_pickleable(copy.deepcopy(self)), conn)\n+        obj.add(make_pickleable(copy.deepcopy(other)), conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
