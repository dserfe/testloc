{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..1ba4511 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,10 +13,18 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n-    @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    decorated = decorator(dummy)\n+    # Copy attributes from the decorated dummy function\n+    update_wrapper(_wrapper, decorated)\n+    # Preserve any attributes that were previously set on the wrapper\n+    if hasattr(decorator, '__name__'):\n+        _wrapper.__name__ = decorator.__name__\n+    if hasattr(decorator, '__module__'):\n+        _wrapper.__module__ = decorator.__module__\n+    if hasattr(decorator, '__doc__'):\n+        _wrapper.__doc__ = decorator.__doc__\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..0f3a81f 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -5,10 +5,16 @@ class classonlymethod(classmethod):\n             raise AttributeError('This method is available only on the class, not on instances.')\n         return super().__get__(instance, cls)\n def _update_method_wrapper(_wrapper, decorator):\n-    @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    decorated = decorator(dummy)\n+    update_wrapper(_wrapper, decorated)\n+    if hasattr(decorator, '__name__'):\n+        _wrapper.__name__ = decorator.__name__\n+    if hasattr(decorator, '__module__'):\n+        _wrapper.__module__ = decorator.__module__\n+    if hasattr(decorator, '__doc__'):\n+        _wrapper.__doc__ = decorator.__doc__\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
