{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..846f964 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -697,8 +697,12 @@ class _EvaluatorPrinter(object):\n \n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) \\\n-                and not (keyword.iskeyword(ident) or ident == 'None')\n+            # Any identifier with special characters like {} should be considered unsafe\n+            # to ensure proper dummification\n+            return (isinstance(ident, str) \n+                   and cls._safe_ident_re.match(ident)\n+                   and not any(c in ident for c in \"{}[]()\\\"'#@ ,.\")\n+                   and not (keyword.iskeyword(ident) or ident == 'None'))\n \n \n     def _preprocess(self, args, expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..857fd13 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -280,7 +280,7 @@ class _EvaluatorPrinter(object):\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n+            return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not any((c in ident for c in '{}[]()\"\\'#@ ,.'))) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n         from sympy import Dummy, Symbol, Function, flatten\n         from sympy.matrices import DeferredVector\n", "normalized_occurrence": 1}
