{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..52009cf 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -193,7 +193,12 @@ class ModelBase(type):\n \n         # Collect the parent links for multi-table inheritance.\n         parent_links = {}\n-        for base in reversed([new_class] + parents):\n+        # Sort bases such that those with parent_link=True are prioritized\n+        bases_with_parent_link_first = sorted(\n+            reversed([new_class] + parents), \n+            key=lambda base: any(isinstance(field, OneToOneField) and field.remote_field.parent_link for field in base._meta.local_fields)\n+        )\n+        for base in bases_with_parent_link_first:\n             # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n                 continue\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..ef07041 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -99,7 +99,8 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n         parent_links = {}\n-        for base in reversed([new_class] + parents):\n+        bases_with_parent_link_first = sorted(reversed([new_class] + parents), key=lambda base: any((isinstance(field, OneToOneField) and field.remote_field.parent_link for field in base._meta.local_fields)))\n+        for base in bases_with_parent_link_first:\n             if not hasattr(base, '_meta'):\n                 continue\n             if base != new_class and (not base._meta.abstract):\n", "normalized_occurrence": 1}
