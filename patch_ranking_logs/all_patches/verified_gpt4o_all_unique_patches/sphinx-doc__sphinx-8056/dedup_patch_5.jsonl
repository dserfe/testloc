{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..1305926 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1095,12 +1095,22 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n-            location=self._get_location(),\n-            translations=self._config.napoleon_type_aliases or {},\n-        )\n+        \n+        # Handle multiple names in a single line\n+        name_list = _name.split(\", \")\n+        type_list = _type.split(\", \")\n+\n+        processed_names = [self._escape_args_and_kwargs(n) for n in name_list]\n+        processed_types = [\n+            _convert_numpy_type_spec(\n+                t,\n+                location=self._get_location(),\n+                translations=self._config.napoleon_type_aliases or {},\n+            ) for t in type_list\n+        ]\n+\n+        _name = \", \".join(processed_names)\n+        _type = \", \".join(processed_types)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..34c3312 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -665,8 +665,12 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        name_list = _name.split(', ')\n+        type_list = _type.split(', ')\n+        processed_names = [self._escape_args_and_kwargs(n) for n in name_list]\n+        processed_types = [_convert_numpy_type_spec(t, location=self._get_location(), translations=self._config.napoleon_type_aliases or {}) for t in type_list]\n+        _name = ', '.join(processed_names)\n+        _type = ', '.join(processed_types)\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n", "normalized_occurrence": 1}
