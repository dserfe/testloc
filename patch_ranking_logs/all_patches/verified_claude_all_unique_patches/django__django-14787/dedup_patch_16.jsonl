{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..9057499 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,10 +13,25 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n+    # Store the instance method's attrs before applying the decorator\n+    assigned = (*update_wrapper.__defaults__[0],)\n+    attrs = {attr: getattr(_wrapper, attr) for attr in assigned}\n+    \n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n+    # Get any attributes that might have been added by the decorator\n+    new_attrs = {attr: getattr(dummy, attr) for attr in dir(dummy)\n+                if not attr.startswith('_')}\n+    # Start by updating with the decorator's attrs\n     update_wrapper(_wrapper, dummy)\n+    # Restore the instance method's attrs\n+    for attr in assigned:\n+        if attr in attrs:\n+            setattr(_wrapper, attr, attrs[attr])\n+    # Update with any new attributes from the decorator\n+    for attr, value in new_attrs.items():\n+        setattr(_wrapper, attr, value)\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..bf76da0 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -5,10 +5,18 @@ class classonlymethod(classmethod):\n             raise AttributeError('This method is available only on the class, not on instances.')\n         return super().__get__(instance, cls)\n def _update_method_wrapper(_wrapper, decorator):\n+    assigned = (*update_wrapper.__defaults__[0],)\n+    attrs = {attr: getattr(_wrapper, attr) for attr in assigned}\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n+    new_attrs = {attr: getattr(dummy, attr) for attr in dir(dummy) if not attr.startswith('_')}\n     update_wrapper(_wrapper, dummy)\n+    for attr in assigned:\n+        if attr in attrs:\n+            setattr(_wrapper, attr, attrs[attr])\n+    for attr, value in new_attrs.items():\n+        setattr(_wrapper, attr, value)\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
