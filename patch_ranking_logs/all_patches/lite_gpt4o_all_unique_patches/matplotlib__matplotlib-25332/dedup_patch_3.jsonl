{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..7ebca1a 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,12 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Remove weak references before pickling to avoid errors\n+        state[\"_align_label_groups\"] = {\n+            k: ([ax for ax in v if not isinstance(ax, weakref.ReferenceType)] \n+                if isinstance(v, list) else v)\n+            for k, v in self._align_label_groups.items()\n+        }\n         return state\n \n     def __setstate__(self, state):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..0f1bf24 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,6 +345,7 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        state['_align_label_groups'] = {k: [ax for ax in v if not isinstance(ax, weakref.ReferenceType)] if isinstance(v, list) else v for k, v in self._align_label_groups.items()}\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n", "normalized_occurrence": 1}
