{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11618", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c58cbf..cfcfa50 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -266,8 +266,14 @@ class Point(GeometryEntity):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n-        return sqrt(sum([(a - b)**2 for a, b in zip(\n-            self.args, p.args if isinstance(p, Point) else p)]))\n+        if isinstance(p, Point):\n+            # Get the maximum dimension between the two points\n+            max_dim = max(self.ambient_dimension, p.ambient_dimension)\n+            # Pad shorter point with zeros\n+            p1_coords = list(self.args) + [S.Zero] * (max_dim - self.ambient_dimension)\n+            p2_coords = list(p.args) + [S.Zero] * (max_dim - p.ambient_dimension)\n+            return sqrt(sum((a - b)**2 for a, b in zip(p1_coords, p2_coords)))\n+        return sqrt(sum((a - b)**2 for a, b in zip(self.args, p)))\n \n     def taxicab_distance(self, p):\n         \"\"\"The Taxicab Distance from self to point p.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex ecc6940..c72c43e 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -65,7 +65,12 @@ class Point(GeometryEntity):\n     def ambient_dimension(self):\n         return len(self)\n     def distance(self, p):\n-        return sqrt(sum([(a - b) ** 2 for a, b in zip(self.args, p.args if isinstance(p, Point) else p)]))\n+        if isinstance(p, Point):\n+            max_dim = max(self.ambient_dimension, p.ambient_dimension)\n+            p1_coords = list(self.args) + [S.Zero] * (max_dim - self.ambient_dimension)\n+            p2_coords = list(p.args) + [S.Zero] * (max_dim - p.ambient_dimension)\n+            return sqrt(sum(((a - b) ** 2 for a, b in zip(p1_coords, p2_coords))))\n+        return sqrt(sum(((a - b) ** 2 for a, b in zip(self.args, p))))\n     def taxicab_distance(self, p):\n         p = Point(p)\n         return sum((abs(a - b) for a, b in zip(self.args, p.args)))\n", "normalized_occurrence": 1}
