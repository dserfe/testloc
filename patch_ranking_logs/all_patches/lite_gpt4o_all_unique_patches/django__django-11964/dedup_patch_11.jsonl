{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..473a437 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -786,12 +786,17 @@ class Field(RegisterLookupMixin):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n@@ -802,6 +807,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"\n         if not prepared:\n             value = self.get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n \n     def get_db_prep_save(self, value, connection):\n@@ -1008,7 +1015,7 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n-        if isinstance(value, str) or value is None:\n+        if isinstance(value, str) or value is None or isinstance(value, enum.Enum):\n             return value\n         return str(value)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..52a1e8f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -354,14 +354,21 @@ class Field(RegisterLookupMixin):\n     def get_internal_type(self):\n         return self.__class__.__name__\n     def pre_save(self, model_instance, add):\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n+        return value\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if not prepared:\n             value = self.get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n     def get_db_prep_save(self, value, connection):\n         return self.get_db_prep_value(value, connection=connection, prepared=False)\n@@ -485,7 +492,7 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n-        if isinstance(value, str) or value is None:\n+        if isinstance(value, str) or value is None or isinstance(value, enum.Enum):\n             return value\n         return str(value)\n     def get_prep_value(self, value):\n", "normalized_occurrence": 1}
