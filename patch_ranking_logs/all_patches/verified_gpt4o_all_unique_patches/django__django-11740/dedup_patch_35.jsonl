{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..ec77259 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -100,7 +100,25 @@ class MigrationAutodetector:\n             fields_def.append(deconstruction)\n         return fields_def\n \n-    def _detect_changes(self, convert_apps=None, graph=None):\n+    def add_foreign_key_dependencies(self):\n+        \"\"\"\n+        Ensure dependencies for foreign keys are properly added.\n+        \"\"\"\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            \n+            for field_name, field in new_model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dependency in dependencies:\n+                        self.add_dependency(\n+                            app_label,\n+                            model_name,\n+                            field_name,\n+                            dependency,\n+                        )\n         \"\"\"\n         Return a dict of migration plans which will achieve the\n         change from from_state to to_state. The dict has app labels\n@@ -184,6 +202,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.add_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..bab8280 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -51,7 +51,17 @@ class MigrationAutodetector:\n                 del deconstruction[2]['to']\n             fields_def.append(deconstruction)\n         return fields_def\n-    def _detect_changes(self, convert_apps=None, graph=None):\n+    def add_foreign_key_dependencies(self):\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            for field_name, field in new_model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dependency in dependencies:\n+                        self.add_dependency(app_label, model_name, field_name, dependency)\n+        \"\\n        Return a dict of migration plans which will achieve the\\n        change from from_state to to_state. The dict has app labels\\n        as keys and a list of migrations as values.\\n\\n        The resulting migrations aren't specially named, but the names\\n        do matter for dependencies inside the set.\\n\\n        convert_apps is the list of apps to convert to use migrations\\n        (i.e. to make initial migrations for, in the usual case)\\n\\n        graph is an optional argument that, if provided, can help improve\\n        dependency generation and avoid potential circular dependencies.\\n        \"\n         self.generated_operations = {}\n         self.altered_indexes = {}\n         self.altered_constraints = {}\n@@ -98,6 +108,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.add_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n", "normalized_occurrence": 1}
