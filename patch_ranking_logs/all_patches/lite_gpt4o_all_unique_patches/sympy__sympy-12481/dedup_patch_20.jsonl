{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..976da53 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,12 +895,8 @@ class Permutation(Basic):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if has_dups(temp) and not is_cycle:\n+            raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n         if not is_cycle and \\\n@@ -912,8 +908,10 @@ class Permutation(Basic):\n             # it's not necessarily canonical so we won't store\n             # it -- use the array form instead\n             c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n+            aform = list(range(max(temp) + 1))\n+            for cycle in args:\n+                for i in range(len(cycle)):\n+                    aform[cycle[i]] = cycle[(i + 1) % len(cycle)]\n             aform = c.list()\n         else:\n             aform = list(args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..ae7c39c 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -194,18 +194,17 @@ class Permutation(Basic):\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if has_dups(temp) and (not is_cycle):\n+            raise ValueError('there were repeated elements.')\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n             c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n+            aform = list(range(max(temp) + 1))\n+            for cycle in args:\n+                for i in range(len(cycle)):\n+                    aform[cycle[i]] = cycle[(i + 1) % len(cycle)]\n             aform = c.list()\n         else:\n             aform = list(args)\n", "normalized_occurrence": 1}
