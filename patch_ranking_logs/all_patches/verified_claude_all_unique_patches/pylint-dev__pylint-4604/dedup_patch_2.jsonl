{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..1f20853 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2054,7 +2054,10 @@ class VariablesChecker(BaseChecker):\n                         msg = \"import %s\" % imported_name\n                     else:\n                         msg = f\"{imported_name} imported as {as_name}\"\n-                    if not _is_type_checking_import(stmt):\n+                    if not _is_type_checking_import(stmt) and not any(\n+                        real_name in str(annotation)\n+                        for annotation in self._type_annotation_names\n+                    ):\n                         self.add_message(\"unused-import\", args=msg, node=stmt)\n                 elif isinstance(stmt, astroid.ImportFrom) and stmt.modname != FUTURE:\n                     if SPECIAL_OBJ.search(imported_name):\n@@ -2079,7 +2082,10 @@ class VariablesChecker(BaseChecker):\n                         else:\n                             fields = (imported_name, stmt.modname, as_name)\n                             msg = \"%s imported from %s as %s\" % fields\n-                        if not _is_type_checking_import(stmt):\n+                        if not _is_type_checking_import(stmt) and not any(\n+                            real_name in str(annotation)\n+                            for annotation in self._type_annotation_names\n+                        ):\n                             self.add_message(\"unused-import\", args=msg, node=stmt)\n         del self._to_consume\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..e95570f 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -817,7 +817,7 @@ class VariablesChecker(BaseChecker):\n                         msg = 'import %s' % imported_name\n                     else:\n                         msg = f'{imported_name} imported as {as_name}'\n-                    if not _is_type_checking_import(stmt):\n+                    if not _is_type_checking_import(stmt) and (not any((real_name in str(annotation) for annotation in self._type_annotation_names))):\n                         self.add_message('unused-import', args=msg, node=stmt)\n                 elif isinstance(stmt, astroid.ImportFrom) and stmt.modname != FUTURE:\n                     if SPECIAL_OBJ.search(imported_name):\n@@ -834,7 +834,7 @@ class VariablesChecker(BaseChecker):\n                         else:\n                             fields = (imported_name, stmt.modname, as_name)\n                             msg = '%s imported from %s as %s' % fields\n-                        if not _is_type_checking_import(stmt):\n+                        if not _is_type_checking_import(stmt) and (not any((real_name in str(annotation) for annotation in self._type_annotation_names))):\n                             self.add_message('unused-import', args=msg, node=stmt)\n         del self._to_consume\n     def _check_metaclasses(self, node):\n", "normalized_occurrence": 1}
