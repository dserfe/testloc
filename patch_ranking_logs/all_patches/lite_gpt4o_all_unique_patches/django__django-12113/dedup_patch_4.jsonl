{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..38bb85e 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -188,15 +188,18 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         # property. This is necessary as the shareability is disabled by\n         # default in pysqlite and it cannot be changed once a connection is\n         # opened.\n-        if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n-            warnings.warn(\n-                'The `check_same_thread` option was provided and set to '\n-                'True. It will be overridden with False. Use the '\n-                '`DatabaseWrapper.allow_thread_sharing` property instead '\n-                'for controlling thread shareability.',\n-                RuntimeWarning\n-            )\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n+        if 'check_same_thread' in kwargs:\n+            if kwargs['check_same_thread']:\n+                warnings.warn(\n+                    'The `check_same_thread` option was provided and set to '\n+                    'True. It will be overridden with False. Use the '\n+                    '`DatabaseWrapper.allow_thread_sharing` property instead '\n+                    'for controlling thread shareability.',\n+                    RuntimeWarning\n+                )\n+            kwargs['check_same_thread'] = False\n+        else:\n+            kwargs.update({'check_same_thread': False, 'uri': True})\n         return kwargs\n \n     @async_unsafe\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..9032c99 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -65,9 +65,12 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if not settings_dict['NAME']:\n             raise ImproperlyConfigured('settings.DATABASES is improperly configured. Please supply the NAME value.')\n         kwargs = {'database': str(settings_dict['NAME']), 'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES, **settings_dict['OPTIONS']}\n-        if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n-            warnings.warn('The `check_same_thread` option was provided and set to True. It will be overridden with False. Use the `DatabaseWrapper.allow_thread_sharing` property instead for controlling thread shareability.', RuntimeWarning)\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n+        if 'check_same_thread' in kwargs:\n+            if kwargs['check_same_thread']:\n+                warnings.warn('The `check_same_thread` option was provided and set to True. It will be overridden with False. Use the `DatabaseWrapper.allow_thread_sharing` property instead for controlling thread shareability.', RuntimeWarning)\n+            kwargs['check_same_thread'] = False\n+        else:\n+            kwargs.update({'check_same_thread': False, 'uri': True})\n         return kwargs\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n", "normalized_occurrence": 1}
