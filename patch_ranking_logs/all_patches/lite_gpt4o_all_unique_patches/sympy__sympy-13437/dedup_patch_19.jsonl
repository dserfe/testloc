{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13437", "model_patch": "diff --git a/sympy/series/limits.py b/sympy/series/limits.py\nindex 5950b6d..48815a2 100644\n--- a/sympy/series/limits.py\n+++ b/sympy/series/limits.py\n@@ -152,10 +152,12 @@ class Limit(Expr):\n         if z0.is_positive:\n             e = e.rewrite([factorial, RisingFactorial], gamma)\n \n+        from sympy.functions.combinatorial.numbers import bell\n+\n         if e.is_Mul:\n             if abs(z0) is S.Infinity:\n                 e = factor_terms(e)\n-                e = e.rewrite(fibonacci, GoldenRatio)\n+                e = e.rewrite(fibonacci, GoldenRatio).rewrite(bell, S.Infinity)\n                 ok = lambda w: (z in w.free_symbols and\n                                 any(a.is_polynomial(z) or\n                                     any(z in m.free_symbols and m.is_polynomial(z)\n@@ -173,6 +175,9 @@ class Limit(Expr):\n                     else:\n                         return r\n \n+        if isinstance(e, bell) and z0 is S.Infinity:\n+            return S.Infinity\n+\n         if e.is_Order:\n             return Order(limit(e.expr, z, z0), *e.args[1:])\n \n@@ -194,4 +199,4 @@ class Limit(Expr):\n             else:\n                 raise NotImplementedError()\n \n-        return r\n+        return r\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/series/limits.py b/sympy/series/limits.py\nindex b4f20ab..8fdbde3 100644\n--- a/sympy/series/limits.py\n+++ b/sympy/series/limits.py\n@@ -81,10 +81,11 @@ class Limit(Expr):\n             return e\n         if z0.is_positive:\n             e = e.rewrite([factorial, RisingFactorial], gamma)\n+        from sympy.functions.combinatorial.numbers import bell\n         if e.is_Mul:\n             if abs(z0) is S.Infinity:\n                 e = factor_terms(e)\n-                e = e.rewrite(fibonacci, GoldenRatio)\n+                e = e.rewrite(fibonacci, GoldenRatio).rewrite(bell, S.Infinity)\n                 ok = lambda w: z in w.free_symbols and any((a.is_polynomial(z) or any((z in m.free_symbols and m.is_polynomial(z) for m in Mul.make_args(a))) for a in Add.make_args(w)))\n                 if all((ok(w) for w in e.as_numer_denom())):\n                     u = Dummy(positive=True)\n@@ -97,6 +98,8 @@ class Limit(Expr):\n                         return self\n                     else:\n                         return r\n+        if isinstance(e, bell) and z0 is S.Infinity:\n+            return S.Infinity\n         if e.is_Order:\n             return Order(limit(e.expr, z, z0), *e.args[1:])\n         try:\n", "normalized_occurrence": 1}
