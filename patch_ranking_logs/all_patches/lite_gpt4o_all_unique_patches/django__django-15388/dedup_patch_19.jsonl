{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..9b45402 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -278,12 +278,21 @@ class BaseReloader:\n         try:\n             path = path.absolute()\n         except FileNotFoundError:\n-            logger.debug(\n-                'Unable to watch directory %s as it cannot be resolved.',\n-                path,\n-                exc_info=True,\n-            )\n-            return\n+            if not os.path.exists(path):\n+                logger.debug(\n+                    'Unable to watch directory %s as it cannot be resolved.',\n+                    path,\n+                    exc_info=True,\n+                )\n+                return\n+            for root, dirs, files in os.walk(path):\n+                for dir in dirs:\n+                    full_path = os.path.join(root, dir)\n+                    self.directory_globs[full_path].add(glob)\n+                for file in files:\n+                    if file.endswith('.py'):\n+                        full_path = os.path.join(root, file)\n+                        self.extra_files.add(full_path)\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n         self.directory_globs[path].add(glob)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..aa992b0 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -175,8 +175,17 @@ class BaseReloader:\n         try:\n             path = path.absolute()\n         except FileNotFoundError:\n-            logger.debug('Unable to watch directory %s as it cannot be resolved.', path, exc_info=True)\n-            return\n+            if not os.path.exists(path):\n+                logger.debug('Unable to watch directory %s as it cannot be resolved.', path, exc_info=True)\n+                return\n+            for root, dirs, files in os.walk(path):\n+                for dir in dirs:\n+                    full_path = os.path.join(root, dir)\n+                    self.directory_globs[full_path].add(glob)\n+                for file in files:\n+                    if file.endswith('.py'):\n+                        full_path = os.path.join(root, file)\n+                        self.extra_files.add(full_path)\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n         self.directory_globs[path].add(glob)\n     def watched_files(self, include_globs=True):\n", "normalized_occurrence": 1}
