{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..72cb0ce 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -351,7 +351,7 @@ class TestReport(BaseReport):\n         else:\n             if not isinstance(excinfo, ExceptionInfo):\n                 outcome = \"failed\"\n-                longrepr = excinfo\n+                longrepr = excinfo.getrepr(style=item.config.getoption(\"tbstyle\", \"auto\"))\n             elif excinfo.errisinstance(skip.Exception):\n                 outcome = \"skipped\"\n                 r = excinfo._getreprcrash()\n@@ -359,7 +359,7 @@ class TestReport(BaseReport):\n             else:\n                 outcome = \"failed\"\n                 if call.when == \"call\":\n-                    longrepr = item.repr_failure(excinfo)\n+                    longrepr = excinfo.getrepr(style=item.config.getoption(\"tbstyle\", \"auto\"))\n                 else:  # exception in setup or teardown\n                     longrepr = item._repr_failure_py(\n                         excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..0ab4259 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -172,7 +172,7 @@ class TestReport(BaseReport):\n             longrepr = None\n         elif not isinstance(excinfo, ExceptionInfo):\n             outcome = 'failed'\n-            longrepr = excinfo\n+            longrepr = excinfo.getrepr(style=item.config.getoption('tbstyle', 'auto'))\n         elif excinfo.errisinstance(skip.Exception):\n             outcome = 'skipped'\n             r = excinfo._getreprcrash()\n@@ -180,7 +180,7 @@ class TestReport(BaseReport):\n         else:\n             outcome = 'failed'\n             if call.when == 'call':\n-                longrepr = item.repr_failure(excinfo)\n+                longrepr = excinfo.getrepr(style=item.config.getoption('tbstyle', 'auto'))\n             else:\n                 longrepr = item._repr_failure_py(excinfo, style=item.config.getoption('tbstyle', 'auto'))\n         for rwhen, key, content in item._report_sections:\n", "normalized_occurrence": 1}
