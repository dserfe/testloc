{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..ea2edd7 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -105,6 +105,26 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n+            # Handle nested classes by checking if the module path contains a reference to a class\n+            parts = module.split('.')\n+            for i in range(len(parts)-1, 0, -1):\n+                try:\n+                    parent_module = '.'.join(parts[:i])\n+                    class_path = '.'.join(parts[i:])\n+                    # Try importing to verify if this is the correct split point\n+                    exec(f\"import {parent_module}\")\n+                    parent = eval(parent_module)\n+                    # If we can find the class path as nested classes, use this split\n+                    current = parent\n+                    for part in class_path.split('.'):\n+                        current = getattr(current, part)\n+                    # If we reach here, we found the correct path\n+                    imports = {f\"import {parent_module}\"}\n+                    name = f\"{parent_module}.{class_path}.{name}\"\n+                    return name, imports\n+                except (ImportError, AttributeError):\n+                    continue\n+            # Fall back to original behavior if no nested class is found\n             imports = {\"import %s\" % module}\n             name = path\n         return name, imports\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..0be8d9d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -75,6 +75,21 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n+            parts = module.split('.')\n+            for i in range(len(parts) - 1, 0, -1):\n+                try:\n+                    parent_module = '.'.join(parts[:i])\n+                    class_path = '.'.join(parts[i:])\n+                    exec(f'import {parent_module}')\n+                    parent = eval(parent_module)\n+                    current = parent\n+                    for part in class_path.split('.'):\n+                        current = getattr(current, part)\n+                    imports = {f'import {parent_module}'}\n+                    name = f'{parent_module}.{class_path}.{name}'\n+                    return (name, imports)\n+                except (ImportError, AttributeError):\n+                    continue\n             imports = {'import %s' % module}\n             name = path\n         return (name, imports)\n", "normalized_occurrence": 1}
