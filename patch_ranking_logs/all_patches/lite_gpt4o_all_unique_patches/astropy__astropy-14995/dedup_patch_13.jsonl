{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex fbb2aba..6a7c3df 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -518,10 +518,16 @@ class NDArithmeticMixin:\n         ) or handle_mask is None:\n             return None\n         elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n-            return deepcopy(operand.mask)\n-        elif operand is None:\n-            return deepcopy(self.mask)\n+            if operand.mask is None:\n+                return None\n+            else:\n+                # Make a copy so there is no reference in the result.\n+                return deepcopy(operand.mask)\n+        elif operand.mask is None:\n+            if self.mask is None:\n+                return None\n+            else:\n+                return deepcopy(self.mask)\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex b7eb663..83e50e9 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -115,9 +115,15 @@ class NDArithmeticMixin:\n         if self.mask is None and operand is not None and (operand.mask is None) or handle_mask is None:\n             return None\n         elif self.mask is None and operand is not None:\n-            return deepcopy(operand.mask)\n-        elif operand is None:\n-            return deepcopy(self.mask)\n+            if operand.mask is None:\n+                return None\n+            else:\n+                return deepcopy(operand.mask)\n+        elif operand.mask is None:\n+            if self.mask is None:\n+                return None\n+            else:\n+                return deepcopy(self.mask)\n         else:\n             return handle_mask(self.mask, operand.mask, **kwds)\n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n", "normalized_occurrence": 1}
