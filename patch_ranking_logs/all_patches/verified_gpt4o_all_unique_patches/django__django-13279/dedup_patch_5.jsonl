{"model_name_or_path": "agentless", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..1282648 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -115,11 +115,13 @@ class SessionBase:\n \n     def decode(self, session_data):\n         try:\n+            if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha256') == 'sha1':\n+                return self._legacy_decode(session_data)\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        # RemovedInDjango40Warning: when the deprecation ends, handle here\n-        # exceptions similar to what _legacy_decode() does now.\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha1') != 'sha1':\n+                return self._legacy_decode(session_data)\n+            raise\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 25789fc..4cebe92 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -67,9 +67,13 @@ class SessionBase:\n         return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n     def decode(self, session_data):\n         try:\n+            if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha256') == 'sha1':\n+                return self._legacy_decode(session_data)\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', 'sha1') != 'sha1':\n+                return self._legacy_decode(session_data)\n+            raise\n     def _legacy_decode(self, session_data):\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n", "normalized_occurrence": 1}
