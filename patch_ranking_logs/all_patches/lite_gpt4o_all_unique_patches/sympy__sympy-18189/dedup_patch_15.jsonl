{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..7ac8ff5 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -335,14 +335,23 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n         if all(_is_int(s) for s in sol):\n             if do_permute_signs:\n                 permuted_sign = set(permute_signs(sol))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    permuted_sign = {tuple([s[dict_sym_index[i]] for i in syms]) for s in permuted_sign}\n                 final_soln.update(permuted_sign)\n             elif permute_few_signs:\n                 lst = list(permute_signs(sol))\n                 lst = list(filter(lambda x: x[0]*x[1] == sol[1]*sol[0], lst))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    lst = [tuple([s[dict_sym_index[i]] for i in syms]) for s in lst]\n                 permuted_sign = set(lst)\n                 final_soln.update(permuted_sign)\n             elif do_permute_signs_var:\n                 permuted_sign_var = set(signed_permutations(sol))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    permuted_sign_var = {tuple([s[dict_sym_index[i]] for i in syms]) for s in permuted_sign_var}\n                 final_soln.update(permuted_sign_var)\n             else:\n                 final_soln.add(sol)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..55013e8 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -176,14 +176,23 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n         if all((_is_int(s) for s in sol)):\n             if do_permute_signs:\n                 permuted_sign = set(permute_signs(sol))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    permuted_sign = {tuple([s[dict_sym_index[i]] for i in syms]) for s in permuted_sign}\n                 final_soln.update(permuted_sign)\n             elif permute_few_signs:\n                 lst = list(permute_signs(sol))\n                 lst = list(filter(lambda x: x[0] * x[1] == sol[1] * sol[0], lst))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    lst = [tuple([s[dict_sym_index[i]] for i in syms]) for s in lst]\n                 permuted_sign = set(lst)\n                 final_soln.update(permuted_sign)\n             elif do_permute_signs_var:\n                 permuted_sign_var = set(signed_permutations(sol))\n+                if syms and syms != var:\n+                    dict_sym_index = dict(zip(var, range(len(var))))\n+                    permuted_sign_var = {tuple([s[dict_sym_index[i]] for i in syms]) for s in permuted_sign_var}\n                 final_soln.update(permuted_sign_var)\n             else:\n                 final_soln.add(sol)\n", "normalized_occurrence": 1}
