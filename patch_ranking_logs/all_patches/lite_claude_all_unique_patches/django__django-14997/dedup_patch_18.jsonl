{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..e0f8ce0 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -236,7 +236,19 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 if delete_field.name not in index.fields\n             ]\n \n-        constraints = list(model._meta.constraints)\n+        constraints = []\n+        for constraint in model._meta.constraints:\n+            # Handle UniqueConstraint with F() expressions for SQLite\n+            if isinstance(constraint, UniqueConstraint) and constraint.contains_expressions:\n+                # Create a new constraint using field names directly\n+                fields = [expr.name if hasattr(expr, 'name') else expr for expr in constraint.expressions]\n+                new_constraint = UniqueConstraint(\n+                    *fields,\n+                    name=constraint.name,\n+                )\n+                constraints.append(new_constraint)\n+            else:\n+                constraints.append(constraint)\n \n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n@@ -441,4 +453,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..3b36b9b 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -128,7 +128,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         indexes = model._meta.indexes\n         if delete_field:\n             indexes = [index for index in indexes if delete_field.name not in index.fields]\n-        constraints = list(model._meta.constraints)\n+        constraints = []\n+        for constraint in model._meta.constraints:\n+            if isinstance(constraint, UniqueConstraint) and constraint.contains_expressions:\n+                fields = [expr.name if hasattr(expr, 'name') else expr for expr in constraint.expressions]\n+                new_constraint = UniqueConstraint(*fields, name=constraint.name)\n+                constraints.append(new_constraint)\n+            else:\n+                constraints.append(constraint)\n         body_copy = copy.deepcopy(body)\n         meta_contents = {'app_label': model._meta.app_label, 'db_table': model._meta.db_table, 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n", "normalized_occurrence": 1}
