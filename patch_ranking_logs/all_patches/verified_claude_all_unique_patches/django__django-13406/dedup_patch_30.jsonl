{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..980b8b6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -285,6 +285,24 @@ class Query(BaseExpression):\n         \"\"\"\n         return self.model._meta\n \n+    def __getstate__(self):\n+        \"\"\"\n+        Preserve values() query information for pickling.\n+        \"\"\"\n+        state = self.__dict__.copy()\n+        # Add values query information\n+        state['_values_select'] = getattr(self, 'values_select', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        \"\"\"\n+        Restore values() query information from pickling.\n+        \"\"\"\n+        values_select = state.pop('_values_select', None)\n+        self.__dict__.update(state)\n+        if values_select is not None:\n+            self.set_values(values_select)\n+\n     def clone(self):\n         \"\"\"\n         Return a copy of the current Query. A lightweight alternative to\n", "normalized_patch": "--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['_values_select'] = getattr(self, 'values_select', None)\n+        return state\n+    def __setstate__(self, state):\n+        values_select = state.pop('_values_select', None)\n+        self.__dict__.update(state)\n+        if values_select is not None:\n+            self.set_values(values_select)", "normalized_occurrence": 1}
