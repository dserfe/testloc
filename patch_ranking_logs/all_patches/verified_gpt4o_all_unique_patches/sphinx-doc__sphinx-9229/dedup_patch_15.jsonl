{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..836e91f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -549,7 +549,7 @@ class Documenter:\n             # etc. don't support a prepended module name\n             self.add_line('   :module: %s' % self.modname, sourcename)\n \n-    def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+    def get_doc(self, ignore: Optional[int] = None) -> Optional[List[List[str]]]:\n         \"\"\"Decode and return lines of the docstring(s) for the object.\n \n         When it returns None value, autodoc-process-docstring will not be called for this\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7792226..f36d612 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -283,7 +283,7 @@ class Documenter:\n             self.add_line('   :noindex:', sourcename)\n         if self.objpath:\n             self.add_line('   :module: %s' % self.modname, sourcename)\n-    def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n+    def get_doc(self, ignore: Optional[int]=None) -> Optional[List[List[str]]]:\n         if ignore is not None:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx50Warning, stacklevel=2)\n         docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n", "normalized_occurrence": 1}
