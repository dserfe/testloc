{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..3fe4877 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1025,6 +1025,8 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n+                elif any(field.required for field in self.fields):\n+                    raise ValidationError(self.error_messages['incomplete'], code='incomplete')\n                 else:\n                     return self.compress([])\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..a9cedd9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -592,6 +592,8 @@ class MultiValueField(Field):\n             if not value or not [v for v in value if v not in self.empty_values]:\n                 if self.required:\n                     raise ValidationError(self.error_messages['required'], code='required')\n+                elif any((field.required for field in self.fields)):\n+                    raise ValidationError(self.error_messages['incomplete'], code='incomplete')\n                 else:\n                     return self.compress([])\n         else:\n", "normalized_occurrence": 1}
