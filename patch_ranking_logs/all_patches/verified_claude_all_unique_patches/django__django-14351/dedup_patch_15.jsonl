{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..8ac90b4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -693,6 +693,13 @@ class SQLCompiler:\n         # alias for a given field. This also includes None -> start_alias to\n         # be used by local fields.\n         seen_models = {None: start_alias}\n+        \n+        # For __in lookups in subqueries, we only need the primary key\n+        if getattr(self.query, 'subquery', False) and any(isinstance(child, tuple) and child[0].endswith('__in') for child in getattr(self.query.where, 'children', [])):\n+            field = opts.pk\n+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)\n+            column = field.get_col(alias)\n+            return [column]\n \n         for field in opts.concrete_fields:\n             model = field.model._meta.concrete_model\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..db81fcf 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -393,6 +393,11 @@ class SQLCompiler:\n         only_load = self.deferred_to_columns()\n         start_alias = start_alias or self.query.get_initial_alias()\n         seen_models = {None: start_alias}\n+        if getattr(self.query, 'subquery', False) and any((isinstance(child, tuple) and child[0].endswith('__in') for child in getattr(self.query.where, 'children', []))):\n+            field = opts.pk\n+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)\n+            column = field.get_col(alias)\n+            return [column]\n         for field in opts.concrete_fields:\n             model = field.model._meta.concrete_model\n             if model == opts.model:\n", "normalized_occurrence": 1}
