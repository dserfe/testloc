{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..d393830 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -744,9 +744,10 @@ class Field(RegisterLookupMixin):\n         return connection.data_types_suffix.get(self.get_internal_type())\n \n     def get_db_converters(self, connection):\n+        converters = []\n         if hasattr(self, 'from_db_value'):\n-            return [self.from_db_value]\n-        return []\n+            converters.append(self.from_db_value)\n+        return converters\n \n     @property\n     def unique(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..f27956f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -326,9 +326,10 @@ class Field(RegisterLookupMixin):\n     def db_type_suffix(self, connection):\n         return connection.data_types_suffix.get(self.get_internal_type())\n     def get_db_converters(self, connection):\n+        converters = []\n         if hasattr(self, 'from_db_value'):\n-            return [self.from_db_value]\n-        return []\n+            converters.append(self.from_db_value)\n+        return converters\n     @property\n     def unique(self):\n         return self._unique or self.primary_key\n", "normalized_occurrence": 1}
