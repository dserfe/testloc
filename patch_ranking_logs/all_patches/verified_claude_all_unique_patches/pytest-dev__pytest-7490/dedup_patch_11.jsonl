{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..21e565f 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -261,8 +261,14 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = yield\n     rep = outcome.get_result()\n-    xfailed = item._store.get(xfailed_key, None)\n-    # unittest special case, see setting of unexpectedsuccess_key\n+    \n+    # Re-evaluate xfail marks for dynamically added markers\n+    if rep.failed and rep.when == \"call\":\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    else:\n+        xfailed = item._store.get(xfailed_key, None)\n+    \n+    # unittest special case, see setting of unexpectedsuccess_key  \n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n         reason = item._store[unexpectedsuccess_key]\n         if reason:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..2da2154 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -140,7 +140,10 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = (yield)\n     rep = outcome.get_result()\n-    xfailed = item._store.get(xfailed_key, None)\n+    if rep.failed and rep.when == 'call':\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    else:\n+        xfailed = item._store.get(xfailed_key, None)\n     if unexpectedsuccess_key in item._store and rep.when == 'call':\n         reason = item._store[unexpectedsuccess_key]\n         if reason:\n", "normalized_occurrence": 1}
