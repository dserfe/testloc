{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24637", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex e7f0196..ccef4bf 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1453,12 +1453,16 @@ or callable, default: value of *xycoords*\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n         self.update_positions(renderer)\n-        if self.arrow_patch is not None:\n-            if self.arrow_patch.figure is None and self.figure is not None:\n-                self.arrow_patch.figure = self.figure\n-            self.arrow_patch.draw(renderer)\n-        self.patch.draw(renderer)\n-        self.offsetbox.draw(renderer)\n+        renderer.open_group('annotationbbox', gid=self.get_gid())\n+        try:\n+            if self.arrow_patch is not None:\n+                if self.arrow_patch.figure is None and self.figure is not None:\n+                    self.arrow_patch.figure = self.figure\n+                self.arrow_patch.draw(renderer)\n+            self.patch.draw(renderer)\n+            self.offsetbox.draw(renderer)\n+        finally:\n+            renderer.close_group('annotationbbox')\n         self.stale = False\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex dd9cb5f..06e5743 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1210,12 +1210,16 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n         if not self.get_visible() or not self._check_xy(renderer):\n             return\n         self.update_positions(renderer)\n-        if self.arrow_patch is not None:\n-            if self.arrow_patch.figure is None and self.figure is not None:\n-                self.arrow_patch.figure = self.figure\n-            self.arrow_patch.draw(renderer)\n-        self.patch.draw(renderer)\n-        self.offsetbox.draw(renderer)\n+        renderer.open_group('annotationbbox', gid=self.get_gid())\n+        try:\n+            if self.arrow_patch is not None:\n+                if self.arrow_patch.figure is None and self.figure is not None:\n+                    self.arrow_patch.figure = self.figure\n+                self.arrow_patch.draw(renderer)\n+            self.patch.draw(renderer)\n+            self.offsetbox.draw(renderer)\n+        finally:\n+            renderer.close_group('annotationbbox')\n         self.stale = False\n \n class DraggableBase:\n", "normalized_occurrence": 1}
