{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..4e98bdd 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -535,35 +535,43 @@ class Add(Expr, AssocOp):\n             # is zero or not\n             return\n         nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        re = []\n+        im = []\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n+            if a.is_zero:\n+                continue\n+            elif a.is_real:\n+                if a.is_zero is False:\n+                    re.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                im.append(a)\n             elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                im.append(a*S.ImaginaryUnit)\n             else:\n                 return\n-        if z == len(self.args):\n+\n+        if not re and not im:\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n+\n+        if re:\n+            real_sum = self.func(*re)\n+            if real_sum.is_zero is None:\n+                return\n+            if real_sum.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+\n+        if im:\n+            imag_sum = self.func(*im)\n+            if imag_sum.is_zero is None:\n+                return\n+            if imag_sum.is_zero is False:\n+                return False\n+\n+        if not re or not im:\n+            return True\n+        return\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..b8b917c 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -289,35 +289,39 @@ class Add(Expr, AssocOp):\n         if self.is_commutative is False:\n             return\n         nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        re = []\n+        im = []\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n+            if a.is_zero:\n+                continue\n+            elif a.is_real:\n+                if a.is_zero is False:\n+                    re.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                im.append(a)\n             elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                im.append(a * S.ImaginaryUnit)\n             else:\n                 return\n-        if z == len(self.args):\n+        if not re and (not im):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n+        if re:\n+            real_sum = self.func(*re)\n+            if real_sum.is_zero is None:\n+                return\n+            if real_sum.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+        if im:\n+            imag_sum = self.func(*im)\n+            if imag_sum.is_zero is None:\n+                return\n+            if imag_sum.is_zero is False:\n+                return False\n+        if not re or not im:\n+            return True\n+        return\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
