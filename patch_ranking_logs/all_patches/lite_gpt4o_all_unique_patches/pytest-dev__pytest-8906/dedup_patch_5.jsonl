{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..1ebcef7 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,7 +130,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this option to skip the entire\n+        module during collection when certain conditions are not met.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -144,6 +145,16 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the rest of the module.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..7bd6953 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,7 +88,8 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. Use this option to skip the entire\n+        module during collection when certain conditions are not met.\n \n     .. note::\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n@@ -101,6 +102,15 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function should be called at the module level to skip the rest of the module.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    skip(msg, allow_module_level=True)\n+\n @_with_exception(Failed)\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n", "normalized_occurrence": 1}
