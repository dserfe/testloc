{"model_name_or_path": "agentless", "instance_id": "django__django-14730", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d685b12..677e5c0 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1180,6 +1180,11 @@ class ManyToManyField(RelatedField):\n         if symmetrical is None:\n             symmetrical = (to == RECURSIVE_RELATIONSHIP_CONSTANT)\n \n+        if symmetrical and related_name is not None:\n+            raise ValueError(\n+                'Cannot specify a related_name if the relationship is symmetrical.'\n+            )\n+\n         if through is not None and db_table is not None:\n             raise ValueError(\n                 'Cannot specify a db_table if an intermediary model is used.'\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 6fd437b..4e0789a 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -527,6 +527,8 @@ class ManyToManyField(RelatedField):\n                 raise TypeError('%s(%r) is invalid. First parameter to ManyToManyField must be either a model, a model name, or the string %r' % (self.__class__.__name__, to, RECURSIVE_RELATIONSHIP_CONSTANT))\n         if symmetrical is None:\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n+        if symmetrical and related_name is not None:\n+            raise ValueError('Cannot specify a related_name if the relationship is symmetrical.')\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n", "normalized_occurrence": 2}
