{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..98e0af5 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -157,6 +157,13 @@ class Field(RegisterLookupMixin):\n             choices = list(choices)\n         self.choices = choices\n         self.help_text = help_text\n+\n+        if self.choices is not None and self.max_length is not None:\n+            max_choice_length = max(len(str(choice[0])) for choice in self.choices)\n+            if self.max_length < max_choice_length:\n+                raise ValueError(\n+                    \"'max_length' is too small to fit the longest choice value.\"\n+                )\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..de33916 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -77,6 +77,10 @@ class Field(RegisterLookupMixin):\n             choices = list(choices)\n         self.choices = choices\n         self.help_text = help_text\n+        if self.choices is not None and self.max_length is not None:\n+            max_choice_length = max((len(str(choice[0])) for choice in self.choices))\n+            if self.max_length < max_choice_length:\n+                raise ValueError(\"'max_length' is too small to fit the longest choice value.\")\n         self.db_index = db_index\n         self.db_column = db_column\n         self._db_tablespace = db_tablespace\n", "normalized_occurrence": 1}
