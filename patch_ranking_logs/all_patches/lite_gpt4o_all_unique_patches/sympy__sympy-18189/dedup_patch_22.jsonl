{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..be38bca 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -179,10 +179,13 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n+            if syms != var or permute:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                perms = signed_permutations([eq.subs(dict(zip(syms, p))) for p in permute_signs(syms)])\n+                solutions = set()\n+                for perm in perms:\n+                    solutions.update({tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(perm)})\n+                return solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..30fd6fc 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,9 +70,13 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n+            if syms != var or permute:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                perms = signed_permutations([eq.subs(dict(zip(syms, p))) for p in permute_signs(syms)])\n+                solutions = set()\n+                for perm in perms:\n+                    solutions.update({tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(perm)})\n+                return solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
