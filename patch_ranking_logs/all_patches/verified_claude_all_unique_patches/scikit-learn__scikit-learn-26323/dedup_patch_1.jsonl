{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..1c9e89c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -275,8 +275,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n     def set_output(self, *, transform=None):\n         \"\"\"Set the output container when `\"transform\"` and `\"fit_transform\"` are called.\n \n-        Calling `set_output` will set the output of all estimators in `transformers`\n-        and `transformers_`.\n+        Calling `set_output` will set the output of all estimators in `transformers`,\n+        `transformers_` and `remainder` (if it's an estimator).\n \n         Parameters\n         ----------\n@@ -303,6 +303,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n+        # Handle remainder if it's an estimator\n+        remainder = getattr(self, \"remainder\", \"drop\")\n+        if remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(remainder, transform=transform)\n+\n         return self\n \n     def get_params(self, deep=True):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..98bc1c2 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -47,6 +47,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n+        remainder = getattr(self, 'remainder', 'drop')\n+        if remainder not in {'passthrough', 'drop'}:\n+            _safe_set_output(remainder, transform=transform)\n         return self\n     def get_params(self, deep=True):\n         return self._get_params('_transformers', deep=deep)\n", "normalized_occurrence": 10}
