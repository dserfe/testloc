{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..3389ea3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,21 +93,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                # :param xxx:\n-                arg = arguments.setdefault(parts[1], {})\n-                arg['param'] = True\n-            elif len(parts) > 2:\n-                # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n-                arg['param'] = True\n-                arg['type'] = True\n-        elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n+        if parts[0] == 'param' or parts[0] == 'type':\n+            if len(parts) >= 2:\n+                # Handle *args and **kwargs properly\n+                name = ' '.join(parts[1:])\n+                if parts[0] == 'param':\n+                    arg = arguments.setdefault(name, {})\n+                    arg['param'] = True\n+                    if name in ('*args', '**kwargs'):\n+                        arg['type'] = True\n+                elif parts[0] == 'type':\n+                    arg = arguments.setdefault(name, {})\n+                    arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..36ee2c0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -67,19 +67,17 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                arg = arguments.setdefault(parts[1], {})\n-                arg['param'] = True\n-            elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n-                arg['param'] = True\n-                arg['type'] = True\n-        elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n+        if parts[0] == 'param' or parts[0] == 'type':\n+            if len(parts) >= 2:\n+                name = ' '.join(parts[1:])\n+                if parts[0] == 'param':\n+                    arg = arguments.setdefault(name, {})\n+                    arg['param'] = True\n+                    if name in ('*args', '**kwargs'):\n+                        arg['type'] = True\n+                elif parts[0] == 'type':\n+                    arg = arguments.setdefault(name, {})\n+                    arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n", "normalized_occurrence": 1}
