{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-26113", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 0510462..5273775 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -5014,7 +5014,7 @@ default: :rc:`scatter.edgecolors`\n             if mincnt is None:\n                 mincnt = 0\n             accum = np.array(\n-                [reduce_C_function(acc) if len(acc) > mincnt else np.nan\n+                [reduce_C_function(acc) if len(acc) >= mincnt else np.nan\n                  for Cs_at_i in [Cs_at_i1, Cs_at_i2]\n                  for acc in Cs_at_i[1:]],  # [1:] drops out-of-range points.\n                 float)\n", "occurrence": 28, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex bb67c99..54b0b8d 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1411,7 +1411,7 @@ class Axes(_AxesBase):\n                     Cs_at_i2[i2[i]].append(C[i])\n             if mincnt is None:\n                 mincnt = 0\n-            accum = np.array([reduce_C_function(acc) if len(acc) > mincnt else np.nan for Cs_at_i in [Cs_at_i1, Cs_at_i2] for acc in Cs_at_i[1:]], float)\n+            accum = np.array([reduce_C_function(acc) if len(acc) >= mincnt else np.nan for Cs_at_i in [Cs_at_i1, Cs_at_i2] for acc in Cs_at_i[1:]], float)\n         good_idxs = ~np.isnan(accum)\n         offsets = np.zeros((n, 2), float)\n         offsets[:nx1 * ny1, 0] = np.repeat(np.arange(nx1), ny1)\n", "normalized_occurrence": 28}
