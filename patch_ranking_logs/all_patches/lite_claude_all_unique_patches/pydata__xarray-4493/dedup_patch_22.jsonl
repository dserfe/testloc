{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4493", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8003c0d..9bacd45 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3907,7 +3907,17 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dataset.\n         \"\"\"\n         merge_result = dataset_update_method(self, other)\n-        return self._replace(inplace=True, **merge_result._asdict())\n+        # Ensure we preserve the chunked nature of arrays by avoiding computation\n+        kwargs = merge_result._asdict()\n+        if 'variables' in kwargs:\n+            variables = kwargs['variables']\n+            for name, var in list(variables.items()):\n+                if name in self.variables and hasattr(self.variables[name].data, 'chunks'):\n+                    if not hasattr(var.data, 'chunks'):\n+                        # If the original was chunked but the new one isn't,\n+                        # rechunk the new one to match\n+                        variables[name] = var.chunk(self.variables[name].chunks)\n+        return self._replace(inplace=True, **kwargs)\n \n     def merge(\n         self,\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 5bd37a8..ec04878 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1254,7 +1254,14 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         return result\n     def update(self, other: 'CoercibleMapping') -> 'Dataset':\n         merge_result = dataset_update_method(self, other)\n-        return self._replace(inplace=True, **merge_result._asdict())\n+        kwargs = merge_result._asdict()\n+        if 'variables' in kwargs:\n+            variables = kwargs['variables']\n+            for name, var in list(variables.items()):\n+                if name in self.variables and hasattr(self.variables[name].data, 'chunks'):\n+                    if not hasattr(var.data, 'chunks'):\n+                        variables[name] = var.chunk(self.variables[name].chunks)\n+        return self._replace(inplace=True, **kwargs)\n     def merge(self, other: Union['CoercibleMapping', 'DataArray'], overwrite_vars: Union[Hashable, Iterable[Hashable]]=frozenset(), compat: str='no_conflicts', join: str='outer', fill_value: Any=dtypes.NA) -> 'Dataset':\n         other = other.to_dataset() if isinstance(other, xr.DataArray) else other\n         merge_result = dataset_merge_method(self, other, overwrite_vars=overwrite_vars, compat=compat, join=join, fill_value=fill_value)\n", "normalized_occurrence": 1}
