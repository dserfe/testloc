{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..5c2b146 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2105,11 +2105,26 @@ def uniq(seq, result=None):\n     [1, 4, 5, 2]\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n+\n+    Notes\n+    =====\n+    If the input sequence is modified while iterating, a RuntimeError\n+    will be raised.\n     \"\"\"\n     try:\n         seen = set()\n         result = result or []\n+        # Try to get initial length if sequence supports len()\n+        try:\n+            initial_length = len(seq)\n+            check_length = True\n+        except (TypeError, AttributeError):\n+            check_length = False\n+\n         for i, s in enumerate(seq):\n+            # Check if sequence was modified\n+            if check_length and len(seq) != initial_length:\n+                raise RuntimeError(\"sequence changed size during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..e41f8b9 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -733,7 +733,14 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        try:\n+            initial_length = len(seq)\n+            check_length = True\n+        except (TypeError, AttributeError):\n+            check_length = False\n         for i, s in enumerate(seq):\n+            if check_length and len(seq) != initial_length:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 3}
