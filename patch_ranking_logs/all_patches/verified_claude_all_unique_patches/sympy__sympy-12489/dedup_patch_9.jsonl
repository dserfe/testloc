{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..5f44a61 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -857,7 +857,7 @@ class Permutation(Basic):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:  # c\n             return _af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n@@ -867,9 +867,9 @@ class Permutation(Basic):\n                     return a\n                 return Perm(a.array_form, size=size)\n             if isinstance(a, Cycle):  # f\n-                return _af_new(a.list(size))\n+                return cls._af_new(a.list(size))\n             if not is_sequence(a):  # b\n-                return _af_new(list(range(a + 1)))\n+                return cls._af_new(list(range(a + 1)))\n             if has_variety(is_sequence(ai) for ai in a):\n                 ok = False\n         else:\n@@ -924,13 +924,13 @@ class Permutation(Basic):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n         the list ``a`` is supposed to be generated as a temporary value\n-        in a method, so p = Perm._af_new(a) is the only object\n+        in a method, so p = cls._af_new(a) is the only object\n         to hold a reference to ``a``::\n \n         Examples\n@@ -944,7 +944,7 @@ class Permutation(Basic):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..1e17973 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -168,7 +168,7 @@ class Permutation(Basic):\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:\n             return _af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n@@ -178,9 +178,9 @@ class Permutation(Basic):\n                     return a\n                 return Perm(a.array_form, size=size)\n             if isinstance(a, Cycle):\n-                return _af_new(a.list(size))\n+                return cls._af_new(a.list(size))\n             if not is_sequence(a):\n-                return _af_new(list(range(a + 1)))\n+                return cls._af_new(list(range(a + 1)))\n             if has_variety((is_sequence(ai) for ai in a)):\n                 ok = False\n         else:\n@@ -213,9 +213,9 @@ class Permutation(Basic):\n         obj._array_form = aform\n         obj._size = size\n         return obj\n-    @staticmethod\n-    def _af_new(perm):\n-        p = Basic.__new__(Perm, perm)\n+    @classmethod\n+    def _af_new(cls, perm):\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n", "normalized_occurrence": 1}
