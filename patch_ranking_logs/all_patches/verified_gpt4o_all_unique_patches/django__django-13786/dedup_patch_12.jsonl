{"model_name_or_path": "agentless", "instance_id": "django__django-13786", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 05e9a94..554cb37 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -137,11 +137,17 @@ class CreateModel(ModelOperation):\n                 ),\n             ]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n+            new_options = {**self.options}  # Start with the current options\n+            new_options.update(operation.options)  # Update with new options\n+            # Remove options not in the updated operation\n+            for key in AlterModelOptions.ALTER_OPTION_KEYS:\n+                if key not in operation.options:\n+                    new_options.pop(key, False)\n             return [\n                 CreateModel(\n                     self.name,\n                     fields=self.fields,\n-                    options={**self.options, **operation.options},\n+                    options=new_options,\n                     bases=self.bases,\n                     managers=self.managers,\n                 ),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex bf5c114..0706ccd 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -74,7 +74,12 @@ class CreateModel(ModelOperation):\n         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:\n             return [CreateModel(operation.new_name, fields=self.fields, options=self.options, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n-            return [CreateModel(self.name, fields=self.fields, options={**self.options, **operation.options}, bases=self.bases, managers=self.managers)]\n+            new_options = {**self.options}\n+            new_options.update(operation.options)\n+            for key in AlterModelOptions.ALTER_OPTION_KEYS:\n+                if key not in operation.options:\n+                    new_options.pop(key, False)\n+            return [CreateModel(self.name, fields=self.fields, options=new_options, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:\n             return [CreateModel(self.name, fields=self.fields, options={**self.options, **{operation.option_name: operation.option_value}}, bases=self.bases, managers=self.managers)]\n         elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:\n", "normalized_occurrence": 1}
