{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex c35b72b..dd9a0b0 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -173,7 +173,7 @@ class Relational(Boolean, EvalfMixin):\n                     real expressions.\n                 '''))\n \n-        return cls(lhs, rhs, **assumptions)\n+        return cls(lhs, rhs, evaluate=evaluate, **assumptions)\n \n     @property\n     def lhs(self):\n@@ -620,7 +620,7 @@ class Equality(Relational):\n             else:\n                 return _sympify(val)\n \n-        return Relational.__new__(cls, lhs, rhs)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=evaluate)\n \n     @classmethod\n     def _eval_relation(cls, lhs, rhs):\n@@ -771,7 +771,7 @@ class Unequality(Relational):\n             else:\n                 return _sympify(val)\n \n-        return Relational.__new__(cls, lhs, rhs, **options)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=evaluate, **options)\n \n     @classmethod\n     def _eval_relation(cls, lhs, rhs):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex 6f6b8fe..10a6803 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -43,7 +43,7 @@ class Relational(Boolean, EvalfMixin):\n         if not issubclass(cls, (Eq, Ne)):\n             if any(map(_nontrivBool, (lhs, rhs))):\n                 raise TypeError(filldedent('\\n                    A Boolean argument can only be used in\\n                    Eq and Ne; all other relationals expect\\n                    real expressions.\\n                '))\n-        return cls(lhs, rhs, **assumptions)\n+        return cls(lhs, rhs, evaluate=evaluate, **assumptions)\n     @property\n     def lhs(self):\n         return self._args[0]\n@@ -252,7 +252,7 @@ class Equality(Relational):\n                 return cls(lhs, rhs, evaluate=False)\n             else:\n                 return _sympify(val)\n-        return Relational.__new__(cls, lhs, rhs)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=evaluate)\n     @classmethod\n     def _eval_relation(cls, lhs, rhs):\n         return _sympify(lhs == rhs)\n@@ -321,7 +321,7 @@ class Unequality(Relational):\n                 return cls(lhs, rhs, evaluate=False)\n             else:\n                 return _sympify(val)\n-        return Relational.__new__(cls, lhs, rhs, **options)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=evaluate, **options)\n     @classmethod\n     def _eval_relation(cls, lhs, rhs):\n         return _sympify(lhs != rhs)\n", "normalized_occurrence": 1}
