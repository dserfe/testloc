{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..7d0e1fe 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -202,12 +202,13 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                # Convert both the FK and PK values using get_prep_value to ensure consistent formatting\n+                fk_value = model._meta.pk.get_prep_value(getattr(obj, self.fk_field))\n+                return (fk_value, model)\n \n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n+            lambda obj: (obj._meta.pk.get_prep_value(obj.pk), obj.__class__),\n             gfk_key,\n             True,\n             self.name,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..0099729 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -100,8 +100,9 @@ class GenericForeignKey(FieldCacheMixin):\n                 return None\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n-        return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n+                fk_value = model._meta.pk.get_prep_value(getattr(obj, self.fk_field))\n+                return (fk_value, model)\n+        return (ret_val, lambda obj: (obj._meta.pk.get_prep_value(obj.pk), obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n", "normalized_occurrence": 1}
