{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..8601d41 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -429,11 +429,10 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n                             isinstance(d, Symbol)]\n                 for (i, d) in sym_dims:\n                     py_inferred[d] = (arg.name, i)\n-        for arg in args:\n-            if arg.name in py_inferred:\n-                py_inferred[arg] = py_inferred.pop(arg.name)\n-        # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        # Ensure all arguments are included in py_args\n+        for arg in py_inferred:\n+            if arg not in py_args:\n+                py_args.append(arg)\n         return py_returns, py_args, py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..ac2a407 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -185,10 +185,9 @@ class CythonCodeWrapper(CodeWrapper):\n                 sym_dims = [(i, d) for i, d in enumerate(dims) if isinstance(d, Symbol)]\n                 for i, d in sym_dims:\n                     py_inferred[d] = (arg.name, i)\n-        for arg in args:\n-            if arg.name in py_inferred:\n-                py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        for arg in py_inferred:\n+            if arg not in py_args:\n+                py_args.append(arg)\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n", "normalized_occurrence": 1}
