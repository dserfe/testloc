{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14087", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex dbd459e..8fb2843 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[:, :, i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n@@ -2186,9 +2186,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n                 self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)\n-                self.coef_ = w[:, :X.shape[1]]\n-                if self.fit_intercept:\n-                    self.intercept_ = w[:, -1]\n+                self.coef_ = np.zeros((n_classes, X.shape[1]))\n+                self.intercept_ = np.zeros(n_classes)\n+                for i in range(n_classes):\n+                    self.coef_[i] = w[i, :X.shape[1]]\n+                    if self.fit_intercept:\n+                        self.intercept_[i] = w[i, -1]\n             else:\n                 self.coef_[index] = w[: X.shape[1]]\n                 if self.fit_intercept:\n@@ -2243,4 +2246,4 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n         if isinstance(scoring, str):\n             scoring = get_scorer(scoring)\n \n-        return scoring(self, X, y, sample_weight=sample_weight)\n+        return scoring(self, X, y, sample_weight=sample_weight)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 5d31b9f..cf449aa 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -553,7 +553,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator, LinearClassifierMi\n                 if self.multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)\n+                    w = np.mean([coefs_paths[:, :, i, best_indices[i], :] for i in range(len(folds))], axis=0)\n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n                 best_indices_l1 = best_indices // len(self.Cs_)\n@@ -561,9 +561,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator, LinearClassifierMi\n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n                 self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)\n-                self.coef_ = w[:, :X.shape[1]]\n-                if self.fit_intercept:\n-                    self.intercept_ = w[:, -1]\n+                self.coef_ = np.zeros((n_classes, X.shape[1]))\n+                self.intercept_ = np.zeros(n_classes)\n+                for i in range(n_classes):\n+                    self.coef_[i] = w[i, :X.shape[1]]\n+                    if self.fit_intercept:\n+                        self.intercept_[i] = w[i, -1]\n             else:\n                 self.coef_[index] = w[:X.shape[1]]\n                 if self.fit_intercept:\n", "normalized_occurrence": 1}
