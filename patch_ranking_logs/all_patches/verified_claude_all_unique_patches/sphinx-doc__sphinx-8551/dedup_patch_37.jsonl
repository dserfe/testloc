{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..f3c0637 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,17 +1260,30 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                    if modname:\n+                        # First try current module\n+                        if modname + '.' + name in self.objects and \\\n+                           self.objects[modname + '.' + name].objtype in objtypes:\n+                            newname = modname + '.' + name\n+                        else:\n+                            # Then try submodules of current module\n+                            searchname = modname + '.' + name\n+                            submods = [oname for oname in self.objects\n+                                     if oname.startswith(modname + '.') and\n+                                     oname.endswith('.' + name) and\n+                                     self.objects[oname].objtype in objtypes]\n+                            if len(submods) == 1:\n+                                newname = submods[0]\n+                    # Only fall back to global search if nothing found in current context\n+                    if not newname:\n+                        if name in self.objects and self.objects[name].objtype in objtypes:\n+                            newname = name\n+                        else:\n+                            # \"fuzzy\" searching mode\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects\n+                                     if oname.endswith(searchname) and\n+                                     self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..73ad483 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -759,13 +759,20 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                    if modname:\n+                        if modname + '.' + name in self.objects and self.objects[modname + '.' + name].objtype in objtypes:\n+                            newname = modname + '.' + name\n+                        else:\n+                            searchname = modname + '.' + name\n+                            submods = [oname for oname in self.objects if oname.startswith(modname + '.') and oname.endswith('.' + name) and (self.objects[oname].objtype in objtypes)]\n+                            if len(submods) == 1:\n+                                newname = submods[0]\n+                    if not newname:\n+                        if name in self.objects and self.objects[name].objtype in objtypes:\n+                            newname = name\n+                        else:\n+                            searchname = '.' + name\n+                            matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
