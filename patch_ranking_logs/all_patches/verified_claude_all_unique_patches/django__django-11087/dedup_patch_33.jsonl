{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11087", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 0bd756b..efad81c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -232,9 +232,16 @@ class Collector:\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n         \"\"\"\n+        # Only select the pk and fields needed for cascading deletions\n+        fields = ['pk']\n+        model = related.related_model\n+        # Add any FK fields that could be used in a cascade\n+        for field in model._meta.fields:\n+            if field.is_relation and field.remote_field.on_delete not in [DO_NOTHING, SET_NULL]:\n+                fields.append(field.name)\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only(*fields)\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n@@ -325,4 +332,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex f42ced6..27f4536 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -109,7 +109,12 @@ class Collector:\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n     def related_objects(self, related, objs):\n-        return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs})\n+        fields = ['pk']\n+        model = related.related_model\n+        for field in model._meta.fields:\n+            if field.is_relation and field.remote_field.on_delete not in [DO_NOTHING, SET_NULL]:\n+                fields.append(field.name)\n+        return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs}).only(*fields)\n     def instances_with_model(self):\n         for model, instances in self.data.items():\n             for obj in instances:\n", "normalized_occurrence": 1}
