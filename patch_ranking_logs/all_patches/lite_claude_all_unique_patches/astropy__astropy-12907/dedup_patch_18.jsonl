{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..8193be2 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -209,10 +209,13 @@ def _coord_matrix(model, pos, noutp):\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n \n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        if pos == 'left':\n+            for i in range(model.n_inputs):\n+                mat[i, i] = 1\n+        else:  # pos == 'right'\n+            offset = noutp - model.n_outputs\n+            for i in range(model.n_inputs):\n+                mat[i + offset, i] = 1\n     return mat\n \n \n@@ -314,4 +317,4 @@ def _separable(transform):\n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n-              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n+              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..6509ad7 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -62,10 +62,13 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+        if pos == 'left':\n+            for i in range(model.n_inputs):\n+                mat[i, i] = 1\n+        else:\n+            offset = noutp - model.n_outputs\n+            for i in range(model.n_inputs):\n+                mat[i + offset, i] = 1\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n", "normalized_occurrence": 1}
