{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15599", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex a9cb773..40f12b1 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from __future__ import print_function, division\n \n from sympy.core.numbers import nan\n@@ -123,9 +124,11 @@ class Mod(Function):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or mod_l and all(inner.args[1] == q for inner in mod_l):\n                 # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n@@ -135,7 +138,7 @@ class Mod(Function):\n                         non_mod.append(j)\n                 prod_mod = Mul(*mod)\n                 prod_non_mod = Mul(*non_mod)\n-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n+                prod_mod1 = Mul(*[i.args[0] for i in mod_l]) if mod_l else 1\n                 net = prod_mod1*prod_mod\n                 return prod_non_mod*cls(net, q)\n \n@@ -208,4 +211,4 @@ class Mod(Function):\n \n     def _eval_is_nonpositive(self):\n         if self.args[1].is_negative:\n-            return True\n+            return True\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 9ca06f6..91a0970 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -80,8 +80,10 @@ class Mod(Function):\n             both_l = non_mod_l, mod_l = ([], [])\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n-            if mod_l and all((inner.args[1] == q for inner in mod_l)):\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n+            was = non_mod_l[:]\n+            non_mod_l = [cls(x, q) for x in non_mod_l]\n+            changed = was != non_mod_l\n+            if changed or (mod_l and all((inner.args[1] == q for inner in mod_l))):\n                 mod = []\n                 non_mod = []\n                 for j in non_mod_l:\n@@ -91,7 +93,7 @@ class Mod(Function):\n                         non_mod.append(j)\n                 prod_mod = Mul(*mod)\n                 prod_non_mod = Mul(*non_mod)\n-                prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n+                prod_mod1 = Mul(*[i.args[0] for i in mod_l]) if mod_l else 1\n                 net = prod_mod1 * prod_mod\n                 return prod_non_mod * cls(net, q)\n         G = gcd(p, q)\n", "normalized_occurrence": 1}
