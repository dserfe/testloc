{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..7f2dc59 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -241,10 +241,29 @@ class Field(RegisterLookupMixin):\n         else:\n             return []\n \n+    def _check_max_length_for_choices(self):\n+        if not self.choices or self.max_length is None:\n+            return []\n+\n+        max_choice_length = max(len(str(value)) for value, _ in self.choices)\n+        if max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                    obj=self,\n+                    id='fields.E007',\n+                )\n+            ]\n+        return []\n+\n     def _check_choices(self):\n         if not self.choices:\n             return []\n \n+        errors = self._check_max_length_for_choices()\n+        if errors:\n+            return errors\n+\n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..2084af0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -117,9 +117,19 @@ class Field(RegisterLookupMixin):\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n             return []\n+    def _check_max_length_for_choices(self):\n+        if not self.choices or self.max_length is None:\n+            return []\n+        max_choice_length = max((len(str(value)) for value, _ in self.choices))\n+        if max_choice_length > self.max_length:\n+            return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E007')]\n+        return []\n     def _check_choices(self):\n         if not self.choices:\n             return []\n+        errors = self._check_max_length_for_choices()\n+        if errors:\n+            return errors\n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n", "normalized_occurrence": 1}
