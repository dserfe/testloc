{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d42883b..d4d6a8c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1549,7 +1549,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                            self.fullname, exc)\n             return None\n \n-        if sig is None:\n+        if sig is None or (self._signature_method_name in ['__init__', '__new__'] and\n+                           sig.return_annotation is Signature.empty):\n             return None\n \n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2c8c52a..06eb13e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -867,7 +867,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         except TypeError as exc:\n             logger.warning(__('Failed to get a constructor signature for %s: %s'), self.fullname, exc)\n             return None\n-        if sig is None:\n+        if sig is None or (self._signature_method_name in ['__init__', '__new__'] and sig.return_annotation is Signature.empty):\n             return None\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n     def _find_signature(self) -> Tuple[str, str]:\n", "normalized_occurrence": 1}
