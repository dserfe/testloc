{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..413b491 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -190,7 +190,18 @@ class HTTPAdapter(BaseAdapter):\n                 **proxy_kwargs\n             )\n         else:\n+            # Extract credentials from proxy if present\n+            username = None\n+            password = None\n+            if '@' in proxy:\n+                auth, proxy_url = proxy.rsplit('@', 1)\n+                auth = auth.split('://', 1)[1]\n+                username, password = auth.split(':', 1)\n+                \n             proxy_headers = self.proxy_headers(proxy)\n+            if username and password:\n+                proxy_headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n+                \n             manager = self.proxy_manager[proxy] = proxy_from_url(\n                 proxy,\n                 proxy_headers=proxy_headers,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..d3b732f 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -74,7 +74,15 @@ class HTTPAdapter(BaseAdapter):\n             username, password = get_auth_from_url(proxy)\n             manager = self.proxy_manager[proxy] = SOCKSProxyManager(proxy, username=username, password=password, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)\n         else:\n+            username = None\n+            password = None\n+            if '@' in proxy:\n+                auth, proxy_url = proxy.rsplit('@', 1)\n+                auth = auth.split('://', 1)[1]\n+                username, password = auth.split(':', 1)\n             proxy_headers = self.proxy_headers(proxy)\n+            if username and password:\n+                proxy_headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n             manager = self.proxy_manager[proxy] = proxy_from_url(proxy, proxy_headers=proxy_headers, num_pools=self._pool_connections, maxsize=self._pool_maxsize, block=self._pool_block, **proxy_kwargs)\n         return manager\n     def cert_verify(self, conn, url, verify, cert):\n", "normalized_occurrence": 1}
