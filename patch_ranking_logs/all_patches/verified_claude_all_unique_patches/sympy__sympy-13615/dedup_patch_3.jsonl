{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..1fe839a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,6 +1933,33 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n+            syms = [m for m in self.args if not m.is_number]\n+            if other == S.Reals and nums != []:\n+                # Reals cannot contain elements other than numbers and symbols.\n+                intervals = []  # Build up a list of intervals between the elements\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))  # both open\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+\n+                if syms != []:\n+                    return Complement(Union(intervals, evaluate=False),\n+                            FiniteSet(*syms), evaluate=False)\n+                else:\n+                    return Union(intervals, evaluate=False)\n+            else:\n+                # For any other interval, we just keep the elements that are not in the interval\n+                result_elements = []\n+                for elem in self.args:\n+                    if elem.is_number:\n+                        if not other.contains(elem):\n+                            result_elements.append(elem)\n+                    else:\n+                        result_elements.append(elem)\n+                if len(result_elements) == len(self.args):\n+                    return None\n+                return FiniteSet(*result_elements)\n+            nums = sorted(m for m in self.args if m.is_number)\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n                 # Reals cannot contain elements other than numbers and symbols.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..26f4e2c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,6 +842,29 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n+            syms = [m for m in self.args if not m.is_number]\n+            if other == S.Reals and nums != []:\n+                intervals = []\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+                if syms != []:\n+                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+                else:\n+                    return Union(intervals, evaluate=False)\n+            else:\n+                result_elements = []\n+                for elem in self.args:\n+                    if elem.is_number:\n+                        if not other.contains(elem):\n+                            result_elements.append(elem)\n+                    else:\n+                        result_elements.append(elem)\n+                if len(result_elements) == len(self.args):\n+                    return None\n+                return FiniteSet(*result_elements)\n+            nums = sorted((m for m in self.args if m.is_number))\n             if other == S.Reals and nums != []:\n                 syms = [m for m in self.args if m.is_Symbol]\n                 intervals = []\n", "normalized_occurrence": 1}
