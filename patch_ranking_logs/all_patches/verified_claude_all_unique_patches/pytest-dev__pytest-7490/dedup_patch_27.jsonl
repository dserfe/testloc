{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..94fd453 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -276,14 +276,17 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and not isinstance(call.excinfo.value, raises):\n-                rep.outcome = \"failed\"\n-            else:\n-                rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n+    elif not rep.skipped:\n+        # Re-evaluate to catch dynamically added markers\n+        xfailed = evaluate_xfail_marks(item)\n+        if xfailed:\n+            if call.excinfo:\n+                raises = xfailed.raises\n+                if raises is not None and not isinstance(call.excinfo.value, raises):\n+                    rep.outcome = \"failed\"\n+                else:\n+                    rep.outcome = \"skipped\"\n+                    rep.wasxfail = xfailed.reason\n         elif call.when == \"call\":\n             if xfailed.strict:\n                 rep.outcome = \"failed\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..1e90f28 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -154,14 +154,16 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and (not isinstance(call.excinfo.value, raises)):\n-                rep.outcome = 'failed'\n-            else:\n-                rep.outcome = 'skipped'\n-                rep.wasxfail = xfailed.reason\n+    elif not rep.skipped:\n+        xfailed = evaluate_xfail_marks(item)\n+        if xfailed:\n+            if call.excinfo:\n+                raises = xfailed.raises\n+                if raises is not None and (not isinstance(call.excinfo.value, raises)):\n+                    rep.outcome = 'failed'\n+                else:\n+                    rep.outcome = 'skipped'\n+                    rep.wasxfail = xfailed.reason\n         elif call.when == 'call':\n             if xfailed.strict:\n                 rep.outcome = 'failed'\n", "normalized_occurrence": 1}
