{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..aa80c69 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,14 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # If the attribute being looked up is a property defined on any parent class,\n+        # let the normal attribute lookup happen by raising AttributeError\n+        for cls in type(self).__mro__[1:]:  # skip the class itself\n+            if isinstance(vars(cls).get(attr), property):\n+                raise AttributeError(\n+                    f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n+                )\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..3ba20d8 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -262,6 +262,9 @@ class SkyCoord(ShapedLikeNDArray):\n     def _is_name(self, string):\n         return self.frame.name == string or (isinstance(self.frame.name, list) and string in self.frame.name)\n     def __getattr__(self, attr):\n+        for cls in type(self).__mro__[1:]:\n+            if isinstance(vars(cls).get(attr), property):\n+                raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n         if '_sky_coord_frame' in self.__dict__:\n             if self._is_name(attr):\n                 return self\n", "normalized_occurrence": 1}
