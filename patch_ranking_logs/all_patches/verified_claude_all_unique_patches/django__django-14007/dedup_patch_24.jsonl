{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..25cb085 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,22 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            rows = list(result)\n+            for row in rows:\n+                values = list(row)\n+                for pos, converter in enumerate(converters):\n+                    values[pos] = converter(values[pos], None, connection)\n+                row = tuple(values)\n+            if len(rows) == 1:\n+                return rows[0]\n+            return rows\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..02968f2 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,22 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            rows = list(result)\n+            for row in rows:\n+                values = list(row)\n+                for pos, converter in enumerate(converters):\n+                    values[pos] = converter(values[pos], None, connection)\n+                row = tuple(values)\n+            if len(rows) == 1:\n+                return rows[0]\n+            return rows\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
