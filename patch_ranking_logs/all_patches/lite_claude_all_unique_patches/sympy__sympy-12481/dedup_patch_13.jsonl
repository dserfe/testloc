{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..c467635 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -909,12 +909,17 @@ class Permutation(Basic):\n                              max(temp))\n \n         if is_cycle:\n-            # it's not necessarily canonical so we won't store\n-            # it -- use the array form instead\n-            c = Cycle()\n+            # For cyclic form, apply cycles left-to-right\n+            n = max(max(c) for c in args) + 1 if args else 0\n+            aform = list(range(n))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                # Convert each cycle individually\n+                cycle = Cycle(*ci)\n+                # Apply the cycle to our running permutation\n+                new_aform = list(aform)\n+                for i in range(len(aform)):\n+                    new_aform[i] = aform[cycle(i)]\n+                aform = new_aform\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..7ec7843 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -203,10 +203,14 @@ class Permutation(Basic):\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n-            c = Cycle()\n+            n = max((max(c) for c in args)) + 1 if args else 0\n+            aform = list(range(n))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                cycle = Cycle(*ci)\n+                new_aform = list(aform)\n+                for i in range(len(aform)):\n+                    new_aform[i] = aform[cycle(i)]\n+                aform = new_aform\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "normalized_occurrence": 1}
