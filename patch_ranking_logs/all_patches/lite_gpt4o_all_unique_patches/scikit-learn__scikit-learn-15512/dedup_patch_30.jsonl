{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..fff2047 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -193,11 +193,20 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n+            if not unconverged and K > 0:\n                 if verbose:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n-    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+        warnings.warn(\"Affinity propagation did not converge, this model \"\n+                      \"will not have any cluster centers.\", ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return cluster_centers_indices, labels, it + 1\n+        else:\n+            return cluster_centers_indices, labels\n         if verbose:\n             print(\"Did not converge\")\n \n@@ -219,7 +228,16 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         # Reduce labels to a sorted, gapless, list\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+        warnings.warn(\"Affinity propagation did not converge, this model \"\n+                      \"will not have any cluster centers.\", ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return cluster_centers_indices, labels, it + 1\n+        else:\n+            return cluster_centers_indices, labels\n         warnings.warn(\"Affinity propagation did not converge, this model \"\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n@@ -227,7 +245,16 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n \n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n-    else:\n+        if verbose:\n+            print(\"Did not converge\")\n+        warnings.warn(\"Affinity propagation did not converge, this model \"\n+                      \"will not have any cluster centers.\", ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return cluster_centers_indices, labels, it + 1\n+        else:\n+            return cluster_centers_indices, labels\n         return cluster_centers_indices, labels\n \n \n@@ -440,4 +467,4 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n         labels : ndarray, shape (n_samples,)\n             Cluster labels.\n         \"\"\"\n-        return super().fit_predict(X, y)\n+        return super().fit_predict(X, y)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..f8aa68a 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -64,11 +64,19 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n             unconverged = np.sum((se == convergence_iter) + (se == 0)) != n_samples\n-            if not unconverged and K > 0 or it == max_iter:\n+            if not unconverged and K > 0:\n                 if verbose:\n                     print('Converged after %d iterations.' % it)\n                 break\n-    else:\n+        if verbose:\n+            print('Did not converge')\n+        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return (cluster_centers_indices, labels, it + 1)\n+        else:\n+            return (cluster_centers_indices, labels)\n         if verbose:\n             print('Did not converge')\n     I = np.flatnonzero(E)\n@@ -85,13 +93,29 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         labels = I[c]\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n+        if verbose:\n+            print('Did not converge')\n+        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return (cluster_centers_indices, labels, it + 1)\n+        else:\n+            return (cluster_centers_indices, labels)\n         warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n     if return_n_iter:\n         return (cluster_centers_indices, labels, it + 1)\n-    else:\n+        if verbose:\n+            print('Did not converge')\n+        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return (cluster_centers_indices, labels, it + 1)\n+        else:\n+            return (cluster_centers_indices, labels)\n         return (cluster_centers_indices, labels)\n class AffinityPropagation(ClusterMixin, BaseEstimator):\n     def __init__(self, damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity='euclidean', verbose=False):\n", "normalized_occurrence": 1}
