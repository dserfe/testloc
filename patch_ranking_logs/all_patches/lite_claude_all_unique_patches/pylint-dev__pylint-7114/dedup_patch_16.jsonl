{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..7c10f21 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -16,7 +16,20 @@ from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n-        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n+        # Consider it a package if:\n+        # 1. It's explicitly marked as a namespace package, or\n+        # 2. It has an __init__.py, or\n+        # 3. The module name matches its parent directory name (implicit namespace)\n+        if is_namespace:\n+            return True\n+        if modutils.check_modpath_has_init(inner_path, parts):\n+            return True\n+        # Handle the case where module name matches directory name\n+        if len(parts) >= 2:\n+            parent_dir = parts[-2]\n+            module_name = parts[-1]\n+            return parent_dir == module_name\n+        return False\n \n     return modutils.modpath_from_file_with_callback(\n         filename, path=path, is_package_cb=_is_package_cb\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..c0e4283 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -7,7 +7,15 @@ from astroid import modutils\n from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n-        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n+        if is_namespace:\n+            return True\n+        if modutils.check_modpath_has_init(inner_path, parts):\n+            return True\n+        if len(parts) >= 2:\n+            parent_dir = parts[-2]\n+            module_name = parts[-1]\n+            return parent_dir == module_name\n+        return False\n     return modutils.modpath_from_file_with_callback(filename, path=path, is_package_cb=_is_package_cb)\n def get_python_path(filepath: str) -> str:\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n", "normalized_occurrence": 1}
