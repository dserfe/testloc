{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..5dc38c0 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -163,6 +163,16 @@ class ValidationError(Exception):\n             error_dict.setdefault(NON_FIELD_ERRORS, []).extend(self.error_list)\n         return error_dict\n \n+    def _normalize_error_dict(self, error_dict):\n+        \"\"\"\n+        Convert the error_dict to a sorted list of tuples\n+        to ensure consistent comparison.\n+        \"\"\"\n+        return sorted(\n+            (field, sorted(errors))\n+            for field, errors in error_dict.items()\n+        )\n+\n     def __iter__(self):\n         if hasattr(self, 'error_dict'):\n             for field, errors in self.error_dict.items():\n@@ -174,6 +184,18 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.messages) == sorted(other.messages)\n+        return False\n+\n+    def __ne__(self, other):\n+        return not self.__eq__(other)\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +212,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def _normalize_error_dict(self, error_dict):\n+        \"\"\"\n+        Convert the error_dict to a sorted list of tuples\n+        to ensure consistent comparison.\n+        \"\"\"\n+        return sorted(((field, sorted(errors)) for field, errors in error_dict.items()))\n+\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._normalize_error_dict(self.error_dict) == self._normalize_error_dict(other.error_dict)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.messages) == sorted(other.messages)\n+        return False\n+\n+    def __ne__(self, other):\n+        return not self.__eq__(other)\n+", "normalized_occurrence": 1}
