{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13033", "model_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex 33e697b..8f80692 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -67,15 +67,17 @@ class BaseTimeSeries(QTable):\n                 required_columns = self._required_columns\n \n             plural = 's' if len(required_columns) > 1 else ''\n-\n             if not self._required_columns_relax and len(self.colnames) == 0:\n-\n                 raise ValueError(\"{} object is invalid - expected '{}' \"\n                                  \"as the first column{} but time series has no columns\"\n                                  .format(self.__class__.__name__, required_columns[0], plural))\n \n-            elif self.colnames[:len(required_columns)] != required_columns:\n+            missing_columns = set(required_columns) - set(self.colnames[:len(required_columns)])\n+            if missing_columns:\n+                raise ValueError(\"{} object is invalid - missing required column(s): {}\"\n+                                 .format(self.__class__.__name__, ', '.join(missing_columns)))\n \n+            if self.colnames[:len(required_columns)] != required_columns:\n                 raise ValueError(\"{} object is invalid - expected '{}' \"\n                                  \"as the first column{} but found '{}'\"\n                                  .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n@@ -89,4 +91,4 @@ class BaseTimeSeries(QTable):\n         self._required_columns_enabled = False\n         yield\n         self._required_columns_enabled = True\n-        self._check_required_columns()\n+        self._check_required_columns()\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex 99658fd..e5accb7 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -32,7 +32,10 @@ class BaseTimeSeries(QTable):\n             plural = 's' if len(required_columns) > 1 else ''\n             if not self._required_columns_relax and len(self.colnames) == 0:\n                 raise ValueError(\"{} object is invalid - expected '{}' as the first column{} but time series has no columns\".format(self.__class__.__name__, required_columns[0], plural))\n-            elif self.colnames[:len(required_columns)] != required_columns:\n+            missing_columns = set(required_columns) - set(self.colnames[:len(required_columns)])\n+            if missing_columns:\n+                raise ValueError('{} object is invalid - missing required column(s): {}'.format(self.__class__.__name__, ', '.join(missing_columns)))\n+            if self.colnames[:len(required_columns)] != required_columns:\n                 raise ValueError(\"{} object is invalid - expected '{}' as the first column{} but found '{}'\".format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n             if self._required_columns_relax and self._required_columns == self.colnames[:len(self._required_columns)]:\n                 self._required_columns_relax = False\n", "normalized_occurrence": 1}
