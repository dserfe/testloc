{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..fb60a73 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -425,7 +425,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().add_constraint(model, constraint)\n+            # SQLite does not support expressions in unique constraints directly,\n+            # so log a warning if such a constraint is encountered and skip it.\n+            import warnings\n+            warnings.warn(\n+                'SQLite does not support unique constraints containing expressions, '\n+                'conditions, includes, or deferrable unique constraints. '\n+                'The constraint will be skipped.'\n+            )\n         else:\n             self._remake_table(model)\n \n@@ -436,9 +443,16 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().remove_constraint(model, constraint)\n+            # SQLite does not support expressions in unique constraints directly,\n+            # so log a warning if such a constraint is encountered and skip it.\n+            import warnings\n+            warnings.warn(\n+                'SQLite does not support unique constraints containing expressions, '\n+                'conditions, includes, or deferrable unique constraints. '\n+                'The constraint will be skipped.'\n+            )\n         else:\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..e988b0e 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -202,12 +202,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.delete_model(old_field.remote_field.through)\n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().add_constraint(model, constraint)\n+            import warnings\n+            warnings.warn('SQLite does not support unique constraints containing expressions, conditions, includes, or deferrable unique constraints. The constraint will be skipped.')\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().remove_constraint(model, constraint)\n+            import warnings\n+            warnings.warn('SQLite does not support unique constraints containing expressions, conditions, includes, or deferrable unique constraints. The constraint will be skipped.')\n         else:\n             self._remake_table(model)\n     def _collate_sql(self, collation):\n", "normalized_occurrence": 1}
