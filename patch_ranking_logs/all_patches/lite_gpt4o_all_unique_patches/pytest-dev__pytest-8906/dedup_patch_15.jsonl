{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..92c161e 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -124,9 +124,11 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n \n-    This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n-    be called in doctests as well.\n+    This function should be called only during testing (setup, call or teardown).\n+\n+    .. note::\n+        For skipping a module based on certain conditions (like Python version),\n+        use the :func:`skip_module` function.\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n@@ -144,7 +146,15 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n-@_with_exception(Failed)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at module level to skip the rest of the module\n+    based on certain conditions like mismatching Python versions.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    skip(msg=msg, allow_module_level=True)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..d64fe5e 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -82,9 +82,11 @@ def exit(msg: str, returncode: Optional[int]=None) -> 'NoReturn':\n def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     \"\"\"Skip an executing test with the given message.\n \n-    This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n-    be called in doctests as well.\n+    This function should be called only during testing (setup, call or teardown).\n+\n+    .. note::\n+        For skipping a module based on certain conditions (like Python version),\n+        use the :func:`skip_module` function.\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n@@ -101,7 +103,16 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n-@_with_exception(Failed)\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at module level to skip the rest of the module\n+    based on certain conditions like mismatching Python versions.\n+\n+    :param str msg: Message to display upon skipping the module.\n+    \"\"\"\n+    skip(msg=msg, allow_module_level=True)\n+\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "normalized_occurrence": 1}
