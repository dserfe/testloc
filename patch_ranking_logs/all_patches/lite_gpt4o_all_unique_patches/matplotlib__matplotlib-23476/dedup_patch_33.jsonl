{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..c5b48c9 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3030,6 +3030,7 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_dpi'] = self.dpi\n         return state\n \n     def __setstate__(self, state):\n@@ -3044,6 +3045,7 @@ class Figure(FigureBase):\n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n+        self.dpi = state.pop('_dpi', self.dpi)\n         FigureCanvasBase(self)  # Set self.canvas.\n \n         if restore_to_pylab:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..994b1e4 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -954,6 +954,7 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_dpi'] = self.dpi\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n@@ -961,6 +962,7 @@ class Figure(FigureBase):\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n+        self.dpi = state.pop('_dpi', self.dpi)\n         FigureCanvasBase(self)\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n", "normalized_occurrence": 1}
