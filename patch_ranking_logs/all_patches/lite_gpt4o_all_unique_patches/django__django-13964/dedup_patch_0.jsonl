{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..0f087f6 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -937,10 +937,9 @@ class Model(metaclass=ModelBase):\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+                # Ensure that the related object's pk is assigned to the field's attname.\n+                if getattr(obj, field.target_field.attname) != getattr(self, field.attname) or getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, getattr(obj, field.target_field.attname))\n \n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..9baa8db 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -495,8 +495,8 @@ class Model(metaclass=ModelBase):\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n                 elif getattr(self, field.attname) is None:\n                     setattr(self, field.attname, obj.pk)\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+                if getattr(obj, field.target_field.attname) != getattr(self, field.attname) or getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, getattr(obj, field.target_field.attname))\n     def delete(self, using=None, keep_parents=False):\n         using = using or router.db_for_write(self.__class__, instance=self)\n         assert self.pk is not None, \"%s object can't be deleted because its %s attribute is set to None.\" % (self._meta.object_name, self._meta.pk.attname)\n", "normalized_occurrence": 1}
