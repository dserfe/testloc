{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 3174ba6..69ffad4 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -132,8 +132,10 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n+            # Add padding if necessary before decoding\n+            pad = '=' * (-len(session_data) % 4)\n+            encoded_data = base64.b64decode((session_data + pad).encode('ascii'))\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex cfa6de2..a76c0af 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -77,8 +77,9 @@ class SessionBase:\n         hash = self._hash(serialized)\n         return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n     def _legacy_decode(self, session_data):\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n+            pad = '=' * (-len(session_data) % 4)\n+            encoded_data = base64.b64decode((session_data + pad).encode('ascii'))\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n             if not constant_time_compare(hash.decode(), expected_hash):\n", "normalized_occurrence": 3}
