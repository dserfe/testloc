{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..d837145 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1474,7 +1474,11 @@ class Variable(\n         reordered = self.transpose(*dim_order)\n \n         new_shape = reordered.shape[: len(other_dims)] + new_dim_sizes\n-        new_data = reordered.data.reshape(new_shape)\n+        # Use reshape only if the new shape is different to avoid unnecessary reshaping\n+        if reordered.shape != new_shape:\n+            new_data = reordered.data.reshape(new_shape)\n+        else:\n+            new_data = reordered.data\n         new_dims = reordered.dims[: len(other_dims)] + new_dim_names\n \n         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..92095f0 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1119,7 +1119,10 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         dim_order = other_dims + [old_dim]\n         reordered = self.transpose(*dim_order)\n         new_shape = reordered.shape[:len(other_dims)] + new_dim_sizes\n-        new_data = reordered.data.reshape(new_shape)\n+        if reordered.shape != new_shape:\n+            new_data = reordered.data.reshape(new_shape)\n+        else:\n+            new_data = reordered.data\n         new_dims = reordered.dims[:len(other_dims)] + new_dim_names\n         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)\n \n", "normalized_occurrence": 1}
