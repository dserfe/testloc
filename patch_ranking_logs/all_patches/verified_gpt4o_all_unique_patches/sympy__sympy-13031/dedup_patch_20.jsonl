{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..b273f5a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -217,17 +217,13 @@ class BlockDiagMatrix(BlockMatrix):\n \n     @property\n     def blocks(self):\n-        from sympy.matrices.immutable import ImmutableDenseMatrix\n-        mats = self.args\n-        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n-                        for j in range(len(mats))]\n-                        for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        return self.args\n \n     @property\n     def shape(self):\n-        return (sum(block.rows for block in self.args),\n-                sum(block.cols for block in self.args))\n+        numrows = max(block.rows for block in self.args)\n+        numcols = sum(block.cols for block in self.args)\n+        return (numrows, numcols)\n \n     @property\n     def blockshape(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..bc4ea2c 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -118,13 +118,12 @@ class BlockDiagMatrix(BlockMatrix):\n         return self.args\n     @property\n     def blocks(self):\n-        from sympy.matrices.immutable import ImmutableDenseMatrix\n-        mats = self.args\n-        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols) for j in range(len(mats))] for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        return self.args\n     @property\n     def shape(self):\n-        return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n+        numrows = max((block.rows for block in self.args))\n+        numcols = sum((block.cols for block in self.args))\n+        return (numrows, numcols)\n     @property\n     def blockshape(self):\n         n = len(self.args)\n", "normalized_occurrence": 1}
