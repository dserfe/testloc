{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 87c3fb8..03b9239 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1380,8 +1380,11 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                            self.fullname, exc)\n             return None\n \n+        # Unwrap the object to its original state\n         if sig is None:\n-            return None\n+            obj = unwrap_all(self.object) if self.object else None\n+            if obj:\n+                sig = inspect.signature(obj)\n \n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 69b2ccc..fd8564a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1005,7 +1005,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             logger.warning(__('Failed to get a constructor signature for %s: %s'), self.fullname, exc)\n             return None\n         if sig is None:\n-            return None\n+            obj = unwrap_all(self.object) if self.object else None\n+            if obj:\n+                sig = inspect.signature(obj)\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n     def format_signature(self, **kwargs: Any) -> str:\n", "normalized_occurrence": 1}
