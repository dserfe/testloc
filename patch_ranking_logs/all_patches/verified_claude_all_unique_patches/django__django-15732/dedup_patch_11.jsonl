{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..843e2e0 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -208,6 +209,24 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 model._meta.db_table, [old_field.column], suffix=\"_like\"\n             )\n             self.execute(self._delete_index_sql(model, index_name))\n+            \n+        # Drop any unique constraints that might conflict with unique_together changes\n+        if old_field.unique and not new_field.unique:\n+            # Get a list of all unique constraints on this table\n+            self.execute(\n+                \"\"\"\n+                SELECT conname FROM pg_constraint \n+                WHERE conrelid = %s::regclass AND contype = 'u'\n+                \"\"\",\n+                [model._meta.db_table],\n+            )\n+            for constraint in self.connection.cursor().fetchall():\n+                self.execute(\n+                    'ALTER TABLE %s DROP CONSTRAINT IF EXISTS %s' % (\n+                        self.quote_name(model._meta.db_table),\n+                        self.quote_name(constraint[0]),\n+                    )\n+                )\n \n         super()._alter_field(\n             model,\n@@ -296,4 +315,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex d911e18..43f447b 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -75,6 +75,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if (old_field.db_index or old_field.unique) and (old_type.startswith('varchar') and (not new_type.startswith('varchar')) or (old_type.startswith('text') and (not new_type.startswith('text'))) or (old_type.startswith('citext') and (not new_type.startswith('citext')))):\n             index_name = self._create_index_name(model._meta.db_table, [old_field.column], suffix='_like')\n             self.execute(self._delete_index_sql(model, index_name))\n+        if old_field.unique and (not new_field.unique):\n+            self.execute(\"\\n                SELECT conname FROM pg_constraint \\n                WHERE conrelid = %s::regclass AND contype = 'u'\\n                \", [model._meta.db_table])\n+            for constraint in self.connection.cursor().fetchall():\n+                self.execute('ALTER TABLE %s DROP CONSTRAINT IF EXISTS %s' % (self.quote_name(model._meta.db_table), self.quote_name(constraint[0])))\n         super()._alter_field(model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict)\n         if not (old_field.db_index or old_field.unique) and new_field.db_index or (not old_field.unique and new_field.unique):\n             like_index_statement = self._create_like_index_sql(model, new_field)\n", "normalized_occurrence": 1}
