{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..054d93a 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -712,8 +712,16 @@ class _EvaluatorPrinter(object):\n \n         dummify = self._dummify\n \n+        # Force dummify for any symbol containing special characters or if dummify=True\n+        def should_dummify(arg):\n+            if dummify:\n+                return True\n+            if isinstance(arg, (Symbol, MatrixSymbol)) and not self._is_safe_ident(str(arg)):\n+                return True\n+            return isinstance(arg, Dummy)\n+\n         # Args of type Dummy can cause name collisions with args\n-        # of type Symbol.  Force dummify of everything in this\n+        # of type Symbol.  Also dummify args with special characters.\n         # situation.\n         if not dummify:\n             dummify = any(isinstance(arg, Dummy) for arg in flatten(args))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..ac4035f 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -285,6 +285,12 @@ class _EvaluatorPrinter(object):\n         from sympy import Dummy, Symbol, Function, flatten\n         from sympy.matrices import DeferredVector\n         dummify = self._dummify\n+        def should_dummify(arg):\n+            if dummify:\n+                return True\n+            if isinstance(arg, (Symbol, MatrixSymbol)) and (not self._is_safe_ident(str(arg))):\n+                return True\n+            return isinstance(arg, Dummy)\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n         argstrs = []\n", "normalized_occurrence": 1}
