{"model_name_or_path": "agentless", "instance_id": "django__django-16642", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex b918697..fb90d64 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -606,13 +606,23 @@ class FileResponse(StreamingHttpResponse):\n         if self._no_explicit_content_type:\n             if filename:\n                 content_type, encoding = mimetypes.guess_type(filename)\n-                # Encoding isn't set to prevent browsers from automatically\n-                # uncompressing files.\n-                content_type = {\n-                    \"bzip2\": \"application/x-bzip\",\n-                    \"gzip\": \"application/gzip\",\n-                    \"xz\": \"application/x-xz\",\n-                }.get(encoding, content_type)\n+                # Handle special cases for '.Z' and '.br' file extensions\n+                special_types = {\n+                    \".Z\": \"application/x-compress\",\n+                    \".br\": \"application/x-brotli\",\n+                }\n+                for ext, mime in special_types.items():\n+                    if filename.endswith(ext):\n+                        content_type = mime\n+                        break\n+                else:\n+                    # Encoding isn't set to prevent browsers from automatically\n+                    # uncompressing files.\n+                    content_type = {\n+                        \"bzip2\": \"application/x-bzip\",\n+                        \"gzip\": \"application/gzip\",\n+                        \"xz\": \"application/x-xz\",\n+                    }.get(encoding, content_type)\n                 self.headers[\"Content-Type\"] = (\n                     content_type or \"application/octet-stream\"\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 508a8a7..d40299a 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -329,7 +329,13 @@ class FileResponse(StreamingHttpResponse):\n         if self._no_explicit_content_type:\n             if filename:\n                 content_type, encoding = mimetypes.guess_type(filename)\n-                content_type = {'bzip2': 'application/x-bzip', 'gzip': 'application/gzip', 'xz': 'application/x-xz'}.get(encoding, content_type)\n+                special_types = {'.Z': 'application/x-compress', '.br': 'application/x-brotli'}\n+                for ext, mime in special_types.items():\n+                    if filename.endswith(ext):\n+                        content_type = mime\n+                        break\n+                else:\n+                    content_type = {'bzip2': 'application/x-bzip', 'gzip': 'application/gzip', 'xz': 'application/x-xz'}.get(encoding, content_type)\n                 self.headers['Content-Type'] = content_type or 'application/octet-stream'\n             else:\n                 self.headers['Content-Type'] = 'application/octet-stream'\n", "normalized_occurrence": 1}
