{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..85e507e 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2037,9 +2037,9 @@ class InlineModelAdmin(BaseModelAdmin):\n             'fields': fields,\n             'exclude': exclude,\n             'formfield_callback': partial(self.formfield_for_dbfield, request=request),\n-            'extra': self.get_extra(request, obj, **kwargs),\n+            'extra': 0 if not self.has_add_permission(request, obj) else self.get_extra(request, obj, **kwargs),\n             'min_num': self.get_min_num(request, obj, **kwargs),\n-            'max_num': self.get_max_num(request, obj, **kwargs),\n+            'max_num': 0 if not self.has_add_permission(request, obj) else self.get_max_num(request, obj, **kwargs),\n             'can_delete': can_delete,\n             **kwargs,\n         }\n@@ -2095,6 +2095,14 @@ class InlineModelAdmin(BaseModelAdmin):\n                     return False\n                 return super().has_changed()\n \n+            def clean(self):\n+                # For view-only users, don't allow any modifications\n+                if not can_change and not self.instance._state.adding:\n+                    return self.initial\n+                if not can_add and self.instance._state.adding:\n+                    return self.initial\n+                return super().clean()\n+\n         defaults['form'] = DeleteProtectedModelForm\n \n         if defaults['fields'] is None and not modelform_defines_fields(defaults['form']):\n@@ -2159,4 +2167,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..7dc8e60 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1000,7 +1000,7 @@ class InlineModelAdmin(BaseModelAdmin):\n             exclude.extend(self.form._meta.exclude)\n         exclude = exclude or None\n         can_delete = self.can_delete and self.has_delete_permission(request, obj)\n-        defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, **kwargs}\n+        defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': 0 if not self.has_add_permission(request, obj) else self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': 0 if not self.has_add_permission(request, obj) else self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, **kwargs}\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n@@ -1029,6 +1029,12 @@ class InlineModelAdmin(BaseModelAdmin):\n                 if not can_add and self.instance._state.adding:\n                     return False\n                 return super().has_changed()\n+            def clean(self):\n+                if not can_change and (not self.instance._state.adding):\n+                    return self.initial\n+                if not can_add and self.instance._state.adding:\n+                    return self.initial\n+                return super().clean()\n         defaults['form'] = DeleteProtectedModelForm\n         if defaults['fields'] is None and (not modelform_defines_fields(defaults['form'])):\n             defaults['fields'] = forms.ALL_FIELDS\n", "normalized_occurrence": 1}
