{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..aa59394 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,10 +178,24 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n+            # Get chained exceptions if any\n+            chain_idx = 0\n+            current = rep.longrepr\n+            excinfo_chain = []\n+            while hasattr(current, 'chain'):\n+                chain_idx += 1\n+                current = current.chain\n+                if current is None:\n+                    break\n+                exc_repr = disassembled_report(current)\n+                exc_repr['chain_idx'] = chain_idx\n+                excinfo_chain.append(exc_repr)\n+\n             return {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n+                \"chain\": excinfo_chain,\n             }\n \n         d = self.__dict__.copy()\n@@ -257,6 +271,20 @@ class BaseReport:\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n+\n+                # Reconstruct chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    current = exception_info\n+                    for chain_exc in reportdict[\"longrepr\"][\"chain\"]:\n+                        chain_exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**chain_exc[\"reprtraceback\"]),\n+                            reprcrash=ReprFileLocation(**chain_exc[\"reprcrash\"]),\n+                        )\n+                        for section in chain_exc[\"sections\"]:\n+                            chain_exc_info.addsection(*section)\n+                        current.chain = chain_exc_info\n+                        current = current.chain\n+\n                 reportdict[\"longrepr\"] = exception_info\n \n         return cls(**reportdict)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..d2d4105 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,18 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            chain_idx = 0\n+            current = rep.longrepr\n+            excinfo_chain = []\n+            while hasattr(current, 'chain'):\n+                chain_idx += 1\n+                current = current.chain\n+                if current is None:\n+                    break\n+                exc_repr = disassembled_report(current)\n+                exc_repr['chain_idx'] = chain_idx\n+                excinfo_chain.append(exc_repr)\n+            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, 'chain': excinfo_chain}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -133,6 +144,14 @@ class BaseReport:\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n+                if 'chain' in reportdict['longrepr']:\n+                    current = exception_info\n+                    for chain_exc in reportdict['longrepr']['chain']:\n+                        chain_exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**chain_exc['reprtraceback']), reprcrash=ReprFileLocation(**chain_exc['reprcrash']))\n+                        for section in chain_exc['sections']:\n+                            chain_exc_info.addsection(*section)\n+                        current.chain = chain_exc_info\n+                        current = current.chain\n                 reportdict['longrepr'] = exception_info\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n", "normalized_occurrence": 1}
