{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..9def02c 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -92,7 +92,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {key: (value() if callable(value) else value) for key, value in (initial or {}).items()}\n         self.error_class = error_class\n         # Translators: This is the default suffix added to form field labels\n         self.label_suffix = label_suffix if label_suffix is not None else _(\":\")\n@@ -117,6 +117,11 @@ class BaseForm(RenderableFormMixin):\n                 \"not both be True.\"\n             )\n \n+        # Handle callable initial values for fields\n+        for name, field in self.fields.items():\n+            if name in self.initial and callable(self.initial[name]):\n+                self.initial[name] = self.initial[name]()\n+\n         # Initialize form renderer. Use a global default if not specified\n         # either as an argument or as self.default_renderer.\n         if renderer is None:\n@@ -536,4 +541,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..8e66298 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -58,7 +58,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {key: value() if callable(value) else value for key, value in (initial or {}).items()}\n         self.error_class = error_class\n         self.label_suffix = label_suffix if label_suffix is not None else _(':')\n         self.empty_permitted = empty_permitted\n@@ -70,6 +70,9 @@ class BaseForm(RenderableFormMixin):\n             self.use_required_attribute = use_required_attribute\n         if self.empty_permitted and self.use_required_attribute:\n             raise ValueError('The empty_permitted and use_required_attribute arguments may not both be True.')\n+        for name, field in self.fields.items():\n+            if name in self.initial and callable(self.initial[name]):\n+                self.initial[name] = self.initial[name]()\n         if renderer is None:\n             if self.default_renderer is None:\n                 renderer = get_default_renderer()\n", "normalized_occurrence": 1}
