{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..dce8385 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,6 +1389,28 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        # If any of the sets is empty, the intersection is empty\n+        if any(s.is_empty for s in self.args):\n+            return False\n+            \n+        # Handle basic case first\n+        if not all(fuzzy_bool(set.contains(other)) for set in self.args):\n+            return False\n+            \n+        # For complex sets being intersected with Reals, we need to verify\n+        # that the element actually exists in the intersection\n+        if len(self.args) == 2 and S.Reals in self.args:\n+            other_set = next(s for s in self.args if s != S.Reals)\n+            if other_set.is_subset(S.Complexes):\n+                # If the element is in both sets but the actual intersection\n+                # can be computed, defer to the computed intersection\n+                try:\n+                    actual_intersection = Intersection(*self.args, evaluate=True)\n+                    if actual_intersection != self:\n+                        return actual_intersection.contains(other)\n+                except NotImplementedError:\n+                    pass\n+        \n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..4d020be 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,6 +530,19 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n+        if any((s.is_empty for s in self.args)):\n+            return False\n+        if not all((fuzzy_bool(set.contains(other)) for set in self.args)):\n+            return False\n+        if len(self.args) == 2 and S.Reals in self.args:\n+            other_set = next((s for s in self.args if s != S.Reals))\n+            if other_set.is_subset(S.Complexes):\n+                try:\n+                    actual_intersection = Intersection(*self.args, evaluate=True)\n+                    if actual_intersection != self:\n+                        return actual_intersection.contains(other)\n+                except NotImplementedError:\n+                    pass\n         return And(*[set.contains(other) for set in self.args])\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "normalized_occurrence": 1}
