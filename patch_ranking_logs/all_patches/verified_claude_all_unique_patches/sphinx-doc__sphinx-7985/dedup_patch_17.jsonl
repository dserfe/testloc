{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..6577741 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,21 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if local reference exists in the environment\n+                if uri.startswith('#'):  # Reference to anchor in same document\n+                    anchor = uri[1:]\n+                    if not any(node.get('ids') == [anchor] for node in self.env.get_doctree(docname).traverse()):\n+                        return 'broken', 'Anchor %s not found' % uri, 0\n+                    return 'working', '', 0\n+                else:  # Reference to another document\n+                    docname, anchor = split_explicit_target(uri)\n+                    if docname not in self.env.all_docs:\n+                        return 'broken', 'Document %s not found' % docname, 0\n+                    if anchor:\n+                        doctree = self.env.get_doctree(docname)\n+                        if not any(node.get('ids') == [anchor] for node in doctree.traverse()):\n+                            return 'broken', 'Anchor %s in document %s not found' % (anchor, docname), 0\n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..41f5159 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,20 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    anchor = uri[1:]\n+                    if not any((node.get('ids') == [anchor] for node in self.env.get_doctree(docname).traverse())):\n+                        return ('broken', 'Anchor %s not found' % uri, 0)\n+                    return ('working', '', 0)\n+                else:\n+                    docname, anchor = split_explicit_target(uri)\n+                    if docname not in self.env.all_docs:\n+                        return ('broken', 'Document %s not found' % docname, 0)\n+                    if anchor:\n+                        doctree = self.env.get_doctree(docname)\n+                        if not any((node.get('ids') == [anchor] for node in doctree.traverse())):\n+                            return ('broken', 'Anchor %s in document %s not found' % (anchor, docname), 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
