{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..40080f5 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -304,9 +304,20 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            separable_matrix = _operators[transform.op](sepleft, sepright)\n+            # Adjust the separable matrix for nested CompoundModels with '&'\n+            if isinstance(transform.left, CompoundModel) and transform.left.op == '&':\n+                separable_matrix = np.kron(np.eye(transform.left.n_outputs, dtype=bool), separable_matrix)\n+            if isinstance(transform.right, CompoundModel) and transform.right.op == '&':\n+                separable_matrix = np.kron(separable_matrix, np.eye(transform.right.n_outputs, dtype=bool))\n+            return separable_matrix\n+        else:\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..716ff92 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -99,9 +99,19 @@ def _separable(transform):\n     if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n         return transform_matrix\n     elif isinstance(transform, CompoundModel):\n-        sepleft = _separable(transform.left)\n-        sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            separable_matrix = _operators[transform.op](sepleft, sepright)\n+            if isinstance(transform.left, CompoundModel) and transform.left.op == '&':\n+                separable_matrix = np.kron(np.eye(transform.left.n_outputs, dtype=bool), separable_matrix)\n+            if isinstance(transform.right, CompoundModel) and transform.right.op == '&':\n+                separable_matrix = np.kron(separable_matrix, np.eye(transform.right.n_outputs, dtype=bool))\n+            return separable_matrix\n+        else:\n+            sepleft = _separable(transform.left)\n+            sepright = _separable(transform.right)\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper, '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
