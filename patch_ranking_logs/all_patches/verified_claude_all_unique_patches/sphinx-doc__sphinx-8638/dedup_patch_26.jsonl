{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..f4def17 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -805,7 +805,9 @@ class PyAttribute(PyObject):\n             else:\n                 return name\n \n-        return _('%s (%s attribute)') % (attrname, clsname)\n+        # Generate a more specific index entry that includes the full path\n+        # This prevents linking between different attributes with the same name\n+        return _('%s (%s.%s attribute)') % (attrname, modname, clsname)\n \n \n class PyDecoratorMixin:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..b01f51c 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -499,7 +499,7 @@ class PyAttribute(PyObject):\n                 return _('%s (in module %s)') % (name, modname)\n             else:\n                 return name\n-        return _('%s (%s attribute)') % (attrname, clsname)\n+        return _('%s (%s.%s attribute)') % (attrname, modname, clsname)\n class PyDecoratorMixin:\n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n         for cls in self.__class__.__mro__:\n", "normalized_occurrence": 1}
