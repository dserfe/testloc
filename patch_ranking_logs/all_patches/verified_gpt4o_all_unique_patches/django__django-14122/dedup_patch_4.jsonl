{"model_name_or_path": "agentless", "instance_id": "django__django-14122", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex be54ccd..3e60db1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -125,7 +125,12 @@ class SQLCompiler:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n+        # Remove Meta.ordering fields from order_by to prevent them from being added to the GROUP BY clause.\n+        non_ordering_exprs = [\n+            (expr, sql_params_is_ref) for expr, sql_params_is_ref in order_by\n+            if not getattr(expr, 'contains_aggregate', False)\n+        ]\n+        for expr, (sql, params, is_ref) in non_ordering_exprs:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n             if not is_ref:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 4a5ff10..655fadb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -55,7 +55,8 @@ class SQLCompiler:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n+        non_ordering_exprs = [(expr, sql_params_is_ref) for expr, sql_params_is_ref in order_by if not getattr(expr, 'contains_aggregate', False)]\n+        for expr, (sql, params, is_ref) in non_ordering_exprs:\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n", "normalized_occurrence": 1}
