{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..7c9e3c4 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -73,6 +73,11 @@ class MigrationAutodetector:\n             # If this is a type that implements 'deconstruct' as an instance method,\n             # avoid treating this as being deconstructible itself - see #22951\n             return obj\n+        elif callable(obj):\n+            # Handle nested class methods for default values\n+            obj_self = getattr(obj, '__self__', None)\n+            if isinstance(obj_self, type):\n+                return f'{obj_self.__module__}.{obj_self.__qualname__}.{obj.__name__}'\n         elif hasattr(obj, \"deconstruct\"):\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..9b458df 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -36,6 +36,10 @@ class MigrationAutodetector:\n             return RegexObject(obj)\n         elif isinstance(obj, type):\n             return obj\n+        elif callable(obj):\n+            obj_self = getattr(obj, '__self__', None)\n+            if isinstance(obj_self, type):\n+                return f'{obj_self.__module__}.{obj_self.__qualname__}.{obj.__name__}'\n         elif hasattr(obj, 'deconstruct'):\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n", "normalized_occurrence": 1}
