{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 8b01d4f..b3c0aa4 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -871,9 +871,11 @@ class Expr(Basic, EvalfMixin):\n         return value\n \n     def _eval_power(self, other):\n-        # subclass to compute self**other for cases when\n-        # other is not NaN, 0, or 1\n-        return None\n+        from sympy import I\n+        if self.is_Number and other.is_Number:\n+            if self < 0 and other % 1 != 0:\n+                return self**other * I\n+        return self**other\n \n     def _eval_conjugate(self):\n         if self.is_real:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 63018de..f013658 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -478,7 +478,11 @@ class Expr(Basic, EvalfMixin):\n                     value += limit(self, x, s, '+') - limit(self, x, s, '-')\n         return value\n     def _eval_power(self, other):\n-        return None\n+        from sympy import I\n+        if self.is_Number and other.is_Number:\n+            if self < 0 and other % 1 != 0:\n+                return self ** other * I\n+        return self ** other\n     def _eval_conjugate(self):\n         if self.is_real:\n             return self\n", "normalized_occurrence": 1}
