{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..4e8e016 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,6 +979,12 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n+        if (isinstance(self.expression, Q) and \n+            not self.expression.children and \n+            self.expression.negated and\n+            list(self.expression.children) == []):\n+            # Handle negated empty Q object specially\n+            return '1', []\n         return compiler.compile(self.expression)\n \n     def __repr__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 7926e3e..90f555b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -590,6 +590,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n             return expression.get_group_by_cols(alias=alias)\n         return super().get_group_by_cols()\n     def as_sql(self, compiler, connection):\n+        if isinstance(self.expression, Q) and (not self.expression.children) and self.expression.negated and (list(self.expression.children) == []):\n+            return ('1', [])\n         return compiler.compile(self.expression)\n     def __repr__(self):\n         return '{}({})'.format(self.__class__.__name__, self.expression)\n", "normalized_occurrence": 1}
