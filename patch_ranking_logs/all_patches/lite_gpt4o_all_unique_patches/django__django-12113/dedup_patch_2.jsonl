{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..286e654 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -196,7 +196,8 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                 'for controlling thread shareability.',\n                 RuntimeWarning\n             )\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n+        # Allow the user to control thread shareability.\n+        kwargs.update({'check_same_thread': True, 'uri': True})\n         return kwargs\n \n     @async_unsafe\n@@ -260,6 +261,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     @async_unsafe\n     def close(self):\n         self.validate_thread_sharing()\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         # If database is in memory, closing the connection destroys the\n         # database. To prevent accidental data loss, ignore close requests on\n         # an in-memory db.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..7008900 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -67,7 +67,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         kwargs = {'database': str(settings_dict['NAME']), 'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES, **settings_dict['OPTIONS']}\n         if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n             warnings.warn('The `check_same_thread` option was provided and set to True. It will be overridden with False. Use the `DatabaseWrapper.allow_thread_sharing` property instead for controlling thread shareability.', RuntimeWarning)\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n+        kwargs.update({'check_same_thread': True, 'uri': True})\n         return kwargs\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n@@ -127,6 +127,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     @async_unsafe\n     def close(self):\n         self.validate_thread_sharing()\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         if not self.is_in_memory_db():\n             BaseDatabaseWrapper.close(self)\n     def _savepoint_allowed(self):\n", "normalized_occurrence": 1}
