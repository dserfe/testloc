{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..815e2f9 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -742,63 +742,9 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n \n         return mrow\n \n-    def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n \n-        def join(items):\n-            if len(items) > 1:\n-                mrow = self.dom.createElement('mrow')\n-                for i, item in enumerate(items):\n-                    if i > 0:\n-                        mo = self.dom.createElement('mo')\n-                        mo.appendChild(self.dom.createTextNode(\" \"))\n-                        mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mi')\n-                    mi.appendChild(self.dom.createTextNode(item))\n-                    mrow.appendChild(mi)\n-                return mrow\n-            else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n \n-        # translate name, supers and subs to unicode characters\n-        def translate(s):\n-            if s in greek_unicode:\n-                return greek_unicode.get(s)\n-            else:\n-                return s\n \n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n-\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n-        else:\n-            if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n-            else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n         return x\n \n     def _print_MatrixSymbol(self, sym):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..db630b9 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -515,56 +515,6 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n             fence.appendChild(self._print(e.function))\n             mrow.appendChild(fence)\n         return mrow\n-    def _print_Symbol(self, sym, style='plain'):\n-        x = self.dom.createElement('mi')\n-        if style == 'bold':\n-            x.setAttribute('mathvariant', 'bold')\n-        def join(items):\n-            if len(items) > 1:\n-                mrow = self.dom.createElement('mrow')\n-                for i, item in enumerate(items):\n-                    if i > 0:\n-                        mo = self.dom.createElement('mo')\n-                        mo.appendChild(self.dom.createTextNode(' '))\n-                        mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mi')\n-                    mi.appendChild(self.dom.createTextNode(item))\n-                    mrow.appendChild(mi)\n-                return mrow\n-            else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n-        def translate(s):\n-            if s in greek_unicode:\n-                return greek_unicode.get(s)\n-            else:\n-                return s\n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n-        elif len(subs) == 0:\n-            msup = self.dom.createElement('msup')\n-            msup.appendChild(mname)\n-            msup.appendChild(join(supers))\n-            x.appendChild(msup)\n-        else:\n-            msubsup = self.dom.createElement('msubsup')\n-            msubsup.appendChild(mname)\n-            msubsup.appendChild(join(subs))\n-            msubsup.appendChild(join(supers))\n-            x.appendChild(msubsup)\n         return x\n     def _print_MatrixSymbol(self, sym):\n         return self._print_Symbol(sym, style=self._settings['mat_symbol_style'])\n", "normalized_occurrence": 1}
