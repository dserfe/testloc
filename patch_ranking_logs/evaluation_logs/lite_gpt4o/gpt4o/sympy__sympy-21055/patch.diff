diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py
index a2076bf..385d38b 100644
--- a/sympy/assumptions/refine.py
+++ b/sympy/assumptions/refine.py
@@ -1,3 +1,4 @@
+
 from typing import Dict, Callable
 
 from sympy.core import S, Add, Expr, Basic, Mul
@@ -55,7 +56,7 @@ def refine(expr, assumptions=True):
         if ref_expr is not None:
             return ref_expr
     name = expr.__class__.__name__
-    handler = handlers_dict.get(name, None)
+    handler = handlers_dict.get(name, None) or globals().get(f'refine_{name.lower()}', None)
     if handler is None:
         return expr
     new_expr = handler(expr, assumptions)
@@ -206,6 +207,38 @@ def refine_Pow(expr, assumptions):
                     return expr
 
 
+def refine_arg(expr, assumptions):
+    """
+    Handler for the argument function.
+
+    Examples
+    ========
+
+    >>> from sympy import Q, arg, exp
+    >>> from sympy.assumptions.refine import refine_arg
+    >>> from sympy.abc import x
+    >>> refine_arg(arg(x), Q.positive(x))
+    0
+    >>> refine_arg(arg(x), Q.negative(x))
+    pi
+    >>> refine_arg(arg(exp(x)), Q.real(x))
+    0
+
+    """
+    from sympy import arg, pi, I
+    if isinstance(expr, arg):
+        arg_expr = expr.args[0]
+        if ask(Q.positive(arg_expr), assumptions):
+            return S.Zero
+        elif ask(Q.negative(arg_expr), assumptions):
+            return pi
+        elif ask(Q.real(arg_expr), assumptions):
+            return Piecewise(
+                (0, arg_expr > 0),
+                (pi, arg_expr < 0),
+                (arg_expr, True))
+    return expr
+
 def refine_atan2(expr, assumptions):
     """
     Handler for the atan2 function.
