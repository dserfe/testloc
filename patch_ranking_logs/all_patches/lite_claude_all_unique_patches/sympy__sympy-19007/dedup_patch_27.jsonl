{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..a5b6b84 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,47 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy import Piecewise\n+        # For symbolic indices, return a Piecewise expression\n+        if not isinstance(i, (int, Integer)):\n+            # Initialize accumulated size\n+            current_size = 0\n+            args = []\n+            # Create conditions for each block\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                row_cond = And(current_size <= i, i < current_size + numrows)\n+                local_i = i - current_size\n+                # Handle column index\n+                col_current_size = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    if not isinstance(j, (int, Integer)):\n+                        col_cond = And(col_current_size <= j, j < col_current_size + numcols)\n+                        local_j = j - col_current_size\n+                        args.append((self.blocks[row_block, col_block][local_i, local_j], \n+                                   And(row_cond, col_cond)))\n+                    else:\n+                        if col_current_size <= j < col_current_size + numcols:\n+                            local_j = j - col_current_size\n+                            args.append((self.blocks[row_block, col_block][local_i, local_j], \n+                                       row_cond))\n+                            break\n+                    col_current_size += numcols\n+                current_size += numrows\n+            return Piecewise(*args)\n+            \n+        # For numeric indices, use the original logic\n+        row_offset = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            if row_offset <= i < row_offset + numrows:\n+                i_local = i - row_offset\n+                col_offset = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    if col_offset <= j < col_offset + numcols:\n+                        j_local = j - col_offset\n+                        return self.blocks[row_block, col_block][i_local, j_local]\n+                    col_offset += numcols\n+            row_offset += numrows\n+        raise IndexError(\"Index out of range\")\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..88c5f03 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,38 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n+        if not isinstance(i, (int, Integer)):\n+            current_size = 0\n+            args = []\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                row_cond = And(current_size <= i, i < current_size + numrows)\n+                local_i = i - current_size\n+                col_current_size = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    if not isinstance(j, (int, Integer)):\n+                        col_cond = And(col_current_size <= j, j < col_current_size + numcols)\n+                        local_j = j - col_current_size\n+                        args.append((self.blocks[row_block, col_block][local_i, local_j], And(row_cond, col_cond)))\n+                    elif col_current_size <= j < col_current_size + numcols:\n+                        local_j = j - col_current_size\n+                        args.append((self.blocks[row_block, col_block][local_i, local_j], row_cond))\n+                        break\n+                    col_current_size += numcols\n+                current_size += numrows\n+            return Piecewise(*args)\n+        row_offset = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            if row_offset <= i < row_offset + numrows:\n+                i_local = i - row_offset\n+                col_offset = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    if col_offset <= j < col_offset + numcols:\n+                        j_local = j - col_offset\n+                        return self.blocks[row_block, col_block][i_local, j_local]\n+                    col_offset += numcols\n+            row_offset += numrows\n+        raise IndexError('Index out of range')\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
