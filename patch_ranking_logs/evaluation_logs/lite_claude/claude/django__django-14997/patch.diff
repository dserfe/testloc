diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 8cfc221..4c4a15a 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -1219,9 +1219,8 @@ class BaseDatabaseSchemaEditor:
             not self.connection.features.supports_deferrable_unique_constraints
         ):
             return None
-        if condition or include or opclasses or expressions:
-            # Databases support conditional, covering, and functional unique
-            # constraints via a unique index.
+        if condition or include or opclasses:
+            # Databases support conditional and covering unique constraints via a unique index.
             sql = self._create_unique_sql(
                 model,
                 fields,
@@ -1234,6 +1233,33 @@ class BaseDatabaseSchemaEditor:
             if sql:
                 self.deferred_sql.append(sql)
             return None
+        # Handle expressions by converting them to column references
+        columns = []
+        if fields:
+            columns.extend(field.column for field in fields)
+        if expressions:
+            for expr in expressions:
+                if hasattr(expr, 'refs'):  # F() expressions
+                    columns.append(expr.refs)
+                else:
+                    # For other expressions, fall back to index
+                    sql = self._create_unique_sql(
+                        model,
+                        fields,
+                        name=name,
+                        expressions=expressions,
+                    )
+                    if sql:
+                        self.deferred_sql.append(sql)
+                    return None
+        constraint = self.sql_unique_constraint % {
+            'columns': ', '.join([self.quote_name(col) for col in columns]),
+            'deferrable': self._deferrable_constraint_sql(deferrable),
+        }
+        return self.sql_constraint % {
+            'name': self.quote_name(name),
+            'constraint': constraint,
+        }
         constraint = self.sql_unique_constraint % {
             'columns': ', '.join([self.quote_name(field.column) for field in fields]),
             'deferrable': self._deferrable_constraint_sql(deferrable),
