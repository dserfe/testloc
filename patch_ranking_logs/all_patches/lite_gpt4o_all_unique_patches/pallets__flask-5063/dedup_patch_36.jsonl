{"model_name_or_path": "agentless", "instance_id": "pallets__flask-5063", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 7de3e81..e0ea58c 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,8 +1018,9 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(rule.host or 'default') for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex fe39489..118cc55 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -588,8 +588,8 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == 'methods':\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n     rule_methods = [', '.join(sorted(rule.methods - ignored_methods)) for rule in rules]\n-    headers = ('Endpoint', 'Methods', 'Rule')\n-    widths = (max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n+    headers = ('Domain', 'Endpoint', 'Methods', 'Rule')\n+    widths = (max((len(rule.host or 'default') for rule in rules)), max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n     row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)\n     click.echo(row.format(*headers).strip())\n", "normalized_occurrence": 1}
