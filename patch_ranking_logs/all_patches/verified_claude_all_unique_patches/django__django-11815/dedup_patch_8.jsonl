{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..8cd3649 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -115,6 +115,22 @@ class OperationWriter:\n         return '\\n'.join(self.buff)\n \n \n+class EnumSerializer(BaseSerializer):\n+    \"\"\"\n+    Serializer for Enum objects to ensure name-based serialization.\n+    \"\"\"\n+    def serialize(self):\n+        if isinstance(self.value, enum.Enum):\n+            imports = {\"import enum\"}\n+            enum_class = self.value.__class__\n+            enum_module = enum_class.__module__\n+            enum_name = enum_class.__name__\n+            if enum_module != \"builtins\":\n+                imports.add(f\"from {enum_module} import {enum_name}\")\n+            # Use name-based access instead of value-based\n+            return f\"{enum_name}['{self.value.name}']\", imports\n+        raise ValueError(\"Value must be an Enum instance\")\n+\n class MigrationWriter:\n     \"\"\"\n     Take a Migration instance and is able to produce the contents\n@@ -278,6 +294,12 @@ class MigrationWriter:\n     def unregister_serializer(cls, type_):\n         Serializer.unregister(type_)\n \n+    @classmethod\n+    def register_enum_serializer(cls):\n+        \"\"\"Register the EnumSerializer for all Enum types.\"\"\"\n+        import enum\n+        cls.register_serializer(enum.Enum, EnumSerializer)\n+\n \n MIGRATION_HEADER_TEMPLATE = \"\"\"\\\n # Generated by Django %(version)s on %(timestamp)s\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n+class EnumSerializer(BaseSerializer):\n+    def serialize(self):\n+        if isinstance(self.value, enum.Enum):\n+            imports = {'import enum'}\n+            enum_class = self.value.__class__\n+            enum_module = enum_class.__module__\n+            enum_name = enum_class.__name__\n+            if enum_module != 'builtins':\n+                imports.add(f'from {enum_module} import {enum_name}')\n+            return (f\"{enum_name}['{self.value.name}']\", imports)\n+        raise ValueError('Value must be an Enum instance')\n+    @classmethod\n+    def register_enum_serializer(cls):\n+        import enum\n+        cls.register_serializer(enum.Enum, EnumSerializer)", "normalized_occurrence": 1}
