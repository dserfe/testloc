{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..fd0b591 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -205,6 +205,7 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             # the name has been defined as 'global' in the frame and belongs\n             # there.\n             frame = node.root()\n+        \n         try:\n             if not hasattr(frame, \"locals_type\"):\n                 # If the frame doesn't have a locals_type yet,\n@@ -218,7 +219,13 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                     self.visit_module(frame)\n \n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+            \n+            if node.parent and hasattr(node.parent, \"annotation\") and node.parent.annotation:\n+                annotation = node.parent.annotation\n+                values = {annotation}\n+            else:\n+                values = set(node.infer())\n+                \n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..8d98a6a 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -110,7 +110,11 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n                 else:\n                     self.visit_module(frame)\n             current = frame.locals_type[node.name]\n-            values = set(node.infer())\n+            if node.parent and hasattr(node.parent, 'annotation') and node.parent.annotation:\n+                annotation = node.parent.annotation\n+                values = {annotation}\n+            else:\n+                values = set(node.infer())\n             frame.locals_type[node.name] = list(set(current) | values)\n         except astroid.InferenceError:\n             pass\n", "normalized_occurrence": 1}
