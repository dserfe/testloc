{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..a8adaa9 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -966,10 +966,39 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+        model = to_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n \n+        if self.old_fields:\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            matching_index_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )\n+            if len(matching_index_name) != 1:\n+                raise ValueError(\n+                    \"Found wrong number (%s) of indexes for %s(%s).\"\n+                    % (\n+                        len(matching_index_name),\n+                        to_model._meta.db_table,\n+                        \", \".join(columns),\n+                    )\n+                )\n+            new_index = models.Index(\n+                fields=self.old_fields,\n+                name=matching_index_name[0],\n+            )\n+        else:\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.old_name)\n+\n+        from_model_state = from_state.models[app_label, self.model_name_lower]\n+        old_index = from_model_state.get_index_by_name(self.new_name)\n+        schema_editor.rename_index(model, old_index, new_index)\n+\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..80c638e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -435,8 +435,22 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n-        if self.old_fields:\n+        model = to_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n             return\n+        if self.old_fields:\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [to_model._meta.get_field(field).column for field in self.old_fields]\n+            matching_index_name = schema_editor._constraint_names(to_model, column_names=columns, index=True)\n+            if len(matching_index_name) != 1:\n+                raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), to_model._meta.db_table, ', '.join(columns)))\n+            new_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+        else:\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.old_name)\n+        from_model_state = from_state.models[app_label, self.model_name_lower]\n+        old_index = from_model_state.get_index_by_name(self.new_name)\n+        schema_editor.rename_index(model, old_index, new_index)\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "normalized_occurrence": 1}
