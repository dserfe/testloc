{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..80a5fd2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -963,7 +963,11 @@ class RenameIndex(IndexOperation):\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n-        schema_editor.rename_index(model, old_index, new_index)\n+        if old_index.name == new_index.name:\n+            # If the index has the same name, avoid renaming it to prevent crashing.\n+            pass\n+        else:\n+            schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..e35bf82 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -433,7 +433,10 @@ class RenameIndex(IndexOperation):\n             old_index = from_model_state.get_index_by_name(self.old_name)\n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n-        schema_editor.rename_index(model, old_index, new_index)\n+        if old_index.name == new_index.name:\n+            pass\n+        else:\n+            schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             return\n", "normalized_occurrence": 1}
