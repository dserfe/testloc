{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 79762f1..39d24c0 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -391,11 +391,17 @@ class ScalarMappable:\n             initializes its scaling based on the first data processed.\n         cmap : str or `~matplotlib.colors.Colormap`\n             The colormap used to map normalized data values to RGBA colors.\n+\n+        Notes\n+        -----\n+        If *cmap* is a string, it should refer to a registered colormap name.\n         \"\"\"\n         self._A = None\n         self._norm = None  # So that the setter knows we're initializing.\n         self.set_norm(norm)  # The Normalize instance of this ScalarMappable.\n         self.cmap = None  # So that the setter knows we're initializing.\n+        if isinstance(cmap, str):\n+            cmap = get_cmap(cmap)  # Use the registered colormap name\n         self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n         #: The last colorbar associated with this ScalarMappable. May be None.\n         self.colorbar = None\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex aa7fbd0..98048ef 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -97,6 +97,8 @@ class ScalarMappable:\n         self._norm = None\n         self.set_norm(norm)\n         self.cmap = None\n+        if isinstance(cmap, str):\n+            cmap = get_cmap(cmap)\n         self.set_cmap(cmap)\n         self.colorbar = None\n         self.callbacks = cbook.CallbackRegistry(signals=['changed'])\n", "normalized_occurrence": 1}
