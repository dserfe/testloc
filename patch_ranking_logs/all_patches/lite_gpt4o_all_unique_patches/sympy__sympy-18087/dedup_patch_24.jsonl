{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..94ae3da 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -336,13 +336,11 @@ class sin(TrigonometricFunction):\n                     return cls(pi_coeff*S.Pi)\n                 return None\n \n-        if arg.is_Add:\n-            x, m = _peeloff_pi(arg)\n-            if m:\n-                return sin(m)*cos(x) + cos(m)*sin(x)\n-\n-        if arg.is_zero:\n-            return S.Zero\n+        # Handle sqrt(sin(x)**2) for complex x\n+        if isinstance(arg, Pow) and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, Pow) and base.exp == 2 and isinstance(base.base, sin):\n+                return Abs(base.base.args[0])\n \n         if isinstance(arg, asin):\n             return arg.args[0]\n@@ -653,13 +651,11 @@ class cos(TrigonometricFunction):\n                     return sign_cos*sqrt( (1 + nval)/2 )\n             return None\n \n-        if arg.is_Add:\n-            x, m = _peeloff_pi(arg)\n-            if m:\n-                return cos(m)*cos(x) - sin(m)*sin(x)\n-\n-        if arg.is_zero:\n-            return S.One\n+        # Handle sqrt(sin(x)**2) for complex x\n+        if isinstance(arg, Pow) and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, Pow) and base.exp == 2 and isinstance(base.base, cos):\n+                return Abs(base.base.args[0])\n \n         if isinstance(arg, acos):\n             return arg.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..728a5ea 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -187,12 +187,10 @@ class sin(TrigonometricFunction):\n                 if pi_coeff * S.Pi != arg:\n                     return cls(pi_coeff * S.Pi)\n                 return None\n-        if arg.is_Add:\n-            x, m = _peeloff_pi(arg)\n-            if m:\n-                return sin(m) * cos(x) + cos(m) * sin(x)\n-        if arg.is_zero:\n-            return S.Zero\n+        if isinstance(arg, Pow) and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, Pow) and base.exp == 2 and isinstance(base.base, sin):\n+                return Abs(base.base.args[0])\n         if isinstance(arg, asin):\n             return arg.args[0]\n         if isinstance(arg, atan):\n@@ -379,12 +377,10 @@ class cos(TrigonometricFunction):\n                     sign_cos = (-1) ** ((-1 if x < 0 else 1) * int(abs(x)))\n                     return sign_cos * sqrt((1 + nval) / 2)\n             return None\n-        if arg.is_Add:\n-            x, m = _peeloff_pi(arg)\n-            if m:\n-                return cos(m) * cos(x) - sin(m) * sin(x)\n-        if arg.is_zero:\n-            return S.One\n+        if isinstance(arg, Pow) and arg.exp is S.Half:\n+            base = arg.base\n+            if isinstance(base, Pow) and base.exp == 2 and isinstance(base.base, cos):\n+                return Abs(base.base.args[0])\n         if isinstance(arg, acos):\n             return arg.args[0]\n         if isinstance(arg, atan):\n", "normalized_occurrence": 1}
