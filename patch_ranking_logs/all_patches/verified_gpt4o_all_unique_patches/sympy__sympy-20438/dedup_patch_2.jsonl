{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..3f167d8 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -777,6 +777,15 @@ class ProductSet(Set):\n \n \n \n+    def _eval_is_subset(self, other):\n+        if not isinstance(other, ProductSet):\n+            return None\n+\n+        if len(self.sets) != len(other.sets):\n+            return False\n+\n+        return fuzzy_and(s.is_subset(o) for s, o in zip(self.sets, other.sets))\n+\n     def _contains(self, element):\n         \"\"\"\n         'in' operator for ProductSets.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n+    def _eval_is_subset(self, other):\n+        if not isinstance(other, ProductSet):\n+            return None\n+        if len(self.sets) != len(other.sets):\n+            return False\n+        return fuzzy_and((s.is_subset(o) for s, o in zip(self.sets, other.sets)))", "normalized_occurrence": 1}
