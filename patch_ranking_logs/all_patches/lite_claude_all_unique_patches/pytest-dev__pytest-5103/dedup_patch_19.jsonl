{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..94cfe8d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,27 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                # Convert the iterator/generator into a list of results\n+                iter_var = self.variable()\n+                iter_list = ast.Assign(\n+                    [ast.Name(iter_var, ast.Store())],\n+                    ast_Call(self.builtin('list'), [call.args[0]], [])\n+                )\n+                self.statements.append(iter_list)\n+                \n+                # Call all()/any() with the list instead\n+                new_call = ast.Call(\n+                    new_func,\n+                    [ast.Name(iter_var, ast.Load())],\n+                    []\n+                )\n+                return self.assign(new_call), func_expl + '(' + iter_var + ')'\n+                \n+        # Regular function call handling\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1002,6 +1023,29 @@ warn_explicit(\n         visit `ast.Call nodes on 3.4 and below`\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                # Convert the iterator/generator into a list of results\n+                iter_var = self.variable()\n+                iter_list = ast.Assign(\n+                    [ast.Name(iter_var, ast.Store())],\n+                    ast_Call(self.builtin('list'), [call.args[0]], [])\n+                )\n+                self.statements.append(iter_list)\n+                \n+                # Call all()/any() with the list instead\n+                new_call = ast.Call(\n+                    new_func,\n+                    [ast.Name(iter_var, ast.Load())],\n+                    [],\n+                    None,\n+                    None\n+                )\n+                return self.assign(new_call), func_expl + '(' + iter_var + ')'\n+        \n+        # Regular function call handling\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1081,4 +1125,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..ef0e3a9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -545,6 +545,13 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (res, explanation)\n     def visit_Call_35(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                iter_var = self.variable()\n+                iter_list = ast.Assign([ast.Name(iter_var, ast.Store())], ast_Call(self.builtin('list'), [call.args[0]], []))\n+                self.statements.append(iter_list)\n+                new_call = ast.Call(new_func, [ast.Name(iter_var, ast.Load())], [])\n+                return (self.assign(new_call), func_expl + '(' + iter_var + ')')\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -571,6 +578,13 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (new_starred, '*' + expl)\n     def visit_Call_legacy(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                iter_var = self.variable()\n+                iter_list = ast.Assign([ast.Name(iter_var, ast.Store())], ast_Call(self.builtin('list'), [call.args[0]], []))\n+                self.statements.append(iter_list)\n+                new_call = ast.Call(new_func, [ast.Name(iter_var, ast.Load())], [], None, None)\n+                return (self.assign(new_call), func_expl + '(' + iter_var + ')')\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "normalized_occurrence": 1}
