{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..06c82a8 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -770,7 +770,8 @@ class ConciseDateFormatter(ticker.Formatter):\n     def __call__(self, x, pos=None):\n         formatter = DateFormatter(self.defaultfmt, self._tz,\n                                   usetex=self._usetex)\n-        return formatter(x, pos=pos)\n+        result = formatter(x, pos=pos)\n+        return _wrap_in_tex(result) if self._usetex else result\n \n     def format_ticks(self, values):\n         tickdatetime = [num2date(value, tz=self._tz) for value in values]\n", "occurrence": 3, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 71de92e..4b30b46 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -187,7 +187,8 @@ class ConciseDateFormatter(ticker.Formatter):\n         self._usetex = usetex if usetex is not None else mpl.rcParams['text.usetex']\n     def __call__(self, x, pos=None):\n         formatter = DateFormatter(self.defaultfmt, self._tz, usetex=self._usetex)\n-        return formatter(x, pos=pos)\n+        result = formatter(x, pos=pos)\n+        return _wrap_in_tex(result) if self._usetex else result\n     def format_ticks(self, values):\n         tickdatetime = [num2date(value, tz=self._tz) for value in values]\n         tickdate = np.array([tdt.timetuple()[:6] for tdt in tickdatetime])\n", "normalized_occurrence": 3}
