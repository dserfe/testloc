{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..1f0a2b2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -967,22 +967,24 @@ class RenameIndex(IndexOperation):\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n-            return\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            matching_indexes = [\n+                index for index in from_model_state.options['indexes']\n+                if set(index.fields) == set(self.old_fields)\n+            ]\n+            if matching_indexes:\n+                self.old_name = matching_indexes[0].name\n+            else:\n+                # If no matching index is found, it means it was unnamed.\n+                return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n         self.new_name, self.old_name = self.old_name, self.new_name\n+        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n         self.new_name, self.old_name = self.old_name, self.new_name\n+        self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n \n     def describe(self):\n         if self.old_name:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..2aedf9d 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -436,12 +436,17 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n-            return\n-        self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            matching_indexes = [index for index in from_model_state.options['indexes'] if set(index.fields) == set(self.old_fields)]\n+            if matching_indexes:\n+                self.old_name = matching_indexes[0].name\n+            else:\n+                return\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n-        self.database_forwards(app_label, schema_editor, from_state, to_state)\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n+        self.database_forwards(app_label, schema_editor, from_state, to_state)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n+        self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n     def describe(self):\n         if self.old_name:\n             return f'Rename index {self.old_name} on {self.model_name} to {self.new_name}'\n", "normalized_occurrence": 1}
