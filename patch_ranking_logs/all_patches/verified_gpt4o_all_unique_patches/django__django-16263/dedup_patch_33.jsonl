{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..d09f3b6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,13 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # Remove annotations that are not used in filters, other annotations, or ordering\n+        filtered_annotations = {\n+            alias: annotation for alias, annotation in obj.annotations.items()\n+            if obj.annotation_select_mask is None or alias in obj.annotation_select_mask\n+        }\n+        obj.annotations = filtered_annotations\n+\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..59df2db 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,8 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        filtered_annotations = {alias: annotation for alias, annotation in obj.annotations.items() if obj.annotation_select_mask is None or alias in obj.annotation_select_mask}\n+        obj.annotations = filtered_annotations\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
