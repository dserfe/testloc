{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..b46f7ea 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,8 +6737,8 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n-        if density and not stacked:\n-            hist_kwargs['density'] = density\n+        # Remove density from histogram kwargs - we'll handle it manually\n+        hist_kwargs.pop('density', None)\n \n         # List to store all the top coordinates of the histograms\n         tops = []  # Will have shape (n_datasets, n_bins).\n@@ -6750,12 +6750,18 @@ such objects\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n+        \n         if stacked:\n             tops = tops.cumsum(axis=0)\n-            # If a stacked density plot, normalize so the area of all the\n-            # stacked histograms together is 1\n-            if density:\n+            \n+        # Apply density normalization after stacking if needed\n+        if density:\n+            if stacked:\n                 tops = (tops / np.diff(bins)) / tops[-1].sum()\n+            else:\n+                # Normalize each histogram independently\n+                for i in range(len(tops)):\n+                    tops[i] = (tops[i] / np.diff(bins)) / tops[i].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..c242de7 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1943,8 +1943,7 @@ class Axes(_AxesBase):\n         else:\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n-        if density and (not stacked):\n-            hist_kwargs['density'] = density\n+        hist_kwargs.pop('density', None)\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n@@ -1953,8 +1952,12 @@ class Axes(_AxesBase):\n         bins = np.array(bins, float)\n         if stacked:\n             tops = tops.cumsum(axis=0)\n-            if density:\n+        if density:\n+            if stacked:\n                 tops = tops / np.diff(bins) / tops[-1].sum()\n+            else:\n+                for i in range(len(tops)):\n+                    tops[i] = tops[i] / np.diff(bins) / tops[i].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "normalized_occurrence": 1}
