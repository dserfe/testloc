{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 8faef3a..81a3b2a 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -162,6 +162,9 @@ class DenseMatrix(MatrixBase):\n \n     def _eval_matrix_mul(self, other):\n         from sympy import Add\n+        # For matrix multiplication with @ operator, ensure both operands are matrices\n+        if hasattr(self, '_matmul') and not getattr(other, 'is_Matrix', False):\n+            raise ValueError(\"Scalar operands are not allowed for matrix multiplication, use '*' instead\")\n         # cache attributes for faster access\n         self_rows, self_cols = self.rows, self.cols\n         other_rows, other_cols = other.rows, other.cols\n@@ -269,6 +272,9 @@ class DenseMatrix(MatrixBase):\n         return self._new(rv)\n \n     def _eval_scalar_mul(self, other):\n+        # For matrix multiplication with @ operator, ensure both operands are matrices\n+        if hasattr(self, '_matmul'):\n+            raise ValueError(\"Scalar operands are not allowed for matrix multiplication, use '*' instead\")\n         mat = [other*a for a in self._mat]\n         return self._new(self.rows, self.cols, mat, copy=False)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex ed7ad28..0785692 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -86,6 +86,8 @@ class DenseMatrix(MatrixBase):\n         return self._new(len(rowsList), len(colsList), list((mat[i] for i in indices)), copy=False)\n     def _eval_matrix_mul(self, other):\n         from sympy import Add\n+        if hasattr(self, '_matmul') and (not getattr(other, 'is_Matrix', False)):\n+            raise ValueError(\"Scalar operands are not allowed for matrix multiplication, use '*' instead\")\n         self_rows, self_cols = (self.rows, self.cols)\n         other_rows, other_cols = (other.rows, other.cols)\n         other_len = other_rows * other_cols\n@@ -135,6 +137,8 @@ class DenseMatrix(MatrixBase):\n             raise ValueError('Inversion method unrecognized')\n         return self._new(rv)\n     def _eval_scalar_mul(self, other):\n+        if hasattr(self, '_matmul'):\n+            raise ValueError(\"Scalar operands are not allowed for matrix multiplication, use '*' instead\")\n         mat = [other * a for a in self._mat]\n         return self._new(self.rows, self.cols, mat, copy=False)\n     def _eval_scalar_rmul(self, other):\n", "normalized_occurrence": 1}
