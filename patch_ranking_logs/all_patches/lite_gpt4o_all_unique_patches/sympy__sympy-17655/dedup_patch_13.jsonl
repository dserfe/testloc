{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..4bf2bf1 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,16 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        from sympy.core.mul import Mul\n+        if isinstance(other, Mul):\n+            coeff, pt = None, None\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    pt = arg\n+                else:\n+                    coeff = arg\n+            if coeff is not None and pt is not None:\n+                other = Point([simplify(coeff * x) for x in pt.args], evaluate=False)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..762cf0e 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,6 +62,16 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n+        from sympy.core.mul import Mul\n+        if isinstance(other, Mul):\n+            coeff, pt = (None, None)\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    pt = arg\n+                else:\n+                    coeff = arg\n+            if coeff is not None and pt is not None:\n+                other = Point([simplify(coeff * x) for x in pt.args], evaluate=False)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "normalized_occurrence": 1}
