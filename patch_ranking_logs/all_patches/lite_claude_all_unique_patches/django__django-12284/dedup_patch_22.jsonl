{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12284", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..d105924 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,6 +945,14 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n+        # Get choices from the most derived class's field if it exists\n+        if hasattr(self, field.name):\n+            choices = getattr(self.__class__, field.name).field.choices\n+            if choices is not None:\n+                choices_dict = dict(make_hashable(choices))\n+                if make_hashable(value) in choices_dict:\n+                    return force_str(choices_dict[make_hashable(value)], strings_only=True)\n+        # Fall back to the field's flatchoices\n         choices_dict = dict(make_hashable(field.flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..ff12030 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -502,6 +502,12 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n+        if hasattr(self, field.name):\n+            choices = getattr(self.__class__, field.name).field.choices\n+            if choices is not None:\n+                choices_dict = dict(make_hashable(choices))\n+                if make_hashable(value) in choices_dict:\n+                    return force_str(choices_dict[make_hashable(value)], strings_only=True)\n         choices_dict = dict(make_hashable(field.flatchoices))\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n", "normalized_occurrence": 1}
