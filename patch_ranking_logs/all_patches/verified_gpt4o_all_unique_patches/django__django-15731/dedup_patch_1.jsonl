{"model_name_or_path": "agentless", "instance_id": "django__django-15731", "model_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 768c26e..07be58b 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -81,11 +81,9 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n \n         new_methods = {}\n", "occurrence": 26, "normalized_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 3cbea33..2733629 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -38,10 +38,9 @@ class BaseManager:\n     @classmethod\n     def _get_queryset_methods(cls, queryset_class):\n         def create_method(name, method):\n+            @functools.wraps(method)\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n             return manager_method\n         new_methods = {}\n         for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):\n", "normalized_occurrence": 26}
