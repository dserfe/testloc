{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..721eb2f 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,23 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        if self.header_rows:\n+            header_lines = []\n+            for row in self.header_rows:\n+                headers = [getattr(col, row, '') for col in self.cols]\n+                header_lines.append('  '.join(headers))\n+            new_lines = [header_lines] + lines[1:]\n+        else:\n+            new_lines = [lines[1]] + lines + [lines[1]]\n+        return new_lines\n \n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..c2fcac5 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,8 +18,20 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+    def write(self, lines):\n+        lines = super().write(lines)\n+        if self.header_rows:\n+            header_lines = []\n+            for row in self.header_rows:\n+                headers = [getattr(col, row, '') for col in self.cols]\n+                header_lines.append('  '.join(headers))\n+            new_lines = [header_lines] + lines[1:]\n+        else:\n+            new_lines = [lines[1]] + lines + [lines[1]]\n+        return new_lines\n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n", "normalized_occurrence": 1}
