{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21171", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex c36a092..4fb423b 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -636,7 +636,7 @@ class LatexPrinter(Printer):\n             # issue #12886: add parentheses for superscripts raised to powers\n             if expr.base.is_Symbol:\n                 base = self.parenthesize_super(base)\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and not isinstance(expr.base, SingularityFunction):\n                 return self._print(expr.base, exp=\"%s/%s\" % (p, q))\n             return r\"%s^{%s/%s}\" % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and \\\n@@ -647,7 +647,7 @@ class LatexPrinter(Printer):\n             # things like 1/x\n             return self._print_Mul(expr)\n         else:\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and not isinstance(expr.base, SingularityFunction):\n                 return self._print(expr.base, exp=self._print(expr.exp))\n             else:\n                 tex = r\"%s^{%s}\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex e1fcf81..1471389 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -336,14 +336,14 @@ class LatexPrinter(Printer):\n             p, q = (expr.exp.p, expr.exp.q)\n             if expr.base.is_Symbol:\n                 base = self.parenthesize_super(base)\n-            if expr.base.is_Function:\n+            if expr.base.is_Function and (not isinstance(expr.base, SingularityFunction)):\n                 return self._print(expr.base, exp='%s/%s' % (p, q))\n             return '%s^{%s/%s}' % (base, p, q)\n         elif expr.exp.is_Rational and expr.exp.is_negative and expr.base.is_commutative:\n             if expr.base == 1:\n                 return '%s^{%s}' % (expr.base, expr.exp)\n             return self._print_Mul(expr)\n-        elif expr.base.is_Function:\n+        elif expr.base.is_Function and (not isinstance(expr.base, SingularityFunction)):\n             return self._print(expr.base, exp=self._print(expr.exp))\n         else:\n             tex = '%s^{%s}'\n", "normalized_occurrence": 1}
