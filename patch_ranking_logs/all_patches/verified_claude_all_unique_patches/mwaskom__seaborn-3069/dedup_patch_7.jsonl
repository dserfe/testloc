{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..206c3ed 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -160,6 +160,25 @@ class Nominal(Scale):\n         stringify = np.vectorize(format)\n \n         units_seed = categorical_order(data, new.order)\n+        \n+        # Handle categorical-style padding and grid\n+        if axis is not None:\n+            # Disable grid for nominal scales\n+            axis.grid(False)\n+            \n+            # If this is a y-axis, invert it\n+            if getattr(axis, 'axis_name', None) == 'y':\n+                axis.invert_axis()\n+            \n+            # Add invisible artist with sticky edges to control padding\n+            line = axis.plot([], [])[0]\n+            line.set_visible(False)\n+            line.sticky_edges.x = [0, len(units_seed) - 1]\n+            line.sticky_edges.y = [0, len(units_seed) - 1]\n+            \n+            # Set margins to 0.5 for categorical-style padding\n+            axis.margins(x=0.5 if axis.axis_name == 'x' else None,\n+                        y=0.5 if axis.axis_name == 'y' else None)\n \n         # TODO move to Nominal._get_scale?\n         # TODO this needs some more complicated rethinking about how to pass\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..abe102b 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -87,6 +87,15 @@ class Nominal(Scale):\n             new = new.label()\n         stringify = np.vectorize(format)\n         units_seed = categorical_order(data, new.order)\n+        if axis is not None:\n+            axis.grid(False)\n+            if getattr(axis, 'axis_name', None) == 'y':\n+                axis.invert_axis()\n+            line = axis.plot([], [])[0]\n+            line.set_visible(False)\n+            line.sticky_edges.x = [0, len(units_seed) - 1]\n+            line.sticky_edges.y = [0, len(units_seed) - 1]\n+            axis.margins(x=0.5 if axis.axis_name == 'x' else None, y=0.5 if axis.axis_name == 'y' else None)\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n", "normalized_occurrence": 1}
