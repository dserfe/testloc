{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..b81f652 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -206,14 +206,18 @@ def _coord_matrix(model, pos, noutp):\n             mat[:model.n_outputs, : model.n_inputs] = 1\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n+    elif isinstance(model, CompoundModel):\n+        left = _coord_matrix(model.left, 'left', noutp)\n+        right = _coord_matrix(model.right, 'right', noutp)\n+        mat = _operators[model.op](left, right)\n+        return mat\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n+        for i in range(min(noutp, model.n_inputs)):\n             mat[i, i] = 1\n         if pos == 'right':\n             mat = np.roll(mat, (noutp - model.n_outputs))\n-    return mat\n+        return mat\n \n \n def _cstack(left, right):\n@@ -301,9 +305,7 @@ def _separable(transform):\n         An array of shape (transform.n_outputs,) of boolean type\n         Each element represents the separablity of the corresponding output.\n     \"\"\"\n-    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n-        return transform_matrix\n-    elif isinstance(transform, CompoundModel):\n+    if isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n         return _operators[transform.op](sepleft, sepright)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..3100ca7 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -60,13 +60,18 @@ def _coord_matrix(model, pos, noutp):\n             mat[:model.n_outputs, :model.n_inputs] = 1\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n+    elif isinstance(model, CompoundModel):\n+        left = _coord_matrix(model.left, 'left', noutp)\n+        right = _coord_matrix(model.right, 'right', noutp)\n+        mat = _operators[model.op](left, right)\n+        return mat\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n+        for i in range(min(noutp, model.n_inputs)):\n             mat[i, i] = 1\n         if pos == 'right':\n             mat = np.roll(mat, noutp - model.n_outputs)\n-    return mat\n+        return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n     if isinstance(left, Model):\n@@ -96,9 +101,7 @@ def _cdot(left, right):\n         raise ModelDefinitionError('Models cannot be combined with the \"|\" operator; left coord_matrix is {}, right coord_matrix is {}'.format(cright, cleft))\n     return result\n def _separable(transform):\n-    if (transform_matrix := transform._calculate_separability_matrix()) is not NotImplemented:\n-        return transform_matrix\n-    elif isinstance(transform, CompoundModel):\n+    if isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n         return _operators[transform.op](sepleft, sepright)\n", "normalized_occurrence": 1}
