{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..6a2fc77 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -60,6 +60,18 @@ class MigrationRecorder:\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return {}\n+\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return\n+\n         if self.has_table():\n             return\n         # Make the table\n@@ -74,6 +86,18 @@ class MigrationRecorder:\n         Return a dict mapping (app_name, migration_name) to Migration instances\n         for all applied migrations.\n         \"\"\"\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return {}\n+\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return\n+\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n@@ -83,14 +107,26 @@ class MigrationRecorder:\n \n     def record_applied(self, app, name):\n         \"\"\"Record that a migration was applied.\"\"\"\n-        self.ensure_schema()\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n \n     def record_unapplied(self, app, name):\n         \"\"\"Record that a migration was unapplied.\"\"\"\n-        self.ensure_schema()\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..8378f19 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -30,6 +30,14 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n     def ensure_schema(self):\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return {}\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return\n         if self.has_table():\n             return\n         try:\n@@ -38,15 +46,32 @@ class MigrationRecorder:\n         except DatabaseError as exc:\n             raise MigrationSchemaMissing('Unable to create the django_migrations table (%s)' % exc)\n     def applied_migrations(self):\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return {}\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if not ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            return\n         if self.has_table():\n             return {(migration.app, migration.name): migration for migration in self.migration_qs}\n         else:\n             return {}\n     def record_applied(self, app, name):\n-        self.ensure_schema()\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.ensure_schema()\n         self.migration_qs.create(app=app, name=name)\n     def record_unapplied(self, app, name):\n-        self.ensure_schema()\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.ensure_schema()\n         self.migration_qs.filter(app=app, name=name).delete()\n     def flush(self):\n-        self.migration_qs.all().delete()\n\\ No newline at end of file\n+        from django.apps import apps\n+        from django.db.utils import ConnectionRouter\n+        if ConnectionRouter().allow_migrate(self.connection.alias, apps.get_model('migrations.Migration')):\n+            self.migration_qs.all().delete()\n\\ No newline at end of file\n", "normalized_occurrence": 1}
