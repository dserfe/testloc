{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..ad55d3a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -116,6 +116,9 @@ class SQLCompiler:\n             # select clause are already part of the group by.\n             if not expr.contains_aggregate and not is_ref:\n                 expressions.extend(expr.get_source_expressions())\n+            # Ensure the correct group by columns are used when filtering on subqueries\n+            if hasattr(expr, 'get_group_by_cols'):\n+                expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..6a89119 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -52,6 +52,8 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             if not expr.contains_aggregate and (not is_ref):\n                 expressions.extend(expr.get_source_expressions())\n+            if hasattr(expr, 'get_group_by_cols'):\n+                expressions.extend(expr.get_group_by_cols())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "normalized_occurrence": 1}
