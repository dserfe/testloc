{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..1103299 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1123,7 +1123,11 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                # If input is boolean array, use single level at 0.5\n+                if np.issubdtype(self.z.dtype, np.bool_):\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -1462,6 +1466,7 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+        self.z = z  # Store z for use in _process_contour_level_args\n         self._process_contour_level_args(args)\n         return (x, y, z)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..d664578 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -483,7 +483,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n     def _process_contour_level_args(self, args):\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7\n+                if np.issubdtype(self.z.dtype, np.bool_):\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -678,6 +681,7 @@ class QuadContourSet(ContourSet):\n             z = ma.masked_where(z <= 0, z)\n             _api.warn_external('Log scale: values of z <= 0 have been masked')\n             self.zmin = float(z.min())\n+        self.z = z\n         self._process_contour_level_args(args)\n         return (x, y, z)\n     def _check_xyz(self, args, kwargs):\n", "normalized_occurrence": 1}
