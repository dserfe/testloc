{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex ea465e6..2c038d2 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -768,6 +768,17 @@ class GoogleDocstring:\n \n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n+\n+        # Start modification for autodoc_typehints_description_target\n+        if self._config.autodoc_typehints_description_target in (\"all\", \"documented\"):\n+            type_hints = self._app.config.autodoc_typehints_description_target\n+            annotations = self._app.env.temp_data.get('annotations', {}).get(self._name, {})\n+            if 'return' in annotations:\n+                for i, (name, _type, _desc) in enumerate(fields):\n+                    if not _type and annotations['return']:\n+                        _type = annotations['return']\n+                        fields[i] = (name, _type, _desc)\n+        # End modification for autodoc_typehints_description_target\n         multi = len(fields) > 1\n         if multi:\n             use_rtype = False\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex bc7a995..b77013d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -506,6 +506,14 @@ class GoogleDocstring:\n         return self._parse_generic_section(_('References'), use_admonition)\n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n+        if self._config.autodoc_typehints_description_target in ('all', 'documented'):\n+            type_hints = self._app.config.autodoc_typehints_description_target\n+            annotations = self._app.env.temp_data.get('annotations', {}).get(self._name, {})\n+            if 'return' in annotations:\n+                for i, (name, _type, _desc) in enumerate(fields):\n+                    if not _type and annotations['return']:\n+                        _type = annotations['return']\n+                        fields[i] = (name, _type, _desc)\n         multi = len(fields) > 1\n         if multi:\n             use_rtype = False\n", "normalized_occurrence": 1}
