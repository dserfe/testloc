{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..f681916 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -161,6 +161,9 @@ class Options:\n \n         # Next, apply any overridden values from 'class Meta'.\n         if self.meta:\n+            # If there is already an ordering in parent, extend it with the child's ordering\n+            if 'ordering' in parent._meta.original_attrs and 'ordering' in self.meta.__dict__:\n+                self.meta.__dict__['ordering'] = parent._meta.original_attrs['ordering'] + self.meta.__dict__['ordering']\n             meta_attrs = self.meta.__dict__.copy()\n             for name in self.meta.__dict__:\n                 # Ignore any private attributes that Django doesn't care about.\n@@ -858,4 +861,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..c8a5798 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -98,6 +98,8 @@ class Options:\n         self.verbose_name = camel_case_to_spaces(self.object_name)\n         self.original_attrs = {}\n         if self.meta:\n+            if 'ordering' in parent._meta.original_attrs and 'ordering' in self.meta.__dict__:\n+                self.meta.__dict__['ordering'] = parent._meta.original_attrs['ordering'] + self.meta.__dict__['ordering']\n             meta_attrs = self.meta.__dict__.copy()\n             for name in self.meta.__dict__:\n                 if name.startswith('_'):\n", "normalized_occurrence": 1}
