{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..01bb657 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -192,6 +192,11 @@ class UnitSystem(_QuantityMapper):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n+            if expr.func == exp:\n+                base_factor, base_dim = fds[0]\n+                if self.get_dimension_system().is_dimensionless(base_dim):\n+                    return exp(base_factor), Dimension(1)\n+                raise ValueError(f\"Exponent in {expr} is not dimensionless.\")\n             return (expr.func(*(f[0] for f in fds)),\n                     *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n@@ -203,4 +208,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 33c8d4e..1dd7deb 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -117,6 +117,11 @@ class UnitSystem(_QuantityMapper):\n             return (factor, dim)\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            if expr.func == exp:\n+                base_factor, base_dim = fds[0]\n+                if self.get_dimension_system().is_dimensionless(base_dim):\n+                    return (exp(base_factor), Dimension(1))\n+                raise ValueError(f'Exponent in {expr} is not dimensionless.')\n             return (expr.func(*(f[0] for f in fds)), *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n             return (S.One, expr)\n", "normalized_occurrence": 1}
