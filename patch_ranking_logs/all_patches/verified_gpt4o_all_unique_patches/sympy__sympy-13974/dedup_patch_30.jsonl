{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..facd025 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -254,8 +254,16 @@ class TensorProduct(Expr):\n \n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        if isinstance(self, TensorProduct) and any(isinstance(arg, Pow) for arg in self.args):\n+            new_args = []\n+            for arg in self.args:\n+                if isinstance(arg, Pow):\n+                    base, exp = arg.as_base_exp()\n+                    new_args.append(TensorProduct(*(base for _ in range(exp))))\n+                else:\n+                    new_args.append(arg)\n+            return TensorProduct(*new_args)._eval_expand_tensorproduct()\n+        return self\n \n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..28e4512 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -122,8 +122,16 @@ class TensorProduct(Expr):\n                 break\n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        if isinstance(self, TensorProduct) and any((isinstance(arg, Pow) for arg in self.args)):\n+            new_args = []\n+            for arg in self.args:\n+                if isinstance(arg, Pow):\n+                    base, exp = arg.as_base_exp()\n+                    new_args.append(TensorProduct(*(base for _ in range(exp))))\n+                else:\n+                    new_args.append(arg)\n+            return TensorProduct(*new_args)._eval_expand_tensorproduct()\n+        return self\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n", "normalized_occurrence": 1}
