{"model_name_or_path": "agentless", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..b4194db 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,18 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        results = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if returning_fields:\n+            model = self.model\n+            converters = [\n+                (model._meta.get_field(field_name).from_db_value, field_name)\n+                for field_name in returning_fields\n+            ]\n+            for result in results:\n+                for converter, field_name in converters:\n+                    if converter:\n+                        result[field_name] = converter(result[field_name], None, connection)\n+        return results\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..6bd52cf 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,15 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        results = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if returning_fields:\n+            model = self.model\n+            converters = [(model._meta.get_field(field_name).from_db_value, field_name) for field_name in returning_fields]\n+            for result in results:\n+                for converter, field_name in converters:\n+                    if converter:\n+                        result[field_name] = converter(result[field_name], None, connection)\n+        return results\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
