{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..c623e51 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2107,9 +2107,14 @@ def uniq(seq, result=None):\n     [[1], [2, 1]]\n     \"\"\"\n     try:\n+        # Check the initial length of the sequence\n+        initial_len = len(seq)\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            # Check if the sequence length has changed\n+            if initial_len != len(seq):\n+                raise RuntimeError(\"Sequence modified during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..354bc27 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -731,9 +731,12 @@ def has_variety(seq):\n     return False\n def uniq(seq, result=None):\n     try:\n+        initial_len = len(seq)\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if initial_len != len(seq):\n+                raise RuntimeError('Sequence modified during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 1}
