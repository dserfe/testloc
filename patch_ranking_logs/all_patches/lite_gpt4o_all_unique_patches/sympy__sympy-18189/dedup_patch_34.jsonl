{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..e57f68f 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,9 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = {s: var.index(s) for s in syms}\n+                sol_set = diophantine(eq, param)\n+                return {tuple(sol[dict_sym_index[s]] for s in syms) for sol in sol_set}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..475105b 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,9 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = {s: var.index(s) for s in syms}\n+                sol_set = diophantine(eq, param)\n+                return {tuple((sol[dict_sym_index[s]] for s in syms)) for sol in sol_set}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
