{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..7089aba 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -65,6 +65,12 @@ class BaseConstraint:\n     def get_violation_error_message(self):\n         return self.violation_error_message % {\"name\": self.name}\n \n+    def get_validation_error_params(self):\n+        params = {\"message\": self.get_violation_error_message()}\n+        if self.violation_error_code is not None:\n+            params[\"code\"] = self.violation_error_code\n+        return params\n+\n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace(\"django.db.models.constraints\", \"django.db.models\")\n@@ -74,6 +80,11 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if (\n+            self.violation_error_code is not None\n+            and self.violation_error_code != self.default_violation_error_code\n+        ):\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n@@ -112,7 +123,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(**self.get_validation_error_params())\n         except FieldError:\n             pass\n \n@@ -400,6 +411,6 @@ class UniqueConstraint(BaseConstraint):\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(**self.get_validation_error_params())\n             except FieldError:\n                 pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..8ff8b39 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -41,12 +41,19 @@ class BaseConstraint:\n         raise NotImplementedError('This method must be implemented by a subclass.')\n     def get_violation_error_message(self):\n         return self.violation_error_message % {'name': self.name}\n+    def get_validation_error_params(self):\n+        params = {'message': self.get_violation_error_message()}\n+        if self.violation_error_code is not None:\n+            params['code'] = self.violation_error_code\n+        return params\n     def deconstruct(self):\n         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace('django.db.models.constraints', 'django.db.models')\n         kwargs = {'name': self.name}\n         if self.violation_error_message is not None and self.violation_error_message != self.default_violation_error_message:\n             kwargs['violation_error_message'] = self.violation_error_message\n+        if self.violation_error_code is not None and self.violation_error_code != self.default_violation_error_code:\n+            kwargs['violation_error_code'] = self.violation_error_code\n         return (path, (), kwargs)\n     def clone(self):\n         _, args, kwargs = self.deconstruct()\n@@ -75,7 +82,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(**self.get_validation_error_params())\n         except FieldError:\n             pass\n     def __repr__(self):\n@@ -228,6 +235,6 @@ class UniqueConstraint(BaseConstraint):\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(against, using=using):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(**self.get_validation_error_params())\n             except FieldError:\n                 pass\n\\ No newline at end of file\n", "normalized_occurrence": 1}
