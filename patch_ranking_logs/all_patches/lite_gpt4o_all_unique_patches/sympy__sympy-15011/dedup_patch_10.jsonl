{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..5746b18 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -424,7 +424,7 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n         if hasattr(var, 'name'):\n-            names.append(var.name)\n+            names.append(repr(var.name))\n         else:\n             # It's an iterable. Try to get name by inspection of calling frame.\n             name_list = [var_name for var_name, var_val in callers_local_vars\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..36886e4 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -110,7 +110,7 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n         if hasattr(var, 'name'):\n-            names.append(var.name)\n+            names.append(repr(var.name))\n         else:\n             name_list = [var_name for var_name, var_val in callers_local_vars if var_val is var]\n             if len(name_list) == 1:\n", "normalized_occurrence": 1}
