{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7233", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex d923cdb..1f02e5f 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -1120,7 +1120,9 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n                     **kwargs,\n                 )\n \n-            return Dataset(reduced, coords=coords, attrs=attrs)\n+            # Ensure non-dimensional coordinates are preserved as coordinates\n+            coord_names = set(coords) | set(self.obj.coords)\n+            return Dataset(reduced, coords=coord_names, attrs=attrs)\n \n         return wrapped_func\n \n@@ -1148,4 +1150,4 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n             Arrays with summarized data.\n         \"\"\"\n         wrapped_func = self._reduce_method(func)\n-        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n+        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 988b7e6..5557ef1 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -355,7 +355,8 @@ class DatasetCoarsen(Coarsen['Dataset']):\n             coords = {}\n             for c, v in self.obj.coords.items():\n                 coords[c] = v.variable.coarsen(self.windows, self.coord_func[c], self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n-            return Dataset(reduced, coords=coords, attrs=attrs)\n+            coord_names = set(coords) | set(self.obj.coords)\n+            return Dataset(reduced, coords=coord_names, attrs=attrs)\n         return wrapped_func\n     def reduce(self, func: Callable, keep_attrs=None, **kwargs) -> Dataset:\n         wrapped_func = self._reduce_method(func)\n", "normalized_occurrence": 1}
