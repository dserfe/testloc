{"model_name_or_path": "agentless_claude", "instance_id": "pallets__flask-5063", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 7de3e81..2202c24 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1001,37 +1001,7 @@ def shell_command() -> None:\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n \n-    rules = list(current_app.url_map.iter_rules())\n-    if not rules:\n-        click.echo(\"No routes were registered.\")\n-        return\n-\n-    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n-\n-    if sort in (\"endpoint\", \"rule\"):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == \"methods\":\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n-\n-    rule_methods = [\n-        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n-        for rule in rules\n-    ]\n-\n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n-    widths = (\n-        max(len(rule.endpoint) for rule in rules),\n-        max(len(methods) for methods in rule_methods),\n-        max(len(rule.rule) for rule in rules),\n-    )\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n-\n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*(\"-\" * width for width in widths)))\n \n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n", "occurrence": 3, "normalized_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex fe39489..f44a72a 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -578,24 +578,6 @@ def shell_command() -> None:\n @with_appcontext\n def routes_command(sort: str, all_methods: bool) -> None:\n     \"\"\"Show all registered routes with endpoints and methods.\"\"\"\n-    rules = list(current_app.url_map.iter_rules())\n-    if not rules:\n-        click.echo('No routes were registered.')\n-        return\n-    ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))\n-    if sort in ('endpoint', 'rule'):\n-        rules = sorted(rules, key=attrgetter(sort))\n-    elif sort == 'methods':\n-        rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n-    rule_methods = [', '.join(sorted(rule.methods - ignored_methods)) for rule in rules]\n-    headers = ('Endpoint', 'Methods', 'Rule')\n-    widths = (max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n-    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)\n-    click.echo(row.format(*headers).strip())\n-    click.echo(row.format(*('-' * width for width in widths)))\n-    for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n cli = FlaskGroup(name='flask', help=\"A general utility script for Flask applications.\\n\\nAn application to load must be given with the '--app' option,\\n'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file\\nin the current directory.\\n\")\n \n def main() -> None:\n", "normalized_occurrence": 3}
