{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..ec4b071 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -345,6 +345,9 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n+        # Ensure valid feature names before calling score_samples\n+        if hasattr(X, \"columns\"):\n+            self._check_feature_names(X, reset=True)\n         self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n \n         return self\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..23fb7a1 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -46,6 +46,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n+        if hasattr(X, 'columns'):\n+            self._check_feature_names(X, reset=True)\n         self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n         return self\n     def predict(self, X):\n", "normalized_occurrence": 1}
