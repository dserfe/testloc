{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..c6fc5e4 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2045,7 +2045,19 @@ class InlineModelAdmin(BaseModelAdmin):\n         }\n \n         base_model_form = defaults['form']\n-        can_change = self.has_change_permission(request, obj) if request else True\n+        if self.opts.auto_created:\n+            # For auto-created models (M2M through models), ensure can_change is False\n+            # when user only has view permission but not change permission on the target model\n+            opts = self.opts\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    target_opts = field.remote_field.model._meta\n+                    can_change = (\n+                        request.user.has_perm('%s.%s' % (target_opts.app_label, get_permission_codename('change', target_opts)))\n+                    ) if request else True\n+                    break\n+        else:\n+            can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n \n         class DeleteProtectedModelForm(base_model_form):\n@@ -2159,4 +2171,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..221ecce 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1002,7 +1002,15 @@ class InlineModelAdmin(BaseModelAdmin):\n         can_delete = self.can_delete and self.has_delete_permission(request, obj)\n         defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, **kwargs}\n         base_model_form = defaults['form']\n-        can_change = self.has_change_permission(request, obj) if request else True\n+        if self.opts.auto_created:\n+            opts = self.opts\n+            for field in opts.fields:\n+                if field.remote_field and field.remote_field.model != self.parent_model:\n+                    target_opts = field.remote_field.model._meta\n+                    can_change = request.user.has_perm('%s.%s' % (target_opts.app_label, get_permission_codename('change', target_opts))) if request else True\n+                    break\n+        else:\n+            can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n         class DeleteProtectedModelForm(base_model_form):\n             def hand_clean_DELETE(self):\n", "normalized_occurrence": 1}
