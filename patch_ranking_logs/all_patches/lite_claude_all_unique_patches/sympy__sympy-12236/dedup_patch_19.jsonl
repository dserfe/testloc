{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..83ffdd0 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -118,9 +118,17 @@ def apart(f, x=None, full=False, **options):\n             return f.xreplace(dict(reps))\n \n     if P.is_multivariate:\n+        # First try cancellation\n         fc = f.cancel()\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n+            \n+        # Handle symbolic coefficients by treating non-x variables as coefficients\n+        if x is not None:\n+            gens = Q.gens\n+            if len(gens) > 1 and x in gens:\n+                # Treat all other variables as coefficients\n+                return apart(f.collect(x), x=x, full=full, **_options)\n \n         raise NotImplementedError(\n             \"multivariate partial fraction decomposition\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..0f169e7 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -58,6 +58,10 @@ def apart(f, x=None, full=False, **options):\n         fc = f.cancel()\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n+        if x is not None:\n+            gens = Q.gens\n+            if len(gens) > 1 and x in gens:\n+                return apart(f.collect(x), x=x, full=full, **_options)\n         raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n     poly, P = P.div(Q, auto=True)\n", "normalized_occurrence": 1}
