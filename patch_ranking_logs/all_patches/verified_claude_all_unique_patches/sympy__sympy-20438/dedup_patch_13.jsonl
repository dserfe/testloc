{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..2dd718b 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -389,11 +389,16 @@ class Set(Basic):\n             return ret\n \n         # Fall back on computing the intersection\n-        # XXX: We shouldn't do this. A query like this should be handled\n-        # without evaluating new Set objects. It should be the other way round\n-        # so that the intersect method uses is_subset for evaluation.\n-        if self.intersect(other) == self:\n-            return True\n+        try:\n+            if hasattr(self, '_elements'):\n+                return all(other.contains(e) for e in self._elements)\n+            elif hasattr(self, 'as_relational'):\n+                # For continuous sets that can be expressed as inequalities\n+                return other.contains(self.an_element)\n+            else:\n+                return bool(self.intersect(other) == self)\n+        except:\n+            return None\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..1d3f00a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,8 +137,15 @@ class Set(Basic):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n-        if self.intersect(other) == self:\n-            return True\n+        try:\n+            if hasattr(self, '_elements'):\n+                return all((other.contains(e) for e in self._elements))\n+            elif hasattr(self, 'as_relational'):\n+                return other.contains(self.an_element)\n+            else:\n+                return bool(self.intersect(other) == self)\n+        except:\n+            return None\n     def _eval_is_subset(self, other):\n         return None\n     def _eval_is_superset(self, other):\n", "normalized_occurrence": 1}
