{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..720a78b 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -562,7 +562,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if isinstance(node.parent, astroid.Module):\n             # Allow imports nested\n             self._check_position(node)\n-        if isinstance(node.scope(), astroid.Module):\n+        if isinstance(node.scope(), astroid.Module) or self._is_used_in_type_comment(node, name):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n@@ -573,7 +573,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._add_imported_module(node, imported_module.name)\n \n     @check_messages(*MSGS)\n-    def leave_module(self, node):\n+    def _is_used_in_type_comment(self, node, name):\n+        \"\"\"Check if an import is used in a type comment.\"\"\"\n+        module_body = node.root().body\n+        for item in module_body:\n+            if isinstance(item, astroid.Expr) and isinstance(item.value, astroid.Const) and isinstance(item.value.value, str):\n+                if f\"# type: {name}\" in item.value.value:\n+                    return True\n+        return False\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..bc0c607 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -198,7 +198,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         self._check_toplevel(node)\n         if isinstance(node.parent, astroid.Module):\n             self._check_position(node)\n-        if isinstance(node.scope(), astroid.Module):\n+        if isinstance(node.scope(), astroid.Module) or self._is_used_in_type_comment(node, name):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n@@ -208,7 +208,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             else:\n                 self._add_imported_module(node, imported_module.name)\n     @check_messages(*MSGS)\n-    def leave_module(self, node):\n+    def _is_used_in_type_comment(self, node, name):\n+        module_body = node.root().body\n+        for item in module_body:\n+            if isinstance(item, astroid.Expr) and isinstance(item.value, astroid.Const) and isinstance(item.value.value, str):\n+                if f'# type: {name}' in item.value.value:\n+                    return True\n+        return False\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n         met_import = set()\n         met_from = set()\n", "normalized_occurrence": 1}
