{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..d8ac604 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1448,17 +1448,34 @@ class ManyToManyField(RelatedField):\n         return warnings\n \n     def _check_relationship_model(self, from_model=None, **kwargs):\n-        if hasattr(self.remote_field.through, \"_meta\"):\n+        through = self.remote_field.through\n+        # Resolve string reference to through model if needed\n+        if isinstance(through, str):\n+            if '.' in through:\n+                app_label, model_name = through.split('.')\n+                try:\n+                    through = self.opts.apps.get_model(app_label, model_name)\n+                    self.remote_field.through = through\n+                except LookupError:\n+                    qualified_model_name = through\n+            else:\n+                try:\n+                    through = self.opts.apps.get_model(through)\n+                    self.remote_field.through = through\n+                except LookupError:\n+                    qualified_model_name = through\n+        \n+        if hasattr(through, \"_meta\"):\n             qualified_model_name = \"%s.%s\" % (\n-                self.remote_field.through._meta.app_label,\n-                self.remote_field.through.__name__,\n+                through._meta.app_label,\n+                through.__name__,\n             )\n         else:\n-            qualified_model_name = self.remote_field.through\n+            qualified_model_name = str(through)\n \n         errors = []\n \n-        if self.remote_field.through not in self.opts.apps.get_models(\n+        if through not in self.opts.apps.get_models(\n             include_auto_created=True\n         ):\n             # The relationship model is not installed.\n@@ -1990,4 +2007,4 @@ class ManyToManyField(RelatedField):\n         return None\n \n     def db_parameters(self, connection):\n-        return {\"type\": None, \"check\": None}\n+        return {\"type\": None, \"check\": None}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..ed196ca 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -563,12 +563,27 @@ class ManyToManyField(RelatedField):\n             warnings.append(checks.Warning('related_name has no effect on ManyToManyField with a symmetrical relationship, e.g. to \"self\".', obj=self, id='fields.W345'))\n         return warnings\n     def _check_relationship_model(self, from_model=None, **kwargs):\n-        if hasattr(self.remote_field.through, '_meta'):\n-            qualified_model_name = '%s.%s' % (self.remote_field.through._meta.app_label, self.remote_field.through.__name__)\n+        through = self.remote_field.through\n+        if isinstance(through, str):\n+            if '.' in through:\n+                app_label, model_name = through.split('.')\n+                try:\n+                    through = self.opts.apps.get_model(app_label, model_name)\n+                    self.remote_field.through = through\n+                except LookupError:\n+                    qualified_model_name = through\n+            else:\n+                try:\n+                    through = self.opts.apps.get_model(through)\n+                    self.remote_field.through = through\n+                except LookupError:\n+                    qualified_model_name = through\n+        if hasattr(through, '_meta'):\n+            qualified_model_name = '%s.%s' % (through._meta.app_label, through.__name__)\n         else:\n-            qualified_model_name = self.remote_field.through\n+            qualified_model_name = str(through)\n         errors = []\n-        if self.remote_field.through not in self.opts.apps.get_models(include_auto_created=True):\n+        if through not in self.opts.apps.get_models(include_auto_created=True):\n             errors.append(checks.Error(\"Field specifies a many-to-many relation through model '%s', which has not been installed.\" % qualified_model_name, obj=self, id='fields.E331'))\n         else:\n             assert from_model is not None, \"ManyToManyField with intermediate tables cannot be checked if you don't pass the model where the field is attached to.\"\n", "normalized_occurrence": 1}
