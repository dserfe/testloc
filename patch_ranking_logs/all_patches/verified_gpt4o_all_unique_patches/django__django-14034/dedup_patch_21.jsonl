{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..74c8586 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1046,7 +1046,10 @@ class MultiValueField(Field):\n                     # field is empty.\n                     if field.error_messages['incomplete'] not in errors:\n                         errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    if self.required:\n+                        raise ValidationError(self.error_messages['required'], code='required')\n+                    else:\n+                        continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..61fc8a9 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -608,7 +608,10 @@ class MultiValueField(Field):\n                 elif field.required:\n                     if field.error_messages['incomplete'] not in errors:\n                         errors.append(field.error_messages['incomplete'])\n-                    continue\n+                    if self.required:\n+                        raise ValidationError(self.error_messages['required'], code='required')\n+                    else:\n+                        continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "normalized_occurrence": 1}
