{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..2e527fb 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1545,11 +1545,25 @@ class LogNorm(Normalize):\n \n     def autoscale(self, A):\n         # docstring inherited.\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            # Ensure minimum value is at least float eps to avoid log(0)\n+            A = np.ma.masked_less_equal(A, np.finfo(A.dtype).tiny, copy=False)\n+            super().autoscale(A)\n \n     def autoscale_None(self, A):\n         # docstring inherited.\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask is not np.ma.nomask and A.mask.all():\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            # Ensure minimum value is at least float eps to avoid log(0)\n+            A = np.ma.masked_less_equal(A, np.finfo(A.dtype).tiny, copy=False)\n+            super().autoscale_None(A)\n \n \n @_make_norm_from_scale(\n", "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..c7cc8eb 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1330,10 +1330,22 @@ class LogNorm(Normalize):\n     \"\"\"Normalize a given value to the 0-1 range on a log scale.\"\"\"\n \n     def autoscale(self, A):\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            A = np.ma.masked_less_equal(A, np.finfo(A.dtype).tiny, copy=False)\n+            super().autoscale(A)\n \n     def autoscale_None(self, A):\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask is not np.ma.nomask and A.mask.all():\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            A = np.ma.masked_less_equal(A, np.finfo(A.dtype).tiny, copy=False)\n+            super().autoscale_None(A)\n \n @_make_norm_from_scale(scale.SymmetricalLogScale, init=lambda linthresh, linscale=1.0, vmin=None, vmax=None, clip=False, *, base=10: None)\n class SymLogNorm(Normalize):\n", "normalized_occurrence": 1}
