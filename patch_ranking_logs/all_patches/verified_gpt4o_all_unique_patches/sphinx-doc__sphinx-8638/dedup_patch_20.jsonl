{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f4e1e57..eef8d3d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -686,10 +686,11 @@ class Documenter:\n         # search for members in source code too\n         namespace = '.'.join(self.objpath)  # will be empty for modules\n \n+        attr_docs = {}\n         if self.analyzer:\n-            attr_docs = self.analyzer.find_attr_docs()\n-        else:\n-            attr_docs = {}\n+            for (ns, name), doc in self.analyzer.find_attr_docs().items():\n+                if ns == namespace:\n+                    attr_docs[name] = doc\n \n         # process members and determine which to skip\n         for obj in members:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 320f592..adcf32e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -354,10 +354,11 @@ class Documenter:\n             return False\n         ret = []\n         namespace = '.'.join(self.objpath)\n+        attr_docs = {}\n         if self.analyzer:\n-            attr_docs = self.analyzer.find_attr_docs()\n-        else:\n-            attr_docs = {}\n+            for (ns, name), doc in self.analyzer.find_attr_docs().items():\n+                if ns == namespace:\n+                    attr_docs[name] = doc\n         for obj in members:\n             membername, member = obj\n             if member is INSTANCEATTR:\n", "normalized_occurrence": 1}
