{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..0497d3c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,7 +988,15 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        related_models = [\n+            parent for parent in self.model._meta.get_parent_list() if parent._meta.db_table\n+        ]\n+        for model in [self.model] + related_models:\n+            model_query = self.query.chain(sql.UpdateQuery)\n+            model_query.add_update_values(kwargs)\n+            model_query.model = model\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = model_query.get_compiler(self.db).execute_sql(CURSOR)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..3f0c71e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,7 +533,13 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        related_models = [parent for parent in self.model._meta.get_parent_list() if parent._meta.db_table]\n+        for model in [self.model] + related_models:\n+            model_query = self.query.chain(sql.UpdateQuery)\n+            model_query.add_update_values(kwargs)\n+            model_query.model = model\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = model_query.get_compiler(self.db).execute_sql(CURSOR)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n", "normalized_occurrence": 1}
