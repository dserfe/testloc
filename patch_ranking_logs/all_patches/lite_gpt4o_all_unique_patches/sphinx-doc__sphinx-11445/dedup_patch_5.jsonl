{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex 1ab7d44..2961139 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -76,14 +76,20 @@ class RSTParser(docutils.parsers.rst.Parser, Parser):\n         else:\n             inputlines = inputstring\n \n-        self.decorate(inputlines)\n+        decorated_inputlines = self.decorate(inputlines)\n+        self.statemachine.run(decorated_inputlines, document, inliner=self.inliner)\n         self.statemachine.run(inputlines, document, inliner=self.inliner)\n         self.finish_parse()\n \n-    def decorate(self, content: StringList) -> None:\n+    def decorate(self, content: StringList) -> StringList:\n         \"\"\"Preprocess reST content before parsing.\"\"\"\n-        prepend_prolog(content, self.config.rst_prolog)\n-        append_epilog(content, self.config.rst_epilog)\n+        modified_content = StringList()\n+        if self.config.rst_prolog:\n+            prepend_prolog(modified_content, self.config.rst_prolog)\n+        modified_content.extend(content)\n+        if self.config.rst_epilog:\n+            append_epilog(modified_content, self.config.rst_epilog)\n+        return modified_content\n \n \n def setup(app: Sphinx) -> dict[str, Any]:\n@@ -93,4 +99,4 @@ def setup(app: Sphinx) -> dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/parsers.py b/sphinx/parsers.py\nindex a99dedf..cb82622 100644\n--- a/sphinx/parsers.py\n+++ b/sphinx/parsers.py\n@@ -32,12 +32,18 @@ class RSTParser(docutils.parsers.rst.Parser, Parser):\n             inputlines = StringList(lines, document.current_source)\n         else:\n             inputlines = inputstring\n-        self.decorate(inputlines)\n+        decorated_inputlines = self.decorate(inputlines)\n+        self.statemachine.run(decorated_inputlines, document, inliner=self.inliner)\n         self.statemachine.run(inputlines, document, inliner=self.inliner)\n         self.finish_parse()\n-    def decorate(self, content: StringList) -> None:\n-        prepend_prolog(content, self.config.rst_prolog)\n-        append_epilog(content, self.config.rst_epilog)\n+    def decorate(self, content: StringList) -> StringList:\n+        modified_content = StringList()\n+        if self.config.rst_prolog:\n+            prepend_prolog(modified_content, self.config.rst_prolog)\n+        modified_content.extend(content)\n+        if self.config.rst_epilog:\n+            append_epilog(modified_content, self.config.rst_epilog)\n+        return modified_content\n def setup(app: Sphinx) -> dict[str, Any]:\n     app.add_source_parser(RSTParser)\n     return {'version': 'builtin', 'parallel_read_safe': True, 'parallel_write_safe': True}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
