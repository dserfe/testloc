{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8475", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 49ae1f0..c9bcb83 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -172,7 +172,12 @@ class CheckExternalLinksBuilder(Builder):\n                                                  config=self.app.config, auth=auth_info,\n                                                  **kwargs)\n                         response.raise_for_status()\n-                    except HTTPError:\n+                    except HTTPError: \n+                        # retry with GET request if that fails\n+                        response = requests.get(req_url, stream=True, config=self.app.config,\n+                                                auth=auth_info, **kwargs)\n+                        response.raise_for_status()\n+                    except requests.exceptions.TooManyRedirects:\n                         # retry with GET request if that fails, some servers\n                         # don't like HEAD requests.\n                         response = requests.get(req_url, stream=True, config=self.app.config,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex cf62af4..b019927 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -106,6 +106,9 @@ class CheckExternalLinksBuilder(Builder):\n                     except HTTPError:\n                         response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                         response.raise_for_status()\n+                    except requests.exceptions.TooManyRedirects:\n+                        response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n+                        response.raise_for_status()\n             except HTTPError as err:\n                 if err.response.status_code == 401:\n                     return ('working', ' - unauthorized', 0)\n", "normalized_occurrence": 1}
