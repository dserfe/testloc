{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12284", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex b1efba3..5e93d58 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -754,6 +754,9 @@ class Field(RegisterLookupMixin):\n         If private_only is True, create a separate instance of this field\n         for every subclass of cls, even if cls is not an abstract model.\n         \"\"\"\n+        # Update choices from class if defined\n+        if hasattr(cls, name + '_choice'):\n+            self.choices = getattr(cls, name + '_choice')\n         self.set_attributes_from_name(name)\n         self.model = cls\n         cls._meta.add_field(self, private=private_only)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 401c69b..0e58712 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -336,6 +336,8 @@ class Field(RegisterLookupMixin):\n         if self.verbose_name is None and self.name:\n             self.verbose_name = self.name.replace('_', ' ')\n     def contribute_to_class(self, cls, name, private_only=False):\n+        if hasattr(cls, name + '_choice'):\n+            self.choices = getattr(cls, name + '_choice')\n         self.set_attributes_from_name(name)\n         self.model = cls\n         cls._meta.add_field(self, private=private_only)\n", "normalized_occurrence": 1}
