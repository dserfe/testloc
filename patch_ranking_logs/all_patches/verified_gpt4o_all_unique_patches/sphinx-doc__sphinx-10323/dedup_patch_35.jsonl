{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..eee3200 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,14 +343,30 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            if lines:\n+                indent_match = re.match(r'^\\s*', lines[0])\n+                if indent_match:\n+                    indent = indent_match.group(0)\n+                    lines.insert(0, indent + prepend.strip() + '\\n')\n+                else:\n+                    lines.insert(0, prepend.strip() + '\\n')\n+            else:\n+                lines.insert(0, prepend.strip() + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            if lines:\n+                indent_match = re.match(r'^\\s*', lines[-1])\n+                if indent_match:\n+                    indent = indent_match.group(0)\n+                    lines.append(indent + append.strip() + '\\n')\n+                else:\n+                    lines.append(append.strip() + '\\n')\n+            else:\n+                lines.append(append.strip() + '\\n')\n \n         return lines\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..6c4666e 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,12 +226,28 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            if lines:\n+                indent_match = re.match('^\\\\s*', lines[0])\n+                if indent_match:\n+                    indent = indent_match.group(0)\n+                    lines.insert(0, indent + prepend.strip() + '\\n')\n+                else:\n+                    lines.insert(0, prepend.strip() + '\\n')\n+            else:\n+                lines.insert(0, prepend.strip() + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            if lines:\n+                indent_match = re.match('^\\\\s*', lines[-1])\n+                if indent_match:\n+                    indent = indent_match.group(0)\n+                    lines.append(indent + append.strip() + '\\n')\n+                else:\n+                    lines.append(append.strip() + '\\n')\n+            else:\n+                lines.append(append.strip() + '\\n')\n         return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n", "normalized_occurrence": 1}
