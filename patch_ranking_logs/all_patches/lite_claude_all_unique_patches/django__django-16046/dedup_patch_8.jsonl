{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16046", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex e685310..9636584 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n \n from django.conf import settings\n@@ -30,6 +31,10 @@ def format(\n     ) and settings.USE_THOUSAND_SEPARATOR\n     use_grouping = use_grouping or force_grouping\n     use_grouping = use_grouping and grouping != 0\n+    # Handle None or empty string cases\n+    if number is None or number == '':\n+        return mark_safe('')\n+        \n     # Make the common case fast\n     if isinstance(number, int) and not use_grouping and not decimal_pos:\n         return mark_safe(number)\n@@ -101,4 +106,4 @@ def format(\n             int_part_gd += digit\n             cnt += 1\n         int_part = int_part_gd[::-1]\n-    return sign + int_part + dec_part\n+    return sign + int_part + dec_part\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 6c888ad..b858994 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -5,6 +5,8 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', f\n     use_grouping = (use_l10n or (use_l10n is None and settings.USE_L10N)) and settings.USE_THOUSAND_SEPARATOR\n     use_grouping = use_grouping or force_grouping\n     use_grouping = use_grouping and grouping != 0\n+    if number is None or number == '':\n+        return mark_safe('')\n     if isinstance(number, int) and (not use_grouping) and (not decimal_pos):\n         return mark_safe(number)\n     sign = ''\n", "normalized_occurrence": 1}
