{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 67e1797..6084fff 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -217,9 +217,12 @@ class MatrixExpr(Expr):\n         # `x` is a scalar:\n         if self.has(x):\n             # See if there are other methods using it:\n-            return super()._eval_derivative(x)\n+            ret = super()._eval_derivative(x)\n+            if ret is not None:\n+                ret = ret.func(*ret.args, kind=self.kind)\n+            return ret\n         else:\n-            return ZeroMatrix(*self.shape)\n+            return ZeroMatrix(*self.shape, kind=self.kind)\n \n     @classmethod\n     def _check_dim(cls, dim):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 675bb56..a69a1f3 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -142,9 +142,12 @@ class MatrixExpr(Expr):\n         return Basic._eval_derivative_n_times(self, x, n)\n     def _eval_derivative(self, x):\n         if self.has(x):\n-            return super()._eval_derivative(x)\n+            ret = super()._eval_derivative(x)\n+            if ret is not None:\n+                ret = ret.func(*ret.args, kind=self.kind)\n+            return ret\n         else:\n-            return ZeroMatrix(*self.shape)\n+            return ZeroMatrix(*self.shape, kind=self.kind)\n     @classmethod\n     def _check_dim(cls, dim):\n         from sympy.core.assumptions import check_assumptions\n", "normalized_occurrence": 1}
