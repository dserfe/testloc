{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..24f72d2 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -904,17 +904,10 @@ class PrettyPrinter(Printer):\n             inneritems = list(vect.components.items())\n             inneritems.sort(key = lambda x: x[0].__str__())\n             for k, v in inneritems:\n-                #if the coef of the basis vector is 1\n-                #we skip the 1\n-                if v == 1:\n-                    o1.append(u\"\" +\n-                              k._pretty_form)\n-                #Same for -1\n-                elif v == -1:\n-                    o1.append(u\"(-1) \" +\n-                              k._pretty_form)\n-                #For a general expr\n-                else:\n+                # For a general expression\n+                arg_str = self._print(v)\n+                if isinstance(v, (Add, Mul, Pow)):\n+                    arg_str = arg_str.parens()[0]\n                     #We always wrap the measure numbers in\n                     #parentheses\n                     arg_str = self._print(\n@@ -942,26 +935,20 @@ class PrettyPrinter(Printer):\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j+1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n+        for parts in zip_longest(*o1, fillvalue=\"\"):\n+            lengths.append(max(len(part) for part in parts))\n+        for i, parts in enumerate(zip_longest(*o1, fillvalue=\"\")):\n+            for j, part in enumerate(parts):\n+                if i == 0:\n                     if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                        strs[j] += part + ' + '\n                     else:\n-                        strs[j] += parts[j] + ' '*(lengths[-1] -\n-                                                   len(parts[j])+\n-                                                   3)\n+                        strs[j] += part + ' ' * (lengths[j] - len(part) + 3)\n                 else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    strs[j] += ' '*(lengths[-1]+3)\n-\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+                    if j == 0:\n+                        strs[j] += ' ' * (lengths[j] + 3)\n+                    strs[j] += part + ' ' * (lengths[j] - len(part) + 3)\n+        return prettyForm(u'\\n'.join([s.rstrip() for s in strs]))\n \n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..0def1fc 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -655,11 +655,9 @@ class PrettyPrinter(Printer):\n             inneritems = list(vect.components.items())\n             inneritems.sort(key=lambda x: x[0].__str__())\n             for k, v in inneritems:\n-                if v == 1:\n-                    o1.append(u'' + k._pretty_form)\n-                elif v == -1:\n-                    o1.append(u'(-1) ' + k._pretty_form)\n-                else:\n+                arg_str = self._print(v)\n+                if isinstance(v, (Add, Mul, Pow)):\n+                    arg_str = arg_str.parens()[0]\n                     arg_str = self._print(v).parens()[0]\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n@@ -677,21 +675,20 @@ class PrettyPrinter(Printer):\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j + 1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n+        for parts in zip_longest(*o1, fillvalue=''):\n+            lengths.append(max((len(part) for part in parts)))\n+        for i, parts in enumerate(zip_longest(*o1, fillvalue='')):\n+            for j, part in enumerate(parts):\n+                if i == 0:\n                     if j == 0:\n-                        strs[0] += parts[0] + ' + '\n+                        strs[j] += part + ' + '\n                     else:\n-                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n+                        strs[j] += part + ' ' * (lengths[j] - len(part) + 3)\n                 else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    strs[j] += ' ' * (lengths[-1] + 3)\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+                    if j == 0:\n+                        strs[j] += ' ' * (lengths[j] + 3)\n+                    strs[j] += part + ' ' * (lengths[j] - len(part) + 3)\n+        return prettyForm(u'\\n'.join([s.rstrip() for s in strs]))\n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n         if expr.rank() == 0:\n", "normalized_occurrence": 1}
