{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 858b89a..0511856 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -810,10 +810,7 @@ class QuerySet(AltersData):\n                     unique_fields=unique_fields,\n                 )\n                 connection = connections[self.db]\n-                if (\n-                    connection.features.can_return_rows_from_bulk_insert\n-                    and on_conflict is None\n-                ):\n+                if connection.features.can_return_rows_from_bulk_insert:\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n", "occurrence": 5, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0fe72c0..bf3cd71 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -411,7 +411,7 @@ class QuerySet(AltersData):\n                 fields = [f for f in fields if not isinstance(f, AutoField)]\n                 returned_columns = self._batched_insert(objs_without_pk, fields, batch_size, on_conflict=on_conflict, update_fields=update_fields, unique_fields=unique_fields)\n                 connection = connections[self.db]\n-                if connection.features.can_return_rows_from_bulk_insert and on_conflict is None:\n+                if connection.features.can_return_rows_from_bulk_insert:\n                     assert len(returned_columns) == len(objs_without_pk)\n                 for obj_without_pk, results in zip(objs_without_pk, returned_columns):\n                     for result, field in zip(results, opts.db_returning_fields):\n", "normalized_occurrence": 5}
