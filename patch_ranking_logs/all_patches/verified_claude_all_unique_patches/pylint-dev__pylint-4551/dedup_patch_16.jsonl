{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..897c6f0 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,16 +84,34 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n-        for node_name, associated_nodes in (\n-            list(node.instance_attrs_type.items())\n-            + list(node.locals_type.items())\n-            + properties\n-        ):\n+        \n+        # Get type hints from __init__ parameters\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:  # Skip 'self'\n+                if arg.annotation:\n+                    if hasattr(arg.annotation, 'name'):\n+                        init_type_hints[arg.name] = [arg.annotation.name]\n+                    elif hasattr(arg.annotation, 'value'):\n+                        init_type_hints[arg.name] = [arg.annotation.value]\n+\n+        # Combine all attribute sources\n+        all_attrs = {}\n+        all_attrs.update(node.instance_attrs_type)\n+        all_attrs.update(node.locals_type)\n+        all_attrs.update(init_type_hints)\n+        all_attrs.update(dict(properties))\n+\n+        for node_name, associated_nodes in all_attrs.items():\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            if isinstance(associated_nodes, list):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            elif isinstance(associated_nodes, str):  # For type hints from __init__\n+                node_name = \"{} : {}\".format(node_name, associated_nodes)\n             attrs.append(node_name)\n         return sorted(attrs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..48ee0c0 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,12 +57,29 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            for arg in init_method.args.args[1:]:\n+                if arg.annotation:\n+                    if hasattr(arg.annotation, 'name'):\n+                        init_type_hints[arg.name] = [arg.annotation.name]\n+                    elif hasattr(arg.annotation, 'value'):\n+                        init_type_hints[arg.name] = [arg.annotation.value]\n+        all_attrs = {}\n+        all_attrs.update(node.instance_attrs_type)\n+        all_attrs.update(node.locals_type)\n+        all_attrs.update(init_type_hints)\n+        all_attrs.update(dict(properties))\n+        for node_name, associated_nodes in all_attrs.items():\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = '{} : {}'.format(node_name, ', '.join(names))\n+            if isinstance(associated_nodes, list):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    node_name = '{} : {}'.format(node_name, ', '.join(names))\n+            elif isinstance(associated_nodes, str):\n+                node_name = '{} : {}'.format(node_name, associated_nodes)\n             attrs.append(node_name)\n         return sorted(attrs)\n \n", "normalized_occurrence": 1}
