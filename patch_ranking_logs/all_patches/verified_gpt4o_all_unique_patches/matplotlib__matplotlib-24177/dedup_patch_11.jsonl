{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..c3ce1c5 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6850,12 +6850,14 @@ such objects\n             fill = (histtype == 'stepfilled')\n \n             xvals, yvals = [], []\n+            max_height = 0\n             for m in tops:\n                 if stacked:\n                     # top of the previous polygon becomes the bottom\n                     y[2*len(bins)-1:] = y[1:2*len(bins)-1][::-1]\n                 # set the top of this polygon\n                 y[1:2*len(bins)-1:2] = y[2:2*len(bins):2] = m + bottom\n+                max_height = max(max_height, np.max(y[1:2*len(bins)-1:2]))\n \n                 # The starting point of the polygon has not yet been\n                 # updated. So far only the endpoint was adjusted. This\n@@ -6870,6 +6872,9 @@ such objects\n                     xvals.append(x.copy())\n                     yvals.append(y.copy())\n \n+            if density:\n+                self.set_ylim(0, max_height)\n+\n             # stepfill is closed, step is not\n             split = -1 if fill else 2 * len(bins)\n             # add patches in reverse order so that when stacking,\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..ded0186 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2024,10 +2024,12 @@ class Axes(_AxesBase):\n                 x += 0.5 * (bins[1] - bins[0])\n             fill = histtype == 'stepfilled'\n             xvals, yvals = ([], [])\n+            max_height = 0\n             for m in tops:\n                 if stacked:\n                     y[2 * len(bins) - 1:] = y[1:2 * len(bins) - 1][::-1]\n                 y[1:2 * len(bins) - 1:2] = y[2:2 * len(bins):2] = m + bottom\n+                max_height = max(max_height, np.max(y[1:2 * len(bins) - 1:2]))\n                 y[0] = y[-1]\n                 if orientation == 'horizontal':\n                     xvals.append(y.copy())\n@@ -2035,6 +2037,8 @@ class Axes(_AxesBase):\n                 else:\n                     xvals.append(x.copy())\n                     yvals.append(y.copy())\n+            if density:\n+                self.set_ylim(0, max_height)\n             split = -1 if fill else 2 * len(bins)\n             for x, y, c in reversed(list(zip(xvals, yvals, color))):\n                 patches.append(self.fill(x[:split], y[:split], closed=True if fill else None, facecolor=c, edgecolor=None if fill else c, fill=fill if fill else None, zorder=None if fill else mlines.Line2D.zorder))\n", "normalized_occurrence": 1}
