{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..cf4fb37 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -395,7 +395,7 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return count, {model._meta.label: count}\n+                return count, {model._meta.label: count} if count else {model._meta.label: 0}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n@@ -409,6 +409,8 @@ class Collector:\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n                 deleted_counter[qs.model._meta.label] += count\n+                if qs.model._meta.label not in deleted_counter:\n+                    deleted_counter[qs.model._meta.label] = 0\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -426,6 +428,8 @@ class Collector:\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n+                if model._meta.label not in deleted_counter:\n+                    deleted_counter[model._meta.label] = 0\n                 deleted_counter[model._meta.label] += count\n \n                 if not model._meta.auto_created:\n@@ -442,4 +446,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..5bf8531 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -205,7 +205,7 @@ class Collector:\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n-                return (count, {model._meta.label: count})\n+                return (count, {model._meta.label: count} if count else {model._meta.label: 0})\n         with transaction.atomic(using=self.using, savepoint=False):\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n@@ -213,6 +213,8 @@ class Collector:\n             for qs in self.fast_deletes:\n                 count = qs._raw_delete(using=self.using)\n                 deleted_counter[qs.model._meta.label] += count\n+                if qs.model._meta.label not in deleted_counter:\n+                    deleted_counter[qs.model._meta.label] = 0\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n@@ -223,6 +225,8 @@ class Collector:\n                 query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n                 count = query.delete_batch(pk_list, self.using)\n+                if model._meta.label not in deleted_counter:\n+                    deleted_counter[model._meta.label] = 0\n                 deleted_counter[model._meta.label] += count\n                 if not model._meta.auto_created:\n                     for obj in instances:\n", "normalized_occurrence": 1}
