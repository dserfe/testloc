{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..0510d8d 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -112,6 +112,8 @@ class Count(Aggregate):\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        if extra.get('distinct', False) and isinstance(expression, Case):\n+            extra['template'] = 'COUNT(DISTINCT %s)' % expression.template\n         super().__init__(expression, filter=filter, **extra)\n \n     def convert_value(self, value, expression, connection):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..32f927d 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -81,6 +81,8 @@ class Count(Aggregate):\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        if extra.get('distinct', False) and isinstance(expression, Case):\n+            extra['template'] = 'COUNT(DISTINCT %s)' % expression.template\n         super().__init__(expression, filter=filter, **extra)\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n", "normalized_occurrence": 1}
