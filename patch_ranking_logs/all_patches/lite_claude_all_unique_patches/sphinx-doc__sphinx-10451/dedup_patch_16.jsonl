{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..8eedc73 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -118,12 +118,24 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            # Handle *args and **kwargs specially\n+            if name == 'args':\n+                field += nodes.field_name('', 'type *' + name)\n+            elif name == 'kwargs':\n+                field += nodes.field_name('', 'type **' + name)\n+            else:\n+                field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            # Handle *args and **kwargs specially\n+            if name == 'args':\n+                field += nodes.field_name('', 'param *' + name)\n+            elif name == 'kwargs':\n+                field += nodes.field_name('', 'param **' + name)\n+            else:\n+                field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..18ad529 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -88,12 +88,22 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            if name == 'args':\n+                field += nodes.field_name('', 'type *' + name)\n+            elif name == 'kwargs':\n+                field += nodes.field_name('', 'type **' + name)\n+            else:\n+                field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            if name == 'args':\n+                field += nodes.field_name('', 'param *' + name)\n+            elif name == 'kwargs':\n+                field += nodes.field_name('', 'param **' + name)\n+            else:\n+                field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n", "normalized_occurrence": 1}
