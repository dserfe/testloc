{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24970", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bd73e56..ab9b953 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -725,15 +725,23 @@ class Colormap:\n                 # Avoid converting large positive values to negative integers.\n                 np.clip(xa, -1, self.N, out=xa)\n                 xa = xa.astype(int)\n-        # Set the over-range indices before the under-range;\n-        # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n-\n         lut = self._lut\n         if bytes:\n             lut = (lut * 255).astype(np.uint8)\n+            # Handle the special indices after conversion to uint8 when in bytes mode\n+            i_over = min(self._i_over, 255)  # Clip to valid uint8 range\n+            i_under = min(self._i_under, 255)\n+            i_bad = min(self._i_bad, 255)\n+        else:\n+            i_over = self._i_over\n+            i_under = self._i_under\n+            i_bad = self._i_bad\n+\n+        # Set the over-range indices before the under-range;\n+        # otherwise the under-range values get converted to over-range.\n+        xa[xa > self.N - 1] = i_over\n+        xa[xa < 0] = i_under\n+        xa[mask_bad] = i_bad\n \n         rgba = lut.take(xa, axis=0, mode='clip')\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex fe9796e..0559bbf 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -600,12 +600,19 @@ class Colormap:\n                 xa[xa == self.N] = self.N - 1\n                 np.clip(xa, -1, self.N, out=xa)\n                 xa = xa.astype(int)\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n         lut = self._lut\n         if bytes:\n             lut = (lut * 255).astype(np.uint8)\n+            i_over = min(self._i_over, 255)\n+            i_under = min(self._i_under, 255)\n+            i_bad = min(self._i_bad, 255)\n+        else:\n+            i_over = self._i_over\n+            i_under = self._i_under\n+            i_bad = self._i_bad\n+        xa[xa > self.N - 1] = i_over\n+        xa[xa < 0] = i_under\n+        xa[mask_bad] = i_bad\n         rgba = lut.take(xa, axis=0, mode='clip')\n         if alpha is not None:\n             alpha = np.clip(alpha, 0, 1)\n", "normalized_occurrence": 1}
