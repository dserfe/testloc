{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..3f8d024 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,8 +3174,26 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Save the draggable state of legends\n+        for ax in self.axes:\n+            if hasattr(ax, \"legend_\") and ax.legend_:\n+                state[f\"{ax.legend_}._draggable\"] = ax.legend_._draggable\n+\n         return state\n \n+    def __setstate__(self, state):\n+        version = state.pop('__mpl_version__')\n+        restore_to_pylab = state.pop('_restore_to_pylab', False)\n+\n+        super().__setstate__(state)\n+\n+        # Restore the draggable state of legends\n+        for ax in self.axes:\n+            if hasattr(ax, \"legend_\") and ax.legend_:\n+                draggable_state = state.pop(f\"{ax.legend_}._draggable\", None)\n+                if draggable_state is not None:\n+                    ax.legend_.set_draggable(draggable_state)\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..7c7d089 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,7 +951,19 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        for ax in self.axes:\n+            if hasattr(ax, 'legend_') and ax.legend_:\n+                state[f'{ax.legend_}._draggable'] = ax.legend_._draggable\n         return state\n+    def __setstate__(self, state):\n+        version = state.pop('__mpl_version__')\n+        restore_to_pylab = state.pop('_restore_to_pylab', False)\n+        super().__setstate__(state)\n+        for ax in self.axes:\n+            if hasattr(ax, 'legend_') and ax.legend_:\n+                draggable_state = state.pop(f'{ax.legend_}._draggable', None)\n+                if draggable_state is not None:\n+                    ax.legend_.set_draggable(draggable_state)\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
