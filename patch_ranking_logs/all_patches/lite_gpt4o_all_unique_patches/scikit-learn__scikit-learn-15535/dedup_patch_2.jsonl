{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex d374ce0..d150cfc 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -616,6 +616,8 @@ def mutual_info_score(labels_true, labels_pred, contingency=None):\n     normalized_mutual_info_score: Normalized Mutual Information\n     \"\"\"\n     if contingency is None:\n+        labels_true = np.asarray(labels_true, dtype=object)\n+        labels_pred = np.asarray(labels_pred, dtype=object)\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n         contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 150db21..b7ce58e 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -79,6 +79,8 @@ def v_measure_score(labels_true, labels_pred, beta=1.0):\n     return homogeneity_completeness_v_measure(labels_true, labels_pred, beta=beta)[2]\n def mutual_info_score(labels_true, labels_pred, contingency=None):\n     if contingency is None:\n+        labels_true = np.asarray(labels_true, dtype=object)\n+        labels_pred = np.asarray(labels_pred, dtype=object)\n         labels_true, labels_pred = check_clusterings(labels_true, labels_pred)\n         contingency = contingency_matrix(labels_true, labels_pred, sparse=True)\n     else:\n", "normalized_occurrence": 1}
