{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex d3ae0cf..3835535 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -237,6 +237,26 @@ class Options:\n                 model.add_to_class('_order', OrderWrt())\n         else:\n             self.order_with_respect_to = None\n+            \n+        # Validate ordering references\n+        for order in self.ordering:\n+            # Skip expressions and descending orders\n+            if not isinstance(order, str) or order.startswith('-'):\n+                continue\n+                \n+            # Check for field__pk pattern\n+            parts = order.split('__')\n+            if len(parts) >= 2 and parts[-1] == 'pk':\n+                try:\n+                    # Traverse the fields to validate the path\n+                    current_opts = self\n+                    for part in parts[:-1]:\n+                        field = current_opts.get_field(part)\n+                        if not field.is_relation:\n+                            break\n+                        current_opts = field.remote_field.model._meta\n+                except (FieldDoesNotExist, AttributeError):\n+                    continue\n \n         if self.pk is None:\n             if self.parents:\n@@ -852,4 +872,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 3b361a9..330b451 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -147,6 +147,20 @@ class Options:\n                 model.add_to_class('_order', OrderWrt())\n         else:\n             self.order_with_respect_to = None\n+        for order in self.ordering:\n+            if not isinstance(order, str) or order.startswith('-'):\n+                continue\n+            parts = order.split('__')\n+            if len(parts) >= 2 and parts[-1] == 'pk':\n+                try:\n+                    current_opts = self\n+                    for part in parts[:-1]:\n+                        field = current_opts.get_field(part)\n+                        if not field.is_relation:\n+                            break\n+                        current_opts = field.remote_field.model._meta\n+                except (FieldDoesNotExist, AttributeError):\n+                    continue\n         if self.pk is None:\n             if self.parents:\n                 field = next(iter(self.parents.values()))\n", "normalized_occurrence": 1}
