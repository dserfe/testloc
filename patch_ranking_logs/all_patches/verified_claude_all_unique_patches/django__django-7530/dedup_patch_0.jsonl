{"model_name_or_path": "agentless_claude", "instance_id": "django__django-7530", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex bea18af..4555b90 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -105,7 +105,8 @@ class Command(BaseCommand):\n                     # At least one model must be migrated to the database.\n                     router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n                     for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    for model in apps.get_models()\n+                    if model._meta.app_label == app_label\n             )):\n                 loader.check_consistent_history(connection)\n \n", "occurrence": 7, "normalized_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex c375091..872efc2 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -55,7 +55,7 @@ class Command(BaseCommand):\n         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n         for alias in sorted(aliases_to_check):\n             connection = connections[alias]\n-            if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models(app_label))):\n+            if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models() if model._meta.app_label == app_label)):\n                 loader.check_consistent_history(connection)\n         conflicts = loader.detect_conflicts()\n         if app_labels:\n", "normalized_occurrence": 7}
