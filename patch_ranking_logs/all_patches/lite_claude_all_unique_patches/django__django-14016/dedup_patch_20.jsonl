{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..b7e107e 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,7 +38,13 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        def make_pickleable(val):\n+            if isinstance(val, (dict_keys, dict_values, dict_items)):\n+                return list(val)\n+            return val\n+        \n+        processed_kwargs = {key: make_pickleable(value) for key, value in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(processed_kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..a44d0fe 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -16,7 +16,12 @@ class Q(tree.Node):\n     default = AND\n     conditional = True\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        def make_pickleable(val):\n+            if isinstance(val, (dict_keys, dict_values, dict_items)):\n+                return list(val)\n+            return val\n+        processed_kwargs = {key: make_pickleable(value) for key, value in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(processed_kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n", "normalized_occurrence": 1}
