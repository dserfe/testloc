{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5413", "model_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex ad7d2cc..c454ff2 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@ class ExceptionInfo:\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return self.exconly()\n \n     def match(self, regexp):\n         \"\"\"\n", "occurrence": 8, "normalized_patch": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex aa557ae..5780c4b 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -272,9 +272,7 @@ class ExceptionInfo:\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return self.exconly()\n     def match(self, regexp):\n         __tracebackhide__ = True\n         if not re.search(regexp, str(self.value)):\n", "normalized_occurrence": 8}
