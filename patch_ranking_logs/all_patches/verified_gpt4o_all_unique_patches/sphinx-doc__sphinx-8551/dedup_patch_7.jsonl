{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..45415ae 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -85,11 +85,17 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         reftype = 'class'\n \n+    kwargs = {}\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n+        # Check the current module context\n+        current_module = env.ref_context.get('py:module')\n+        if current_module:\n+            # Prepend the current module to the text if not already qualified\n+            if not text.startswith(current_module + '.'):\n+                text = current_module + '.' + text\n+\n+        kwargs = {'py:module': current_module,\n                   'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n \n     return pending_xref('', nodes.Text(text),\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..36c0baf 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -39,10 +39,13 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         reftype = 'obj'\n     else:\n         reftype = 'class'\n+    kwargs = {}\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n-    else:\n-        kwargs = {}\n+        current_module = env.ref_context.get('py:module')\n+        if current_module:\n+            if not text.startswith(current_module + '.'):\n+                text = current_module + '.' + text\n+        kwargs = {'py:module': current_module, 'py:class': env.ref_context.get('py:class')}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n", "normalized_occurrence": 1}
