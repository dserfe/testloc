{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..81891f4 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -41,29 +42,46 @@ class MigrationOptimizer:\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n+            # Attempt to merge consecutive AlterFooTogether operations into one\n+            if (\n+                isinstance(operation, (operations.AlterUniqueTogether, operations.AlterIndexTogether)) and\n+                i + 1 < len(operations) and\n+                isinstance(operations[i + 1], type(operation)) and\n+                operation.name_lower == operations[i + 1].name_lower\n+            ):\n+                new_operations.append(\n+                    type(operation)(\n+                        name=operation.name,\n+                        **{operation.option_name: operations[i + 1].foos}\n+                    )\n+                )\n+                return new_operations + operations[i + 2:]\n+\n+            # Otherwise, proceed with usual optimization.\n             else:\n-                new_operations.append(operation)\n-        return new_operations\n+                right = True  # Should we reduce on the right or on the left.\n+                # Compare it to each operation after it\n+                for j, other in enumerate(operations[i + 1:]):\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1:i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all(op.reduce(other, app_label) is True for op in in_between):\n+                            # Perform a left reduction if all of the in-between\n+                            # operations can optimize through other.\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            # Otherwise keep trying.\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n+                    elif not result:\n+                        # Can't perform a right reduction.\n+                        right = False\n+                else:\n+                    new_operations.append(operation)\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..ae39b3a 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -12,24 +12,28 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    right = False\n+            if isinstance(operation, (operations.AlterUniqueTogether, operations.AlterIndexTogether)) and i + 1 < len(operations) and isinstance(operations[i + 1], type(operation)) and (operation.name_lower == operations[i + 1].name_lower):\n+                new_operations.append(type(operation)(name=operation.name, **{operation.option_name: operations[i + 1].foos}))\n+                return new_operations + operations[i + 2:]\n             else:\n-                new_operations.append(operation)\n+                right = True\n+                for j, other in enumerate(operations[i + 1:]):\n+                    result = operation.reduce(other, app_label)\n+                    if isinstance(result, list):\n+                        in_between = operations[i + 1:i + j + 1]\n+                        if right:\n+                            new_operations.extend(in_between)\n+                            new_operations.extend(result)\n+                        elif all((op.reduce(other, app_label) is True for op in in_between)):\n+                            new_operations.extend(result)\n+                            new_operations.extend(in_between)\n+                        else:\n+                            new_operations.append(operation)\n+                            break\n+                        new_operations.extend(operations[i + j + 2:])\n+                        return new_operations\n+                    elif not result:\n+                        right = False\n+                else:\n+                    new_operations.append(operation)\n         return new_operations\n\\ No newline at end of file\n", "normalized_occurrence": 1}
