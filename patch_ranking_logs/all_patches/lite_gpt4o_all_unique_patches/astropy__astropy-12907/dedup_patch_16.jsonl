{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..8d6955e 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -199,20 +199,24 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n-        # this does not work for more than 2 coordinates\n-        mat = np.zeros((noutp, model.n_inputs))\n-        if pos == 'left':\n-            mat[:model.n_outputs, : model.n_inputs] = 1\n-        else:\n-            mat[-model.n_outputs:, -model.n_inputs:] = 1\n+    if isinstance(model, CompoundModel):\n+        sub_matrices = [_coord_matrix(submodel, pos, noutp) for submodel in model]\n+        mat = np.hstack(sub_matrices)\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n+        if not model.separable:\n+            # this does not work for more than 2 coordinates\n+            mat = np.zeros((noutp, model.n_inputs))\n+            if pos == 'left':\n+                mat[:model.n_outputs, : model.n_inputs] = 1\n+            else:\n+                mat[-model.n_outputs:, -model.n_inputs:] = 1\n+        else:\n+            mat = np.zeros((noutp, model.n_inputs))\n \n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+            for i in range(model.n_inputs):\n+                mat[i, i] = 1\n+            if pos == 'right':\n+                mat = np.roll(mat, (noutp - model.n_outputs))\n     return mat\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..f28c053 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -54,7 +54,10 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n+    if isinstance(model, CompoundModel):\n+        sub_matrices = [_coord_matrix(submodel, pos, noutp) for submodel in model]\n+        mat = np.hstack(sub_matrices)\n+    elif not model.separable:\n         mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, :model.n_inputs] = 1\n", "normalized_occurrence": 1}
