{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 485b8be..6456a94 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -303,7 +303,7 @@ class Command(BaseCommand):\n         emit_pre_migrate_signal(\n             self.verbosity,\n             self.interactive,\n-            connection.alias,\n+            database,\n             stdout=self.stdout,\n             apps=pre_migrate_apps,\n             plan=plan,\n@@ -383,7 +383,7 @@ class Command(BaseCommand):\n         emit_post_migrate_signal(\n             self.verbosity,\n             self.interactive,\n-            connection.alias,\n+            database,\n             stdout=self.stdout,\n             apps=post_migrate_apps,\n             plan=plan,\n", "occurrence": 4, "normalized_patch": "diff --git a/django/core/management/commands/migrate.py b/django/core/management/commands/migrate.py\nindex 44b7858..acfe3f5 100644\n--- a/django/core/management/commands/migrate.py\n+++ b/django/core/management/commands/migrate.py\n@@ -140,7 +140,7 @@ class Command(BaseCommand):\n                 self.stdout.write(self.style.MIGRATE_LABEL('  Target specific migration: ') + '%s, from %s' % (targets[0][1], targets[0][0]))\n         pre_migrate_state = executor._create_project_state(with_applied_migrations=True)\n         pre_migrate_apps = pre_migrate_state.apps\n-        emit_pre_migrate_signal(self.verbosity, self.interactive, connection.alias, stdout=self.stdout, apps=pre_migrate_apps, plan=plan)\n+        emit_pre_migrate_signal(self.verbosity, self.interactive, database, stdout=self.stdout, apps=pre_migrate_apps, plan=plan)\n         if run_syncdb:\n             if self.verbosity >= 1:\n                 self.stdout.write(self.style.MIGRATE_HEADING('Synchronizing apps without migrations:'))\n@@ -173,7 +173,7 @@ class Command(BaseCommand):\n                 model_keys.append(model_key)\n                 post_migrate_apps.unregister_model(*model_key)\n         post_migrate_apps.render_multiple([ModelState.from_model(apps.get_model(*model)) for model in model_keys])\n-        emit_post_migrate_signal(self.verbosity, self.interactive, connection.alias, stdout=self.stdout, apps=post_migrate_apps, plan=plan)\n+        emit_post_migrate_signal(self.verbosity, self.interactive, database, stdout=self.stdout, apps=post_migrate_apps, plan=plan)\n     def migration_progress_callback(self, action, migration=None, fake=False):\n         if self.verbosity >= 1:\n             compute_time = self.verbosity > 1\n", "normalized_occurrence": 4}
