{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..ae1cd50 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -152,7 +152,7 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def colblocksizes(self):\n-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n+        return [self.blocks[0, i].cols if isinstance(self.blocks[0, i], MatrixBase) else self.blocks[0, i].shape[1] for i in range(self.blockshape[1])]\n \n     def structurally_equal(self, other):\n         return (isinstance(other, BlockMatrix)\n@@ -164,7 +164,12 @@ class BlockMatrix(MatrixExpr):\n     def _blockmul(self, other):\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            multiplied_blocks = self.blocks*other.blocks\n+            for i in range(multiplied_blocks.rows):\n+                for j in range(multiplied_blocks.cols):\n+                    if multiplied_blocks[i, j] == 0:\n+                        multiplied_blocks[i, j] = ZeroMatrix(multiplied_blocks[i, j].shape[0], multiplied_blocks[i, j].shape[1])\n+            return BlockMatrix(multiplied_blocks)\n \n         return self * other\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..855282e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -67,12 +67,17 @@ class BlockMatrix(MatrixExpr):\n         return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]\n     @property\n     def colblocksizes(self):\n-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n+        return [self.blocks[0, i].cols if isinstance(self.blocks[0, i], MatrixBase) else self.blocks[0, i].shape[1] for i in range(self.blockshape[1])]\n     def structurally_equal(self, other):\n         return isinstance(other, BlockMatrix) and self.shape == other.shape and (self.blockshape == other.blockshape) and (self.rowblocksizes == other.rowblocksizes) and (self.colblocksizes == other.colblocksizes)\n     def _blockmul(self, other):\n         if isinstance(other, BlockMatrix) and self.colblocksizes == other.rowblocksizes:\n-            return BlockMatrix(self.blocks * other.blocks)\n+            multiplied_blocks = self.blocks * other.blocks\n+            for i in range(multiplied_blocks.rows):\n+                for j in range(multiplied_blocks.cols):\n+                    if multiplied_blocks[i, j] == 0:\n+                        multiplied_blocks[i, j] = ZeroMatrix(multiplied_blocks[i, j].shape[0], multiplied_blocks[i, j].shape[1])\n+            return BlockMatrix(multiplied_blocks)\n         return self * other\n     def _blockadd(self, other):\n         if isinstance(other, BlockMatrix) and self.structurally_equal(other):\n", "normalized_occurrence": 1}
