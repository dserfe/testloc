{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..263d9e4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -916,7 +916,10 @@ class Field(RegisterLookupMixin):\n \n     def value_from_object(self, obj):\n         \"\"\"Return the value of this field in the given model instance.\"\"\"\n-        return getattr(obj, self.attname)\n+        value = getattr(obj, self.attname)\n+        if hasattr(value, 'value') and self.choices:\n+            return value.value\n+        return value\n \n \n class BooleanField(Field):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..b96954d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -434,7 +434,10 @@ class Field(RegisterLookupMixin):\n             form_class = forms.CharField\n         return form_class(**defaults)\n     def value_from_object(self, obj):\n-        return getattr(obj, self.attname)\n+        value = getattr(obj, self.attname)\n+        if hasattr(value, 'value') and self.choices:\n+            return value.value\n+        return value\n class BooleanField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {'invalid': _('\u201c%(value)s\u201d value must be either True or False.'), 'invalid_nullable': _('\u201c%(value)s\u201d value must be either True, False, or None.')}\n", "normalized_occurrence": 1}
