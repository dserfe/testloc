{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..df5cb4a 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,9 +416,7 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n-            mode += \"b\"\n-        f = os.fdopen(newfd, mode, 0)  # no buffering\n+        f = os.fdopen(newfd, mode.replace(\"b\", \"\"), 0)  # no buffering\n     return EncodedFile(f, encoding or default_encoding)\n \n \n@@ -432,7 +430,8 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, \"replace\")\n-        elif _PY3:\n+        elif _PY3 and isinstance(obj, bytes):\n+            obj = obj.decode(self.encoding, \"replace\")\n             raise TypeError(\n                 \"write() argument must be str, not {}\".format(type(obj).__name__)\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..3095c8f 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -241,9 +241,7 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if 'b' not in mode:\n-            mode += 'b'\n-        f = os.fdopen(newfd, mode, 0)\n+        f = os.fdopen(newfd, mode.replace('b', ''), 0)\n     return EncodedFile(f, encoding or default_encoding)\n class EncodedFile(object):\n     errors = 'strict'\n@@ -253,7 +251,8 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n-        elif _PY3:\n+        elif _PY3 and isinstance(obj, bytes):\n+            obj = obj.decode(self.encoding, 'replace')\n             raise TypeError('write() argument must be str, not {}'.format(type(obj).__name__))\n         self.buffer.write(obj)\n     def writelines(self, linelist):\n", "normalized_occurrence": 1}
