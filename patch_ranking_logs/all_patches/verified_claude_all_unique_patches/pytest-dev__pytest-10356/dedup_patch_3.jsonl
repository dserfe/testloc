{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..0a16ceb 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,10 +356,25 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    \"\"\"Obtain the unpacked marks that are stored on an object.\n+    \n+    For classes, this includes marks from all parent classes in the MRO chain.\"\"\"\n+    mark_list = []\n+    \n+    if inspect.isclass(obj):\n+        # For classes, collect marks from all classes in the MRO\n+        for cls in obj.__mro__:\n+            cls_marks = getattr(cls, \"pytestmark\", [])\n+            if not isinstance(cls_marks, list):\n+                cls_marks = [cls_marks]\n+            mark_list.extend(cls_marks)\n+    else:\n+        # For non-class objects, get marks directly\n+        obj_marks = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(obj_marks, list):\n+            obj_marks = [obj_marks]\n+        mark_list.extend(obj_marks)\n+    \n     return normalize_mark_list(mark_list)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..6c1bae1 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,9 +161,18 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    mark_list = []\n+    if inspect.isclass(obj):\n+        for cls in obj.__mro__:\n+            cls_marks = getattr(cls, 'pytestmark', [])\n+            if not isinstance(cls_marks, list):\n+                cls_marks = [cls_marks]\n+            mark_list.extend(cls_marks)\n+    else:\n+        obj_marks = getattr(obj, 'pytestmark', [])\n+        if not isinstance(obj_marks, list):\n+            obj_marks = [obj_marks]\n+        mark_list.extend(obj_marks)\n     return normalize_mark_list(mark_list)\n def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iterable[Mark]:\n     for mark in mark_list:\n", "normalized_occurrence": 2}
