{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..44b3a88 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -407,6 +407,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n+    _re_real_polynomial = re.compile(r\"^(R|RR)\\[(.+)\\]$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n     @classmethod\n@@ -462,6 +463,12 @@ class Domain(with_metaclass(OptionType, Option)):\n                 else:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n \n+            r = cls._re_real_polynomial.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+\n             r = cls._re_fraction.match(domain)\n \n             if r is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..e979104 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -233,6 +233,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n     _re_fraction = re.compile('^(Z|ZZ|Q|QQ)\\\\((.+)\\\\)$')\n+    _re_real_polynomial = re.compile('^(R|RR)\\\\[(.+)\\\\]$')\n     _re_algebraic = re.compile('^(Q|QQ)\\\\<(.+)\\\\>$')\n     @classmethod\n     def preprocess(cls, domain):\n@@ -272,6 +273,10 @@ class Domain(with_metaclass(OptionType, Option)):\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n                 else:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n+            r = cls._re_real_polynomial.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n             r = cls._re_fraction.match(domain)\n             if r is not None:\n                 ground, gens = r.groups()\n", "normalized_occurrence": 1}
