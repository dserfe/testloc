diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py
index ba95b0e..ca21329 100644
--- a/src/_pytest/reports.py
+++ b/src/_pytest/reports.py
@@ -162,26 +162,43 @@ class BaseReport:
         """
 
         def disassembled_report(rep):
-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()
-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()
-
-            new_entries = []
-            for entry in reprtraceback["reprentries"]:
-                entry_data = {
-                    "type": type(entry).__name__,
-                    "data": entry.__dict__.copy(),
-                }
-                for key, value in entry_data["data"].items():
-                    if hasattr(value, "__dict__"):
-                        entry_data["data"][key] = value.__dict__.copy()
-                new_entries.append(entry_data)
-
-            reprtraceback["reprentries"] = new_entries
+            def serialize_traceback(tb):
+                reprtraceback = tb.__dict__.copy()
+                reprcrash = tb.reprcrash.__dict__.copy()
+
+                new_entries = []
+                for entry in reprtraceback["reprentries"]:
+                    entry_data = {
+                        "type": type(entry).__name__,
+                        "data": entry.__dict__.copy(),
+                    }
+                    for key, value in entry_data["data"].items():
+                        if hasattr(value, "__dict__"):
+                            entry_data["data"][key] = value.__dict__.copy()
+                    new_entries.append(entry_data)
+
+                reprtraceback["reprentries"] = new_entries
+                return reprtraceback, reprcrash
+
+            # Handle main traceback
+            reprtraceback, reprcrash = serialize_traceback(rep.longrepr.reprtraceback)
+            
+            # Handle chained tracebacks
+            chain = []
+            if hasattr(rep.longrepr, 'chain'):
+                for excinfo in rep.longrepr.chain:
+                    tb, crash = serialize_traceback(excinfo[0].reprtraceback)
+                    chain.append({
+                        'reprtraceback': tb,
+                        'reprcrash': crash,
+                        'header': excinfo[1],
+                    })
 
             return {
                 "reprcrash": reprcrash,
                 "reprtraceback": reprtraceback,
                 "sections": rep.longrepr.sections,
+                "chain": chain,
             }
 
         d = self.__dict__.copy()
@@ -250,11 +267,52 @@ class BaseReport:
                     unserialized_entries.append(reprentry)
                 reprtraceback["reprentries"] = unserialized_entries
 
+                def deserialize_traceback(tb_dict, crash_dict):
+                    unserialized_entries = []
+                    for entry_data in tb_dict["reprentries"]:
+                        data = entry_data["data"]
+                        entry_type = entry_data["type"]
+                        if entry_type == "ReprEntry":
+                            reprfuncargs = None
+                            reprfileloc = None
+                            reprlocals = None
+                            if data["reprfuncargs"]:
+                                reprfuncargs = ReprFuncArgs(**data["reprfuncargs"])
+                            if data["reprfileloc"]:
+                                reprfileloc = ReprFileLocation(**data["reprfileloc"])
+                            if data["reprlocals"]:
+                                reprlocals = ReprLocals(data["reprlocals"]["lines"])
+
+                            reprentry = ReprEntry(
+                                lines=data["lines"],
+                                reprfuncargs=reprfuncargs,
+                                reprlocals=reprlocals,
+                                filelocrepr=reprfileloc,
+                                style=data["style"],
+                            )
+                        elif entry_type == "ReprEntryNative":
+                            reprentry = ReprEntryNative(data["lines"])
+                        else:
+                            _report_unserialization_failure(entry_type, cls, reportdict)
+                        unserialized_entries.append(reprentry)
+                    tb_dict["reprentries"] = unserialized_entries
+                    return ReprTraceback(**tb_dict), ReprFileLocation(**crash_dict)
+
+                # Deserialize main exception
+                main_tb, main_crash = deserialize_traceback(reprtraceback, reprcrash)
                 exception_info = ReprExceptionInfo(
-                    reprtraceback=ReprTraceback(**reprtraceback),
-                    reprcrash=ReprFileLocation(**reprcrash),
+                    reprtraceback=main_tb,
+                    reprcrash=main_crash,
                 )
 
+                # Deserialize chained exceptions
+                if "chain" in reportdict["longrepr"]:
+                    chain = []
+                    for item in reportdict["longrepr"]["chain"]:
+                        tb, crash = deserialize_traceback(item["reprtraceback"], item["reprcrash"])
+                        chain.append((ReprExceptionInfo(reprtraceback=tb, reprcrash=crash), item["header"]))
+                    exception_info.chain = chain
+
                 for section in reportdict["longrepr"]["sections"]:
                     exception_info.addsection(*section)
                 reportdict["longrepr"] = exception_info
