{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..aa532df 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -748,6 +748,40 @@ class AssertionRewriter(ast.NodeVisitor):\n         \"\"\"Call saferepr on the expression.\"\"\"\n         return self.helper(\"_saferepr\", expr)\n \n+    def handle_all_any(self, call):\n+        \"\"\"Handle special cases for `all` and `any` calls.\"\"\"\n+        if not (isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}):\n+            return None\n+\n+        func_name = call.func.id\n+        iterator = call.args[0]\n+        if not isinstance(iterator, (ast.GeneratorExp, ast.ListComp, ast.SetComp, ast.DictComp)):\n+            return None\n+\n+        elements = list(iterator.elt if isinstance(iterator, ast.GeneratorExp) else iterator.elts)\n+        if not elements:\n+            return None\n+\n+        res_var = self.variable()\n+        res_list = self.assign(ast.List([], ast.Load()))\n+        self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], res_list))\n+\n+        for element in elements:\n+            res, expl = self.visit(element)\n+            self.statements.append(self.helper(\"_append\", ast.Name(res_var, ast.Load()), res))\n+\n+        result_expr = ast.Call(\n+            func=ast.Name(func_name, ast.Load()),\n+            args=[ast.Name(res_var, ast.Load())],\n+            keywords=[]\n+        )\n+        res = self.assign(result_expr)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s(%s)\\n}\" % (res_expl, res_expl, func_name, res_var)\n+        return res, outer_expl\n+        \"\"\"Call saferepr on the expression.\"\"\"\n+        return self.helper(\"_saferepr\", expr)\n+\n     def helper(self, name, *args):\n         \"\"\"Call a helper in this module.\"\"\"\n         py_name = ast.Name(\"@pytest_ar\", ast.Load())\n@@ -1081,4 +1115,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n+    def handle_all_any(self, call):\n+        if not (isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}):\n+            return None\n+        func_name = call.func.id\n+        iterator = call.args[0]\n+        if not isinstance(iterator, (ast.GeneratorExp, ast.ListComp, ast.SetComp, ast.DictComp)):\n+            return None\n+        elements = list(iterator.elt if isinstance(iterator, ast.GeneratorExp) else iterator.elts)\n+        if not elements:\n+            return None\n+        res_var = self.variable()\n+        res_list = self.assign(ast.List([], ast.Load()))\n+        self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], res_list))\n+        for element in elements:\n+            res, expl = self.visit(element)\n+            self.statements.append(self.helper('_append', ast.Name(res_var, ast.Load()), res))\n+        result_expr = ast.Call(func=ast.Name(func_name, ast.Load()), args=[ast.Name(res_var, ast.Load())], keywords=[])\n+        res = self.assign(result_expr)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s(%s)\\n}' % (res_expl, res_expl, func_name, res_var)\n+        return (res, outer_expl)\n+        return self.helper('_saferepr', expr)", "normalized_occurrence": 1}
