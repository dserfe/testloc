{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex af2cb89..be0f411 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -1532,7 +1532,11 @@ class PandasMultiIndexingAdapter(PandasIndexingAdapter):\n \n     def __array__(self, dtype: DTypeLike = None) -> np.ndarray:\n         if self.level is not None:\n-            return self.array.get_level_values(self.level).values\n+            values = self.array.get_level_values(self.level).values\n+            # Preserve the original dtype if none is specified\n+            if dtype is None and hasattr(self, 'dtype'):\n+                dtype = self.dtype\n+            return np.asarray(values, dtype=dtype)\n         else:\n             return super().__array__(dtype)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex c71b9ff..aeae2a1 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -762,7 +762,10 @@ class PandasMultiIndexingAdapter(PandasIndexingAdapter):\n         self.level = level\n     def __array__(self, dtype: DTypeLike=None) -> np.ndarray:\n         if self.level is not None:\n-            return self.array.get_level_values(self.level).values\n+            values = self.array.get_level_values(self.level).values\n+            if dtype is None and hasattr(self, 'dtype'):\n+                dtype = self.dtype\n+            return np.asarray(values, dtype=dtype)\n         else:\n             return super().__array__(dtype)\n     def _convert_scalar(self, item):\n", "normalized_occurrence": 1}
