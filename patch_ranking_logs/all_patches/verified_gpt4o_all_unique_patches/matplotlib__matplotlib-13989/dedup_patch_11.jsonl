{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-13989", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 6b68737..8719dfa 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6673,7 +6673,7 @@ optional.\n         # If bins are not specified either explicitly or via range,\n         # we need to figure out the range required for all datasets,\n         # and supply that to np.histogram.\n-        if not input_empty and len(x) > 1:\n+        if bin_range is None and not input_empty and len(x) > 1:\n             if weights is not None:\n                 _w = np.concatenate(w)\n             else:\n@@ -6681,8 +6681,7 @@ optional.\n \n             bins = histogram_bin_edges(np.concatenate(x),\n                                        bins, bin_range, _w)\n-        else:\n-            hist_kwargs['range'] = bin_range\n+        hist_kwargs['range'] = bin_range\n \n         density = bool(density) or bool(normed)\n         if density and not stacked:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 6343f7e..8ccfc00 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2022,14 +2022,13 @@ class Axes(_AxesBase):\n                     xmax = max(xmax, np.nanmax(xi))\n             if not np.isnan([xmin, xmax]).any() and (not xmin > xmax):\n                 bin_range = (xmin, xmax)\n-        if not input_empty and len(x) > 1:\n+        if bin_range is None and (not input_empty) and (len(x) > 1):\n             if weights is not None:\n                 _w = np.concatenate(w)\n             else:\n                 _w = None\n             bins = histogram_bin_edges(np.concatenate(x), bins, bin_range, _w)\n-        else:\n-            hist_kwargs['range'] = bin_range\n+        hist_kwargs['range'] = bin_range\n         density = bool(density) or bool(normed)\n         if density and (not stacked):\n             hist_kwargs = dict(density=density)\n", "normalized_occurrence": 1}
