{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20322", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 3bfc4b1..9dd0b1c 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -477,7 +477,14 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n \n     try:\n         a = a.replace('\\n', '')\n+        if evaluate is False:\n+            # When evaluate=False, ensure the expression is parsed without any automatic simplification\n+            from sympy.parsing.sympy_parser import _token_splittable\n+            _token_splittable.extend(['ceiling'])  # Ensure ceiling is preserved as-is\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if evaluate is False:\n+            # Remove ceiling from token_splittable to avoid affecting other parsing\n+            _token_splittable.remove('ceiling')\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex d4b8b6a..4d9a6d4 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -123,7 +123,12 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, eval\n         transformations += (t_convert_xor,)\n     try:\n         a = a.replace('\\n', '')\n+        if evaluate is False:\n+            from sympy.parsing.sympy_parser import _token_splittable\n+            _token_splittable.extend(['ceiling'])\n         expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n+        if evaluate is False:\n+            _token_splittable.remove('ceiling')\n     except (TokenError, SyntaxError) as exc:\n         raise SympifyError('could not parse %r' % a, exc)\n     return expr\n", "normalized_occurrence": 1}
