{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..0e97437 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -60,10 +60,23 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n \n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            obj = self.create(connector=self.OR)\n+            obj.add(self, self.OR)\n+            obj.add(other, self.OR)\n+            count = len([child for child in obj.children if not isinstance(child, tuple) or child[1]])\n+            if count % 2 == 1:\n+                return obj\n+            else:\n+                negated_obj = self.create(connector=self.AND, negated=True)\n+                negated_obj.add(self, self.AND)\n+                negated_obj.add(other, self.AND)\n+                return negated_obj\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n \n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..2971c10 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,10 +27,23 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            obj = self.create(connector=self.OR)\n+            obj.add(self, self.OR)\n+            obj.add(other, self.OR)\n+            count = len([child for child in obj.children if not isinstance(child, tuple) or child[1]])\n+            if count % 2 == 1:\n+                return obj\n+            else:\n+                negated_obj = self.create(connector=self.AND, negated=True)\n+                negated_obj.add(self, self.AND)\n+                negated_obj.add(other, self.AND)\n+                return negated_obj\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n", "normalized_occurrence": 1}
