{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..1dfa9f6 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,11 +356,25 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n-    return normalize_mark_list(mark_list)\n+    \"\"\"Obtain the unpacked marks that are stored on an object.\n+    \n+    For classes, considers marks from all base classes in the MRO chain.\n+    \"\"\"\n+    if inspect.isclass(obj):\n+        # For classes, collect marks from all bases in MRO\n+        mark_lists = []\n+        for cls in [obj] + list(obj.__mro__[1:]):\n+            marks = getattr(cls, \"pytestmark\", [])\n+            if not isinstance(marks, list):\n+                marks = [marks]\n+            mark_lists.extend(marks)\n+        return normalize_mark_list(mark_lists)\n+    else:\n+        # For non-class objects, keep original behavior\n+        mark_list = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        return normalize_mark_list(mark_list)\n \n \n def normalize_mark_list(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..5f3ee68 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,10 +161,19 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n-    return normalize_mark_list(mark_list)\n+    if inspect.isclass(obj):\n+        mark_lists = []\n+        for cls in [obj] + list(obj.__mro__[1:]):\n+            marks = getattr(cls, 'pytestmark', [])\n+            if not isinstance(marks, list):\n+                marks = [marks]\n+            mark_lists.extend(marks)\n+        return normalize_mark_list(mark_lists)\n+    else:\n+        mark_list = getattr(obj, 'pytestmark', [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        return normalize_mark_list(mark_list)\n def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iterable[Mark]:\n     for mark in mark_list:\n         mark_obj = getattr(mark, 'mark', mark)\n", "normalized_occurrence": 1}
