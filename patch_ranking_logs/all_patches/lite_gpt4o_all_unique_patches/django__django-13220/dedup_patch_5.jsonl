{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..21bb596 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,16 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        return (\n+            hasattr(self, 'error_dict') == hasattr(other, 'error_dict') and\n+            hasattr(self, 'error_list') == hasattr(other, 'error_list') and\n+            (not hasattr(self, 'error_dict') or self.error_dict == other.error_dict) and\n+            (not hasattr(self, 'error_list') or sorted(self.error_list, key=str) == sorted(other.error_list, key=str))\n+        )\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +200,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        return hasattr(self, 'error_dict') == hasattr(other, 'error_dict') and hasattr(self, 'error_list') == hasattr(other, 'error_list') and (not hasattr(self, 'error_dict') or self.error_dict == other.error_dict) and (not hasattr(self, 'error_list') or sorted(self.error_list, key=str) == sorted(other.error_list, key=str))\n+", "normalized_occurrence": 1}
