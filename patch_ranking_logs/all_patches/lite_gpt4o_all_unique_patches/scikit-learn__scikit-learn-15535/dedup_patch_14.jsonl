{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex be26d08..576304f 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -459,8 +459,13 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n+            # if input is object and contains only strings, keep as object.\n+            if all(isinstance(x, str) for x in np.ravel(array)):\n+                dtype = None\n+            else:\n+                # if input is object and not all elements are strings,\n+                # convert to float.\n+                dtype = np.float64\n         else:\n             dtype = None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 8ce0584..87d4a1a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -137,7 +137,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             dtype_orig = np.result_type(*array.dtypes)\n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n-            dtype = np.float64\n+            if all((isinstance(x, str) for x in np.ravel(array))):\n+                dtype = None\n+            else:\n+                dtype = np.float64\n         else:\n             dtype = None\n     if isinstance(dtype, (list, tuple)):\n", "normalized_occurrence": 1}
