{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..04c2140 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -413,12 +413,14 @@ class SQLCompiler:\n             query.get_compiler(self.using, self.connection)\n             for query in self.query.combined_queries if not query.is_empty()\n         ]\n-        if not features.supports_slicing_ordering_in_compound:\n-            for query, compiler in zip(self.query.combined_queries, compilers):\n-                if query.low_mark or query.high_mark:\n-                    raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n-                if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+        for query, compiler in zip(self.query.combined_queries, compilers):\n+            if query.low_mark or query.high_mark:\n+                raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n+            if compiler.get_order_by():\n+                # Ensure all ORDER BY columns are in the select list\n+                extra_select = compiler.get_extra_select(compiler.get_order_by(), compiler.select)\n+                if extra_select:\n+                    compiler.query.add_select_col(compiler, extra_select)\n         parts = ()\n         for compiler in compilers:\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..0261a98 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -231,12 +231,13 @@ class SQLCompiler:\n     def get_combinator_sql(self, combinator, all):\n         features = self.connection.features\n         compilers = [query.get_compiler(self.using, self.connection) for query in self.query.combined_queries if not query.is_empty()]\n-        if not features.supports_slicing_ordering_in_compound:\n-            for query, compiler in zip(self.query.combined_queries, compilers):\n-                if query.low_mark or query.high_mark:\n-                    raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n-                if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n+        for query, compiler in zip(self.query.combined_queries, compilers):\n+            if query.low_mark or query.high_mark:\n+                raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n+            if compiler.get_order_by():\n+                extra_select = compiler.get_extra_select(compiler.get_order_by(), compiler.select)\n+                if extra_select:\n+                    compiler.query.add_select_col(compiler, extra_select)\n         parts = ()\n         for compiler in compilers:\n             try:\n", "normalized_occurrence": 1}
