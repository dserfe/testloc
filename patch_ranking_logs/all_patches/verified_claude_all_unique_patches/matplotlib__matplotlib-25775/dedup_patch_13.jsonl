{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..62e6634 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -183,6 +183,7 @@ class Text(Artist):\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None  # a FancyBboxPatch instance\n         self._renderer = None\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         if linespacing is None:\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n@@ -1317,6 +1318,21 @@ class Text(Artist):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text should be drawn with antialiased rendering.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n+\n     def set_fontname(self, fontname):\n         \"\"\"\n         Alias for `set_family`.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..ba5a6a2 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -61,6 +61,7 @@ class Text(Artist):\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None\n         self._renderer = None\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         if linespacing is None:\n             linespacing = 1.2\n         self.set_linespacing(linespacing)\n@@ -546,6 +547,11 @@ class Text(Artist):\n         self._parse_math = bool(parse_math)\n     def get_parse_math(self):\n         return self._parse_math\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n     def set_fontname(self, fontname):\n         return self.set_family(fontname)\n class OffsetFrom:\n", "normalized_occurrence": 1}
