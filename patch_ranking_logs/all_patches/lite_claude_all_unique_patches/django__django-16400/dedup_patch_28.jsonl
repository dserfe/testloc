{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex c21d9d7..f2b7478 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -60,8 +60,8 @@ def create_permissions(\n     app_label = app_config.label\n     try:\n         app_config = apps.get_app_config(app_label)\n-        ContentType = apps.get_model(\"contenttypes\", \"ContentType\")\n-        Permission = apps.get_model(\"auth\", \"Permission\")\n+        ContentType = apps.get_model(\"contenttypes\", \"ContentType\").objects.using(using)\n+        Permission = apps.get_model(\"auth\", \"Permission\").objects.using(using)\n     except LookupError:\n         return\n \n@@ -76,7 +76,7 @@ def create_permissions(\n     for klass in app_config.get_models():\n         # Force looking up the content types in the current database\n         # before creating foreign keys to them.\n-        ctype = ContentType.objects.db_manager(using).get_for_model(\n+        ctype = ContentType.get_for_model(\n             klass, for_concrete_model=False\n         )\n \n@@ -88,8 +88,7 @@ def create_permissions(\n     # looking for.  We don't need to check for codenames since we already have\n     # a list of the ones we're going to create.\n     all_perms = set(\n-        Permission.objects.using(using)\n-        .filter(\n+        Permission.filter(\n             content_type__in=ctypes,\n         )\n         .values_list(\"content_type\", \"codename\")\n@@ -100,7 +99,7 @@ def create_permissions(\n         for ct, (codename, name) in searched_perms\n         if (ct.pk, codename) not in all_perms\n     ]\n-    Permission.objects.using(using).bulk_create(perms)\n+    Permission.bulk_create(perms)\n     if verbosity >= 2:\n         for perm in perms:\n             print(\"Adding permission '%s'\" % perm)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex eb43af8..6d08bdb 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -19,8 +19,8 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_\n     app_label = app_config.label\n     try:\n         app_config = apps.get_app_config(app_label)\n-        ContentType = apps.get_model('contenttypes', 'ContentType')\n-        Permission = apps.get_model('auth', 'Permission')\n+        ContentType = apps.get_model('contenttypes', 'ContentType').objects.using(using)\n+        Permission = apps.get_model('auth', 'Permission').objects.using(using)\n     except LookupError:\n         return\n     if not router.allow_migrate_model(using, Permission):\n@@ -28,13 +28,13 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_\n     searched_perms = []\n     ctypes = set()\n     for klass in app_config.get_models():\n-        ctype = ContentType.objects.db_manager(using).get_for_model(klass, for_concrete_model=False)\n+        ctype = ContentType.get_for_model(klass, for_concrete_model=False)\n         ctypes.add(ctype)\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n-    all_perms = set(Permission.objects.using(using).filter(content_type__in=ctypes).values_list('content_type', 'codename'))\n+    all_perms = set(Permission.filter(content_type__in=ctypes).values_list('content_type', 'codename'))\n     perms = [Permission(codename=codename, name=name, content_type=ct) for ct, (codename, name) in searched_perms if (ct.pk, codename) not in all_perms]\n-    Permission.objects.using(using).bulk_create(perms)\n+    Permission.bulk_create(perms)\n     if verbosity >= 2:\n         for perm in perms:\n             print(\"Adding permission '%s'\" % perm)\n", "normalized_occurrence": 1}
