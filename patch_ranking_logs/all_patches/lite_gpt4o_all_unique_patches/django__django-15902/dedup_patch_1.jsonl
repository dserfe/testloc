{"model_name_or_path": "agentless", "instance_id": "django__django-15902", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex de2af81..0628a70 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -144,6 +144,8 @@ class BaseFormSet(RenderableFormMixin):\n     @cached_property\n     def management_form(self):\n         \"\"\"Return the ManagementForm instance for this FormSet.\"\"\"\n+        template_name_backup = self.renderer.form_template_name\n+        self.renderer.form_template_name = None  # Temporarily remove form template name to avoid deprecation warning\n         if self.is_bound:\n             form = ManagementForm(\n                 self.data,\n@@ -164,6 +166,7 @@ class BaseFormSet(RenderableFormMixin):\n                 },\n                 renderer=self.renderer,\n             )\n+        self.renderer.form_template_name = template_name_backup  # Restore the original form template name\n         return form\n \n     def total_form_count(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 93e6290..6d9d929 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -67,11 +67,14 @@ class BaseFormSet(RenderableFormMixin):\n         return '<%s: bound=%s valid=%s total_forms=%s>' % (self.__class__.__qualname__, self.is_bound, is_valid, self.total_form_count())\n     @cached_property\n     def management_form(self):\n+        template_name_backup = self.renderer.form_template_name\n+        self.renderer.form_template_name = None\n         if self.is_bound:\n             form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix, renderer=self.renderer)\n             form.full_clean()\n         else:\n             form = ManagementForm(auto_id=self.auto_id, prefix=self.prefix, initial={TOTAL_FORM_COUNT: self.total_form_count(), INITIAL_FORM_COUNT: self.initial_form_count(), MIN_NUM_FORM_COUNT: self.min_num, MAX_NUM_FORM_COUNT: self.max_num}, renderer=self.renderer)\n+        self.renderer.form_template_name = template_name_backup\n         return form\n     def total_form_count(self):\n         if self.is_bound:\n", "normalized_occurrence": 1}
