{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..a88b721 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -870,6 +870,15 @@ class For(Token):\n \n \n class String(Token):\n+    @property\n+    def args(self):\n+        return (self.text,)\n+\n+    @classmethod\n+    def from_args(cls, *args):\n+        if len(args) != 1:\n+            raise ValueError(f\"Expected 1 argument, got {len(args)}\")\n+        return cls(*args)\n     \"\"\" SymPy object representing a string.\n \n     Atomic object which is not an expression (as opposed to Symbol).\n", "occurrence": 1, "normalized_patch": "--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n-    \"\"\" SymPy object representing a string.\n-    Atomic object which is not an expression (as opposed to Symbol).\n-\n-    Parameters\n-    ==========\n-\n-    text : str\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.codegen.ast import String\n-    >>> f = String('foo')\n-    >>> f\n-    foo\n-    >>> str(f)\n-    'foo'\n-    >>> f.text\n-    'foo'\n-    >>> print(repr(f))\n-    String('foo')\n+    @property\n+    def args(self):\n+        return (self.text,)\n-    \"\"\"\n+    @classmethod\n+    def from_args(cls, *args):\n+        if len(args) != 1:\n+            raise ValueError(f'Expected 1 argument, got {len(args)}')\n+        return cls(*args)\n+    \" SymPy object representing a string.\\n\\n    Atomic object which is not an expression (as opposed to Symbol).\\n\\n    Parameters\\n    ==========\\n\\n    text : str\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.codegen.ast import String\\n    >>> f = String('foo')\\n    >>> f\\n    foo\\n    >>> str(f)\\n    'foo'\\n    >>> f.text\\n    'foo'\\n    >>> print(repr(f))\\n    String('foo')\\n\\n    \"", "normalized_occurrence": 1}
