{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..a790ef9 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -132,6 +132,14 @@ class Set(Basic, EvalfMixin):\n         EmptySet\n \n         \"\"\"\n+        if isinstance(other, Reals):\n+            from sympy import I, Eq, solve\n+            real_parts = []\n+            for expr in self.args[0].args:\n+                if expr.has(I):\n+                    real_part = solve(Eq(expr.as_real_imag()[1], 0))\n+                    real_parts.extend(real_part)\n+            return FiniteSet(*real_parts).intersect(other)\n         return Intersection(self, other)\n \n     def intersection(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..248466f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -54,6 +54,14 @@ class Set(Basic, EvalfMixin):\n     def union(self, other):\n         return Union(self, other)\n     def intersect(self, other):\n+        if isinstance(other, Reals):\n+            from sympy import I, Eq, solve\n+            real_parts = []\n+            for expr in self.args[0].args:\n+                if expr.has(I):\n+                    real_part = solve(Eq(expr.as_real_imag()[1], 0))\n+                    real_parts.extend(real_part)\n+            return FiniteSet(*real_parts).intersect(other)\n         return Intersection(self, other)\n     def intersection(self, other):\n         return self.intersect(other)\n", "normalized_occurrence": 1}
