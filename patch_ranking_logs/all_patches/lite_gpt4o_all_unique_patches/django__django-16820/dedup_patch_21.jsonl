{"model_name_or_path": "agentless", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex cffcd20..3e85c19 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -636,16 +636,39 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n         super().__init__(name, unique_together)\n \n \n-class AlterIndexTogether(AlterTogetherOptionOperation):\n-    \"\"\"\n-    Change the value of index_together to the target one.\n-    Input value of index_together must be a set of tuples.\n-    \"\"\"\n-\n+# RemovedInDjango51Warning: Remove this operation.\n+class AlterIndexTogether(Operation):\n     option_name = \"index_together\"\n \n     def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+        self.name = name\n+        self.index_together = index_together\n+\n+    def state_forwards(self, app_label, state):\n+        state.alter_index_together(app_label, self.name, self.index_together)\n+\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.alter_index_together(model, self.index_together)\n+\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.alter_index_together(model, self.index_together)\n+\n+    def describe(self):\n+        return \"Alter index together for %s\" % (self.name, )\n+\n+    def deconstruct(self):\n+        return (\n+            self.__class__.__name__,\n+            [],\n+            {\n+                'name': self.name,\n+                'index_together': self.index_together,\n+            },\n+        )\n \n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 064ae1a..88ab69c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -274,10 +274,25 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     option_name = 'unique_together'\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n-class AlterIndexTogether(AlterTogetherOptionOperation):\n+class AlterIndexTogether(Operation):\n     option_name = 'index_together'\n     def __init__(self, name, index_together):\n-        super().__init__(name, index_together)\n+        self.name = name\n+        self.index_together = index_together\n+    def state_forwards(self, app_label, state):\n+        state.alter_index_together(app_label, self.name, self.index_together)\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.alter_index_together(model, self.index_together)\n+    def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, model):\n+            schema_editor.alter_index_together(model, self.index_together)\n+    def describe(self):\n+        return 'Alter index together for %s' % (self.name,)\n+    def deconstruct(self):\n+        return (self.__class__.__name__, [], {'name': self.name, 'index_together': self.index_together})\n class AlterOrderWithRespectTo(ModelOptionOperation):\n     option_name = 'order_with_respect_to'\n     def __init__(self, name, order_with_respect_to):\n", "normalized_occurrence": 1}
