{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..a6affed 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -854,6 +854,16 @@ class MigrationAutodetector:\n         # Fields that are foreignkeys/m2ms depend on stuff\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n+            # Check if this field is replacing a UUIDField\n+            old_field = None\n+            if (app_label, model_name, field_name) in self.old_field_keys:\n+                try:\n+                    old_model = self.old_apps.get_model(app_label, model_name)\n+                    old_field = old_model._meta.get_field(field_name)\n+                except:\n+                    pass\n+            \n+            # Always add dependencies for FK fields, whether they're new or converted from UUID\n             dependencies.extend(self._get_dependencies_for_foreign_key(field))\n         # You can't just add NOT NULL fields with no default or fields\n         # which don't allow empty strings as default.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..b6ad9b9 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -414,6 +414,13 @@ class MigrationAutodetector:\n         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n+            old_field = None\n+            if (app_label, model_name, field_name) in self.old_field_keys:\n+                try:\n+                    old_model = self.old_apps.get_model(app_label, model_name)\n+                    old_field = old_model._meta.get_field(field_name)\n+                except:\n+                    pass\n             dependencies.extend(self._get_dependencies_for_foreign_key(field))\n         time_fields = (models.DateField, models.DateTimeField, models.TimeField)\n         preserve_default = field.null or field.has_default() or field.many_to_many or (field.blank and field.empty_strings_allowed) or (isinstance(field, time_fields) and field.auto_now)\n", "normalized_occurrence": 1}
