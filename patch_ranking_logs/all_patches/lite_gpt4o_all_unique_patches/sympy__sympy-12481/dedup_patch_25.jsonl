{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..f56e11f 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,12 +895,16 @@ class Permutation(Basic):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if is_cycle and has_dups(temp):\n+            # combine non-disjoint cycles in left-to-right order\n+            combined_cycle = []\n+            seen = set()\n+            for cycle in args:\n+                for elem in cycle:\n+                    if elem not in seen:\n+                        combined_cycle.append(elem)\n+                        seen.add(elem)\n+            args = [combined_cycle]\n         temp = set(temp)\n \n         if not is_cycle and \\\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..e549acb 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -194,11 +194,15 @@ class Permutation(Basic):\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if is_cycle and has_dups(temp):\n+            combined_cycle = []\n+            seen = set()\n+            for cycle in args:\n+                for elem in cycle:\n+                    if elem not in seen:\n+                        combined_cycle.append(elem)\n+                        seen.add(elem)\n+            args = [combined_cycle]\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n", "normalized_occurrence": 1}
