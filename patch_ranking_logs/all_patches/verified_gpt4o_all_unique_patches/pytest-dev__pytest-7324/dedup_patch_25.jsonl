{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..bd6db6c 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -116,14 +116,20 @@ class pytestPDB:\n             modname, classname = usepdb_cls\n \n             try:\n-                __import__(modname)\n-                mod = sys.modules[modname]\n-\n-                # Handle --pdbcls=pdb:pdb.Pdb (useful e.g. with pdbpp).\n-                parts = classname.split(\".\")\n-                pdb_cls = getattr(mod, parts[0])\n-                for part in parts[1:]:\n-                    pdb_cls = getattr(pdb_cls, part)\n+                # Sanitize inputs before using them to prevent assertion failures\n+                if modname not in {\"None\", \"True\", \"False\"}:\n+                    __import__(modname)\n+                    mod = sys.modules[modname]\n+\n+                    # Handle --pdbcls=pdb:pdb.Pdb (useful e.g. with pdbpp).\n+                    parts = classname.split(\".\")\n+                    pdb_cls = getattr(mod, parts[0])\n+                    for part in parts[1:]:\n+                        pdb_cls = getattr(pdb_cls, part)\n+                else:\n+                    raise UsageError(\n+                        \"--pdbcls: invalid module name {!r}\".format(modname)\n+                    )\n             except Exception as exc:\n                 value = \":\".join((modname, classname))\n                 raise UsageError(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..c59d065 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -63,12 +63,15 @@ class pytestPDB:\n         if usepdb_cls:\n             modname, classname = usepdb_cls\n             try:\n-                __import__(modname)\n-                mod = sys.modules[modname]\n-                parts = classname.split('.')\n-                pdb_cls = getattr(mod, parts[0])\n-                for part in parts[1:]:\n-                    pdb_cls = getattr(pdb_cls, part)\n+                if modname not in {'None', 'True', 'False'}:\n+                    __import__(modname)\n+                    mod = sys.modules[modname]\n+                    parts = classname.split('.')\n+                    pdb_cls = getattr(mod, parts[0])\n+                    for part in parts[1:]:\n+                        pdb_cls = getattr(pdb_cls, part)\n+                else:\n+                    raise UsageError('--pdbcls: invalid module name {!r}'.format(modname))\n             except Exception as exc:\n                 value = ':'.join((modname, classname))\n                 raise UsageError('--pdbcls: could not import {!r}: {}'.format(value, exc))\n", "normalized_occurrence": 1}
