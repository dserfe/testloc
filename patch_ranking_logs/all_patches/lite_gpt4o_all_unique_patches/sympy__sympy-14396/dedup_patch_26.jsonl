{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..d2d1da5 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -403,6 +403,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     after = ['gens']\n \n     _re_realfield = re.compile(r\"^(R|RR)(_(\\d+))?$\")\n+    _re_composite_realfield = re.compile(r\"^(R|RR)\\[(.+)\\]$\")\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n@@ -435,6 +436,12 @@ class Domain(with_metaclass(OptionType, Option)):\n                 else:\n                     return sympy.polys.domains.RealField(int(prec))\n \n+            r = cls._re_composite_realfield.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+\n             r = cls._re_complexfield.match(domain)\n \n             if r is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..082bfda 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -229,6 +229,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     excludes = ['field', 'greedy', 'split', 'gaussian', 'extension']\n     after = ['gens']\n     _re_realfield = re.compile('^(R|RR)(_(\\\\d+))?$')\n+    _re_composite_realfield = re.compile('^(R|RR)\\\\[(.+)\\\\]$')\n     _re_complexfield = re.compile('^(C|CC)(_(\\\\d+))?$')\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n@@ -254,6 +255,10 @@ class Domain(with_metaclass(OptionType, Option)):\n                     return sympy.polys.domains.RR\n                 else:\n                     return sympy.polys.domains.RealField(int(prec))\n+            r = cls._re_composite_realfield.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n             r = cls._re_complexfield.match(domain)\n             if r is not None:\n                 _, _, prec = r.groups()\n", "normalized_occurrence": 1}
