{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..e734469 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -456,6 +456,18 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n+\n+        # Ensure the order by columns are correctly referenced\n+        if self.query.order_by:\n+            order_by_sql, order_by_params, _ = self.get_order_by()\n+            if order_by_sql:\n+                result = [' {} '.format(combinator_sql).join(sql_parts), 'ORDER BY {}'.format(', '.join(order_by_sql))]\n+                params = []\n+                for part in args_parts:\n+                    params.extend(part)\n+                params.extend(order_by_params)\n+                return result, params\n+\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n         for part in args_parts:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..e93abf7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -261,6 +261,15 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n+        if self.query.order_by:\n+            order_by_sql, order_by_params, _ = self.get_order_by()\n+            if order_by_sql:\n+                result = [' {} '.format(combinator_sql).join(sql_parts), 'ORDER BY {}'.format(', '.join(order_by_sql))]\n+                params = []\n+                for part in args_parts:\n+                    params.extend(part)\n+                params.extend(order_by_params)\n+                return (result, params)\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n         for part in args_parts:\n", "normalized_occurrence": 1}
