{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..8af71ae 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -128,12 +128,15 @@ class SQLCompiler:\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n+        # Use qualified names to avoid ambiguity in GROUP BY clause\n         result = []\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n \n         for expr in expressions:\n             sql, params = self.compile(expr)\n+            if expr.contains_aggregate and hasattr(expr, 'alias'):\n+                sql = expr.alias\n             params_hash = make_hashable(params)\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..f0c2c7f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -65,6 +65,8 @@ class SQLCompiler:\n         expressions = self.collapse_group_by(expressions, having_group_by)\n         for expr in expressions:\n             sql, params = self.compile(expr)\n+            if expr.contains_aggregate and hasattr(expr, 'alias'):\n+                sql = expr.alias\n             params_hash = make_hashable(params)\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n", "normalized_occurrence": 1}
