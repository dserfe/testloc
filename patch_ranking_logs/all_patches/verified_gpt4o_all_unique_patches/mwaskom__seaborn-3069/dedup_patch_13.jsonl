{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/categorical.py b/seaborn/categorical.py\nindex ec4f4c2..0489c91 100644\n--- a/seaborn/categorical.py\n+++ b/seaborn/categorical.py\n@@ -198,10 +198,10 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         # But two reasons not to do that:\n         # - If it happens before plotting, autoscaling messes up the plot limits\n         # - It would change existing plots from other seaborn functions\n-        if self.var_types[axis] != \"categorical\":\n+        if self.var_types[axis] not in [\"categorical\", \"Nominal\"]:\n             return\n \n-        # If both x/y data are empty, the correct way to set up the plot is\n+        # If both x/y data are empty or axis is Nominal, the correct way to set up the plot is\n         # somewhat undefined; because we don't add null category data to the plot in\n         # this case we don't *have* a categorical axis (yet), so best to just bail.\n         if self.plot_data[axis].empty:\n@@ -215,7 +215,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         # the state from previous categorical calls (see GH2516 for context)\n         n = len(getattr(ax, f\"get_{axis}ticks\")())\n \n-        if axis == \"x\":\n+        if axis == \"x\" or self.var_types[axis] == \"Nominal\":\n             ax.xaxis.grid(False)\n             ax.set_xlim(-.5, n - .5, auto=None)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/categorical.py b/seaborn/categorical.py\nindex 7d6d43d..2a1431e 100644\n--- a/seaborn/categorical.py\n+++ b/seaborn/categorical.py\n@@ -94,12 +94,12 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         lum = min(light_vals) * 0.6\n         return (lum, lum, lum)\n     def _adjust_cat_axis(self, ax, axis):\n-        if self.var_types[axis] != 'categorical':\n+        if self.var_types[axis] not in ['categorical', 'Nominal']:\n             return\n         if self.plot_data[axis].empty:\n             return\n         n = len(getattr(ax, f'get_{axis}ticks')())\n-        if axis == 'x':\n+        if axis == 'x' or self.var_types[axis] == 'Nominal':\n             ax.xaxis.grid(False)\n             ax.set_xlim(-0.5, n - 0.5, auto=None)\n         else:\n", "normalized_occurrence": 1}
