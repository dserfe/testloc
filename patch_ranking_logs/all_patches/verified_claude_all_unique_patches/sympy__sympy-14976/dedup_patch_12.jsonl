{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14976", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..3d0ea96 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -398,8 +398,12 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n+            # Ensure full precision for rationals when using mpmath\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True,\n+                              'rational_conversion': 'mpmath'}\n         elif _module_present('numpy', namespaces):\n             from sympy.printing.pycode import NumPyPrinter as Printer\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True}\n         elif _module_present('numexpr', namespaces):\n             from sympy.printing.lambdarepr import NumExprPrinter as Printer\n         elif _module_present('tensorflow', namespaces):\n@@ -413,8 +417,10 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n             if isinstance(m, dict):\n                 for k in m:\n                     user_functions[k] = k\n-        printer = Printer({'fully_qualified_modules': False, 'inline': True,\n-                           'user_functions': user_functions})\n+        if not 'printer_settings' in locals():\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True}\n+        printer_settings['user_functions'] = user_functions\n+        printer = Printer(printer_settings)\n \n     # Get the names of the args, for creating a docstring\n     if not iterable(args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..ddc3661 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -88,8 +88,10 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True, 'rational_conversion': 'mpmath'}\n         elif _module_present('numpy', namespaces):\n             from sympy.printing.pycode import NumPyPrinter as Printer\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True}\n         elif _module_present('numexpr', namespaces):\n             from sympy.printing.lambdarepr import NumExprPrinter as Printer\n         elif _module_present('tensorflow', namespaces):\n@@ -103,7 +105,10 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n             if isinstance(m, dict):\n                 for k in m:\n                     user_functions[k] = k\n-        printer = Printer({'fully_qualified_modules': False, 'inline': True, 'user_functions': user_functions})\n+        if not 'printer_settings' in locals():\n+            printer_settings = {'fully_qualified_modules': False, 'inline': True}\n+        printer_settings['user_functions'] = user_functions\n+        printer = Printer(printer_settings)\n     if not iterable(args):\n         args = (args,)\n     names = []\n", "normalized_occurrence": 1}
