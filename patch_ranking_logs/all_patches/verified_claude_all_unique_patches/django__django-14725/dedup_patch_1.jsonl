{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 920d2a8..a1be140 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -77,6 +77,7 @@ class BaseFormSet(RenderableFormMixin):\n         self.error_class = error_class\n         self._errors = None\n         self._non_form_errors = None\n+        self.can_add = getattr(self, 'can_add', True)\n \n         messages = {}\n         for cls in reversed(type(self).__mro__):\n@@ -388,6 +389,11 @@ class BaseFormSet(RenderableFormMixin):\n                 continue\n             self._errors.append(form_errors)\n         try:\n+            if not self.can_add and self.total_form_count() > self.initial_form_count():\n+                raise ValidationError(\n+                    \"Adding new forms is not allowed.\",\n+                    code='no_new_forms',\n+                )\n             if (self.validate_max and\n                     self.total_form_count() - len(self.deleted_forms) > self.max_num) or \\\n                     self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:\n@@ -476,7 +482,7 @@ class BaseFormSet(RenderableFormMixin):\n \n \n def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False,\n-                    can_delete=False, max_num=None, validate_max=False,\n+                    can_delete=False, can_add=True, max_num=None, validate_max=False,\n                     min_num=None, validate_min=False, absolute_max=None,\n                     can_delete_extra=True, renderer=None):\n     \"\"\"Return a FormSet for the given form class.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex f547482..b7a12ab 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -44,6 +44,7 @@ class BaseFormSet(RenderableFormMixin):\n         self.error_class = error_class\n         self._errors = None\n         self._non_form_errors = None\n+        self.can_add = getattr(self, 'can_add', True)\n         messages = {}\n         for cls in reversed(type(self).__mro__):\n             messages.update(getattr(cls, 'default_error_messages', {}))\n@@ -201,6 +202,8 @@ class BaseFormSet(RenderableFormMixin):\n                 continue\n             self._errors.append(form_errors)\n         try:\n+            if not self.can_add and self.total_form_count() > self.initial_form_count():\n+                raise ValidationError('Adding new forms is not allowed.', code='no_new_forms')\n             if self.validate_max and self.total_form_count() - len(self.deleted_forms) > self.max_num or self.management_form.cleaned_data[TOTAL_FORM_COUNT] > self.absolute_max:\n                 raise ValidationError(ngettext('Please submit at most %d form.', 'Please submit at most %d forms.', self.max_num) % self.max_num, code='too_many_forms')\n             if self.validate_min and self.total_form_count() - len(self.deleted_forms) - empty_forms_count < self.min_num:\n@@ -236,7 +239,7 @@ class BaseFormSet(RenderableFormMixin):\n             return self.empty_form.media\n     def get_context(self):\n         return {'formset': self}\n-def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None):\n+def formset_factory(form, formset=BaseFormSet, extra=1, can_order=False, can_delete=False, can_add=True, max_num=None, validate_max=False, min_num=None, validate_min=False, absolute_max=None, can_delete_extra=True, renderer=None):\n     if min_num is None:\n         min_num = DEFAULT_MIN_NUM\n     if max_num is None:\n", "normalized_occurrence": 1}
