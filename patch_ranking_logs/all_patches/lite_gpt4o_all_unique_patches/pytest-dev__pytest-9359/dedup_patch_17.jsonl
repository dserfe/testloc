{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..b73f135 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -709,12 +709,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n-        # Special case: for a decorated function, set the lineno to that of the\n-        # first decorator, not the `def`. Issue #4984.\n-        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n-            lineno = item.decorator_list[0].lineno\n-        else:\n-            lineno = item.lineno\n+        lineno = item.lineno\n         # Now actually insert the special imports.\n         if sys.version_info >= (3, 10):\n             aliases = [\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..b2f9ada 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -379,10 +379,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 break\n             pos += 1\n-        if isinstance(item, ast.FunctionDef) and item.decorator_list:\n-            lineno = item.decorator_list[0].lineno\n-        else:\n-            lineno = item.lineno\n+        lineno = item.lineno\n         if sys.version_info >= (3, 10):\n             aliases = [ast.alias('builtins', '@py_builtins', lineno=lineno, col_offset=0), ast.alias('_pytest.assertion.rewrite', '@pytest_ar', lineno=lineno, col_offset=0)]\n         else:\n", "normalized_occurrence": 2}
