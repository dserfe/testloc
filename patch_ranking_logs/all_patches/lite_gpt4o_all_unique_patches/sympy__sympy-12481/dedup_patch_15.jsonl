{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..7676272 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,13 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Resolve non-disjoint cycles by applying them in left-to-right order\n+                resolved_perm = list(range(max(temp) + 1))\n+                for cycle in args:\n+                    for i in range(len(cycle)):\n+                        resolved_perm[cycle[i]] = cycle[(i + 1) % len(cycle)]\n+                aform = resolved_perm\n+                is_cycle = False  # Treat resolved permutation as array form\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..e849281 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,7 +196,12 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                resolved_perm = list(range(max(temp) + 1))\n+                for cycle in args:\n+                    for i in range(len(cycle)):\n+                        resolved_perm[cycle[i]] = cycle[(i + 1) % len(cycle)]\n+                aform = resolved_perm\n+                is_cycle = False\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "normalized_occurrence": 1}
