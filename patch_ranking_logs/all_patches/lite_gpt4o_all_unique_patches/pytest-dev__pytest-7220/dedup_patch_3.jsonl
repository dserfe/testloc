{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..1106d19 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -218,7 +218,7 @@ class Node(metaclass=NodeMeta):\n         warnings.warn_explicit(\n             warning,\n             category=None,\n-            filename=str(path),\n+            filename=str(original_cwd.join(path)),\n             lineno=lineno + 1 if lineno is not None else None,\n         )\n \n@@ -361,11 +361,8 @@ class Node(metaclass=NodeMeta):\n         else:\n             truncate_locals = True\n \n-        try:\n-            os.getcwd()\n-            abspath = False\n-        except OSError:\n-            abspath = True\n+        original_cwd = self.config.invocation_dir\n+        abspath = False\n \n         return excinfo.getrepr(\n             funcargs=True,\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..a620e28 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -157,7 +157,7 @@ class Node(metaclass=NodeMeta):\n         if not isinstance(warning, PytestWarning):\n             raise ValueError('warning must be an instance of PytestWarning or subclass, got {!r}'.format(warning))\n         path, lineno = get_fslocation_from_item(self)\n-        warnings.warn_explicit(warning, category=None, filename=str(path), lineno=lineno + 1 if lineno is not None else None)\n+        warnings.warn_explicit(warning, category=None, filename=str(original_cwd.join(path)), lineno=lineno + 1 if lineno is not None else None)\n \n     @property\n     def nodeid(self):\n@@ -289,11 +289,8 @@ class Node(metaclass=NodeMeta):\n             truncate_locals = False\n         else:\n             truncate_locals = True\n-        try:\n-            os.getcwd()\n-            abspath = False\n-        except OSError:\n-            abspath = True\n+        original_cwd = self.config.invocation_dir\n+        abspath = False\n         return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n", "normalized_occurrence": 1}
