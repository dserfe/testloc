{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..344b427 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -194,6 +194,16 @@ class Nominal(Scale):\n \n         new._matplotlib_scale = mpl_scale\n \n+        # Adjusting the axis for Nominal scale\n+        if axis is not None:\n+            n = len(units_seed)\n+            if axis.axis_name == \"x\":\n+                axis.xaxis.grid(False)\n+                axis.set_xlim(-.5, n - .5, auto=None)\n+            else:\n+                axis.yaxis.grid(False)\n+                axis.set_ylim(n - .5, -.5, auto=None)\n+\n         # TODO array cast necessary to handle float/int mixture, which we need\n         # to solve in a more systematic way probably\n         # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..6daa64a 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -96,6 +96,14 @@ class Nominal(Scale):\n             axis = PseudoAxis(mpl_scale)\n             axis.set_view_interval(0, len(units_seed) - 1)\n         new._matplotlib_scale = mpl_scale\n+        if axis is not None:\n+            n = len(units_seed)\n+            if axis.axis_name == 'x':\n+                axis.xaxis.grid(False)\n+                axis.set_xlim(-0.5, n - 0.5, auto=None)\n+            else:\n+                axis.yaxis.grid(False)\n+                axis.set_ylim(n - 0.5, -0.5, auto=None)\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n             keep = np.array([x_ in units_seed for x_ in x], bool)\n", "normalized_occurrence": 1}
