{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d437198..a768aeb 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -448,17 +448,31 @@ class BaseDatabaseSchemaEditor:\n         # _remake_table needs it).\n         self.deferred_sql.extend(self._model_indexes_sql(model))\n \n+        from django.db.models import Model\n+        from django.apps import apps\n+\n         # Make M2M tables\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.create_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            # Resolve string reference to actual model\n+            if isinstance(through, str):\n+                through = apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.create_model(through)\n \n     def delete_model(self, model):\n         \"\"\"Delete a model from the database.\"\"\"\n+        from django.db.models import Model\n+        from django.apps import apps\n+\n         # Handle auto-created intermediary models\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.delete_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            # Resolve string reference to actual model\n+            if isinstance(through, str):\n+                through = apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.delete_model(through)\n \n         # Delete the table\n         self.execute(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 199e030..69919f9 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -202,13 +202,23 @@ class BaseDatabaseSchemaEditor:\n         sql, params = self.table_sql(model)\n         self.execute(sql, params or None)\n         self.deferred_sql.extend(self._model_indexes_sql(model))\n+        from django.db.models import Model\n+        from django.apps import apps\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.create_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            if isinstance(through, str):\n+                through = apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.create_model(through)\n     def delete_model(self, model):\n+        from django.db.models import Model\n+        from django.apps import apps\n         for field in model._meta.local_many_to_many:\n-            if field.remote_field.through._meta.auto_created:\n-                self.delete_model(field.remote_field.through)\n+            through = field.remote_field.through\n+            if isinstance(through, str):\n+                through = apps.get_model(through)\n+            if through._meta.auto_created:\n+                self.delete_model(through)\n         self.execute(self.sql_delete_table % {'table': self.quote_name(model._meta.db_table)})\n         for sql in list(self.deferred_sql):\n             if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):\n", "normalized_occurrence": 1}
