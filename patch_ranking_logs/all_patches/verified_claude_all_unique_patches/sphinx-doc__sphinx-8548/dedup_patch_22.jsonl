{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..a73a3b3 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -293,7 +293,13 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n                 if name in obj_dict:\n                     members[unmangled] = ClassAttribute(subject, unmangled, value)\n                 else:\n-                    members[unmangled] = ClassAttribute(None, unmangled, value)\n+                    # Find which parent class defines this attribute\n+                    defining_class = None\n+                    for parent in getmro(subject)[1:]:  # Skip the class itself\n+                        if hasattr(parent, unmangled):\n+                            defining_class = parent\n+                            break\n+                    members[unmangled] = ClassAttribute(defining_class, unmangled, value)\n         except AttributeError:\n             continue\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 65a9a3c..4d1ed3e 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -191,7 +191,12 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, an\n                 if name in obj_dict:\n                     members[unmangled] = ClassAttribute(subject, unmangled, value)\n                 else:\n-                    members[unmangled] = ClassAttribute(None, unmangled, value)\n+                    defining_class = None\n+                    for parent in getmro(subject)[1:]:\n+                        if hasattr(parent, unmangled):\n+                            defining_class = parent\n+                            break\n+                    members[unmangled] = ClassAttribute(defining_class, unmangled, value)\n         except AttributeError:\n             continue\n     for cls in getmro(subject):\n", "normalized_occurrence": 1}
