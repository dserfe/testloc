{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..f33b82a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1725,11 +1725,15 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n+        result = A._complement(B)\n+        if result is not None:\n+            return result\n+            \n         result = B._complement(A)\n-        if result != None:\n+        if result is not None:\n             return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n+            \n+        return Complement(A, B, evaluate=False)\n \n     def _contains(self, other):\n         A = self.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..5cc4873 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -752,11 +752,13 @@ class Complement(Set, EvalfMixin):\n             return EmptySet()\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n+        result = A._complement(B)\n+        if result is not None:\n+            return result\n         result = B._complement(A)\n-        if result != None:\n+        if result is not None:\n             return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n+        return Complement(A, B, evaluate=False)\n     def _contains(self, other):\n         A = self.args[0]\n         B = self.args[1]\n", "normalized_occurrence": 1}
