{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..28700e9 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,32 +536,30 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n+        if not nz:\n+            return True\n+        # If we have a mixture of terms, some of which we don't\n+        # know if they're zero, and others which are definitely\n+        # not zero, we can't determine if the sum is zero\n+        if len(nz) != len(self.args):\n+            return\n+        # If all terms are definitely non-zero but involve\n+        # complex expressions, return None since they might\n+        # combine to zero after simplification\n+        if any(not a.is_real for a in nz):\n+            return\n         b = self.func(*nz)\n         if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n+            return True\n         if b.is_zero is False:\n             return False\n \n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..a51dac3 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,32 +290,24 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n+        if not nz:\n+            return True\n+        if len(nz) != len(self.args):\n+            return\n+        if any((not a.is_real for a in nz)):\n+            return\n         b = self.func(*nz)\n         if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n+            return True\n         if b.is_zero is False:\n             return False\n     def _eval_is_odd(self):\n", "normalized_occurrence": 2}
