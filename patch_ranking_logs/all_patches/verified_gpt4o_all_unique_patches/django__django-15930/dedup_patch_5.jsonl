{"model_name_or_path": "agentless", "instance_id": "django__django-15930", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 47df1a9..2e82251 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1253,13 +1253,14 @@ class When(Expression):\n                 condition, lookups = Q(**lookups), None\n             elif getattr(condition, \"conditional\", False):\n                 condition, lookups = Q(condition, **lookups), None\n-        if condition is None or not getattr(condition, \"conditional\", False) or lookups:\n+        if condition is None or not getattr(condition, \"conditional\", False) or lookups or isinstance(condition, Q) and not condition:\n             raise TypeError(\n                 \"When() supports a Q object, a boolean expression, or lookups \"\n                 \"as a condition.\"\n             )\n         if isinstance(condition, Q) and not condition:\n-            raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n+            # Handle empty Q() or always true condition by setting a default true condition\n+            condition = Value(True)\n         super().__init__(output_field=None)\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 1b947ba..eddcee4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -631,10 +631,10 @@ class When(Expression):\n                 condition, lookups = (Q(**lookups), None)\n             elif getattr(condition, 'conditional', False):\n                 condition, lookups = (Q(condition, **lookups), None)\n-        if condition is None or not getattr(condition, 'conditional', False) or lookups:\n+        if condition is None or not getattr(condition, 'conditional', False) or lookups or (isinstance(condition, Q) and (not condition)):\n             raise TypeError('When() supports a Q object, a boolean expression, or lookups as a condition.')\n         if isinstance(condition, Q) and (not condition):\n-            raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n+            condition = Value(True)\n         super().__init__(output_field=None)\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n", "normalized_occurrence": 1}
