{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13437", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 70a655c..816f562 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -435,6 +435,8 @@ class bell(Function):\n     @classmethod\n     def eval(cls, n, k_sym=None, symbols=None):\n         if n.is_Integer and n.is_nonnegative:\n+            if n == oo:\n+                return oo\n             if k_sym is None:\n                 return Integer(cls._bell(int(n)))\n             elif symbols is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 12572d1..41d217c 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -142,6 +142,8 @@ class bell(Function):\n     @classmethod\n     def eval(cls, n, k_sym=None, symbols=None):\n         if n.is_Integer and n.is_nonnegative:\n+            if n == oo:\n+                return oo\n             if k_sym is None:\n                 return Integer(cls._bell(int(n)))\n             elif symbols is None:\n", "normalized_occurrence": 1}
