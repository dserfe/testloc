{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17318", "model_patch": "diff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex ea8922d..a43affe 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -140,6 +140,7 @@ def sqrtdenest(expr, max_iter=3):\n def _sqrt_match(p):\n     \"\"\"Return [a, b, r] for p.match(a + b*sqrt(r)) where, in addition to\n     matching, sqrt(r) also has then maximal sqrt_depth among addends of p.\n+    If no match is found, return None.\n \n     Examples\n     ========\n@@ -222,6 +223,11 @@ class SqrtdenestStopIteration(StopIteration):\n def _sqrtdenest0(expr):\n     \"\"\"Returns expr after denesting its arguments.\"\"\"\n \n+    # Return immediately if no denesting is possible\n+    val = _sqrt_match(expr)\n+    if val is None:\n+        return expr\n+\n     if is_sqrt(expr):\n         n, d = expr.as_numer_denom()\n         if d is S.One:  # n is a square root\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex d4a8177..0018407 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -110,6 +110,9 @@ def _sqrt_match(p):\n class SqrtdenestStopIteration(StopIteration):\n     pass\n def _sqrtdenest0(expr):\n+    val = _sqrt_match(expr)\n+    if val is None:\n+        return expr\n     if is_sqrt(expr):\n         n, d = expr.as_numer_denom()\n         if d is S.One:\n", "normalized_occurrence": 1}
