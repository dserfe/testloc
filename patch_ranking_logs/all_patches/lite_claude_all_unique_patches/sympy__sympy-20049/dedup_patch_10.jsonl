{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20049", "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..583a6d3 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -518,10 +518,27 @@ class Point(object):\n         \"\"\"\n \n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        if frame in self._vel_dict:\n+            return self._vel_dict[frame]\n+            \n+        # If velocity hasn't been set but we have position information,\n+        # calculate velocity from position time derivative\n+        for point, pos_vec in self._pos_dict.items():\n+            try:\n+                # Get velocity of the other point\n+                other_vel = point.vel(frame)\n+            except ValueError:\n+                other_vel = None\n+                \n+            if other_vel is not None:\n+                # If we have the other point's velocity, use position derivative\n+                vel = other_vel + pos_vec.dt(frame)\n+                # Cache the calculated velocity\n+                self._vel_dict[frame] = vel\n+                return vel\n+                \n+        raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                         ' defined in ReferenceFrame ' + frame.name)\n \n     def partial_velocity(self, frame, *gen_speeds):\n         \"\"\"Returns the partial velocities of the linear velocity vector of this\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex f85c3bd..1efc7fe 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -120,9 +120,18 @@ class Point(object):\n         return self.vel(outframe)\n     def vel(self, frame):\n         _check_frame(frame)\n-        if not frame in self._vel_dict:\n-            raise ValueError('Velocity of point ' + self.name + ' has not been defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        if frame in self._vel_dict:\n+            return self._vel_dict[frame]\n+        for point, pos_vec in self._pos_dict.items():\n+            try:\n+                other_vel = point.vel(frame)\n+            except ValueError:\n+                other_vel = None\n+            if other_vel is not None:\n+                vel = other_vel + pos_vec.dt(frame)\n+                self._vel_dict[frame] = vel\n+                return vel\n+        raise ValueError('Velocity of point ' + self.name + ' has not been defined in ReferenceFrame ' + frame.name)\n     def partial_velocity(self, frame, *gen_speeds):\n         partials = [self.vel(frame).diff(speed, frame, var_in_dcm=False) for speed in gen_speeds]\n         if len(partials) == 1:\n", "normalized_occurrence": 1}
