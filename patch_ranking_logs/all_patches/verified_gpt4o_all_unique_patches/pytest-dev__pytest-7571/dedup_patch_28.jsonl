{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..ee946e5 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -354,6 +354,8 @@ class LogCaptureFixture:\n         \"\"\"\n         # restore log levels\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(self._initial_handler_level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n \n@@ -434,6 +436,7 @@ class LogCaptureFixture:\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n \n     @contextmanager\n@@ -450,6 +453,7 @@ class LogCaptureFixture:\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n         try:\n             yield\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..19f4e2d 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -166,6 +166,8 @@ class LogCaptureFixture:\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n         for logger_name, level in self._initial_logger_levels.items():\n+            if logger_name is None:\n+                self.handler.setLevel(self._initial_handler_level)\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n     @property\n@@ -191,6 +193,7 @@ class LogCaptureFixture:\n         logger_obj = logging.getLogger(logger)\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n@@ -198,6 +201,7 @@ class LogCaptureFixture:\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n         try:\n             yield\n", "normalized_occurrence": 1}
