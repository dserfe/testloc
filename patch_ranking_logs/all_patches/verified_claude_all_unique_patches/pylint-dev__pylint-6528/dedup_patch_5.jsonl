{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..31a15e1 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -565,19 +565,33 @@ class PyLinter(\n                 self._msgs_state[msg.msgid] = False\n \n     @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(\n+        files_or_modules: Sequence[str],\n+        ignore_list: list[str],\n+        ignore_list_re: list[Pattern[str]],\n+        ignore_list_paths_re: list[Pattern[str]],\n+    ) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n+        Respects ignore lists for files and directories.\n         \"\"\"\n+        def _is_ignored(path: str) -> bool:\n+            basename = os.path.basename(path)\n+            return (basename in ignore_list\n+                    or any(pattern.match(basename) for pattern in ignore_list_re)\n+                    or any(pattern.match(path) for pattern in ignore_list_paths_re))\n+\n         for something in files_or_modules:\n+            if _is_ignored(something):\n+                continue\n             if os.path.isdir(something) and not os.path.isfile(\n                 os.path.join(something, \"__init__.py\")\n             ):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n-                    if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n+                    if any(root.startswith(s) for s in skip_subtrees) or _is_ignored(root):\n+                        # Skip subtree of already discovered package or ignored directory\n                         continue\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n@@ -586,7 +600,7 @@ class PyLinter(\n                         yield from (\n                             os.path.join(root, file)\n                             for file in files\n-                            if file.endswith(\".py\")\n+                            if file.endswith(\".py\") and not _is_ignored(os.path.join(root, file))\n                         )\n             else:\n                 yield something\n", "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..7f8cc18 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -221,18 +221,23 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n     @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(files_or_modules: Sequence[str], ignore_list: list[str], ignore_list_re: list[Pattern[str]], ignore_list_paths_re: list[Pattern[str]]) -> Iterator[str]:\n+        def _is_ignored(path: str) -> bool:\n+            basename = os.path.basename(path)\n+            return basename in ignore_list or any((pattern.match(basename) for pattern in ignore_list_re)) or any((pattern.match(path) for pattern in ignore_list_paths_re))\n         for something in files_or_modules:\n+            if _is_ignored(something):\n+                continue\n             if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n-                    if any((root.startswith(s) for s in skip_subtrees)):\n+                    if any((root.startswith(s) for s in skip_subtrees)) or _is_ignored(root):\n                         continue\n                     if '__init__.py' in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+                        yield from (os.path.join(root, file) for file in files if file.endswith('.py') and (not _is_ignored(os.path.join(root, file))))\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n", "normalized_occurrence": 1}
