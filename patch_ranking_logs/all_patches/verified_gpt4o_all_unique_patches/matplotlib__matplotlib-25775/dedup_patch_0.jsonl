{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..00c0454 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -151,6 +151,7 @@ class Text(Artist):\n             rotation_mode=rotation_mode,\n         )\n         self.update(kwargs)\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n \n     def _reset_visual_defaults(\n         self,\n@@ -202,7 +203,22 @@ class Text(Artist):\n         if bbox is not sentinel:\n             self.set_bbox(bbox)\n \n-    def __getstate__(self):\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether the text is to be drawn with antialiasing.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = b\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text is to be drawn with antialiasing.\n+        \"\"\"\n+        return self._antialiased\n         d = super().__getstate__()\n         # remove the cached _renderer (if it exists)\n         d['_renderer'] = None\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..0407ebb 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -47,6 +47,7 @@ class Text(Artist):\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n@@ -75,7 +76,11 @@ class Text(Artist):\n         super().update(kwargs)\n         if bbox is not sentinel:\n             self.set_bbox(bbox)\n-    def __getstate__(self):\n+    def set_antialiased(self, b):\n+        self._antialiased = b\n+        self.stale = True\n+    def get_antialiased(self):\n+        return self._antialiased\n         d = super().__getstate__()\n         d['_renderer'] = None\n         return d\n", "normalized_occurrence": 1}
