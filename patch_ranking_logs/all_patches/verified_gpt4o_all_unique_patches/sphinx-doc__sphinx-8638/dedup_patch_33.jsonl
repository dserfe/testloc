{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex f9408ce..f5913c8 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -205,15 +205,15 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         pass\n \n     # other members\n-    for name in dir(subject):\n+    for name in obj_dict:\n         try:\n             value = attrgetter(subject, name)\n-            directly_defined = name in obj_dict\n+            directly_defined = True\n             name = unmangle(subject, name)\n             if name and name not in members:\n                 members[name] = Attribute(name, directly_defined, value)\n         except AttributeError:\n-            continue\n+            pass\n \n     # annotation only member (ex. attr: int)\n     for i, cls in enumerate(getmro(subject)):\n@@ -308,4 +308,4 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n     except AttributeError:\n         pass\n \n-    return members\n+    return members\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex bf1ee33..5efe8f8 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -132,15 +132,15 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n                 members[name] = Attribute(name, True, SLOTSATTR)\n     except (AttributeError, TypeError, ValueError):\n         pass\n-    for name in dir(subject):\n+    for name in obj_dict:\n         try:\n             value = attrgetter(subject, name)\n-            directly_defined = name in obj_dict\n+            directly_defined = True\n             name = unmangle(subject, name)\n             if name and name not in members:\n                 members[name] = Attribute(name, directly_defined, value)\n         except AttributeError:\n-            continue\n+            pass\n     for i, cls in enumerate(getmro(subject)):\n         try:\n             for name in getannotations(cls):\n", "normalized_occurrence": 1}
