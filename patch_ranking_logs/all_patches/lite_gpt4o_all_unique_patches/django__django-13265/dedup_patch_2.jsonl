{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..1584d6f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1190,6 +1190,31 @@ class MigrationAutodetector:\n                 )\n \n     def generate_altered_order_with_respect_to(self):\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            if (old_model_state.options.get(\"order_with_respect_to\") !=\n+                    new_model_state.options.get(\"order_with_respect_to\")):\n+                # Make sure it comes first before adding indexes involving `_order`\n+                dependencies = []\n+                if new_model_state.options.get(\"order_with_respect_to\"):\n+                    dependencies.append((\n+                        app_label,\n+                        model_name,\n+                        new_model_state.options[\"order_with_respect_to\"],\n+                        True,\n+                    ))\n+                # Actually generate the operation\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterOrderWithRespectTo(\n+                        name=model_name,\n+                        order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n+                    ),\n+                    dependencies=dependencies,\n+                    before=[operations.AddIndex],  # Ensure this runs before AddIndex\n+                )\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..c228fa6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -574,6 +574,15 @@ class MigrationAutodetector:\n             if old_options != new_options:\n                 self.add_operation(app_label, operations.AlterModelOptions(name=model_name, options=new_options))\n     def generate_altered_order_with_respect_to(self):\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            if old_model_state.options.get('order_with_respect_to') != new_model_state.options.get('order_with_respect_to'):\n+                dependencies = []\n+                if new_model_state.options.get('order_with_respect_to'):\n+                    dependencies.append((app_label, model_name, new_model_state.options['order_with_respect_to'], True))\n+                self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to')), dependencies=dependencies, before=[operations.AddIndex])\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n", "normalized_occurrence": 1}
