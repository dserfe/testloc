{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..28e1296 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -108,6 +108,16 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n+    # Handle union types in docstring format (e.g. \"bytes | str\")\n+    if ' | ' in annotation:\n+        types = [type_.strip() for type_ in annotation.split('|')]\n+        result: List[Node] = []\n+        for i, type_ in enumerate(types):\n+            if i > 0:\n+                result.extend([nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')])\n+            result.append(type_to_xref(type_.strip(), env))\n+        return result\n+\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..58251d1 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -57,6 +57,14 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         contnodes = [nodes.Text(text)]\n     return pending_xref('', *contnodes, refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n+    if ' | ' in annotation:\n+        types = [type_.strip() for type_ in annotation.split('|')]\n+        result: List[Node] = []\n+        for i, type_ in enumerate(types):\n+            if i > 0:\n+                result.extend([nodes.Text(' '), addnodes.desc_sig_punctuation('', '|'), nodes.Text(' ')])\n+            result.append(type_to_xref(type_.strip(), env))\n+        return result\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n", "normalized_occurrence": 1}
