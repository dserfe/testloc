{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..39c005b 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,13 +403,22 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(\n-            model, columns, exclude=meta_constraint_names | meta_index_names,\n-            **constraint_kwargs\n+        \n+        # Get all matching constraints\n+        all_constraint_names = self._constraint_names(\n+            model, columns, exclude=meta_constraint_names | meta_index_names\n         )\n+        \n+        # Filter constraints based on whether we're looking for an index or unique constraint\n+        constraint_names = [\n+            name for name in all_constraint_names\n+            if bool('_idx' in name) == bool(constraint_kwargs.get('index', False))\n+        ]\n+        \n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+            raise ValueError(\"Found wrong number (%s) of %s constraints for %s(%s)\" % (\n                 len(constraint_names),\n+                \"index\" if constraint_kwargs.get('index', False) else \"unique\",\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..ec716d9 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,9 +229,10 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        all_constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names)\n+        constraint_names = [name for name in all_constraint_names if bool('_idx' in name) == bool(constraint_kwargs.get('index', False))]\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+            raise ValueError('Found wrong number (%s) of %s constraints for %s(%s)' % (len(constraint_names), 'index' if constraint_kwargs.get('index', False) else 'unique', model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n", "normalized_occurrence": 1}
