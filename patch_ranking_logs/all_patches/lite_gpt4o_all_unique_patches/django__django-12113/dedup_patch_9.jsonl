{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..6a33528 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -255,7 +255,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         pass\n \n     def create_cursor(self, name=None):\n-        return self.connection.cursor(factory=SQLiteCursorWrapper)\n+        cursor = self.connection.cursor(factory=SQLiteCursorWrapper)\n+        # Ensure the cursor is in autocommit mode\n+        if self.connection.isolation_level is None:\n+            cursor.execute('BEGIN')\n+        return cursor\n \n     @async_unsafe\n     def close(self):\n@@ -264,7 +268,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         # database. To prevent accidental data loss, ignore close requests on\n         # an in-memory db.\n         if not self.is_in_memory_db():\n-            BaseDatabaseWrapper.close(self)\n+            if self.connection:\n+                self.connection.close()\n+                self.connection = None\n \n     def _savepoint_allowed(self):\n         # When 'isolation_level' is not None, sqlite3 commits before each\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..09414f0 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -123,12 +123,17 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     def init_connection_state(self):\n         pass\n     def create_cursor(self, name=None):\n-        return self.connection.cursor(factory=SQLiteCursorWrapper)\n+        cursor = self.connection.cursor(factory=SQLiteCursorWrapper)\n+        if self.connection.isolation_level is None:\n+            cursor.execute('BEGIN')\n+        return cursor\n     @async_unsafe\n     def close(self):\n         self.validate_thread_sharing()\n         if not self.is_in_memory_db():\n-            BaseDatabaseWrapper.close(self)\n+            if self.connection:\n+                self.connection.close()\n+                self.connection = None\n     def _savepoint_allowed(self):\n         return self.in_atomic_block\n     def _set_autocommit(self, autocommit):\n", "normalized_occurrence": 1}
