{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..ac664e2 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,10 +1961,12 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Only extract data if the variable exists in the index\n+            if k in idx.get_level_values(variable_dim):\n+                data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n \n         # unstacked dataset\n-        return Dataset(data_dict)\n+        return Dataset(data_dict, attrs=self.attrs)\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..0c12ddf 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,8 +534,9 @@ class DataArray(AbstractArray, DataWithCoords):\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-        return Dataset(data_dict)\n+            if k in idx.get_level_values(variable_dim):\n+                data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+        return Dataset(data_dict, attrs=self.attrs)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n             dims = tuple(utils.infix_dims(dims, self.dims))\n", "normalized_occurrence": 1}
