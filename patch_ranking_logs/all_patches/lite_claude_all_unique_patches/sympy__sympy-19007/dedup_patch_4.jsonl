{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..1932761 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,16 +234,30 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+        row_block = 0\n+        row_offset = 0\n+        for numrows in self.rowblocksizes:\n+            if i.is_number and i < numrows:\n                 break\n-            else:\n+            elif i.is_number:\n+                row_block += 1\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n             else:\n+                # For symbolic index, return unevaluated index\n+                return BlockMatrix(self.blocks)[i, j]\n+            \n+        # Find column entry\n+        col_block = 0\n+        for numcols in self.colblocksizes:\n+            if j.is_number and j < numcols:\n+                break\n+            elif j.is_number:\n+                col_block += 1\n                 j -= numcols\n+            else:\n+                # For symbolic index, return unevaluated index\n+                return BlockMatrix(self.blocks)[i, j]\n+                \n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..96aa97e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,25 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+        row_block = 0\n+        row_offset = 0\n+        for numrows in self.rowblocksizes:\n+            if i.is_number and i < numrows:\n                 break\n-            else:\n+            elif i.is_number:\n+                row_block += 1\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n             else:\n+                return BlockMatrix(self.blocks)[i, j]\n+        col_block = 0\n+        for numcols in self.colblocksizes:\n+            if j.is_number and j < numcols:\n+                break\n+            elif j.is_number:\n+                col_block += 1\n                 j -= numcols\n+            else:\n+                return BlockMatrix(self.blocks)[i, j]\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
