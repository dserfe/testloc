{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..7195543 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -838,6 +838,23 @@ class ASTNumberLiteral(ASTLiteral):\n         signode.append(nodes.Text(txt, txt))\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, number: str, suffix: str) -> None:\n+        self.number = number\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.number + self.suffix\n+\n+    def get_id(self, version: int) -> str:\n+        return \"L%sE\" % (self.number + self.suffix)\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        txt = str(self)\n+        signode.append(nodes.Text(txt, txt))\n+\n+\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -4682,9 +4699,38 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # handle user-defined literals\n+        ulit = self._parse_user_defined_literal()\n+        if ulit is not None:\n+            return ulit\n+\n         return None\n \n+    def _parse_user_defined_literal(self) -> ASTLiteral:\n+        # Parse number or string literal followed by a user-defined suffix\n+        # Format: <number|string>_<identifier>\n+        pos = self.pos\n+        number = self._parse_number()\n+        if number is None:\n+            self.pos = pos\n+            return None\n+        \n+        if self.current_char != '_':\n+            self.pos = pos\n+            return None\n+\n+        self.pos += 1  # skip '_'\n+        suffix = ''\n+        while self.current_char.isalnum() or self.current_char == '_':\n+            suffix += self.current_char\n+            self.pos += 1\n+        \n+        if not suffix:\n+            self.pos = pos\n+            return None\n+\n+        return ASTUserDefinedLiteral(number.data, '_' + suffix)\n+\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n         # fold-expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..6b65f4b 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -253,6 +253,17 @@ class ASTNumberLiteral(ASTLiteral):\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         txt = str(self)\n         signode.append(nodes.Text(txt, txt))\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, number: str, suffix: str) -> None:\n+        self.number = number\n+        self.suffix = suffix\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.number + self.suffix\n+    def get_id(self, version: int) -> str:\n+        return 'L%sE' % (self.number + self.suffix)\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        txt = str(self)\n+        signode.append(nodes.Text(txt, txt))\n class ASTStringLiteral(ASTLiteral):\n     def __init__(self, data: str) -> None:\n         self.data = data\n@@ -3074,7 +3085,28 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        ulit = self._parse_user_defined_literal()\n+        if ulit is not None:\n+            return ulit\n         return None\n+    def _parse_user_defined_literal(self) -> ASTLiteral:\n+        pos = self.pos\n+        number = self._parse_number()\n+        if number is None:\n+            self.pos = pos\n+            return None\n+        if self.current_char != '_':\n+            self.pos = pos\n+            return None\n+        self.pos += 1\n+        suffix = ''\n+        while self.current_char.isalnum() or self.current_char == '_':\n+            suffix += self.current_char\n+            self.pos += 1\n+        if not suffix:\n+            self.pos = pos\n+            return None\n+        return ASTUserDefinedLiteral(number.data, '_' + suffix)\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
