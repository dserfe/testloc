{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 1ea0522..42b1fcc 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -281,6 +281,12 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        \n+        # Clear cached xfail evaluation when adding xfail marker\n+        if marker_.name == \"xfail\":\n+            from _pytest.skipping import xfailed_key\n+            if hasattr(self, \"stash\"):\n+                self.stash[xfailed_key] = None\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 8a79019..fde454d 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -213,6 +213,10 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        if marker_.name == 'xfail':\n+            from _pytest.skipping import xfailed_key\n+            if hasattr(self, 'stash'):\n+                self.stash[xfailed_key] = None\n \n     def iter_markers(self, name: Optional[str]=None) -> Iterator[Mark]:\n         \"\"\"\n", "normalized_occurrence": 1}
