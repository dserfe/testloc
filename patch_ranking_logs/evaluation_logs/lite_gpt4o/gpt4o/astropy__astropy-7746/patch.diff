diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index 369cdd2..27567ca 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1212,13 +1212,16 @@ reduce these to 2 dimensions using the naxis kwarg.
         """
 
         def _return_list_of_arrays(axes, origin):
-            try:
-                axes = np.broadcast_arrays(*axes)
-            except ValueError:
-                raise ValueError(
-                    "Coordinate arrays are not broadcastable to each other")
+            if any(len(x) == 0 for x in axes):
+                return [np.array([]) for _ in range(self.naxis)]
+            else:
+                try:
+                    axes = np.broadcast_arrays(*axes)
+                except ValueError:
+                    raise ValueError(
+                        "Coordinate arrays are not broadcastable to each other")
 
-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])
+                xy = np.hstack([x.reshape((x.size, 1)) for x in axes])
 
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
@@ -1231,16 +1234,19 @@ reduce these to 2 dimensions using the naxis kwarg.
                     for i in range(output.shape[1])]
 
         def _return_single_array(xy, origin):
-            if xy.shape[-1] != self.naxis:
-                raise ValueError(
-                    "When providing two arguments, the array must be "
-                    "of shape (N, {0})".format(self.naxis))
-            if ra_dec_order and sky == 'input':
-                xy = self._denormalize_sky(xy)
-            result = func(xy, origin)
-            if ra_dec_order and sky == 'output':
-                result = self._normalize_sky(result)
-            return result
+            if xy.size == 0:
+                return np.array([]).reshape((0, self.naxis))
+            else:
+                if xy.shape[-1] != self.naxis:
+                    raise ValueError(
+                        "When providing two arguments, the array must be "
+                        "of shape (N, {0})".format(self.naxis))
+                if ra_dec_order and sky == 'input':
+                    xy = self._denormalize_sky(xy)
+                result = func(xy, origin)
+                if ra_dec_order and sky == 'output':
+                    result = self._normalize_sky(result)
+                return result
 
         if len(args) == 2:
             try:
