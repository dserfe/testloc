{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..b00fbf8 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -911,7 +911,8 @@ def eval_expr(code, local_dict, global_dict):\n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n     expr = eval(\n-        code, global_dict, local_dict)  # take local objects in preference\n+        code, global_dict, local_dict,\n+        {'evaluate': evaluate})  # take local objects in preference\n     return expr\n \n \n@@ -1088,7 +1089,7 @@ def parse_expr(s, local_dict=None, transformations=standard_transformations,\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n \n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n+        rv = eval_expr(code, local_dict, global_dict, evaluate=evaluate)\n         # restore neutral definitions for names\n         for i in local_dict.pop(None, ()):\n             local_dict[i] = None\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex e068f1d..b9665b7 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -476,7 +476,7 @@ def stringify_expr(s, local_dict, global_dict, transformations):\n         tokens = transform(tokens, local_dict, global_dict)\n     return untokenize(tokens)\n def eval_expr(code, local_dict, global_dict):\n-    expr = eval(code, global_dict, local_dict)\n+    expr = eval(code, global_dict, local_dict, {'evaluate': evaluate})\n     return expr\n def parse_expr(s, local_dict=None, transformations=standard_transformations, global_dict=None, evaluate=True):\n     if local_dict is None:\n@@ -514,7 +514,7 @@ def parse_expr(s, local_dict=None, transformations=standard_transformations, glo\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n+        rv = eval_expr(code, local_dict, global_dict, evaluate=evaluate)\n         for i in local_dict.pop(None, ()):\n             local_dict[i] = None\n         return rv\n", "normalized_occurrence": 1}
