{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..089c217 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2661,7 +2661,18 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        if not isinstance(parent, ClassDocumenter):\n+            return False\n+        \n+        # Handle regular properties\n+        if inspect.isproperty(member):\n+            return True\n+            \n+        # Handle class properties\n+        # Get the actual member from the parent class if possible\n+        obj = parent.__dict__.get(membername, member)\n+        return (isinstance(obj, property) and \n+                (inspect.ismethod(member) or inspect.isfunction(member)))\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..9486fbe 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1597,7 +1597,12 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        if not isinstance(parent, ClassDocumenter):\n+            return False\n+        if inspect.isproperty(member):\n+            return True\n+        obj = parent.__dict__.get(membername, member)\n+        return isinstance(obj, property) and (inspect.ismethod(member) or inspect.isfunction(member))\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n", "normalized_occurrence": 1}
