{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3151", "model_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex fe3f23b..f78854b 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -506,6 +506,9 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing\n                         or indexes.is_monotonic_decreasing):\n+                    if any(indexes.duplicated()):\n+                        # allow non-monotonic indexes if they are identical\n+                        continue\n                     raise ValueError(\"Resulting object does not have monotonic\"\n                                      \" global indexes along dimension {}\"\n                                      .format(dim))\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex b8f5640..f50296c 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -119,6 +119,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all', coords='\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing or indexes.is_monotonic_decreasing):\n+                    if any(indexes.duplicated()):\n+                        continue\n                     raise ValueError('Resulting object does not have monotonic global indexes along dimension {}'.format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n     return merge(concatenated_grouped_by_data_vars, compat=compat, fill_value=fill_value)\n", "normalized_occurrence": 1}
