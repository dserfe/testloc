{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..ad46bca 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -857,9 +857,9 @@ class Permutation(Basic):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:  # c\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):  # g\n@@ -924,8 +924,8 @@ class Permutation(Basic):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n+    @classmethod\n+    def _af_new(cls, perm):\n         \"\"\"A method to produce a Permutation object from a list;\n         the list is bound to the _array_form attribute, so it must\n         not be modified; this method is meant for internal use only;\n@@ -944,7 +944,7 @@ class Permutation(Basic):\n         Permutation([2, 1, 3, 0])\n \n         \"\"\"\n-        p = Basic.__new__(Perm, perm)\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n", "occurrence": 3, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..165a261 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -168,9 +168,9 @@ class Permutation(Basic):\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            return cls._af_new(list(range(size or 0)))\n         elif len(args) > 1:\n-            return _af_new(Cycle(*args).list(size))\n+            return cls._af_new(Cycle(*args).list(size))\n         if len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):\n@@ -213,9 +213,9 @@ class Permutation(Basic):\n         obj._array_form = aform\n         obj._size = size\n         return obj\n-    @staticmethod\n-    def _af_new(perm):\n-        p = Basic.__new__(Perm, perm)\n+    @classmethod\n+    def _af_new(cls, perm):\n+        p = Basic.__new__(cls, perm)\n         p._array_form = perm\n         p._size = len(perm)\n         return p\n", "normalized_occurrence": 4}
