{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..a53e260 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1088,6 +1088,11 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        if self.queryset.query.is_sliced:\n+            raise ValueError(\n+                \"This queryset contains a reference to an outer query and may \"\n+                \"only be used in a subquery.\"\n+            )\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..26d0b10 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -665,6 +665,8 @@ class Exists(Subquery):\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        if self.queryset.query.is_sliced:\n+            raise ValueError('This queryset contains a reference to an outer query and may only be used in a subquery.')\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "normalized_occurrence": 1}
