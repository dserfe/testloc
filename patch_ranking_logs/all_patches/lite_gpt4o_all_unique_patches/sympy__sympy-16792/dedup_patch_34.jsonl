{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..9e4b714 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -455,14 +455,21 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n-            return proto + \" = 0\"\n+            if arg.dimensions:\n+                return proto + \" = np.empty({shape})\".format(shape=shape)\n+            else:\n+                return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n-            return \"&{0}\".format(self._string_var(arg.name))\n+            if arg.dimensions:\n+                t = arg.get_datatype('c')\n+                return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+            else:\n+                return \"&{0}\".format(self._string_var(arg.name))\n         else:\n             return self._string_var(arg.name)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..b5cd807 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -206,6 +206,8 @@ class CythonCodeWrapper(CodeWrapper):\n         if arg.dimensions:\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n+        elif arg.dimensions:\n+            return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n             return proto + ' = 0'\n     def _call_arg(self, arg):\n@@ -213,7 +215,11 @@ class CythonCodeWrapper(CodeWrapper):\n             t = arg.get_datatype('c')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n-            return '&{0}'.format(self._string_var(arg.name))\n+            if arg.dimensions:\n+                t = arg.get_datatype('c')\n+                return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n+            else:\n+                return '&{0}'.format(self._string_var(arg.name))\n         else:\n             return self._string_var(arg.name)\n     def _string_var(self, var):\n", "normalized_occurrence": 1}
