{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..b2f0665 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -111,6 +111,15 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n+        elif isinstance(node, ast.Call):\n+            result = unparse(node.func)\n+            result.append(addnodes.desc_sig_punctuation('', '('))\n+            for i, arg in enumerate(node.args):\n+                result.extend(unparse(arg))\n+                if i < len(node.args) - 1:\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+            result.append(addnodes.desc_sig_punctuation('', ')'))\n+            return result\n         elif isinstance(node, ast.BinOp):\n             result: List[Node] = unparse(node.left)\n             result.extend(unparse(node.op))\n", "occurrence": 4, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..a36c471 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -60,6 +60,15 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n+        elif isinstance(node, ast.Call):\n+            result = unparse(node.func)\n+            result.append(addnodes.desc_sig_punctuation('', '('))\n+            for i, arg in enumerate(node.args):\n+                result.extend(unparse(arg))\n+                if i < len(node.args) - 1:\n+                    result.append(addnodes.desc_sig_punctuation('', ', '))\n+            result.append(addnodes.desc_sig_punctuation('', ')'))\n+            return result\n         elif isinstance(node, ast.BinOp):\n             result: List[Node] = unparse(node.left)\n             result.extend(unparse(node.op))\n", "normalized_occurrence": 4}
