{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..ba30750 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,7 +408,56 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, ExceptionChainRepr):\n+        return {\n+            'reprtraceback': serialize_longrepr(longrepr.reprtraceback),\n+            'reprcrash': serialize_longrepr(longrepr.reprcrash),\n+            'sections': longrepr.sections,\n+        }\n+    if hasattr(longrepr, 'toterminal'):\n+        return {\n+            'reprtraceback': serialize_longrepr(longrepr.reprtraceback),\n+            'reprcrash': serialize_longrepr(longrepr.reprcrash),\n+        }\n+    return longrepr\n+\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict):\n+        if 'reprtraceback' in data:\n+            return ExceptionChainRepr(\n+                reprtraceback=deserialize_longrepr(data['reprtraceback']),\n+                reprcrash=deserialize_longrepr(data['reprcrash']),\n+                sections=data.get('sections', [])\n+            )\n+        if 'reprcrash' in data:\n+            return ReprExceptionInfo(\n+                reprtraceback=deserialize_longrepr(data['reprtraceback']),\n+                reprcrash=deserialize_longrepr(data['reprcrash']),\n+            )\n+    return data\n+\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        if hasattr(report, 'longrepr'):\n+            data['longrepr'] = serialize_longrepr(report.longrepr)\n+        return data\n+\n+def pytest_report_from_serializable(data):\n+    if \"_report_type\" in data:\n+        if data[\"_report_type\"] == \"TestReport\":\n+            report = TestReport._from_json(data)\n+        elif data[\"_report_type\"] == \"CollectReport\":\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(\n+                data[\"_report_type\"]\n+            )\n+        if 'longrepr' in data:\n+            report.longrepr = deserialize_longrepr(data['longrepr'])\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..2d8418d 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,7 +205,37 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, ExceptionChainRepr):\n+        return {'reprtraceback': serialize_longrepr(longrepr.reprtraceback), 'reprcrash': serialize_longrepr(longrepr.reprcrash), 'sections': longrepr.sections}\n+    if hasattr(longrepr, 'toterminal'):\n+        return {'reprtraceback': serialize_longrepr(longrepr.reprtraceback), 'reprcrash': serialize_longrepr(longrepr.reprcrash)}\n+    return longrepr\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict):\n+        if 'reprtraceback' in data:\n+            return ExceptionChainRepr(reprtraceback=deserialize_longrepr(data['reprtraceback']), reprcrash=deserialize_longrepr(data['reprcrash']), sections=data.get('sections', []))\n+        if 'reprcrash' in data:\n+            return ReprExceptionInfo(reprtraceback=deserialize_longrepr(data['reprtraceback']), reprcrash=deserialize_longrepr(data['reprcrash']))\n+    return data\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        if hasattr(report, 'longrepr'):\n+            data['longrepr'] = serialize_longrepr(report.longrepr)\n+        return data\n+def pytest_report_from_serializable(data):\n+    if '_report_type' in data:\n+        if data['_report_type'] == 'TestReport':\n+            report = TestReport._from_json(data)\n+        elif data['_report_type'] == 'CollectReport':\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        if 'longrepr' in data:\n+            report.longrepr = deserialize_longrepr(data['longrepr'])\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n", "normalized_occurrence": 1}
