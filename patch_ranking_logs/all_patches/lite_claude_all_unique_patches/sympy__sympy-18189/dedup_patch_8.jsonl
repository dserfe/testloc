{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..e4d302c 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,13 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n+                # Create a substitution to reorder symbols to match syms order\n+                reordered = eq.subs(dict(zip(var, syms)))\n+                # Solve with symbols in desired order\n+                sols = diophantine(reordered, param, syms=syms, permute=permute)\n+                # Map solutions back to original order\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                return {tuple([t[dict_sym_index[i]] for i in var]) for t in sols}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..61c3019 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,10 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n+                reordered = eq.subs(dict(zip(var, syms)))\n+                sols = diophantine(reordered, param, syms=syms, permute=permute)\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                return {tuple([t[dict_sym_index[i]] for i in var]) for t in sols}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
