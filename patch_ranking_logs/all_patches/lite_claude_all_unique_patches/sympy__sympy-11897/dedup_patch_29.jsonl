{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..dca22a1 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,11 +356,33 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n \n+        # Handle sequential divisions more naturally\n+        if expr.is_Mul:\n+            args = expr.args\n+            # Separate negative powers (denominators) from positive powers\n+            pos_args = []\n+            neg_args = []\n+            for arg in args:\n+                if arg.is_Pow and arg.exp.is_negative and arg.base.is_commutative:\n+                    neg_args.append(Pow(arg.base, -arg.exp))\n+                else:\n+                    pos_args.append(arg)\n+            \n+            if neg_args:\n+                if len(pos_args) == 0:\n+                    pos_args = [S.One]\n+                return r\"\\frac{%s}{%s}\" % (\n+                    convert(Mul(*pos_args)),\n+                    convert(Mul(*neg_args))\n+                )\n+\n+        # For other cases, use the original fraction handling\n+        from sympy.simplify import fraction\n+        numer, denom = fraction(expr, exact=True)\n+\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..a6dabeb 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,10 +165,23 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        if expr.is_Mul:\n+            args = expr.args\n+            pos_args = []\n+            neg_args = []\n+            for arg in args:\n+                if arg.is_Pow and arg.exp.is_negative and arg.base.is_commutative:\n+                    neg_args.append(Pow(arg.base, -arg.exp))\n+                else:\n+                    pos_args.append(arg)\n+            if neg_args:\n+                if len(pos_args) == 0:\n+                    pos_args = [S.One]\n+                return '\\\\frac{%s}{%s}' % (convert(Mul(*pos_args)), convert(Mul(*neg_args)))\n+        from sympy.simplify import fraction\n+        numer, denom = fraction(expr, exact=True)\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n", "normalized_occurrence": 1}
