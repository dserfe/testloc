{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18532", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 97eb81a..465392c 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -504,11 +504,13 @@ class Basic(metaclass=ManagedProperties):\n             types = tuple(\n                 [t if isinstance(t, type) else type(t) for t in types])\n         else:\n-            types = (Atom,)\n+            def is_leaf(expr):\n+                return not expr.args\n         result = set()\n         for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n+            if not types or isinstance(expr, types):\n+                if is_leaf(expr):\n+                    result.add(expr)\n         return result\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex eec7295..3442d2e 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -187,11 +187,13 @@ class Basic(metaclass=ManagedProperties):\n         if types:\n             types = tuple([t if isinstance(t, type) else type(t) for t in types])\n         else:\n-            types = (Atom,)\n+            def is_leaf(expr):\n+                return not expr.args\n         result = set()\n         for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n+            if not types or isinstance(expr, types):\n+                if is_leaf(expr):\n+                    result.add(expr)\n         return result\n     @property\n     def free_symbols(self):\n", "normalized_occurrence": 1}
