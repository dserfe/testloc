{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..d7559d1 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -61,13 +61,10 @@ class MatMul(MatrixExpr):\n         from sympy.concrete.summations import Sum\n         from sympy.matrices import ImmutableMatrix\n         k = Dummy('k', integer=True)\n-        if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n-            return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n-            # Don't waste time in result.doit() if the sum bounds are symbolic\n-            expand = False\n-        return result.doit() if expand else result\n+        if expand and X.cols.is_number:\n+            result = result.doit()\n+        return result\n \n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..eee8fcb 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -36,12 +36,10 @@ class MatMul(MatrixExpr):\n         from sympy.concrete.summations import Sum\n         from sympy.matrices import ImmutableMatrix\n         k = Dummy('k', integer=True)\n-        if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n-            return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n-            expand = False\n-        return result.doit() if expand else result\n+        if expand and X.cols.is_number:\n+            result = result.doit()\n+        return result\n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n         matrices = [x for x in self.args if x.is_Matrix]\n", "normalized_occurrence": 1}
