{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..834bb1d 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -82,32 +82,28 @@ def expand_modules(\n             continue\n         module_path = get_python_path(something)\n         additional_search_path = [\".\", module_path] + path\n-        if os.path.exists(something):\n-            # this is a file or a directory\n-            try:\n+        try:\n+            if os.path.exists(something):\n+                # this is a file or a directory\n                 modname = \".\".join(\n                     modutils.modpath_from_file(something, path=additional_search_path)\n                 )\n-            except ImportError:\n-                modname = os.path.splitext(basename)[0]\n-            if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                if os.path.isdir(something):\n+                    filepath = os.path.join(something, \"__init__.py\")\n+                else:\n+                    filepath = something\n             else:\n-                filepath = something\n-        else:\n-            # suppose it's a module or package\n-            modname = something\n-            try:\n+                # suppose it's a module or package\n+                modname = something\n                 filepath = modutils.file_from_modpath(\n                     modname.split(\".\"), path=additional_search_path\n                 )\n                 if filepath is None:\n                     continue\n-            except (ImportError, SyntaxError) as ex:\n-                # The SyntaxError is a Python bug and should be\n-                # removed once we move away from imp.find_module: https://bugs.python.org/issue10588\n-                errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n-                continue\n+        except (ImportError, SyntaxError) as ex:\n+            # Handle errors gracefully\n+            errors.append({\"key\": \"fatal\", \"mod\": something, \"ex\": ex})\n+            continue\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split(\".\")\n         try:\n@@ -159,4 +155,4 @@ def expand_modules(\n                         \"basename\": modname,\n                     }\n                 )\n-    return result, errors\n+    return result, errors\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..102a779 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -36,24 +36,21 @@ def expand_modules(files_or_modules: Sequence[str], ignore_list: list[str], igno\n             continue\n         module_path = get_python_path(something)\n         additional_search_path = ['.', module_path] + path\n-        if os.path.exists(something):\n-            try:\n+        try:\n+            if os.path.exists(something):\n                 modname = '.'.join(modutils.modpath_from_file(something, path=additional_search_path))\n-            except ImportError:\n-                modname = os.path.splitext(basename)[0]\n-            if os.path.isdir(something):\n-                filepath = os.path.join(something, '__init__.py')\n+                if os.path.isdir(something):\n+                    filepath = os.path.join(something, '__init__.py')\n+                else:\n+                    filepath = something\n             else:\n-                filepath = something\n-        else:\n-            modname = something\n-            try:\n+                modname = something\n                 filepath = modutils.file_from_modpath(modname.split('.'), path=additional_search_path)\n                 if filepath is None:\n                     continue\n-            except (ImportError, SyntaxError) as ex:\n-                errors.append({'key': 'fatal', 'mod': modname, 'ex': ex})\n-                continue\n+        except (ImportError, SyntaxError) as ex:\n+            errors.append({'key': 'fatal', 'mod': something, 'ex': ex})\n+            continue\n         filepath = os.path.normpath(filepath)\n         modparts = (modname or something).split('.')\n         try:\n", "normalized_occurrence": 1}
