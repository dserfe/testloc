{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..4006b46 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -9,6 +9,47 @@ from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n+def _is_valid_ordering_reference(field_name, opts):\n+    \"\"\"\n+    Check if field_name is a valid ordering reference including registered lookups\n+    \"\"\"\n+    # Handle regular fields and reverse relations\n+    if field_name.startswith('-'):\n+        field_name = field_name[1:]\n+    \n+    # Split the field path into parts\n+    parts = field_name.split('__')\n+    current_opts = opts\n+    \n+    # Traverse through all parts except the last one\n+    for part in parts[:-1]:\n+        if not part:\n+            return False\n+        try:\n+            field = current_opts.get_field(part)\n+            if hasattr(field, 'remote_field') and field.remote_field:\n+                current_opts = field.remote_field.model._meta\n+            else:\n+                return False\n+        except FieldDoesNotExist:\n+            return False\n+    \n+    # Check if the last part is either a field or a registered lookup\n+    try:\n+        if parts:\n+            field = current_opts.get_field(parts[-1])\n+            return True\n+    except FieldDoesNotExist:\n+        # Check if the last part is a registered lookup\n+        if len(parts) > 1:\n+            try:\n+                previous_field = current_opts.get_field(parts[-2])\n+                if parts[-1] in previous_field.get_lookups():\n+                    return True\n+            except (FieldDoesNotExist, AttributeError):\n+                pass\n+    return False\n+\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 50dfeb8..6316a51 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -6,6 +6,35 @@ from django.apps import apps\n from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n @register(Tags.models)\n+def _is_valid_ordering_reference(field_name, opts):\n+    if field_name.startswith('-'):\n+        field_name = field_name[1:]\n+    parts = field_name.split('__')\n+    current_opts = opts\n+    for part in parts[:-1]:\n+        if not part:\n+            return False\n+        try:\n+            field = current_opts.get_field(part)\n+            if hasattr(field, 'remote_field') and field.remote_field:\n+                current_opts = field.remote_field.model._meta\n+            else:\n+                return False\n+        except FieldDoesNotExist:\n+            return False\n+    try:\n+        if parts:\n+            field = current_opts.get_field(parts[-1])\n+            return True\n+    except FieldDoesNotExist:\n+        if len(parts) > 1:\n+            try:\n+                previous_field = current_opts.get_field(parts[-2])\n+                if parts[-1] in previous_field.get_lookups():\n+                    return True\n+            except (FieldDoesNotExist, AttributeError):\n+                pass\n+    return False\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n", "normalized_occurrence": 1}
