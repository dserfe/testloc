{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..a19f56b 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -212,7 +212,7 @@ def _coord_matrix(model, pos, noutp):\n         for i in range(model.n_inputs):\n             mat[i, i] = 1\n         if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+            mat = np.roll(mat, (noutp - model.n_outputs), axis=0)\n     return mat\n \n \n@@ -236,13 +236,13 @@ def _cstack(left, right):\n     if isinstance(left, Model):\n         cleft = _coord_matrix(left, 'left', noutp)\n     else:\n-        cleft = np.zeros((noutp, left.shape[1]))\n+        cleft = np.zeros((noutp, left.shape[1]), dtype=left.dtype)\n         cleft[: left.shape[0], : left.shape[1]] = left\n     if isinstance(right, Model):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n-        cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright = np.zeros((noutp, right.shape[1]), dtype=right.dtype)\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..1762d76 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -65,20 +65,20 @@ def _coord_matrix(model, pos, noutp):\n         for i in range(model.n_inputs):\n             mat[i, i] = 1\n         if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+            mat = np.roll(mat, noutp - model.n_outputs, axis=0)\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n     if isinstance(left, Model):\n         cleft = _coord_matrix(left, 'left', noutp)\n     else:\n-        cleft = np.zeros((noutp, left.shape[1]))\n+        cleft = np.zeros((noutp, left.shape[1]), dtype=left.dtype)\n         cleft[:left.shape[0], :left.shape[1]] = left\n     if isinstance(right, Model):\n         cright = _coord_matrix(right, 'right', noutp)\n     else:\n-        cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright = np.zeros((noutp, right.shape[1]), dtype=right.dtype)\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n     return np.hstack([cleft, cright])\n def _cdot(left, right):\n     left, right = (right, left)\n", "normalized_occurrence": 1}
