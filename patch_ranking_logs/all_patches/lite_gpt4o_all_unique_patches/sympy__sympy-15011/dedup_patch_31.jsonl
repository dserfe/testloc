{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..f400ffe 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -660,6 +660,17 @@ class _EvaluatorPrinter(object):\n         if not iterable(args):\n             args = [args]\n \n+        # Ensure all MatrixSymbols with invalid identifiers are dummified\n+        if dummify:\n+            from sympy import MatrixSymbol\n+            dummies_dict = {}\n+            for arg in args:\n+                if isinstance(arg, MatrixSymbol) and not self._is_safe_ident(arg.name):\n+                    dummy = Dummy()\n+                    dummies_dict[arg] = dummy\n+            expr = self._subexpr(expr, dummies_dict)\n+            args = [dummies_dict.get(arg, arg) for arg in args]\n+\n         argstrs, expr = self._preprocess(args, expr)\n \n         # Generate argument unpacking and final argument list\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..30fbb64 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -256,6 +256,15 @@ class _EvaluatorPrinter(object):\n         funcbody = []\n         if not iterable(args):\n             args = [args]\n+        if dummify:\n+            from sympy import MatrixSymbol\n+            dummies_dict = {}\n+            for arg in args:\n+                if isinstance(arg, MatrixSymbol) and (not self._is_safe_ident(arg.name)):\n+                    dummy = Dummy()\n+                    dummies_dict[arg] = dummy\n+            expr = self._subexpr(expr, dummies_dict)\n+            args = [dummies_dict.get(arg, arg) for arg in args]\n         argstrs, expr = self._preprocess(args, expr)\n         funcargs = []\n         unpackings = []\n", "normalized_occurrence": 1}
