{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex eb05c35..945a870 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2198,14 +2198,15 @@ class PermutationGroup(Basic):\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                rep_blocks = [r for j, r in enumerate(rep_blocks) if j not in to_remove]\n+                num_blocks = [n for j, n in enumerate(num_blocks) if j not in to_remove]\n+                blocks = [b for j, b in enumerate(blocks) if j not in to_remove]\n \n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex 19182ce..33a202c 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -840,12 +840,13 @@ class PermutationGroup(Basic):\n                 to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n-                        del num_blocks[i], blocks[i]\n-                        to_remove.append(rep_blocks[i])\n+                        to_remove.append(i)\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         minimal = False\n                         break\n-                rep_blocks = [r for r in rep_blocks if r not in to_remove]\n+                rep_blocks = [r for j, r in enumerate(rep_blocks) if j not in to_remove]\n+                num_blocks = [n for j, n in enumerate(num_blocks) if j not in to_remove]\n+                blocks = [b for j, b in enumerate(blocks) if j not in to_remove]\n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n                     num_blocks.append(num_block)\n", "normalized_occurrence": 1}
