{"model_name_or_path": "agentless", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 250c6ee..8ce13f2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1176,6 +1176,13 @@ class Query(BaseExpression):\n         sql, params = self.get_compiler(connection=connection).as_sql()\n         if self.subquery:\n             sql = \"(%s)\" % sql\n+            # Ensure only the necessary fields are included in subquery\n+            if self.alias_refcount:\n+                sql = \"SELECT %s FROM %s\" % (\n+                    \", \".join(connection.ops.quote_name(alias)\n+                              for alias in self.alias_refcount),\n+                    sql[1:-1]\n+                )\n         return sql, params\n \n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4a84de0..3abcd04 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -612,6 +612,8 @@ class Query(BaseExpression):\n         sql, params = self.get_compiler(connection=connection).as_sql()\n         if self.subquery:\n             sql = '(%s)' % sql\n+            if self.alias_refcount:\n+                sql = 'SELECT %s FROM %s' % (', '.join((connection.ops.quote_name(alias) for alias in self.alias_refcount)), sql[1:-1])\n         return (sql, params)\n     def resolve_lookup_value(self, value, can_reuse, allow_joins):\n         if hasattr(value, 'resolve_expression'):\n", "normalized_occurrence": 1}
