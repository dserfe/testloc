{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..1f9f689 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,7 +355,12 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n-        # if initial was provided, it should override the values from instance\n+        # Handle callable defaults for fields with initial values\n+        for field_name, field in self.fields.items():\n+            if callable(field.initial):\n+                object_data[field_name] = field.initial()\n+\n+        # If initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..f381bf6 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,9 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        for field_name, field in self.fields.items():\n+            if callable(field.initial):\n+                object_data[field_name] = field.initial()\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
