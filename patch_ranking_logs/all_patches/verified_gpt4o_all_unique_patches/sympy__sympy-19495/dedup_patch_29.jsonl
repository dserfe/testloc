{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..d24be41 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -240,11 +240,12 @@ class ConditionSet(Set):\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n-        if cond is S.true:\n+        from sympy.core.compatibility import default_sort_key\n+        cond = self.condition.subs(old, new, simultaneous=True)\n+        base = self.base_set.subs(old, new, simultaneous=True)\n+        if not cond.has(Symbol) or cond == S.true:\n             return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        return self.func(self.sym, cond, base).xreplace({old: new}, simultaneous=True)\n \n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..ef0180b 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -89,11 +89,12 @@ class ConditionSet(Set):\n                         return self.func(new, cond.subs(old, new), base)\n                 raise ValueError(filldedent('\\n                    A dummy symbol can only be\\n                    replaced with a symbol having the same\\n                    assumptions or one having a single assumption\\n                    having the same commutativity.\\n                '))\n             return self.func(sym, cond, base)\n-        cond = self.condition.subs(old, new)\n-        base = self.base_set.subs(old, new)\n-        if cond is S.true:\n+        from sympy.core.compatibility import default_sort_key\n+        cond = self.condition.subs(old, new, simultaneous=True)\n+        base = self.base_set.subs(old, new, simultaneous=True)\n+        if not cond.has(Symbol) or cond == S.true:\n             return ConditionSet(new, Contains(new, base), base)\n-        return self.func(self.sym, cond, base)\n+        return self.func(self.sym, cond, base).xreplace({old: new}, simultaneous=True)\n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n             return False\n", "normalized_occurrence": 1}
