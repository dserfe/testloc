{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..7030e10 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,8 +355,11 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n-        # if initial was provided, it should override the values from instance\n+        # Evaluate callable defaults and if initial was provided, it should override the values from instance\n         if initial is not None:\n+            for key, value in initial.items():\n+                if callable(value):\n+                    initial[key] = value()\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n         # It is False by default so overriding self.clean() and failing to call\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..f469afd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -149,6 +149,9 @@ class BaseModelForm(BaseForm, AltersData):\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n         if initial is not None:\n+            for key, value in initial.items():\n+                if callable(value):\n+                    initial[key] = value()\n             object_data.update(initial)\n         self._validate_unique = False\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n", "normalized_occurrence": 2}
