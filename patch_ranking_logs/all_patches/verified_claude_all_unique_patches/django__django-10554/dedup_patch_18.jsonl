{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..8e7401e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -407,59 +407,13 @@ class SQLCompiler:\n             return node.output_field.select_format(self, sql, params)\n         return sql, params\n \n-    def get_combinator_sql(self, combinator, all):\n-        features = self.connection.features\n-        compilers = [\n-            query.get_compiler(self.using, self.connection)\n-            for query in self.query.combined_queries if not query.is_empty()\n-        ]\n-        if not features.supports_slicing_ordering_in_compound:\n-            for query, compiler in zip(self.query.combined_queries, compilers):\n-                if query.low_mark or query.high_mark:\n-                    raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n-                if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n-        parts = ()\n-        for compiler in compilers:\n-            try:\n-                # If the columns list is limited, then all combined queries\n-                # must have the same columns list. Set the selects defined on\n-                # the query on all combined queries, if not already set.\n-                if not compiler.query.values_select and self.query.values_select:\n-                    compiler.query = compiler.query.clone()\n-                    compiler.query.set_values((\n-                        *self.query.extra_select,\n-                        *self.query.values_select,\n-                        *self.query.annotation_select,\n-                    ))\n-                part_sql, part_args = compiler.as_sql()\n-                if compiler.query.combinator:\n-                    # Wrap in a subquery if wrapping in parentheses isn't\n-                    # supported.\n-                    if not features.supports_parentheses_in_compound:\n-                        part_sql = 'SELECT * FROM ({})'.format(part_sql)\n-                    # Add parentheses when combining with compound query if not\n-                    # already added for all compound queries.\n-                    elif not features.supports_slicing_ordering_in_compound:\n-                        part_sql = '({})'.format(part_sql)\n-                parts += ((part_sql, part_args),)\n-            except EmptyResultSet:\n-                # Omit the empty queryset with UNION and with DIFFERENCE if the\n-                # first queryset is nonempty.\n-                if combinator == 'union' or (combinator == 'difference' and parts):\n-                    continue\n-                raise\n-        if not parts:\n-            raise EmptyResultSet\n-        combinator_sql = self.connection.ops.set_operators[combinator]\n-        if all and combinator == 'union':\n-            combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n-        params = []\n-        for part in args_parts:\n-            params.extend(part)\n+\n+        # Ensure the outer query's ORDER BY clause references the correct columns\n+        if self.query.order_by:\n+            # Wrap the union query in a subquery to ensure ordering works correctly\n+            sql = '({})'.format(result[0])\n+            result = ['SELECT * FROM {} t'.format(sql)]\n+\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..339cc4a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -228,43 +228,9 @@ class SQLCompiler:\n         if select_format is FORCE or (select_format and (not self.query.subquery)):\n             return node.output_field.select_format(self, sql, params)\n         return (sql, params)\n-    def get_combinator_sql(self, combinator, all):\n-        features = self.connection.features\n-        compilers = [query.get_compiler(self.using, self.connection) for query in self.query.combined_queries if not query.is_empty()]\n-        if not features.supports_slicing_ordering_in_compound:\n-            for query, compiler in zip(self.query.combined_queries, compilers):\n-                if query.low_mark or query.high_mark:\n-                    raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')\n-                if compiler.get_order_by():\n-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')\n-        parts = ()\n-        for compiler in compilers:\n-            try:\n-                if not compiler.query.values_select and self.query.values_select:\n-                    compiler.query = compiler.query.clone()\n-                    compiler.query.set_values((*self.query.extra_select, *self.query.values_select, *self.query.annotation_select))\n-                part_sql, part_args = compiler.as_sql()\n-                if compiler.query.combinator:\n-                    if not features.supports_parentheses_in_compound:\n-                        part_sql = 'SELECT * FROM ({})'.format(part_sql)\n-                    elif not features.supports_slicing_ordering_in_compound:\n-                        part_sql = '({})'.format(part_sql)\n-                parts += ((part_sql, part_args),)\n-            except EmptyResultSet:\n-                if combinator == 'union' or (combinator == 'difference' and parts):\n-                    continue\n-                raise\n-        if not parts:\n-            raise EmptyResultSet\n-        combinator_sql = self.connection.ops.set_operators[combinator]\n-        if all and combinator == 'union':\n-            combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n-        sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n-        params = []\n-        for part in args_parts:\n-            params.extend(part)\n+        if self.query.order_by:\n+            sql = '({})'.format(result[0])\n+            result = ['SELECT * FROM {} t'.format(sql)]\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
