{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex d82c4a0..6222ca8 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -217,8 +217,10 @@ def as_compatible_data(data, fastpath=False):\n     if isinstance(data, timedelta):\n         data = np.timedelta64(getattr(data, \"value\", data), \"ns\")\n \n-    # we don't want nested self-described arrays\n-    data = getattr(data, \"values\", data)\n+    # we don't want nested self-described arrays, but we only extract .values\n+    # from pandas/xarray objects, not arbitrary objects with a values property\n+    if hasattr(data, \"_repr_inline_\"):  # Check for pandas/xarray objects\n+        data = getattr(data, \"values\", data)\n \n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex de67650..19bcdcc 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -123,7 +123,8 @@ def as_compatible_data(data, fastpath=False):\n         data = np.datetime64(data.value, 'ns')\n     if isinstance(data, timedelta):\n         data = np.timedelta64(getattr(data, 'value', data), 'ns')\n-    data = getattr(data, 'values', data)\n+    if hasattr(data, '_repr_inline_'):\n+        data = getattr(data, 'values', data)\n     if isinstance(data, np.ma.MaskedArray):\n         mask = np.ma.getmaskarray(data)\n         if mask.any():\n", "normalized_occurrence": 2}
