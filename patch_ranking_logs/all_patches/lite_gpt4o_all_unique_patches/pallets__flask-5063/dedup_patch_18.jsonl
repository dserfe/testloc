{"model_name_or_path": "agentless", "instance_id": "pallets__flask-5063", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 7de3e81..52e829e 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1018,20 +1018,22 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         for rule in rules\n     ]\n \n-    headers = (\"Endpoint\", \"Methods\", \"Rule\")\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n     widths = (\n+        max(len(rule.host or \"Default\") for rule in rules),\n         max(len(rule.endpoint) for rule in rules),\n         max(len(methods) for methods in rule_methods),\n         max(len(rule.rule) for rule in rules),\n     )\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}\".format(*widths)\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n \n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*(\"-\" * width for width in widths)))\n \n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        host = rule.host or \"Default\"\n+        click.echo(row.format(host, rule.endpoint, methods, rule.rule).rstrip())\n \n \n cli = FlaskGroup(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex fe39489..cf103a3 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -588,14 +588,15 @@ def routes_command(sort: str, all_methods: bool) -> None:\n     elif sort == 'methods':\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n     rule_methods = [', '.join(sorted(rule.methods - ignored_methods)) for rule in rules]\n-    headers = ('Endpoint', 'Methods', 'Rule')\n-    widths = (max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n+    headers = ('Domain', 'Endpoint', 'Methods', 'Rule')\n+    widths = (max((len(rule.host or 'Default') for rule in rules)), max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n     widths = [max(len(h), w) for h, w in zip(headers, widths)]\n-    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}'.format(*widths)\n+    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}'.format(*widths)\n     click.echo(row.format(*headers).strip())\n     click.echo(row.format(*('-' * width for width in widths)))\n     for rule, methods in zip(rules, rule_methods):\n-        click.echo(row.format(rule.endpoint, methods, rule.rule).rstrip())\n+        host = rule.host or 'Default'\n+        click.echo(row.format(host, rule.endpoint, methods, rule.rule).rstrip())\n cli = FlaskGroup(name='flask', help=\"A general utility script for Flask applications.\\n\\nAn application to load must be given with the '--app' option,\\n'FLASK_APP' environment variable, or with a 'wsgi.py' or 'app.py' file\\nin the current directory.\\n\")\n \n def main() -> None:\n", "normalized_occurrence": 1}
