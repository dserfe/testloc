{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..7ba3eea 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3462,11 +3462,15 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n-            return (\n-                val.assign_coords(**assign_coords)\n-                .expand_dims(expand_dims)\n-                .stack({new_dim: (variable_dim,) + stacking_dims})\n-            )\n+            # Check if the variable is single-dimensional\n+            if len(val.dims) == 1 and val.dims[0] in sample_dims:\n+                return val.expand_dims(variable_dim).assign_coords(**assign_coords)\n+            else:\n+                return (\n+                    val.assign_coords(**assign_coords)\n+                    .expand_dims(expand_dims)\n+                    .stack({new_dim: (variable_dim,) + stacking_dims})\n+                )\n \n         # concatenate the arrays\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..c4d2e8d 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1153,7 +1153,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n             expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n-            return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n+            if len(val.dims) == 1 and val.dims[0] in sample_dims:\n+                return val.expand_dims(variable_dim).assign_coords(**assign_coords)\n+            else:\n+                return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n         data_array = xr.concat(stackable_vars, dim=new_dim)\n         idx = data_array.indexes[new_dim]\n", "normalized_occurrence": 1}
