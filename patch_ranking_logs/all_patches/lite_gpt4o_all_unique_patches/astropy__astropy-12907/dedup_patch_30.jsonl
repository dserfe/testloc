{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..d132e0e 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -201,18 +201,21 @@ def _coord_matrix(model, pos, noutp):\n         return mat\n     if not model.separable:\n         # this does not work for more than 2 coordinates\n-        mat = np.zeros((noutp, model.n_inputs))\n-        if pos == 'left':\n-            mat[:model.n_outputs, : model.n_inputs] = 1\n-        else:\n-            mat[-model.n_outputs:, -model.n_inputs:] = 1\n+        n_inputs = model.n_inputs\n+        mat = np.zeros((noutp, n_inputs))\n+        for i in range(model.n_outputs):\n+            if pos == 'left':\n+                mat[i, :n_inputs] = 1\n+            else:\n+                mat[-i-1, -n_inputs:] = 1\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        n_inputs = model.n_inputs\n+        mat = np.zeros((noutp, n_inputs))\n+        for i in range(min(model.n_outputs, noutp)):\n+            if pos == 'left':\n+                mat[i, i] = 1\n+            else:\n+                mat[-i-1, -(i+1)] = 1\n     return mat\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..ec72ba8 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -55,17 +55,21 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n     if not model.separable:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        if pos == 'left':\n-            mat[:model.n_outputs, :model.n_inputs] = 1\n-        else:\n-            mat[-model.n_outputs:, -model.n_inputs:] = 1\n+        n_inputs = model.n_inputs\n+        mat = np.zeros((noutp, n_inputs))\n+        for i in range(model.n_outputs):\n+            if pos == 'left':\n+                mat[i, :n_inputs] = 1\n+            else:\n+                mat[-i - 1, -n_inputs:] = 1\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+        n_inputs = model.n_inputs\n+        mat = np.zeros((noutp, n_inputs))\n+        for i in range(min(model.n_outputs, noutp)):\n+            if pos == 'left':\n+                mat[i, i] = 1\n+            else:\n+                mat[-i - 1, -(i + 1)] = 1\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n", "normalized_occurrence": 1}
