{"model_name_or_path": "agentless", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..8d32489 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2048,8 +2048,19 @@ class InlineModelAdmin(BaseModelAdmin):\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n \n+        if not self.has_change_permission(request, obj):\n+            defaults['can_delete'] = False\n+            defaults['extra'] = 0\n+            defaults['max_num'] = 0\n+\n         class DeleteProtectedModelForm(base_model_form):\n \n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                if not can_change and not self.instance._state.adding:\n+                    for field in self.fields.values():\n+                        field.disabled = True\n+\n             def hand_clean_DELETE(self):\n                 \"\"\"\n                 We don't validate the 'DELETE' field itself because on\n@@ -2159,4 +2170,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..9b08728 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1004,7 +1004,16 @@ class InlineModelAdmin(BaseModelAdmin):\n         base_model_form = defaults['form']\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n+        if not self.has_change_permission(request, obj):\n+            defaults['can_delete'] = False\n+            defaults['extra'] = 0\n+            defaults['max_num'] = 0\n         class DeleteProtectedModelForm(base_model_form):\n+            def __init__(self, *args, **kwargs):\n+                super().__init__(*args, **kwargs)\n+                if not can_change and (not self.instance._state.adding):\n+                    for field in self.fields.values():\n+                        field.disabled = True\n             def hand_clean_DELETE(self):\n                 if self.cleaned_data.get(DELETION_FIELD_NAME, False):\n                     using = router.db_for_write(self._meta.model)\n", "normalized_occurrence": 1}
