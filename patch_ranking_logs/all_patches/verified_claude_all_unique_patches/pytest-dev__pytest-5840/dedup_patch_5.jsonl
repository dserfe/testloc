{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5840", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex be5f299..7d173c3 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -640,7 +640,26 @@ class Session(nodes.FSCollector):\n                     \"file or package not found: \" + arg + \" (missing __init__.py?)\"\n                 )\n             raise UsageError(\"file not found: \" + arg)\n-        parts[0] = path.realpath()\n+        # Preserve the original case of the path on Windows\n+        if os.name == 'nt':\n+            real_path = path.realpath()\n+            # Get the actual case-preserved path from the filesystem\n+            try:\n+                import ctypes\n+                GetLongPathNameW = ctypes.windll.kernel32.GetLongPathNameW\n+                GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n+                \n+                short_buffer = ctypes.create_unicode_buffer(260)  # MAX_PATH\n+                long_buffer = ctypes.create_unicode_buffer(260)  # MAX_PATH\n+                \n+                GetShortPathNameW(str(real_path), short_buffer, 260)\n+                GetLongPathNameW(short_buffer.value, long_buffer, 260)\n+                \n+                parts[0] = str(long_buffer.value)\n+            except:\n+                parts[0] = real_path\n+        else:\n+            parts[0] = path.realpath()\n         return parts\n \n     def matchnodes(self, matching, names):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex ea2d5dc..58850bf 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -419,7 +419,21 @@ class Session(nodes.FSCollector):\n             if self.config.option.pyargs:\n                 raise UsageError('file or package not found: ' + arg + ' (missing __init__.py?)')\n             raise UsageError('file not found: ' + arg)\n-        parts[0] = path.realpath()\n+        if os.name == 'nt':\n+            real_path = path.realpath()\n+            try:\n+                import ctypes\n+                GetLongPathNameW = ctypes.windll.kernel32.GetLongPathNameW\n+                GetShortPathNameW = ctypes.windll.kernel32.GetShortPathNameW\n+                short_buffer = ctypes.create_unicode_buffer(260)\n+                long_buffer = ctypes.create_unicode_buffer(260)\n+                GetShortPathNameW(str(real_path), short_buffer, 260)\n+                GetLongPathNameW(short_buffer.value, long_buffer, 260)\n+                parts[0] = str(long_buffer.value)\n+            except:\n+                parts[0] = real_path\n+        else:\n+            parts[0] = path.realpath()\n         return parts\n \n     def matchnodes(self, matching, names):\n", "normalized_occurrence": 1}
