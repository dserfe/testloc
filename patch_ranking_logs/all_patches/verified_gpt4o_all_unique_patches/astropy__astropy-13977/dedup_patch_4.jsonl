{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ef71d2c..7a11cd6 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -669,15 +669,18 @@ class Quantity(np.ndarray):\n             input_ = getattr(input_, \"value\", input_)\n             arrays.append(converter(input_) if converter else input_)\n \n-        # Call our superclass's __array_ufunc__\n-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n-        # If unit is None, a plain array is expected (e.g., comparisons), which\n-        # means we're done.\n-        # We're also done if the result was None (for method 'at') or\n-        # NotImplemented, which can happen if other inputs/outputs override\n-        # __array_ufunc__; hopefully, they can then deal with us.\n-        if unit is None or result is None or result is NotImplemented:\n-            return result\n+        try:\n+            # Call our superclass's __array_ufunc__\n+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n+            # If unit is None, a plain array is expected (e.g., comparisons), which\n+            # means we're done.\n+            # We're also done if the result was None (for method 'at') or\n+            # NotImplemented, which can happen if other inputs/outputs override\n+            # __array_ufunc__; hopefully, they can then deal with us.\n+            if unit is None or result is None or result is NotImplemented:\n+                return result\n+        except ValueError:\n+            return NotImplemented\n \n         return self._result_as_quantity(result, unit, out)\n \n", "occurrence": 2, "normalized_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 9a6c1e2..8e71cd2 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -208,9 +208,12 @@ class Quantity(np.ndarray):\n         for input_, converter in zip(inputs, converters):\n             input_ = getattr(input_, 'value', input_)\n             arrays.append(converter(input_) if converter else input_)\n-        result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n-        if unit is None or result is None or result is NotImplemented:\n-            return result\n+        try:\n+            result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n+            if unit is None or result is None or result is NotImplemented:\n+                return result\n+        except ValueError:\n+            return NotImplemented\n         return self._result_as_quantity(result, unit, out)\n     def _result_as_quantity(self, result, unit, out):\n         if isinstance(result, (tuple, list)):\n", "normalized_occurrence": 2}
