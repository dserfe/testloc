{"model_name_or_path": "agentless", "instance_id": "django__django-13794", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 9115325..000ddbc 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -671,12 +671,18 @@ def unordered_list(value, autoescape=True):\n # INTEGERS        #\n ###################\n \n+from django.utils.functional import Promise\n+\n @register.filter(is_safe=False)\n def add(value, arg):\n     \"\"\"Add the arg to the value.\"\"\"\n     try:\n         return int(value) + int(arg)\n     except (ValueError, TypeError):\n+        # Check for lazy strings (Promise objects)\n+        if isinstance(value, Promise) or isinstance(arg, Promise):\n+            value = str(value)\n+            arg = str(arg)\n         try:\n             return value + arg\n         except Exception:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 3e399af..00b92fa 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -339,11 +339,15 @@ def unordered_list(value, autoescape=True):\n             output.append('%s<li>%s%s</li>' % (indent, escaper(item), sublist))\n         return '\\n'.join(output)\n     return mark_safe(list_formatter(value))\n+from django.utils.functional import Promise\n @register.filter(is_safe=False)\n def add(value, arg):\n     try:\n         return int(value) + int(arg)\n     except (ValueError, TypeError):\n+        if isinstance(value, Promise) or isinstance(arg, Promise):\n+            value = str(value)\n+            arg = str(arg)\n         try:\n             return value + arg\n         except Exception:\n", "normalized_occurrence": 1}
