{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13417", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..6b010b4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -164,12 +164,28 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self._has_groupby = False  # Track if query has GROUP BY\n \n         # SQL-related attributes\n         # Select and related select clauses are expressions to use in the\n         # SELECT clause of the query.\n         # The select is used for cases where we want to set up the select\n         # clause to contain other than default fields (values(), subqueries...)\n+        \n+    @property\n+    def has_groupby(self):\n+        \"\"\"Return True if the query contains a GROUP BY clause.\"\"\"\n+        return self._has_groupby\n+        \n+    def add_annotation(self, annotation, alias, is_summary=False):\n+        \"\"\"Add a single annotation expression to the Query.\"\"\"\n+        if is_summary:\n+            # Annotations that are aggregations (is_summary=True) force grouping\n+            self._has_groupby = True\n+            # Disable default ordering when GROUP BY is added since it may not be included\n+            # in the GROUP BY clause and could cause invalid queries\n+            self.default_ordering = False\n+        return super().add_annotation(annotation, alias, is_summary)\n         # Note that annotations go to annotations dictionary.\n         self.select = ()\n         self.where = where()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..b986c42 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -94,6 +94,15 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self._has_groupby = False\n+    @property\n+    def has_groupby(self):\n+        return self._has_groupby\n+    def add_annotation(self, annotation, alias, is_summary=False):\n+        if is_summary:\n+            self._has_groupby = True\n+            self.default_ordering = False\n+        return super().add_annotation(annotation, alias, is_summary)\n         self.select = ()\n         self.where = where()\n         self.where_class = where\n", "normalized_occurrence": 1}
