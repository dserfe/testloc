{"model_name_or_path": "agentless", "instance_id": "django__django-11905", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 6d1043b..10dd044 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,6 +462,11 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def process_rhs(self, qn, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(f\"Invalid value for {self.lookup_name} lookup: {self.rhs}. Must be a boolean.\")\n+        return super().process_rhs(qn, connection)\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n@@ -475,6 +480,11 @@ class Regex(BuiltinLookup):\n     lookup_name = 'regex'\n     prepare_rhs = False\n \n+    def process_rhs(self, qn, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(f\"Invalid value for {self.lookup_name} lookup: {self.rhs}. Must be a boolean.\")\n+        return super().process_rhs(qn, connection)\n+\n     def as_sql(self, compiler, connection):\n         if self.lookup_name in connection.operators:\n             return super().as_sql(compiler, connection)\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n+    def process_rhs(self, qn, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(f'Invalid value for {self.lookup_name} lookup: {self.rhs}. Must be a boolean.')\n+        return super().process_rhs(qn, connection)\n+    def process_rhs(self, qn, connection):\n+        if not isinstance(self.rhs, bool):\n+            raise ValueError(f'Invalid value for {self.lookup_name} lookup: {self.rhs}. Must be a boolean.')\n+        return super().process_rhs(qn, connection)", "normalized_occurrence": 1}
