{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..44345e6 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,45 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            kbd_text = node.astext()\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Handle compound keystrokes\n+            if any(sep in kbd_text for sep in ('-', '+', '^')):\n+                # Only split if there's a separator not at start/end\n+                parts = []\n+                curr = ''\n+                prev_char = ''\n+                for i, char in enumerate(kbd_text):\n+                    if char in ('-', '+', '^'):\n+                        # Check if it's a separator or part of a keystroke\n+                        if (prev_char and prev_char not in ('-', '+', '^') and \n+                            i + 1 < len(kbd_text) and kbd_text[i + 1] not in ('-', '+', '^')):\n+                            if curr:\n+                                parts.append(curr)\n+                            parts.append(char)\n+                            curr = ''\n+                        else:\n+                            curr += char\n+                    else:\n+                        curr += char\n+                    prev_char = char\n+                if curr:\n+                    parts.append(curr)\n+                \n+                if len(parts) > 1:  # Has actual separators\n+                    for i, part in enumerate(parts):\n+                        if part in ('-', '+', '^'):  # Is separator\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(self.encode(part))\n+                            self.body.append('</kbd>')\n+                else:  # Single keystroke containing separator char\n+                    self.body.append(self.encode(kbd_text))\n+            else:\n+                self.body.append(self.encode(kbd_text))\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..2e633c6 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,45 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            kbd_text = node.astext()\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Handle compound keystrokes\n+            if any(sep in kbd_text for sep in ('-', '+', '^')):\n+                # Only split if there's a separator not at start/end\n+                parts = []\n+                curr = ''\n+                prev_char = ''\n+                for i, char in enumerate(kbd_text):\n+                    if char in ('-', '+', '^'):\n+                        # Check if it's a separator or part of a keystroke\n+                        if (prev_char and prev_char not in ('-', '+', '^') and \n+                            i + 1 < len(kbd_text) and kbd_text[i + 1] not in ('-', '+', '^')):\n+                            if curr:\n+                                parts.append(curr)\n+                            parts.append(char)\n+                            curr = ''\n+                        else:\n+                            curr += char\n+                    else:\n+                        curr += char\n+                    prev_char = char\n+                if curr:\n+                    parts.append(curr)\n+                \n+                if len(parts) > 1:  # Has actual separators\n+                    for i, part in enumerate(parts):\n+                        if part in ('-', '+', '^'):  # Is separator\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(self.encode(part))\n+                            self.body.append('</kbd>')\n+                else:  # Single keystroke containing separator char\n+                    self.body.append(self.encode(kbd_text))\n+            else:\n+                self.body.append(self.encode(kbd_text))\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..6205368 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -324,7 +324,38 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            kbd_text = node.astext()\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            if any((sep in kbd_text for sep in ('-', '+', '^'))):\n+                parts = []\n+                curr = ''\n+                prev_char = ''\n+                for i, char in enumerate(kbd_text):\n+                    if char in ('-', '+', '^'):\n+                        if prev_char and prev_char not in ('-', '+', '^') and (i + 1 < len(kbd_text)) and (kbd_text[i + 1] not in ('-', '+', '^')):\n+                            if curr:\n+                                parts.append(curr)\n+                            parts.append(char)\n+                            curr = ''\n+                        else:\n+                            curr += char\n+                    else:\n+                        curr += char\n+                    prev_char = char\n+                if curr:\n+                    parts.append(curr)\n+                if len(parts) > 1:\n+                    for i, part in enumerate(parts):\n+                        if part in ('-', '+', '^'):\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(self.encode(part))\n+                            self.body.append('</kbd>')\n+                else:\n+                    self.body.append(self.encode(kbd_text))\n+            else:\n+                self.body.append(self.encode(kbd_text))\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..9ddaaf6 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -297,7 +297,38 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            kbd_text = node.astext()\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            if any((sep in kbd_text for sep in ('-', '+', '^'))):\n+                parts = []\n+                curr = ''\n+                prev_char = ''\n+                for i, char in enumerate(kbd_text):\n+                    if char in ('-', '+', '^'):\n+                        if prev_char and prev_char not in ('-', '+', '^') and (i + 1 < len(kbd_text)) and (kbd_text[i + 1] not in ('-', '+', '^')):\n+                            if curr:\n+                                parts.append(curr)\n+                            parts.append(char)\n+                            curr = ''\n+                        else:\n+                            curr += char\n+                    else:\n+                        curr += char\n+                    prev_char = char\n+                if curr:\n+                    parts.append(curr)\n+                if len(parts) > 1:\n+                    for i, part in enumerate(parts):\n+                        if part in ('-', '+', '^'):\n+                            self.body.append(part)\n+                        else:\n+                            self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(self.encode(part))\n+                            self.body.append('</kbd>')\n+                else:\n+                    self.body.append(self.encode(kbd_text))\n+            else:\n+                self.body.append(self.encode(kbd_text))\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
