{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..20a4a1e 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -7,6 +8,7 @@ from sympy.assumptions import ask, Q  # type: ignore\n \n \n def refine(expr, assumptions=True):\n+    from sympy.functions.elementary.complexes import arg\n     \"\"\"\n     Simplify an expression using assumptions.\n \n@@ -66,6 +68,24 @@ def refine(expr, assumptions=True):\n     return refine(new_expr, assumptions)\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> from sympy.abc import x\n+    >>> refine_arg(arg(x), Q.positive(x))\n+    0\n+    \"\"\"\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return S.Zero\n+    return expr\n+\n def refine_abs(expr, assumptions):\n     \"\"\"\n     Handler for the absolute value.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..c27da4b 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -3,6 +3,7 @@ from sympy.core import S, Add, Expr, Basic, Mul\n from sympy.logic.boolalg import Boolean\n from sympy.assumptions import ask, Q\n def refine(expr, assumptions=True):\n+    from sympy.functions.elementary.complexes import arg\n     if not isinstance(expr, Basic):\n         return expr\n     if not expr.is_Atom:\n@@ -22,6 +23,11 @@ def refine(expr, assumptions=True):\n     if not isinstance(new_expr, Expr):\n         return new_expr\n     return refine(new_expr, assumptions)\n+def refine_arg(expr, assumptions):\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return S.Zero\n+    return expr\n def refine_abs(expr, assumptions):\n     from sympy.core.logic import fuzzy_not\n     from sympy import Abs\n", "normalized_occurrence": 1}
