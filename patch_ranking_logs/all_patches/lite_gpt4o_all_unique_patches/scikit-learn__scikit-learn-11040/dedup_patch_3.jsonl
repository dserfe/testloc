{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..1e66a2a 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -328,6 +328,12 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors does not take {type(n_neighbors).__name__} value, \"\n+                    \"enter integer value\"\n+                )\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -468,6 +474,12 @@ class KNeighborsMixin(object):\n             n_neighbors = self.n_neighbors\n \n         # kneighbors does the None handling.\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(\n+                    f\"n_neighbors does not take {type(n_neighbors).__name__} value, \"\n+                    \"enter integer value\"\n+                )\n         if X is not None:\n             X = check_array(X, accept_sparse='csr')\n             n_samples1 = X.shape[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..90e9fac 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -162,6 +162,9 @@ class KNeighborsMixin(object):\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(f'n_neighbors does not take {type(n_neighbors).__name__} value, enter integer value')\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -219,6 +222,9 @@ class KNeighborsMixin(object):\n     def kneighbors_graph(self, X=None, n_neighbors=None, mode='connectivity'):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, (int, np.integer)):\n+                raise TypeError(f'n_neighbors does not take {type(n_neighbors).__name__} value, enter integer value')\n         if X is not None:\n             X = check_array(X, accept_sparse='csr')\n             n_samples1 = X.shape[0]\n", "normalized_occurrence": 1}
