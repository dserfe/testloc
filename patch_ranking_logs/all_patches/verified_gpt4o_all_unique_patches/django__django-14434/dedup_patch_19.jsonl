{"model_name_or_path": "agentless", "instance_id": "django__django-14434", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..da8ea7a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -966,8 +966,8 @@ class Query(BaseExpression):\n             if (reuse is None or a in reuse) and j.equals(join)\n         ]\n         if reuse_aliases:\n-            if join.table_alias in reuse_aliases:\n-                reuse_alias = join.table_alias\n+            if str(join.table_alias) in reuse_aliases:\n+                reuse_alias = str(join.table_alias)\n             else:\n                 # Reuse the most recent alias of the joined table\n                 # (a many-to-many relation may be joined multiple times).\n@@ -976,7 +976,7 @@ class Query(BaseExpression):\n             return reuse_alias\n \n         # No reuse is possible, so we need a new alias.\n-        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n+        alias, _ = self.table_alias(str(join.table_name), create=True, filtered_relation=join.filtered_relation)\n         if join.join_type:\n             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:\n                 join_type = LOUTER\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..040d258 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -526,13 +526,13 @@ class Query(BaseExpression):\n     def join(self, join, reuse=None):\n         reuse_aliases = [a for a, j in self.alias_map.items() if (reuse is None or a in reuse) and j.equals(join)]\n         if reuse_aliases:\n-            if join.table_alias in reuse_aliases:\n-                reuse_alias = join.table_alias\n+            if str(join.table_alias) in reuse_aliases:\n+                reuse_alias = str(join.table_alias)\n             else:\n                 reuse_alias = reuse_aliases[-1]\n             self.ref_alias(reuse_alias)\n             return reuse_alias\n-        alias, _ = self.table_alias(join.table_name, create=True, filtered_relation=join.filtered_relation)\n+        alias, _ = self.table_alias(str(join.table_name), create=True, filtered_relation=join.filtered_relation)\n         if join.join_type:\n             if self.alias_map[join.parent_alias].join_type == LOUTER or join.nullable:\n                 join_type = LOUTER\n", "normalized_occurrence": 1}
