{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..9ed456c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -454,12 +454,20 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n+        if self.query.order_by:\n+            order_by_sql, order_by_params = self.get_order_by()\n+            order_by_clause = ' ORDER BY ' + ', '.join(ob[0] for ob in order_by_sql)\n+        else:\n+            order_by_clause = ''\n+            order_by_params = []\n+\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = [' {} '.format(combinator_sql).join(sql_parts) + order_by_clause]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        params.extend(order_by_params)\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..0e4ce23 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -259,12 +259,19 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n+        if self.query.order_by:\n+            order_by_sql, order_by_params = self.get_order_by()\n+            order_by_clause = ' ORDER BY ' + ', '.join((ob[0] for ob in order_by_sql))\n+        else:\n+            order_by_clause = ''\n+            order_by_params = []\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = [' {} '.format(combinator_sql).join(sql_parts) + order_by_clause]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        params.extend(order_by_params)\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
