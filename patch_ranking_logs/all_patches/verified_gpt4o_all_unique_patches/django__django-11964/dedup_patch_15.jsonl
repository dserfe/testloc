{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..512c636 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1009,7 +1009,7 @@ class CharField(Field):\n \n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n-            return value\n+            return value.value if isinstance(value, enum.Enum) else value\n         return str(value)\n \n     def get_prep_value(self, value):\n@@ -1757,7 +1757,7 @@ class IntegerField(Field):\n         if value is None:\n             return None\n         try:\n-            return int(value)\n+            return int(value.value) if isinstance(value, enum.Enum) else int(value)\n         except (TypeError, ValueError) as e:\n             raise e.__class__(\n                 \"Field '%s' expected a number but got %r.\" % (self.name, value),\n@@ -1770,7 +1770,7 @@ class IntegerField(Field):\n         if value is None:\n             return value\n         try:\n-            return int(value)\n+            return int(value.value) if isinstance(value, enum.Enum) else int(value)\n         except (TypeError, ValueError):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..21f4afa 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -486,7 +486,7 @@ class CharField(Field):\n         return 'CharField'\n     def to_python(self, value):\n         if isinstance(value, str) or value is None:\n-            return value\n+            return value.value if isinstance(value, enum.Enum) else value\n         return str(value)\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n@@ -884,7 +884,7 @@ class IntegerField(Field):\n         if value is None:\n             return None\n         try:\n-            return int(value)\n+            return int(value.value) if isinstance(value, enum.Enum) else int(value)\n         except (TypeError, ValueError) as e:\n             raise e.__class__(\"Field '%s' expected a number but got %r.\" % (self.name, value)) from e\n     def get_internal_type(self):\n@@ -893,7 +893,7 @@ class IntegerField(Field):\n         if value is None:\n             return value\n         try:\n-            return int(value)\n+            return int(value.value) if isinstance(value, enum.Enum) else int(value)\n         except (TypeError, ValueError):\n             raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n     def formfield(self, **kwargs):\n", "normalized_occurrence": 1}
