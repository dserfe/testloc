{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..8648720 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1094,7 +1094,14 @@ class NumpyDocstring(GoogleDocstring):\n             _name, _, _type = self._partition_field_on_colon(line)\n         else:\n             _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n+        _name = _name.strip()\n+        _type = _type.strip()\n+        # Ensure optional is properly rendered\n+        if \"optional\" in _type:\n+            _optional = \"optional\"\n+            _type = _type.replace(\", optional\", \"\").replace(\"optional\", \"\")\n+        else:\n+            _optional = None\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(\n             _type,\n@@ -1107,6 +1114,10 @@ class NumpyDocstring(GoogleDocstring):\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+        # Reformat the name and type to include optional if needed\n+        if _optional:\n+            _type = f\"{_type}, {_optional}\"\n+\n         return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..c640284 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -664,7 +664,13 @@ class NumpyDocstring(GoogleDocstring):\n             _name, _, _type = self._partition_field_on_colon(line)\n         else:\n             _name, _type = (line, '')\n-        _name, _type = (_name.strip(), _type.strip())\n+        _name = _name.strip()\n+        _type = _type.strip()\n+        if 'optional' in _type:\n+            _optional = 'optional'\n+            _type = _type.replace(', optional', '').replace('optional', '')\n+        else:\n+            _optional = None\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n         if prefer_type and (not _type):\n@@ -672,6 +678,8 @@ class NumpyDocstring(GoogleDocstring):\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+        if _optional:\n+            _type = f'{_type}, {_optional}'\n         return (_name, _type, _desc)\n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n", "normalized_occurrence": 1}
