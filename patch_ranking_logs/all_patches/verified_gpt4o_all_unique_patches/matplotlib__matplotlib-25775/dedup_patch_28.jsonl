{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..c037f1a 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -91,6 +91,7 @@ def _get_text_metrics_with_cache_impl(\n     \"fontvariant\": [\"variant\"],\n     \"verticalalignment\": [\"va\"],\n     \"fontweight\": [\"weight\"],\n+    \"antialiased\": [\"aa\"],\n })\n class Text(Artist):\n     \"\"\"Handle storing and drawing of text in window or data coordinates.\"\"\"\n@@ -115,8 +116,8 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n-                 **kwargs\n-                 ):\n+                 antialiased=None,    # defaults to rcParams['text.antialiased']\n+                 **kwargs):\n         \"\"\"\n         Create a `.Text` instance at *x*, *y* with string *text*.\n \n@@ -150,6 +151,9 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        if antialiased is None:\n+            antialiased = mpl.rcParams[\"text.antialiased\"]\n+        self.set_antialiased(antialiased)\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -187,6 +191,8 @@ class Text(Artist):\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n+        if self.get_antialiased() is None:\n+            self.set_antialiased(mpl.rcParams[\"text.antialiased\"])\n \n     def update(self, kwargs):\n         # docstring inherited\n@@ -770,7 +776,20 @@ class Text(Artist):\n         renderer.close_group('text')\n         self.stale = False\n \n-    def get_color(self):\n+    def get_antialiased(self):\n+        \"\"\"Return the antialias setting for the text.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased text.\n+\n+        Parameters\n+        ----------\n+        b : bool or None\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n         \"\"\"Return the color of the text.\"\"\"\n         return self._color\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..5818975 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -35,17 +35,20 @@ def _get_text_metrics_with_cache(renderer, text, fontprop, ismath, dpi):\n def _get_text_metrics_with_cache_impl(renderer_ref, text, fontprop, ismath, dpi):\n     return renderer_ref().get_text_width_height_descent(text, fontprop, ismath)\n @_docstring.interpd\n-@_api.define_aliases({'color': ['c'], 'fontfamily': ['family'], 'fontproperties': ['font', 'font_properties'], 'horizontalalignment': ['ha'], 'multialignment': ['ma'], 'fontname': ['name'], 'fontsize': ['size'], 'fontstretch': ['stretch'], 'fontstyle': ['style'], 'fontvariant': ['variant'], 'verticalalignment': ['va'], 'fontweight': ['weight']})\n+@_api.define_aliases({'color': ['c'], 'fontfamily': ['family'], 'fontproperties': ['font', 'font_properties'], 'horizontalalignment': ['ha'], 'multialignment': ['ma'], 'fontname': ['name'], 'fontsize': ['size'], 'fontstretch': ['stretch'], 'fontstyle': ['style'], 'fontvariant': ['variant'], 'verticalalignment': ['va'], 'fontweight': ['weight'], 'antialiased': ['aa']})\n class Text(Artist):\n     zorder = 3\n     _charsize_cache = dict()\n     def __repr__(self):\n         return f'Text({self._x}, {self._y}, {self._text!r})'\n-    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, **kwargs):\n+    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, antialiased=None, **kwargs):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        if antialiased is None:\n+            antialiased = mpl.rcParams['text.antialiased']\n+        self.set_antialiased(antialiased)\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n@@ -65,6 +68,8 @@ class Text(Artist):\n             linespacing = 1.2\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n+        if self.get_antialiased() is None:\n+            self.set_antialiased(mpl.rcParams['text.antialiased'])\n     def update(self, kwargs):\n         kwargs = cbook.normalize_kwargs(kwargs, Text)\n         sentinel = object()\n@@ -391,7 +396,11 @@ class Text(Artist):\n         gc.restore()\n         renderer.close_group('text')\n         self.stale = False\n-    def get_color(self):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         return self._color\n     def get_fontproperties(self):\n         return self._fontproperties\n", "normalized_occurrence": 1}
