{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..b5f72b1 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -917,8 +917,9 @@ class PrettyPrinter(Printer):\n                 else:\n                     #We always wrap the measure numbers in\n                     #parentheses\n-                    arg_str = self._print(\n-                        v).parens()[0]\n+                    arg_str = self._print(v).parens()[0]\n+                    vectstr = prettyForm(k._pretty_form)\n+                    vectstr.baseline = arg_str.baseline\n \n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n@@ -929,37 +930,13 @@ class PrettyPrinter(Printer):\n         elif o1[0].startswith(\" \"):\n             o1[0] = o1[0][1:]\n         #Fixing the newlines\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            # XXX: What is this hack?\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j+1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' '*(lengths[-1] -\n-                                                   len(parts[j])+\n-                                                   3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    strs[j] += ' '*(lengths[-1]+3)\n+        outstr = \" + \".join(o1)\n+        outstr = outstr.replace(\" + -\", \" - \")\n+        outstr = outstr.replace(\"( - \", \"(-\")\n+        outstr_form = prettyForm(outstr)\n+        mid = max(outstr_form.height() // 2, 1)\n+        outstr_form.baseline = mid\n+        return outstr_form\n \n         return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..78a2abd 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -661,36 +661,21 @@ class PrettyPrinter(Printer):\n                     o1.append(u'(-1) ' + k._pretty_form)\n                 else:\n                     arg_str = self._print(v).parens()[0]\n+                    vectstr = prettyForm(k._pretty_form)\n+                    vectstr.baseline = arg_str.baseline\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n         if o1[0].startswith(u' + '):\n             o1[0] = o1[0][3:]\n         elif o1[0].startswith(' '):\n             o1[0] = o1[0][1:]\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'⎞', u'⎞' + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j + 1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    strs[j] += ' ' * (lengths[-1] + 3)\n+        outstr = ' + '.join(o1)\n+        outstr = outstr.replace(' + -', ' - ')\n+        outstr = outstr.replace('( - ', '(-')\n+        outstr_form = prettyForm(outstr)\n+        mid = max(outstr_form.height() // 2, 1)\n+        outstr_form.baseline = mid\n+        return outstr_form\n         return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n", "normalized_occurrence": 1}
