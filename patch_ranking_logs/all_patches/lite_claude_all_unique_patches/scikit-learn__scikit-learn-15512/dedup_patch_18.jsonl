{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..94245e8 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,14 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        warnings.warn(\"Affinity propagation did not converge, this model \"\n+                      \"will not have any cluster centers.\", ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return cluster_centers_indices, labels, it + 1\n+        else:\n+            return cluster_centers_indices, labels\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n@@ -220,8 +228,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n     else:\n-        warnings.warn(\"Affinity propagation did not converge, this model \"\n-                      \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..e81a5e9 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -71,6 +71,13 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print('Did not converge')\n+        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        if return_n_iter:\n+            return (cluster_centers_indices, labels, it + 1)\n+        else:\n+            return (cluster_centers_indices, labels)\n     I = np.flatnonzero(E)\n     K = I.size\n     if K > 0:\n@@ -86,7 +93,6 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n     else:\n-        warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n     if return_n_iter:\n", "normalized_occurrence": 1}
