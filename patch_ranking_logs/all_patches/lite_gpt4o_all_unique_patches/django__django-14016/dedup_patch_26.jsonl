{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..9f5368a 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,6 +38,14 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n+        def convert_to_list(value):\n+            if isinstance(value, dict):\n+                value = value.items()\n+            elif hasattr(value, '__iter__') and not isinstance(value, str):\n+                value = list(value)\n+            return value\n+\n+        kwargs = {k: convert_to_list(v) for k, v in kwargs.items()}\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..a9222d6 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -16,6 +16,13 @@ class Q(tree.Node):\n     default = AND\n     conditional = True\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n+        def convert_to_list(value):\n+            if isinstance(value, dict):\n+                value = value.items()\n+            elif hasattr(value, '__iter__') and (not isinstance(value, str)):\n+                value = list(value)\n+            return value\n+        kwargs = {k: convert_to_list(v) for k, v in kwargs.items()}\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "normalized_occurrence": 1}
