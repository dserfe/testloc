{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..e53a91a 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -965,6 +965,43 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        def is_builtin_all_or_any(node):\n+            return (\n+                isinstance(node, ast.Name)\n+                and node.id in {\"all\", \"any\"}\n+            ) or (\n+                isinstance(node, ast.Attribute)\n+                and isinstance(node.value, ast.Name)\n+                and node.value.id == \"builtins\"\n+                and node.attr in {\"all\", \"any\"}\n+            )\n+\n+        if is_builtin_all_or_any(call.func):\n+            if len(call.args) != 1:\n+                return self.generic_visit(call)\n+\n+            arg, = call.args\n+            arg_res, arg_expl = self.visit(arg)\n+\n+            result_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], arg_res))\n+\n+            if_expr = ast.If(\n+                ast.UnaryOp(ast.Not(), ast.Call(call.func, [ast.Name(result_var, ast.Load())], [])),\n+                self.on_failure,\n+                []\n+            )\n+            self.statements.append(if_expr)\n+\n+            for_loop = ast.For(\n+                ast.arg(arg='item', annotation=None),\n+                ast.Name(result_var, ast.Load()),\n+                [ast.If(ast.UnaryOp(ast.Not(), ast.Name('item', ast.Load())), self.on_failure, [])],\n+                []\n+            )\n+            self.statements.append(for_loop)\n+\n+            return ast.Name(result_var, ast.Load()), self.explanation_param(self.display(ast.Name(result_var, ast.Load())))\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1118,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..b7e7975 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,21 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        def is_builtin_all_or_any(node):\n+            return isinstance(node, ast.Name) and node.id in {'all', 'any'} or (isinstance(node, ast.Attribute) and isinstance(node.value, ast.Name) and (node.value.id == 'builtins') and (node.attr in {'all', 'any'}))\n+        if is_builtin_all_or_any(call.func):\n+            if len(call.args) != 1:\n+                return self.generic_visit(call)\n+            arg, = call.args\n+            arg_res, arg_expl = self.visit(arg)\n+            result_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], arg_res))\n+            if_expr = ast.If(ast.UnaryOp(ast.Not(), ast.Call(call.func, [ast.Name(result_var, ast.Load())], [])), self.on_failure, [])\n+            self.statements.append(if_expr)\n+            for_loop = ast.For(ast.arg(arg='item', annotation=None), ast.Name(result_var, ast.Load()), [ast.If(ast.UnaryOp(ast.Not(), ast.Name('item', ast.Load())), self.on_failure, [])], [])\n+            self.statements.append(for_loop)\n+            return (ast.Name(result_var, ast.Load()), self.explanation_param(self.display(ast.Name(result_var, ast.Load()))))\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
