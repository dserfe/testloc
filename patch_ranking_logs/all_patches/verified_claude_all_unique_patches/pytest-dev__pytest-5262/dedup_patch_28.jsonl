{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..f3960f6 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -432,9 +432,9 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, \"replace\")\n-        elif _PY3:\n+        elif not isinstance(obj, bytes):\n             raise TypeError(\n-                \"write() argument must be str, not {}\".format(type(obj).__name__)\n+                \"write() argument must be str or bytes, not {}\".format(type(obj).__name__)\n             )\n         self.buffer.write(obj)\n \n@@ -447,6 +447,11 @@ class EncodedFile(object):\n         \"\"\"Ensure that file.name is a string.\"\"\"\n         return repr(self.buffer)\n \n+    @property\n+    def mode(self):\n+        \"\"\"Mode without 'b'.\"\"\"\n+        return self.buffer.mode.replace('b', '')\n+\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, \"buffer\"), name)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..2d4f798 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -253,8 +253,8 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n-        elif _PY3:\n-            raise TypeError('write() argument must be str, not {}'.format(type(obj).__name__))\n+        elif not isinstance(obj, bytes):\n+            raise TypeError('write() argument must be str or bytes, not {}'.format(type(obj).__name__))\n         self.buffer.write(obj)\n     def writelines(self, linelist):\n         data = ''.join(linelist)\n@@ -262,6 +262,9 @@ class EncodedFile(object):\n     @property\n     def name(self):\n         return repr(self.buffer)\n+    @property\n+    def mode(self):\n+        return self.buffer.mode.replace('b', '')\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, 'buffer'), name)\n CaptureResult = collections.namedtuple('CaptureResult', ['out', 'err'])\n", "normalized_occurrence": 1}
