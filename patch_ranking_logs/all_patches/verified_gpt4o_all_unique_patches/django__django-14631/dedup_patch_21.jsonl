{"model_name_or_path": "agentless", "instance_id": "django__django-14631", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 2c0336e..b03e845 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,16 +388,13 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n+            bound_field = self[name]\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = bound_field.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bound_field.value()\n             try:\n-                if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n-                else:\n-                    value = field.clean(value)\n+                value = field.clean(value, bound_field.initial if isinstance(field, FileField) else None)\n                 self.cleaned_data[name] = value\n                 if hasattr(self, 'clean_%s' % name):\n                     value = getattr(self, 'clean_%s' % name)()\n@@ -436,27 +433,7 @@ class BaseForm:\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf._did_change()]\n \n     @property\n     def media(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex f8959b2..dc01470 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -272,16 +272,13 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n+            bound_field = self[name]\n             if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n+                value = bound_field.initial\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = bound_field.value()\n             try:\n-                if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n-                else:\n-                    value = field.clean(value)\n+                value = field.clean(value, bound_field.initial if isinstance(field, FileField) else None)\n                 self.cleaned_data[name] = value\n                 if hasattr(self, 'clean_%s' % name):\n                     value = getattr(self, 'clean_%s' % name)()\n@@ -320,22 +317,7 @@ class BaseForm:\n \n     @cached_property\n     def changed_data(self):\n-        data = []\n-        for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(self._widget_data_value(hidden_widget, initial_prefixed_name))\n-                except ValidationError:\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n-                data.append(name)\n-        return data\n+        return [name for name, bf in self._bound_items() if bf._did_change()]\n \n     @property\n     def media(self):\n", "normalized_occurrence": 1}
