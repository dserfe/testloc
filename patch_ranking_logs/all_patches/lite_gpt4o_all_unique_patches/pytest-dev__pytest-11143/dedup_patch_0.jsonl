{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..4226896 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -677,10 +677,11 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n             ):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+                if isinstance(item.value.value, str):\n+                    doc = item.value.value\n+                    if self.is_rewrite_disabled(doc):\n+                        return\n+                    expect_docstring = False\n             elif (\n                 isinstance(item, ast.ImportFrom)\n                 and item.level == 0\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..af28f69 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -362,10 +362,11 @@ class AssertionRewriter(ast.NodeVisitor):\n         item = None\n         for item in mod.body:\n             if expect_docstring and isinstance(item, ast.Expr) and isinstance(item.value, ast.Constant):\n-                doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n-                    return\n-                expect_docstring = False\n+                if isinstance(item.value.value, str):\n+                    doc = item.value.value\n+                    if self.is_rewrite_disabled(doc):\n+                        return\n+                    expect_docstring = False\n             elif isinstance(item, ast.ImportFrom) and item.level == 0 and (item.module == '__future__'):\n                 pass\n             else:\n", "normalized_occurrence": 1}
