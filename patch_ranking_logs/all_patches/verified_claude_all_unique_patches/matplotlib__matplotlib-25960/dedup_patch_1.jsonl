{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/_constrained_layout.py b/lib/matplotlib/_constrained_layout.py\nindex 81fd88a..595a45f 100644\n--- a/lib/matplotlib/_constrained_layout.py\n+++ b/lib/matplotlib/_constrained_layout.py\n@@ -107,6 +107,16 @@ def do_constrained_layout(fig, h_pad, w_pad,\n                            'Possibly did not call parent GridSpec with the'\n                            ' \"figure\" keyword')\n         return\n+    \n+    # Ensure spacing parameters are properly applied to subfigures\n+    for subfig in fig.subfigs:\n+        if subfig._gridspecs:\n+            for gs in subfig._gridspecs:\n+                if gs._layoutgrid is not None:\n+                    if hspace is not None:\n+                        gs._layoutgrid.set_height_spacing(hspace)\n+                    if wspace is not None:\n+                        gs._layoutgrid.set_width_spacing(wspace)\n \n     for _ in range(2):\n         # do the algorithm twice.  This has to be done because decorations\ndiff --git a/lib/matplotlib/_layoutgrid.py b/lib/matplotlib/_layoutgrid.py\nindex c834b91..b9587fb 100644\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n@@ -205,6 +205,22 @@ class LayoutGrid:\n         for c in hc:\n             self.solver.addConstraint(c | 'required')\n \n+    def set_height_spacing(self, hspace):\n+        \"\"\"Set the height spacing between rows.\"\"\"\n+        if self.nrows > 1:\n+            for i in range(1, self.nrows):\n+                # Update the constraint between rows\n+                c = (self.bottoms[i-1] - self.tops[i] == hspace)\n+                self.solver.addConstraint(c | 'required')\n+\n+    def set_width_spacing(self, wspace):\n+        \"\"\"Set the width spacing between columns.\"\"\"\n+        if self.ncols > 1:\n+            for i in range(1, self.ncols):\n+                # Update the constraint between columns\n+                c = (self.lefts[i] - self.rights[i-1] == wspace)\n+                self.solver.addConstraint(c | 'required')\n+\n     def grid_constraints(self):\n         # constrain the ratio of the inner part of the grids\n         # to be the same (relative to width_ratios)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/_constrained_layout.py b/lib/matplotlib/_constrained_layout.py\nindex 97ed186..f202f88 100644\n--- a/lib/matplotlib/_constrained_layout.py\n+++ b/lib/matplotlib/_constrained_layout.py\n@@ -10,6 +10,14 @@ def do_constrained_layout(fig, h_pad, w_pad, hspace=None, wspace=None, rect=(0,\n     if not layoutgrids['hasgrids']:\n         _api.warn_external('There are no gridspecs with layoutgrids. Possibly did not call parent GridSpec with the \"figure\" keyword')\n         return\n+    for subfig in fig.subfigs:\n+        if subfig._gridspecs:\n+            for gs in subfig._gridspecs:\n+                if gs._layoutgrid is not None:\n+                    if hspace is not None:\n+                        gs._layoutgrid.set_height_spacing(hspace)\n+                    if wspace is not None:\n+                        gs._layoutgrid.set_width_spacing(wspace)\n     for _ in range(2):\n         make_layout_margins(layoutgrids, fig, renderer, h_pad=h_pad, w_pad=w_pad, hspace=hspace, wspace=wspace)\n         make_margin_suptitles(layoutgrids, fig, renderer, h_pad=h_pad, w_pad=w_pad)\n--- a/lib/matplotlib/_layoutgrid.py\n+++ b/lib/matplotlib/_layoutgrid.py\n+    def set_height_spacing(self, hspace):\n+        if self.nrows > 1:\n+            for i in range(1, self.nrows):\n+                c = self.bottoms[i - 1] - self.tops[i] == hspace\n+                self.solver.addConstraint(c | 'required')\n+    def set_width_spacing(self, wspace):\n+        if self.ncols > 1:\n+            for i in range(1, self.ncols):\n+                c = self.lefts[i] - self.rights[i - 1] == wspace\n+                self.solver.addConstraint(c | 'required')", "normalized_occurrence": 1}
