{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 4a79e89..e831bac 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -166,6 +166,22 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             for assignattr in assignattrs:\n                 if not isinstance(assignattr, astroid.Unknown):\n                     self.handle_assignattr_type(assignattr, node)\n+        # resolve type hints\n+        for arg in node.args.args:\n+            if arg.annotation:\n+                try:\n+                    inferred = set(arg.annotation.infer())\n+                    node.locals_type[arg.name] = list(inferred)\n+                except astroid.InferenceError:\n+                    pass\n+\n+        if node.returns:\n+            try:\n+                inferred = set(node.returns.infer())\n+                node.locals_type['return'] = list(inferred)\n+            except astroid.InferenceError:\n+                pass\n+\n         # resolve implemented interface\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/inspector.py b/pylint/pyreverse/inspector.py\nindex 540b86a..125e77a 100644\n--- a/pylint/pyreverse/inspector.py\n+++ b/pylint/pyreverse/inspector.py\n@@ -79,6 +79,19 @@ class Linker(IdGeneratorMixIn, utils.LocalsVisitor):\n             for assignattr in assignattrs:\n                 if not isinstance(assignattr, astroid.Unknown):\n                     self.handle_assignattr_type(assignattr, node)\n+        for arg in node.args.args:\n+            if arg.annotation:\n+                try:\n+                    inferred = set(arg.annotation.infer())\n+                    node.locals_type[arg.name] = list(inferred)\n+                except astroid.InferenceError:\n+                    pass\n+        if node.returns:\n+            try:\n+                inferred = set(node.returns.infer())\n+                node.locals_type['return'] = list(inferred)\n+            except astroid.InferenceError:\n+                pass\n         try:\n             node.implements = list(interfaces(node, self.inherited_interfaces))\n         except astroid.InferenceError:\n", "normalized_occurrence": 1}
