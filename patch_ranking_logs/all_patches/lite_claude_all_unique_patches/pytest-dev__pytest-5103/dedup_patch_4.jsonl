{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..2a93b07 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,11 +964,80 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n+    def _handle_builtin_all_any(self, call, func_name):\n+        \"\"\"Handle the builtin all() and any() functions by unrolling them into for loops.\"\"\"\n+        if len(call.args) != 1:\n+            return None\n+        \n+        iterable = call.args[0]\n+        var_name = self.variable()\n+        result_var = self.variable()\n+        \n+        # Create initial assignment for result\n+        self.statements.append(\n+            ast.Assign(\n+                [ast.Name(result_var, ast.Store())],\n+                ast.NameConstant(True if func_name == \"all\" else False)\n+            )\n+        )\n+        \n+        # Create the loop variable\n+        loop_target = ast.Name(var_name, ast.Store())\n+        \n+        # Visit the iterable\n+        iter_res, _ = self.visit(iterable)\n+        \n+        # Create the loop body\n+        if func_name == \"all\":\n+            test_expr = ast.UnaryOp(ast.Not(), ast.Name(var_name, ast.Load()))\n+            body = [\n+                ast.Assign(\n+                    [ast.Name(result_var, ast.Store())],\n+                    ast.NameConstant(False)\n+                ),\n+                ast.Break()\n+            ]\n+        else:  # any\n+            test_expr = ast.Name(var_name, ast.Load())\n+            body = [\n+                ast.Assign(\n+                    [ast.Name(result_var, ast.Store())],\n+                    ast.NameConstant(True)\n+                ),\n+                ast.Break()\n+            ]\n+        \n+        loop_if = ast.If(test_expr, body, [])\n+        \n+        # Create the for loop\n+        loop = ast.For(\n+            loop_target,\n+            iter_res,\n+            [loop_if],\n+            []\n+        )\n+        \n+        self.statements.append(loop)\n+        \n+        return ast.Name(result_var, ast.Load())\n+\n     def visit_Call_35(self, call):\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Check if this is a call to all() or any()\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in (\"all\", \"any\") and \n+            isinstance(call.func.ctx, ast.Load)):\n+            unrolled = self._handle_builtin_all_any(call, call.func.id)\n+            if unrolled is not None:\n+                return unrolled, call.func.id + \"(...)\"\n+        \"\"\"\n+        visit `ast.Call` nodes on Python3.5 and after\n+        \"\"\"\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1081,4 +1150,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..2ae9efd 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,7 +543,32 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n+    def _handle_builtin_all_any(self, call, func_name):\n+        if len(call.args) != 1:\n+            return None\n+        iterable = call.args[0]\n+        var_name = self.variable()\n+        result_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True if func_name == 'all' else False)))\n+        loop_target = ast.Name(var_name, ast.Store())\n+        iter_res, _ = self.visit(iterable)\n+        if func_name == 'all':\n+            test_expr = ast.UnaryOp(ast.Not(), ast.Name(var_name, ast.Load()))\n+            body = [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(False)), ast.Break()]\n+        else:\n+            test_expr = ast.Name(var_name, ast.Load())\n+            body = [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)), ast.Break()]\n+        loop_if = ast.If(test_expr, body, [])\n+        loop = ast.For(loop_target, iter_res, [loop_if], [])\n+        self.statements.append(loop)\n+        return ast.Name(result_var, ast.Load())\n     def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and isinstance(call.func.ctx, ast.Load):\n+            unrolled = self._handle_builtin_all_any(call, call.func.id)\n+            if unrolled is not None:\n+                return (unrolled, call.func.id + '(...)')\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
