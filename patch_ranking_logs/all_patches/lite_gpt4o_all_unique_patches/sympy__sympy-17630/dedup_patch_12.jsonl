{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..61263a0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -84,8 +84,10 @@ class BlockMatrix(MatrixExpr):\n                 not is_sequence(args[0]) or \\\n                 len(set([isMat(r) for r in args[0]])) != 1:\n             raise ValueError(filldedent('''\n-                expecting a sequence of 1 or more rows\n-                containing Matrices.'''))\n+                expecting a sequence of 1 or more rows containing Matrices.'''))\n+\n+        # Convert all Zero objects to ZeroMatrix instances\n+        rows = [[ZeroMatrix(i.rows, i.cols) if isinstance(i, Zero) else i for i in row] for row in rows]\n         rows = args[0] if args else []\n         if not isMat(rows):\n             if rows and isMat(rows[0]):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..1a445f9 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -23,7 +23,8 @@ class BlockMatrix(MatrixExpr):\n         from sympy.utilities.iterables import is_sequence\n         isMat = lambda i: getattr(i, 'is_Matrix', False)\n         if len(args) != 1 or not is_sequence(args[0]) or len(set([isMat(r) for r in args[0]])) != 1:\n-            raise ValueError(filldedent('\\n                expecting a sequence of 1 or more rows\\n                containing Matrices.'))\n+            raise ValueError(filldedent('\\n                expecting a sequence of 1 or more rows containing Matrices.'))\n+        rows = [[ZeroMatrix(i.rows, i.cols) if isinstance(i, Zero) else i for i in row] for row in rows]\n         rows = args[0] if args else []\n         if not isMat(rows):\n             if rows and isMat(rows[0]):\n", "normalized_occurrence": 1}
