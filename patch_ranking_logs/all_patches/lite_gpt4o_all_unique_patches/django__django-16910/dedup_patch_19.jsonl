{"model_name_or_path": "agentless", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..9a9dcdc 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1250,7 +1250,11 @@ class SQLCompiler:\n                 if o.field.unique and not o.many_to_many\n             ]\n             for related_field, model in related_fields:\n-                related_select_mask = select_mask.get(related_field) or {}\n+                related_select_mask = (\n+                    select_mask.get(related_field.name, {})\n+                    if isinstance(select_mask, dict)\n+                    else {}\n+                )\n                 if not select_related_descend(\n                     related_field,\n                     restricted,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..8622661 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -626,7 +626,7 @@ class SQLCompiler:\n         if restricted:\n             related_fields = [(o.field, o.related_model) for o in opts.related_objects if o.field.unique and (not o.many_to_many)]\n             for related_field, model in related_fields:\n-                related_select_mask = select_mask.get(related_field) or {}\n+                related_select_mask = select_mask.get(related_field.name, {}) if isinstance(select_mask, dict) else {}\n                 if not select_related_descend(related_field, restricted, requested, related_select_mask, reverse=True):\n                     continue\n                 related_field_name = related_field.related_query_name()\n", "normalized_occurrence": 1}
