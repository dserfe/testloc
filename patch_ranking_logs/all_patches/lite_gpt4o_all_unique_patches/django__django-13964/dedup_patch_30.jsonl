{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 9b658fb..813bb9b 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -747,6 +747,10 @@ class ForeignObject(RelatedField):\n         super().contribute_to_class(cls, name, private_only=private_only, **kwargs)\n         setattr(cls, self.name, self.forward_related_accessor_class(self))\n \n+        # If the related instance is assigned without a primary key, update the foreign key on primary key change.\n+        if isinstance(cls, Model):\n+            models.signals.post_save.connect(self.update_related_fk, sender=self.remote_field.model)\n+\n     def contribute_to_related_class(self, cls, related):\n         # Internal FK's - i.e., those with a related name ending with '+' -\n         # and swapped models don't get a related descriptor.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 2261016..c99d12a 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -324,6 +324,8 @@ class ForeignObject(RelatedField):\n     def contribute_to_class(self, cls, name, private_only=False, **kwargs):\n         super().contribute_to_class(cls, name, private_only=private_only, **kwargs)\n         setattr(cls, self.name, self.forward_related_accessor_class(self))\n+        if isinstance(cls, Model):\n+            models.signals.post_save.connect(self.update_related_fk, sender=self.remote_field.model)\n     def contribute_to_related_class(self, cls, related):\n         if not self.remote_field.is_hidden() and (not related.related_model._meta.swapped):\n             setattr(cls._meta.concrete_model, related.get_accessor_name(), self.related_accessor_class(related))\n", "normalized_occurrence": 1}
