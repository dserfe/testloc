{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..93d8e3c 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,11 +112,12 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n-    patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n-    return patterns\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    \n+    The input is treated as a single regex pattern rather than being split on commas,\n+    to support patterns containing commas (e.g. in quantifiers like {m,n}).\n+    \"\"\"\n+    return [_regex_transformer(value)]\n \n \n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..9f23d4d 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -54,10 +54,7 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         msg = f'Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}'\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n-    return patterns\n+    return [_regex_transformer(value)]\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n", "normalized_occurrence": 1}
