{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17318", "model_patch": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex a31ce02..37da712 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -1113,6 +1113,8 @@ def _split_gcd(*a):\n     >>> _split_gcd(55, 35, 22, 14, 77, 10)\n     (5, [55, 35, 10], [22, 14, 77])\n     \"\"\"\n+    if not a:\n+        return S.One, [], []\n     g = a[0]\n     b1 = [g]\n     b2 = []\n@@ -1123,4 +1125,4 @@ def _split_gcd(*a):\n         else:\n             g = g1\n             b1.append(x)\n-    return g, b1, b2\n+    return g, b1, b2\ndiff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex ea8922d..e31eeb9 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -166,7 +166,7 @@ def _sqrt_match(p):\n         v = [(sqrt_depth(x), x, i) for i, x in enumerate(pargs)]\n         nmax = max(v, key=default_sort_key)\n         if nmax[0] == 0:\n-            res = []\n+            return (S.Zero, S.Zero, S.Zero)\n         else:\n             # select r\n             depth, _, i = nmax\n@@ -211,7 +211,7 @@ def _sqrt_match(p):\n         if is_sqrt(r):\n             res = (S.Zero, b, r**2)\n         else:\n-            res = []\n+            return (S.Zero, S.Zero, S.Zero)\n     return list(res)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/radsimp.py b/sympy/simplify/radsimp.py\nindex 857e077..0bab742 100644\n--- a/sympy/simplify/radsimp.py\n+++ b/sympy/simplify/radsimp.py\n@@ -474,6 +474,8 @@ def split_surds(expr):\n     b = Add(*a2v)\n     return (g2, a, b)\n def _split_gcd(*a):\n+    if not a:\n+        return (S.One, [], [])\n     g = a[0]\n     b1 = [g]\n     b2 = []\ndiff --git a/sympy/simplify/sqrtdenest.py b/sympy/simplify/sqrtdenest.py\nindex d4a8177..6a9d9da 100644\n--- a/sympy/simplify/sqrtdenest.py\n+++ b/sympy/simplify/sqrtdenest.py\n@@ -63,7 +63,7 @@ def _sqrt_match(p):\n         v = [(sqrt_depth(x), x, i) for i, x in enumerate(pargs)]\n         nmax = max(v, key=default_sort_key)\n         if nmax[0] == 0:\n-            res = []\n+            return (S.Zero, S.Zero, S.Zero)\n         else:\n             depth, _, i = nmax\n             r = pargs.pop(i)\n@@ -105,7 +105,7 @@ def _sqrt_match(p):\n         if is_sqrt(r):\n             res = (S.Zero, b, r ** 2)\n         else:\n-            res = []\n+            return (S.Zero, S.Zero, S.Zero)\n     return list(res)\n class SqrtdenestStopIteration(StopIteration):\n     pass\n", "normalized_occurrence": 1}
