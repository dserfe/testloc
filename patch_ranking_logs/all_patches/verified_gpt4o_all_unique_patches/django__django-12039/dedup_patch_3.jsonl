{"model_name_or_path": "agentless", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..1bf028e 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -113,10 +113,8 @@ class IndexColumns(Columns):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n             col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n-            try:\n+            if self.col_suffixes[idx]:\n                 col = '{} {}'.format(col, self.col_suffixes[idx])\n-            except IndexError:\n-                pass\n             return col\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 285a76a..b55e46a 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -59,10 +59,8 @@ class IndexColumns(Columns):\n     def __str__(self):\n         def col_str(column, idx):\n             col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n-            try:\n+            if self.col_suffixes[idx]:\n                 col = '{} {}'.format(col, self.col_suffixes[idx])\n-            except IndexError:\n-                pass\n             return col\n         return ', '.join((col_str(column, idx) for idx, column in enumerate(self.columns)))\n class ForeignKeyName(TableColumns):\n", "normalized_occurrence": 2}
