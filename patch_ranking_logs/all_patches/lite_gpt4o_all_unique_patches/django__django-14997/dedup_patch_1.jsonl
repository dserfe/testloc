{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..1393c94 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -236,7 +236,18 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 if delete_field.name not in index.fields\n             ]\n \n-        constraints = list(model._meta.constraints)\n+        # Filter out constraints that are not supported by SQLite\n+        constraints = [\n+            constraint for constraint in model._meta.constraints\n+            if not (\n+                isinstance(constraint, UniqueConstraint) and (\n+                    constraint.condition or\n+                    constraint.contains_expressions or\n+                    constraint.include or\n+                    constraint.deferrable\n+                )\n+            )\n+        ]\n \n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n@@ -425,7 +436,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().add_constraint(model, constraint)\n+            raise NotSupportedError(\n+                'SQLite does not support unique constraints with conditions, '\n+                'expressions, includes, or deferrable clauses.'\n+            )\n         else:\n             self._remake_table(model)\n \n@@ -436,7 +450,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().remove_constraint(model, constraint)\n+            raise NotSupportedError(\n+                'SQLite does not support removing unique constraints with conditions, '\n+                'expressions, includes, or deferrable clauses.'\n+            )\n         else:\n             self._remake_table(model)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..6fe83b9 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -128,7 +128,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         indexes = model._meta.indexes\n         if delete_field:\n             indexes = [index for index in indexes if delete_field.name not in index.fields]\n-        constraints = list(model._meta.constraints)\n+        constraints = [constraint for constraint in model._meta.constraints if not (isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable))]\n         body_copy = copy.deepcopy(body)\n         meta_contents = {'app_label': model._meta.app_label, 'db_table': model._meta.db_table, 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n@@ -202,12 +202,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.delete_model(old_field.remote_field.through)\n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().add_constraint(model, constraint)\n+            raise NotSupportedError('SQLite does not support unique constraints with conditions, expressions, includes, or deferrable clauses.')\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().remove_constraint(model, constraint)\n+            raise NotSupportedError('SQLite does not support removing unique constraints with conditions, expressions, includes, or deferrable clauses.')\n         else:\n             self._remake_table(model)\n     def _collate_sql(self, collation):\n", "normalized_occurrence": 1}
