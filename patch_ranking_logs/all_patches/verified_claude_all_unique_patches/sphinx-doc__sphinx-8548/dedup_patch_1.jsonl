{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..e8d4f6a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1599,8 +1599,20 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n-                           for m in members.values()]\n+            result = []\n+            for m in members.values():\n+                docstring = m.docstring\n+                if docstring is None and m.class_ is not None and m.class_ != self.object:\n+                    # For inherited attributes, try to get docstring from base class\n+                    try:\n+                        base_attr = getattr(m.class_, m.name)\n+                        docstring = getdoc(base_attr, self.get_attr,\n+                                         self.config.autodoc_inherit_docstrings,\n+                                         self.parent, self.object_name)\n+                    except AttributeError:\n+                        pass\n+                result.append(ObjectMember(m.name, m.value, docstring=docstring))\n+            return False, result\n         else:\n             return False, [ObjectMember(m.name, m.value, docstring=m.docstring)\n                            for m in members.values() if m.class_ == self.object]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c754f31..b5ba3c5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -897,7 +897,17 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values()])\n+            result = []\n+            for m in members.values():\n+                docstring = m.docstring\n+                if docstring is None and m.class_ is not None and (m.class_ != self.object):\n+                    try:\n+                        base_attr = getattr(m.class_, m.name)\n+                        docstring = getdoc(base_attr, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+                    except AttributeError:\n+                        pass\n+                result.append(ObjectMember(m.name, m.value, docstring=docstring))\n+            return (False, result)\n         else:\n             return (False, [ObjectMember(m.name, m.value, docstring=m.docstring) for m in members.values() if m.class_ == self.object])\n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n", "normalized_occurrence": 1}
