{"model_name_or_path": "agentless", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..e44b507 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -121,15 +121,14 @@ class SessionRedirectMixin(object):\n             prepared_request.url = to_native_string(url)\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n-            if (resp.status_code == codes.see_other and\n-                    method != 'HEAD'):\n+            if (resp.status_code == codes.see_other and method != 'HEAD'):\n                 method = 'GET'\n-\n+            \n             # Do what the browsers do, despite standards...\n             # First, turn 302s into GETs.\n             if resp.status_code == codes.found and method != 'HEAD':\n                 method = 'GET'\n-\n+            \n             # Second, if a POST is responded to with a 301, turn it into a GET.\n             # This bizarre behaviour is explained in Issue 1704.\n             if resp.status_code == codes.moved and method == 'POST':\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..519da72 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -36,7 +36,7 @@ class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = resp.request.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n", "normalized_occurrence": 25}
