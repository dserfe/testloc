{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..86e2332 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -547,6 +547,28 @@ _deprecated_ignore_map = {\n     'mpl_toolkits.legacy_colorbar': ('3.4', None),\n }\n \n+def _get_version_info():\n+    \"\"\"Parse __version__ into a namedtuple for easy comparison.\"\"\"\n+    from collections import namedtuple\n+    import re\n+\n+    ver_parts = re.match(r'(\\d+)\\.(\\d+)\\.(\\d+)(?:([ab])(\\d+))?', __version__)\n+    if ver_parts:\n+        VersionInfo = namedtuple('VersionInfo', ['major', 'minor', 'micro', 'releaselevel', 'serial'])\n+        major, minor, micro, rel, serial = ver_parts.groups()\n+        if rel is None:\n+            # Final release\n+            return VersionInfo(int(major), int(minor), int(micro), 'final', 0)\n+        else:\n+            # Alpha/beta releases\n+            return VersionInfo(int(major), int(minor), int(micro), \n+                             'alpha' if rel == 'a' else 'beta', \n+                             int(serial))\n+    else:\n+        raise ValueError(f\"Invalid version format: {__version__}\")\n+\n+version_info = _get_version_info()\n+\n # rcParams deprecated; can use None to suppress warnings; remain actually\n # listed in the rcParams (not included in _all_deprecated).\n # Values are tuples of (version,)\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n+def _get_version_info():\n+    from collections import namedtuple\n+    import re\n+    ver_parts = re.match('(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(?:([ab])(\\\\d+))?', __version__)\n+    if ver_parts:\n+        VersionInfo = namedtuple('VersionInfo', ['major', 'minor', 'micro', 'releaselevel', 'serial'])\n+        major, minor, micro, rel, serial = ver_parts.groups()\n+        if rel is None:\n+            return VersionInfo(int(major), int(minor), int(micro), 'final', 0)\n+        else:\n+            return VersionInfo(int(major), int(minor), int(micro), 'alpha' if rel == 'a' else 'beta', int(serial))\n+    else:\n+        raise ValueError(f'Invalid version format: {__version__}')\n+version_info = _get_version_info()", "normalized_occurrence": 1}
