{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..354d005 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,18 +897,21 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n             else:\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n \n+        temp = set(temp)\n+        \n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n             raise ValueError(\"Integers 0 through %s must be present.\" %\n                              max(temp))\n \n-        if is_cycle:\n+        if is_cycle and not has_dups(temp):\n             # it's not necessarily canonical so we won't store\n             # it -- use the array form instead\n             c = Cycle()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..7e898e9 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,13 +196,16 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n-        if is_cycle:\n+        if is_cycle and (not has_dups(temp)):\n             c = Cycle()\n             for ci in args:\n                 c = c(*ci)\n", "normalized_occurrence": 1}
