{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3151", "model_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex fe3f23b..ad476af 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -69,6 +69,18 @@ def _infer_concat_order_from_coords(datasets):\n             # If dimension coordinate values are same on every dataset then\n             # should be leaving this dimension alone (it's just a \"bystander\")\n             if not all(index.equals(indexes[0]) for index in indexes[1:]):\n+                # Infer order datasets should be arranged in along this dim\n+                concat_dims.append(dim)\n+\n+                if all(index.is_monotonic_increasing for index in indexes):\n+                    ascending = True\n+                elif all(index.is_monotonic_decreasing for index in indexes):\n+                    ascending = False\n+                else:\n+                    raise ValueError(\"Coordinate variable {} is neither \"\n+                                     \"monotonically increasing nor \"\n+                                     \"monotonically decreasing on all datasets\"\n+                                     .format(dim))\n \n                 # Infer order datasets should be arranged in along this dim\n                 concat_dims.append(dim)\n@@ -506,9 +518,11 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing\n                         or indexes.is_monotonic_decreasing):\n-                    raise ValueError(\"Resulting object does not have monotonic\"\n-                                     \" global indexes along dimension {}\"\n-                                     .format(dim))\n+                    # Allow non-monotonic coordinates if they are identical\n+                    if not all(index.equals(indexes[0]) for index in indexes[1:]):\n+                        raise ValueError(\"Resulting object does not have monotonic\"\n+                                         \" global indexes along dimension {}\"\n+                                         .format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n \n     return merge(concatenated_grouped_by_data_vars, compat=compat,\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/combine.py b/xarray/core/combine.py\nindex b8f5640..9b31df6 100644\n--- a/xarray/core/combine.py\n+++ b/xarray/core/combine.py\n@@ -29,6 +29,13 @@ def _infer_concat_order_from_coords(datasets):\n                 raise ValueError('Every dimension needs a coordinate for inferring concatenation order')\n             if not all((index.equals(indexes[0]) for index in indexes[1:])):\n                 concat_dims.append(dim)\n+                if all((index.is_monotonic_increasing for index in indexes)):\n+                    ascending = True\n+                elif all((index.is_monotonic_decreasing for index in indexes)):\n+                    ascending = False\n+                else:\n+                    raise ValueError('Coordinate variable {} is neither monotonically increasing nor monotonically decreasing on all datasets'.format(dim))\n+                concat_dims.append(dim)\n                 if all((index.is_monotonic_increasing for index in indexes)):\n                     ascending = True\n                 elif all((index.is_monotonic_decreasing for index in indexes)):\n@@ -119,7 +126,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all', coords='\n             if dim in concatenated:\n                 indexes = concatenated.indexes.get(dim)\n                 if not (indexes.is_monotonic_increasing or indexes.is_monotonic_decreasing):\n-                    raise ValueError('Resulting object does not have monotonic global indexes along dimension {}'.format(dim))\n+                    if not all((index.equals(indexes[0]) for index in indexes[1:])):\n+                        raise ValueError('Resulting object does not have monotonic global indexes along dimension {}'.format(dim))\n         concatenated_grouped_by_data_vars.append(concatenated)\n     return merge(concatenated_grouped_by_data_vars, compat=compat, fill_value=fill_value)\n _CONCAT_DIM_DEFAULT = '__infer_concat_dim__'\n", "normalized_occurrence": 1}
