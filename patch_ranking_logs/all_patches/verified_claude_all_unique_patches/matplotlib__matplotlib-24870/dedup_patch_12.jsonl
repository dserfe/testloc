{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..6dd501e 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1123,7 +1123,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         \"\"\"\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7  # Default, hard-wired.\n+                if hasattr(self, '_is_bool_input') and self._is_bool_input:\n+                    levels_arg = [0.5]  # Default for boolean input\n+                else:\n+                    levels_arg = 7  # Default, hard-wired.\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -1456,6 +1459,8 @@ class QuadContourSet(ContourSet):\n         else:\n             raise _api.nargs_error(fn, takes=\"from 1 to 4\", given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n+        # Check if input is boolean before converting to float\n+        self._is_bool_input = z.dtype == bool\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n         if self.logscale and self.zmin <= 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..6932add 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -483,7 +483,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n     def _process_contour_level_args(self, args):\n         if self.levels is None:\n             if len(args) == 0:\n-                levels_arg = 7\n+                if hasattr(self, '_is_bool_input') and self._is_bool_input:\n+                    levels_arg = [0.5]\n+                else:\n+                    levels_arg = 7\n             else:\n                 levels_arg = args[0]\n         else:\n@@ -672,6 +675,7 @@ class QuadContourSet(ContourSet):\n         else:\n             raise _api.nargs_error(fn, takes='from 1 to 4', given=nargs)\n         z = ma.masked_invalid(z, copy=False)\n+        self._is_bool_input = z.dtype == bool\n         self.zmax = float(z.max())\n         self.zmin = float(z.min())\n         if self.logscale and self.zmin <= 0:\n", "normalized_occurrence": 2}
