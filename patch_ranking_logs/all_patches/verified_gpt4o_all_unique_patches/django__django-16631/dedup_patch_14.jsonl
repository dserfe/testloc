{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 718fbb5..7318303 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,11 +136,19 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n-        return salted_hmac(\n-            key_salt,\n-            self.password,\n-            algorithm=\"sha256\",\n-        ).hexdigest()\n+        from django.core.signing import Signer\n+        signer = Signer()\n+        signed_value = None\n+        for key in [signer.key, *signer.fallback_keys]:\n+            signed_value = salted_hmac(\n+                key_salt,\n+                self.password,\n+                secret=key,\n+                algorithm=\"sha256\",\n+            ).hexdigest()\n+            if signed_value:\n+                break\n+        return signed_value\n \n     @classmethod\n     def get_email_field_name(cls):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 04240b6..a9ecaab 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -64,7 +64,14 @@ class AbstractBaseUser(models.Model):\n         return is_password_usable(self.password)\n     def get_session_auth_hash(self):\n         key_salt = 'django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash'\n-        return salted_hmac(key_salt, self.password, algorithm='sha256').hexdigest()\n+        from django.core.signing import Signer\n+        signer = Signer()\n+        signed_value = None\n+        for key in [signer.key, *signer.fallback_keys]:\n+            signed_value = salted_hmac(key_salt, self.password, secret=key, algorithm='sha256').hexdigest()\n+            if signed_value:\n+                break\n+        return signed_value\n     @classmethod\n     def get_email_field_name(cls):\n         try:\n", "normalized_occurrence": 1}
