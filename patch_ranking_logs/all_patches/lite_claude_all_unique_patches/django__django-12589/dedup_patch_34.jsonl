{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..fc201a1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -112,14 +112,18 @@ class SQLCompiler:\n         ref_sources = {\n             expr.source for expr in expressions if isinstance(expr, Ref)\n         }\n-        for expr, _, _ in select:\n+        for expr, sql, _ in select:\n             # Skip members of the select clause that are already included\n             # by reference.\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            # For subquery annotations, use the entire expression\n+            if hasattr(expr, 'contains_aggregate') and expr.contains_aggregate:\n+                expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..eada429 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -48,12 +48,15 @@ class SQLCompiler:\n                 else:\n                     expressions.append(expr)\n         ref_sources = {expr.source for expr in expressions if isinstance(expr, Ref)}\n-        for expr, _, _ in select:\n+        for expr, sql, _ in select:\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            if hasattr(expr, 'contains_aggregate') and expr.contains_aggregate:\n+                expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n", "normalized_occurrence": 1}
