{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..24fabff 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import S\n from sympy.core.relational import Eq, Ne\n from sympy.logic.boolalg import BooleanFunction\n@@ -45,4 +46,9 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Returns the set that contains all values of x that satisfy Contains(x, S).\n+        For Contains(x, S), this simply returns S.\n+        \"\"\"\n+        # Contains(x, S) means x is in set S, so the set of all x that satisfy this is S\n+        return self.args[1]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..8e00332 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,4 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        return self.args[1]\n\\ No newline at end of file\n", "normalized_occurrence": 15}
