{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..d932e7e 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None,   # defaults to rcParams['text.antialiased']\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -167,7 +168,9 @@ class Text(Artist):\n         transform_rotates_text=False,\n         linespacing=None,\n         rotation_mode=None,\n+        antialiased=None,\n     ):\n+        self._antialiased = antialiased if antialiased is not None else mpl.rcParams['text.antialiased']\n         self.set_text(text)\n         self.set_color(\n             color if color is not None else mpl.rcParams[\"text.color\"])\n@@ -1227,6 +1230,22 @@ class Text(Artist):\n         self._verticalalignment = align\n         self.stale = True\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text should be drawn with antialiasing.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+            Whether to antialias text edges.\n+        \"\"\"\n+        self._antialiased = b\n+        self.stale = True\n+\n     def set_text(self, s):\n         r\"\"\"\n         Set the text string *s*.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..7caf9a5 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -41,13 +41,14 @@ class Text(Artist):\n     _charsize_cache = dict()\n     def __repr__(self):\n         return f'Text({self._x}, {self._y}, {self._text!r})'\n-    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, **kwargs):\n+    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, antialiased=None, **kwargs):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n-    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n+    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None, antialiased=None):\n+        self._antialiased = antialiased if antialiased is not None else mpl.rcParams['text.antialiased']\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n         self.set_fontproperties(fontproperties)\n@@ -514,6 +515,11 @@ class Text(Artist):\n         _api.check_in_list(['top', 'bottom', 'center', 'baseline', 'center_baseline'], align=align)\n         self._verticalalignment = align\n         self.stale = True\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = b\n+        self.stale = True\n     def set_text(self, s):\n         if s is None:\n             s = ''\n", "normalized_occurrence": 1}
