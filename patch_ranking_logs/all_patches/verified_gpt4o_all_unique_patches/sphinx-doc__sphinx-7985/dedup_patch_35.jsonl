{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..d465167 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,7 +212,7 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', '/')):\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n@@ -230,7 +230,13 @@ class CheckExternalLinksBuilder(Builder):\n                 if status != \"broken\":\n                     break\n \n-            if status == \"working\":\n+            if status == \"local\":\n+                status, info, code = check_local_uri(uri)\n+                if status == \"working\":\n+                    self.good.add(uri)\n+                elif status == \"broken\":\n+                    self.broken[uri] = info\n+            elif status == \"working\":\n                 self.good.add(uri)\n             elif status == \"broken\":\n                 self.broken[uri] = info\n@@ -312,7 +318,15 @@ class CheckExternalLinksBuilder(Builder):\n         logger.info('')\n         n = 0\n \n-        # reference nodes\n+        # handle local references first\n+        for refnode in doctree.traverse(nodes.reference):\n+            if 'refuri' in refnode and not refnode['refuri'].startswith(('http:', 'https:', 'ftp:')):\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n+                self.wqueue.put((uri, docname, lineno), False)\n+                n += 1\n+\n+        # handle external references next\n         for refnode in doctree.traverse(nodes.reference):\n             if 'refuri' not in refnode:\n                 continue\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..f5036ea 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -132,7 +132,7 @@ class CheckExternalLinksBuilder(Builder):\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:', '/')):\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n@@ -147,7 +147,13 @@ class CheckExternalLinksBuilder(Builder):\n                 status, info, code = check_uri()\n                 if status != 'broken':\n                     break\n-            if status == 'working':\n+            if status == 'local':\n+                status, info, code = check_local_uri(uri)\n+                if status == 'working':\n+                    self.good.add(uri)\n+                elif status == 'broken':\n+                    self.broken[uri] = info\n+            elif status == 'working':\n                 self.good.add(uri)\n             elif status == 'broken':\n                 self.broken[uri] = info\n@@ -210,6 +216,12 @@ class CheckExternalLinksBuilder(Builder):\n     def write_doc(self, docname: str, doctree: Node) -> None:\n         logger.info('')\n         n = 0\n+        for refnode in doctree.traverse(nodes.reference):\n+            if 'refuri' in refnode and (not refnode['refuri'].startswith(('http:', 'https:', 'ftp:'))):\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n+                self.wqueue.put((uri, docname, lineno), False)\n+                n += 1\n         for refnode in doctree.traverse(nodes.reference):\n             if 'refuri' not in refnode:\n                 continue\n", "normalized_occurrence": 1}
