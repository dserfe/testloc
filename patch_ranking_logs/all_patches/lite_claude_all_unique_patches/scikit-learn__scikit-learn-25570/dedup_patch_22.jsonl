{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..956a3f6 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,7 +391,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n+                # Don't skip empty column selections when using pandas output\n+                elif (_is_empty_column_selection(columns) and\n+                      not (output_config.get(\"dense\") == \"pandas\")):\n                     continue\n \n             if column_as_strings:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..995ca46 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -74,7 +74,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     trans = FunctionTransformer(accept_sparse=True, check_inverse=False, feature_names_out='one-to-one').set_output(transform=output_config['dense'])\n                 elif trans == 'drop':\n                     continue\n-                elif _is_empty_column_selection(columns):\n+                elif _is_empty_column_selection(columns) and (not output_config.get('dense') == 'pandas'):\n                     continue\n             if column_as_strings:\n                 columns_is_scalar = np.isscalar(columns)\n", "normalized_occurrence": 1}
