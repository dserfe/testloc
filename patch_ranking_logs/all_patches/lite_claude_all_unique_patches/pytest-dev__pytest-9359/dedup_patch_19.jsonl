{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..be3056b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -934,13 +934,15 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Create failure message.\n             body = self.expl_stmts\n             self.statements.append(ast.If(negation, body, []))\n+            # Get only the assertion line from source\n             if assert_.msg:\n                 assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                 explanation = \"\\n>assert \" + explanation\n             else:\n                 assertmsg = ast.Str(\"\")\n                 explanation = \"assert \" + explanation\n-            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n+            # Create explanation template without including following lines\n+            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation.split('\\n')[0]))\n             msg = self.pop_format_context(template)\n             fmt = self.helper(\"_format_explanation\", msg)\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..d6a32c4 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -501,7 +501,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 assertmsg = ast.Str('')\n                 explanation = 'assert ' + explanation\n-            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n+            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation.split('\\n')[0]))\n             msg = self.pop_format_context(template)\n             fmt = self.helper('_format_explanation', msg)\n             err_name = ast.Name('AssertionError', ast.Load())\n", "normalized_occurrence": 1}
