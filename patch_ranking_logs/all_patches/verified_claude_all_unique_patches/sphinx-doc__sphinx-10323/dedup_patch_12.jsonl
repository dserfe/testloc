{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..88f39e9 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -342,8 +342,12 @@ class LiteralIncludeReader:\n \n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            # Get indentation from the first line\n+            match = re.match(r'^(\\s*)', lines[0])\n+            indent = match.group(1) if match else ''\n+            # Apply the same indentation to the prepended line\n+            lines.insert(0, indent + prepend + '\\n')\n \n         return lines\n \n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..2c525b2 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -225,8 +225,10 @@ class LiteralIncludeReader:\n         return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            match = re.match('^(\\\\s*)', lines[0])\n+            indent = match.group(1) if match else ''\n+            lines.insert(0, indent + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 1}
