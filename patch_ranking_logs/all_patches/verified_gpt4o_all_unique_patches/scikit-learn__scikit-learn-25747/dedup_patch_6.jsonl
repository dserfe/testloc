{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..631d32e 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -54,8 +55,20 @@ def _wrap_in_pandas_container(\n \n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n+            if len(columns) != data_to_wrap.shape[1]:\n+                raise ValueError(\n+                    \"Length mismatch: Expected axis has {} elements, new values have {} elements\".format(\n+                        data_to_wrap.shape[1], len(columns)\n+                    )\n+                )\n             data_to_wrap.columns = columns\n         if index is not None:\n+            if len(index) != data_to_wrap.shape[0]:\n+                raise ValueError(\n+                    \"Length mismatch: Expected axis has {} elements, new values have {} elements\".format(\n+                        data_to_wrap.shape[0], len(index)\n+                    )\n+                )\n             data_to_wrap.index = index\n         return data_to_wrap\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..b138221 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -14,8 +14,12 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n+            if len(columns) != data_to_wrap.shape[1]:\n+                raise ValueError('Length mismatch: Expected axis has {} elements, new values have {} elements'.format(data_to_wrap.shape[1], len(columns)))\n             data_to_wrap.columns = columns\n         if index is not None:\n+            if len(index) != data_to_wrap.shape[0]:\n+                raise ValueError('Length mismatch: Expected axis has {} elements, new values have {} elements'.format(data_to_wrap.shape[0], len(index)))\n             data_to_wrap.index = index\n         return data_to_wrap\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n", "normalized_occurrence": 1}
