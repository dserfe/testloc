{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..17c705d 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -253,6 +254,26 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def remove_index(self, model, index, concurrently=False):\n         self.execute(index.remove_sql(model, self, concurrently=concurrently))\n \n+    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        \"\"\"\n+        Deal with a model changing its unique_together. The input unique_togethers must\n+        be sets of tuples.\n+        \"\"\"\n+        old_unique_together = {tuple(fields) for fields in old_unique_together}\n+        new_unique_together = {tuple(fields) for fields in new_unique_together}\n+\n+        # Drop all unique constraints that are no longer needed\n+        for fields in old_unique_together.difference(new_unique_together):\n+            # Skip single field unique constraints that may conflict with the field's own unique=True\n+            if len(fields) == 1 and model._meta.get_field(fields[0]).unique:\n+                continue\n+            self._delete_unique_constraint(model, fields)\n+\n+        # Add all new unique constraints\n+        for fields in new_unique_together.difference(old_unique_together):\n+            columns = [model._meta.get_field(field).column for field in fields]\n+            self.execute(self._create_unique_sql(model, columns))\n+\n     def _delete_index_sql(self, model, name, sql=None, concurrently=False):\n         sql = (\n             self.sql_delete_index_concurrently\n@@ -296,4 +317,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n+    def alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        old_unique_together = {tuple(fields) for fields in old_unique_together}\n+        new_unique_together = {tuple(fields) for fields in new_unique_together}\n+        for fields in old_unique_together.difference(new_unique_together):\n+            if len(fields) == 1 and model._meta.get_field(fields[0]).unique:\n+                continue\n+            self._delete_unique_constraint(model, fields)\n+        for fields in new_unique_together.difference(old_unique_together):\n+            columns = [model._meta.get_field(field).column for field in fields]\n+            self.execute(self._create_unique_sql(model, columns))", "normalized_occurrence": 1}
