{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..bdabb7c 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1075,11 +1075,17 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n \n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n-        # restore neutral definitions for names\n-        for i in local_dict.pop(null, ()):\n-            local_dict[i] = null\n-        return rv\n+        # Pass evaluate to the global parameters before evaluation\n+        old_evaluate = global_parameters.evaluate\n+        global_parameters.evaluate = evaluate\n+        try:\n+            rv = eval_expr(code, local_dict, global_dict)\n+            # restore neutral definitions for names\n+            for i in local_dict.pop(null, ()):\n+                local_dict[i] = null\n+            return rv\n+        finally:\n+            global_parameters.evaluate = old_evaluate\n     except Exception as e:\n         # restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..2d661ce 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -513,10 +513,15 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n-        for i in local_dict.pop(null, ()):\n-            local_dict[i] = null\n-        return rv\n+        old_evaluate = global_parameters.evaluate\n+        global_parameters.evaluate = evaluate\n+        try:\n+            rv = eval_expr(code, local_dict, global_dict)\n+            for i in local_dict.pop(null, ()):\n+                local_dict[i] = null\n+            return rv\n+        finally:\n+            global_parameters.evaluate = old_evaluate\n     except Exception as e:\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n", "normalized_occurrence": 1}
