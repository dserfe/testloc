{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..68cff59 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -207,7 +207,7 @@ class GenericForeignKey(FieldCacheMixin):\n \n         return (\n             ret_val,\n-            lambda obj: (obj.pk, obj.__class__),\n+            lambda obj: (self.get_content_type(id=getattr(obj, ct_attname), using=obj._state.db).model_class()._meta.pk.get_prep_value(obj.pk), obj.__class__),\n             gfk_key,\n             True,\n             self.name,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..dc0f044 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -101,7 +101,7 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n                 return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n-        return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n+        return (ret_val, lambda obj: (self.get_content_type(id=getattr(obj, ct_attname), using=obj._state.db).model_class()._meta.pk.get_prep_value(obj.pk), obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n", "normalized_occurrence": 1}
