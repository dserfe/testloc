{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..ea36085 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -596,7 +596,7 @@ def _wrap_in_tex(text):\n     ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n \n     # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n+    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}').replace(' ', '\\\\,') + '}$'\n     ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n     return ret_text\n \n@@ -635,6 +635,36 @@ class DateFormatter(ticker.Formatter):\n \n     def set_tzinfo(self, tz):\n         self.tz = tz\n+    \"\"\"\n+    Format a tick (in days since the epoch) with a\n+    `~datetime.datetime.strftime` format string.\n+    \"\"\"\n+\n+    def __init__(self, fmt, tz=None, *, usetex=None):\n+        \"\"\"\n+        Parameters\n+        ----------\n+        fmt : str\n+            `~datetime.datetime.strftime` format string\n+        tz : `datetime.tzinfo`, default: :rc:`timezone`\n+            Ticks timezone.\n+        usetex : bool, default: :rc:`text.usetex`\n+            To enable/disable the use of TeX's math mode for rendering the\n+            results of the formatter.\n+        \"\"\"\n+        if tz is None:\n+            tz = _get_rc_timezone()\n+        self.fmt = fmt\n+        self.tz = tz\n+        self._usetex = (usetex if usetex is not None else\n+                        mpl.rcParams['text.usetex'])\n+\n+    def __call__(self, x, pos=0):\n+        result = num2date(x, self.tz).strftime(self.fmt)\n+        return _wrap_in_tex(result) if self._usetex else result\n+\n+    def set_tzinfo(self, tz):\n+        self.tz = tz\n \n \n class ConciseDateFormatter(ticker.Formatter):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 71de92e..db90516 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -141,7 +141,7 @@ def drange(dstart, dend, delta):\n def _wrap_in_tex(text):\n     p = '([a-zA-Z]+)'\n     ret_text = re.sub(p, '}$\\\\1$\\\\\\\\mathdefault{', text)\n-    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}') + '}$'\n+    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}').replace(' ', '\\\\,') + '}$'\n     ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n     return ret_text\n class DateFormatter(ticker.Formatter):\n@@ -156,6 +156,18 @@ class DateFormatter(ticker.Formatter):\n         return _wrap_in_tex(result) if self._usetex else result\n     def set_tzinfo(self, tz):\n         self.tz = tz\n+    '\\n    Format a tick (in days since the epoch) with a\\n    `~datetime.datetime.strftime` format string.\\n    '\n+    def __init__(self, fmt, tz=None, *, usetex=None):\n+        if tz is None:\n+            tz = _get_rc_timezone()\n+        self.fmt = fmt\n+        self.tz = tz\n+        self._usetex = usetex if usetex is not None else mpl.rcParams['text.usetex']\n+    def __call__(self, x, pos=0):\n+        result = num2date(x, self.tz).strftime(self.fmt)\n+        return _wrap_in_tex(result) if self._usetex else result\n+    def set_tzinfo(self, tz):\n+        self.tz = tz\n class ConciseDateFormatter(ticker.Formatter):\n     def __init__(self, locator, tz=None, formats=None, offset_formats=None, zero_formats=None, show_offset=True, *, usetex=None):\n         self._locator = locator\n", "normalized_occurrence": 1}
