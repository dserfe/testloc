{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..781b9a7 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -401,10 +401,14 @@ class BaseDatabaseSchemaEditor:\n \n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_index_names = {index.name for index in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n+        \n+        # Determine which constraints to exclude based on the provided kwargs\n+        exclude_constraints = meta_constraint_names if 'unique' in constraint_kwargs else meta_index_names\n+\n         constraint_names = self._constraint_names(\n-            model, columns, exclude=meta_constraint_names | meta_index_names,\n+            model, columns, exclude=exclude_constraints,\n             **constraint_kwargs\n         )\n         if len(constraint_names) != 1:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..a934ad3 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -227,9 +227,10 @@ class BaseDatabaseSchemaEditor:\n             self.execute(self._create_index_sql(model, fields, suffix='_idx'))\n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_index_names = {index.name for index in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        exclude_constraints = meta_constraint_names if 'unique' in constraint_kwargs else meta_index_names\n+        constraint_names = self._constraint_names(model, columns, exclude=exclude_constraints, **constraint_kwargs)\n         if len(constraint_names) != 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n", "normalized_occurrence": 1}
