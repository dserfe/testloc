{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..1d76bdc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,14 +1037,28 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+\n+\n+    def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n+        if encoding is not None:\n+            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n+                          % self.__class__.__name__,\n+                          RemovedInSphinx40Warning, stacklevel=2)\n+        lines = getattr(self, '_new_docstrings', None)\n+        if lines is not None:\n+            return lines\n+        return super().get_doc(None, ignore)  # type: ignore\n+\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n+        last_valid_index = -1\n+        \n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1062,33 +1076,20 @@ class DocstringSignatureMixin:\n                     valid_names.extend(cls.__name__ for cls in self.object.__mro__)\n             if base not in valid_names:\n                 continue\n+                \n+            # Found a valid signature\n+            results.append((args, retann))\n+            last_valid_index = i\n+            \n+        # After collecting all signatures, prepare the final docstring\n+        if last_valid_index >= 0:\n             # re-prepare docstring to ignore more leading indentation\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n-                                                        tabsize=tab_width)\n-            result = args, retann\n-            # don't look any further\n-            break\n-        return result\n-\n-    def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n-        if encoding is not None:\n-            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\"\n-                          % self.__class__.__name__,\n-                          RemovedInSphinx40Warning, stacklevel=2)\n-        lines = getattr(self, '_new_docstrings', None)\n-        if lines is not None:\n-            return lines\n-        return super().get_doc(None, ignore)  # type: ignore\n-\n-    def format_signature(self, **kwargs: Any) -> str:\n-        if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n-            # only act if a signature is not explicitly given already, and if\n-            # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n-        return super().format_signature(**kwargs)  # type: ignore\n+            self._new_docstrings[last_valid_index] = prepare_docstring(\n+                '\\n'.join(docstrings[last_valid_index][len(results):]),\n+                tabsize=tab_width)\n+            \n+        return results if results else None\n \n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..c4ec145 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -754,12 +754,21 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str=None) -> Tuple[str, str]:\n+    def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n+        if encoding is not None:\n+            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n+        lines = getattr(self, '_new_docstrings', None)\n+        if lines is not None:\n+            return lines\n+        return super().get_doc(None, ignore)\n+\n+    def _find_signature(self, encoding: str=None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n+        last_valid_index = -1\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -774,26 +783,12 @@ class DocstringSignatureMixin:\n                     valid_names.extend((cls.__name__ for cls in self.object.__mro__))\n             if base not in valid_names:\n                 continue\n+            results.append((args, retann))\n+            last_valid_index = i\n+        if last_valid_index >= 0:\n             tab_width = self.directive.state.document.settings.tab_width\n-            self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n-            break\n-        return result\n-\n-    def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n-        if encoding is not None:\n-            warnings.warn(\"The 'encoding' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n-        lines = getattr(self, '_new_docstrings', None)\n-        if lines is not None:\n-            return lines\n-        return super().get_doc(None, ignore)\n-\n-    def format_signature(self, **kwargs: Any) -> str:\n-        if self.args is None and self.env.config.autodoc_docstring_signature:\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n-        return super().format_signature(**kwargs)\n+            self._new_docstrings[last_valid_index] = prepare_docstring('\\n'.join(docstrings[last_valid_index][len(results):]), tabsize=tab_width)\n+        return results if results else None\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n     \"\"\"\n", "normalized_occurrence": 1}
