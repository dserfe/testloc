{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..fd882b4 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -200,6 +200,11 @@ class HashedFilesMixin:\n \n         return converter\n \n+\n+\n+        # Store the processed paths\n+        self.hashed_files.update(hashed_files)\n+\n     def post_process(self, paths, dry_run=False, **options):\n         \"\"\"\n         Post process the given dictionary of files (called from collectstatic).\n@@ -226,17 +231,21 @@ class HashedFilesMixin:\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n \n-        paths = {path: paths[path] for path in adjustable_paths}\n+        # First pass - process all files, but only yield non-adjustable files\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n+            yield name, hashed_name, processed\n \n+        # Process adjustable files\n+        processed_files = set()\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+            for name, hashed_name, processed, subst in self._post_process({p: paths[p] for p in adjustable_paths}, adjustable_paths, hashed_files):\n+                # Only yield if file was processed and we haven't yielded it before\n+                if processed and name not in processed_files:\n+                    yield name, hashed_name, processed\n+                    processed_files.add(name)\n                 substitutions = substitutions or subst\n \n             if not substitutions:\n@@ -245,9 +254,6 @@ class HashedFilesMixin:\n         if substitutions:\n             yield 'All', None, RuntimeError('Max post-process passes exceeded.')\n \n-        # Store the processed paths\n-        self.hashed_files.update(hashed_files)\n-\n     def _post_process(self, paths, adjustable_paths, hashed_files):\n         # Sort the files by directory level\n         def path_level(name):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..8531ecc 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -121,24 +121,27 @@ class HashedFilesMixin:\n                 transformed_url += ('?#' if '?#' in url else '#') + fragment\n             return template % unquote(transformed_url)\n         return converter\n+        self.hashed_files.update(hashed_files)\n     def post_process(self, paths, dry_run=False, **options):\n         if dry_run:\n             return\n         hashed_files = {}\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n-        for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n+        non_adjustable_paths = {path: paths[path] for path in paths if path not in adjustable_paths}\n+        for name, hashed_name, processed, _ in self._post_process(non_adjustable_paths, [], hashed_files):\n             yield (name, hashed_name, processed)\n-        paths = {path: paths[path] for path in adjustable_paths}\n+        processed_files = set()\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n-            for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n+            for name, hashed_name, processed, subst in self._post_process({p: paths[p] for p in adjustable_paths}, adjustable_paths, hashed_files):\n+                if processed and name not in processed_files:\n+                    yield (name, hashed_name, processed)\n+                    processed_files.add(name)\n                 substitutions = substitutions or subst\n             if not substitutions:\n                 break\n         if substitutions:\n             yield ('All', None, RuntimeError('Max post-process passes exceeded.'))\n-        self.hashed_files.update(hashed_files)\n     def _post_process(self, paths, adjustable_paths, hashed_files):\n         def path_level(name):\n             return len(name.split(os.sep))\n", "normalized_occurrence": 1}
