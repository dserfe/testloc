{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py\nindex 496df38..51f6d81 100644\n--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n@@ -69,4 +69,32 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):\n     are sliced.\n     \"\"\"\n \n-    pass\n+    def _propagate_mask(self, operand1_mask, operand2_mask, handle_mask):\n+        \"\"\"\n+        Helper function to handle mask propagation during arithmetic operations.\n+        \"\"\"\n+        if operand1_mask is None and operand2_mask is None:\n+            return None\n+        \n+        if operand1_mask is None:\n+            operand1_mask = np.zeros_like(operand2_mask, dtype=bool)\n+        \n+        if operand2_mask is None:\n+            operand2_mask = np.zeros_like(operand1_mask, dtype=bool)\n+        \n+        return handle_mask(operand1_mask, operand2_mask)\n+\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        \"\"\"\n+        Multiply the NDDataRef object with another operand, handling mask propagation.\n+        \"\"\"\n+        # Perform the multiplication\n+        result_data = self.data * (operand.data if isinstance(operand, NDDataRef) else operand)\n+        \n+        # Handle mask propagation\n+        if isinstance(operand, NDDataRef):\n+            result_mask = self._propagate_mask(self.mask, operand.mask, handle_mask)\n+        else:\n+            result_mask = self._propagate_mask(self.mask, None, handle_mask)\n+        \n+        return NDDataRef(result_data, mask=result_mask)\n", "occurrence": 1, "normalized_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _propagate_mask(self, operand1_mask, operand2_mask, handle_mask):\n+        if operand1_mask is None and operand2_mask is None:\n+            return None\n+        if operand1_mask is None:\n+            operand1_mask = np.zeros_like(operand2_mask, dtype=bool)\n+        if operand2_mask is None:\n+            operand2_mask = np.zeros_like(operand1_mask, dtype=bool)\n+        return handle_mask(operand1_mask, operand2_mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result_data = self.data * (operand.data if isinstance(operand, NDDataRef) else operand)\n+        if isinstance(operand, NDDataRef):\n+            result_mask = self._propagate_mask(self.mask, operand.mask, handle_mask)\n+        else:\n+            result_mask = self._propagate_mask(self.mask, None, handle_mask)\n+        return NDDataRef(result_data, mask=result_mask)", "normalized_occurrence": 1}
