{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..67df1b4 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -329,7 +329,7 @@ class Token(CodegenAST):\n         apply : callable, optional\n             Function to apply to all values.\n         \"\"\"\n-        kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}\n+        kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude and k != \"text\"}\n         if apply is not None:\n             return {k: apply(v) for k, v in kwargs.items()}\n         else:\n@@ -895,7 +895,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n@@ -904,6 +904,9 @@ class String(Token):\n             raise TypeError(\"Argument text is not a string type.\")\n         return text\n \n+    def __new__(cls, text, **kwargs):\n+        return Token.__new__(cls, text, **kwargs)\n+\n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..5124e49 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -292,7 +292,7 @@ class Token(CodegenAST):\n         apply : callable, optional\n             Function to apply to all values.\n         \"\"\"\n-        kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude}\n+        kwargs = {k: getattr(self, k) for k in self.__slots__ if k not in exclude and k != 'text'}\n         if apply is not None:\n             return {k: apply(v) for k, v in kwargs.items()}\n         else:\n@@ -774,7 +774,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n@@ -783,6 +783,9 @@ class String(Token):\n             raise TypeError('Argument text is not a string type.')\n         return text\n \n+    def __new__(cls, text, **kwargs):\n+        return Token.__new__(cls, text, **kwargs)\n+\n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n \n", "normalized_occurrence": 1}
