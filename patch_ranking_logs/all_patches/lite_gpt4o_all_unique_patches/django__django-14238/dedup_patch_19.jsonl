{"model_name_or_path": "agentless", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..c769371 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2518,7 +2518,11 @@ class AutoFieldMeta(type):\n \n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        def all_subclasses(cls):\n+            return set(cls.__subclasses__()).union(\n+                [s for c in cls.__subclasses__() for s in all_subclasses(c)]\n+            )\n+        return all_subclasses(AutoField)\n \n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..bd254d2 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1309,7 +1309,9 @@ class AutoFieldMixin:\n class AutoFieldMeta(type):\n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        def all_subclasses(cls):\n+            return set(cls.__subclasses__()).union([s for c in cls.__subclasses__() for s in all_subclasses(c)])\n+        return all_subclasses(AutoField)\n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n     def __subclasscheck__(self, subclass):\n", "normalized_occurrence": 1}
