{"model_name_or_path": "agentless", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 3174ba6..8bb3e68 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -122,7 +122,10 @@ class SessionBase:\n         # RemovedInDjango40Warning: when the deprecation ends, handle here\n         # exceptions similar to what _legacy_decode() does now.\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            try:\n+                return self._legacy_decode(session_data)\n+            except Exception:\n+                return {}\n \n     def _legacy_encode(self, session_dict):\n         # RemovedInDjango40Warning.\n@@ -132,7 +135,10 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        try:\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        except binascii.Error:\n+            return {}\n         try:\n             # could produce ValueError if there is no ':'\n             hash, serialized = encoded_data.split(b':', 1)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex cfa6de2..35e4158 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -71,13 +71,19 @@ class SessionBase:\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         except Exception:\n-            return self._legacy_decode(session_data)\n+            try:\n+                return self._legacy_decode(session_data)\n+            except Exception:\n+                return {}\n     def _legacy_encode(self, session_dict):\n         serialized = self.serializer().dumps(session_dict)\n         hash = self._hash(serialized)\n         return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n     def _legacy_decode(self, session_data):\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        try:\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n+        except binascii.Error:\n+            return {}\n         try:\n             hash, serialized = encoded_data.split(b':', 1)\n             expected_hash = self._hash(serialized)\n", "normalized_occurrence": 1}
