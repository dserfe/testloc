{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..ad69eab 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -91,6 +91,21 @@ class DotBase(Mark):\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n \n+        # Apply formatter offset if available\n+        for var in variables:\n+            if var in scales:\n+                scale = scales[var]\n+                if hasattr(scale, '_get_formatter'):\n+                    formatter = scale._get_formatter(None, None, None, None, None)\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        # Update the formatter with the data to get proper offset\n+                        formatter.set_data_interval(value, value)\n+                        if formatter.get_offset():\n+                            # Adjust the value based on offset\n+                            value = value / float(formatter.get_offset().replace('×10', 'e').replace('−', '-'))\n+                            key[var] = value\n+                            res = self._resolve_properties(key, scales)\n+\n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n             sizes=[res[\"size\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..6b56cfe 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,17 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales:\n+                scale = scales[var]\n+                if hasattr(scale, '_get_formatter'):\n+                    formatter = scale._get_formatter(None, None, None, None, None)\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        formatter.set_data_interval(value, value)\n+                        if formatter.get_offset():\n+                            value = value / float(formatter.get_offset().replace('×10', 'e').replace('−', '-'))\n+                            key[var] = value\n+                            res = self._resolve_properties(key, scales)\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
