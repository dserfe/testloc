{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 13b44f5..f09eb84 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -135,10 +135,13 @@ class MatMul(MatrixExpr):\n \n def validate(*matrices):\n     \"\"\" Checks for valid shapes for args of MatMul \"\"\"\n-    for i in range(len(matrices)-1):\n-        A, B = matrices[i:i+2]\n-        if A.cols != B.rows:\n-            raise ShapeError(\"Matrices %s and %s are not aligned\"%(A, B))\n+    for i, matrix in enumerate(matrices):\n+        if not hasattr(matrix, 'rows') or not hasattr(matrix, 'cols'):\n+            raise ValueError(f\"Argument {i} is not a matrix\")\n+        if i < len(matrices) - 1:\n+            A, B = matrices[i:i+2]\n+            if A.cols != B.rows:\n+                raise ShapeError(\"Matrices %s and %s are not aligned\"%(A, B))\n \n # Rules\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex c9124f3..f2c875f 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -86,10 +86,13 @@ class MatMul(MatrixExpr):\n         coeff_c, coeff_nc = coeff.args_cnc(**kwargs)\n         return (coeff_c, coeff_nc + matrices)\n def validate(*matrices):\n-    for i in range(len(matrices) - 1):\n-        A, B = matrices[i:i + 2]\n-        if A.cols != B.rows:\n-            raise ShapeError('Matrices %s and %s are not aligned' % (A, B))\n+    for i, matrix in enumerate(matrices):\n+        if not hasattr(matrix, 'rows') or not hasattr(matrix, 'cols'):\n+            raise ValueError(f'Argument {i} is not a matrix')\n+        if i < len(matrices) - 1:\n+            A, B = matrices[i:i + 2]\n+            if A.cols != B.rows:\n+                raise ShapeError('Matrices %s and %s are not aligned' % (A, B))\n def newmul(*args):\n     if args[0] == 1:\n         args = args[1:]\n", "normalized_occurrence": 1}
