{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..e7e006e 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -693,11 +693,16 @@ class _EvaluatorPrinter(object):\n             return isinstance(ident, str) and ident.isidentifier() \\\n                     and not keyword.iskeyword(ident)\n     else:\n-        _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n+        _safe_ident_re = re.compile(r'^[a-zA-Z_][a-zA-Z0-9_]*$')\n \n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) \\\n+            if not isinstance(ident, str):\n+                return False\n+            # Explicitly check for special characters like curly braces\n+            if '{' in ident or '}' in ident:\n+                return False\n+            return bool(cls._safe_ident_re.match(ident)) \\\n                 and not (keyword.iskeyword(ident) or ident == 'None')\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..e928a53 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -280,7 +280,11 @@ class _EvaluatorPrinter(object):\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n+            if not isinstance(ident, str):\n+                return False\n+            if '{' in ident or '}' in ident:\n+                return False\n+            return bool(cls._safe_ident_re.match(ident)) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n         from sympy import Dummy, Symbol, Function, flatten\n         from sympy.matrices import DeferredVector\n", "normalized_occurrence": 1}
