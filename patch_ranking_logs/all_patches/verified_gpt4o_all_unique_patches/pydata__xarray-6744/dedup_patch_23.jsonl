{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..ccbae1a 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,10 +270,13 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        half_window = (self.window[0] - 1) // 2 if self.center[0] else 0\n+        stops = np.arange(1, len(self.window_labels) + 1) + half_window\n+        starts = stops - self.window[0]\n+        starts[:self.window[0] - half_window] = 0\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n+            if self.center[0]:\n+                label = self.window_labels[start + half_window] if start + half_window < len(self.window_labels) else label\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n             counts = window.count(dim=self.dim[0])\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 870b974..513caf9 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -106,10 +106,13 @@ class DataArrayRolling(Rolling['DataArray']):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError('__iter__ is only supported for 1d-rolling')\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[:int(self.window[0])] = 0\n+        half_window = (self.window[0] - 1) // 2 if self.center[0] else 0\n+        stops = np.arange(1, len(self.window_labels) + 1) + half_window\n+        starts = stops - self.window[0]\n+        starts[:self.window[0] - half_window] = 0\n         for label, start, stop in zip(self.window_labels, starts, stops):\n+            if self.center[0]:\n+                label = self.window_labels[start + half_window] if start + half_window < len(self.window_labels) else label\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n             counts = window.count(dim=self.dim[0])\n             window = window.where(counts >= self.min_periods)\n", "normalized_occurrence": 1}
