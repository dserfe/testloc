{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..bc6a17e 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -229,14 +229,18 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             for index in model._meta.index_together\n         ]\n \n-        indexes = model._meta.indexes\n+        # Filter out constraints that use expressions, as they are not supported in SQLite indexes\n+        def is_expression_constraint(constraint):\n+            return any(isinstance(field, F) for field in constraint.fields)\n+        \n+        indexes = [index for index in model._meta.indexes if not is_expression_constraint(index)]\n         if delete_field:\n             indexes = [\n                 index for index in indexes\n                 if delete_field.name not in index.fields\n             ]\n \n-        constraints = list(model._meta.constraints)\n+        constraints = [constraint for constraint in model._meta.constraints if not is_expression_constraint(constraint)]\n \n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..7a7e6e7 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -125,10 +125,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         apps = Apps()\n         unique_together = [[rename_mapping.get(n, n) for n in unique] for unique in model._meta.unique_together]\n         index_together = [[rename_mapping.get(n, n) for n in index] for index in model._meta.index_together]\n-        indexes = model._meta.indexes\n+        def is_expression_constraint(constraint):\n+            return any((isinstance(field, F) for field in constraint.fields))\n+        indexes = [index for index in model._meta.indexes if not is_expression_constraint(index)]\n         if delete_field:\n             indexes = [index for index in indexes if delete_field.name not in index.fields]\n-        constraints = list(model._meta.constraints)\n+        constraints = [constraint for constraint in model._meta.constraints if not is_expression_constraint(constraint)]\n         body_copy = copy.deepcopy(body)\n         meta_contents = {'app_label': model._meta.app_label, 'db_table': model._meta.db_table, 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n", "normalized_occurrence": 1}
