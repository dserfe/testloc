{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..c7d9403 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,8 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None and not isinstance(n_neighbors, int):\n+            raise ValueError(\"n_neighbors must be an integer\")\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -327,6 +329,9 @@ class KNeighborsMixin(object):\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if not isinstance(n_neighbors, int):\n+            raise ValueError(\"n_neighbors must be an integer\")\n+            n_neighbors = self.n_neighbors\n \n         if X is not None:\n             query_is_train = False\n@@ -380,7 +385,7 @@ class KNeighborsMixin(object):\n                     \"or set algorithm='brute'\" % self._fit_method)\n             result = Parallel(n_jobs, backend='threading')(\n                 delayed(self._tree.query, check_pickle=False)(\n-                    X[s], n_neighbors, return_distance)\n+                    X[s], int(n_neighbors), return_distance)\n                 for s in gen_even_slices(X.shape[0], n_jobs)\n             )\n             if return_distance:\n@@ -466,6 +471,9 @@ class KNeighborsMixin(object):\n         \"\"\"\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if not isinstance(n_neighbors, int):\n+            raise ValueError(\"n_neighbors must be an integer\")\n+            n_neighbors = self.n_neighbors\n \n         # kneighbors does the None handling.\n         if X is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..488ee73 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,6 +47,8 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n+        if n_neighbors is not None and (not isinstance(n_neighbors, int)):\n+            raise ValueError('n_neighbors must be an integer')\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -162,6 +164,9 @@ class KNeighborsMixin(object):\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if not isinstance(n_neighbors, int):\n+            raise ValueError('n_neighbors must be an integer')\n+            n_neighbors = self.n_neighbors\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n@@ -193,7 +198,7 @@ class KNeighborsMixin(object):\n         elif self._fit_method in ['ball_tree', 'kd_tree']:\n             if issparse(X):\n                 raise ValueError(\"%s does not work with sparse matrices. Densify the data, or set algorithm='brute'\" % self._fit_method)\n-            result = Parallel(n_jobs, backend='threading')((delayed(self._tree.query, check_pickle=False)(X[s], n_neighbors, return_distance) for s in gen_even_slices(X.shape[0], n_jobs)))\n+            result = Parallel(n_jobs, backend='threading')((delayed(self._tree.query, check_pickle=False)(X[s], int(n_neighbors), return_distance) for s in gen_even_slices(X.shape[0], n_jobs)))\n             if return_distance:\n                 dist, neigh_ind = tuple(zip(*result))\n                 result = (np.vstack(dist), np.vstack(neigh_ind))\n@@ -219,6 +224,9 @@ class KNeighborsMixin(object):\n     def kneighbors_graph(self, X=None, n_neighbors=None, mode='connectivity'):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        if not isinstance(n_neighbors, int):\n+            raise ValueError('n_neighbors must be an integer')\n+            n_neighbors = self.n_neighbors\n         if X is not None:\n             X = check_array(X, accept_sparse='csr')\n             n_samples1 = X.shape[0]\n", "normalized_occurrence": 1}
