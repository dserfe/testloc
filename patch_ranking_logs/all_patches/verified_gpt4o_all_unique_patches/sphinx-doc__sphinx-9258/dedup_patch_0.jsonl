{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..063e4f5 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -80,7 +80,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, Union[str, List[str]]]) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -112,12 +112,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            if isinstance(annotation, list):\n+                field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation)))\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n@@ -161,7 +164,8 @@ def augment_descriptions_with_types(\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            annotation = annotations[name]\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n@@ -169,7 +173,8 @@ def augment_descriptions_with_types(\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            annotation = annotations['return']\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..ddc58c4 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -52,7 +52,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, Union[str, List[str]]]) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -80,12 +80,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if not arg.get('type'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            if isinstance(annotation, list):\n+                field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation)))\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n@@ -119,13 +122,15 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            annotation = annotations[name]\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            annotation = annotations['return']\n+            field += nodes.field_body('', nodes.paragraph('', ' | '.join(annotation) if isinstance(annotation, list) else annotation))\n             node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n", "normalized_occurrence": 1}
