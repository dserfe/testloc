{"model_name_or_path": "agentless", "instance_id": "django__django-15127", "model_patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex b6f1796..563cd6c 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -1,7 +1,9 @@\n+\n from django.conf import settings\n from django.contrib.messages import constants, utils\n \n-LEVEL_TAGS = utils.get_level_tags()\n+def get_level_tags():\n+    return utils.get_level_tags()\n \n \n class Message:\n@@ -38,7 +40,7 @@ class Message:\n \n     @property\n     def level_tag(self):\n-        return LEVEL_TAGS.get(self.level, '')\n+        return get_level_tags().get(self.level, '')\n \n \n class BaseStorage:\n", "occurrence": 15, "normalized_patch": "diff --git a/django/contrib/messages/storage/base.py b/django/contrib/messages/storage/base.py\nindex 950c0cc..d66d1a9 100644\n--- a/django/contrib/messages/storage/base.py\n+++ b/django/contrib/messages/storage/base.py\n@@ -1,6 +1,7 @@\n from django.conf import settings\n from django.contrib.messages import constants, utils\n-LEVEL_TAGS = utils.get_level_tags()\n+def get_level_tags():\n+    return utils.get_level_tags()\n class Message:\n     def __init__(self, level, message, extra_tags=None):\n         self.level = int(level)\n@@ -20,7 +21,7 @@ class Message:\n         return ' '.join((tag for tag in [self.extra_tags, self.level_tag] if tag))\n     @property\n     def level_tag(self):\n-        return LEVEL_TAGS.get(self.level, '')\n+        return get_level_tags().get(self.level, '')\n class BaseStorage:\n     def __init__(self, request, *args, **kwargs):\n         self.request = request\n", "normalized_occurrence": 16}
