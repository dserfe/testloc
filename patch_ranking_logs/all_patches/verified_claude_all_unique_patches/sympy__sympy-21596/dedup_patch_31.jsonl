{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..eba5d4f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,7 +1389,17 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        # First check if other is contained in all sets\n+        if not all(fuzzy_bool(set.contains(other)) for set in self.args):\n+            return False\n+        # For intersection with Reals, ensure imaginary part is zero if the element is complex\n+        if any(arg == S.Reals for arg in self.args):\n+            try:\n+                if im(other) != 0:\n+                    return False\n+            except (TypeError, NotImplementedError):\n+                pass\n+        return True\n \n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..fec81d0 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,7 +530,15 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        if not all((fuzzy_bool(set.contains(other)) for set in self.args)):\n+            return False\n+        if any((arg == S.Reals for arg in self.args)):\n+            try:\n+                if im(other) != 0:\n+                    return False\n+            except (TypeError, NotImplementedError):\n+                pass\n+        return True\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n         completed = False\n", "normalized_occurrence": 1}
