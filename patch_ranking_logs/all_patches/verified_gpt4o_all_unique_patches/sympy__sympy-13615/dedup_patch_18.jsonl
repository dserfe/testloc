{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..88c253a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -217,7 +217,10 @@ class Set(Basic):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            non_numbers = [el for el in other if not el.is_number]\n+            numbers = [el for el in other if el.is_number]\n+            number_complement = FiniteSet(*[el for el in numbers if self.contains(el) != True])\n+            return Union(FiniteSet(*non_numbers), number_complement)\n \n     def symmetric_difference(self, other):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..6a21467 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -70,7 +70,10 @@ class Set(Basic):\n         elif isinstance(other, EmptySet):\n             return S.EmptySet\n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            non_numbers = [el for el in other if not el.is_number]\n+            numbers = [el for el in other if el.is_number]\n+            number_complement = FiniteSet(*[el for el in numbers if self.contains(el) != True])\n+            return Union(FiniteSet(*non_numbers), number_complement)\n     def symmetric_difference(self, other):\n         return SymmetricDifference(self, other)\n     def _symmetric_difference(self, other):\n", "normalized_occurrence": 1}
