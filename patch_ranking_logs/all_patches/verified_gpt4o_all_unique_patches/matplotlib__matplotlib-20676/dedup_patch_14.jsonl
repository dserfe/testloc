{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..70f27db 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2099,6 +2099,8 @@ class SpanSelector(_SelectorWidget):\n         # Reset canvas so that `new_axes` connects events.\n         self.canvas = None\n         self.artists = []\n+        self._original_xlim = ax.get_xlim()\n+        self._original_ylim = ax.get_ylim()\n         self.new_axes(ax)\n \n         # Setup handles\n@@ -2191,6 +2193,9 @@ class SpanSelector(_SelectorWidget):\n         else:\n             self.set_visible(True)\n \n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     @property\n@@ -2234,6 +2239,9 @@ class SpanSelector(_SelectorWidget):\n         # self._pressv is deprecated but we still need to maintain it\n         self._pressv = None\n \n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     def _onmove(self, event):\n@@ -2275,6 +2283,9 @@ class SpanSelector(_SelectorWidget):\n         if self.onmove_callback is not None:\n             self.onmove_callback(vmin, vmax)\n \n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     def _draw_shape(self, vmin, vmax):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..325abf5 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1731,6 +1731,8 @@ class SpanSelector(_SelectorWidget):\n         self.drag_from_anywhere = drag_from_anywhere\n         self.canvas = None\n         self.artists = []\n+        self._original_xlim = ax.get_xlim()\n+        self._original_ylim = ax.get_ylim()\n         self.new_axes(ax)\n         props = dict(color=rectprops.get('facecolor', 'r'))\n         props.update(cbook.normalize_kwargs(handle_props, Line2D._alias_map))\n@@ -1788,6 +1790,9 @@ class SpanSelector(_SelectorWidget):\n             self.visible = True\n         else:\n             self.set_visible(True)\n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     @property\n@@ -1825,6 +1830,9 @@ class SpanSelector(_SelectorWidget):\n         self.onselect(vmin, vmax)\n         self.update()\n         self._pressv = None\n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     def _onmove(self, event):\n@@ -1853,6 +1861,9 @@ class SpanSelector(_SelectorWidget):\n         self.extents = (vmin, vmax)\n         if self.onmove_callback is not None:\n             self.onmove_callback(vmin, vmax)\n+        if self._interactive:\n+            self.ax.set_xlim(self._original_xlim)\n+            self.ax.set_ylim(self._original_ylim)\n         return False\n \n     def _draw_shape(self, vmin, vmax):\n", "normalized_occurrence": 1}
