{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..4a94ffe 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -156,6 +156,13 @@ class Field(RegisterLookupMixin):\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\n+        if choices and max_length is not None:\n+            longest_choice = max((len(str(choice[0])) for choice in choices), default=0)\n+            if longest_choice > max_length:\n+                raise ValueError(\n+                    \"The longest value in 'choices' (%d) is longer than \"\n+                    \"'max_length' (%d).\" % (longest_choice, max_length)\n+                )\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..9046dcd 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -76,6 +76,10 @@ class Field(RegisterLookupMixin):\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\n+        if choices and max_length is not None:\n+            longest_choice = max((len(str(choice[0])) for choice in choices), default=0)\n+            if longest_choice > max_length:\n+                raise ValueError(\"The longest value in 'choices' (%d) is longer than 'max_length' (%d).\" % (longest_choice, max_length))\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n", "normalized_occurrence": 1}
