{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13496", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 17608bc..751dfc7 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -147,6 +147,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n         ``offset_ = -0.5``, making the decision function independent from the\n         contamination parameter.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     Notes\n     -----\n     The implementation is based on an ensemble of ExtraTreeRegressor. The\n@@ -173,7 +178,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n@@ -191,6 +197,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n+        self.warm_start = warm_start\n \n     def _set_oob_score(self, X, y):\n         raise NotImplementedError(\"OOB score not supported by iforest\")\n@@ -239,6 +246,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  FutureWarning)\n \n         X = check_array(X, accept_sparse=['csc'])\n+\n+        # If warm_start is True, check if we need to increase n_estimators\n+        if self.warm_start and hasattr(self, 'estimators_'):\n+            # If warm starting, add more estimators as needed\n+            self.n_estimators += len(self.estimators_)\n         if issparse(X):\n             # Pre-sort indices to avoid that each individual tree of the\n             # ensemble sorts the indices.\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 3ca6fb5..b2f437c 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -11,10 +11,11 @@ from .bagging import BaseBagging\n __all__ = ['IsolationForest']\n INTEGER_TYPES = (numbers.Integral, np.integer)\n class IsolationForest(BaseBagging, OutlierMixin):\n-    def __init__(self, n_estimators=100, max_samples='auto', contamination='legacy', max_features=1.0, bootstrap=False, n_jobs=None, behaviour='old', random_state=None, verbose=0):\n+    def __init__(self, n_estimators=100, max_samples='auto', contamination='legacy', max_features=1.0, bootstrap=False, n_jobs=None, behaviour='old', random_state=None, verbose=0, warm_start=False):\n         super().__init__(base_estimator=ExtraTreeRegressor(max_features=1, splitter='random', random_state=random_state), bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)\n         self.behaviour = behaviour\n         self.contamination = contamination\n+        self.warm_start = warm_start\n     def _set_oob_score(self, X, y):\n         raise NotImplementedError('OOB score not supported by iforest')\n     def _parallel_args(self):\n@@ -28,6 +29,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n         if self.behaviour == 'old':\n             warn('behaviour=\"old\" is deprecated and will be removed in version 0.22. Please use behaviour=\"new\", which makes the decision_function change to match other anomaly detection algorithm API.', FutureWarning)\n         X = check_array(X, accept_sparse=['csc'])\n+        if self.warm_start and hasattr(self, 'estimators_'):\n+            self.n_estimators += len(self.estimators_)\n         if issparse(X):\n             X.sort_indices()\n         rnd = check_random_state(self.random_state)\n", "normalized_occurrence": 1}
