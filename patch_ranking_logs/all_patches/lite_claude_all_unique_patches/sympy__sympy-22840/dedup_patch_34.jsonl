{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..e24019f 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -787,6 +787,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     if isinstance(exprs, (Basic, MatrixBase)):\n         exprs = [exprs]\n \n+    from sympy.matrices.expressions import MatrixElement\n     copy = exprs\n     temp = []\n     for e in exprs:\n@@ -795,7 +796,12 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n             temp.append(Tuple(*e.todok().items()))\n         else:\n-            temp.append(e)\n+            # Don't try to optimize MatrixElement access\n+            if not any(isinstance(arg, MatrixElement) for arg in preorder_traversal(e)):\n+                temp.append(e)\n+            else:\n+                # Keep original expression if it contains MatrixElements\n+                temp.append(e)\n     exprs = temp\n     del temp\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..87601e2 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -310,6 +310,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n         exprs = sympify(exprs)\n     if isinstance(exprs, (Basic, MatrixBase)):\n         exprs = [exprs]\n+    from sympy.matrices.expressions import MatrixElement\n     copy = exprs\n     temp = []\n     for e in exprs:\n@@ -317,6 +318,8 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n             temp.append(Tuple(*e.flat()))\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n             temp.append(Tuple(*e.todok().items()))\n+        elif not any((isinstance(arg, MatrixElement) for arg in preorder_traversal(e))):\n+            temp.append(e)\n         else:\n             temp.append(e)\n     exprs = temp\n", "normalized_occurrence": 1}
