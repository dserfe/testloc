{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..ead7bfc 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,10 +112,26 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    Commas can be escaped with backslash to be treated as part of the regex pattern.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    # Split on unescaped commas\n+    current = []\n+    escaped = False\n+    for char in value:\n+        if escaped:\n+            current.append(char)\n+            escaped = False\n+        elif char == '\\\\':\n+            escaped = True\n+        elif char == ',' and not escaped:\n+            if current:\n+                patterns.append(_regex_transformer(''.join(current)))\n+            current = []\n+        else:\n+            current.append(char)\n+    if current:\n+        patterns.append(_regex_transformer(''.join(current)))\n     return patterns\n \n \n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..d1fd916 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,8 +55,22 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current = []\n+    escaped = False\n+    for char in value:\n+        if escaped:\n+            current.append(char)\n+            escaped = False\n+        elif char == '\\\\':\n+            escaped = True\n+        elif char == ',' and (not escaped):\n+            if current:\n+                patterns.append(_regex_transformer(''.join(current)))\n+            current = []\n+        else:\n+            current.append(char)\n+    if current:\n+        patterns.append(_regex_transformer(''.join(current)))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n", "normalized_occurrence": 1}
