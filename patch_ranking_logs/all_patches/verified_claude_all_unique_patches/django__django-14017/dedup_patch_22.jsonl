{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..976adc5 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,9 +40,14 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        from django.db.models.expressions import Exists\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n+        # Convert Exists to Q object if necessary\n+        if isinstance(other, Exists):\n+            other = Q(other)\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             _, args, kwargs = self.deconstruct()\n@@ -64,6 +69,9 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..0e7207b 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -17,8 +17,11 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        from django.db.models.expressions import Exists\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n+        if isinstance(other, Exists):\n+            other = Q(other)\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n@@ -34,6 +37,8 @@ class Q(tree.Node):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n", "normalized_occurrence": 1}
