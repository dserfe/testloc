{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..0590584 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -18,6 +18,8 @@ from django.utils import tree\n # sides of the relation. The join_field is the field backing the relation.\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n \n+from django.db.models.expressions import Exists\n+\n \n def subclasses(cls):\n     yield cls\n@@ -40,15 +42,15 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n-        # Or if this Q is empty, ignore it and just use `other`.\n-        elif not self:\n+        # Or if this Q is empty and other is a Q, ignore it and just use `other`.\n+        elif not self and isinstance(other, Q):\n             _, args, kwargs = other.deconstruct()\n             return type(other)(*args, **kwargs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..37c8dc7 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -5,6 +5,7 @@ from django.core.exceptions import FieldError\n from django.db.models.constants import LOOKUP_SEP\n from django.utils import tree\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n+from django.db.models.expressions import Exists\n def subclasses(cls):\n     yield cls\n     for subclass in cls.__subclasses__():\n@@ -17,12 +18,12 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n-        elif not self:\n+        elif not self and isinstance(other, Q):\n             _, args, kwargs = other.deconstruct()\n             return type(other)(*args, **kwargs)\n         obj = type(self)()\n", "normalized_occurrence": 1}
