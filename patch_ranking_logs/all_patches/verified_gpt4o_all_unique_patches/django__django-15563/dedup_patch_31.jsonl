{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..c968ead 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,7 +988,19 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        # Ensure update values are added to the correct table in case of multi-table inheritance\n+        concrete_model = self.model._meta.concrete_model\n+        if concrete_model is not self.model:\n+            # Update values should be applied to the concrete model\n+            update_values = {}\n+            for key, value in kwargs.items():\n+                field = self.model._meta.get_field(key)\n+                model = field.model._meta.concrete_model\n+                if model == concrete_model:\n+                    update_values[key] = value\n+            query.add_update_values(update_values)\n+        else:\n+            query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..5c1fc9a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,7 +533,17 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        concrete_model = self.model._meta.concrete_model\n+        if concrete_model is not self.model:\n+            update_values = {}\n+            for key, value in kwargs.items():\n+                field = self.model._meta.get_field(key)\n+                model = field.model._meta.concrete_model\n+                if model == concrete_model:\n+                    update_values[key] = value\n+            query.add_update_values(update_values)\n+        else:\n+            query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n", "normalized_occurrence": 1}
