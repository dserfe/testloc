{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..595de09 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -393,7 +393,13 @@ class Set(Basic):\n         # without evaluating new Set objects. It should be the other way round\n         # so that the intersect method uses is_subset for evaluation.\n         if self.intersect(other) == self:\n-            return True\n+            if self.is_finite_set and other.is_finite_set:\n+                # If intersection equals self and cardinalities are equal,\n+                # then the sets must be equal\n+                if len(self) == len(other):\n+                    return True\n+            else:\n+                return True\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..c5d0fe5 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -138,7 +138,11 @@ class Set(Basic):\n         if ret is not None:\n             return ret\n         if self.intersect(other) == self:\n-            return True\n+            if self.is_finite_set and other.is_finite_set:\n+                if len(self) == len(other):\n+                    return True\n+            else:\n+                return True\n     def _eval_is_subset(self, other):\n         return None\n     def _eval_is_superset(self, other):\n", "normalized_occurrence": 1}
