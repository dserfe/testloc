{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..bb799d2 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -89,7 +89,14 @@ class StrPrinter(Printer):\n         return '%s(%s)' % (expr.func, expr.arg)\n \n     def _print_Basic(self, expr):\n-        l = [self._print(o) for o in expr.args]\n+        # Create a new printer with the same settings for nested expressions\n+        l = []\n+        for o in expr.args:\n+            # Pass along all current printer settings\n+            if hasattr(self, '_settings'):\n+                l.append(self.doprint(o))\n+            else:\n+                l.append(self._print(o))\n         return expr.__class__.__name__ + \"(%s)\" % \", \".join(l)\n \n     def _print_BlockMatrix(self, B):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..9425e37 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -62,7 +62,12 @@ class StrPrinter(Printer):\n     def _print_AppliedPredicate(self, expr):\n         return '%s(%s)' % (expr.func, expr.arg)\n     def _print_Basic(self, expr):\n-        l = [self._print(o) for o in expr.args]\n+        l = []\n+        for o in expr.args:\n+            if hasattr(self, '_settings'):\n+                l.append(self.doprint(o))\n+            else:\n+                l.append(self._print(o))\n         return expr.__class__.__name__ + '(%s)' % ', '.join(l)\n     def _print_BlockMatrix(self, B):\n         if B.blocks.shape == (1, 1):\n", "normalized_occurrence": 1}
