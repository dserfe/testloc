{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..c8485fb 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -370,7 +370,7 @@ class HTTPAdapter(BaseAdapter):\n         \"\"\"\n         pass\n \n-    def proxy_headers(self, proxy):\n+    def proxy_headers(self, proxy, request=None):\n         \"\"\"Returns a dictionary of the headers to add to any request sent\n         through a proxy. This works with urllib3 magic to ensure that they are\n         correctly sent to the proxy, rather than in a tunnelled request if\n@@ -381,14 +381,20 @@ class HTTPAdapter(BaseAdapter):\n         :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n \n         :param proxy: The url of the proxy being used for this request.\n+        :param request: The PreparedRequest being sent.\n         :rtype: dict\n         \"\"\"\n         headers = {}\n+\n+        # Get proxy auth from url if present\n         username, password = get_auth_from_url(proxy)\n \n         if username:\n-            headers['Proxy-Authorization'] = _basic_auth_str(username,\n-                                                             password)\n+            headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n+\n+        # Prefer auth from request if available\n+        if request and request.headers.get('Proxy-Authorization'):\n+            headers['Proxy-Authorization'] = request.headers['Proxy-Authorization']\n \n         return headers\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..b5917e2 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -153,11 +153,13 @@ class HTTPAdapter(BaseAdapter):\n         return url\n     def add_headers(self, request, **kwargs):\n         pass\n-    def proxy_headers(self, proxy):\n+    def proxy_headers(self, proxy, request=None):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n         if username:\n             headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n+        if request and request.headers.get('Proxy-Authorization'):\n+            headers['Proxy-Authorization'] = request.headers['Proxy-Authorization']\n         return headers\n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         try:\n", "normalized_occurrence": 1}
