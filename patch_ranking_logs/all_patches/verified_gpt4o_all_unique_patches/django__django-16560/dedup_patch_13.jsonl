{"model_name_or_path": "agentless", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..744505d 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -112,7 +112,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(self.get_violation_error_message(), code='check_constraint_violation')\n         except FieldError:\n             pass\n \n@@ -385,7 +385,7 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code='unique_constraint_violation')\n                 # When fields are defined, use the unique_error_message() for\n                 # backward compatibility.\n                 for model, constraints in instance.get_constraints():\n@@ -393,13 +393,14 @@ class UniqueConstraint(BaseConstraint):\n                         if constraint is self:\n                             raise ValidationError(\n                                 instance.unique_error_message(model, self.fields)\n-                            )\n+                            , code='unique_constraint_violation'\n+                        )\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(\n                     against, using=using\n                 ):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code='unique_constraint_violation')\n             except FieldError:\n                 pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..0412d23 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -75,7 +75,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise ValidationError(self.get_violation_error_message(), code='check_constraint_violation')\n         except FieldError:\n             pass\n     def __repr__(self):\n@@ -219,15 +219,15 @@ class UniqueConstraint(BaseConstraint):\n         if not self.condition:\n             if queryset.exists():\n                 if self.expressions:\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code='unique_constraint_violation')\n                 for model, constraints in instance.get_constraints():\n                     for constraint in constraints:\n                         if constraint is self:\n-                            raise ValidationError(instance.unique_error_message(model, self.fields))\n+                            raise ValidationError(instance.unique_error_message(model, self.fields), code='unique_constraint_violation')\n         else:\n             against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n             try:\n                 if (self.condition & Exists(queryset.filter(self.condition))).check(against, using=using):\n-                    raise ValidationError(self.get_violation_error_message())\n+                    raise ValidationError(self.get_violation_error_message(), code='unique_constraint_violation')\n             except FieldError:\n                 pass\n\\ No newline at end of file\n", "normalized_occurrence": 1}
