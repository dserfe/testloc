{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..cba1905 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,10 +13,17 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n+    # Apply the decorator to a dummy function to get attributes we want to preserve\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    # Get any attributes set by the decorator\n+    assigned = tuple(a for a in functools.WRAPPER_ASSIGNMENTS if hasattr(dummy, a))\n+    # Update the wrapper with the original method's attributes first\n+    update_wrapper(_wrapper, _wrapper.func)\n+    # Then copy any attributes from the decorator's dummy function\n+    for attr in assigned:\n+        setattr(_wrapper, attr, getattr(dummy, attr))\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..f23ba32 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -8,7 +8,10 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n-    update_wrapper(_wrapper, dummy)\n+    assigned = tuple((a for a in functools.WRAPPER_ASSIGNMENTS if hasattr(dummy, a)))\n+    update_wrapper(_wrapper, _wrapper.func)\n+    for attr in assigned:\n+        setattr(_wrapper, attr, getattr(dummy, attr))\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
