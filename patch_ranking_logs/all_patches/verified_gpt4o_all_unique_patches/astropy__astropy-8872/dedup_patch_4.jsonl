{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8872", "model_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 0ffb147..2863129 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -296,7 +296,8 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                 if not copy:\n                     return value\n \n-                if not (np.can_cast(np.float32, value.dtype) or\n+                if not (np.can_cast(np.float16, value.dtype) or\n+                        np.can_cast(np.float32, value.dtype) or\n                         value.dtype.fields):\n                     dtype = float\n \n@@ -377,7 +378,8 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n                             \"Numpy numeric type.\")\n \n         # by default, cast any integer, boolean, etc., to float\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype)\n+        if dtype is None and (not (np.can_cast(np.float16, value.dtype)\n+                                   or np.can_cast(np.float32, value.dtype)\n                                    or value.dtype.fields)\n                               or value.dtype.kind == 'O'):\n             value = value.astype(float)\n", "occurrence": 2, "normalized_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 3719125..7836c81 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -85,7 +85,7 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n             if dtype is None:\n                 if not copy:\n                     return value\n-                if not (np.can_cast(np.float32, value.dtype) or value.dtype.fields):\n+                if not (np.can_cast(np.float16, value.dtype) or np.can_cast(np.float32, value.dtype) or value.dtype.fields):\n                     dtype = float\n             return np.array(value, dtype=dtype, copy=copy, order=order, subok=True, ndmin=ndmin)\n         value_unit = None\n@@ -126,7 +126,7 @@ class Quantity(np.ndarray, metaclass=InheritDocstrings):\n         value = np.array(value, dtype=dtype, copy=copy, order=order, subok=False, ndmin=ndmin)\n         if value.dtype.kind in 'OSU' and (not (value.dtype.kind == 'O' and isinstance(value.item(() if value.ndim == 0 else 0), numbers.Number))):\n             raise TypeError('The value must be a valid Python or Numpy numeric type.')\n-        if dtype is None and (not (np.can_cast(np.float32, value.dtype) or value.dtype.fields) or value.dtype.kind == 'O'):\n+        if dtype is None and (not (np.can_cast(np.float16, value.dtype) or np.can_cast(np.float32, value.dtype) or value.dtype.fields) or value.dtype.kind == 'O'):\n             value = value.astype(float)\n         value = value.view(cls)\n         value._set_unit(value_unit)\n", "normalized_occurrence": 3}
