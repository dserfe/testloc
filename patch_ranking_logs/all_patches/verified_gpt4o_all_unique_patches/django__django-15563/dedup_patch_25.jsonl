{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..a474256 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,7 +988,13 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        # Ensure that the updates are scoped to the appropriate table\n+        model = self.model\n+        init_kwargs = {}\n+        for field, val in kwargs.items():\n+            if field in model._meta.fields_map:\n+                init_kwargs[field] = val\n+        query.add_update_values(init_kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..8a557f5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,7 +533,12 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        model = self.model\n+        init_kwargs = {}\n+        for field, val in kwargs.items():\n+            if field in model._meta.fields_map:\n+                init_kwargs[field] = val\n+        query.add_update_values(init_kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n", "normalized_occurrence": 1}
