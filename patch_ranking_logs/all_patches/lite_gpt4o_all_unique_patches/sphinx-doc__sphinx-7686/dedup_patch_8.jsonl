{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7686", "model_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex 9925546..8f4c667 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -246,7 +246,12 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n     ns.update(context)\n \n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [member for member in dir(obj)\n+                             if getattr(obj, member, None) is not None\n+                             and getattr(obj, member).__module__ == obj.__name__]\n         ns['functions'], ns['all_functions'] = \\\n             get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = \\\n@@ -259,7 +264,12 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any,\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [member for member in dir(obj)\n+                             if getattr(obj, member, None) is not None\n+                             and getattr(obj, member).__module__ == obj.__name__]\n         ns['inherited_members'] = \\\n             set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = \\\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autosummary/generate.py b/sphinx/ext/autosummary/generate.py\nindex 03652ed..df07407 100644\n--- a/sphinx/ext/autosummary/generate.py\n+++ b/sphinx/ext/autosummary/generate.py\n@@ -149,7 +149,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any, template: Aut\n     ns = {}\n     ns.update(context)\n     if doc.objtype == 'module':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [member for member in dir(obj) if getattr(obj, member, None) is not None and getattr(obj, member).__module__ == obj.__name__]\n         ns['functions'], ns['all_functions'] = get_members(obj, {'function'}, imported=imported_members)\n         ns['classes'], ns['all_classes'] = get_members(obj, {'class'}, imported=imported_members)\n         ns['exceptions'], ns['all_exceptions'] = get_members(obj, {'exception'}, imported=imported_members)\n@@ -158,7 +161,10 @@ def generate_autosummary_content(name: str, obj: Any, parent: Any, template: Aut\n         if ispackage and recursive:\n             ns['modules'], ns['all_modules'] = get_modules(obj)\n     elif doc.objtype == 'class':\n-        ns['members'] = dir(obj)\n+        if imported_members:\n+            ns['members'] = dir(obj)\n+        else:\n+            ns['members'] = [member for member in dir(obj) if getattr(obj, member, None) is not None and getattr(obj, member).__module__ == obj.__name__]\n         ns['inherited_members'] = set(dir(obj)) - set(obj.__dict__.keys())\n         ns['methods'], ns['all_methods'] = get_members(obj, {'method'}, ['__init__'])\n         ns['attributes'], ns['all_attributes'] = get_members(obj, {'attribute', 'property'})\n", "normalized_occurrence": 1}
