{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..3b63c11 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -933,10 +933,8 @@ class Model(metaclass=ModelBase):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n-                    setattr(self, field.attname, obj.pk)\n+                # Always update the parent field with the related object's primary key\n+                setattr(self, field.attname, obj.pk)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..fdbb9a5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -493,8 +493,7 @@ class Model(metaclass=ModelBase):\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n-                elif getattr(self, field.attname) is None:\n-                    setattr(self, field.attname, obj.pk)\n+                setattr(self, field.attname, obj.pk)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n     def delete(self, using=None, keep_parents=False):\n", "normalized_occurrence": 3}
