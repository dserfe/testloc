{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..b10dddd 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -447,10 +447,12 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n+            if arg.dimensions:\n+                return \"%s *%s\" % (t, self._string_var(arg.name))\n             return \"%s %s\" % (t, self._string_var(arg.name))\n \n     def _declare_arg(self, arg):\n-        proto = self._prototype_arg(arg)\n+        proto = self._prototype_arg(arg, as_pointer=True)\n         if arg.dimensions:\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..bb1f9ea 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -200,9 +200,11 @@ class CythonCodeWrapper(CodeWrapper):\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n+            if arg.dimensions:\n+                return '%s *%s' % (t, self._string_var(arg.name))\n             return '%s %s' % (t, self._string_var(arg.name))\n     def _declare_arg(self, arg):\n-        proto = self._prototype_arg(arg)\n+        proto = self._prototype_arg(arg, as_pointer=True)\n         if arg.dimensions:\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n", "normalized_occurrence": 1}
