{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..80749f2 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -297,7 +297,20 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    # Skip directory if it's not accessible or if it would cause recursive watching\n+                    try:\n+                        if not directory.exists():\n+                            continue\n+                        for file in directory.glob(pattern):\n+                            # Avoid yielding files that are already being watched\n+                            if file.is_file() and not any(\n+                                file.is_relative_to(watched_dir)\n+                                for watched_dir in self.directory_globs.keys()\n+                                if watched_dir != directory\n+                            ):\n+                                yield file\n+                    except (OSError, ValueError):\n+                        continue\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..074bb46 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -185,7 +185,14 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    try:\n+                        if not directory.exists():\n+                            continue\n+                        for file in directory.glob(pattern):\n+                            if file.is_file() and (not any((file.is_relative_to(watched_dir) for watched_dir in self.directory_globs.keys() if watched_dir != directory))):\n+                                yield file\n+                    except (OSError, ValueError):\n+                        continue\n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         while django_main_thread.is_alive():\n             if app_reg.ready_event.wait(timeout=0.1):\n", "normalized_occurrence": 1}
