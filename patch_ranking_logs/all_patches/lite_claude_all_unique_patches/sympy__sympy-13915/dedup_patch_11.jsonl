{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..a7d101f 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -917,9 +917,26 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    # If the result contains nan or undefined values, try using limit\n+                    if rv.has(S.NaN) or rv.has(S.ComplexInfinity):\n+                        from sympy import limit\n+                        try:\n+                            rv = limit(self, old, new)\n+                        except:\n+                            # If limit fails, fall back to original substitution\n+                            rv = rv._subs(old, new, **kwargs)\n+                except:\n+                    # If any error occurs during substitution, try limit\n+                    from sympy import limit\n+                    try:\n+                        rv = limit(self, old, new)\n+                    except:\n+                        # If limit fails too, use original substitution\n+                        rv = rv._subs(old, new, **kwargs)\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..0641264 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -326,9 +326,22 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                    if rv.has(S.NaN) or rv.has(S.ComplexInfinity):\n+                        from sympy import limit\n+                        try:\n+                            rv = limit(self, old, new)\n+                        except:\n+                            rv = rv._subs(old, new, **kwargs)\n+                except:\n+                    from sympy import limit\n+                    try:\n+                        rv = limit(self, old, new)\n+                    except:\n+                        rv = rv._subs(old, new, **kwargs)\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
