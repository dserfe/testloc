{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..099ee5d 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -675,6 +675,9 @@ class ASTNestedName(ASTBase):\n         for n in self.names:\n             if n.is_operator():\n                 continue\n+            # Handle user-defined literals as a special case\n+            if isinstance(n, ASTUserDefinedLiteral):\n+                continue\n             if n.templateArgs:\n                 count += 1\n         return count\n@@ -685,14 +688,25 @@ class ASTNestedName(ASTBase):\n             if tt in _id_shorthands_v1:\n                 return _id_shorthands_v1[tt]\n             else:\n-                return '::'.join(n.get_id(version) for n in self.names)\n+                # Handle UDL suffixes in name resolution\n+                names = []\n+                for n in self.names:\n+                    if isinstance(n, ASTUserDefinedLiteral):\n+                        names.append(n.value + n.suffix)\n+                    else:\n+                        names.append(n.get_id(version))\n+                return '::'.join(names)\n \n         res = []\n         if len(self.names) > 1 or len(modifiers) > 0:\n             res.append('N')\n         res.append(modifiers)\n         for n in self.names:\n-            res.append(n.get_id(version))\n+            if isinstance(n, ASTUserDefinedLiteral):\n+                # Handle UDL suffix in ID generation\n+                res.append(n.value + '_' + n.suffix)\n+            else:\n+                res.append(n.get_id(version))\n         if len(self.names) > 1 or len(modifiers) > 0:\n             res.append('E')\n         return ''.join(res)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..48eb683 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -137,6 +137,8 @@ class ASTNestedName(ASTBase):\n         for n in self.names:\n             if n.is_operator():\n                 continue\n+            if isinstance(n, ASTUserDefinedLiteral):\n+                continue\n             if n.templateArgs:\n                 count += 1\n         return count\n@@ -146,13 +148,22 @@ class ASTNestedName(ASTBase):\n             if tt in _id_shorthands_v1:\n                 return _id_shorthands_v1[tt]\n             else:\n-                return '::'.join((n.get_id(version) for n in self.names))\n+                names = []\n+                for n in self.names:\n+                    if isinstance(n, ASTUserDefinedLiteral):\n+                        names.append(n.value + n.suffix)\n+                    else:\n+                        names.append(n.get_id(version))\n+                return '::'.join(names)\n         res = []\n         if len(self.names) > 1 or len(modifiers) > 0:\n             res.append('N')\n         res.append(modifiers)\n         for n in self.names:\n-            res.append(n.get_id(version))\n+            if isinstance(n, ASTUserDefinedLiteral):\n+                res.append(n.value + '_' + n.suffix)\n+            else:\n+                res.append(n.get_id(version))\n         if len(self.names) > 1 or len(modifiers) > 0:\n             res.append('E')\n         return ''.join(res)\n", "normalized_occurrence": 1}
