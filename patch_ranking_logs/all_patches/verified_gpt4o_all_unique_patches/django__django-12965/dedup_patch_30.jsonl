{"model_name_or_path": "agentless", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..edbb0e5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -744,7 +744,15 @@ class QuerySet:\n \n         collector = Collector(using=del_query.db)\n         collector.collect(del_query)\n-        deleted, _rows_count = collector.delete()\n+        # Use raw SQL delete to avoid subquery for performance and compatibility with LOCK TABLES\n+        if del_query.db.backend_name == 'mysql':\n+            cursor = del_query.db.cursor()\n+            sql, params = del_query.query.get_compiler(using=del_query.db).as_sql()\n+            cursor.execute(f\"DELETE FROM {del_query.model._meta.db_table} WHERE id IN (SELECT id FROM ({sql}) as sub)\", params)\n+            deleted = cursor.rowcount\n+            _rows_count = deleted\n+        else:\n+            deleted, _rows_count = collector.delete()\n \n         # Clear the result cache, in case this QuerySet gets reused.\n         self._result_cache = None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..a926bff 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -445,7 +445,14 @@ class QuerySet:\n         del_query.query.clear_ordering(force_empty=True)\n         collector = Collector(using=del_query.db)\n         collector.collect(del_query)\n-        deleted, _rows_count = collector.delete()\n+        if del_query.db.backend_name == 'mysql':\n+            cursor = del_query.db.cursor()\n+            sql, params = del_query.query.get_compiler(using=del_query.db).as_sql()\n+            cursor.execute(f'DELETE FROM {del_query.model._meta.db_table} WHERE id IN (SELECT id FROM ({sql}) as sub)', params)\n+            deleted = cursor.rowcount\n+            _rows_count = deleted\n+        else:\n+            deleted, _rows_count = collector.delete()\n         self._result_cache = None\n         return (deleted, _rows_count)\n     delete.alters_data = True\n", "normalized_occurrence": 1}
