{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..e841929 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,24 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise, And\n+        \n+        def block_index(idx, blocksizes):\n+            current_idx = 0\n+            expr = None\n+            for block_idx, size in enumerate(blocksizes):\n+                condition = And(current_idx <= idx, idx < current_idx + size)\n+                if expr is None:\n+                    expr = Piecewise((block_idx, condition))\n+                else:\n+                    expr = Piecewise((block_idx, condition), (expr, True))\n+                current_idx += size\n+            return expr, idx - current_idx + size\n+        \n+        row_block, i_new = block_index(i, self.rowblocksizes)\n+        col_block, j_new = block_index(j, self.colblocksizes)\n+        \n+        return self.blocks[row_block, col_block][i_new, j_new]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..ce998a3 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,21 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise, And\n+        def block_index(idx, blocksizes):\n+            current_idx = 0\n+            expr = None\n+            for block_idx, size in enumerate(blocksizes):\n+                condition = And(current_idx <= idx, idx < current_idx + size)\n+                if expr is None:\n+                    expr = Piecewise((block_idx, condition))\n+                else:\n+                    expr = Piecewise((block_idx, condition), (expr, True))\n+                current_idx += size\n+            return (expr, idx - current_idx + size)\n+        row_block, i_new = block_index(i, self.rowblocksizes)\n+        col_block, j_new = block_index(j, self.colblocksizes)\n+        return self.blocks[row_block, col_block][i_new, j_new]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
