{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..8e2be57 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -164,13 +164,12 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+    # Add 'rtype' if there's a return annotation and no existing rtype\n+    if 'return' in annotations and 'return' not in has_type:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+        node += field\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..15852c3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -121,12 +121,11 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n-    if 'return' in annotations:\n-        if 'return' in has_description and 'return' not in has_type:\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n-            node += field\n+    if 'return' in annotations and 'return' not in has_type:\n+        field = nodes.field()\n+        field += nodes.field_name('', 'rtype')\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+        node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\n", "normalized_occurrence": 1}
