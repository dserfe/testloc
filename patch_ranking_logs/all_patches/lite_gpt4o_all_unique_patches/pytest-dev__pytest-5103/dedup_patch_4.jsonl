{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..1fc9af9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -839,8 +839,72 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.stack = []\n         self.on_failure = []\n         self.push_format_context()\n-        # Rewrite assert into a bunch of statements.\n         top_condition, explanation = self.visit(assert_.test)\n+\n+        if (\n+            isinstance(assert_.test, ast.Call)\n+            and isinstance(assert_.test.func, ast.Name)\n+            and assert_.test.func.id in (\"all\", \"any\")\n+        ):\n+            is_all = assert_.test.func.id == \"all\"\n+            temp_var_name = self.variable()\n+            self.statements.append(\n+                ast.Assign(\n+                    targets=[ast.Name(id=temp_var_name, ctx=ast.Store())],\n+                    value=assert_.test.args[0],\n+                )\n+            )\n+            loop_var_name = self.variable()\n+            loop_body = [\n+                ast.If(\n+                    test=ast.UnaryOp(\n+                        op=ast.Not() if is_all else ast.Is(),\n+                        operand=ast.Call(\n+                            func=assert_.test.args[0].elt,\n+                            args=[ast.Name(id=loop_var_name, ctx=ast.Load())],\n+                            keywords=[],\n+                        ),\n+                    ),\n+                    body=[\n+                        ast.Assign(\n+                            targets=[ast.Name(id=loop_var_name, ctx=ast.Store())],\n+                            value=ast.Name(id=loop_var_name, ctx=ast.Load()),\n+                        ),\n+                        ast.Raise(\n+                            exc=ast.Call(\n+                                func=ast.Name(id=\"AssertionError\", ctx=ast.Load()),\n+                                args=[\n+                                    ast.BinOp(\n+                                        left=ast.Str(s=\"Element failed: \"),\n+                                        op=ast.Add(),\n+                                        right=self.display(ast.Name(id=loop_var_name, ctx=ast.Load())),\n+                                    )\n+                                ],\n+                                keywords=[],\n+                            ),\n+                            cause=None,\n+                        ),\n+                    ],\n+                    orelse=[],\n+                )\n+            ]\n+            self.statements.extend([\n+                ast.For(\n+                    target=ast.Name(id=loop_var_name, ctx=ast.Store()),\n+                    iter=ast.Name(id=temp_var_name, ctx=ast.Load()),\n+                    body=loop_body,\n+                    orelse=[],\n+                ),\n+                ast.If(\n+                    test=ast.UnaryOp(\n+                        op=ast.Not(),\n+                        operand=ast.Name(id=temp_var_name, ctx=ast.Load()),\n+                    ),\n+                    body=self.on_failure,\n+                    orelse=[],\n+                ),\n+            ])\n+            return self.statements\n         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n         if self.module_path is not None:\n             self.statements.append(\n@@ -1081,4 +1145,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..2229d09 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -459,6 +459,14 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.on_failure = []\n         self.push_format_context()\n         top_condition, explanation = self.visit(assert_.test)\n+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and (assert_.test.func.id in ('all', 'any')):\n+            is_all = assert_.test.func.id == 'all'\n+            temp_var_name = self.variable()\n+            self.statements.append(ast.Assign(targets=[ast.Name(id=temp_var_name, ctx=ast.Store())], value=assert_.test.args[0]))\n+            loop_var_name = self.variable()\n+            loop_body = [ast.If(test=ast.UnaryOp(op=ast.Not() if is_all else ast.Is(), operand=ast.Call(func=assert_.test.args[0].elt, args=[ast.Name(id=loop_var_name, ctx=ast.Load())], keywords=[])), body=[ast.Assign(targets=[ast.Name(id=loop_var_name, ctx=ast.Store())], value=ast.Name(id=loop_var_name, ctx=ast.Load())), ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.BinOp(left=ast.Str(s='Element failed: '), op=ast.Add(), right=self.display(ast.Name(id=loop_var_name, ctx=ast.Load())))], keywords=[]), cause=None)], orelse=[])]\n+            self.statements.extend([ast.For(target=ast.Name(id=loop_var_name, ctx=ast.Store()), iter=ast.Name(id=temp_var_name, ctx=ast.Load()), body=loop_body, orelse=[]), ast.If(test=ast.UnaryOp(op=ast.Not(), operand=ast.Name(id=temp_var_name, ctx=ast.Load())), body=self.on_failure, orelse=[])])\n+            return self.statements\n         if self.module_path is not None:\n             self.statements.append(self.warn_about_none_ast(top_condition, module_path=self.module_path, lineno=assert_.lineno))\n         body = self.on_failure\n", "normalized_occurrence": 1}
