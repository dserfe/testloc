{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..ca99e37 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -255,6 +255,8 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n+        if term == 2**k:\n+            return 2**(n*(n - 1)/2)\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n \n@@ -288,6 +290,8 @@ class Product(ExprWithIntLimits):\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n \n+        elif term == 2**k:\n+            return 2**(n*(n - 1)/2)\n         elif term.is_Mul:\n             exclude, include = [], []\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..057354b 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,6 +61,8 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        if term == 2 ** k:\n+            return 2 ** (n * (n - 1) / 2)\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n@@ -82,6 +84,8 @@ class Product(ExprWithIntLimits):\n             else:\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n+        elif term == 2 ** k:\n+            return 2 ** (n * (n - 1) / 2)\n         elif term.is_Mul:\n             exclude, include = ([], [])\n             for t in term.args:\n", "normalized_occurrence": 1}
