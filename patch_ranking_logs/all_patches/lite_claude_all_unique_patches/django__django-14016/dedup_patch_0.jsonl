{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..047504a 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -46,10 +46,18 @@ class Q(tree.Node):\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            obj = type(self)()\n+            obj.connector = self.connector\n+            obj.negated = self.negated\n+            obj.children = self.children\n+            return obj\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            obj = type(self)()\n+            obj.connector = other.connector\n+            obj.negated = other.negated\n+            obj.children = other.children\n+            return obj\n \n         obj = type(self)()\n         obj.connector = conn\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..b6d7527 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -21,9 +21,17 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n         if not other:\n-            return copy.deepcopy(self)\n+            obj = type(self)()\n+            obj.connector = self.connector\n+            obj.negated = self.negated\n+            obj.children = self.children\n+            return obj\n         elif not self:\n-            return copy.deepcopy(other)\n+            obj = type(self)()\n+            obj.connector = other.connector\n+            obj.negated = other.negated\n+            obj.children = other.children\n+            return obj\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n", "normalized_occurrence": 1}
