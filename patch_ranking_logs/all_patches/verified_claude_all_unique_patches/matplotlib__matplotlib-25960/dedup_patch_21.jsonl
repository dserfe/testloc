{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex eeb18de..57a98b4 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1581,15 +1581,31 @@ default: %(va)s\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height.\n         \"\"\"\n+        # Create GridSpec with specified spacing\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n                       height_ratios=height_ratios)\n-\n+        \n+        # Calculate available space\n+        total_width = self.get_window_extent().width\n+        total_height = self.get_window_extent().height\n+        \n+        # Calculate subfigure dimensions including spacing\n+        width = total_width / ncols * (1 - wspace * (ncols - 1) / ncols)\n+        height = total_height / nrows * (1 - hspace * (nrows - 1) / nrows)\n+        \n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                # Calculate position with spacing\n+                x = i * (width + wspace * total_width / ncols)\n+                y = (nrows - 1 - j) * (height + hspace * total_height / nrows)\n+                \n+                # Create subfigure with explicit bbox\n+                bbox = [x / total_width, y / total_height, \n+                       width / total_width, height / total_height]\n+                sfarr[j, i] = self.add_subfigure(gs[j, i], bbox=bbox, **kwargs)\n \n         if squeeze:\n             # Discarding unneeded dimensions that equal 1.  If we only have one\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 19ec421..4516667 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -411,10 +411,17 @@ class FigureBase(Artist):\n         return gs\n     def subfigures(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)\n+        total_width = self.get_window_extent().width\n+        total_height = self.get_window_extent().height\n+        width = total_width / ncols * (1 - wspace * (ncols - 1) / ncols)\n+        height = total_height / nrows * (1 - hspace * (nrows - 1) / nrows)\n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                x = i * (width + wspace * total_width / ncols)\n+                y = (nrows - 1 - j) * (height + hspace * total_height / nrows)\n+                bbox = [x / total_width, y / total_height, width / total_width, height / total_height]\n+                sfarr[j, i] = self.add_subfigure(gs[j, i], bbox=bbox, **kwargs)\n         if squeeze:\n             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n         else:\n", "normalized_occurrence": 1}
