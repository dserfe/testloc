{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..385d38b 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -55,7 +56,7 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n-    handler = handlers_dict.get(name, None)\n+    handler = handlers_dict.get(name, None) or globals().get(f'refine_{name.lower()}', None)\n     if handler is None:\n         return expr\n     new_expr = handler(expr, assumptions)\n@@ -206,6 +207,38 @@ def refine_Pow(expr, assumptions):\n                     return expr\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg, exp\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> from sympy.abc import x\n+    >>> refine_arg(arg(x), Q.positive(x))\n+    0\n+    >>> refine_arg(arg(x), Q.negative(x))\n+    pi\n+    >>> refine_arg(arg(exp(x)), Q.real(x))\n+    0\n+\n+    \"\"\"\n+    from sympy import arg, pi, I\n+    if isinstance(expr, arg):\n+        arg_expr = expr.args[0]\n+        if ask(Q.positive(arg_expr), assumptions):\n+            return S.Zero\n+        elif ask(Q.negative(arg_expr), assumptions):\n+            return pi\n+        elif ask(Q.real(arg_expr), assumptions):\n+            return Piecewise(\n+                (0, arg_expr > 0),\n+                (pi, arg_expr < 0),\n+                (arg_expr, True))\n+    return expr\n+\n def refine_atan2(expr, assumptions):\n     \"\"\"\n     Handler for the atan2 function.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..db5b53e 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -13,7 +13,7 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n-    handler = handlers_dict.get(name, None)\n+    handler = handlers_dict.get(name, None) or globals().get(f'refine_{name.lower()}', None)\n     if handler is None:\n         return expr\n     new_expr = handler(expr, assumptions)\n@@ -96,6 +96,17 @@ def refine_Pow(expr, assumptions):\n                                 return expr.base ** (p.exp + i)\n                 if old != expr:\n                     return expr\n+def refine_arg(expr, assumptions):\n+    from sympy import arg, pi, I\n+    if isinstance(expr, arg):\n+        arg_expr = expr.args[0]\n+        if ask(Q.positive(arg_expr), assumptions):\n+            return S.Zero\n+        elif ask(Q.negative(arg_expr), assumptions):\n+            return pi\n+        elif ask(Q.real(arg_expr), assumptions):\n+            return Piecewise((0, arg_expr > 0), (pi, arg_expr < 0), (arg_expr, True))\n+    return expr\n def refine_atan2(expr, assumptions):\n     from sympy.functions.elementary.trigonometric import atan\n     from sympy.core import S\n", "normalized_occurrence": 1}
