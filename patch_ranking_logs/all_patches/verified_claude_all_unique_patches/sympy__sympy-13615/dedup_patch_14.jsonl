{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..6cb9696 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,23 +1933,41 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            \n+            if nums:\n+                intervals = []\n+                # Only include intervals that overlap with 'other'\n+                left, right = other.left, other.right\n+                left_open, right_open = other.left_open, other.right_open\n+                \n+                # Add interval before first number if it exists\n+                if nums[0] > left:\n+                    intervals.append(Interval(left, nums[0], left_open, True))\n+                \n+                # Add intervals between consecutive numbers\n                 for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n+                    if a >= left and b <= right:\n+                        intervals.append(Interval(a, b, True, True))\n+                \n+                # Add interval after last number if it exists\n+                if nums[-1] < right:\n+                    intervals.append(Interval(nums[-1], right, True, right_open))\n+                \n+                if not intervals:  # No intervals created\n+                    if syms:\n+                        return Complement(EmptySet(), FiniteSet(*syms))\n+                    return EmptySet()\n+                \n+                if syms:\n+                    return Complement(Union(*intervals, evaluate=False),\n                             FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                return Union(*intervals, evaluate=False)\n+            \n+            # Only symbols, return complement as is\n+            if syms:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n+            return other\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..61c62df 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,19 +842,28 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if nums:\n                 intervals = []\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                left, right = (other.left, other.right)\n+                left_open, right_open = (other.left_open, other.right_open)\n+                if nums[0] > left:\n+                    intervals.append(Interval(left, nums[0], left_open, True))\n                 for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    if a >= left and b <= right:\n+                        intervals.append(Interval(a, b, True, True))\n+                if nums[-1] < right:\n+                    intervals.append(Interval(nums[-1], right, True, right_open))\n+                if not intervals:\n+                    if syms:\n+                        return Complement(EmptySet(), FiniteSet(*syms))\n+                    return EmptySet()\n+                if syms:\n+                    return Complement(Union(*intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+                return Union(*intervals, evaluate=False)\n+            if syms:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n+            return other\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
