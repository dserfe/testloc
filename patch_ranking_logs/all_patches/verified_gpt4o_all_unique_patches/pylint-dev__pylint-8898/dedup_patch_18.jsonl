{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..7bf677f 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,10 +114,27 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in _escaped_csv_transformer(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n+def _escaped_csv_transformer(value: str) -> Sequence[str]:\n+    \"\"\"Transforms a comma separated list that allows escaped commas.\"\"\"\n+    parts = []\n+    current = []\n+    escape = False\n+    for char in value:\n+        if char == ',' and not escape:\n+            parts.append(''.join(current))\n+            current = []\n+        elif char == '\\\\' and not escape:\n+            escape = True\n+        else:\n+            current.append(char)\n+            escape = False\n+    parts.append(''.join(current))\n+    return parts\n+\n \n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..13b77c9 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,9 +55,24 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in _escaped_csv_transformer(value):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n+def _escaped_csv_transformer(value: str) -> Sequence[str]:\n+    parts = []\n+    current = []\n+    escape = False\n+    for char in value:\n+        if char == ',' and (not escape):\n+            parts.append(''.join(current))\n+            current = []\n+        elif char == '\\\\' and (not escape):\n+            escape = True\n+        else:\n+            current.append(char)\n+            escape = False\n+    parts.append(''.join(current))\n+    return parts\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n", "normalized_occurrence": 1}
