{"model_name_or_path": "agentless", "instance_id": "django__django-11532", "model_patch": "diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py\nindex af5ac38..a771c62 100644\n--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"\n Email message and email sending related helper functions.\n \"\"\"\n@@ -7,6 +8,8 @@ import socket\n \n # Cache the hostname, but do it lazily: socket.getfqdn() can take a couple of\n # seconds, which slows down the restart of the server.\n+import idna\n+\n class CachedDnsName:\n     def __str__(self):\n         return self.get_fqdn()\n@@ -16,5 +19,12 @@ class CachedDnsName:\n             self._fqdn = socket.getfqdn()\n         return self._fqdn\n \n+    def get_punycode(self):\n+        fqdn = self.get_fqdn()\n+        try:\n+            return idna.encode(fqdn).decode('ascii')\n+        except idna.IDNAError:\n+            return fqdn\n+\n \n-DNS_NAME = CachedDnsName()\n+DNS_NAME = CachedDnsName()\n", "occurrence": 1, "normalized_patch": "--- a/django/core/mail/utils.py\n+++ b/django/core/mail/utils.py\n+import idna\n+    def get_punycode(self):\n+        fqdn = self.get_fqdn()\n+        try:\n+            return idna.encode(fqdn).decode('ascii')\n+        except idna.IDNAError:\n+            return fqdn", "normalized_occurrence": 1}
