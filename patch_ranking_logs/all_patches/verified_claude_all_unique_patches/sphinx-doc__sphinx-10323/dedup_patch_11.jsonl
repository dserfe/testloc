{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..7fc8fb5 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -224,9 +224,9 @@ class LiteralIncludeReader:\n                        self.start_filter,\n                        self.end_filter,\n                        self.lines_filter,\n+                       self.dedent_filter,\n                        self.prepend_filter,\n-                       self.append_filter,\n-                       self.dedent_filter]\n+                       self.append_filter]\n             lines = self.read_file(self.filename, location=location)\n             for func in filters:\n                 lines = func(lines, location=location)\n@@ -342,8 +342,16 @@ class LiteralIncludeReader:\n \n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            # Get the indentation from the first non-empty line\n+            for line in lines:\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.insert(0, indentation + prepend + '\\n')\n+                    break\n+            else:\n+                # If no non-empty lines found, just prepend without indentation\n+                lines.insert(0, prepend + '\\n')\n \n         return lines\n \n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..fd24c5d 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -133,7 +133,7 @@ class LiteralIncludeReader:\n         if 'diff' in self.options:\n             lines = self.show_diff()\n         else:\n-            filters = [self.pyobject_filter, self.start_filter, self.end_filter, self.lines_filter, self.prepend_filter, self.append_filter, self.dedent_filter]\n+            filters = [self.pyobject_filter, self.start_filter, self.end_filter, self.lines_filter, self.dedent_filter, self.prepend_filter, self.append_filter]\n             lines = self.read_file(self.filename, location=location)\n             for func in filters:\n                 lines = func(lines, location=location)\n@@ -225,8 +225,14 @@ class LiteralIncludeReader:\n         return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            for line in lines:\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.insert(0, indentation + prepend + '\\n')\n+                    break\n+            else:\n+                lines.insert(0, prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 1}
