{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..a796f4f 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,25 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        accumulated_rows = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < accumulated_rows + numrows:\n+                row_inner_index = i - accumulated_rows\n                 break\n-            else:\n-                i -= numrows\n+            accumulated_rows += numrows\n+        else:\n+            raise IndexError(\"Row index out of range.\")\n+        \n+        accumulated_cols = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < accumulated_cols + numcols:\n+                col_inner_index = j - accumulated_cols\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            accumulated_cols += numcols\n+        else:\n+            raise IndexError(\"Column index out of range.\")\n+        \n+        return self.blocks[row_block, col_block][row_inner_index, col_inner_index]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..6342931 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,23 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        accumulated_rows = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < accumulated_rows + numrows:\n+                row_inner_index = i - accumulated_rows\n                 break\n-            else:\n-                i -= numrows\n+            accumulated_rows += numrows\n+        else:\n+            raise IndexError('Row index out of range.')\n+        accumulated_cols = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < accumulated_cols + numcols:\n+                col_inner_index = j - accumulated_cols\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            accumulated_cols += numcols\n+        else:\n+            raise IndexError('Column index out of range.')\n+        return self.blocks[row_block, col_block][row_inner_index, col_inner_index]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
