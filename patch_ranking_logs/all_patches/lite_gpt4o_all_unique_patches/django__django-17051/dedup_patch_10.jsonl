{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..7cac420 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1800,10 +1800,20 @@ class SQLInsertCompiler(SQLCompiler):\n             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+            if self.returning_fields:\n+                r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)\n+                if r_sql:\n+                    result.append(r_sql)\n+                    params += [self.returning_params]\n             return [(\" \".join(result), tuple(p for ps in param_rows for p in ps))]\n         else:\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+            if self.returning_fields:\n+                r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)\n+                if r_sql:\n+                    result.append(r_sql)\n+                    params += [self.returning_params]\n             return [\n                 (\" \".join(result + [\"VALUES (%s)\" % \", \".join(p)]), vals)\n                 for p, vals in zip(placeholder_rows, param_rows)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..481cbf1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -893,10 +893,20 @@ class SQLInsertCompiler(SQLCompiler):\n             result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+            if self.returning_fields:\n+                r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)\n+                if r_sql:\n+                    result.append(r_sql)\n+                    params += [self.returning_params]\n             return [(' '.join(result), tuple((p for ps in param_rows for p in ps)))]\n         else:\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n+            if self.returning_fields:\n+                r_sql, self.returning_params = self.connection.ops.return_insert_columns(self.returning_fields)\n+                if r_sql:\n+                    result.append(r_sql)\n+                    params += [self.returning_params]\n             return [(' '.join(result + ['VALUES (%s)' % ', '.join(p)]), vals) for p, vals in zip(placeholder_rows, param_rows)]\n     def execute_sql(self, returning_fields=None):\n         assert not (returning_fields and len(self.query.objs) != 1 and (not self.connection.features.can_return_rows_from_bulk_insert))\n", "normalized_occurrence": 1}
