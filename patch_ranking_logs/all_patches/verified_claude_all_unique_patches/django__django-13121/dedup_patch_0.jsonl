{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13121", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0403e91..0b82ed0 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -580,7 +580,21 @@ class BaseDatabaseOperations:\n \n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            # Try to directly use the value if it's already the correct type\n+            if isinstance(value, datetime.timedelta):\n+                return value\n+            try:\n+                # If it's a number/string representing microseconds\n+                return datetime.timedelta(microseconds=int(value))\n+            except (ValueError, TypeError):\n+                # If conversion fails, try to handle it as decimal seconds\n+                try:\n+                    return datetime.timedelta(seconds=float(value))\n+                except (ValueError, TypeError):\n+                    raise ValueError(\n+                        \"Duration values must be expressed as microseconds integers, \"\n+                        \"seconds as float, or timedelta instances.\"\n+                    )\n \n     def check_expression_support(self, expression):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex f21ab48..93f5ecc 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -194,7 +194,15 @@ class BaseDatabaseOperations:\n         return []\n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            if isinstance(value, datetime.timedelta):\n+                return value\n+            try:\n+                return datetime.timedelta(microseconds=int(value))\n+            except (ValueError, TypeError):\n+                try:\n+                    return datetime.timedelta(seconds=float(value))\n+                except (ValueError, TypeError):\n+                    raise ValueError('Duration values must be expressed as microseconds integers, seconds as float, or timedelta instances.')\n     def check_expression_support(self, expression):\n         pass\n     def conditional_expression_supported_in_where_clause(self, expression):\n", "normalized_occurrence": 1}
