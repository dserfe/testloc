{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 1220930..a67167a 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -437,7 +437,7 @@ class HTML(core.BaseReader):\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self.fill_values(col, self._format_col_iter_str_vals(col))\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n@@ -455,6 +455,13 @@ class HTML(core.BaseReader):\n         # Fixes XMLWriter's insertion of unwanted line breaks\n         return [''.join(lines)]\n \n+    def _format_col_iter_str_vals(self, col):\n+        \"\"\"\n+        Return an iterator of the column values formatted according to the column's format\n+        \"\"\"\n+        for val in col:\n+            yield col.info.format(val) if col.info.format else str(val)\n+\n     def fill_values(self, col, col_str_iters):\n         \"\"\"\n         Return an iterator of the values with replacements based on fill_values\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 45fa153..cffebdf 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -217,7 +217,7 @@ class HTML(core.BaseReader):\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self.fill_values(col, self._format_col_iter_str_vals(col))\n                                 col_str_iters.append(col_iter_str_vals)\n                                 new_cols_escaped.append(col_escaped)\n                     for row in zip(*col_str_iters):\n@@ -229,6 +229,9 @@ class HTML(core.BaseReader):\n                                     w.data(el.strip())\n                                     w.end(indent=False)\n         return [''.join(lines)]\n+    def _format_col_iter_str_vals(self, col):\n+        for val in col:\n+            yield (col.info.format(val) if col.info.format else str(val))\n     def fill_values(self, col, col_str_iters):\n         is_masked_column = hasattr(col, 'mask')\n         has_fill_values = hasattr(col, 'fill_values')\n", "normalized_occurrence": 1}
