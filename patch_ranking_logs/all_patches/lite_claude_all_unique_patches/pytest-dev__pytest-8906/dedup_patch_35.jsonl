{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..f140ffc 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -129,14 +129,25 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level to skip the entire\n+        module. This is particularly useful when the module contains syntax or imports\n+        that are only available in certain Python versions. For example:\n+\n+        .. code-block:: python\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For simple conditional skipping of individual tests, it is better to use\n+        the :ref:`pytest.mark.skipif ref` marker. However, when you need to skip\n+        an entire module due to syntax compatibility or when the module contains\n+        code that cannot be imported, using skip() with allow_module_level=True\n+        is the recommended approach.\n+        \n+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..daa9f0c 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -87,14 +87,25 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level to skip the entire\n+        module. This is particularly useful when the module contains syntax or imports\n+        that are only available in certain Python versions. For example:\n+\n+        .. code-block:: python\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For simple conditional skipping of individual tests, it is better to use\n+        the :ref:`pytest.mark.skipif ref` marker. However, when you need to skip\n+        an entire module due to syntax compatibility or when the module contains\n+        code that cannot be imported, using skip() with allow_module_level=True\n+        is the recommended approach.\n+        \n+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "normalized_occurrence": 1}
