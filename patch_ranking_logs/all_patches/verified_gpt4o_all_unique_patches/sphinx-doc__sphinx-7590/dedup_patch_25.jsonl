{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..b51e5c4 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -788,8 +788,21 @@ class ASTExpression(ASTBase):\n class ASTLiteral(ASTExpression):\n     pass\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str, suffix: str):\n+        self.literal = literal\n+        self.suffix = suffix\n \n-class ASTPointerLiteral(ASTLiteral):\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f\"{self.literal}{self.suffix}\"\n+\n+    def get_id(self, version: int) -> str:\n+        return f\"{self.literal}{self.suffix}\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_name(self.literal, self.literal)\n+        signode += addnodes.desc_annotation(self.suffix, self.suffix)\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n \n@@ -4682,8 +4695,13 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # user-defined-literal\n+        udl = self.match(user_defined_literal_re)\n+        if udl:\n+            literal = udl.group(1)\n+            suffix = udl.group(2)\n+            return ASTUserDefinedLiteral(literal, suffix)\n+        self.fail(\"Expected a literal\")\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..61ea465 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -221,7 +221,17 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n class ASTLiteral(ASTExpression):\n     pass\n-class ASTPointerLiteral(ASTLiteral):\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str, suffix: str):\n+        self.literal = literal\n+        self.suffix = suffix\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f'{self.literal}{self.suffix}'\n+    def get_id(self, version: int) -> str:\n+        return f'{self.literal}{self.suffix}'\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += addnodes.desc_name(self.literal, self.literal)\n+        signode += addnodes.desc_annotation(self.suffix, self.suffix)\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n     def get_id(self, version: int) -> str:\n@@ -3074,7 +3084,12 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n-        return None\n+        udl = self.match(user_defined_literal_re)\n+        if udl:\n+            literal = udl.group(1)\n+            suffix = udl.group(2)\n+            return ASTUserDefinedLiteral(literal, suffix)\n+        self.fail('Expected a literal')\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
