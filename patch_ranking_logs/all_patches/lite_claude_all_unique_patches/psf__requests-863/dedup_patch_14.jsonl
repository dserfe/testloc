{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex bc1c443..08b6b93 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -460,10 +460,19 @@ class Request(object):\n \n         return ''.join(url)\n \n+    @property\n+    def _hooks(self):\n+        if not hasattr(self, '_hook_store'):\n+            self._hook_store = {event: [] for event in HOOKS}\n+        return self._hook_store\n+\n     def register_hook(self, event, hook):\n         \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        if hasattr(hook, '__call__'):\n+            self._hooks[event].append(hook)\n+        elif isinstance(hook, (list, tuple)):\n+            self._hooks[event].extend(h for h in hook if hasattr(h, '__call__'))\n+        return self\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex ec9ed1c..d91a8a5 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -230,8 +230,17 @@ class Request(object):\n             url.append('?')\n             url.append(query)\n         return ''.join(url)\n+    @property\n+    def _hooks(self):\n+        if not hasattr(self, '_hook_store'):\n+            self._hook_store = {event: [] for event in HOOKS}\n+        return self._hook_store\n     def register_hook(self, event, hook):\n-        self.hooks[event].append(hook)\n+        if hasattr(hook, '__call__'):\n+            self._hooks[event].append(hook)\n+        elif isinstance(hook, (list, tuple)):\n+            self._hooks[event].extend((h for h in hook if hasattr(h, '__call__')))\n+        return self\n     def deregister_hook(self, event, hook):\n         try:\n             self.hooks[event].remove(hook)\n", "normalized_occurrence": 1}
