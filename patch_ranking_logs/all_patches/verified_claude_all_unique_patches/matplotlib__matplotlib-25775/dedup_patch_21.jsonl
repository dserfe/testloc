{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..a70f8cb 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -135,6 +135,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = x, y\n         self._text = ''\n+        self._antialiased = None  # Will be set by _reset_visual_defaults\n         self._reset_visual_defaults(\n             text=text,\n             color=color,\n@@ -173,6 +174,7 @@ class Text(Artist):\n             color if color is not None else mpl.rcParams[\"text.color\"])\n         self.set_fontproperties(fontproperties)\n         self.set_usetex(usetex)\n+        self.set_antialiased(mpl.rcParams[\"text.antialiased\"])\n         self.set_parse_math(parse_math if parse_math is not None else\n                             mpl.rcParams['text.parse_math'])\n         self.set_wrap(wrap)\n@@ -316,6 +318,7 @@ class Text(Artist):\n         self._multialignment = other._multialignment\n         self._verticalalignment = other._verticalalignment\n         self._horizontalalignment = other._horizontalalignment\n+        self._antialiased = other._antialiased\n         self._fontproperties = other._fontproperties.copy()\n         self._usetex = other._usetex\n         self._rotation = other._rotation\n@@ -1317,6 +1320,21 @@ class Text(Artist):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text should be drawn with antialiased rendering.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether the text should be drawn with antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = b\n+        self.stale = True\n+\n     def set_fontname(self, fontname):\n         \"\"\"\n         Alias for `set_family`.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..9716a91 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -45,6 +45,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n+        self._antialiased = None\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n@@ -52,6 +53,7 @@ class Text(Artist):\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n         self.set_fontproperties(fontproperties)\n         self.set_usetex(usetex)\n+        self.set_antialiased(mpl.rcParams['text.antialiased'])\n         self.set_parse_math(parse_math if parse_math is not None else mpl.rcParams['text.parse_math'])\n         self.set_wrap(wrap)\n         self.set_verticalalignment(verticalalignment)\n@@ -135,6 +137,7 @@ class Text(Artist):\n         self._multialignment = other._multialignment\n         self._verticalalignment = other._verticalalignment\n         self._horizontalalignment = other._horizontalalignment\n+        self._antialiased = other._antialiased\n         self._fontproperties = other._fontproperties.copy()\n         self._usetex = other._usetex\n         self._rotation = other._rotation\n@@ -546,6 +549,11 @@ class Text(Artist):\n         self._parse_math = bool(parse_math)\n     def get_parse_math(self):\n         return self._parse_math\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = b\n+        self.stale = True\n     def set_fontname(self, fontname):\n         return self.set_family(fontname)\n class OffsetFrom:\n", "normalized_occurrence": 1}
