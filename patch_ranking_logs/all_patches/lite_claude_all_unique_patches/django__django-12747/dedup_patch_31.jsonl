{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..cc41cde 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -396,6 +396,10 @@ class Collector:\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n+                \n+        # Initialize counter dictionary with 0 for all models that are to be processed\n+        for model in self.data:\n+            deleted_counter[model._meta.label] = 0\n \n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n@@ -442,4 +446,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..a805b5a 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -206,6 +206,8 @@ class Collector:\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n                 return (count, {model._meta.label: count})\n+        for model in self.data:\n+            deleted_counter[model._meta.label] = 0\n         with transaction.atomic(using=self.using, savepoint=False):\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n", "normalized_occurrence": 2}
