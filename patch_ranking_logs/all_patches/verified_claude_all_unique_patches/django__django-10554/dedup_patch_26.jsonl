{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..c9b84c7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,16 +347,20 @@ class SQLCompiler:\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n+                found = False\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        found = True\n                         break\n-                else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                if not found:\n+                    # Add missing ORDER BY columns to select list\n+                    if not isinstance(src, RawSQL):\n+                        position = len(self.select) + 1\n+                        resolved.set_source_expressions([RawSQL('%d' % position, ())])\n+                        self.select.append((src, None, None))\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..c023e11 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -183,16 +183,19 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n+                found = False\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        found = True\n                         break\n-                else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                if not found:\n+                    if not isinstance(src, RawSQL):\n+                        position = len(self.select) + 1\n+                        resolved.set_source_expressions([RawSQL('%d' % position, ())])\n+                        self.select.append((src, None, None))\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
