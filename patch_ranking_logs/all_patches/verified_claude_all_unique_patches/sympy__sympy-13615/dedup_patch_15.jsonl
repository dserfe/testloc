{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..70c9bb6 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1725,11 +1725,21 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n+        # Try to get the complement\n         result = B._complement(A)\n-        if result != None:\n-            return result\n-        else:\n+        \n+        # If we couldn't compute the complement directly\n+        if result is None:\n+            # If A is a finite set, we can try to evaluate elements individually\n+            if isinstance(A, FiniteSet):\n+                # Keep elements that are definitely not in B\n+                outside = [elem for elem in A.args if B.contains(elem) == False]\n+                # If we found some elements definitely outside B, return just those\n+                if outside:\n+                    return FiniteSet(*outside)\n+                # Otherwise keep the unevaluated complement\n             return Complement(A, B, evaluate=False)\n+        return result\n \n     def _contains(self, other):\n         A = self.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..645ac35 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -753,10 +753,13 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n         result = B._complement(A)\n-        if result != None:\n-            return result\n-        else:\n+        if result is None:\n+            if isinstance(A, FiniteSet):\n+                outside = [elem for elem in A.args if B.contains(elem) == False]\n+                if outside:\n+                    return FiniteSet(*outside)\n             return Complement(A, B, evaluate=False)\n+        return result\n     def _contains(self, other):\n         A = self.args[0]\n         B = self.args[1]\n", "normalized_occurrence": 1}
