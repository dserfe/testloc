{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15678", "model_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex 52a1560..9a6f1d1 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -527,6 +527,7 @@ def farthest_points(*args):\n \n def idiff(eq, y, x, n=1):\n     \"\"\"Return ``dy/dx`` assuming that ``eq == 0``.\n+    from sympy import Eq\n \n     Parameters\n     ==========\n@@ -565,17 +566,30 @@ def idiff(eq, y, x, n=1):\n     sympy.core.function.diff: explicitly differentiates wrt symbols\n \n     \"\"\"\n+    # Handle equations using Eq\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n+\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n     elif isinstance(y, Symbol):\n         dep = {y}\n+    elif isinstance(y, (Function, AppliedUndef)):\n+        # Support for function expressions like f(x)\n+        dep = {y}\n     else:\n-        raise ValueError(\"expecting x-dependent symbol(s) but got: %s\" % y)\n+        raise ValueError(\"expecting x-dependent symbol(s) or function(s) but got: %s\" % y)\n \n     f = dict([(s, Function(\n         s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    \n+    # For function expressions, we don't need to create a new function\n+    if isinstance(y, (Function, AppliedUndef)):\n+        dydx = y.diff(x)\n+    else:\n+        dydx = Function(y.name)(x).diff(x)\n+    \n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/util.py b/sympy/geometry/util.py\nindex 8c03173..32e3e1e 100644\n--- a/sympy/geometry/util.py\n+++ b/sympy/geometry/util.py\n@@ -222,15 +222,22 @@ def farthest_points(*args):\n         diam = d\n     return set(rv)\n def idiff(eq, y, x, n=1):\n+    if isinstance(eq, Eq):\n+        eq = eq.lhs - eq.rhs\n     if is_sequence(y):\n         dep = set(y)\n         y = y[0]\n     elif isinstance(y, Symbol):\n         dep = {y}\n+    elif isinstance(y, (Function, AppliedUndef)):\n+        dep = {y}\n     else:\n-        raise ValueError('expecting x-dependent symbol(s) but got: %s' % y)\n+        raise ValueError('expecting x-dependent symbol(s) or function(s) but got: %s' % y)\n     f = dict([(s, Function(s.name)(x)) for s in eq.free_symbols if s != x and s in dep])\n-    dydx = Function(y.name)(x).diff(x)\n+    if isinstance(y, (Function, AppliedUndef)):\n+        dydx = y.diff(x)\n+    else:\n+        dydx = Function(y.name)(x).diff(x)\n     eq = eq.subs(f)\n     derivs = {}\n     for i in range(n):\n", "normalized_occurrence": 1}
