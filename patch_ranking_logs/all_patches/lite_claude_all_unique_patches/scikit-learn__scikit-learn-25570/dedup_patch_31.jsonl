{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..e9bb4a7 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -852,7 +852,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n+                # Handle case where all transformers were skipped\n+                if not Xs:\n+                    output = pd.DataFrame()\n+                else:\n+                    output = pd.concat(Xs, axis=1)\n \n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n@@ -862,14 +866,20 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n-                output.columns = names_out\n+                transformer_names = []\n+                feature_names_outs = []\n+                for t in self._iter(fitted=True, replace_strings=True):\n+                    if not _is_empty_column_selection(t[2]):\n+                        transformer_names.append(t[0])\n+                        \n+                if Xs:  # Only get column names if we have data\n+                    feature_names_outs = [X.columns for X in Xs]\n+                    \n+                if transformer_names and feature_names_outs:  # Only set columns if we have names\n+                    names_out = self._add_prefix_for_feature_names_out(\n+                        list(zip(transformer_names, feature_names_outs))\n+                    )\n+                    output.columns = names_out\n                 return output\n \n             return np.hstack(Xs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..05f282a 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -254,13 +254,22 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config('transform', self)\n             if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n                 pd = check_pandas_support('transform')\n-                output = pd.concat(Xs, axis=1)\n+                if not Xs:\n+                    output = pd.DataFrame()\n+                else:\n+                    output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n-                output.columns = names_out\n+                transformer_names = []\n+                feature_names_outs = []\n+                for t in self._iter(fitted=True, replace_strings=True):\n+                    if not _is_empty_column_selection(t[2]):\n+                        transformer_names.append(t[0])\n+                if Xs:\n+                    feature_names_outs = [X.columns for X in Xs]\n+                if transformer_names and feature_names_outs:\n+                    names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                    output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n     def _sk_visual_block_(self):\n", "normalized_occurrence": 1}
