{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex c16ec77..d96a5a0 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -910,6 +910,8 @@ def eval_expr(code, local_dict, global_dict):\n \n     Generally, ``parse_expr`` should be used.\n     \"\"\"\n+    if 'evaluate' in local_dict and not local_dict['evaluate']:\n+        local_dict.pop('evaluate')\n     expr = eval(\n         code, global_dict, local_dict)  # take local objects in preference\n     return expr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex e068f1d..ee89cc5 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -476,6 +476,8 @@ def stringify_expr(s, local_dict, global_dict, transformations):\n         tokens = transform(tokens, local_dict, global_dict)\n     return untokenize(tokens)\n def eval_expr(code, local_dict, global_dict):\n+    if 'evaluate' in local_dict and (not local_dict['evaluate']):\n+        local_dict.pop('evaluate')\n     expr = eval(code, global_dict, local_dict)\n     return expr\n def parse_expr(s, local_dict=None, transformations=standard_transformations, global_dict=None, evaluate=True):\n", "normalized_occurrence": 1}
