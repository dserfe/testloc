{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..334093a 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1536,7 +1536,7 @@ class PairGrid(Grid):\n \n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n         \"\"\"Draw a bivariate plot on the specified axes.\"\"\"\n-        if \"hue\" not in signature(func).parameters:\n+        if \"hue\" not in signature(func).parameters or \"hue\" not in kwargs:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n \n@@ -1551,25 +1551,19 @@ class PairGrid(Grid):\n         else:\n             axes_vars = [x_var, y_var]\n \n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n-\n         data = self.data[axes_vars]\n         if self._dropna:\n             data = data.dropna()\n \n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n+        hue = kwargs.get(\"hue\")\n+\n+        if hue is not None:\n+            hue = pd.Series(hue)\n+            hue = hue[data.index]\n \n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n-        func(x=x, y=y, **kwargs)\n+        func(x=x, y=y, hue=hue, **kwargs)\n \n         self._update_legend_data(ax)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..4087877 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -724,7 +724,7 @@ class PairGrid(Grid):\n         if 'hue' in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n-        if 'hue' not in signature(func).parameters:\n+        if 'hue' not in signature(func).parameters or 'hue' not in kwargs:\n             self._plot_bivariate_iter_hue(x_var, y_var, ax, func, **kwargs)\n             return\n         kwargs = kwargs.copy()\n@@ -736,20 +736,16 @@ class PairGrid(Grid):\n             axes_vars = [x_var]\n         else:\n             axes_vars = [x_var, y_var]\n-        if self._hue_var is not None and self._hue_var not in axes_vars:\n-            axes_vars.append(self._hue_var)\n         data = self.data[axes_vars]\n         if self._dropna:\n             data = data.dropna()\n         x = data[x_var]\n         y = data[y_var]\n-        if self._hue_var is None:\n-            hue = None\n-        else:\n-            hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n-            kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n-        func(x=x, y=y, **kwargs)\n+        hue = kwargs.get('hue')\n+        if hue is not None:\n+            hue = pd.Series(hue)\n+            hue = hue[data.index]\n+        func(x=x, y=y, hue=hue, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n         kwargs = kwargs.copy()\n", "normalized_occurrence": 1}
