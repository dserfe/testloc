{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..5ca40cd 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1012,7 +1012,7 @@ class MigrationAutodetector:\n                 }\n             })\n \n-    def generate_added_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n                 self.add_operation(\n@@ -1023,7 +1023,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n-    def generate_removed_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['removed_indexes']:\n                 self.add_operation(\n@@ -1189,7 +1189,7 @@ class MigrationAutodetector:\n                     )\n                 )\n \n-    def generate_altered_order_with_respect_to(self):\n+    def generate_removed_indexes(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..4ed2ad7 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -492,11 +492,11 @@ class MigrationAutodetector:\n             add_idx = [idx for idx in new_indexes if idx not in old_indexes]\n             rem_idx = [idx for idx in old_indexes if idx not in new_indexes]\n             self.altered_indexes.update({(app_label, model_name): {'added_indexes': add_idx, 'removed_indexes': rem_idx}})\n-    def generate_added_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n                 self.add_operation(app_label, operations.AddIndex(model_name=model_name, index=index))\n-    def generate_removed_indexes(self):\n+    def generate_altered_order_with_respect_to(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['removed_indexes']:\n                 self.add_operation(app_label, operations.RemoveIndex(model_name=model_name, name=index.name))\n@@ -573,7 +573,7 @@ class MigrationAutodetector:\n             new_options = {key: value for key, value in new_model_state.options.items() if key in AlterModelOptions.ALTER_OPTION_KEYS}\n             if old_options != new_options:\n                 self.add_operation(app_label, operations.AlterModelOptions(name=model_name, options=new_options))\n-    def generate_altered_order_with_respect_to(self):\n+    def generate_removed_indexes(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n", "normalized_occurrence": 1}
