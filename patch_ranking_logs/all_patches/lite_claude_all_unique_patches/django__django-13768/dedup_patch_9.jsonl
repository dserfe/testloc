{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13768", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..a432673 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -198,6 +198,10 @@ class Signal:\n         If any receiver raises an error (specifically any subclass of\n         Exception), return the error instance as the result for that receiver.\n         \"\"\"\n+        # Import logger at the top of the module\n+        import logging\n+        logger = logging.getLogger('django.dispatch')\n+\n         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:\n             return []\n \n@@ -208,6 +212,7 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.error('Error calling receiver %r: %s', receiver, err, exc_info=err)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex 0417315..81ae0e6 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -64,6 +64,8 @@ class Signal:\n             return []\n         return [(receiver, receiver(signal=self, sender=sender, **named)) for receiver in self._live_receivers(sender)]\n     def send_robust(self, sender, **named):\n+        import logging\n+        logger = logging.getLogger('django.dispatch')\n         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:\n             return []\n         responses = []\n@@ -71,6 +73,7 @@ class Signal:\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.error('Error calling receiver %r: %s', receiver, err, exc_info=err)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n", "normalized_occurrence": 1}
