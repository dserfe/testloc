{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..14080d8 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -199,14 +199,20 @@ class Xfail:\n \n def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n     \"\"\"Evaluate xfail marks on item, returning Xfail if triggered.\"\"\"\n+    # Always re-evaluate all markers including dynamically added ones\n     for mark in item.iter_markers(name=\"xfail\"):\n         run = mark.kwargs.get(\"run\", True)\n         strict = mark.kwargs.get(\"strict\", item.config.getini(\"xfail_strict\"))\n         raises = mark.kwargs.get(\"raises\", None)\n+        reason = mark.kwargs.get(\"reason\", \"\")\n         if \"condition\" not in mark.kwargs:\n             conditions = mark.args\n         else:\n             conditions = (mark.kwargs[\"condition\"],)\n+            \n+        # Handle dynamically added markers with no conditions\n+        if not conditions and not mark.args:\n+            return Xfail(reason, run, strict, raises)\n \n         # Unconditional.\n         if not conditions:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..3bd6100 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -101,10 +101,13 @@ def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n         run = mark.kwargs.get('run', True)\n         strict = mark.kwargs.get('strict', item.config.getini('xfail_strict'))\n         raises = mark.kwargs.get('raises', None)\n+        reason = mark.kwargs.get('reason', '')\n         if 'condition' not in mark.kwargs:\n             conditions = mark.args\n         else:\n             conditions = (mark.kwargs['condition'],)\n+        if not conditions and (not mark.args):\n+            return Xfail(reason, run, strict, raises)\n         if not conditions:\n             reason = mark.kwargs.get('reason', '')\n             return Xfail(reason, run, strict, raises)\n", "normalized_occurrence": 1}
