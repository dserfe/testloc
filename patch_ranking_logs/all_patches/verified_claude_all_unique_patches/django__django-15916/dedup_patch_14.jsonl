{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..78956de 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -257,13 +257,24 @@ class ModelFormOptions:\n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-\n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # Check for formfield_callback in class attributes first\n+        formfield_callback = attrs.pop(\"formfield_callback\", None)\n+        \n+        # If not in attrs, check Meta of current class\n+        if not formfield_callback and \"Meta\" in attrs:\n+            meta = attrs[\"Meta\"]\n+            if hasattr(meta, \"formfield_callback\"):\n+                formfield_callback = meta.formfield_callback\n+        \n+        # If still not found, check bases and their Meta classes\n+        if not formfield_callback:\n+            for b in bases:\n+                if hasattr(b, \"formfield_callback\"):\n+                    formfield_callback = b.formfield_callback\n+                    break\n+                if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..b5929f9 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -109,12 +109,19 @@ class ModelFormOptions:\n         self.field_classes = getattr(options, 'field_classes', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        formfield_callback = attrs.pop('formfield_callback', None)\n+        if not formfield_callback and 'Meta' in attrs:\n+            meta = attrs['Meta']\n+            if hasattr(meta, 'formfield_callback'):\n+                formfield_callback = meta.formfield_callback\n+        if not formfield_callback:\n+            for b in bases:\n+                if hasattr(b, 'formfield_callback'):\n+                    formfield_callback = b.formfield_callback\n+                    break\n+                if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n", "normalized_occurrence": 1}
