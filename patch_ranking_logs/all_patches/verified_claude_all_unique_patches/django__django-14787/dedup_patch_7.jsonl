{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..396b7b8 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -16,7 +16,17 @@ def _update_method_wrapper(_wrapper, decorator):\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n+    # Copy attributes from the decorator dummy first\n     update_wrapper(_wrapper, dummy)\n+    # Then copy attributes from the original method if possible\n+    assigned = ('__module__', '__name__', '__qualname__', '__doc__',\n+                '__annotations__', '__defaults__', '__kwdefaults__')\n+    for attr in assigned:\n+        try:\n+            value = getattr(_wrapper.method, attr)\n+            setattr(_wrapper, attr, value)\n+        except AttributeError:\n+            pass\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..26b02b8 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -9,6 +9,13 @@ def _update_method_wrapper(_wrapper, decorator):\n     def dummy(*args, **kwargs):\n         pass\n     update_wrapper(_wrapper, dummy)\n+    assigned = ('__module__', '__name__', '__qualname__', '__doc__', '__annotations__', '__defaults__', '__kwdefaults__')\n+    for attr in assigned:\n+        try:\n+            value = getattr(_wrapper.method, attr)\n+            setattr(_wrapper, attr, value)\n+        except AttributeError:\n+            pass\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 2}
