{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..dba1fb6 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -393,8 +393,12 @@ class Set(Basic, EvalfMixin):\n         # XXX: We shouldn't do this. A query like this should be handled\n         # without evaluating new Set objects. It should be the other way round\n         # so that the intersect method uses is_subset for evaluation.\n-        if self.intersect(other) == self:\n+        intersection = self.intersect(other)\n+        if intersection == self:\n             return True\n+        if not intersection.is_empty:\n+            return intersection == self\n+        return False\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..8e49ced 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,8 +137,12 @@ class Set(Basic, EvalfMixin):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n-        if self.intersect(other) == self:\n+        intersection = self.intersect(other)\n+        if intersection == self:\n             return True\n+        if not intersection.is_empty:\n+            return intersection == self\n+        return False\n     def _eval_is_subset(self, other):\n         return None\n     def _eval_is_superset(self, other):\n", "normalized_occurrence": 1}
