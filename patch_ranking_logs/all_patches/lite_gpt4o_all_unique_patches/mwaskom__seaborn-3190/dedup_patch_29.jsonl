{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3190", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 9be3959..b99d743 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -342,16 +342,21 @@ class ContinuousBase(Scale):\n \n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n-            if new.norm is None:\n-                vmin, vmax = data.min(), data.max()\n+            if data.dtype == bool:\n+                levels = [False, True]\n+                def normalize(x):\n+                    return np.array([levels.index(val) for val in x])\n             else:\n-                vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+                if new.norm is None:\n+                    vmin, vmax = data.min(), data.max()\n+                else:\n+                    vmin, vmax = new.norm\n+                vmin, vmax = axis.convert_units((vmin, vmax))\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n \n-            def normalize(x):\n-                return (x - a) / b\n+                def normalize(x):\n+                    return (x - a) / b\n \n         else:\n             normalize = vmin = vmax = None\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex b2a020b..4b30218 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -156,15 +156,20 @@ class ContinuousBase(Scale):\n         new._matplotlib_scale = mpl_scale\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n-            if new.norm is None:\n-                vmin, vmax = (data.min(), data.max())\n+            if data.dtype == bool:\n+                levels = [False, True]\n+                def normalize(x):\n+                    return np.array([levels.index(val) for val in x])\n             else:\n-                vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-            def normalize(x):\n-                return (x - a) / b\n+                if new.norm is None:\n+                    vmin, vmax = (data.min(), data.max())\n+                else:\n+                    vmin, vmax = new.norm\n+                vmin, vmax = axis.convert_units((vmin, vmax))\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+                def normalize(x):\n+                    return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n         new._pipeline = [axis.convert_units, forward, normalize, prop.get_mapping(new, data)]\n", "normalized_occurrence": 1}
