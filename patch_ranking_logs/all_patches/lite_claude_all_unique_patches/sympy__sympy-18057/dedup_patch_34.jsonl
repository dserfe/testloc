{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 30e8894..73618f0 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -359,34 +359,11 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     # _sympy_ (which is a canonical and robust way to convert\n     # anything to SymPy expression).\n     #\n-    # As a last chance, we try to take \"a\"'s normal form via unicode()\n-    # and try to parse it. If it fails, then we have no luck and\n-    # return an exception\n-    try:\n-        from .compatibility import unicode\n-        a = unicode(a)\n-    except Exception as exc:\n-        raise SympifyError(a, exc)\n-\n-    from sympy.parsing.sympy_parser import (parse_expr, TokenError,\n-                                            standard_transformations)\n-    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n-    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n-\n-    transformations = standard_transformations\n-\n-    if rational:\n-        transformations += (t_rationalize,)\n-    if convert_xor:\n-        transformations += (t_convert_xor,)\n-\n-    try:\n-        a = a.replace('\\n', '')\n-        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n-    except (TokenError, SyntaxError) as exc:\n-        raise SympifyError('could not parse %r' % a, exc)\n-\n-    return expr\n+    # For safety, we do not attempt to parse string representations\n+    # of arbitrary objects\n+    if strict:\n+        raise SympifyError(a)\n+    return a\n \n \n def _sympify(a):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 07522a2..fe9c019 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -97,25 +97,9 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, eval\n             return type(a)([sympify(x, locals=locals, convert_xor=convert_xor, rational=rational) for x in a.items()])\n         except TypeError:\n             pass\n-    try:\n-        from .compatibility import unicode\n-        a = unicode(a)\n-    except Exception as exc:\n-        raise SympifyError(a, exc)\n-    from sympy.parsing.sympy_parser import parse_expr, TokenError, standard_transformations\n-    from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n-    from sympy.parsing.sympy_parser import rationalize as t_rationalize\n-    transformations = standard_transformations\n-    if rational:\n-        transformations += (t_rationalize,)\n-    if convert_xor:\n-        transformations += (t_convert_xor,)\n-    try:\n-        a = a.replace('\\n', '')\n-        expr = parse_expr(a, local_dict=locals, transformations=transformations, evaluate=evaluate)\n-    except (TokenError, SyntaxError) as exc:\n-        raise SympifyError('could not parse %r' % a, exc)\n-    return expr\n+    if strict:\n+        raise SympifyError(a)\n+    return a\n def _sympify(a):\n     return sympify(a, strict=True)\n def kernS(s):\n", "normalized_occurrence": 1}
