{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..3bbe62f 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -132,6 +132,17 @@ def call_command(command_name, *args, **options):\n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n+    # Include mutually exclusive group options if any of them are provided\n+    def get_mutually_exclusive_options(parser):\n+        for group in parser._mutually_exclusive_groups:\n+            group_options = {opt.dest: min(opt.option_strings) for opt in group._group_actions}\n+            if any(opt in options for opt in group_options):\n+                yield from group_options.items()\n+\n+    parse_args += [\n+        '{}={}'.format(opt, arg_options[dest])\n+        for dest, opt in get_mutually_exclusive_options(parser) if dest in options\n+    ]\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if opt.required and opt.dest in options\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..89beb99 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,6 +53,12 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n+    def get_mutually_exclusive_options(parser):\n+        for group in parser._mutually_exclusive_groups:\n+            group_options = {opt.dest: min(opt.option_strings) for opt in group._group_actions}\n+            if any((opt in options for opt in group_options)):\n+                yield from group_options.items()\n+    parse_args += ['{}={}'.format(opt, arg_options[dest]) for dest, opt in get_mutually_exclusive_options(parser) if dest in options]\n     parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "normalized_occurrence": 1}
