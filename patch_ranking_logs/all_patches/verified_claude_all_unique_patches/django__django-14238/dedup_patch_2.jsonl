{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..3230632 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2518,7 +2518,12 @@ class AutoFieldMeta(type):\n \n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        return (BigAutoField, SmallAutoField, *[\n+            cls for cls in globals().values()\n+            if isinstance(cls, type)\n+            and issubclass(cls, (BigAutoField, SmallAutoField))\n+            and cls not in (BigAutoField, SmallAutoField)\n+        ])\n \n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..4be604d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1309,7 +1309,7 @@ class AutoFieldMixin:\n class AutoFieldMeta(type):\n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        return (BigAutoField, SmallAutoField, *[cls for cls in globals().values() if isinstance(cls, type) and issubclass(cls, (BigAutoField, SmallAutoField)) and (cls not in (BigAutoField, SmallAutoField))])\n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n     def __subclasscheck__(self, subclass):\n", "normalized_occurrence": 1}
