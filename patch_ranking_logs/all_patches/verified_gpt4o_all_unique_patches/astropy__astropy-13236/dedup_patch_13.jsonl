{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13236", "model_patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex 39b0202..58ef516 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -1243,8 +1243,12 @@ class Table:\n         # mixin class\n         if (not isinstance(data, Column) and not data_is_mixin\n                 and isinstance(data, np.ndarray) and len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n-            data_is_mixin = True\n+            warnings.warn(\n+                \"In future versions, structured numpy arrays will be added as a Column. \"\n+                \"Please wrap your data in Column to ensure compatibility.\",\n+                FutureWarning\n+            )\n+            data = Column(data)\n \n         # Get the final column name using precedence.  Some objects may not\n         # have an info attribute. Also avoid creating info as a side effect.\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/table/table.py b/astropy/table/table.py\nindex c25424c..59516b2 100644\n--- a/astropy/table/table.py\n+++ b/astropy/table/table.py\n@@ -892,8 +892,8 @@ class Table:\n                 fully_qualified_name = original_data.__class__.__module__ + '.' + original_data.__class__.__name__\n                 raise TypeError(f'Mixin handler for object of type {fully_qualified_name} did not return a valid mixin column')\n         if not isinstance(data, Column) and (not data_is_mixin) and isinstance(data, np.ndarray) and (len(data.dtype) > 1):\n-            data = data.view(NdarrayMixin)\n-            data_is_mixin = True\n+            warnings.warn('In future versions, structured numpy arrays will be added as a Column. Please wrap your data in Column to ensure compatibility.', FutureWarning)\n+            data = Column(data)\n         if not name:\n             if isinstance(data, Column):\n                 name = data.name or default_name\n", "normalized_occurrence": 1}
