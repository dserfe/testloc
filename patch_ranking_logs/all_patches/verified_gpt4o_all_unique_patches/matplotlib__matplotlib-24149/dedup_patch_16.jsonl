{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..e2b88ef 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1719,19 +1719,14 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n     def safe_isfinite(val):\n         if val is None:\n             return False\n+        if val is None or (np.isscalar(val) and not np.isfinite(val)):\n+            return False\n         try:\n-            return np.isfinite(val) if np.isscalar(val) else True\n+            return True\n         except TypeError:\n-            # This is something that numpy can not make heads or tails\n-            # of, assume \"finite\"\n             return True\n-    if skip_nonfinite is False:\n+    if not skip_nonfinite:\n         if isinstance(obj, collections.abc.Iterator):\n-            # needed to accept `array.flat` as input.\n-            # np.flatiter reports as an instance of collections.Iterator\n-            # but can still be indexed via [].\n-            # This has the side effect of re-setting the iterator, but\n-            # that is acceptable.\n             try:\n                 return obj[0]\n             except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..61044ab 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -733,11 +733,13 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n     def safe_isfinite(val):\n         if val is None:\n             return False\n+        if val is None or (np.isscalar(val) and (not np.isfinite(val))):\n+            return False\n         try:\n-            return np.isfinite(val) if np.isscalar(val) else True\n+            return True\n         except TypeError:\n             return True\n-    if skip_nonfinite is False:\n+    if not skip_nonfinite:\n         if isinstance(obj, collections.abc.Iterator):\n             try:\n                 return obj[0]\n", "normalized_occurrence": 1}
