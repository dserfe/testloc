{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 73c394e..4cc479f 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -235,14 +235,22 @@ class BaseEstimator:\n \n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n \n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n \n+        def array_repr(arr):\n+            # Helper function to safely represent numpy arrays\n+            if isinstance(arr, np.ndarray):\n+                return np.array2string(arr, separator=', ')\n+            return repr(arr)\n+\n         # use ellipsis for sequences with a lot of elements\n         pp = _EstimatorPrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n-            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW,\n+            array_repr=array_repr)\n \n         repr_ = pp.pformat(self)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 64d90d3..7a52a14 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -101,9 +101,14 @@ class BaseEstimator:\n         return self\n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n         N_CHAR_MAX = 700\n         N_MAX_ELEMENTS_TO_SHOW = 30\n-        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+        def array_repr(arr):\n+            if isinstance(arr, np.ndarray):\n+                return np.array2string(arr, separator=', ')\n+            return repr(arr)\n+        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW, array_repr=array_repr)\n         repr_ = pp.pformat(self)\n         if len(''.join(repr_.split())) > N_CHAR_MAX:\n             lim = N_CHAR_MAX // 2\n", "normalized_occurrence": 1}
