{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..0800ea9 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,9 +112,28 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    \n+    Commas can be escaped with a backslash to include them in the regex pattern.\n+    For example: \"foo\\,bar\" will be treated as a single pattern containing a comma.\n+    \"\"\"\n+    # First handle escaped commas by replacing them temporarily\n+    ESCAPE_PLACEHOLDER = \"\\0\"  # null character as placeholder\n+    # Replace escaped commas with placeholder, but not double-escaped backslashes\n+    processed_value = \"\"\n+    i = 0\n+    while i < len(value):\n+        if value[i:i+2] == r\"\\,\":\n+            processed_value += ESCAPE_PLACEHOLDER\n+            i += 2\n+        else:\n+            processed_value += value[i]\n+            i += 1\n+            \n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in _csv_transformer(processed_value):\n+        # Restore escaped commas\n+        pattern = pattern.replace(ESCAPE_PLACEHOLDER, \",\")\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..8ca2941 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -54,8 +54,19 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         msg = f'Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}'\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    ESCAPE_PLACEHOLDER = '\\x00'\n+    processed_value = ''\n+    i = 0\n+    while i < len(value):\n+        if value[i:i + 2] == '\\\\,':\n+            processed_value += ESCAPE_PLACEHOLDER\n+            i += 2\n+        else:\n+            processed_value += value[i]\n+            i += 1\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in _csv_transformer(processed_value):\n+        pattern = pattern.replace(ESCAPE_PLACEHOLDER, ',')\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
