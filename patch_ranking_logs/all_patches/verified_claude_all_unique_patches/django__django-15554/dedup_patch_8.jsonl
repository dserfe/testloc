{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..7e7a9c4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -804,15 +804,21 @@ class Query(BaseExpression):\n             return alias, False\n \n         # Create a new alias for this table.\n-        if alias_list:\n+        if filtered_relation is not None:\n+            # Always create a new alias for filtered relations\n             alias = \"%s%d\" % (self.alias_prefix, len(self.alias_map) + 1)\n-            alias_list.append(alias)\n+            if alias_list:\n+                alias_list.append(alias)\n+            else:\n+                self.table_map[table_name] = [alias]\n         else:\n-            # The first occurrence of a table uses the table name directly.\n-            alias = (\n-                filtered_relation.alias if filtered_relation is not None else table_name\n-            )\n-            self.table_map[table_name] = [alias]\n+            if alias_list:\n+                alias = \"%s%d\" % (self.alias_prefix, len(self.alias_map) + 1)\n+                alias_list.append(alias)\n+            else:\n+                # The first occurrence of a table uses the table name directly.\n+                alias = table_name\n+                self.table_map[table_name] = [alias]\n         self.alias_refcount[alias] = 1\n         return alias, True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..005dc8e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -430,11 +430,17 @@ class Query(BaseExpression):\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n-        if alias_list:\n+        if filtered_relation is not None:\n+            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            if alias_list:\n+                alias_list.append(alias)\n+            else:\n+                self.table_map[table_name] = [alias]\n+        elif alias_list:\n             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n-            alias = filtered_relation.alias if filtered_relation is not None else table_name\n+            alias = table_name\n             self.table_map[table_name] = [alias]\n         self.alias_refcount[alias] = 1\n         return (alias, True)\n", "normalized_occurrence": 1}
