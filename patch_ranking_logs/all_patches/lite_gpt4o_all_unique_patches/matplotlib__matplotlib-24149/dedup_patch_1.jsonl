{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5af9d96..1da4882 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2367,6 +2367,12 @@ class Axes(_AxesBase):\n \n         # lets do some conversions now since some types cannot be\n         # subtracted uniformly\n+        # Filter out NaN values\n+        x = np.asarray(x)\n+        height = np.asarray(height)\n+        if np.isnan(x).all() or np.isnan(height).all():\n+            return BarContainer([], None, datavalues=[], orientation=orientation, label=bar_container_label)\n+\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5336f05..67bc96c 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -515,6 +515,10 @@ class Axes(_AxesBase):\n             self._process_unit_info([('x', width), ('y', y)], kwargs, convert=False)\n             if log:\n                 self.set_xscale('log', nonpositive='clip')\n+        x = np.asarray(x)\n+        height = np.asarray(height)\n+        if np.isnan(x).all() or np.isnan(height).all():\n+            return BarContainer([], None, datavalues=[], orientation=orientation, label=bar_container_label)\n         if self.xaxis is not None:\n             x0 = x\n             x = np.asarray(self.convert_xunits(x))\n", "normalized_occurrence": 1}
