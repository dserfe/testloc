{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..bbae2ac 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,6 +3174,13 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove draggable legends before pickling\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend._draggable is not None:\n+                    legend._draggable.disconnect()\n+                    legend._draggable = None\n+\n         return state\n \n     def __setstate__(self, state):\n@@ -3187,6 +3194,12 @@ None}, default: None\n \n         self.__dict__ = state\n \n+        # Restore draggable legends after unpickling\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend.get_draggable():\n+                    legend.set_draggable(True)\n+\n         # re-initialise some of the unstored state information\n         FigureCanvasBase(self)  # Set self.canvas.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..c225cb4 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,11 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend._draggable is not None:\n+                    legend._draggable.disconnect()\n+                    legend._draggable = None\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n@@ -958,6 +963,10 @@ class Figure(FigureBase):\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend.get_draggable():\n+                    legend.set_draggable(True)\n         FigureCanvasBase(self)\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n", "normalized_occurrence": 1}
