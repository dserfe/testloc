{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..714dc6e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,12 +984,32 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            iter_var = self.variable()\n+            iter_assign = ast.Assign([ast.Name(iter_var, ast.Store())], new_args[0])\n+            self.statements.append(iter_assign)\n+            loop_var = self.variable()\n+            loop_assign = ast.Assign([ast.Name(loop_var, ast.Store())], ast.Name(iter_var, ast.Load()))\n+            self.statements.append(loop_assign)\n+            loop_body = []\n+            self.push_format_context()\n+            res, expl = self.visit(ast.Call(new_func, [ast.Name(loop_var, ast.Load())], new_kwargs))\n+            loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            loop_body.append(ast.Expr(call))\n+            loop = ast.For(ast.Name(loop_var, ast.Store()), ast.Name(iter_var, ast.Load()), loop_body, [])\n+            self.statements.append(loop)\n+            expl_template = self.helper(\"_format_boolop\", expl_list, ast.Num(is_or))\n+            expl = self.pop_format_context(expl_template)\n+            return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n+        else:\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1101,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..bb712d5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,12 +559,32 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            iter_var = self.variable()\n+            iter_assign = ast.Assign([ast.Name(iter_var, ast.Store())], new_args[0])\n+            self.statements.append(iter_assign)\n+            loop_var = self.variable()\n+            loop_assign = ast.Assign([ast.Name(loop_var, ast.Store())], ast.Name(iter_var, ast.Load()))\n+            self.statements.append(loop_assign)\n+            loop_body = []\n+            self.push_format_context()\n+            res, expl = self.visit(ast.Call(new_func, [ast.Name(loop_var, ast.Load())], new_kwargs))\n+            loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            loop_body.append(ast.Expr(call))\n+            loop = ast.For(ast.Name(loop_var, ast.Store()), ast.Name(iter_var, ast.Load()), loop_body, [])\n+            self.statements.append(loop)\n+            expl_template = self.helper('_format_boolop', expl_list, ast.Num(is_or))\n+            expl = self.pop_format_context(expl_template)\n+            return (ast.Name(res_var, ast.Load()), self.explanation_param(expl))\n+        else:\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
