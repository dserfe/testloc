{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..f67e869 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1545,11 +1545,36 @@ class LogNorm(Normalize):\n \n     def autoscale(self, A):\n         # docstring inherited.\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            # If everything is masked, use default range\n+            self.vmin, self.vmax = 1, 10\n+        else:\n+            super().autoscale(A)\n+            if not np.isfinite(self.vmin):\n+                self.vmin = A.min()\n+            if not np.isfinite(self.vmax):\n+                self.vmax = A.max()\n+            if self.vmin <= 0:\n+                self.vmin = np.min(A[~A.mask])\n \n     def autoscale_None(self, A):\n         # docstring inherited.\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            # If everything is masked, use default range\n+            if self.vmin is None:\n+                self.vmin = 1\n+            if self.vmax is None:\n+                self.vmax = 10\n+        else:\n+            super().autoscale_None(A)\n+            if self.vmin is not None and not np.isfinite(self.vmin):\n+                self.vmin = A.min()\n+            if self.vmax is not None and not np.isfinite(self.vmax):\n+                self.vmax = A.max()\n+            if self.vmin is not None and self.vmin <= 0:\n+                self.vmin = np.min(A[~A.mask])\n \n \n @_make_norm_from_scale(\n", "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..d459391 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1330,10 +1330,33 @@ class LogNorm(Normalize):\n     \"\"\"Normalize a given value to the 0-1 range on a log scale.\"\"\"\n \n     def autoscale(self, A):\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            self.vmin, self.vmax = (1, 10)\n+        else:\n+            super().autoscale(A)\n+            if not np.isfinite(self.vmin):\n+                self.vmin = A.min()\n+            if not np.isfinite(self.vmax):\n+                self.vmax = A.max()\n+            if self.vmin <= 0:\n+                self.vmin = np.min(A[~A.mask])\n \n     def autoscale_None(self, A):\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        A = np.ma.masked_less_equal(A, 0, copy=False)\n+        if A.mask.all():\n+            if self.vmin is None:\n+                self.vmin = 1\n+            if self.vmax is None:\n+                self.vmax = 10\n+        else:\n+            super().autoscale_None(A)\n+            if self.vmin is not None and (not np.isfinite(self.vmin)):\n+                self.vmin = A.min()\n+            if self.vmax is not None and (not np.isfinite(self.vmax)):\n+                self.vmax = A.max()\n+            if self.vmin is not None and self.vmin <= 0:\n+                self.vmin = np.min(A[~A.mask])\n \n @_make_norm_from_scale(scale.SymmetricalLogScale, init=lambda linthresh, linscale=1.0, vmin=None, vmax=None, clip=False, *, base=10: None)\n class SymLogNorm(Normalize):\n", "normalized_occurrence": 1}
