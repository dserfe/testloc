{"model_name_or_path": "agentless", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..0a37f98 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2518,10 +2518,20 @@ class AutoFieldMeta(type):\n \n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        def get_all_subclasses(cls):\n+            subclasses = set(cls.__subclasses__())\n+            for subclass in subclasses.copy():\n+                subclasses.update(get_all_subclasses(subclass))\n+            return subclasses\n+\n+        base_subclasses = {BigAutoField, SmallAutoField}\n+        all_subclasses = set(base_subclasses)\n+        for base_class in base_subclasses:\n+            all_subclasses.update(get_all_subclasses(base_class))\n+        return tuple(all_subclasses)\n \n     def __instancecheck__(self, instance):\n-        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n+        return isinstance(instance.__class__, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n         return subclass in self._subclasses or super().__subclasscheck__(subclass)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..a17544b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1309,9 +1309,18 @@ class AutoFieldMixin:\n class AutoFieldMeta(type):\n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        def get_all_subclasses(cls):\n+            subclasses = set(cls.__subclasses__())\n+            for subclass in subclasses.copy():\n+                subclasses.update(get_all_subclasses(subclass))\n+            return subclasses\n+        base_subclasses = {BigAutoField, SmallAutoField}\n+        all_subclasses = set(base_subclasses)\n+        for base_class in base_subclasses:\n+            all_subclasses.update(get_all_subclasses(base_class))\n+        return tuple(all_subclasses)\n     def __instancecheck__(self, instance):\n-        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n+        return isinstance(instance.__class__, self._subclasses) or super().__instancecheck__(instance)\n     def __subclasscheck__(self, subclass):\n         return subclass in self._subclasses or super().__subclasscheck__(subclass)\n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "normalized_occurrence": 1}
