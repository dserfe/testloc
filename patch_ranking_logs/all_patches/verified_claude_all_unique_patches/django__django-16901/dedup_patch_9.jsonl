{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..4344d2f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -498,7 +498,22 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # For databases without native XOR support, we need to implement\n+        # proper XOR semantics that work for multiple terms\n+        if not combined.query.has_xor_feature:\n+            # XOR is true when an odd number of operands are true\n+            # (a AND NOT b) OR (NOT a AND b)\n+            a = combined.query.clone()\n+            b = other.query.clone()\n+            combined.query.combine(\n+                Query(combined.model).add_q(\n+                    Q(pk__in=combined.filter(~Q(pk__in=other)).values(\"pk\")) |\n+                    Q(pk__in=other.filter(~Q(pk__in=combined)).values(\"pk\"))\n+                ),\n+                sql.OR\n+            )\n+        else:\n+            combined.query.combine(other.query, sql.XOR)\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..53bc993 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,12 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        if not combined.query.has_xor_feature:\n+            a = combined.query.clone()\n+            b = other.query.clone()\n+            combined.query.combine(Query(combined.model).add_q(Q(pk__in=combined.filter(~Q(pk__in=other)).values('pk')) | Q(pk__in=other.filter(~Q(pk__in=combined)).values('pk'))), sql.OR)\n+        else:\n+            combined.query.combine(other.query, sql.XOR)\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
