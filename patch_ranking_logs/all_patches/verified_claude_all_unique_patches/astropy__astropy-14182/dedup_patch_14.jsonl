{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..dd8142a 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,18 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        # Add separator lines before and after the header section\n+        separator = lines[1]\n+        if self.header.header_rows:\n+            # For header_rows, add separator after the full header section\n+            header_end = len(self.header.header_rows) + 1\n+            lines = [separator] + lines[0:header_end] + [separator] + lines[header_end:] + [separator]\n+        else:\n+            # Original behavior for single header row\n+            lines = [separator] + lines + [separator]\n+        return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..6d8c5d5 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,9 +18,14 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, header_rows=None):\n+        super().__init__(delimiter_pad=None, bookend=False, header_rows=header_rows)\n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        separator = lines[1]\n+        if self.header.header_rows:\n+            header_end = len(self.header.header_rows) + 1\n+            lines = [separator] + lines[0:header_end] + [separator] + lines[header_end:] + [separator]\n+        else:\n+            lines = [separator] + lines + [separator]\n         return lines\n\\ No newline at end of file\n", "normalized_occurrence": 1}
