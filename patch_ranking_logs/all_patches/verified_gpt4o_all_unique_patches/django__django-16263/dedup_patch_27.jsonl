{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..421dfaa 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,7 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        obj.clear_unused_annotations()\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n@@ -1091,7 +1092,23 @@ class Query(BaseExpression):\n             alias = seen[int_model] = join_info.joins[-1]\n         return alias or seen[None]\n \n-    def check_alias(self, alias):\n+    def clear_unused_annotations(self):\n+        \"\"\"\n+        Remove annotations not used in filters, other annotations, or ordering.\n+        \"\"\"\n+        referenced_annotations = set()\n+        if self.where:\n+            referenced_annotations.update(self.where.get_referenced_annotations())\n+        for annotation in self.annotations.values():\n+            referenced_annotations.update(annotation.get_referenced_annotations())\n+        if self.order_by:\n+            referenced_annotations.update(\n+                ref for ref in self.order_by if isinstance(ref, str) and ref in self.annotations\n+            )\n+        self.annotations = {\n+            alias: annotation for alias, annotation in self.annotations.items()\n+            if alias in referenced_annotations\n+        }\n         if FORBIDDEN_ALIAS_PATTERN.search(alias):\n             raise ValueError(\n                 \"Column aliases cannot contain whitespace characters, quotation marks, \"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..ca1934a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,7 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        obj.clear_unused_annotations()\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n@@ -565,7 +566,15 @@ class Query(BaseExpression):\n             curr_opts = int_model._meta\n             alias = seen[int_model] = join_info.joins[-1]\n         return alias or seen[None]\n-    def check_alias(self, alias):\n+    def clear_unused_annotations(self):\n+        referenced_annotations = set()\n+        if self.where:\n+            referenced_annotations.update(self.where.get_referenced_annotations())\n+        for annotation in self.annotations.values():\n+            referenced_annotations.update(annotation.get_referenced_annotations())\n+        if self.order_by:\n+            referenced_annotations.update((ref for ref in self.order_by if isinstance(ref, str) and ref in self.annotations))\n+        self.annotations = {alias: annotation for alias, annotation in self.annotations.items() if alias in referenced_annotations}\n         if FORBIDDEN_ALIAS_PATTERN.search(alias):\n             raise ValueError('Column aliases cannot contain whitespace characters, quotation marks, semicolons, or SQL comments.')\n     def add_annotation(self, annotation, alias, is_summary=False, select=True):\n", "normalized_occurrence": 1}
