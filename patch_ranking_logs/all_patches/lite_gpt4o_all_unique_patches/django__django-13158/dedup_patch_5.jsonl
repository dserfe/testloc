{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..b2f8278 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -989,6 +989,8 @@ class QuerySet:\n         # Clone the query to inherit the select list and everything\n         clone = self._chain()\n         # Clear limits and ordering so they can be reapplied\n+        if self.query.combinator:\n+            return self._combinator_query('union', self.none())\n         clone.query.clear_ordering(True)\n         clone.query.clear_limits()\n         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n@@ -1001,7 +1003,10 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n-        return self._combinator_query('union', *other_qs, all=all)\n+        combined_qs = self._combinator_query('union', *other_qs, all=all)\n+        if not combined_qs.exists():\n+            return self.none()\n+        return combined_qs\n \n     def intersection(self, *other_qs):\n         # If any query is an EmptyQuerySet, return it.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..b39ff43 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -580,6 +580,8 @@ class QuerySet:\n             return self._filter_or_exclude(False, **filter_obj)\n     def _combinator_query(self, combinator, *other_qs, all=False):\n         clone = self._chain()\n+        if self.query.combinator:\n+            return self._combinator_query('union', self.none())\n         clone.query.clear_ordering(True)\n         clone.query.clear_limits()\n         clone.query.combined_queries = (self.query,) + tuple((qs.query for qs in other_qs))\n@@ -590,7 +592,10 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n-        return self._combinator_query('union', *other_qs, all=all)\n+        combined_qs = self._combinator_query('union', *other_qs, all=all)\n+        if not combined_qs.exists():\n+            return self.none()\n+        return combined_qs\n     def intersection(self, *other_qs):\n         if isinstance(self, EmptyQuerySet):\n             return self\n", "normalized_occurrence": 1}
