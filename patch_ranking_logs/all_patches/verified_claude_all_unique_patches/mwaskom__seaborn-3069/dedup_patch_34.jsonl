{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..dade2d5 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,22 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Hide grid by default for nominal scales\n+                if isinstance(axis, mpl.axis.Axis):\n+                    if axis.axis_name == 'x':\n+                        axis.axes.xaxis.grid(False)\n+                    else:\n+                        axis.axes.yaxis.grid(False)\n+                        # Invert y-axis for categorical variables\n+                        axis.axes.invert_yaxis()\n+\n+                # Set proper padding of +/- 0.5 from first/last tick\n+                if isinstance(axis, mpl.axis.Axis):\n+                    num_cats = len(units_seed)\n+                    if axis.axis_name == 'x':\n+                        axis.axes.set_xlim(-0.5, num_cats - 0.5)\n+                    else:\n+                        axis.axes.set_ylim(-0.5, num_cats - 0.5)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..7bc1236 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,7 +90,18 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                if isinstance(axis, mpl.axis.Axis):\n+                    if axis.axis_name == 'x':\n+                        axis.axes.xaxis.grid(False)\n+                    else:\n+                        axis.axes.yaxis.grid(False)\n+                        axis.axes.invert_yaxis()\n+                if isinstance(axis, mpl.axis.Axis):\n+                    num_cats = len(units_seed)\n+                    if axis.axis_name == 'x':\n+                        axis.axes.set_xlim(-0.5, num_cats - 0.5)\n+                    else:\n+                        axis.axes.set_ylim(-0.5, num_cats - 0.5)\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n", "normalized_occurrence": 1}
