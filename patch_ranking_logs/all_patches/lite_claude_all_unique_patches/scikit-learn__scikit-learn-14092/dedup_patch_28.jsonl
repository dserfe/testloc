{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..cc5e0e8 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,7 +972,29 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n+    # Try to convert to the target type if possible\n+    try:\n+        if isinstance(target_type, (type, tuple)):\n+            # Handle tuple of types case (e.g., (int, float))\n+            if isinstance(target_type, tuple):\n+                types = target_type\n+            else:\n+                types = (target_type,)\n+            \n+            # Include numpy scalar types\n+            if int in types:\n+                types = types + (np.integer,)\n+            if float in types:\n+                types = types + (np.floating,)\n+                \n+            if not isinstance(x, types):\n+                # Try conversion for numeric types\n+                if any(t in (int, float, np.integer, np.floating) for t in types):\n+                    x = target_type(x)\n+                else:\n+                    raise TypeError('`{}` must be an instance of {}, not {}.'\n+                                  .format(name, target_type, type(x)))\n+    except (ValueError, TypeError):\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n                         .format(name, target_type, type(x)))\n \n@@ -980,4 +1002,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..d59986f 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,22 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    try:\n+        if isinstance(target_type, (type, tuple)):\n+            if isinstance(target_type, tuple):\n+                types = target_type\n+            else:\n+                types = (target_type,)\n+            if int in types:\n+                types = types + (np.integer,)\n+            if float in types:\n+                types = types + (np.floating,)\n+            if not isinstance(x, types):\n+                if any((t in (int, float, np.integer, np.floating) for t in types)):\n+                    x = target_type(x)\n+                else:\n+                    raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    except (ValueError, TypeError):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
