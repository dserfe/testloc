{"model_name_or_path": "agentless", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex b3d1d61..35acf1c 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,24 +15,14 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if self.connection.features.update_can_self_select:\n             return super().as_sql()\n-        # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n-        # which is what the default implementation of SQLDeleteCompiler uses\n-        # when multiple tables are involved. Use the MySQL/MariaDB specific\n-        # DELETE table FROM table syntax instead to avoid performing the\n-        # operation in two queries.\n-        result = [\n-            'DELETE %s FROM' % self.quote_name_unless_alias(\n-                self.query.get_initial_alias()\n-            )\n-        ]\n-        from_sql, from_params = self.get_from_clause()\n-        result.extend(from_sql)\n+        # Use the simplified DELETE statement for a single table.\n+        result = ['DELETE FROM %s' % self.quote_name_unless_alias(self.query.base_table)]\n         where, params = self.compile(self.query.where)\n         if where:\n             result.append('WHERE %s' % where)\n-        return ' '.join(result), tuple(from_params) + tuple(params)\n+        return ' '.join(result), tuple(params)\n \n \n class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n@@ -40,4 +30,4 @@ class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n \n \n class SQLAggregateCompiler(compiler.SQLAggregateCompiler, SQLCompiler):\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex b3ead15..a3511c5 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -9,15 +9,13 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n     pass\n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if self.connection.features.update_can_self_select:\n             return super().as_sql()\n-        result = ['DELETE %s FROM' % self.quote_name_unless_alias(self.query.get_initial_alias())]\n-        from_sql, from_params = self.get_from_clause()\n-        result.extend(from_sql)\n+        result = ['DELETE FROM %s' % self.quote_name_unless_alias(self.query.base_table)]\n         where, params = self.compile(self.query.where)\n         if where:\n             result.append('WHERE %s' % where)\n-        return (' '.join(result), tuple(from_params) + tuple(params))\n+        return (' '.join(result), tuple(params))\n class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n     pass\n class SQLAggregateCompiler(compiler.SQLAggregateCompiler, SQLCompiler):\n", "normalized_occurrence": 1}
