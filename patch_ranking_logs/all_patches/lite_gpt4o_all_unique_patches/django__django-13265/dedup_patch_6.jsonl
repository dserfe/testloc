{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..45af272 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1181,6 +1181,15 @@ class MigrationAutodetector:\n                 if key in AlterModelOptions.ALTER_OPTION_KEYS\n             }\n             if old_options != new_options:\n+                # Ensure AlterOrderWithRespectTo is added before AlterModelOptions\n+                if \"order_with_respect_to\" in new_options and new_options[\"order_with_respect_to\"] != old_options.get(\"order_with_respect_to\"):\n+                    self.add_operation(\n+                        app_label,\n+                        operations.AlterOrderWithRespectTo(\n+                            name=model_name,\n+                            order_with_respect_to=new_options[\"order_with_respect_to\"],\n+                        )\n+                    )\n                 self.add_operation(\n                     app_label,\n                     operations.AlterModelOptions(\n@@ -1190,6 +1199,10 @@ class MigrationAutodetector:\n                 )\n \n     def generate_altered_order_with_respect_to(self):\n+        \"\"\"\n+        Generate AlterOrderWithRespectTo operations before any other modifications\n+        to ensure the field exists when needed.\n+        \"\"\"\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..aa699ae 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -572,6 +572,8 @@ class MigrationAutodetector:\n             old_options = {key: value for key, value in old_model_state.options.items() if key in AlterModelOptions.ALTER_OPTION_KEYS}\n             new_options = {key: value for key, value in new_model_state.options.items() if key in AlterModelOptions.ALTER_OPTION_KEYS}\n             if old_options != new_options:\n+                if 'order_with_respect_to' in new_options and new_options['order_with_respect_to'] != old_options.get('order_with_respect_to'):\n+                    self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_options['order_with_respect_to']))\n                 self.add_operation(app_label, operations.AlterModelOptions(name=model_name, options=new_options))\n     def generate_altered_order_with_respect_to(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n", "normalized_occurrence": 1}
