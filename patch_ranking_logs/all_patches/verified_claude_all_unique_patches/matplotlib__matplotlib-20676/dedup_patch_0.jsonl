{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..03ab666 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2162,36 +2162,7 @@ class SpanSelector(_SelectorWidget):\n                                              useblit=self.useblit)\n         self.artists.extend([line for line in self._edge_handles.artists])\n \n-    def _press(self, event):\n-        \"\"\"Button press event handler.\"\"\"\n-        if self._interactive and self._rect.get_visible():\n-            self._set_active_handle(event)\n-        else:\n-            self._active_handle = None\n \n-        if self._active_handle is None or not self._interactive:\n-            # Clear previous rectangle before drawing new rectangle.\n-            self.update()\n-\n-        v = event.xdata if self.direction == 'horizontal' else event.ydata\n-        # self._pressv and self._prev are deprecated but we still need to\n-        # maintain them\n-        self._pressv = v\n-        self._prev = self._get_data(event)\n-\n-        if self._active_handle is None:\n-            # when the press event outside the span, we initially set the\n-            # visibility to False and extents to (v, v)\n-            # update will be called when setting the extents\n-            self.visible = False\n-            self.extents = v, v\n-            # We need to set the visibility back, so the span selector will be\n-            # drawn when necessary (span width > 0)\n-            self.visible = True\n-        else:\n-            self.set_visible(True)\n-\n-        return False\n \n     @property\n     def direction(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..6223bfb 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1771,25 +1771,6 @@ class SpanSelector(_SelectorWidget):\n         self._edge_handles = ToolLineHandles(self.ax, self.extents, direction=self.direction, line_props=props, useblit=self.useblit)\n         self.artists.extend([line for line in self._edge_handles.artists])\n \n-    def _press(self, event):\n-        \"\"\"Button press event handler.\"\"\"\n-        if self._interactive and self._rect.get_visible():\n-            self._set_active_handle(event)\n-        else:\n-            self._active_handle = None\n-        if self._active_handle is None or not self._interactive:\n-            self.update()\n-        v = event.xdata if self.direction == 'horizontal' else event.ydata\n-        self._pressv = v\n-        self._prev = self._get_data(event)\n-        if self._active_handle is None:\n-            self.visible = False\n-            self.extents = (v, v)\n-            self.visible = True\n-        else:\n-            self.set_visible(True)\n-        return False\n-\n     @property\n     def direction(self):\n         \"\"\"Direction of the span selector: 'vertical' or 'horizontal'.\"\"\"\n", "normalized_occurrence": 1}
