{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..c01c391 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -45,6 +46,17 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            partial_func = func\n+            func = partial_func.func\n+            # Store partial args and kwargs for repr\n+            self.partial_args = partial_func.args\n+            self.partial_kwargs = partial_func.keywords or {}\n+        else:\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -59,6 +71,12 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if self.partial_args or self.partial_kwargs:\n+            return \"ResolverMatch(func=functools.partial(%s, args=%r, kwargs=%r), args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+                self._func_path, self.partial_args, self.partial_kwargs,\n+                self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+            )\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n             self._func_path, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..f1decca 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -29,6 +30,14 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            partial_func = func\n+            func = partial_func.func\n+            self.partial_args = partial_func.args\n+            self.partial_kwargs = partial_func.keywords or {}\n+        else:\n+            self.partial_args = ()\n+            self.partial_kwargs = {}\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n@@ -38,6 +47,8 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n+        if self.partial_args or self.partial_kwargs:\n+            return 'ResolverMatch(func=functools.partial(%s, args=%r, kwargs=%r), args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.partial_args, self.partial_kwargs, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n         return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n", "normalized_occurrence": 1}
