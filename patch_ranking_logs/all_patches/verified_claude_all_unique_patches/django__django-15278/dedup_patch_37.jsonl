{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex be6e066..e953468 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -326,8 +326,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         \"\"\"Create a field on a model.\"\"\"\n         # Fields with default values cannot by handled by ALTER TABLE ADD\n         # COLUMN statement because DROP DEFAULT is not supported in\n-        # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # ALTER TABLE. The same applies for unique fields because SQLite\n+        # doesn't support ALTER TABLE ADD COLUMN with UNIQUE constraint.\n+        if (not field.null or self.effective_default(field) is not None or\n+                field.unique or field.primary_key):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n@@ -444,4 +446,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex fd5121f..3cd01e8 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -161,7 +161,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):\n                     self.deferred_sql.remove(sql)\n     def add_field(self, model, field):\n-        if not field.null or self.effective_default(field) is not None:\n+        if not field.null or self.effective_default(field) is not None or field.unique or field.primary_key:\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n", "normalized_occurrence": 5}
