{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..84929e9 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -96,7 +96,13 @@ class DeconstructableSerializer(BaseSerializer):\n             name = \"models.%s\" % name\n         else:\n             imports = {\"import %s\" % module}\n-            name = path\n+            from django.utils.module_loading import import_string\n+            class_obj = import_string(path)\n+            if class_obj.__module__ != module:\n+                # Here we account for inner classes by getting their __qualname__\n+                name = f\"{class_obj.__module__}.{class_obj.__qualname__}\"\n+            else:\n+                name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..bb88f86 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -74,7 +74,12 @@ class DeconstructableSerializer(BaseSerializer):\n             name = 'models.%s' % name\n         else:\n             imports = {'import %s' % module}\n-            name = path\n+            from django.utils.module_loading import import_string\n+            class_obj = import_string(path)\n+            if class_obj.__module__ != module:\n+                name = f'{class_obj.__module__}.{class_obj.__qualname__}'\n+            else:\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
