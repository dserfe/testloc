{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..080bbcf 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,10 +178,36 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n+            # Handle chained exceptions\n+            chain = {}\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_list = []\n+                for exc_repr in rep.longrepr.chain:\n+                    exc_dict = {\n+                        \"reprcrash\": exc_repr.reprcrash.__dict__.copy(),\n+                        \"reprtraceback\": exc_repr.reprtraceback.__dict__.copy(),\n+                        \"sections\": exc_repr.sections,\n+                    }\n+                    # Process reprentries for the chained exception\n+                    new_entries = []\n+                    for entry in exc_dict[\"reprtraceback\"][\"reprentries\"]:\n+                        entry_data = {\n+                            \"type\": type(entry).__name__,\n+                            \"data\": entry.__dict__.copy(),\n+                        }\n+                        for key, value in entry_data[\"data\"].items():\n+                            if hasattr(value, \"__dict__\"):\n+                                entry_data[\"data\"][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    exc_dict[\"reprtraceback\"][\"reprentries\"] = new_entries\n+                    chain_list.append(exc_dict)\n+                chain[\"chain\"] = chain_list\n+\n             return {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n+                **chain,\n             }\n \n         d = self.__dict__.copy()\n@@ -255,6 +281,52 @@ class BaseReport:\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n \n+                # Reconstruct exception chain if present\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for exc_dict in reportdict[\"longrepr\"][\"chain\"]:\n+                        reprtraceback = exc_dict[\"reprtraceback\"]\n+                        reprcrash = exc_dict[\"reprcrash\"]\n+                        \n+                        # Process reprentries for the chained exception\n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback[\"reprentries\"]:\n+                            data = entry_data[\"data\"]\n+                            entry_type = entry_data[\"type\"]\n+                            if entry_type == \"ReprEntry\":\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data[\"reprfuncargs\"]:\n+                                    reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                                if data[\"reprfileloc\"]:\n+                                    reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                                if data[\"reprlocals\"]:\n+                                    reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                                reprentry = ReprEntry(\n+                                    lines=data[\"lines\"],\n+                                    reprfuncargs=reprfuncargs,\n+                                    reprlocals=reprlocals,\n+                                    filelocrepr=reprfileloc,\n+                                    style=data[\"style\"],\n+                                )\n+                            elif entry_type == \"ReprEntryNative\":\n+                                reprentry = ReprEntryNative(data[\"lines\"])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        \n+                        reprtraceback[\"reprentries\"] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(\n+                            reprtraceback=ReprTraceback(**reprtraceback),\n+                            reprcrash=ReprFileLocation(**reprcrash),\n+                        )\n+                        for section in exc_dict[\"sections\"]:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n+\n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..6f094cd 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,22 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            chain = {}\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain_list = []\n+                for exc_repr in rep.longrepr.chain:\n+                    exc_dict = {'reprcrash': exc_repr.reprcrash.__dict__.copy(), 'reprtraceback': exc_repr.reprtraceback.__dict__.copy(), 'sections': exc_repr.sections}\n+                    new_entries = []\n+                    for entry in exc_dict['reprtraceback']['reprentries']:\n+                        entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                        for key, value in entry_data['data'].items():\n+                            if hasattr(value, '__dict__'):\n+                                entry_data['data'][key] = value.__dict__.copy()\n+                        new_entries.append(entry_data)\n+                    exc_dict['reprtraceback']['reprentries'] = new_entries\n+                    chain_list.append(exc_dict)\n+                chain['chain'] = chain_list\n+            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, **chain}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -131,6 +146,37 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for exc_dict in reportdict['longrepr']['chain']:\n+                        reprtraceback = exc_dict['reprtraceback']\n+                        reprcrash = exc_dict['reprcrash']\n+                        unserialized_entries = []\n+                        for entry_data in reprtraceback['reprentries']:\n+                            data = entry_data['data']\n+                            entry_type = entry_data['type']\n+                            if entry_type == 'ReprEntry':\n+                                reprfuncargs = None\n+                                reprfileloc = None\n+                                reprlocals = None\n+                                if data['reprfuncargs']:\n+                                    reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                                if data['reprfileloc']:\n+                                    reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                                if data['reprlocals']:\n+                                    reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                                reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                            elif entry_type == 'ReprEntryNative':\n+                                reprentry = ReprEntryNative(data['lines'])\n+                            else:\n+                                _report_unserialization_failure(entry_type, cls, reportdict)\n+                            unserialized_entries.append(reprentry)\n+                        reprtraceback['reprentries'] = unserialized_entries\n+                        exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                        for section in exc_dict['sections']:\n+                            exc_info.addsection(*section)\n+                        chain.append(exc_info)\n+                    exception_info.chain = chain\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 1}
