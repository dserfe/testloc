{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..9dfba12 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1367,10 +1367,14 @@ class ManyToManyField(RelatedField):\n         if symmetrical is None:\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n \n-        if through is not None and db_table is not None:\n-            raise ValueError(\n-                \"Cannot specify a db_table if an intermediary model is used.\"\n-            )\n+        if through is not None:\n+            if isinstance(through, str):\n+                from django.apps import apps\n+                through = apps.get_model(through)\n+            if db_table is not None:\n+                raise ValueError(\n+                    \"Cannot specify a db_table if an intermediary model is used.\"\n+                )\n \n         kwargs[\"rel\"] = self.rel_class(\n             self,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..821c1c6 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -540,8 +540,12 @@ class ManyToManyField(RelatedField):\n                 raise TypeError('%s(%r) is invalid. First parameter to ManyToManyField must be either a model, a model name, or the string %r' % (self.__class__.__name__, to, RECURSIVE_RELATIONSHIP_CONSTANT))\n         if symmetrical is None:\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n-        if through is not None and db_table is not None:\n-            raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n+        if through is not None:\n+            if isinstance(through, str):\n+                from django.apps import apps\n+                through = apps.get_model(through)\n+            if db_table is not None:\n+                raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n", "normalized_occurrence": 1}
