{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..c796ced 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,24 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set up locators and formatters\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                \n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+\n+                # Hide grid by default for nominal scales\n+                axis.grid(False)\n+\n+            def get_transform(self):\n+                transform = super().get_transform()\n+                # Add invisible artist with sticky edges to control margins\n+                transform.sticky_edges.x = [-0.5, len(units_seed) - 0.5]\n+                transform.sticky_edges.y = [-0.5, len(units_seed) - 0.5]\n+                return transform\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -199,6 +212,10 @@ class Nominal(Scale):\n         # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n         axis.update_units(stringify(np.array(units_seed)))\n \n+        # Invert axis if this is a y-axis\n+        if isinstance(axis, mpl.axis.YAxis):\n+            axis.set_inverted(True)\n+\n         # TODO define this more centrally\n         def convert_units(x):\n             # TODO only do this with explicit order?\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..a63b2d8 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,13 +90,26 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+                axis.grid(False)\n+            def get_transform(self):\n+                transform = super().get_transform()\n+                transform.sticky_edges.x = [-0.5, len(units_seed) - 0.5]\n+                transform.sticky_edges.y = [-0.5, len(units_seed) - 0.5]\n+                return transform\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n             axis.set_view_interval(0, len(units_seed) - 1)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n+        if isinstance(axis, mpl.axis.YAxis):\n+            axis.set_inverted(True)\n         def convert_units(x):\n             keep = np.array([x_ in units_seed for x_ in x], bool)\n             out = np.full(len(x), np.nan)\n", "normalized_occurrence": 1}
