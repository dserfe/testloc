{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..3e20837 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -269,8 +269,15 @@ class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str,\n                   innernode: \"Type[TextlikeNode]\" = nodes.emphasis,\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n-        result = super().make_xref(rolename, domain, target,  # type: ignore\n-                                   innernode, contnode, env)\n+        # Mark reference as specific before lookup to respect current module context\n+        if env is not None:\n+            env.temp_data['in_python_refspecific'] = True\n+        try:\n+            result = super().make_xref(rolename, domain, target,  # type: ignore\n+                                     innernode, contnode, env)\n+        finally:\n+            if env is not None:\n+                env.temp_data.pop('in_python_refspecific', None)\n         result['refspecific'] = True\n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = target[0], target[1:]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..edad49d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -179,7 +179,13 @@ def _pseudo_parse_arglist(signode: desc_signature, arglist: str) -> None:\n         signode += paramlist\n class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n-        result = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        if env is not None:\n+            env.temp_data['in_python_refspecific'] = True\n+        try:\n+            result = super().make_xref(rolename, domain, target, innernode, contnode, env)\n+        finally:\n+            if env is not None:\n+                env.temp_data.pop('in_python_refspecific', None)\n         result['refspecific'] = True\n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = (target[0], target[1:])\n", "normalized_occurrence": 1}
