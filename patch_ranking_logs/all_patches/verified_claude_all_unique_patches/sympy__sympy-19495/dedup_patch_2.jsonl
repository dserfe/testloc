{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19495", "model_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex 934bff8..34ac088 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -240,10 +240,11 @@ class ConditionSet(Set):\n             # the base set should be filtered and if new is not in\n             # the base set then this substitution is ignored\n             return self.func(sym, cond, base)\n+        # Only substitute in the condition and base_set, preserving the bound variable\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            return base\n         return self.func(self.sym, cond, base)\n \n     def dummy_eq(self, other, symbol=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/conditionset.py b/sympy/sets/conditionset.py\nindex c7937ea..886e2a6 100644\n--- a/sympy/sets/conditionset.py\n+++ b/sympy/sets/conditionset.py\n@@ -92,7 +92,7 @@ class ConditionSet(Set):\n         cond = self.condition.subs(old, new)\n         base = self.base_set.subs(old, new)\n         if cond is S.true:\n-            return ConditionSet(new, Contains(new, base), base)\n+            return base\n         return self.func(self.sym, cond, base)\n     def dummy_eq(self, other, symbol=None):\n         if not isinstance(other, self.func):\n", "normalized_occurrence": 23}
