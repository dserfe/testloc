{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..afe5352 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -833,6 +833,14 @@ class RawSQL(Expression):\n                     break\n         return super().resolve_expression(query, allow_joins, reuse, summarize, for_save)\n \n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n \n class Star(Expression):\n     def __repr__(self):\n@@ -984,6 +992,11 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n \n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return path, args, {}\n+\n \n class When(Expression):\n     template = 'WHEN %(condition)s THEN %(result)s'\n@@ -1051,6 +1064,12 @@ class When(Expression):\n             cols.extend(source.get_group_by_cols())\n         return cols\n \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return path, args, kwargs\n+\n \n class Case(SQLiteNumericMixin, Expression):\n     \"\"\"\n@@ -1132,6 +1151,14 @@ class Case(SQLiteNumericMixin, Expression):\n             return self.default.get_group_by_cols(alias)\n         return super().get_group_by_cols(alias)\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {'default': self.default}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n \n class Subquery(BaseExpression, Combinable):\n     \"\"\"\n@@ -1411,6 +1438,20 @@ class Window(SQLiteNumericMixin, Expression):\n     def get_group_by_cols(self, alias=None):\n         return []\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n \n class WindowFrame(Expression):\n     \"\"\"\n@@ -1447,6 +1488,20 @@ class WindowFrame(Expression):\n     def get_group_by_cols(self, alias=None):\n         return []\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __str__(self):\n         if self.start.value is not None and self.start.value < 0:\n             start = '%d %s' % (abs(self.start.value), connection.ops.PRECEDING)\n@@ -1470,6 +1525,16 @@ class WindowFrame(Expression):\n     def window_frame_start_end(self, connection, start, end):\n         raise NotImplementedError('Subclasses must implement window_frame_start_end().')\n \n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = []\n+        kwargs = {}\n+        if self.start.value is not None:\n+            kwargs['start'] = self.start.value\n+        if self.end.value is not None:\n+            kwargs['end'] = self.end.value\n+        return path, args, kwargs\n+\n \n class RowRange(WindowFrame):\n     frame_type = 'ROWS'\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.ExpressionWrapper'\n+        args = [self.expression, self.output_field]\n+        return (path, args, {})\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {'condition': self.condition, 'then': self.result}\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {'default': self.default}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = []\n+        kwargs = {}\n+        if self.start.value is not None:\n+            kwargs['start'] = self.start.value\n+        if self.end.value is not None:\n+            kwargs['end'] = self.end.value\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
