{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..079cc75 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -182,6 +182,34 @@ class ValidationError(Exception):\n     def __repr__(self):\n         return 'ValidationError(%s)' % self\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            # Compare error dictionaries\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            # Compare errors for each field, order independent\n+            return all(\n+                sorted(self.error_dict[field], key=lambda e: str(e.message)) ==\n+                sorted(other.error_dict[field], key=lambda e: str(e.message))\n+                for field in self.error_dict\n+            )\n+        elif hasattr(self, 'error_dict') or hasattr(other, 'error_dict'):\n+            # One has error_dict, the other doesn't\n+            return False\n+        elif hasattr(self, 'message') and hasattr(other, 'message'):\n+            # Compare single messages\n+            return (\n+                self.message == other.message and\n+                self.code == other.code and\n+                self.params == other.params\n+            )\n+        else:\n+            # Compare error lists, order independent\n+            return sorted(str(e) for e in self.error_list) == sorted(str(e) for e in other.error_list)\n+\n \n class EmptyResultSet(Exception):\n     \"\"\"A database query predicate is impossible.\"\"\"\n@@ -190,4 +218,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            return all((sorted(self.error_dict[field], key=lambda e: str(e.message)) == sorted(other.error_dict[field], key=lambda e: str(e.message)) for field in self.error_dict))\n+        elif hasattr(self, 'error_dict') or hasattr(other, 'error_dict'):\n+            return False\n+        elif hasattr(self, 'message') and hasattr(other, 'message'):\n+            return self.message == other.message and self.code == other.code and (self.params == other.params)\n+        else:\n+            return sorted((str(e) for e in self.error_list)) == sorted((str(e) for e in other.error_list))\n+", "normalized_occurrence": 1}
