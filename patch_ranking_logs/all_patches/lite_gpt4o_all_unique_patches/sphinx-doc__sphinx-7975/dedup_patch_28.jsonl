{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..d867ca8 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -98,8 +98,7 @@ class IndexEntries:\n             for subentry in indexentry[1].values():\n                 subentry[0].sort(key=keyfunc0)  # type: ignore\n \n-        # sort the index entries; put all symbols at the front, even those\n-        # following the letters in ASCII, this is where the chr(127) comes from\n+        # sort the index entries; ensure symbols are grouped correctly\n         def keyfunc(entry: Tuple[str, List]) -> Tuple[str, str]:\n             key, (void, void, category_key) = entry\n             if category_key:\n@@ -108,7 +107,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not (lckey[0:1].isalpha() or lckey[0:1].isdigit()):\n                 lckey = chr(127) + lckey\n             # ensure a determinstic order *within* letters by also sorting on\n             # the entry itself\n@@ -173,4 +172,4 @@ class IndexEntries:\n             else:\n                 return v[2]\n         return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                for (key_, group) in groupby(newlist, keyfunc3)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..89da546 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -73,7 +73,7 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\u200f'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not (lckey[0:1].isalpha() or lckey[0:1].isdigit()):\n                 lckey = chr(127) + lckey\n             return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n", "normalized_occurrence": 1}
