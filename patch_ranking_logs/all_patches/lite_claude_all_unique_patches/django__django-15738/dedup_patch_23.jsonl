{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 5562d34..4581d64 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -190,8 +190,10 @@ class ProjectState:\n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n         model_state = self.models[app_label, model_name]\n         if objs := model_state.options.get(option_name):\n+            # Convert both sides to sets of field names for comparison\n+            value_fields = set(value_to_remove)\n             model_state.options[option_name] = [\n-                obj for obj in objs if tuple(obj) != tuple(value_to_remove)\n+                obj for obj in objs if not value_fields.issubset(set(obj))\n             ]\n         self.reload_model(app_label, model_name, delay=True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py\nindex 18747a4..76856a9 100644\n--- a/django/db/migrations/state.py\n+++ b/django/db/migrations/state.py\n@@ -124,7 +124,8 @@ class ProjectState:\n     def remove_model_options(self, app_label, model_name, option_name, value_to_remove):\n         model_state = self.models[app_label, model_name]\n         if (objs := model_state.options.get(option_name)):\n-            model_state.options[option_name] = [obj for obj in objs if tuple(obj) != tuple(value_to_remove)]\n+            value_fields = set(value_to_remove)\n+            model_state.options[option_name] = [obj for obj in objs if not value_fields.issubset(set(obj))]\n         self.reload_model(app_label, model_name, delay=True)\n     def alter_model_managers(self, app_label, model_name, managers):\n         model_state = self.models[app_label, model_name]\n", "normalized_occurrence": 1}
