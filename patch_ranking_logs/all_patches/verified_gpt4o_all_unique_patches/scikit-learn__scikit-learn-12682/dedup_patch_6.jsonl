{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..40bb1b9 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -933,7 +933,7 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         normalized to unit norm.\n \n     transform_algorithm : {'lasso_lars', 'lasso_cd', 'lars', 'omp', \\\n-    'threshold'}\n+    'threshold'},\n         Algorithm used to transform the data:\n         lars: uses the least angle regression method (linear_model.lars_path)\n         lasso_lars: uses Lars to compute the Lasso solution\n@@ -944,12 +944,12 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         threshold: squashes to zero all coefficients less than alpha from\n         the projection ``dictionary * X'``\n \n-    transform_n_nonzero_coefs : int, ``0.1 * n_features`` by default\n+    transform_n_nonzero_coefs : int, ``0.1 * n_features`` by default,\n         Number of nonzero coefficients to target in each column of the\n         solution. This is only used by `algorithm='lars'` and `algorithm='omp'`\n         and is overridden by `alpha` in the `omp` case.\n \n-    transform_alpha : float, 1. by default\n+    transform_alpha : float, 1. by default,\n         If `algorithm='lasso_lars'` or `algorithm='lasso_cd'`, `alpha` is the\n         penalty applied to the L1 norm.\n         If `algorithm='threshold'`, `alpha` is the absolute value of the\n@@ -958,6 +958,9 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         the reconstruction error targeted. In this case, it overrides\n         `n_nonzero_coefs`.\n \n+    max_iter : int, 1000 by default,\n+        Maximum number of iterations to perform if `algorithm='lasso_cd'`.\n+\n     split_sign : bool, False by default\n         Whether to split the sparse feature vector into the concatenation of\n         its negative part and its positive part. This can improve the\n@@ -1018,6 +1021,12 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         \"\"\"\n         return self\n \n+    def transform(self, X):\n+        return sparse_encode(X, self.components_, algorithm=self.transform_algorithm,\n+                             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n+                             alpha=self.transform_alpha, max_iter=self.max_iter,\n+                             n_jobs=self.n_jobs, positive=self.positive_code)\n+\n \n class DictionaryLearning(BaseEstimator, SparseCodingMixin):\n     \"\"\"Dictionary learning\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n+    def transform(self, X):\n+        return sparse_encode(X, self.components_, algorithm=self.transform_algorithm, n_nonzero_coefs=self.transform_n_nonzero_coefs, alpha=self.transform_alpha, max_iter=self.max_iter, n_jobs=self.n_jobs, positive=self.positive_code)", "normalized_occurrence": 1}
