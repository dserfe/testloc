{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..b3f86ef 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -260,6 +260,10 @@ class Pow(Expr):\n         b, e = self.as_base_exp()\n         if b is S.NaN:\n             return (b**e)**other  # let __new__ handle it\n+            \n+        # Check for negative base with non-integer power\n+        if b.is_negative and not e.is_integer:\n+            return None  # Let the expression remain unevaluated\n \n         s = None\n         if other.is_integer:\n@@ -1581,4 +1585,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..fe3858b 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -125,6 +125,8 @@ class Pow(Expr):\n         b, e = self.as_base_exp()\n         if b is S.NaN:\n             return (b ** e) ** other\n+        if b.is_negative and (not e.is_integer):\n+            return None\n         s = None\n         if other.is_integer:\n             s = 1\n", "normalized_occurrence": 1}
