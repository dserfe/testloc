{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..f9b845e 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -298,19 +298,23 @@ def type_of_target(y, input_name=\"\"):\n     if is_multilabel(y):\n         return \"multilabel-indicator\"\n \n-    # DeprecationWarning will be replaced by ValueError, see NEP 34\n-    # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n-    # We therefore catch both deprecation (NumPy < 1.24) warning and\n-    # value error (NumPy >= 1.24).\n-    with warnings.catch_warnings():\n-        warnings.simplefilter(\"error\", np.VisibleDeprecationWarning)\n-        if not issparse(y):\n-            try:\n-                y = xp.asarray(y)\n-            except (np.VisibleDeprecationWarning, ValueError):\n-                # dtype=object should be provided explicitly for ragged arrays,\n-                # see NEP 34\n-                y = xp.asarray(y, dtype=object)\n+    # Handle nullable pandas dtypes\n+    if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype):\n+        y = np.asarray(y.astype(y.dtype.storage_dtype))\n+    else:\n+        # DeprecationWarning will be replaced by ValueError, see NEP 34\n+        # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n+        # We therefore catch both deprecation (NumPy < 1.24) warning and\n+        # value error (NumPy >= 1.24).\n+        with warnings.catch_warnings():\n+            warnings.simplefilter(\"error\", np.VisibleDeprecationWarning)\n+            if not issparse(y):\n+                try:\n+                    y = xp.asarray(y)\n+                except (np.VisibleDeprecationWarning, ValueError):\n+                    # dtype=object should be provided explicitly for ragged arrays,\n+                    # see NEP 34\n+                    y = xp.asarray(y, dtype=object)\n \n     # The old sequence of sequences format\n     try:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..aca9c83 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,13 +73,16 @@ def type_of_target(y, input_name=''):\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n     if is_multilabel(y):\n         return 'multilabel-indicator'\n-    with warnings.catch_warnings():\n-        warnings.simplefilter('error', np.VisibleDeprecationWarning)\n-        if not issparse(y):\n-            try:\n-                y = xp.asarray(y)\n-            except (np.VisibleDeprecationWarning, ValueError):\n-                y = xp.asarray(y, dtype=object)\n+    if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype):\n+        y = np.asarray(y.astype(y.dtype.storage_dtype))\n+    else:\n+        with warnings.catch_warnings():\n+            warnings.simplefilter('error', np.VisibleDeprecationWarning)\n+            if not issparse(y):\n+                try:\n+                    y = xp.asarray(y)\n+                except (np.VisibleDeprecationWarning, ValueError):\n+                    y = xp.asarray(y, dtype=object)\n     try:\n         if not hasattr(y[0], '__array__') and isinstance(y[0], Sequence) and (not isinstance(y[0], str)):\n             raise ValueError('You appear to be using a legacy multi-label data representation. Sequence of sequences are no longer supported; use a binary array or sparse matrix instead - the MultiLabelBinarizer transformer can convert to this format.')\n", "normalized_occurrence": 1}
