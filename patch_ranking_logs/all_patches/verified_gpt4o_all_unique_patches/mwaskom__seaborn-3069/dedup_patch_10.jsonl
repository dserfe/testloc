{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..cdcbcf9 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -211,6 +211,13 @@ class Nominal(Scale):\n             out[keep] = axis.convert_units(stringify(x[keep]))\n             return out\n \n+        # Adjust the axis for nominal scales similarly to categorical scales\n+        if isinstance(self, Nominal):\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            axis.grid(False)\n+            if axis.is_yaxis:\n+                axis.set_inverted(True)\n+        \n         new._pipeline = [\n             convert_units,\n             prop.get_mapping(new, data),\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..cf37b23 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -102,6 +102,11 @@ class Nominal(Scale):\n             out = np.full(len(x), np.nan)\n             out[keep] = axis.convert_units(stringify(x[keep]))\n             return out\n+        if isinstance(self, Nominal):\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            axis.grid(False)\n+            if axis.is_yaxis:\n+                axis.set_inverted(True)\n         new._pipeline = [convert_units, prop.get_mapping(new, data)]\n         def spacer(x):\n             return 1\n", "normalized_occurrence": 1}
