{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11087", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 0bd756b..92e9db0 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -232,9 +232,12 @@ class Collector:\n         \"\"\"\n         Get a QuerySet of objects related to `objs` via the relation `related`.\n         \"\"\"\n+        # Only select the pk field and any fields needed for the delete operation\n+        router = connections[self.using].router\n+        required_fields = router.get_required_fields_for_delete(related.related_model) if hasattr(router, 'get_required_fields_for_delete') else [related.related_model._meta.pk.name]\n         return related.related_model._base_manager.using(self.using).filter(\n             **{\"%s__in\" % related.field.name: objs}\n-        )\n+        ).only(*required_fields)\n \n     def instances_with_model(self):\n         for model, instances in self.data.items():\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex f42ced6..866a330 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -109,7 +109,9 @@ class Collector:\n                     sub_objs = field.bulk_related_objects(new_objs, self.using)\n                     self.collect(sub_objs, source=model, nullable=True)\n     def related_objects(self, related, objs):\n-        return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs})\n+        router = connections[self.using].router\n+        required_fields = router.get_required_fields_for_delete(related.related_model) if hasattr(router, 'get_required_fields_for_delete') else [related.related_model._meta.pk.name]\n+        return related.related_model._base_manager.using(self.using).filter(**{'%s__in' % related.field.name: objs}).only(*required_fields)\n     def instances_with_model(self):\n         for model, instances in self.data.items():\n             for obj in instances:\n", "normalized_occurrence": 1}
