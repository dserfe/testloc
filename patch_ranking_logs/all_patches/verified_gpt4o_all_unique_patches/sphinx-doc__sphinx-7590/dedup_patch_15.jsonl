{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..7392376 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,18 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literals\n+        if self.current_char == '\\\"':\n+            self.pos += 1\n+            suffix = []\n+            while self.current_char.isalnum() or self.current_char == '_':\n+                suffix.append(self.current_char)\n+                self.pos += 1\n+            suffix = ''.join(suffix)\n+            if suffix:\n+                return ASTUserDefinedLiteral(suffix)\n+            else:\n+                self.fail(\"Expected user-defined literal suffix.\")\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..ccdf6e4 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,17 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.current_char == '\"':\n+            self.pos += 1\n+            suffix = []\n+            while self.current_char.isalnum() or self.current_char == '_':\n+                suffix.append(self.current_char)\n+                self.pos += 1\n+            suffix = ''.join(suffix)\n+            if suffix:\n+                return ASTUserDefinedLiteral(suffix)\n+            else:\n+                self.fail('Expected user-defined literal suffix.')\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
