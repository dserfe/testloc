{"model_name_or_path": "agentless", "instance_id": "django__django-10973", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex f49b2f8..cb56b0c 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -56,16 +56,13 @@ class DatabaseClient(BaseDatabaseClient):\n                     # If the current locale can't encode the data, let the\n                     # user input the password manually.\n                     pass\n-            # Allow SIGINT to pass to psql to abort queries.\n+            env = os.environ.copy()\n+            if passwd:\n+                env['PGPASSWORD'] = passwd\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=env, check=True)\n         finally:\n-            # Restore the original SIGINT handler.\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:  # unit tests need cleanup\n-                    del os.environ['PGPASSFILE']\n \n     def runshell(self):\n-        DatabaseClient.runshell_db(self.connection.get_connection_params())\n+        DatabaseClient.runshell_db(self.connection.get_connection_params())\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 78fa5c8..e59acb1 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,13 +32,12 @@ class DatabaseClient(BaseDatabaseClient):\n                     os.environ['PGPASSFILE'] = temp_pgpass.name\n                 except UnicodeEncodeError:\n                     pass\n+            env = os.environ.copy()\n+            if passwd:\n+                env['PGPASSWORD'] = passwd\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            subprocess.check_call(args)\n+            subprocess.run(args, env=env, check=True)\n         finally:\n             signal.signal(signal.SIGINT, sigint_handler)\n-            if temp_pgpass:\n-                temp_pgpass.close()\n-                if 'PGPASSFILE' in os.environ:\n-                    del os.environ['PGPASSFILE']\n     def runshell(self):\n         DatabaseClient.runshell_db(self.connection.get_connection_params())\n\\ No newline at end of file\n", "normalized_occurrence": 1}
