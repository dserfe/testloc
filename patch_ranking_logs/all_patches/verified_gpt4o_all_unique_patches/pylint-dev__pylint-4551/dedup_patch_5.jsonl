{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..3d06f74 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -91,9 +91,16 @@ class ClassDiagram(Figure, FilterMixIn):\n         ):\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            if isinstance(associated_nodes, list):\n+                names = self.class_names(associated_nodes)\n+            else:\n+                names = self.class_names([associated_nodes])\n             if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+                if isinstance(associated_nodes, astroid.Subscript):\n+                    type_hint = associated_nodes.value.as_string()\n+                    node_name = \"{} : {}\".format(node_name, type_hint)\n+                else:\n+                    node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n         return sorted(attrs)\n \n@@ -186,7 +193,7 @@ class ClassDiagram(Figure, FilterMixIn):\n                 for value in values:\n                     if value is astroid.Uninferable:\n                         continue\n-                    if isinstance(value, astroid.Instance):\n+                    if isinstance(value, astroid.Instance) or isinstance(value, astroid.Subscript):\n                         value = value._proxied\n                     try:\n                         associated_obj = self.object_from_node(value)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..464aed1 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -60,9 +60,16 @@ class ClassDiagram(Figure, FilterMixIn):\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            if isinstance(associated_nodes, list):\n+                names = self.class_names(associated_nodes)\n+            else:\n+                names = self.class_names([associated_nodes])\n             if names:\n-                node_name = '{} : {}'.format(node_name, ', '.join(names))\n+                if isinstance(associated_nodes, astroid.Subscript):\n+                    type_hint = associated_nodes.value.as_string()\n+                    node_name = '{} : {}'.format(node_name, type_hint)\n+                else:\n+                    node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n         return sorted(attrs)\n \n@@ -139,7 +146,7 @@ class ClassDiagram(Figure, FilterMixIn):\n                 for value in values:\n                     if value is astroid.Uninferable:\n                         continue\n-                    if isinstance(value, astroid.Instance):\n+                    if isinstance(value, astroid.Instance) or isinstance(value, astroid.Subscript):\n                         value = value._proxied\n                     try:\n                         associated_obj = self.object_from_node(value)\n", "normalized_occurrence": 1}
