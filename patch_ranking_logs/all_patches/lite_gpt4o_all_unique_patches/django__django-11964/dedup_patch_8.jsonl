{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..3954090 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -792,6 +792,8 @@ class Field(RegisterLookupMixin):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n \n     def get_db_prep_value(self, value, connection, prepared=False):\n@@ -1008,6 +1010,8 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -1767,6 +1771,8 @@ class IntegerField(Field):\n         return \"IntegerField\"\n \n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if value is None:\n             return value\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..c5ac329 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -358,6 +358,8 @@ class Field(RegisterLookupMixin):\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return value\n     def get_db_prep_value(self, value, connection, prepared=False):\n         if not prepared:\n@@ -485,6 +487,8 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -890,6 +894,8 @@ class IntegerField(Field):\n     def get_internal_type(self):\n         return 'IntegerField'\n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if value is None:\n             return value\n         try:\n", "normalized_occurrence": 1}
