{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..d1c7c90 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -53,6 +53,22 @@ class Q(tree.Node):\n \n         obj = type(self)()\n         obj.connector = conn\n+        # Convert non-pickleable types like 'dict_keys' to list before combining\n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+\n+        def ensure_pickleable(q_object):\n+            for i, child in enumerate(q_object.children):\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    key, value = child\n+                    q_object.children[i] = (key, make_pickleable(value))\n+            return q_object\n+\n+        self = ensure_pickleable(self)\n+        other = ensure_pickleable(other)\n+        \n         obj.add(self, conn)\n         obj.add(other, conn)\n         return obj\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..e08c8e3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -26,6 +26,18 @@ class Q(tree.Node):\n             return copy.deepcopy(other)\n         obj = type(self)()\n         obj.connector = conn\n+        def make_pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+        def ensure_pickleable(q_object):\n+            for i, child in enumerate(q_object.children):\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    key, value = child\n+                    q_object.children[i] = (key, make_pickleable(value))\n+            return q_object\n+        self = ensure_pickleable(self)\n+        other = ensure_pickleable(other)\n         obj.add(self, conn)\n         obj.add(other, conn)\n         return obj\n", "normalized_occurrence": 1}
