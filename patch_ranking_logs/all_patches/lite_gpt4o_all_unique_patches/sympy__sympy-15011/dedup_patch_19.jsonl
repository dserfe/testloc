{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..a31e55e 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -393,7 +393,8 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         #Move on if expr.atoms in not implemented.\n         syms = expr.atoms(Symbol)\n         for term in syms:\n-            namespace.update({str(term): term})\n+            if isinstance(term, (Symbol, MatrixSymbol)):\n+                namespace.update({str(term): term})\n \n     if printer is None:\n         if _module_present('mpmath', namespaces):\n@@ -725,11 +726,11 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n-                    dummy = Dummy()\n+                    dummy = Dummy(str(arg))\n                     argstrs.append(self._argrepr(dummy))\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..f22b5fd 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -84,7 +84,8 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     if hasattr(expr, 'atoms'):\n         syms = expr.atoms(Symbol)\n         for term in syms:\n-            namespace.update({str(term): term})\n+            if isinstance(term, (Symbol, MatrixSymbol)):\n+                namespace.update({str(term): term})\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n@@ -294,10 +295,10 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n                 argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n-                    dummy = Dummy()\n+                    dummy = Dummy(str(arg))\n                     argstrs.append(self._argrepr(dummy))\n                     expr = self._subexpr(expr, {arg: dummy})\n                 else:\n", "normalized_occurrence": 1}
