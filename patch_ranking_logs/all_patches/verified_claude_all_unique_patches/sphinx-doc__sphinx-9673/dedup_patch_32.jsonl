{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex ea465e6..c0e7ae4 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -769,26 +769,20 @@ class GoogleDocstring:\n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n         multi = len(fields) > 1\n-        if multi:\n-            use_rtype = False\n-        else:\n-            use_rtype = self._config.napoleon_use_rtype\n \n         lines: List[str] = []\n         for _name, _type, _desc in fields:\n-            if use_rtype:\n-                field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n-\n             if multi:\n+                field = self._format_field(_name, _type, _desc)\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n                     lines.extend(self._format_block(':returns: * ', field))\n             else:\n+                # Always separate return description and type to allow autodoc to handle typehints\n+                field = self._format_field(_name, '', _desc)\n                 lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n+                if _type:\n                     lines.extend([':rtype: %s' % _type, ''])\n         if lines and lines[-1]:\n             lines.append('')\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex bc7a995..976b593 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -507,24 +507,18 @@ class GoogleDocstring:\n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n         multi = len(fields) > 1\n-        if multi:\n-            use_rtype = False\n-        else:\n-            use_rtype = self._config.napoleon_use_rtype\n         lines: List[str] = []\n         for _name, _type, _desc in fields:\n-            if use_rtype:\n-                field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n             if multi:\n+                field = self._format_field(_name, _type, _desc)\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n                 else:\n                     lines.extend(self._format_block(':returns: * ', field))\n             else:\n+                field = self._format_field(_name, '', _desc)\n                 lines.extend(self._format_block(':returns: ', field))\n-                if _type and use_rtype:\n+                if _type:\n                     lines.extend([':rtype: %s' % _type, ''])\n         if lines and lines[-1]:\n             lines.append('')\n", "normalized_occurrence": 1}
