{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7236", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..ee15f62 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -214,15 +214,17 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            # when --pdb is given, we want to postpone calling tearDown() otherwise\n-            # when entering the pdb prompt, tearDown() would have probably cleaned up\n-            # instance variables, which makes it difficult to debug\n-            # arguably we could always postpone tearDown(), but this changes the moment where the\n-            # TestCase instance interacts with the results object, so better to only do it\n-            # when absolutely needed\n+            # Ensure tearDown() is not called if the test is skipped, even when --pdb is given.\n             if self.config.getoption(\"usepdb\"):\n                 self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, \"tearDown\", lambda *args: None)\n+                original_tearDown = self._explicit_tearDown\n+\n+                def conditional_tearDown(*args):\n+                    if hasattr(self._testcase, '_outcome') and self._testcase._outcome.skipped:\n+                        return\n+                    original_tearDown(*args)\n+\n+                setattr(self._testcase, \"tearDown\", conditional_tearDown)\n \n             # we need to update the actual bound method with self.obj, because\n             # wrap_pytest_function_for_tracing replaces self.obj by a wrapper\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 4eb682f..30c25b9 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -154,7 +154,12 @@ class TestCaseFunction(Function):\n         else:\n             if self.config.getoption('usepdb'):\n                 self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, 'tearDown', lambda *args: None)\n+                original_tearDown = self._explicit_tearDown\n+                def conditional_tearDown(*args):\n+                    if hasattr(self._testcase, '_outcome') and self._testcase._outcome.skipped:\n+                        return\n+                    original_tearDown(*args)\n+                setattr(self._testcase, 'tearDown', conditional_tearDown)\n             setattr(self._testcase, self.name, self.obj)\n             try:\n                 self._testcase(result=self)\n", "normalized_occurrence": 1}
