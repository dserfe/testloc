{"model_name_or_path": "agentless", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex be6e066..b9f1804 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -187,12 +187,29 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                         del mapping[field.column]\n         # Add in any created fields\n         if create_field:\n-            body[create_field.name] = create_field\n-            # Choose a default and insert it into the copy map\n-            if not create_field.many_to_many and create_field.concrete:\n-                mapping[create_field.column] = self.prepare_default(\n-                    self.effective_default(create_field),\n+            if create_field.unique and create_field.null:\n+                # Create non-unique nullable column first\n+                create_field._unique = create_field.unique\n+                create_field.unique = False\n+                body[create_field.name] = create_field\n+                if not create_field.many_to_many and create_field.concrete:\n+                    mapping[create_field.column] = self.prepare_default(\n+                        self.effective_default(create_field),\n+                    )\n+                # Mark the field for unique constraint addition later\n+                self.deferred_sql.append(\n+                    self._create_unique_sql(model, [create_field.column])\n                 )\n+                # Restore unique property on the field\n+                create_field.unique = create_field._unique\n+                del create_field._unique\n+            else:\n+                body[create_field.name] = create_field\n+                # Choose a default and insert it into the copy map\n+                if not create_field.many_to_many and create_field.concrete:\n+                    mapping[create_field.column] = self.prepare_default(\n+                        self.effective_default(create_field),\n+                    )\n         # Add in any altered fields\n         if alter_field:\n             old_field, new_field = alter_field\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex fd5121f..7ea5f09 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -105,9 +105,19 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                         del body[name]\n                         del mapping[field.column]\n         if create_field:\n-            body[create_field.name] = create_field\n-            if not create_field.many_to_many and create_field.concrete:\n-                mapping[create_field.column] = self.prepare_default(self.effective_default(create_field))\n+            if create_field.unique and create_field.null:\n+                create_field._unique = create_field.unique\n+                create_field.unique = False\n+                body[create_field.name] = create_field\n+                if not create_field.many_to_many and create_field.concrete:\n+                    mapping[create_field.column] = self.prepare_default(self.effective_default(create_field))\n+                self.deferred_sql.append(self._create_unique_sql(model, [create_field.column]))\n+                create_field.unique = create_field._unique\n+                del create_field._unique\n+            else:\n+                body[create_field.name] = create_field\n+                if not create_field.many_to_many and create_field.concrete:\n+                    mapping[create_field.column] = self.prepare_default(self.effective_default(create_field))\n         if alter_field:\n             old_field, new_field = alter_field\n             body.pop(old_field.name, None)\n", "normalized_occurrence": 1}
