{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 1ea0522..3b9ad42 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -276,7 +276,11 @@ class Node(metaclass=NodeMeta):\n             marker_ = getattr(MARK_GEN, marker)\n         else:\n             raise ValueError(\"is not a string or pytest.mark.* Marker\")\n-        self.keywords[marker_.name] = marker_\n+        # Handle xfail marker specifically to ensure it causes the test to be marked as xfail\n+        if marker_.name == \"xfail\":\n+            from _pytest.skipping import xfail_key\n+\n+            self._store[xfail_key] = marker_.mark\n         if append:\n             self.own_markers.append(marker_.mark)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 8a79019..7fc6c48 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -208,7 +208,9 @@ class Node(metaclass=NodeMeta):\n             marker_ = getattr(MARK_GEN, marker)\n         else:\n             raise ValueError('is not a string or pytest.mark.* Marker')\n-        self.keywords[marker_.name] = marker_\n+        if marker_.name == 'xfail':\n+            from _pytest.skipping import xfail_key\n+            self._store[xfail_key] = marker_.mark\n         if append:\n             self.own_markers.append(marker_.mark)\n         else:\n", "normalized_occurrence": 1}
