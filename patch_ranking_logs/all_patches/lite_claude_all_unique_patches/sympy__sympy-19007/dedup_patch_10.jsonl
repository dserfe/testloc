{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..354f61d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,28 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+        from sympy.functions.elementary.piecewise import Piecewise\n+        # For column index, find which block we're in\n+        col_block = 0\n+        col_offset = 0\n+        for nb, numcols in enumerate(self.colblocksizes):\n+            if j < col_offset + numcols:\n+                col_block = nb\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset += numcols\n+\n+        # For row index, create piecewise for each possible block\n+        row_offset = 0\n+        pieces = []\n+        for row_block, numrows in enumerate(self.rowblocksizes):\n+            row_bound = row_offset + numrows\n+            # If i falls within this block's rows\n+            cond = (row_offset <= i) & (i < row_bound)\n+            local_i = i - row_offset\n+            pieces.append((self.blocks[row_block, col_block][local_i, j - col_offset], cond))\n+            row_offset += numrows\n+            \n+        return Piecewise(*pieces)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..8534a3e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,23 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+        from sympy.functions.elementary.piecewise import Piecewise\n+        col_block = 0\n+        col_offset = 0\n+        for nb, numcols in enumerate(self.colblocksizes):\n+            if j < col_offset + numcols:\n+                col_block = nb\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset += numcols\n+        row_offset = 0\n+        pieces = []\n+        for row_block, numrows in enumerate(self.rowblocksizes):\n+            row_bound = row_offset + numrows\n+            cond = (row_offset <= i) & (i < row_bound)\n+            local_i = i - row_offset\n+            pieces.append((self.blocks[row_block, col_block][local_i, j - col_offset], cond))\n+            row_offset += numrows\n+        return Piecewise(*pieces)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
