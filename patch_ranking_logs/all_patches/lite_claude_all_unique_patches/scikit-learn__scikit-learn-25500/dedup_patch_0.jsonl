{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..11963e2 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -652,6 +652,20 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     return predictions\n \n \n+class _ForceNumpyOutput:\n+    \"\"\"Small wrapper to force numpy output from estimator methods.\"\"\"\n+    def __init__(self, estimator):\n+        self.estimator = estimator\n+\n+    def fit(self, X, y, sample_weight=None):\n+        self.estimator.fit(X, y, sample_weight)\n+        return self\n+\n+    def predict(self, X):\n+        # Force numpy array output\n+        return np.asarray(self.estimator.predict(X))\n+\n+\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     \"\"\"Fit calibrator(s) and return a `_CalibratedClassifier`\n     instance.\n@@ -691,6 +705,8 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     for class_idx, this_pred in zip(pos_class_indices, predictions.T):\n         if method == \"isotonic\":\n             calibrator = IsotonicRegression(out_of_bounds=\"clip\")\n+            # Force numpy output regardless of global config\n+            calibrator = _ForceNumpyOutput(calibrator)\n         else:  # \"sigmoid\"\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..149f33e 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -140,6 +140,14 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     else:\n         raise ValueError(f'Invalid prediction method: {method_name}')\n     return predictions\n+class _ForceNumpyOutput:\n+    def __init__(self, estimator):\n+        self.estimator = estimator\n+    def fit(self, X, y, sample_weight=None):\n+        self.estimator.fit(X, y, sample_weight)\n+        return self\n+    def predict(self, X):\n+        return np.asarray(self.estimator.predict(X))\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     Y = label_binarize(y, classes=classes)\n     label_encoder = LabelEncoder().fit(classes)\n@@ -148,6 +156,7 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     for class_idx, this_pred in zip(pos_class_indices, predictions.T):\n         if method == 'isotonic':\n             calibrator = IsotonicRegression(out_of_bounds='clip')\n+            calibrator = _ForceNumpyOutput(calibrator)\n         else:\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n", "normalized_occurrence": 1}
