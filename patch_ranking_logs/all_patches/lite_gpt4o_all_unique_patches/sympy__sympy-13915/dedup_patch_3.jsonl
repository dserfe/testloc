{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..19921fe 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -915,11 +915,19 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One  # get rid of m\n             return rv.xreplace(reps)\n         else:\n+            from sympy import limit, Symbol\n             rv = self\n             for old, new in sequence:\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+                # Check if the substitution leads to an undefined expression\n+                if rv.has(Symbol('zoo'), Symbol('nan')):\n+                    # Try to compute the limit instead\n+                    try:\n+                        rv = limit(rv, old, new)\n+                    except Exception:\n+                        pass  # If limit fails, keep the original undefined result\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..280e312 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -324,11 +324,17 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One\n             return rv.xreplace(reps)\n         else:\n+            from sympy import limit, Symbol\n             rv = self\n             for old, new in sequence:\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+                if rv.has(Symbol('zoo'), Symbol('nan')):\n+                    try:\n+                        rv = limit(rv, old, new)\n+                    except Exception:\n+                        pass\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
