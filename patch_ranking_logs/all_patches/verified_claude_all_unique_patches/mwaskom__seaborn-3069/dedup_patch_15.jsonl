{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..6245441 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -187,10 +187,17 @@ class Nominal(Scale):\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set the view interval with categorical-style padding (+/- 0.5)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            \n+            # Disable grid by default for nominal scales\n+            if isinstance(axis, mpl.axis.Axis):\n+                if isinstance(axis, mpl.axis.XAxis):\n+                    axis.grid(False)\n+                else:  # YAxis\n+                    axis.grid(False)\n+                    # Invert y-axis for categorical plots\n+                    axis.set_inverted(True)\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..197449f 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -94,7 +94,13 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            if isinstance(axis, mpl.axis.Axis):\n+                if isinstance(axis, mpl.axis.XAxis):\n+                    axis.grid(False)\n+                else:\n+                    axis.grid(False)\n+                    axis.set_inverted(True)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
