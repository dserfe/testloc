{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15930", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 47df1a9..a2fc623 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1265,6 +1265,10 @@ class When(Expression):\n         self.result = self._parse_expressions(then)[0]\n \n     def __str__(self):\n+        if isinstance(self.condition, Q):\n+            # Handle negated empty Q objects\n+            if isinstance(self.condition, Q) and not self.condition.children and self.condition.negated:\n+                return \"WHEN TRUE THEN %r\" % self.result\n         return \"WHEN %r THEN %r\" % (self.condition, self.result)\n \n     def __repr__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 1b947ba..488f191 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -639,6 +639,9 @@ class When(Expression):\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n     def __str__(self):\n+        if isinstance(self.condition, Q):\n+            if isinstance(self.condition, Q) and (not self.condition.children) and self.condition.negated:\n+                return 'WHEN TRUE THEN %r' % self.result\n         return 'WHEN %r THEN %r' % (self.condition, self.result)\n     def __repr__(self):\n         return '<%s: %s>' % (self.__class__.__name__, self)\n", "normalized_occurrence": 1}
