{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..4b05e42 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,8 +125,15 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        try:\n+            name = self.value.name\n+            value_str = \"%s.%s[%r]\" % (module, enum_class.__qualname__, name)\n+        except AttributeError:\n+            decomposed = enum._decompose(enum_class, self.value)\n+            names = [e.name for e in decomposed]\n+            value_str = \" | \".join(\"%s.%s.%s\" % (module, enum_class.__qualname__, name) for name in names)\n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            value_str,\n             {\"import %s\" % module},\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..7cf1050 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,14 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            name = self.value.name\n+            value_str = '%s.%s[%r]' % (module, enum_class.__qualname__, name)\n+        except AttributeError:\n+            decomposed = enum._decompose(enum_class, self.value)\n+            names = [e.name for e in decomposed]\n+            value_str = ' | '.join(('%s.%s.%s' % (module, enum_class.__qualname__, name) for name in names))\n+        return (value_str, {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
