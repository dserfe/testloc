{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..4812ed1 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -374,7 +374,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             name = routine.name\n             arg_string = \", \".join(self._prototype_arg(arg) for arg in py_args)\n \n-            # Local Declarations\n+            # Ensure all arguments are declared\n+            declarations = \"\\n\".join([\"    cdef {0}\".format(self._declare_arg(a)) for a in py_args])\n             local_decs = []\n             for arg, val in py_inf.items():\n                 proto = self._prototype_arg(arg)\n@@ -432,9 +433,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n-        return py_returns, py_args, py_locals, py_inferred\n+        return py_returns, py_args + list(py_inferred.keys()), py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n         mat_dec = \"np.ndarray[{mtype}, ndim={ndim}] {name}\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..1179037 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -143,6 +143,7 @@ class CythonCodeWrapper(CodeWrapper):\n             py_rets, py_args, py_loc, py_inf = self._partition_args(routine.arguments)\n             name = routine.name\n             arg_string = ', '.join((self._prototype_arg(arg) for arg in py_args))\n+            declarations = '\\n'.join(['    cdef {0}'.format(self._declare_arg(a)) for a in py_args])\n             local_decs = []\n             for arg, val in py_inf.items():\n                 proto = self._prototype_arg(arg)\n@@ -188,8 +189,7 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n-        return (py_returns, py_args, py_locals, py_inferred)\n+        return (py_returns, py_args + list(py_inferred.keys()), py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n         np_types = {'double': 'np.double_t', 'int': 'np.int_t'}\n", "normalized_occurrence": 1}
