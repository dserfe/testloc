{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 6e607da..42f97ef 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1727,7 +1727,7 @@ def dot(*arrays, dims=None, **kwargs):\n     return result.transpose(*all_dims, missing_dims=\"ignore\")\n \n \n-def where(cond, x, y):\n+def where(cond, x, y, keep_attrs=True):\n     \"\"\"Return elements from `x` or `y` depending on `cond`.\n \n     Performs xarray-like broadcasting across input arguments.\n@@ -1743,6 +1743,9 @@ def where(cond, x, y):\n         values to choose from where `cond` is True\n     y : scalar, array, Variable, DataArray or Dataset\n         values to choose from where `cond` is False\n+    keep_attrs : bool, optional\n+        If True, preserve attributes from `x`. If False, attributes are dropped.\n+        Defaults to True.\n \n     Returns\n     -------\n@@ -1817,6 +1820,7 @@ def where(cond, x, y):\n         join=\"exact\",\n         dataset_join=\"exact\",\n         dask=\"allowed\",\n+        keep_attrs=keep_attrs,\n     )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 9a946c5..df38778 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -514,8 +514,8 @@ def dot(*arrays, dims=None, **kwargs):\n     func = functools.partial(duck_array_ops.einsum, subscripts, **kwargs)\n     result = apply_ufunc(func, *arrays, input_core_dims=input_core_dims, output_core_dims=output_core_dims, join=join, dask='allowed')\n     return result.transpose(*all_dims, missing_dims='ignore')\n-def where(cond, x, y):\n-    return apply_ufunc(duck_array_ops.where, cond, x, y, join='exact', dataset_join='exact', dask='allowed')\n+def where(cond, x, y, keep_attrs=True):\n+    return apply_ufunc(duck_array_ops.where, cond, x, y, join='exact', dataset_join='exact', dask='allowed', keep_attrs=keep_attrs)\n def polyval(coord, coeffs, degree_dim='degree'):\n     from .dataarray import DataArray\n     from .missing import get_clean_interp_index\n", "normalized_occurrence": 5}
