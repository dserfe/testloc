{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..b5e5e71 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2105,11 +2105,22 @@ def uniq(seq, result=None):\n     [1, 4, 5, 2]\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n+\n+    Notes\n+    =====\n+    If the input sequence is modified during iteration, a RuntimeError\n+    will be raised, similar to Python's built-in behavior for\n+    dictionaries and sets.\n     \"\"\"\n     try:\n         seen = set()\n         result = result or []\n+        # Record initial size if sequence supports len\n+        initial_size = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            # Check if size changed\n+            if initial_size is not None and len(seq) != initial_size:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..6d88be1 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -733,7 +733,10 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        initial_size = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            if initial_size is not None and len(seq) != initial_size:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 10}
