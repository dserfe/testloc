{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..e7425cc 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -1000,31 +1000,37 @@ class Basic(with_metaclass(ManagedProperties)):\n             \"\"\"\n             hit = False\n             args = list(self.args)\n-            for i, arg in enumerate(args):\n-                if not hasattr(arg, '_eval_subs'):\n-                    continue\n-                arg = arg._subs(old, new, **hints)\n-                if not _aresame(arg, args[i]):\n-                    hit = True\n-                    args[i] = arg\n-            if hit:\n-                rv = self.func(*args)\n-                hack2 = hints.get('hack2', False)\n-                if hack2 and self.is_Mul and not rv.is_Mul:  # 2-arg hack\n-                    coeff = S.One\n-                    nonnumber = []\n-                    for i in args:\n-                        if i.is_Number:\n-                            coeff *= i\n+            try:\n+                for i, arg in enumerate(args):\n+                    if not hasattr(arg, '_eval_subs'):\n+                        continue\n+                    arg = arg._subs(old, new, **hints)\n+                    if not _aresame(arg, args[i]):\n+                        hit = True\n+                        args[i] = arg\n+                if hit:\n+                    rv = self.func(*args)\n+                    hack2 = hints.get('hack2', False)\n+                    if hack2 and self.is_Mul and not rv.is_Mul:  # 2-arg hack\n+                        coeff = S.One\n+                        nonnumber = []\n+                        for i in args:\n+                            if i.is_Number:\n+                                coeff *= i\n+                            else:\n+                                nonnumber.append(i)\n+                        nonnumber = self.func(*nonnumber)\n+                        if coeff is S.One:\n+                            return nonnumber\n                         else:\n-                            nonnumber.append(i)\n-                    nonnumber = self.func(*nonnumber)\n-                    if coeff is S.One:\n-                        return nonnumber\n-                    else:\n-                        return self.func(coeff, nonnumber, evaluate=False)\n-                return rv\n-            return self\n+                            return self.func(coeff, nonnumber, evaluate=False)\n+                    return rv\n+                return self\n+            except ZeroDivisionError:\n+                # If substitution leads to undefined expression, try using limit\n+                if isinstance(old, Symbol) and isinstance(new, Symbol):\n+                    from sympy import limit\n+                    return limit(self, old, new)\n \n         if _aresame(self, old):\n             return new\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..afc240f 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -335,31 +335,36 @@ class Basic(with_metaclass(ManagedProperties)):\n         def fallback(self, old, new):\n             hit = False\n             args = list(self.args)\n-            for i, arg in enumerate(args):\n-                if not hasattr(arg, '_eval_subs'):\n-                    continue\n-                arg = arg._subs(old, new, **hints)\n-                if not _aresame(arg, args[i]):\n-                    hit = True\n-                    args[i] = arg\n-            if hit:\n-                rv = self.func(*args)\n-                hack2 = hints.get('hack2', False)\n-                if hack2 and self.is_Mul and (not rv.is_Mul):\n-                    coeff = S.One\n-                    nonnumber = []\n-                    for i in args:\n-                        if i.is_Number:\n-                            coeff *= i\n+            try:\n+                for i, arg in enumerate(args):\n+                    if not hasattr(arg, '_eval_subs'):\n+                        continue\n+                    arg = arg._subs(old, new, **hints)\n+                    if not _aresame(arg, args[i]):\n+                        hit = True\n+                        args[i] = arg\n+                if hit:\n+                    rv = self.func(*args)\n+                    hack2 = hints.get('hack2', False)\n+                    if hack2 and self.is_Mul and (not rv.is_Mul):\n+                        coeff = S.One\n+                        nonnumber = []\n+                        for i in args:\n+                            if i.is_Number:\n+                                coeff *= i\n+                            else:\n+                                nonnumber.append(i)\n+                        nonnumber = self.func(*nonnumber)\n+                        if coeff is S.One:\n+                            return nonnumber\n                         else:\n-                            nonnumber.append(i)\n-                    nonnumber = self.func(*nonnumber)\n-                    if coeff is S.One:\n-                        return nonnumber\n-                    else:\n-                        return self.func(coeff, nonnumber, evaluate=False)\n-                return rv\n-            return self\n+                            return self.func(coeff, nonnumber, evaluate=False)\n+                    return rv\n+                return self\n+            except ZeroDivisionError:\n+                if isinstance(old, Symbol) and isinstance(new, Symbol):\n+                    from sympy import limit\n+                    return limit(self, old, new)\n         if _aresame(self, old):\n             return new\n         rv = self._eval_subs(old, new)\n", "normalized_occurrence": 1}
