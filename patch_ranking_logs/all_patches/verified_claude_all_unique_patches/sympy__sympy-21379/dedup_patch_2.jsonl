{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..1158339 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -805,24 +805,31 @@ class Piecewise(Function):\n         return self.func(*[(e**s, c) for e, c in self.args])\n \n     def _eval_subs(self, old, new):\n-        # this is strictly not necessary, but we can keep track\n-        # of whether True or False conditions arise and be\n-        # somewhat more efficient by avoiding other substitutions\n-        # and avoiding invalid conditions that appear after a\n-        # True condition\n-        args = list(self.args)\n+        \"\"\"Handles substitutions in a piecewise expression ensuring assumptions are preserved.\"\"\"\n+        if not isinstance(old, Basic) or not isinstance(new, Basic):\n+            return self.func(*[(e._subs(old, new), c._subs(old, new)) for e, c in self.args])\n+\n+        # Check if substitution affects conditions\n+        args = []\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+        hit = False\n+        for expr, cond in self.args:\n+            newexpr = expr._subs(old, new)\n+            newcond = cond._subs(old, new)\n+            if newcond != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            if newexpr != expr or newcond != cond:\n+                hit = True\n+            args.append((newexpr, newcond))\n+            if newcond == True:\n                 break\n+\n         if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+            return self.func((Undefined, True))\n+        elif hit:\n+            return self.func(*args)\n+        else:\n+            return self\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..52a3992 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,19 +441,27 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n-        args = list(self.args)\n+        if not isinstance(old, Basic) or not isinstance(new, Basic):\n+            return self.func(*[(e._subs(old, new), c._subs(old, new)) for e, c in self.args])\n+        args = []\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+        hit = False\n+        for expr, cond in self.args:\n+            newexpr = expr._subs(old, new)\n+            newcond = cond._subs(old, new)\n+            if newcond != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            if newexpr != expr or newcond != cond:\n+                hit = True\n+            args.append((newexpr, newcond))\n+            if newcond == True:\n                 break\n         if not args_exist:\n-            args = ((Undefined, True),)\n-        return self.func(*args)\n+            return self.func((Undefined, True))\n+        elif hit:\n+            return self.func(*args)\n+        else:\n+            return self\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
