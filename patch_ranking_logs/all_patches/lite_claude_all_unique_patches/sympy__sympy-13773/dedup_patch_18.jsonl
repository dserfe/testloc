{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 8faef3a..c1fb3f0 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -55,6 +55,33 @@ class DenseMatrix(MatrixBase):\n         except AttributeError:\n             return False\n \n+    def __matmul__(self, other):\n+        \"\"\"Matrix multiplication with `@` operator.\n+        See `_eval_matrix_mul()` for implementation details.\n+\n+        Examples\n+        ========\n+\n+        >>> from sympy import Matrix\n+        >>> A = Matrix([[1, 2], [3, 4]])\n+        >>> B = Matrix([[2, 3], [1, 2]])\n+        >>> A @ B\n+        Matrix([\n+        [ 4,  7],\n+        [10, 17]])\n+        \"\"\"\n+        if not getattr(other, 'is_Matrix', False):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_mul(other)\n+\n+    def __rmatmul__(self, other):\n+        \"\"\"Matrix multiplication with `@` operator (right).\n+        See `_eval_matrix_mul()` for implementation details.\n+        \"\"\"\n+        if not getattr(other, 'is_Matrix', False):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return Matrix(other)._eval_matrix_mul(self)\n+\n     def __getitem__(self, key):\n         \"\"\"Return portion of self defined by key. If the key involves a slice\n         then a list will be returned (if key is a single slice) or a matrix\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n+    def __matmul__(self, other):\n+        if not getattr(other, 'is_Matrix', False):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_mul(other)\n+    def __rmatmul__(self, other):\n+        if not getattr(other, 'is_Matrix', False):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return Matrix(other)._eval_matrix_mul(self)", "normalized_occurrence": 1}
