{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..75fa9dd 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -207,12 +207,9 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        mat = np.eye(noutp, model.n_inputs)\n+        if pos == 'right' and model.n_outputs < noutp:\n+            mat = np.roll(mat, (noutp - model.n_outputs), axis=0)\n     return mat\n \n \n@@ -306,7 +303,15 @@ def _separable(transform):\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        result = _operators[transform.op](sepleft, sepright)\n+\n+        # Ensure the result is a 2D array with the correct shape\n+        if result.ndim == 1:\n+            result = result.reshape((len(result), 1))\n+        elif result.ndim == 2 and result.shape[1] == 1:\n+            result = result.T\n+\n+        return result\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..2744674 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -61,11 +61,9 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+        mat = np.eye(noutp, model.n_inputs)\n+        if pos == 'right' and model.n_outputs < noutp:\n+            mat = np.roll(mat, noutp - model.n_outputs, axis=0)\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n@@ -101,7 +99,12 @@ def _separable(transform):\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        result = _operators[transform.op](sepleft, sepright)\n+        if result.ndim == 1:\n+            result = result.reshape((len(result), 1))\n+        elif result.ndim == 2 and result.shape[1] == 1:\n+            result = result.T\n+        return result\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper, '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
