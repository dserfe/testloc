{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..ecdc90d 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1726,10 +1726,16 @@ class Complement(Set, EvalfMixin):\n             return Intersection(s.complement(A) for s in B.args)\n \n         result = B._complement(A)\n-        if result != None:\n+        if result is not None:\n             return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n+        \n+        # Handle FiniteSet containing mixed symbols and numbers\n+        if isinstance(A, FiniteSet):\n+            contained = [elem for elem in A.args if B.contains(elem) == True]\n+            if contained:\n+                return FiniteSet(*(set(A.args) - set(contained)))\n+            \n+        return Complement(A, B, evaluate=False)\n \n     def _contains(self, other):\n         A = self.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..1a75256 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -753,10 +753,13 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n         result = B._complement(A)\n-        if result != None:\n+        if result is not None:\n             return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n+        if isinstance(A, FiniteSet):\n+            contained = [elem for elem in A.args if B.contains(elem) == True]\n+            if contained:\n+                return FiniteSet(*set(A.args) - set(contained))\n+        return Complement(A, B, evaluate=False)\n     def _contains(self, other):\n         A = self.args[0]\n         B = self.args[1]\n", "normalized_occurrence": 1}
