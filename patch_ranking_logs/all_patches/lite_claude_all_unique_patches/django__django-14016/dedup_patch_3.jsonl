{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..20d7546 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -17,6 +17,8 @@ from django.utils import tree\n # PathInfo is used when converting lookups (fk__somecol). The contents\n # describe the relation in Model terms (model Options and Fields for both\n # sides of the relation. The join_field is the field backing the relation.\n+from collections.abc import dict_keys, dict_values, dict_items\n+\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n \n \n@@ -44,6 +46,17 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n+        def _make_pickleable(node):\n+            for child in node.children:\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    key, value = child\n+                    if isinstance(value, (dict_keys, dict_values, dict_items)):\n+                        node.children[node.children.index(child)] = (key, list(value))\n+            return node\n+\n+        self = _make_pickleable(self)\n+        other = _make_pickleable(other)\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             return copy.deepcopy(self)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..8cae78a 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -5,6 +5,7 @@ from collections import namedtuple\n from django.core.exceptions import FieldError\n from django.db.models.constants import LOOKUP_SEP\n from django.utils import tree\n+from collections.abc import dict_keys, dict_values, dict_items\n PathInfo = namedtuple('PathInfo', 'from_opts to_opts target_fields join_field m2m direct filtered_relation')\n def subclasses(cls):\n     yield cls\n@@ -20,6 +21,15 @@ class Q(tree.Node):\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n+        def _make_pickleable(node):\n+            for child in node.children:\n+                if isinstance(child, tuple) and len(child) == 2:\n+                    key, value = child\n+                    if isinstance(value, (dict_keys, dict_values, dict_items)):\n+                        node.children[node.children.index(child)] = (key, list(value))\n+            return node\n+        self = _make_pickleable(self)\n+        other = _make_pickleable(other)\n         if not other:\n             return copy.deepcopy(self)\n         elif not self:\n", "normalized_occurrence": 1}
