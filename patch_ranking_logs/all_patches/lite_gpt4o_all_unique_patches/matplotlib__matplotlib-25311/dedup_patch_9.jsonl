{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..b69ac11 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,8 +3174,27 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove non-pickleable draggable objects\n+        state['_draggable_legends'] = {\n+            k: v for k, v in self.__dict__.items() if isinstance(v, DraggableLegend)\n+        }\n+        for k in state['_draggable_legends']:\n+            del self.__dict__[k]\n+        # Remove non-pickleable draggable objects\n+        if hasattr(self, \"draggable_legends\"):\n+            state[\"draggable_legends\"] = self.draggable_legends\n+            del self.draggable_legends\n         return state\n \n+    def __setstate__(self, state):\n+        if \"draggable_legends\" in state:\n+            self.draggable_legends = state.pop(\"draggable_legends\")\n+\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        for k, v in state.pop('_draggable_legends', {}).items():\n+            self.__dict__[k] = v\n+\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..5090fb2 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,7 +951,20 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_draggable_legends'] = {k: v for k, v in self.__dict__.items() if isinstance(v, DraggableLegend)}\n+        for k in state['_draggable_legends']:\n+            del self.__dict__[k]\n+        if hasattr(self, 'draggable_legends'):\n+            state['draggable_legends'] = self.draggable_legends\n+            del self.draggable_legends\n         return state\n+    def __setstate__(self, state):\n+        if 'draggable_legends' in state:\n+            self.draggable_legends = state.pop('draggable_legends')\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        for k, v in state.pop('_draggable_legends', {}).items():\n+            self.__dict__[k] = v\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n", "normalized_occurrence": 1}
