{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25498", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 61200b4..b08db8c 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1354,11 +1354,14 @@ class Normalize:\n         (vmin,), _ = self.process_value(self.vmin)\n         (vmax,), _ = self.process_value(self.vmax)\n \n+        if vmin == 0 or vmax == 0:\n+            raise ZeroDivisionError(\"vmin or vmax is zero, cannot perform the inversion.\")\n+\n         if np.iterable(value):\n             val = np.ma.asarray(value)\n-            return vmin + val * (vmax - vmin)\n+            return vmin * np.ma.power((vmax / vmin), val)\n         else:\n-            return vmin + value * (vmax - vmin)\n+            return vmin * np.power((vmax / vmin), value)\n \n     def autoscale(self, A):\n         \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 196c069..37c5909 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1148,11 +1148,13 @@ class Normalize:\n             raise ValueError('Not invertible until both vmin and vmax are set')\n         (vmin,), _ = self.process_value(self.vmin)\n         (vmax,), _ = self.process_value(self.vmax)\n+        if vmin == 0 or vmax == 0:\n+            raise ZeroDivisionError('vmin or vmax is zero, cannot perform the inversion.')\n         if np.iterable(value):\n             val = np.ma.asarray(value)\n-            return vmin + val * (vmax - vmin)\n+            return vmin * np.ma.power(vmax / vmin, val)\n         else:\n-            return vmin + value * (vmax - vmin)\n+            return vmin * np.power(vmax / vmin, value)\n \n     def autoscale(self, A):\n         \"\"\"Set *vmin*, *vmax* to min, max of *A*.\"\"\"\n", "normalized_occurrence": 1}
