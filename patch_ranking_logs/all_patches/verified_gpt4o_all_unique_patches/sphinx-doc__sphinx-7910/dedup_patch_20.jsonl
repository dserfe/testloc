{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..3ad745e 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -143,8 +143,12 @@ def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n             obj = obj.__func__\n         elif isstaticmethod(obj):\n             obj = obj.__func__\n-        else:\n-            return obj\n+        elif hasattr(obj, '__globals__'):\n+            # If the method is decorated and has the __globals__ attribute, use it to find the class\n+            cls_path = '.'.join(obj.__qualname__.split('.')[:-1])\n+            if cls_path in obj.__globals__:\n+                return obj\n+        return obj\n \n \n def isenumclass(x: Any) -> bool:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 6e5e6c6..d7b9944 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -81,8 +81,11 @@ def unwrap_all(obj: Any, *, stop: Callable=None) -> Any:\n             obj = obj.__func__\n         elif isstaticmethod(obj):\n             obj = obj.__func__\n-        else:\n-            return obj\n+        elif hasattr(obj, '__globals__'):\n+            cls_path = '.'.join(obj.__qualname__.split('.')[:-1])\n+            if cls_path in obj.__globals__:\n+                return obj\n+        return obj\n def isenumclass(x: Any) -> bool:\n     return inspect.isclass(x) and issubclass(x, enum.Enum)\n def isenumattribute(x: Any) -> bool:\n", "normalized_occurrence": 1}
