{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..55faeec 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1017,7 +1017,7 @@ class ModuleDocumenter(Documenter):\n \n         try:\n             if not self.options.ignore_module_all:\n-                self.__all__ = inspect.getall(self.object)\n+                self.__all__ = inspect.getall(self.object) or []\n         except AttributeError as exc:\n             # __all__ raises an error.\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'),\n@@ -1074,16 +1074,17 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n+            if self.__all__ is not None:\n+                if not self.__all__:\n+                    # for implicit module members, check __module__ to avoid\n+                    # documenting imported objects\n+                    return False, []\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n \n-                return False, list(members.values())\n+                    return False, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..eae13f1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -536,7 +536,7 @@ class ModuleDocumenter(Documenter):\n         ret = super().import_object(raiseerror)\n         try:\n             if not self.options.ignore_module_all:\n-                self.__all__ = inspect.getall(self.object)\n+                self.__all__ = inspect.getall(self.object) or []\n         except AttributeError as exc:\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'), (self.fullname, exc), type='autodoc')\n         except ValueError as exc:\n@@ -575,13 +575,14 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                return (True, list(members.values()))\n-            else:\n-                for member in members.values():\n-                    if member.__name__ not in self.__all__:\n-                        member.skipped = True\n-                return (False, list(members.values()))\n+            if self.__all__ is not None:\n+                if not self.__all__:\n+                    return (False, [])\n+                else:\n+                    for member in members.values():\n+                        if member.__name__ not in self.__all__:\n+                            member.skipped = True\n+                    return (False, list(members.values()))\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "normalized_occurrence": 1}
