{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..b500272 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,10 +86,10 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        # Copy the original request only once at the start\n+        prepared_request = req.copy()\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n-\n             resp.content  # Consume socket so it can be released\n \n             if i >= self.max_redirects:\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..7af9450 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -35,8 +35,8 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n+        prepared_request = req.copy()\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n", "normalized_occurrence": 9}
