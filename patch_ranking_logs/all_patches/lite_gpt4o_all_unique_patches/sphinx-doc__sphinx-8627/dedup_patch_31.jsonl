{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..e7eb58c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,8 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n+import struct\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -22,12 +23,22 @@ from sphinx.util import inspect, typing\n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    \"\"\"Record type hints to env object and resolve them.\"\"\"\n+    def resolve_type_hint(hint):\n+        if hint is struct.Struct:\n+            return 'struct.Struct'\n+        return hint\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+\n+            # Resolve type hints for parameters and return type\n+            for param in sig.parameters.values():\n+                param._annotation = resolve_type_hint(param.annotation)\n+            sig._return_annotation = resolve_type_hint(sig.return_annotation)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..0dd113c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,17 +1,26 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n+import struct\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    def resolve_type_hint(hint):\n+        if hint is struct.Struct:\n+            return 'struct.Struct'\n+        return hint\n+    'Record type hints to env object.'\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            for param in sig.parameters.values():\n+                param._annotation = resolve_type_hint(param.annotation)\n+            sig._return_annotation = resolve_type_hint(sig.return_annotation)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "normalized_occurrence": 1}
