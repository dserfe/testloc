{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..9c9a99d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -118,35 +118,48 @@ class Media:\n     def merge(list_1, list_2):\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n-        Warn if the lists have the same two elements in a different relative\n-        order.\n+        Warn if the lists have the same two elements in a different relative order.\n \n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n+\n+        The merge algorithm tries to preserve the order of each list while\n+        ensuring that any duplicate elements maintain their relative ordering\n+        from the original lists.\n         \"\"\"\n-        # Start with a copy of list_1.\n+        # Create mappings of elements to their positions in each list\n+        list_1_order = {elem: idx for idx, elem in enumerate(list_1)}\n+        list_2_order = {elem: idx for idx, elem in enumerate(list_2)}\n+        \n+        # Find elements that appear in both lists\n+        common_elements = set(list_1) & set(list_2)\n+        \n+        # Check for ordering conflicts between the lists\n+        for elem1, elem2 in itertools.combinations(common_elements, 2):\n+            order_1 = list_1_order[elem1] < list_1_order[elem2]\n+            order_2 = list_2_order[elem1] < list_2_order[elem2]\n+            if order_1 != order_2:\n+                warnings.warn(\n+                    'Detected duplicate Media files in an opposite order:\\n'\n+                    '%s\\n%s' % (elem1, elem2),\n+                    MediaOrderConflictWarning,\n+                )\n+        \n+        # Start with a copy of list_1\n         combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n+        # Track the last position where we inserted an element\n+        last_insert_pos = len(list_1)\n+        \n+        # Process list_2 in reverse to maintain its relative ordering\n         for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n+            if path not in list_1_order:\n+                # New element - insert at the current position\n+                combined_list.insert(last_insert_pos, path)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n+                # Element exists - update insertion position\n+                last_insert_pos = min(last_insert_pos, list_1_order[path])\n+                \n         return combined_list\n \n     def __add__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..7683337 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -63,17 +63,21 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n     def merge(list_1, list_2):\n+        list_1_order = {elem: idx for idx, elem in enumerate(list_1)}\n+        list_2_order = {elem: idx for idx, elem in enumerate(list_2)}\n+        common_elements = set(list_1) & set(list_2)\n+        for elem1, elem2 in itertools.combinations(common_elements, 2):\n+            order_1 = list_1_order[elem1] < list_1_order[elem2]\n+            order_2 = list_2_order[elem1] < list_2_order[elem2]\n+            if order_1 != order_2:\n+                warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (elem1, elem2), MediaOrderConflictWarning)\n         combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n+        last_insert_pos = len(list_1)\n         for path in reversed(list_2):\n-            try:\n-                index = combined_list.index(path)\n-            except ValueError:\n-                combined_list.insert(last_insert_index, path)\n+            if path not in list_1_order:\n+                combined_list.insert(last_insert_pos, path)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (combined_list[last_insert_index], combined_list[index]), MediaOrderConflictWarning)\n-                last_insert_index = index\n+                last_insert_pos = min(last_insert_pos, list_1_order[path])\n         return combined_list\n     def __add__(self, other):\n         combined = Media()\n", "normalized_occurrence": 1}
