{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..0c494c5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -688,17 +688,20 @@ class SQLCompiler:\n         params = []\n         opts = self.query.get_meta()\n \n-        for name in self.query.distinct_fields:\n-            parts = name.split(LOOKUP_SEP)\n-            _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)\n-            targets, alias, _ = self.query.trim_joins(targets, joins, path)\n-            for target in targets:\n-                if name in self.query.annotation_select:\n-                    result.append(name)\n-                else:\n-                    r, p = self.compile(transform_function(target, alias))\n-                    result.append(r)\n-                    params.append(p)\n+        if self.query.combinator:\n+            result.append('*')\n+        else:\n+            for name in self.query.distinct_fields:\n+                parts = name.split(LOOKUP_SEP)\n+                _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)\n+                targets, alias, _ = self.query.trim_joins(targets, joins, path)\n+                for target in targets:\n+                    if name in self.query.annotation_select:\n+                        result.append(name)\n+                    else:\n+                        r, p = self.compile(transform_function(target, alias))\n+                        result.append(r)\n+                        params.append(p)\n         return result, params\n \n     def find_ordering_name(self, name, opts, alias=None, default_order='ASC',\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..3c019c7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -393,17 +393,20 @@ class SQLCompiler:\n         result = []\n         params = []\n         opts = self.query.get_meta()\n-        for name in self.query.distinct_fields:\n-            parts = name.split(LOOKUP_SEP)\n-            _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)\n-            targets, alias, _ = self.query.trim_joins(targets, joins, path)\n-            for target in targets:\n-                if name in self.query.annotation_select:\n-                    result.append(name)\n-                else:\n-                    r, p = self.compile(transform_function(target, alias))\n-                    result.append(r)\n-                    params.append(p)\n+        if self.query.combinator:\n+            result.append('*')\n+        else:\n+            for name in self.query.distinct_fields:\n+                parts = name.split(LOOKUP_SEP)\n+                _, targets, alias, joins, path, _, transform_function = self._setup_joins(parts, opts, None)\n+                targets, alias, _ = self.query.trim_joins(targets, joins, path)\n+                for target in targets:\n+                    if name in self.query.annotation_select:\n+                        result.append(name)\n+                    else:\n+                        r, p = self.compile(transform_function(target, alias))\n+                        result.append(r)\n+                        params.append(p)\n         return (result, params)\n     def find_ordering_name(self, name, opts, alias=None, default_order='ASC', already_seen=None):\n         name, order = get_order_dir(name, default_order)\n", "normalized_occurrence": 1}
