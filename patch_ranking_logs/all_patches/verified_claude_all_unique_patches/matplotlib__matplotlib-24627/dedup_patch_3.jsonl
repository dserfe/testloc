{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24627", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a477466..818f379 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -190,6 +190,18 @@ class Artist:\n         d['stale_callback'] = None\n         return d\n \n+    def _clear_container_refs(self):\n+        \"\"\"\n+        Clear references that this artist has to its container (figure, axes).\n+        \"\"\"\n+        if hasattr(self, 'axes') and self.axes:\n+            # remove from the mouse hit list\n+            self.axes._mouseover_set.discard(self)\n+            self.axes.stale = True\n+            self.axes = None  # decouple the artist from the Axes\n+        if self.figure:\n+            self.figure = None\n+\n     def remove(self):\n         \"\"\"\n         Remove the artist from the figure if possible.\n@@ -212,18 +224,7 @@ class Artist:\n             self._remove_method(self)\n             # clear stale callback\n             self.stale_callback = None\n-            _ax_flag = False\n-            if hasattr(self, 'axes') and self.axes:\n-                # remove from the mouse hit list\n-                self.axes._mouseover_set.discard(self)\n-                self.axes.stale = True\n-                self.axes = None  # decouple the artist from the Axes\n-                _ax_flag = True\n-\n-            if self.figure:\n-                self.figure = None\n-                if not _ax_flag:\n-                    self.figure = True\n+            self._clear_container_refs()\n \n         else:\n             raise NotImplementedError('cannot remove artist')\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a361ed7..ef969e1 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -107,20 +107,18 @@ class Artist:\n         d = self.__dict__.copy()\n         d['stale_callback'] = None\n         return d\n+    def _clear_container_refs(self):\n+        if hasattr(self, 'axes') and self.axes:\n+            self.axes._mouseover_set.discard(self)\n+            self.axes.stale = True\n+            self.axes = None\n+        if self.figure:\n+            self.figure = None\n     def remove(self):\n         if self._remove_method is not None:\n             self._remove_method(self)\n             self.stale_callback = None\n-            _ax_flag = False\n-            if hasattr(self, 'axes') and self.axes:\n-                self.axes._mouseover_set.discard(self)\n-                self.axes.stale = True\n-                self.axes = None\n-                _ax_flag = True\n-            if self.figure:\n-                self.figure = None\n-                if not _ax_flag:\n-                    self.figure = True\n+            self._clear_container_refs()\n         else:\n             raise NotImplementedError('cannot remove artist')\n     def have_units(self):\n", "normalized_occurrence": 1}
