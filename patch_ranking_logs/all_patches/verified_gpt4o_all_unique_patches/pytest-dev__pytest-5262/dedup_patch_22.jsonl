{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..e6f7a09 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -428,23 +428,21 @@ class EncodedFile(object):\n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n         self.encoding = encoding\n+        self._mode = 'r+'\n \n-    def write(self, obj):\n-        if isinstance(obj, six.text_type):\n-            obj = obj.encode(self.encoding, \"replace\")\n-        elif _PY3:\n-            raise TypeError(\n-                \"write() argument must be str, not {}\".format(type(obj).__name__)\n-            )\n-        self.buffer.write(obj)\n+    @property\n+    def mode(self):\n+        # EncodedFile should not advertise binary mode\n+        return \"r+\"\n \n     def writelines(self, linelist):\n         data = \"\".join(linelist)\n         self.write(data)\n \n     @property\n-    def name(self):\n-        \"\"\"Ensure that file.name is a string.\"\"\"\n+    def mode(self):\n+        \"\"\"Ensure the mode does not include binary flag.\"\"\"\n+        return self._mode\n         return repr(self.buffer)\n \n     def __getattr__(self, name):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..572ea6c 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -250,17 +250,16 @@ class EncodedFile(object):\n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n         self.encoding = encoding\n-    def write(self, obj):\n-        if isinstance(obj, six.text_type):\n-            obj = obj.encode(self.encoding, 'replace')\n-        elif _PY3:\n-            raise TypeError('write() argument must be str, not {}'.format(type(obj).__name__))\n-        self.buffer.write(obj)\n+        self._mode = 'r+'\n+    @property\n+    def mode(self):\n+        return 'r+'\n     def writelines(self, linelist):\n         data = ''.join(linelist)\n         self.write(data)\n     @property\n-    def name(self):\n+    def mode(self):\n+        return self._mode\n         return repr(self.buffer)\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, 'buffer'), name)\n", "normalized_occurrence": 1}
