{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..a5131fe 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,8 +707,8 @@ class _EvaluatorPrinter(object):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n-        from sympy.matrices import DeferredVector\n+        from sympy import Dummy, Symbol, Function, MatrixSymbol, flatten\n+        from sympy.matrices import DeferredVector, MatrixSymbol\n \n         dummify = self._dummify\n \n@@ -725,8 +725,11 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n-                argrep = self._argrepr(arg)\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n+                if isinstance(arg, MatrixSymbol):\n+                    argrep = self._argrepr(arg.name)\n+                else:\n+                    argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n@@ -744,12 +747,14 @@ class _EvaluatorPrinter(object):\n         return argstrs, expr\n \n     def _subexpr(self, expr, dummies_dict):\n-        from sympy.matrices import DeferredVector\n+        from sympy.matrices import DeferredVector, MatrixSymbol\n         from sympy import sympify\n \n         try:\n             expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n+            if isinstance(expr, MatrixSymbol):\n+                expr = expr.xreplace(dummies_dict)\n             if isinstance(expr, DeferredVector):\n                 pass\n             elif isinstance(expr, dict):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..19bb847 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -282,8 +282,8 @@ class _EvaluatorPrinter(object):\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n-        from sympy import Dummy, Symbol, Function, flatten\n-        from sympy.matrices import DeferredVector\n+        from sympy import Dummy, Symbol, Function, MatrixSymbol, flatten\n+        from sympy.matrices import DeferredVector, MatrixSymbol\n         dummify = self._dummify\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n@@ -294,8 +294,11 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n-                argrep = self._argrepr(arg)\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n+                if isinstance(arg, MatrixSymbol):\n+                    argrep = self._argrepr(arg.name)\n+                else:\n+                    argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n                     argstrs.append(self._argrepr(dummy))\n@@ -310,11 +313,13 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(str(arg))\n         return (argstrs, expr)\n     def _subexpr(self, expr, dummies_dict):\n-        from sympy.matrices import DeferredVector\n+        from sympy.matrices import DeferredVector, MatrixSymbol\n         from sympy import sympify\n         try:\n             expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n+            if isinstance(expr, MatrixSymbol):\n+                expr = expr.xreplace(dummies_dict)\n             if isinstance(expr, DeferredVector):\n                 pass\n             elif isinstance(expr, dict):\n", "normalized_occurrence": 1}
