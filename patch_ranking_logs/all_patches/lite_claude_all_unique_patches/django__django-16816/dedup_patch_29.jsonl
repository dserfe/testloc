{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..e3bd58e 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -787,6 +787,45 @@ class BaseModelAdminChecks:\n \n \n class ModelAdminChecks(BaseModelAdminChecks):\n+    def _check_list_display_fields(self, obj):\n+        \"\"\"Check that each field in list_display refers to a model field or method.\"\"\"\n+        if not isinstance(obj.list_display, (list, tuple)):\n+            return []\n+\n+        return list(\n+            chain.from_iterable(\n+                self._check_list_display_field_item(obj, field_name, \"list_display[%d]\" % index)\n+                for index, field_name in enumerate(obj.list_display)\n+            )\n+        )\n+\n+    def _check_list_display_field_item(self, obj, field_name, label):\n+        if callable(field_name):\n+            return []\n+        elif hasattr(obj, field_name):\n+            return []\n+        elif hasattr(obj.model, field_name):\n+            return []\n+        else:\n+            try:\n+                obj.model._meta.get_field(field_name)\n+            except FieldDoesNotExist:\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s'.\"\n+                        % (\n+                            label,\n+                            field_name,\n+                            obj.__class__.__name__,\n+                            obj.model._meta.label,\n+                        ),\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n+            return []\n+\n     def check(self, admin_obj, **kwargs):\n         return [\n             *super().check(admin_obj),\n@@ -794,6 +833,7 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             *self._check_save_on_top(admin_obj),\n             *self._check_inlines(admin_obj),\n             *self._check_list_display(admin_obj),\n+            *self._check_list_display_fields(admin_obj),\n             *self._check_list_display_links(admin_obj),\n             *self._check_list_filter(admin_obj),\n             *self._check_list_select_related(admin_obj),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..2275871 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -296,8 +296,25 @@ class BaseModelAdminChecks:\n             else:\n                 return []\n class ModelAdminChecks(BaseModelAdminChecks):\n+    def _check_list_display_fields(self, obj):\n+        if not isinstance(obj.list_display, (list, tuple)):\n+            return []\n+        return list(chain.from_iterable((self._check_list_display_field_item(obj, field_name, 'list_display[%d]' % index) for index, field_name in enumerate(obj.list_display))))\n+    def _check_list_display_field_item(self, obj, field_name, label):\n+        if callable(field_name):\n+            return []\n+        elif hasattr(obj, field_name):\n+            return []\n+        elif hasattr(obj.model, field_name):\n+            return []\n+        else:\n+            try:\n+                obj.model._meta.get_field(field_name)\n+            except FieldDoesNotExist:\n+                return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute of '%s'.\" % (label, field_name, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n+            return []\n     def check(self, admin_obj, **kwargs):\n-        return [*super().check(admin_obj), *self._check_save_as(admin_obj), *self._check_save_on_top(admin_obj), *self._check_inlines(admin_obj), *self._check_list_display(admin_obj), *self._check_list_display_links(admin_obj), *self._check_list_filter(admin_obj), *self._check_list_select_related(admin_obj), *self._check_list_per_page(admin_obj), *self._check_list_max_show_all(admin_obj), *self._check_list_editable(admin_obj), *self._check_search_fields(admin_obj), *self._check_date_hierarchy(admin_obj), *self._check_action_permission_methods(admin_obj), *self._check_actions_uniqueness(admin_obj)]\n+        return [*super().check(admin_obj), *self._check_save_as(admin_obj), *self._check_save_on_top(admin_obj), *self._check_inlines(admin_obj), *self._check_list_display(admin_obj), *self._check_list_display_fields(admin_obj), *self._check_list_display_links(admin_obj), *self._check_list_filter(admin_obj), *self._check_list_select_related(admin_obj), *self._check_list_per_page(admin_obj), *self._check_list_max_show_all(admin_obj), *self._check_list_editable(admin_obj), *self._check_search_fields(admin_obj), *self._check_date_hierarchy(admin_obj), *self._check_action_permission_methods(admin_obj), *self._check_actions_uniqueness(admin_obj)]\n     def _check_save_as(self, obj):\n         if not isinstance(obj.save_as, bool):\n             return must_be('a boolean', option='save_as', obj=obj, id='admin.E101')\n", "normalized_occurrence": 1}
