{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 515b944..098368f 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -23,7 +23,12 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value)\n+    except re.error:\n+        # Fallback to regex module for advanced patterns like \\p{Han}\n+        import regex\n+        return regex.compile(value)\n \n \n # pylint: disable=unused-argument\n", "occurrence": 3, "normalized_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex bdedcd7..b5f9ab0 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -11,7 +11,11 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, 'pattern'):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value)\n+    except re.error:\n+        import regex\n+        return regex.compile(value)\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n def _regexp_paths_csv_validator(_, name: str, value: str | list[Pattern[str]]) -> list[Pattern[str]]:\n", "normalized_occurrence": 3}
