{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..f0c2882 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -52,11 +53,14 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n-    if isinstance(data_to_wrap, pd.DataFrame):\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        data_to_wrap = data_to_wrap.to_frame() if isinstance(data_to_wrap, pd.Series) else data_to_wrap\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if isinstance(data_to_wrap, pd.Series):\n+            data_to_wrap = data_to_wrap.to_frame()\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..789271b 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,11 +12,14 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n         except Exception:\n             columns = None\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n-    if isinstance(data_to_wrap, pd.DataFrame):\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        data_to_wrap = data_to_wrap.to_frame() if isinstance(data_to_wrap, pd.Series) else data_to_wrap\n         if columns is not None:\n             data_to_wrap.columns = columns\n         if index is not None:\n             data_to_wrap.index = index\n+        if isinstance(data_to_wrap, pd.Series):\n+            data_to_wrap = data_to_wrap.to_frame()\n         return data_to_wrap\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n def _get_output_config(method, estimator=None):\n", "normalized_occurrence": 1}
