{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..e57704d 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,15 +130,22 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only available in certain Python versions.\n+        Must be explicitly set to True for module-level skips. Defaults to False.\n \n-    .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n-        to skip a doctest statically.\n+    For skipping individual tests conditionally, use the :ref:`pytest.mark.skipif ref`\n+    marker. For skipping an entire module that doesn't involve version-specific\n+    syntax, use ``pytestmark = pytest.mark.skip(reason=\"...\")``.\n+\n+    For skipping an entire module that contains version-specific syntax or imports,\n+    use this function with ``allow_module_level=True`` before any such imports::\n+\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # Version-specific imports or syntax below this line\n+        from package import feature_requiring_py38\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..7f29ddd 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,15 +88,22 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only available in certain Python versions.\n+        Must be explicitly set to True for module-level skips. Defaults to False.\n \n-    .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n-        to skip a doctest statically.\n+    For skipping individual tests conditionally, use the :ref:`pytest.mark.skipif ref`\n+    marker. For skipping an entire module that doesn't involve version-specific\n+    syntax, use ``pytestmark = pytest.mark.skip(reason=\"...\")``.\n+\n+    For skipping an entire module that contains version-specific syntax or imports,\n+    use this function with ``allow_module_level=True`` before any such imports::\n+\n+        if sys.version_info < (3, 8):\n+            pytest.skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # Version-specific imports or syntax below this line\n+        from package import feature_requiring_py38\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "normalized_occurrence": 1}
