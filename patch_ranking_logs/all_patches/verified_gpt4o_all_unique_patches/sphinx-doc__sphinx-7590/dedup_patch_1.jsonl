{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..02ada61 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4602,6 +4602,7 @@ class Symbol:\n         return ''.join(res)\n \n \n+user_defined_literal_re = re.compile(r\"\"\"([0-9]+[.]?[0-9]*|[.]?[0-9]+)([eE][-+]?[0-9]+)?([a-zA-Z_]\\w*)\"\"\")\n class DefinitionParser(BaseParser):\n     # those without signedness and size modifiers\n     # see https://en.cppreference.com/w/cpp/language/types\n@@ -4652,7 +4653,9 @@ class DefinitionParser(BaseParser):\n         #  | pointer-literal -> \"nullptr\"\n         #  | user-defined-literal\n         self.skip_ws()\n-        if self.skip_word('nullptr'):\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n+        elif self.skip_word('nullptr'):\n             return ASTPointerLiteral()\n         if self.skip_word('true'):\n             return ASTBooleanLiteral(True)\n@@ -4682,7 +4685,9 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        if self.match(user_defined_literal_re):\n+            literal = self.matched_text\n+            return ASTUserDefinedLiteral(literal)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..888c16a 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3018,6 +3018,7 @@ class Symbol:\n         for c in self._children:\n             res.append(c.dump(indent + 1))\n         return ''.join(res)\n+user_defined_literal_re = re.compile('([0-9]+[.]?[0-9]*|[.]?[0-9]+)([eE][-+]?[0-9]+)?([a-zA-Z_]\\\\w*)')\n class DefinitionParser(BaseParser):\n     _simple_fundemental_types = ('void', 'bool', 'char', 'wchar_t', 'char16_t', 'char32_t', 'int', 'float', 'double', 'auto')\n     _prefix_keys = ('class', 'struct', 'enum', 'union', 'typename')\n@@ -3050,7 +3051,9 @@ class DefinitionParser(BaseParser):\n         return self.definition[startPos:self.pos]\n     def _parse_literal(self) -> ASTLiteral:\n         self.skip_ws()\n-        if self.skip_word('nullptr'):\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n+        elif self.skip_word('nullptr'):\n             return ASTPointerLiteral()\n         if self.skip_word('true'):\n             return ASTBooleanLiteral(True)\n@@ -3074,6 +3077,9 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            literal = self.matched_text\n+            return ASTUserDefinedLiteral(literal)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
