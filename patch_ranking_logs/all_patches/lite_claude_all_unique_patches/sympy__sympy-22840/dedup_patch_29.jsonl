{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..acc3e0c 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -832,16 +832,18 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     # Get the matrices back\n     for i, e in enumerate(exprs):\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n-            reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n-            if isinstance(e, ImmutableMatrix):\n-                reduced_exprs[i] = reduced_exprs[i].as_immutable()\n+            if not any(isinstance(expr, MatrixSymbol) for expr in reduced_exprs[i].free_symbols):\n+                reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n+                if isinstance(e, ImmutableMatrix):\n+                    reduced_exprs[i] = reduced_exprs[i].as_immutable()\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n-            m = SparseMatrix(e.rows, e.cols, {})\n-            for k, v in reduced_exprs[i]:\n-                m[k] = v\n-            if isinstance(e, ImmutableSparseMatrix):\n-                m = m.as_immutable()\n-            reduced_exprs[i] = m\n+            if not any(isinstance(expr, MatrixSymbol) for expr in reduced_exprs[i].free_symbols):\n+                m = SparseMatrix(e.rows, e.cols, {})\n+                for k, v in reduced_exprs[i]:\n+                    m[k] = v\n+                if isinstance(e, ImmutableSparseMatrix):\n+                    m = m.as_immutable()\n+                reduced_exprs[i] = m\n \n     if postprocess is None:\n         return replacements, reduced_exprs\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..51c22a5 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -339,16 +339,18 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n     reduced_exprs = [postprocess_for_cse(e, optimizations) for e in reduced_exprs]\n     for i, e in enumerate(exprs):\n         if isinstance(e, (Matrix, ImmutableMatrix)):\n-            reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n-            if isinstance(e, ImmutableMatrix):\n-                reduced_exprs[i] = reduced_exprs[i].as_immutable()\n+            if not any((isinstance(expr, MatrixSymbol) for expr in reduced_exprs[i].free_symbols)):\n+                reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n+                if isinstance(e, ImmutableMatrix):\n+                    reduced_exprs[i] = reduced_exprs[i].as_immutable()\n         elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n-            m = SparseMatrix(e.rows, e.cols, {})\n-            for k, v in reduced_exprs[i]:\n-                m[k] = v\n-            if isinstance(e, ImmutableSparseMatrix):\n-                m = m.as_immutable()\n-            reduced_exprs[i] = m\n+            if not any((isinstance(expr, MatrixSymbol) for expr in reduced_exprs[i].free_symbols)):\n+                m = SparseMatrix(e.rows, e.cols, {})\n+                for k, v in reduced_exprs[i]:\n+                    m[k] = v\n+                if isinstance(e, ImmutableSparseMatrix):\n+                    m = m.as_immutable()\n+                reduced_exprs[i] = m\n     if postprocess is None:\n         return (replacements, reduced_exprs)\n     return postprocess(replacements, reduced_exprs)\n", "normalized_occurrence": 1}
