diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index f363a30..0059552 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -124,21 +124,29 @@ def dmp_trial_division(f, factors, u, K):
 
 
 def dup_zz_mignotte_bound(f, K):
-    """Mignotte bound for univariate polynomials in `K[x]`. """
+    """Knuth-Cohen bound for univariate polynomials in `K[x]`.
+    
+    This provides a tighter bound than the classical Mignotte bound.
+    """
     a = dup_max_norm(f, K)
     b = abs(dup_LC(f, K))
     n = dup_degree(f)
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    
+    return K(2) * b * sum(abs(K(dup_LC(f, K))) / b * K.sqrt(K.factorial(n)/(K.factorial(i) * K.factorial(n-i))) for i in range(n+1))
 
 
 def dmp_zz_mignotte_bound(f, u, K):
-    """Mignotte bound for multivariate polynomials in `K[X]`. """
+    """Knuth-Cohen bound for multivariate polynomials in `K[X]`.
+    
+    This provides a tighter bound than the classical Mignotte bound.
+    Extended for the multivariate case.
+    """
     a = dmp_max_norm(f, u, K)
     b = abs(dmp_ground_LC(f, u, K))
     n = sum(dmp_degree_list(f, u))
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    
+    # Apply Knuth-Cohen bound considering all variables
+    return K(2) * b * sum(abs(K(dmp_ground_LC(f, u, K))) / b * K.sqrt(K.factorial(n)/(K.factorial(i) * K.factorial(n-i))) for i in range(n+1))
 
 
 def dup_zz_hensel_step(m, f, g, h, s, t, K):
