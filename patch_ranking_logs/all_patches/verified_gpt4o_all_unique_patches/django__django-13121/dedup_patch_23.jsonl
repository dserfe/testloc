{"model_name_or_path": "agentless", "instance_id": "django__django-13121", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 0403e91..b13b111 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -580,7 +580,10 @@ class BaseDatabaseOperations:\n \n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            try:\n+                return datetime.timedelta(microseconds=int(value))\n+            except (ValueError, decimal.InvalidOperation):\n+                raise ValueError(\"Invalid value for DurationField: %s\" % value)\n \n     def check_expression_support(self, expression):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex f21ab48..68ee864 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -194,7 +194,10 @@ class BaseDatabaseOperations:\n         return []\n     def convert_durationfield_value(self, value, expression, connection):\n         if value is not None:\n-            return datetime.timedelta(0, 0, value)\n+            try:\n+                return datetime.timedelta(microseconds=int(value))\n+            except (ValueError, decimal.InvalidOperation):\n+                raise ValueError('Invalid value for DurationField: %s' % value)\n     def check_expression_support(self, expression):\n         pass\n     def conditional_expression_supported_in_where_clause(self, expression):\n", "normalized_occurrence": 1}
