{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 709d8ae..9ec4339 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -235,6 +235,17 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n \n         constraints = list(model._meta.constraints)\n \n+        def _unqualify_check_constraint(constraint):\n+            if isinstance(constraint, models.CheckConstraint):\n+                # Get the check SQL and remove table qualifications\n+                check_sql = constraint._get_check_sql(model, self)\n+                check_sql = re.sub(r'\"[^\"]+\"\\.\"([^\"]+)\"', r'\"\\1\"', check_sql)\n+                check_sql = re.sub(r'\"new__[^\"]+\"\\.\"([^\"]+)\"', r'\"\\1\"', check_sql)\n+                return models.CheckConstraint(check=models.Q(), name=constraint.name)\n+            return constraint\n+\n+        constraints = [_unqualify_check_constraint(c) for c in constraints]\n+\n         # Provide isolated instances of the fields to the new model body so\n         # that the existing model's internals aren't interfered with when\n         # the dummy model is constructed.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 740cb94..f8dc876 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -126,6 +126,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if delete_field:\n             indexes = [index for index in indexes if delete_field.name not in index.fields]\n         constraints = list(model._meta.constraints)\n+        def _unqualify_check_constraint(constraint):\n+            if isinstance(constraint, models.CheckConstraint):\n+                check_sql = constraint._get_check_sql(model, self)\n+                check_sql = re.sub('\"[^\"]+\"\\\\.\"([^\"]+)\"', '\"\\\\1\"', check_sql)\n+                check_sql = re.sub('\"new__[^\"]+\"\\\\.\"([^\"]+)\"', '\"\\\\1\"', check_sql)\n+                return models.CheckConstraint(check=models.Q(), name=constraint.name)\n+            return constraint\n+        constraints = [_unqualify_check_constraint(c) for c in constraints]\n         body_copy = copy.deepcopy(body)\n         meta_contents = {'app_label': model._meta.app_label, 'db_table': model._meta.db_table, 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n", "normalized_occurrence": 1}
