{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..13c1431 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,48 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n+            text = node.astext()\n+            if len(text) == 1 and text in '-+^':\n+                # Single character that's normally a separator - treat as literal\n+                self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            else:\n+                # Handle compound keystrokes\n+                parts = []\n+                current = ''\n+                in_stroke = False\n+                \n+                # Parse the text character by character\n+                for i, char in enumerate(text):\n+                    if char in '-+^' and current and not in_stroke:\n+                        # It's a separator\n+                        if current:\n+                            parts.append(current)\n+                            current = ''\n+                        parts.append(char)\n+                    else:\n+                        if char == '[':\n+                            in_stroke = True\n+                        elif char == ']':\n+                            in_stroke = False\n+                        current += char\n+                \n+                if current:\n+                    parts.append(current)\n+                \n+                # Output the parsed keystrokes\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                           CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..6285247 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,48 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n+            text = node.astext()\n+            if len(text) == 1 and text in '-+^':\n+                # Single character that's normally a separator - treat as literal\n+                self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            else:\n+                # Handle compound keystrokes\n+                parts = []\n+                current = ''\n+                in_stroke = False\n+                \n+                # Parse the text character by character\n+                for i, char in enumerate(text):\n+                    if char in '-+^' and current and not in_stroke:\n+                        # It's a separator\n+                        if current:\n+                            parts.append(current)\n+                            current = ''\n+                        parts.append(char)\n+                    else:\n+                        if char == '[':\n+                            in_stroke = True\n+                        elif char == ']':\n+                            in_stroke = False\n+                        current += char\n+                \n+                if current:\n+                    parts.append(current)\n+                \n+                # Output the parsed keystrokes\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                           CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..56f2965 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -324,7 +324,38 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if len(text) == 1 and text in '-+^':\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            else:\n+                parts = []\n+                current = ''\n+                in_stroke = False\n+                for i, char in enumerate(text):\n+                    if char in '-+^' and current and (not in_stroke):\n+                        if current:\n+                            parts.append(current)\n+                            current = ''\n+                        parts.append(char)\n+                    else:\n+                        if char == '[':\n+                            in_stroke = True\n+                        elif char == ']':\n+                            in_stroke = False\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..a143691 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -297,7 +297,38 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if len(text) == 1 and text in '-+^':\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            else:\n+                parts = []\n+                current = ''\n+                in_stroke = False\n+                for i, char in enumerate(text):\n+                    if char in '-+^' and current and (not in_stroke):\n+                        if current:\n+                            parts.append(current)\n+                            current = ''\n+                        parts.append(char)\n+                    else:\n+                        if char == '[':\n+                            in_stroke = True\n+                        elif char == ']':\n+                            in_stroke = False\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in '-+^':\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                        self.body.append(part)\n+                        self.body.append('</kbd>')\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
