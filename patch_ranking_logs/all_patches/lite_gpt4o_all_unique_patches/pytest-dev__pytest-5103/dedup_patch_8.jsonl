{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..42f1ebe 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -963,8 +963,38 @@ warn_explicit(\n         explanation = \"(%s %s %s)\" % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n-\n+    \n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            iterable = call.args[0]\n+            if isinstance(iterable, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+                # Handle generator expression, list comprehension, and set comprehension\n+                elt = iterable.elt\n+                generators = iterable.generators\n+                test_func = call.func.id\n+                statements = []\n+                failure_statements = []\n+                for generator in generators:\n+                    target = generator.target\n+                    iter_ = generator.iter\n+                    iter_name = self.variable()\n+                    statements.append(ast.Assign([ast.Name(iter_name, ast.Store())], iter_))\n+                    loop = ast.For(target, ast.Name(iter_name, ast.Load()), [], [])\n+                    self.statements, self.on_failure = [], []\n+                    res, expl = self.visit(elt)\n+                    if test_func == \"all\":\n+                        condition = res\n+                        negated_condition = ast.UnaryOp(ast.Not(), res)\n+                    else:  # test_func == \"any\"\n+                        condition = ast.UnaryOp(ast.Not(), res)\n+                        negated_condition = res\n+                    self.statements.append(ast.If(condition, [], self.on_failure))\n+                    self.on_failure.append(ast.Raise(ast.Call(ast.Name(\"AssertionError\", ast.Load()), [ast.Str(expl)], []), None, None))\n+                    loop.body.extend(self.statements)\n+                    failure_statements.append(ast.If(negated_condition, self.on_failure, []))\n+                    statements.append(loop)\n+                self.statements = statements\n+                return None, \"\"\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1111,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..2b817da 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,36 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            iterable = call.args[0]\n+            if isinstance(iterable, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+                elt = iterable.elt\n+                generators = iterable.generators\n+                test_func = call.func.id\n+                statements = []\n+                failure_statements = []\n+                for generator in generators:\n+                    target = generator.target\n+                    iter_ = generator.iter\n+                    iter_name = self.variable()\n+                    statements.append(ast.Assign([ast.Name(iter_name, ast.Store())], iter_))\n+                    loop = ast.For(target, ast.Name(iter_name, ast.Load()), [], [])\n+                    self.statements, self.on_failure = ([], [])\n+                    res, expl = self.visit(elt)\n+                    if test_func == 'all':\n+                        condition = res\n+                        negated_condition = ast.UnaryOp(ast.Not(), res)\n+                    else:\n+                        condition = ast.UnaryOp(ast.Not(), res)\n+                        negated_condition = res\n+                    self.statements.append(ast.If(condition, [], self.on_failure))\n+                    self.on_failure.append(ast.Raise(ast.Call(ast.Name('AssertionError', ast.Load()), [ast.Str(expl)], []), None, None))\n+                    loop.body.extend(self.statements)\n+                    failure_statements.append(ast.If(negated_condition, self.on_failure, []))\n+                    statements.append(loop)\n+                self.statements = statements\n+                return (None, '')\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
