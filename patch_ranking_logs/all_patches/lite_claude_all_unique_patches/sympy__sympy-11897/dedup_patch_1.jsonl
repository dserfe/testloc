{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..0b54166 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,10 +356,24 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        \n+        # Handle only actual fractions, not negative exponents\n+        if expr.is_Mul:\n+            numer = []\n+            denom = []\n+            for arg in expr.args:\n+                if (arg.is_Pow and arg.exp.is_Rational and arg.exp.is_negative \n+                    and arg.base.is_Atom):\n+                    denom.append(Pow(arg.base, -arg.exp))\n+                elif arg.is_Rational and arg.q != 1:\n+                    numer.append(Rational(arg.p))\n+                    denom.append(Rational(arg.q)) \n+                else:\n+                    numer.append(arg)\n+            numer = Mul(*numer)\n+            denom = Mul(*denom) if denom else S.One\n \n         def convert(expr):\n             if not expr.is_Mul:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..017143d 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,10 +165,21 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        if expr.is_Mul:\n+            numer = []\n+            denom = []\n+            for arg in expr.args:\n+                if arg.is_Pow and arg.exp.is_Rational and arg.exp.is_negative and arg.base.is_Atom:\n+                    denom.append(Pow(arg.base, -arg.exp))\n+                elif arg.is_Rational and arg.q != 1:\n+                    numer.append(Rational(arg.p))\n+                    denom.append(Rational(arg.q))\n+                else:\n+                    numer.append(arg)\n+            numer = Mul(*numer)\n+            denom = Mul(*denom) if denom else S.One\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n", "normalized_occurrence": 1}
