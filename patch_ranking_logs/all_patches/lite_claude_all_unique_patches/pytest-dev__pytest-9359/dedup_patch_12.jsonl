{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..6a33377 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -954,10 +954,14 @@ class AssertionRewriter(ast.NodeVisitor):\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n-        # Fix locations (line numbers/column offsets).\n+        # Fix locations (line numbers/column offsets) for the assertion-related nodes\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and isinstance(stmt.test, ast.UnaryOp):\n+                # Only copy location for the main assertion test and its direct components\n+                ast.copy_location(stmt, assert_)\n+                ast.copy_location(stmt.test, assert_)\n+                if hasattr(stmt.test, 'operand'):\n+                    ast.copy_location(stmt.test.operand, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..5ba0b21 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -513,8 +513,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and isinstance(stmt.test, ast.UnaryOp):\n+                ast.copy_location(stmt, assert_)\n+                ast.copy_location(stmt.test, assert_)\n+                if hasattr(stmt.test, 'operand'):\n+                    ast.copy_location(stmt.test.operand, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
