{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..8403ada 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,38 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n-    n = dup_degree(f)\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    This implements the Knuth-Cohen bound which provides a tighter bound\n+    compared to the classical Mignotte bound.\n+    \"\"\"\n+    n = dup_degree(f)\n+    lc = abs(dup_LC(f, K))\n+    \n+    # Calculate sum of |ai|/(2^i) for i from 0 to n-1\n+    bound_sum = sum(abs(c)/(2**i) for i, c in enumerate(f[1:]))\n+    \n+    return K(2 * lc * bound_sum)\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This implements a multivariate extension of the Knuth-Cohen bound,\n+    which provides a tighter bound compared to the classical Mignotte bound.\n+    \"\"\"\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n+        \n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    \n+    # For multivariate case, we compute a normalized sum of coefficients\n+    # considering the total degree\n+    coeffs = dmp_coeffs(f, u)\n+    bound_sum = sum(abs(c)/(2**i) for i, c in enumerate(coeffs[1:]))\n+    \n+    return K(2 * lc * bound_sum)\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..28f5a43 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,18 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dup_LC(f, K))\n+    bound_sum = sum((abs(c) / 2 ** i for i, c in enumerate(f[1:])))\n+    return K(2 * lc * bound_sum)\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    coeffs = dmp_coeffs(f, u)\n+    bound_sum = sum((abs(c) / 2 ** i for i, c in enumerate(coeffs[1:])))\n+    return K(2 * lc * bound_sum)\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
