{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14053", "model_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 8644d61..d481f30 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -890,9 +890,11 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        if not all(i >= 0 and i < len(feature_names) for i in tree_.feature if i != _tree.TREE_UNDEFINED):\n+            raise ValueError(\"Some features are out of bounds. Feature indices must be in [0, %d]\" % (len(feature_names) - 1))\n+        feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED else None for i in tree_.feature]\n     else:\n-        feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n+        feature_names_ = [\"feature_{}\".format(i) if i != _tree.TREE_UNDEFINED else None for i in tree_.feature]\n \n     export_text.report = \"\"\n \n@@ -954,4 +956,4 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n                                                             trunc_report)\n \n     print_tree_recurse(0, 1)\n-    return export_text.report\n+    return export_text.report\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex bcf8cf4..44d60ff 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -346,9 +346,11 @@ def export_text(decision_tree, feature_names=None, max_depth=10, spacing=3, deci\n     else:\n         value_fmt = '{}{} value: {}\\n'\n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        if not all((i >= 0 and i < len(feature_names) for i in tree_.feature if i != _tree.TREE_UNDEFINED)):\n+            raise ValueError('Some features are out of bounds. Feature indices must be in [0, %d]' % (len(feature_names) - 1))\n+        feature_names_ = [feature_names[i] if i != _tree.TREE_UNDEFINED else None for i in tree_.feature]\n     else:\n-        feature_names_ = ['feature_{}'.format(i) for i in tree_.feature]\n+        feature_names_ = ['feature_{}'.format(i) if i != _tree.TREE_UNDEFINED else None for i in tree_.feature]\n     export_text.report = ''\n     def _add_leaf(value, class_name, indent):\n         val = ''\n", "normalized_occurrence": 1}
