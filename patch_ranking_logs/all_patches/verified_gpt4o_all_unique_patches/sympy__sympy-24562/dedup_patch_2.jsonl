{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..0cfb984 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1603,8 +1603,17 @@ class Rational(Number):\n                     except (SympifyError, SyntaxError):\n                         pass  # error will raise below\n                 else:\n-                    if p.count('/') > 1:\n+                    if '/' in p:\n                         raise TypeError('invalid input: %s' % p)\n+                    try:\n+                        p = int(p)\n+                    except ValueError:\n+                        raise TypeError('invalid input: %s' % p)\n+                if q is not None and isinstance(q, str):\n+                    try:\n+                        q = int(q)\n+                    except ValueError:\n+                        raise TypeError('invalid input: %s' % q)\n                     p = p.replace(' ', '')\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..444947f 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1389,8 +1389,17 @@ class Rational(Number):\n                     except (SympifyError, SyntaxError):\n                         pass\n                 else:\n-                    if p.count('/') > 1:\n+                    if '/' in p:\n                         raise TypeError('invalid input: %s' % p)\n+                    try:\n+                        p = int(p)\n+                    except ValueError:\n+                        raise TypeError('invalid input: %s' % p)\n+                if q is not None and isinstance(q, str):\n+                    try:\n+                        q = int(q)\n+                    except ValueError:\n+                        raise TypeError('invalid input: %s' % q)\n                     p = p.replace(' ', '')\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n", "normalized_occurrence": 1}
