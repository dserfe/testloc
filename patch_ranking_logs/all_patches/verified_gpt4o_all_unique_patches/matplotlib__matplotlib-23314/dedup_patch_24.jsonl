{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23314", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex f43c36a..ff1d20b 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3015,6 +3015,24 @@ class _AxesBase(martist.Artist):\n \n     # Drawing\n     @martist.allow_rasterization\n+    def set_visible(self, visible):\n+        \"\"\"\n+        Set the visibility of the axes.\n+\n+        Parameters\n+        ----------\n+        visible : bool\n+            Visibility state.\n+        \"\"\"\n+        super().set_visible(visible)\n+        for spine in self.spines.values():\n+            spine.set_visible(visible)\n+        if hasattr(self, 'patch'):\n+            self.patch.set_visible(visible)\n+        for child in self.get_children():\n+            if child is not self.patch:\n+                child.set_visible(visible)\n+\n     def draw(self, renderer):\n         # docstring inherited\n         if renderer is None:\n@@ -4608,4 +4626,4 @@ class _AxesBase(martist.Artist):\n \n     def get_shared_y_axes(self):\n         \"\"\"Return an immutable view on the shared y-axes Grouper.\"\"\"\n-        return cbook.GrouperView(self._shared_axes[\"y\"])\n+        return cbook.GrouperView(self._shared_axes[\"y\"])\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex d0b0d73..f2cd439 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1265,6 +1265,15 @@ class _AxesBase(martist.Artist):\n             x, _ = title.get_position()\n             title.set_position((x, ymax))\n     @martist.allow_rasterization\n+    def set_visible(self, visible):\n+        super().set_visible(visible)\n+        for spine in self.spines.values():\n+            spine.set_visible(visible)\n+        if hasattr(self, 'patch'):\n+            self.patch.set_visible(visible)\n+        for child in self.get_children():\n+            if child is not self.patch:\n+                child.set_visible(visible)\n     def draw(self, renderer):\n         if renderer is None:\n             raise RuntimeError('No renderer defined')\n", "normalized_occurrence": 1}
