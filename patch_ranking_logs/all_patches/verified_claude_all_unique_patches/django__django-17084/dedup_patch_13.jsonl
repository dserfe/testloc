{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a6c5dd7..ac81e95 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -77,16 +77,17 @@ class Aggregate(Func):\n             # returning self.filter and including that in this loop.\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate or getattr(expr, 'is_window_function', False):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = (\n                         before_resolved.name\n                         if hasattr(before_resolved, \"name\")\n                         else repr(before_resolved)\n                     )\n+                    error_type = 'an aggregate' if expr.contains_aggregate else 'a window function'\n                     raise FieldError(\n-                        \"Cannot compute %s('%s'): '%s' is an aggregate\"\n-                        % (c.name, name, name)\n+                        \"Cannot compute %s('%s'): '%s' is %s\"\n+                        % (c.name, name, name, error_type)\n                     )\n         if (default := c.default) is None:\n             return c\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex e18ccd1..20f023b 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -41,10 +41,11 @@ class Aggregate(Func):\n         elif not self.is_summary:\n             expressions = super(Aggregate, c).get_source_expressions()\n             for index, expr in enumerate(expressions):\n-                if expr.contains_aggregate:\n+                if expr.contains_aggregate or getattr(expr, 'is_window_function', False):\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n-                    raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n+                    error_type = 'an aggregate' if expr.contains_aggregate else 'a window function'\n+                    raise FieldError(\"Cannot compute %s('%s'): '%s' is %s\" % (c.name, name, name, error_type))\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, 'resolve_expression'):\n", "normalized_occurrence": 6}
