{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..1319afb 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,7 +964,38 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n+    def _rewrite_all_any(self, call, is_all):\n+        \"\"\"Rewrite all/any calls to show detailed assertion information.\"\"\"\n+        gen = call.args[0]\n+        if not isinstance(gen, (ast.GeneratorExp, ast.ListComp, ast.SetComp, ast.DictComp)):\n+            return self.generic_visit(call)\n+\n+        elements = []\n+        for elt in gen.elt.elts if isinstance(gen, ast.ListComp) else [gen.elt]:\n+            res, expl = self.visit(elt)\n+            elements.append((res, expl))\n+\n+        result_var = self.variable()\n+        iter_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], call))\n+        self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], self.assign(gen)))\n+\n+        fail_body = []\n+        for res, expl in elements:\n+            fail_body.append(ast.If(ast.UnaryOp(ast.Not(), res) if is_all else res, [\n+                ast.Raise(ast.Call(ast.Name(\"AssertionError\", ast.Load()), [\n+                    ast.BinOp(ast.Str(\"assert {}(%s)\\n\").format(\"all\" if is_all else \"any\"), ast.Mod(), ast.Str(expl))\n+                ], []), None)\n+            ], []))\n+\n+        self.statements.append(ast.For(\n+            target=ast.Name(self.variable(), ast.Store()),\n+            iter=ast.Name(iter_var, ast.Load()),\n+            body=fail_body,\n+            orelse=[]\n+        ))\n+\n+        return ast.Name(result_var, ast.Load()), self.explanation_param(self.display(ast.Name(result_var, ast.Load())))\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1112,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..97700ee 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,7 +543,23 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n+    def _rewrite_all_any(self, call, is_all):\n+        gen = call.args[0]\n+        if not isinstance(gen, (ast.GeneratorExp, ast.ListComp, ast.SetComp, ast.DictComp)):\n+            return self.generic_visit(call)\n+        elements = []\n+        for elt in gen.elt.elts if isinstance(gen, ast.ListComp) else [gen.elt]:\n+            res, expl = self.visit(elt)\n+            elements.append((res, expl))\n+        result_var = self.variable()\n+        iter_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], call))\n+        self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], self.assign(gen)))\n+        fail_body = []\n+        for res, expl in elements:\n+            fail_body.append(ast.If(ast.UnaryOp(ast.Not(), res) if is_all else res, [ast.Raise(ast.Call(ast.Name('AssertionError', ast.Load()), [ast.BinOp(ast.Str('assert {}(%s)\\n').format('all' if is_all else 'any'), ast.Mod(), ast.Str(expl))], []), None)], []))\n+        self.statements.append(ast.For(target=ast.Name(self.variable(), ast.Store()), iter=ast.Name(iter_var, ast.Load()), body=fail_body, orelse=[]))\n+        return (ast.Name(result_var, ast.Load()), self.explanation_param(self.display(ast.Name(result_var, ast.Load()))))\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
