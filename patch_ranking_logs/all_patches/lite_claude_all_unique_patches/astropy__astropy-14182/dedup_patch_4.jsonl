{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..5121091 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,16 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        border = lines[1]\n+        # If we have header_rows, we need an additional border after them\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            header_end = 2 + len(self.header_rows)  # header border + header rows\n+            lines = [border] + lines[1:header_end] + [border] + lines[header_end:] + [border]\n+        else:\n+            lines = [border] + lines + [border]\n+        return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..179e763 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,9 +18,14 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        border = lines[1]\n+        if hasattr(self, 'header_rows') and self.header_rows:\n+            header_end = 2 + len(self.header_rows)\n+            lines = [border] + lines[1:header_end] + [border] + lines[header_end:] + [border]\n+        else:\n+            lines = [border] + lines + [border]\n         return lines\n\\ No newline at end of file\n", "normalized_occurrence": 1}
