{"model_name_or_path": "agentless", "instance_id": "psf__requests-2931", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 85fd980..f3d9be2 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -399,7 +399,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            self.headers = CaseInsensitiveDict(\n+                (name if isinstance(name, bytes) else to_native_string(name),\n+                 value if isinstance(value, bytes) else to_native_string(value))\n+                for name, value in headers.items()\n+            )\n         else:\n             self.headers = CaseInsensitiveDict()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 1874285..c4b8b61 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -209,7 +209,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.url = url\n     def prepare_headers(self, headers):\n         if headers:\n-            self.headers = CaseInsensitiveDict(((to_native_string(name), value) for name, value in headers.items()))\n+            self.headers = CaseInsensitiveDict(((name if isinstance(name, bytes) else to_native_string(name), value if isinstance(value, bytes) else to_native_string(value)) for name, value in headers.items()))\n         else:\n             self.headers = CaseInsensitiveDict()\n     def prepare_body(self, data, files, json=None):\n", "normalized_occurrence": 1}
