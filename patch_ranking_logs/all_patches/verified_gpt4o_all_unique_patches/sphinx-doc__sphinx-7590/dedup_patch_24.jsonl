{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..af93c59 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -782,6 +782,9 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n \n \n+# User-defined literals regex\n+user_defined_literal_re = re.compile(r'(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?[a-zA-Z_]\\w*')\n+\n # Primary expressions\n ################################################################################\n \n@@ -789,6 +792,21 @@ class ASTLiteral(ASTExpression):\n     pass\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str) -> None:\n+        self.literal = literal\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.literal\n+\n+    def get_id(self, version: int) -> str:\n+        return 'L%sE' % self.literal\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_name(self.literal, self.literal)\n+\n+\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -4659,7 +4677,7 @@ class DefinitionParser(BaseParser):\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n         for regex in [float_literal_re, binary_literal_re, hex_literal_re,\n-                      integer_literal_re, octal_literal_re]:\n+                      integer_literal_re, octal_literal_re, user_defined_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n                 while self.current_char in 'uUlLfF':\n@@ -4682,7 +4700,10 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.match(user_defined_literal_re):\n+            literal = self.last_match.group()\n+            return ASTUserDefinedLiteral(literal)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..1069587 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -219,8 +219,18 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         raise NotImplementedError(repr(self))\n+user_defined_literal_re = re.compile('(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?[a-zA-Z_]\\\\w*')\n class ASTLiteral(ASTExpression):\n     pass\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, literal: str) -> None:\n+        self.literal = literal\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.literal\n+    def get_id(self, version: int) -> str:\n+        return 'L%sE' % self.literal\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += addnodes.desc_name(self.literal, self.literal)\n class ASTPointerLiteral(ASTLiteral):\n     def _stringify(self, transform: StringifyTransform) -> str:\n         return 'nullptr'\n@@ -3056,7 +3066,7 @@ class DefinitionParser(BaseParser):\n             return ASTBooleanLiteral(True)\n         if self.skip_word('false'):\n             return ASTBooleanLiteral(False)\n-        for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re]:\n+        for regex in [float_literal_re, binary_literal_re, hex_literal_re, integer_literal_re, octal_literal_re, user_defined_literal_re]:\n             pos = self.pos\n             if self.match(regex):\n                 while self.current_char in 'uUlLfF':\n@@ -3074,6 +3084,9 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            literal = self.last_match.group()\n+            return ASTUserDefinedLiteral(literal)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
