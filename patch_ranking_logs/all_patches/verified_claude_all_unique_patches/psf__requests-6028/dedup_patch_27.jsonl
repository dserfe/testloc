{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..e0d727d 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -384,7 +384,16 @@ class HTTPAdapter(BaseAdapter):\n         :rtype: dict\n         \"\"\"\n         headers = {}\n+        \n+        # First try to get auth from the url\n         username, password = get_auth_from_url(proxy)\n+        \n+        # If no auth found in URL, check if proxy is a dict with auth\n+        if not username and isinstance(proxy, dict):\n+            proxy_auth = proxy.get('auth')\n+            if proxy_auth:\n+                if isinstance(proxy_auth, tuple) and len(proxy_auth) == 2:\n+                    username, password = proxy_auth\n \n         if username:\n             headers['Proxy-Authorization'] = _basic_auth_str(username,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..9fa8266 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -156,6 +156,11 @@ class HTTPAdapter(BaseAdapter):\n     def proxy_headers(self, proxy):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n+        if not username and isinstance(proxy, dict):\n+            proxy_auth = proxy.get('auth')\n+            if proxy_auth:\n+                if isinstance(proxy_auth, tuple) and len(proxy_auth) == 2:\n+                    username, password = proxy_auth\n         if username:\n             headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n         return headers\n", "normalized_occurrence": 1}
