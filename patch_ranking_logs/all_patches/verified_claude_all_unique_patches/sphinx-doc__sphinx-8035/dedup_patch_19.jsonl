{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8035", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d3cef15..a430596 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -74,7 +74,7 @@ SLOTSATTR = object()\n \n \n def members_option(arg: Any) -> Union[object, List[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :members: and :private-members: options to auto directives.\"\"\"\n     if arg is None or arg is True:\n         return ALL\n     return [x.strip() for x in arg.split(',') if x.strip()]\n@@ -562,8 +562,8 @@ class Documenter:\n \n         Members are skipped if\n \n-        - they are private (except if given explicitly or the private-members\n-          option is set)\n+        - they are private (except if given explicitly or listed in private-members\n+          option)\n         - they are special methods (except if given explicitly or the\n           special-members option is set)\n         - they are undocumented (except if the undoc-members option is set)\n@@ -656,8 +656,11 @@ class Documenter:\n                 isattr = True\n             elif want_all and isprivate:\n                 # ignore members whose name starts with _ by default\n-                keep = self.options.private_members and \\\n-                    (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, (list, set)):\n+                    keep = membername in self.options.private_members\n+                else:\n+                    keep = bool(self.options.private_members) and \\\n+                        (has_doc or self.options.undoc_members)\n             else:\n                 if self.options.members is ALL and is_filtered_inherited_member(membername):\n                     keep = False\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7fb9f3d..437a55c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -45,7 +45,7 @@ INSTANCEATTR = object()\n SLOTSATTR = object()\n \n def members_option(arg: Any) -> Union[object, List[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :members: and :private-members: options to auto directives.\"\"\"\n     if arg is None or arg is True:\n         return ALL\n     return [x.strip() for x in arg.split(',') if x.strip()]\n@@ -440,8 +440,8 @@ class Documenter:\n \n         Members are skipped if\n \n-        - they are private (except if given explicitly or the private-members\n-          option is set)\n+        - they are private (except if given explicitly or listed in private-members\n+          option)\n         - they are special methods (except if given explicitly or the\n           special-members option is set)\n         - they are undocumented (except if the undoc-members option is set)\n@@ -508,7 +508,10 @@ class Documenter:\n                     keep = True\n                 isattr = True\n             elif want_all and isprivate:\n-                keep = self.options.private_members and (has_doc or self.options.undoc_members)\n+                if isinstance(self.options.private_members, (list, set)):\n+                    keep = membername in self.options.private_members\n+                else:\n+                    keep = bool(self.options.private_members) and (has_doc or self.options.undoc_members)\n             elif self.options.members is ALL and is_filtered_inherited_member(membername):\n                 keep = False\n             else:\n", "normalized_occurrence": 1}
