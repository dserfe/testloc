{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..4f6518e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -253,8 +253,11 @@ def get_child_arguments():\n     return args\n \n \n-def trigger_reload(filename):\n-    logger.info('%s changed, reloading.', filename)\n+def trigger_reload(filename, dir_changed=False):\n+    if dir_changed:\n+        logger.info('Directory %s changed, reloading.', filename)\n+    else:\n+        logger.info('%s changed, reloading.', filename)\n     sys.exit(3)\n \n \n@@ -268,6 +271,9 @@ def restart_with_reloader():\n \n \n class BaseReloader:\n+    def watch_settings(self, path):\n+        for parent in Path(path).parents:\n+            self.extra_files.add(parent)\n     def __init__(self):\n         self.extra_files = set()\n         self.directory_globs = defaultdict(set)\n@@ -627,6 +633,8 @@ def start_django(reloader, main_func, *args, **kwargs):\n     while not reloader.should_stop:\n         try:\n             reloader.run(django_main_thread)\n+            for directory in reloader.extra_files:\n+                reloader.watch_dir(directory, \"**/*.py\")\n         except WatchmanUnavailable as ex:\n             # It's possible that the watchman service shuts down or otherwise\n             # becomes unavailable. In that case, use the StatReloader.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..cb2a499 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -155,8 +155,11 @@ def get_child_arguments():\n     else:\n         args += sys.argv\n     return args\n-def trigger_reload(filename):\n-    logger.info('%s changed, reloading.', filename)\n+def trigger_reload(filename, dir_changed=False):\n+    if dir_changed:\n+        logger.info('Directory %s changed, reloading.', filename)\n+    else:\n+        logger.info('%s changed, reloading.', filename)\n     sys.exit(3)\n def restart_with_reloader():\n     new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true'}\n@@ -166,6 +169,9 @@ def restart_with_reloader():\n         if p.returncode != 3:\n             return p.returncode\n class BaseReloader:\n+    def watch_settings(self, path):\n+        for parent in Path(path).parents:\n+            self.extra_files.add(parent)\n     def __init__(self):\n         self.extra_files = set()\n         self.directory_globs = defaultdict(set)\n@@ -408,6 +414,8 @@ def start_django(reloader, main_func, *args, **kwargs):\n     while not reloader.should_stop:\n         try:\n             reloader.run(django_main_thread)\n+            for directory in reloader.extra_files:\n+                reloader.watch_dir(directory, '**/*.py')\n         except WatchmanUnavailable as ex:\n             reloader = StatReloader()\n             logger.error('Error connecting to Watchman: %s', ex)\n", "normalized_occurrence": 1}
