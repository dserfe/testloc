{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..bfe6ccc 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,15 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # handle user-defined literals\n+        pos = self.pos\n+        # match identifier that starts with underscore\n+        if self.match(identifier_re) and self.definition[pos] == '_':\n+            # if we found an underscore identifier right after a literal position,\n+            # it's a user-defined literal suffix\n+            if pos > 0 and self.definition[pos-1] not in string.whitespace:\n+                # include the UDL suffix in the previous literal\n+                return ASTNumberLiteral(self.definition[self.last_match.start():self.pos])\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..fcce8a2 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,10 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        if self.match(identifier_re) and self.definition[pos] == '_':\n+            if pos > 0 and self.definition[pos - 1] not in string.whitespace:\n+                return ASTNumberLiteral(self.definition[self.last_match.start():self.pos])\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
