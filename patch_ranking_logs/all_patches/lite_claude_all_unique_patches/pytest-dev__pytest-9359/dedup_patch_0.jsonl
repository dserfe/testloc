{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..0d5bdf7 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -602,6 +602,9 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n                 _write_and_reset()\n             elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n                 _write_and_reset()\n+                # Stop collecting lines after we've found our assertion\n+                if lines:\n+                    break\n             elif lines and lineno not in seen_lines:\n                 lines.append(line)\n                 seen_lines.add(lineno)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..dac3bb1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -345,6 +345,8 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n                 _write_and_reset()\n             elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n                 _write_and_reset()\n+                if lines:\n+                    break\n             elif lines and lineno not in seen_lines:\n                 lines.append(line)\n                 seen_lines.add(lineno)\n", "normalized_occurrence": 1}
