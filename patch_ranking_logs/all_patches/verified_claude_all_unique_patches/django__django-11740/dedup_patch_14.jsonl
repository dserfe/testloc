{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..4cd4f47 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -851,10 +851,31 @@ class MigrationAutodetector:\n \n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+        # Check if this is a conversion from UUID to FK\n+        old_field = None\n+        if hasattr(self, 'from_state'):\n+            try:\n+                old_model = self.from_state.apps.get_model(app_label, model_name)\n+                old_field = old_model._meta.get_field(field_name)\n+            except (LookupError, FieldDoesNotExist):\n+                pass\n+        \n         # Fields that are foreignkeys/m2ms depend on stuff\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(self._get_dependencies_for_foreign_key(field))\n+            # If converting from UUID to FK, treat as altered field to ensure dependencies\n+            if old_field and isinstance(old_field, models.UUIDField):\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterField(\n+                        model_name=model_name,\n+                        name=field_name,\n+                        field=field,\n+                    ),\n+                    dependencies=dependencies,\n+                )\n+                return\n         # You can't just add NOT NULL fields with no default or fields\n         # which don't allow empty strings as default.\n         time_fields = (models.DateField, models.DateTimeField, models.TimeField)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..97a870d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -412,9 +412,19 @@ class MigrationAutodetector:\n             self._generate_added_field(app_label, model_name, field_name)\n     def _generate_added_field(self, app_label, model_name, field_name):\n         field = self.new_apps.get_model(app_label, model_name)._meta.get_field(field_name)\n+        old_field = None\n+        if hasattr(self, 'from_state'):\n+            try:\n+                old_model = self.from_state.apps.get_model(app_label, model_name)\n+                old_field = old_model._meta.get_field(field_name)\n+            except (LookupError, FieldDoesNotExist):\n+                pass\n         dependencies = []\n         if field.remote_field and field.remote_field.model:\n             dependencies.extend(self._get_dependencies_for_foreign_key(field))\n+            if old_field and isinstance(old_field, models.UUIDField):\n+                self.add_operation(app_label, operations.AlterField(model_name=model_name, name=field_name, field=field), dependencies=dependencies)\n+                return\n         time_fields = (models.DateField, models.DateTimeField, models.TimeField)\n         preserve_default = field.null or field.has_default() or field.many_to_many or (field.blank and field.empty_strings_allowed) or (isinstance(field, time_fields) and field.auto_now)\n         if not preserve_default:\n", "normalized_occurrence": 1}
