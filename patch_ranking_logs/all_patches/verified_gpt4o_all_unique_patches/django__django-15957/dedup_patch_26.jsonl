{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..b2e70f9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1556,6 +1556,32 @@ class QuerySet:\n         Many-To-One and Many-To-Many related objects when the QuerySet is\n         evaluated.\n \n+        When prefetch_related() is called more than once, append to the list of\n+        prefetch lookups. If prefetch_related(None) is called, clear the list.\n+        \"\"\"\n+        self._not_support_combined_queries(\"prefetch_related\")\n+        clone = self._chain()\n+        if lookups == (None,):\n+            clone._prefetch_related_lookups = ()\n+        else:\n+            for lookup in lookups:\n+                if isinstance(lookup, Prefetch):\n+                    if isinstance(lookup.queryset, QuerySet) and lookup.queryset.query.low_mark != 0:\n+                        lookup.queryset._fetch_all()\n+                        lookup.queryset = list(lookup.queryset)\n+                    lookup = lookup.prefetch_to\n+                lookup = lookup.split(LOOKUP_SEP, 1)[0]\n+                if lookup in self.query._filtered_relations:\n+                    raise ValueError(\n+                        \"prefetch_related() is not supported with FilteredRelation.\"\n+                    )\n+            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n+        return clone\n+        \"\"\"\n+        Return a new QuerySet instance that will prefetch the specified\n+        Many-To-One and Many-To-Many related objects when the QuerySet is\n+        evaluated.\n+\n         When prefetch_related() is called more than once, append to the list of\n         prefetch lookups. If prefetch_related(None) is called, clear the list.\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..9f2fea7 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -830,6 +830,22 @@ class QuerySet:\n             obj.query.select_related = True\n         return obj\n     def prefetch_related(self, *lookups):\n+        self._not_support_combined_queries('prefetch_related')\n+        clone = self._chain()\n+        if lookups == (None,):\n+            clone._prefetch_related_lookups = ()\n+        else:\n+            for lookup in lookups:\n+                if isinstance(lookup, Prefetch):\n+                    if isinstance(lookup.queryset, QuerySet) and lookup.queryset.query.low_mark != 0:\n+                        lookup.queryset._fetch_all()\n+                        lookup.queryset = list(lookup.queryset)\n+                    lookup = lookup.prefetch_to\n+                lookup = lookup.split(LOOKUP_SEP, 1)[0]\n+                if lookup in self.query._filtered_relations:\n+                    raise ValueError('prefetch_related() is not supported with FilteredRelation.')\n+            clone._prefetch_related_lookups = clone._prefetch_related_lookups + lookups\n+        return clone\n         self._not_support_combined_queries('prefetch_related')\n         clone = self._chain()\n         if lookups == (None,):\n", "normalized_occurrence": 1}
