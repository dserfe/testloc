{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-26194", "model_patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 0841d1d..97a5072 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -1083,7 +1083,12 @@ def roc_curve(\n     # to make sure that the curve starts at (0, 0)\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    # For probability estimates (when max score <= 1), clip the threshold to 1\n+    # otherwise use threshold + 1 as before\n+    if thresholds[0] <= 1:\n+        thresholds = np.r_[1, thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n \n     if fps[-1] <= 0:\n         warnings.warn(\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/metrics/_ranking.py b/sklearn/metrics/_ranking.py\nindex 9f6917e..7ee5d93 100644\n--- a/sklearn/metrics/_ranking.py\n+++ b/sklearn/metrics/_ranking.py\n@@ -191,7 +191,10 @@ def roc_curve(y_true, y_score, *, pos_label=None, sample_weight=None, drop_inter\n         thresholds = thresholds[optimal_idxs]\n     tps = np.r_[0, tps]\n     fps = np.r_[0, fps]\n-    thresholds = np.r_[thresholds[0] + 1, thresholds]\n+    if thresholds[0] <= 1:\n+        thresholds = np.r_[1, thresholds]\n+    else:\n+        thresholds = np.r_[thresholds[0] + 1, thresholds]\n     if fps[-1] <= 0:\n         warnings.warn('No negative samples in y_true, false positive value should be meaningless', UndefinedMetricWarning)\n         fpr = np.repeat(np.nan, fps.shape)\n", "normalized_occurrence": 5}
