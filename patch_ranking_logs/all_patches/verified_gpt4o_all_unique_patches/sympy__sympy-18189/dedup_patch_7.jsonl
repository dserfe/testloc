{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..2b2dc7b 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,13 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: i for i, sym in enumerate(var)}\n+                original_solutions = diophantine(eq, param)\n+                reordered_solutions = {\n+                    tuple(sol[dict_sym_index[sym]] for sym in syms)\n+                    for sol in original_solutions\n+                }\n+                return reordered_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..7616d3c 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,10 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: i for i, sym in enumerate(var)}\n+                original_solutions = diophantine(eq, param)\n+                reordered_solutions = {tuple((sol[dict_sym_index[sym]] for sym in syms)) for sol in original_solutions}\n+                return reordered_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
