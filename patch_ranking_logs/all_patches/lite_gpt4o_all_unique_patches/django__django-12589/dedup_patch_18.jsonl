{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..80c2f7e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -125,12 +125,13 @@ class SQLCompiler:\n             # select clause are already part of the group by.\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n-        result = []\n-        seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        if self.query.group_by is True:\n+            having_group_by = self.having.get_group_by_cols() if self.having else ()\n+            for expr in having_group_by:\n+                expressions.append(expr)\n+            result = []\n+            seen = set()\n+            expressions = self.collapse_group_by(expressions, having_group_by)\n \n         for expr in expressions:\n             sql, params = self.compile(expr)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..09dd55d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -57,12 +57,13 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n-        result = []\n-        seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        if self.query.group_by is True:\n+            having_group_by = self.having.get_group_by_cols() if self.having else ()\n+            for expr in having_group_by:\n+                expressions.append(expr)\n+            result = []\n+            seen = set()\n+            expressions = self.collapse_group_by(expressions, having_group_by)\n         for expr in expressions:\n             sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
