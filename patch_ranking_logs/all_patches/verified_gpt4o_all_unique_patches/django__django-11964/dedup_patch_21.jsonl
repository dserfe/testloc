{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..93681da 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1008,7 +1008,9 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n-        if isinstance(value, str) or value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif isinstance(value, str) or value is None:\n             return value\n         return str(value)\n \n@@ -1754,7 +1756,9 @@ class IntegerField(Field):\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n-        if value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif value is None:\n             return None\n         try:\n             return int(value)\n@@ -1767,7 +1771,9 @@ class IntegerField(Field):\n         return \"IntegerField\"\n \n     def to_python(self, value):\n-        if value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif value is None:\n             return value\n         try:\n             return int(value)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..791949c 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -485,7 +485,9 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n-        if isinstance(value, str) or value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif isinstance(value, str) or value is None:\n             return value\n         return str(value)\n     def get_prep_value(self, value):\n@@ -881,7 +883,9 @@ class IntegerField(Field):\n         return validators_\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n-        if value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif value is None:\n             return None\n         try:\n             return int(value)\n@@ -890,7 +894,9 @@ class IntegerField(Field):\n     def get_internal_type(self):\n         return 'IntegerField'\n     def to_python(self, value):\n-        if value is None:\n+        if isinstance(value, self.choices) or isinstance(value, Enum):\n+            return value.value\n+        elif value is None:\n             return value\n         try:\n             return int(value)\n", "normalized_occurrence": 1}
