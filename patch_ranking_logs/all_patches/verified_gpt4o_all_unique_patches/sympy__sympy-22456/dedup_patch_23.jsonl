{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..99fbfee 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -895,14 +895,15 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n-    @classmethod\n-    def _construct_text(cls, text):\n-        if not isinstance(text, str):\n-            raise TypeError(\"Argument text is not a string type.\")\n-        return text\n+    def __new__(cls, text):\n+        return Token.__new__(cls, text)\n+\n+    @property\n+    def args(self):\n+        return (self.text,)\n \n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..b018591 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -774,14 +774,15 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n-    @classmethod\n-    def _construct_text(cls, text):\n-        if not isinstance(text, str):\n-            raise TypeError('Argument text is not a string type.')\n-        return text\n+    def __new__(cls, text):\n+        return Token.__new__(cls, text)\n+\n+    @property\n+    def args(self):\n+        return (self.text,)\n \n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n", "normalized_occurrence": 1}
