{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..e7e9d09 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -67,9 +67,9 @@ class Collector:\n         # Initially, {model: {instances}}, later values become lists.\n         self.data = {}\n         self.field_updates = {}  # {model: {(field, value): {instances}}}\n-        # fast_deletes is a list of queryset-likes that can be deleted without\n-        # fetching the objects into memory.\n-        self.fast_deletes = []\n+        # fast_deletes is a dict mapping model classes to querysets that can\n+        # be deleted without fetching the objects into memory.\n+        self.fast_deletes = {}\n \n         # Tracks deletion-order dependency for databases without transactions\n         # or ability to defer constraint checks. Only concrete model classes\n@@ -191,7 +191,11 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs.model if hasattr(objs, 'model') else type(objs)\n+            if model not in self.fast_deletes:\n+                self.fast_deletes[model] = objs\n+            else:\n+                self.fast_deletes[model] = self.fast_deletes[model] | objs\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n@@ -310,9 +314,9 @@ class Collector:\n                     )\n \n             # fast deletes\n-            for qs in self.fast_deletes:\n+            for model, qs in self.fast_deletes.items():\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -346,4 +350,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..e2bf8ae 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -35,7 +35,7 @@ class Collector:\n         self.using = using\n         self.data = {}\n         self.field_updates = {}\n-        self.fast_deletes = []\n+        self.fast_deletes = {}\n         self.dependencies = {}\n     def add(self, objs, source=None, nullable=False, reverse_dependency=False):\n         if not objs:\n@@ -80,7 +80,11 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs.model if hasattr(objs, 'model') else type(objs)\n+            if model not in self.fast_deletes:\n+                self.fast_deletes[model] = objs\n+            else:\n+                self.fast_deletes[model] = self.fast_deletes[model] | objs\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n@@ -156,9 +160,9 @@ class Collector:\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n                     signals.pre_delete.send(sender=model, instance=obj, using=self.using)\n-            for qs in self.fast_deletes:\n+            for model, qs in self.fast_deletes.items():\n                 count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                deleted_counter[model._meta.label] += count\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n", "normalized_occurrence": 1}
