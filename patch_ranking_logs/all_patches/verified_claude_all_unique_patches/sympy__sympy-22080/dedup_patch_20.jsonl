{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..98dc7c9 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -203,7 +204,12 @@ class Mod(Function):\n                     p *= int(cp/cq)\n                     ok = True\n             if not ok:\n-                p = cp*p\n+                # Don't absorb minus sign into the Mod\n+                if cp.is_negative:\n+                    G *= -1\n+                    p = (-cp)*p\n+                else:\n+                    p = cp*p\n                 q = cq*q\n \n         # simple -1 extraction\n@@ -240,4 +246,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..7083b23 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -135,7 +135,11 @@ class Mod(Function):\n                     p *= int(cp / cq)\n                     ok = True\n             if not ok:\n-                p = cp * p\n+                if cp.is_negative:\n+                    G *= -1\n+                    p = -cp * p\n+                else:\n+                    p = cp * p\n                 q = cq * q\n         if p.could_extract_minus_sign() and q.could_extract_minus_sign():\n             G, p, q = [-i for i in (G, p, q)]\n", "normalized_occurrence": 1}
