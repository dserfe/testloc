{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..c0e7648 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -90,6 +90,20 @@ class DotBase(Mark):\n \n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        \n+        # Apply formatter offset if available\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], \"formatter\"):\n+                formatter = scales[var].formatter\n+                if hasattr(formatter, \"get_offset\") and callable(formatter.get_offset):\n+                    offset = formatter.get_offset()\n+                    if offset:\n+                        try:\n+                            offset_value = float(offset)\n+                            if \"size\" in res and var in key:\n+                                res[\"size\"] = res[\"size\"] / offset_value\n+                        except (ValueError, TypeError):\n+                            pass\n \n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..b717b56 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,18 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], 'formatter'):\n+                formatter = scales[var].formatter\n+                if hasattr(formatter, 'get_offset') and callable(formatter.get_offset):\n+                    offset = formatter.get_offset()\n+                    if offset:\n+                        try:\n+                            offset_value = float(offset)\n+                            if 'size' in res and var in key:\n+                                res['size'] = res['size'] / offset_value\n+                        except (ValueError, TypeError):\n+                            pass\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
