{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23413", "model_patch": "diff --git a/sympy/matrices/normalforms.py b/sympy/matrices/normalforms.py\nindex d5302ed..886ad79 100644\n--- a/sympy/matrices/normalforms.py\n+++ b/sympy/matrices/normalforms.py\n@@ -67,7 +67,7 @@ def invariant_factors(m, domain=None):\n     return factors\n \n \n-def hermite_normal_form(A, *, D=None, check_rank=False):\n+def hermite_normal_form(A, *, D=None, check_rank=True):\n     r\"\"\"\n     Compute the Hermite Normal Form of a Matrix *A* of integers.\n \n@@ -79,6 +79,9 @@ def hermite_normal_form(A, *, D=None, check_rank=False):\n     >>> m = Matrix([[12, 6, 4], [3, 9, 6], [2, 16, 14]])\n     >>> print(hermite_normal_form(m))\n     Matrix([[10, 0, 2], [0, 15, 3], [0, 0, 2]])\n+    >>> m2 = Matrix([[5, 8, 12], [0, 0, 1]])\n+    >>> print(hermite_normal_form(m2.T).T)\n+    Matrix([[5, 8, 0], [0, 0, 1]])\n \n     Parameters\n     ==========\n@@ -124,4 +127,4 @@ def hermite_normal_form(A, *, D=None, check_rank=False):\n     # Accept any of Python int, SymPy Integer, and ZZ itself:\n     if D is not None and not ZZ.of_type(D):\n         D = ZZ(int(D))\n-    return _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()\n+    return _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/normalforms.py b/sympy/matrices/normalforms.py\nindex a9e46e4..5fcf8a8 100644\n--- a/sympy/matrices/normalforms.py\n+++ b/sympy/matrices/normalforms.py\n@@ -23,7 +23,7 @@ def invariant_factors(m, domain=None):\n             to_poly = lambda f: Poly(f, K.symbols, domain=K.domain)\n             factors = tuple((to_poly(f) for f in factors))\n     return factors\n-def hermite_normal_form(A, *, D=None, check_rank=False):\n+def hermite_normal_form(A, *, D=None, check_rank=True):\n     if D is not None and (not ZZ.of_type(D)):\n         D = ZZ(int(D))\n     return _hnf(A._rep, D=D, check_rank=check_rank).to_Matrix()\n\\ No newline at end of file\n", "normalized_occurrence": 1}
