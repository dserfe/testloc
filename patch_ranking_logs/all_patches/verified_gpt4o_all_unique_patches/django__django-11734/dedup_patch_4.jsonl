{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..31aa773 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1079,8 +1079,11 @@ class Exists(Subquery):\n         # As a performance optimization, remove ordering since EXISTS doesn't\n         # care about it, just whether or not a row matches.\n         queryset = queryset.order_by()\n+        # Ensure the subquery respects the outer reference context when negated\n         self.negated = negated\n         super().__init__(queryset, **kwargs)\n+        if self.negated:\n+            self.queryset.query.where.negate()\n \n     def __invert__(self):\n         clone = self.copy()\n@@ -1088,7 +1091,10 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        # Ensure the subquery is correctly enclosed in the appropriate SQL context\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if self.negated:\n+            sql = 'NOT ({})'.format(sql)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..2b5b741 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -660,12 +660,16 @@ class Exists(Subquery):\n         queryset = queryset.order_by()\n         self.negated = negated\n         super().__init__(queryset, **kwargs)\n+        if self.negated:\n+            self.queryset.query.where.negate()\n     def __invert__(self):\n         clone = self.copy()\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if self.negated:\n+            sql = 'NOT ({})'.format(sql)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return (sql, params)\n", "normalized_occurrence": 1}
