{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..753c2ce 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -972,24 +972,74 @@ warn_explicit(\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + \"=\" + expl)\n-            else:  # **args have `arg` keywords with an .arg of None\n-                arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        # Check if the function is `all` or `any`\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            if call.args:\n+                iter_arg = call.args[0]\n+                # Unroll the iterable\n+                temp_var = self.variable()\n+                self.statements.append(ast.Assign([ast.Name(temp_var, ast.Store())], iter_arg))\n+\n+                # Create a for loop to iterate over the elements\n+                loop_var = self.variable()\n+                self.statements.append(ast.For(\n+                    target=ast.Name(loop_var, ast.Store()),\n+                    iter=ast.Name(temp_var, ast.Load()),\n+                    body=[\n+                        ast.If(\n+                            test=ast.UnaryOp(\n+                                op=ast.Not(),\n+                                operand=ast.Call(\n+                                    func=call.func,\n+                                    args=[\n+                                        ast.GeneratorExp(\n+                                            elt=ast.Name(loop_var, ast.Load()),\n+                                            generators=[ast.comprehension(\n+                                                target=ast.Name(loop_var, ast.Store()),\n+                                                iter=ast.Name(temp_var, ast.Load()),\n+                                                ifs=[]\n+                                            )]\n+                                        )\n+                                    ],\n+                                    keywords=[]\n+                                )\n+                            ),\n+                            body=[\n+                                ast.Raise(\n+                                    exc=ast.Call(\n+                                        func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                                        args=[ast.Str(s=f\"Element {loop_var} failed in {call.func.id}()\")],\n+                                        keywords=[]\n+                                    ),\n+                                    cause=None\n+                                )\n+                            ],\n+                            orelse=[]\n+                        )\n+                    ],\n+                    orelse=[]\n+                ))\n+\n+        else:\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + \"=\" + expl)\n+                else:  # **args have `arg` keywords with an .arg of None\n+                    arg_expls.append(\"**\" + expl)\n+\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1131,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..76d8b6d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -548,23 +548,31 @@ class AssertionRewriter(ast.NodeVisitor):\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + '=' + expl)\n-            else:\n-                arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            if call.args:\n+                iter_arg = call.args[0]\n+                temp_var = self.variable()\n+                self.statements.append(ast.Assign([ast.Name(temp_var, ast.Store())], iter_arg))\n+                loop_var = self.variable()\n+                self.statements.append(ast.For(target=ast.Name(loop_var, ast.Store()), iter=ast.Name(temp_var, ast.Load()), body=[ast.If(test=ast.UnaryOp(op=ast.Not(), operand=ast.Call(func=call.func, args=[ast.GeneratorExp(elt=ast.Name(loop_var, ast.Load()), generators=[ast.comprehension(target=ast.Name(loop_var, ast.Store()), iter=ast.Name(temp_var, ast.Load()), ifs=[])])], keywords=[])), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.Str(s=f'Element {loop_var} failed in {call.func.id}()')], keywords=[]), cause=None)], orelse=[])], orelse=[]))\n+        else:\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + '=' + expl)\n+                else:\n+                    arg_expls.append('**' + expl)\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
