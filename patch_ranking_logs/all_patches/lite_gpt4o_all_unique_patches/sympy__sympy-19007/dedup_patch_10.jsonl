{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..76e8575 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,6 +233,7 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n+        from sympy import Symbol\n         # Find row entry\n         for row_block, numrows in enumerate(self.rowblocksizes):\n             if (i < numrows) != False:\n@@ -244,6 +245,8 @@ class BlockMatrix(MatrixExpr):\n                 break\n             else:\n                 j -= numcols\n+        if isinstance(i, Symbol) or isinstance(j, Symbol):\n+            return MatrixElement(self.blocks[row_block, col_block], i, j)\n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..bb58405 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,6 +103,7 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Symbol\n         for row_block, numrows in enumerate(self.rowblocksizes):\n             if (i < numrows) != False:\n                 break\n@@ -113,6 +114,8 @@ class BlockMatrix(MatrixExpr):\n                 break\n             else:\n                 j -= numcols\n+        if isinstance(i, Symbol) or isinstance(j, Symbol):\n+            return MatrixElement(self.blocks[row_block, col_block], i, j)\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
