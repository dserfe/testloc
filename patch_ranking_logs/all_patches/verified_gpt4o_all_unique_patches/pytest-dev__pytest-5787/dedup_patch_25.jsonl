{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..ca97549 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,19 +408,43 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_excinfo(excinfo):\n+    if excinfo is None:\n+        return None\n+    reprcrash = excinfo._getreprcrash()\n+    return {\n+        \"reprcrash\": {\"path\": str(reprcrash.path), \"lineno\": reprcrash.lineno, \"message\": reprcrash.message},\n+        \"reprtraceback\": excinfo._getrepr().toterminal(verbosity=2),\n+        \"exconly\": excinfo.exconly(tryshort=True),\n+        \"chain\": [serialize_excinfo(link) for link in excinfo.chain] if excinfo.chain else [],\n+    }\n+\n+def deserialize_excinfo(data):\n+    if data is None:\n+        return None\n+    excinfo = ExceptionInfo.from_exc_info((None, None, None))\n+    excinfo._reprcrash = ReprFileLocation(data[\"reprcrash\"][\"path\"], data[\"reprcrash\"][\"lineno\"], data[\"reprcrash\"][\"message\"])\n+    excinfo._reprtraceback = data[\"reprtraceback\"]\n+    excinfo._exconly = data[\"exconly\"]\n+    excinfo.chain = [deserialize_excinfo(link) for link in data[\"chain\"]] if data[\"chain\"] else []\n+    return excinfo\n+\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n+        if hasattr(report, 'longrepr') and isinstance(report.longrepr, ExceptionInfo):\n+            data[\"longrepr\"] = serialize_excinfo(report.longrepr)\n         return data\n \n-\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n         elif data[\"_report_type\"] == \"CollectReport\":\n-            return CollectReport._from_json(data)\n-        assert False, \"Unknown report_type unserialize data: {}\".format(\n-            data[\"_report_type\"]\n-        )\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(data[\"_report_type\"])\n+        if \"longrepr\" in data and isinstance(data[\"longrepr\"], dict):\n+            report.longrepr = deserialize_excinfo(data[\"longrepr\"])\n+        return report\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..452c7b6 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,15 +205,35 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_excinfo(excinfo):\n+    if excinfo is None:\n+        return None\n+    reprcrash = excinfo._getreprcrash()\n+    return {'reprcrash': {'path': str(reprcrash.path), 'lineno': reprcrash.lineno, 'message': reprcrash.message}, 'reprtraceback': excinfo._getrepr().toterminal(verbosity=2), 'exconly': excinfo.exconly(tryshort=True), 'chain': [serialize_excinfo(link) for link in excinfo.chain] if excinfo.chain else []}\n+def deserialize_excinfo(data):\n+    if data is None:\n+        return None\n+    excinfo = ExceptionInfo.from_exc_info((None, None, None))\n+    excinfo._reprcrash = ReprFileLocation(data['reprcrash']['path'], data['reprcrash']['lineno'], data['reprcrash']['message'])\n+    excinfo._reprtraceback = data['reprtraceback']\n+    excinfo._exconly = data['exconly']\n+    excinfo.chain = [deserialize_excinfo(link) for link in data['chain']] if data['chain'] else []\n+    return excinfo\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n+        if hasattr(report, 'longrepr') and isinstance(report.longrepr, ExceptionInfo):\n+            data['longrepr'] = serialize_excinfo(report.longrepr)\n         return data\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n         elif data['_report_type'] == 'CollectReport':\n-            return CollectReport._from_json(data)\n-        assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        if 'longrepr' in data and isinstance(data['longrepr'], dict):\n+            report.longrepr = deserialize_excinfo(data['longrepr'])\n+        return report\n\\ No newline at end of file\n", "normalized_occurrence": 1}
