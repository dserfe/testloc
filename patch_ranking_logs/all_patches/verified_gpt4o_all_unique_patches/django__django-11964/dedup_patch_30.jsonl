{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..ffc477d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1012,6 +1012,11 @@ class CharField(Field):\n             return value\n         return str(value)\n \n+    def from_db_value(self, value, expression, connection):\n+        if isinstance(value, self.choices):\n+            return value.value\n+        return value\n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n@@ -1752,6 +1757,11 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n \n+    def from_db_value(self, value, expression, connection):\n+        if isinstance(value, self.choices):\n+            return value.value\n+        return value\n+\n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n         if value is None:\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n+    def from_db_value(self, value, expression, connection):\n+        if isinstance(value, self.choices):\n+            return value.value\n+        return value\n+    def from_db_value(self, value, expression, connection):\n+        if isinstance(value, self.choices):\n+            return value.value\n+        return value", "normalized_occurrence": 1}
