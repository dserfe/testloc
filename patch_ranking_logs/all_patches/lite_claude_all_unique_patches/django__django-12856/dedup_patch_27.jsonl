{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..c7efb3b 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -71,6 +71,8 @@ class CheckConstraint(BaseConstraint):\n         return path, args, kwargs\n \n \n+from django.core import checks\n+\n class Deferrable(Enum):\n     DEFERRED = 'deferred'\n     IMMEDIATE = 'immediate'\n@@ -104,6 +106,21 @@ class UniqueConstraint(BaseConstraint):\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n         return sql % tuple(schema_editor.quote_value(p) for p in params)\n \n+    def check(self, model, **kwargs):\n+        errors = []\n+        for field_name in self.fields:\n+            try:\n+                field = model._meta.get_field(field_name)\n+            except Exception:\n+                errors.append(\n+                    checks.Error(\n+                        \"The field '%s' referenced by the unique constraint does not exist.\" % field_name,\n+                        obj=model,\n+                        id='models.E012',\n+                    )\n+                )\n+        return errors\n+\n     def constraint_sql(self, model, schema_editor):\n         fields = [model._meta.get_field(field_name).column for field_name in self.fields]\n         condition = self._get_condition_sql(model, schema_editor)\n@@ -150,4 +167,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n+from django.core import checks\n+    def check(self, model, **kwargs):\n+        errors = []\n+        for field_name in self.fields:\n+            try:\n+                field = model._meta.get_field(field_name)\n+            except Exception:\n+                errors.append(checks.Error(\"The field '%s' referenced by the unique constraint does not exist.\" % field_name, obj=model, id='models.E012'))\n+        return errors", "normalized_occurrence": 2}
