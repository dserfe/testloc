{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..97ffd89 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,8 +4682,14 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # user-defined literal\n+        udl_match = self.match(user_defined_literal_re)\n+        if udl_match:\n+            literal = udl_match.group(1)\n+            suffix = udl_match.group(2)\n+            return ASTUserDefinedLiteral(literal, suffix)\n+\n+        self.fail(\"Expected a literal.\")\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..e35cc85 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,7 +3074,12 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n-        return None\n+        udl_match = self.match(user_defined_literal_re)\n+        if udl_match:\n+            literal = udl_match.group(1)\n+            suffix = udl_match.group(2)\n+            return ASTUserDefinedLiteral(literal, suffix)\n+        self.fail('Expected a literal.')\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
