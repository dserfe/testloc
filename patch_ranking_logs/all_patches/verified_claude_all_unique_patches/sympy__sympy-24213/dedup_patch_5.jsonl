{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..caa608a 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,10 +175,9 @@ class UnitSystem(_QuantityMapper):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n-                        'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'Dimension of \"{}\" ({}) is not equivalent to {}'.format(\n                             addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n@@ -202,4 +201,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 8, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 212532e..cf35529 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -104,8 +104,8 @@ class UnitSystem(_QuantityMapper):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n-                    raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n+                    raise ValueError('Dimension of \"{}\" ({}) is not equivalent to {}'.format(addend, addend_dim, dim))\n                 factor += addend_factor\n             return (factor, dim)\n         elif isinstance(expr, Derivative):\n", "normalized_occurrence": 8}
