{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..cc227bb 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -558,14 +558,14 @@ class PyLinter(\n \n         This method is called before any linting is done.\n         \"\"\"\n+        from pylint.lint.expand_modules import _is_in_ignore_list_re\n         # initialize msgs_state now that all messages have been registered into\n         # the store\n         for msg in self.msgs_store.messages:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n@@ -579,15 +579,28 @@ class PyLinter(\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n+                    \n+                    # Apply ignore filters\n+                    basename = os.path.basename(root)\n+                    if (basename in self.config.ignore_list or\n+                        _is_in_ignore_list_re(basename, self.config.ignore_list_re) or\n+                        _is_in_ignore_list_re(root, self.config.ignore_list_paths_re)):\n+                        continue\n+\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        for file in files:\n+                            if not file.endswith(\".py\"):\n+                                continue\n+                            filepath = os.path.join(root, file)\n+                            # Apply ignore filters to files as well\n+                            if (file in self.config.ignore_list or\n+                                _is_in_ignore_list_re(file, self.config.ignore_list_re) or\n+                                _is_in_ignore_list_re(filepath, self.config.ignore_list_paths_re)):\n+                                continue\n+                            yield filepath\n             else:\n                 yield something\n \n", "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..6735d13 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -217,22 +217,31 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             return True\n         return path.endswith('.py')\n     def initialize(self) -> None:\n+        from pylint.lint.expand_modules import _is_in_ignore_list_re\n         for msg in self.msgs_store.messages:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n-    @staticmethod\n-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n             if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any((root.startswith(s) for s in skip_subtrees)):\n                         continue\n+                    basename = os.path.basename(root)\n+                    if basename in self.config.ignore_list or _is_in_ignore_list_re(basename, self.config.ignore_list_re) or _is_in_ignore_list_re(root, self.config.ignore_list_paths_re):\n+                        continue\n                     if '__init__.py' in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+                        for file in files:\n+                            if not file.endswith('.py'):\n+                                continue\n+                            filepath = os.path.join(root, file)\n+                            if file in self.config.ignore_list or _is_in_ignore_list_re(file, self.config.ignore_list_re) or _is_in_ignore_list_re(filepath, self.config.ignore_list_paths_re):\n+                                continue\n+                            yield filepath\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n", "normalized_occurrence": 1}
