{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..849b908 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,8 +125,19 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n+        try:\n+            value_name = self.value.name\n+            serialized_value = \"%s.%s[%r]\" % (module, enum_class.__qualname__, value_name)\n+        except AttributeError:\n+            # Handle combination of Enum flags\n+            flags = []\n+            for enum_member in enum_class:\n+                if enum_member in self.value:\n+                    flags.append(\"%s.%s.%s\" % (module, enum_class.__qualname__, enum_member.name))\n+            serialized_value = \" | \".join(flags)\n+        \n         return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+            serialized_value,\n             {\"import %s\" % module},\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..e2df1d5 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,16 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            value_name = self.value.name\n+            serialized_value = '%s.%s[%r]' % (module, enum_class.__qualname__, value_name)\n+        except AttributeError:\n+            flags = []\n+            for enum_member in enum_class:\n+                if enum_member in self.value:\n+                    flags.append('%s.%s.%s' % (module, enum_class.__qualname__, enum_member.name))\n+            serialized_value = ' | '.join(flags)\n+        return (serialized_value, {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
