{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 3b46a26..5d68c7a 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -264,6 +264,8 @@ class Symbol(AtomicExpr, Boolean):\n         cls._sanitize(assumptions, cls)\n         return Symbol.__xnew_cached_(cls, name, **assumptions)\n \n+    __slots__ = ('name',)  # define __slots__ to prevent __dict__\n+\n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, str):\n             raise TypeError(\"name should be a string, not %s\" % repr(type(name)))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 2506145..eda16cd 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -96,6 +96,7 @@ class Symbol(AtomicExpr, Boolean):\n     def __new__(cls, name, **assumptions):\n         cls._sanitize(assumptions, cls)\n         return Symbol.__xnew_cached_(cls, name, **assumptions)\n+    __slots__ = ('name',)\n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, str):\n             raise TypeError('name should be a string, not %s' % repr(type(name)))\n", "normalized_occurrence": 1}
