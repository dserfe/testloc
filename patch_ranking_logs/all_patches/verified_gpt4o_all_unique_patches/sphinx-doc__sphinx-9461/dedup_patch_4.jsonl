{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..4282acc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2069,7 +2069,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+        return (inspect.isroutine(member) or inspect.isproperty(member)) and not isinstance(parent, ModuleDocumenter)\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2081,7 +2081,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         if obj is None:\n             obj = self.object\n \n-        if (inspect.isclassmethod(obj) or\n+        if (inspect.isclassmethod(obj) or inspect.isproperty(obj) or\n                 inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name)):\n             # document class and static members before ordinary ones\n             self.member_order = self.member_order - 1\n@@ -2130,7 +2130,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..0e1ce21 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1200,7 +1200,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n     priority = 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter))\n+        return (inspect.isroutine(member) or inspect.isproperty(member)) and (not isinstance(parent, ModuleDocumenter))\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n         if not ret:\n@@ -1208,7 +1208,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n         obj = self.parent.__dict__.get(self.object_name)\n         if obj is None:\n             obj = self.object\n-        if inspect.isclassmethod(obj) or inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n+        if inspect.isclassmethod(obj) or inspect.isproperty(obj) or inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.member_order = self.member_order - 1\n         return ret\n     def format_args(self, **kwargs: Any) -> str:\n@@ -1241,7 +1241,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "normalized_occurrence": 1}
