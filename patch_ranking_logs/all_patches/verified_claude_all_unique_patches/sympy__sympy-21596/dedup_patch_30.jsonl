{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..e1c53d0 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,6 +1389,13 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        # If we're intersecting with Reals, ensure the value is real\n+        if any(arg == S.Reals for arg in self.args):\n+            try:\n+                if other.is_complex and other.is_real is False:\n+                    return False\n+            except AttributeError:\n+                pass\n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..5dcc452 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,6 +530,12 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n+        if any((arg == S.Reals for arg in self.args)):\n+            try:\n+                if other.is_complex and other.is_real is False:\n+                    return False\n+            except AttributeError:\n+                pass\n         return And(*[set.contains(other) for set in self.args])\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "normalized_occurrence": 1}
