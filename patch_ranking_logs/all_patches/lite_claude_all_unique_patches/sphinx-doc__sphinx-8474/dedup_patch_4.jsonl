{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8474", "model_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex 9c4674f..102e069 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -101,26 +101,27 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n \n         return {self.config.master_doc: new_secnumbers}\n \n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        # Assemble toc_fignumbers to resolve figure numbers on SingleHTML.\n-        # Merge all fignumbers to single fignumber.\n+\n+\n+    def assemble_toc_tablenumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        # Assemble toc_tablenumbers to resolve table numbers on SingleHTML.\n+        # Merge all tablenumbers to single tablenumber.\n         #\n         # Note: current Sphinx has refid confliction in singlehtml mode.\n         #       To avoid the problem, it replaces key of secnumbers to\n         #       tuple of docname and refid.\n         #\n         #       There are related codes in inline_all_toctres() and\n-        #       HTMLTranslter#add_fignumber().\n-        new_fignumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n-        # {'foo': {'figure': {'id2': (2,), 'id1': (1,)}}, 'bar': {'figure': {'id1': (3,)}}}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = \"%s/%s\" % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-\n-        return {self.config.master_doc: new_fignumbers}\n+        #       HTMLTranslter#add_tablenumber().\n+        new_tablenumbers = {}  # type: Dict[str, Dict[str, Tuple[int, ...]]]\n+        for docname, tablenumlist in self.env.toc_tablenumbers.items():\n+            for tabletype, tablenums in tablenumlist.items():\n+                alias = \"%s/%s\" % (docname, tabletype)\n+                new_tablenumbers.setdefault(alias, {})\n+                for id, tablenum in tablenums.items():\n+                    new_tablenumbers[alias][id] = tablenum\n+\n+        return {self.config.master_doc: new_tablenumbers}\n \n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         # no relation links...\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/singlehtml.py b/sphinx/builders/singlehtml.py\nindex 542a568..24f42d0 100644\n--- a/sphinx/builders/singlehtml.py\n+++ b/sphinx/builders/singlehtml.py\n@@ -58,15 +58,15 @@ class SingleFileHTMLBuilder(StandaloneHTMLBuilder):\n                 alias = '%s/%s' % (docname, id)\n                 new_secnumbers[alias] = secnum\n         return {self.config.master_doc: new_secnumbers}\n-    def assemble_toc_fignumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n-        new_fignumbers = {}\n-        for docname, fignumlist in self.env.toc_fignumbers.items():\n-            for figtype, fignums in fignumlist.items():\n-                alias = '%s/%s' % (docname, figtype)\n-                new_fignumbers.setdefault(alias, {})\n-                for id, fignum in fignums.items():\n-                    new_fignumbers[alias][id] = fignum\n-        return {self.config.master_doc: new_fignumbers}\n+    def assemble_toc_tablenumbers(self) -> Dict[str, Dict[str, Dict[str, Tuple[int, ...]]]]:\n+        new_tablenumbers = {}\n+        for docname, tablenumlist in self.env.toc_tablenumbers.items():\n+            for tabletype, tablenums in tablenumlist.items():\n+                alias = '%s/%s' % (docname, tabletype)\n+                new_tablenumbers.setdefault(alias, {})\n+                for id, tablenum in tablenums.items():\n+                    new_tablenumbers[alias][id] = tablenum\n+        return {self.config.master_doc: new_tablenumbers}\n     def get_doc_context(self, docname: str, body: str, metatags: str) -> Dict:\n         toctree = TocTree(self.env).get_toctree_for(self.config.master_doc, self, False)\n         if toctree:\n", "normalized_occurrence": 1}
