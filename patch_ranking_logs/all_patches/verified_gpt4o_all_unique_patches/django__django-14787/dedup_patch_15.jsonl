{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..f2d9e41 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -40,6 +40,8 @@ def _multi_decorate(decorators, method):\n         bound_method = partial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        # Update the wrapper to ensure it retains attributes from the original method\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..aeafb94 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -18,6 +18,7 @@ def _multi_decorate(decorators, method):\n         bound_method = partial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n", "normalized_occurrence": 9}
