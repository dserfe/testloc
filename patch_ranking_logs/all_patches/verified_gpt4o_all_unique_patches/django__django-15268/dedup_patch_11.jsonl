{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..2d316c9 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -62,8 +63,18 @@ class MigrationOptimizer:\n                     new_operations.extend(operations[i + j + 2:])\n                     return new_operations\n                 elif not result:\n+                    # If we encounter two consecutive AlterFooTogether operations,\n+                    # we attempt to merge them if possible.\n+                    if (isinstance(operation, (migrations.AlterUniqueTogether, migrations.AlterIndexTogether)) and\n+                            isinstance(other, type(operation)) and\n+                            operation.name == other.name):\n+                        # Merge unique_together or index_together constraints\n+                        merged_value = operation.together.union(other.together)\n+                        new_operations.append(type(operation)(name=operation.name, together=merged_value))\n+                        operations = operations[:i] + operations[i + j + 2:]\n+                        break\n                     # Can't perform a right reduction.\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..782384c 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -29,6 +29,11 @@ class MigrationOptimizer:\n                     new_operations.extend(operations[i + j + 2:])\n                     return new_operations\n                 elif not result:\n+                    if isinstance(operation, (migrations.AlterUniqueTogether, migrations.AlterIndexTogether)) and isinstance(other, type(operation)) and (operation.name == other.name):\n+                        merged_value = operation.together.union(other.together)\n+                        new_operations.append(type(operation)(name=operation.name, together=merged_value))\n+                        operations = operations[:i] + operations[i + j + 2:]\n+                        break\n                     right = False\n             else:\n                 new_operations.append(operation)\n", "normalized_occurrence": 1}
