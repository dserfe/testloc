{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a6c5dd7..6ca359b 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -85,7 +85,7 @@ class Aggregate(Func):\n                         else repr(before_resolved)\n                     )\n                     raise FieldError(\n-                        \"Cannot compute %s('%s'): '%s' is an aggregate\"\n+                        \"Cannot compute %s('%s'): '%s' is an aggregate or window function\"\n                         % (c.name, name, name)\n                     )\n         if (default := c.default) is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex e18ccd1..d57e059 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -44,7 +44,7 @@ class Aggregate(Func):\n                 if expr.contains_aggregate:\n                     before_resolved = self.get_source_expressions()[index]\n                     name = before_resolved.name if hasattr(before_resolved, 'name') else repr(before_resolved)\n-                    raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate\" % (c.name, name, name))\n+                    raise FieldError(\"Cannot compute %s('%s'): '%s' is an aggregate or window function\" % (c.name, name, name))\n         if (default := c.default) is None:\n             return c\n         if hasattr(default, 'resolve_expression'):\n", "normalized_occurrence": 1}
