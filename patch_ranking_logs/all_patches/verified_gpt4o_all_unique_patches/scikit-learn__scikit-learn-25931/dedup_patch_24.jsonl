{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..bac3048 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -346,6 +346,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n \n         # else, define offset_ wrt contamination parameter\n         self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        if hasattr(X, \"columns\"):\n+            self.feature_names_in_ = X.columns.to_numpy()\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..1cea378 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -47,6 +47,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             self.offset_ = -0.5\n             return self\n         self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        if hasattr(X, 'columns'):\n+            self.feature_names_in_ = X.columns.to_numpy()\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
