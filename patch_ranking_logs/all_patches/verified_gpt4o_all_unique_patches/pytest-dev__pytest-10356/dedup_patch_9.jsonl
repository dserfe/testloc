{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..4b42a32 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -357,7 +357,9 @@ class MarkDecorator:\n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n     \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n+    mark_list = []\n+    for cls in obj.__class__.__mro__:\n+        mark_list += getattr(cls, \"pytestmark\", [])\n     if not isinstance(mark_list, list):\n         mark_list = [mark_list]\n     return normalize_mark_list(mark_list)\n@@ -388,7 +390,7 @@ def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    obj.pytestmark = list({m.name: m for m in get_unpacked_marks(obj) + [mark]}.values())\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..a87648e 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,7 +161,9 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n+    mark_list = []\n+    for cls in obj.__class__.__mro__:\n+        mark_list += getattr(cls, 'pytestmark', [])\n     if not isinstance(mark_list, list):\n         mark_list = [mark_list]\n     return normalize_mark_list(mark_list)\n@@ -173,7 +175,7 @@ def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iter\n         yield mark_obj\n def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    obj.pytestmark = list({m.name: m for m in get_unpacked_marks(obj) + [mark]}.values())\n if TYPE_CHECKING:\n     from _pytest.scope import _ScopeName\n     class _SkipMarkDecorator(MarkDecorator):\n", "normalized_occurrence": 1}
