{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..da68567 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1465,12 +1465,20 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             self.autoscale_None(value)\n             if self.vmin > self.vmax:\n                 raise ValueError(\"vmin must be less or equal to vmax\")\n+            if self.vmin >= self.vmax:\n+                raise ValueError(\"vmin must be less than vmax\")\n             if self.vmin == self.vmax:\n                 return np.full_like(value, 0)\n             if clip is None:\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            # Ensure vmin and vmax are positive when using LogNorm\n+            if isinstance(self, LogNorm):\n+                if self.vmin <= 0:\n+                    self.vmin = np.finfo(float).eps\n+                if self.vmax <= 0:\n+                    self.vmax = np.finfo(float).eps\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..cce5653 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1261,12 +1261,19 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             self.autoscale_None(value)\n             if self.vmin > self.vmax:\n                 raise ValueError('vmin must be less or equal to vmax')\n+            if self.vmin >= self.vmax:\n+                raise ValueError('vmin must be less than vmax')\n             if self.vmin == self.vmax:\n                 return np.full_like(value, 0)\n             if clip is None:\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            if isinstance(self, LogNorm):\n+                if self.vmin <= 0:\n+                    self.vmin = np.finfo(float).eps\n+                if self.vmax <= 0:\n+                    self.vmax = np.finfo(float).eps\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n", "normalized_occurrence": 1}
