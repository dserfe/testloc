{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..f4e06ed 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -433,9 +433,17 @@ class LogCaptureFixture:\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        # Ensure that the log level is restored after the test\n+        request.addfinalizer(self._finalize)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n+def _finalize(self):\n+    \"\"\"Restore log levels to their initial values.\"\"\"\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    self.handler.setLevel(logging.NOTSET)\n+\n     @contextmanager\n     def at_level(\n         self, level: int, logger: Optional[str] = None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..99fa4de 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -190,8 +190,13 @@ class LogCaptureFixture:\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        request.addfinalizer(self._finalize)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+def _finalize(self):\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    self.handler.setLevel(logging.NOTSET)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n", "normalized_occurrence": 1}
