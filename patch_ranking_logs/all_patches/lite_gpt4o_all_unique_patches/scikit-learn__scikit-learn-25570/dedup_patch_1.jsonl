{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..1771a32 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -733,7 +733,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n \n-        result = self._fit_transform(X, y, _fit_transform_one)\n+        result = [res for res in self._fit_transform(X, y, _fit_transform_one) if res is not None and res[0].shape[1] > 0]\n \n         if not result:\n             self._update_fitted_transformers([])\n@@ -757,6 +757,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n \n+        if not Xs:\n+            return pd.DataFrame(index=X.index)\n         return self._hstack(list(Xs))\n \n     def transform(self, X):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..3876ea9 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -207,7 +207,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._validate_transformers()\n         self._validate_column_callables(X)\n         self._validate_remainder(X)\n-        result = self._fit_transform(X, y, _fit_transform_one)\n+        result = [res for res in self._fit_transform(X, y, _fit_transform_one) if res is not None and res[0].shape[1] > 0]\n         if not result:\n             self._update_fitted_transformers([])\n             return np.zeros((X.shape[0], 0))\n@@ -222,6 +222,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         self._update_fitted_transformers(transformers)\n         self._validate_output(Xs)\n         self._record_output_indices(Xs)\n+        if not Xs:\n+            return pd.DataFrame(index=X.index)\n         return self._hstack(list(Xs))\n     def transform(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
