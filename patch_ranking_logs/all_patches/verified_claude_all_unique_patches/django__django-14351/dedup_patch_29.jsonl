{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..5ce491e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1244,6 +1244,16 @@ class Query(BaseExpression):\n         \"\"\"\n         if isinstance(filter_expr, dict):\n             raise FieldError(\"Cannot parse keyword query as dict\")\n+        arg, value = filter_expr\n+        if not arg:\n+            raise FieldError(\"Cannot parse keyword query %r\" % arg)\n+        lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n+        \n+        # Add special case for __in lookups to only select ID field\n+        if lookups and lookups[-1] == 'in' and isinstance(value, Query) and not parts[-1].endswith('__id'):\n+            value = value.model._base_manager.filter(\n+                pk__in=value.values('pk')\n+            ).values('pk')\n         if isinstance(filter_expr, Q):\n             return self._add_q(\n                 filter_expr,\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..1efe4f8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -668,6 +668,12 @@ class Query(BaseExpression):\n     def build_filter(self, filter_expr, branch_negated=False, current_negated=False, can_reuse=None, allow_joins=True, split_subq=True, check_filterable=True):\n         if isinstance(filter_expr, dict):\n             raise FieldError('Cannot parse keyword query as dict')\n+        arg, value = filter_expr\n+        if not arg:\n+            raise FieldError('Cannot parse keyword query %r' % arg)\n+        lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n+        if lookups and lookups[-1] == 'in' and isinstance(value, Query) and (not parts[-1].endswith('__id')):\n+            value = value.model._base_manager.filter(pk__in=value.values('pk')).values('pk')\n         if isinstance(filter_expr, Q):\n             return self._add_q(filter_expr, branch_negated=branch_negated, current_negated=current_negated, used_aliases=can_reuse, allow_joins=allow_joins, split_subq=split_subq, check_filterable=check_filterable)\n         if hasattr(filter_expr, 'resolve_expression'):\n", "normalized_occurrence": 1}
