{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex ae1df59..50e43e0 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -1113,6 +1113,16 @@ class _EvaluatorPrinter:\n         str_expr = self._exprrepr(expr)\n         if '\\n' in str_expr:\n             str_expr = '({})'.format(str_expr)\n+        # Ensure proper parentheses for modulo operations in negations and multiplications\n+        if '%' in str_expr and (str_expr.startswith('-') or '*' in str_expr):\n+            parts = str_expr.split('%')\n+            if len(parts) == 2:\n+                if str_expr.startswith('-'):\n+                    str_expr = '-({} % {})'.format(parts[0][1:].strip(), parts[1].strip())\n+                else:\n+                    left, right = parts[0].strip(), parts[1].strip()\n+                    if '*' in left:\n+                        str_expr = '({}) % {}'.format(left, right)\n         funcbody.append('return {}'.format(str_expr))\n \n         funclines = [funcsig]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex c5ff69c..8d558cf 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -289,6 +289,15 @@ class _EvaluatorPrinter:\n         str_expr = self._exprrepr(expr)\n         if '\\n' in str_expr:\n             str_expr = '({})'.format(str_expr)\n+        if '%' in str_expr and (str_expr.startswith('-') or '*' in str_expr):\n+            parts = str_expr.split('%')\n+            if len(parts) == 2:\n+                if str_expr.startswith('-'):\n+                    str_expr = '-({} % {})'.format(parts[0][1:].strip(), parts[1].strip())\n+                else:\n+                    left, right = (parts[0].strip(), parts[1].strip())\n+                    if '*' in left:\n+                        str_expr = '({}) % {}'.format(left, right)\n         funcbody.append('return {}'.format(str_expr))\n         funclines = [funcsig]\n         funclines.extend(['    ' + line for line in funcbody])\n", "normalized_occurrence": 1}
