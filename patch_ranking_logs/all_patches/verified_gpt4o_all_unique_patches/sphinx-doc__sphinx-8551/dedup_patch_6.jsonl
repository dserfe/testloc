{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..3a3495b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1250,27 +1250,23 @@ class PythonDomain(Domain):\n \n         newname = None\n         if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n+            if modname:\n+                if classname:\n                     fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                    if fullname in self.objects:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n+                    if modname + '.' + name in self.objects:\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+            if not newname and classname and classname + '.' + name in self.objects:\n+                newname = classname + '.' + name\n+            if not newname and name in self.objects:\n+                newname = name\n+            if not newname:\n+                # \"fuzzy\" searching mode\n+                searchname = '.' + name\n+                matches = [(oname, self.objects[oname]) for oname in self.objects\n+                           if oname.endswith(searchname)]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..a503f2d 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -749,23 +749,21 @@ class PythonDomain(Domain):\n         matches = []\n         newname = None\n         if searchmode == 1:\n-            if type is None:\n-                objtypes = list(self.object_types)\n-            else:\n-                objtypes = self.objtypes_for_role(type)\n-            if objtypes is not None:\n-                if modname and classname:\n+            if modname:\n+                if classname:\n                     fullname = modname + '.' + classname + '.' + name\n-                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                    if fullname in self.objects:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n+                    if modname + '.' + name in self.objects:\n                         newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+            if not newname and classname and (classname + '.' + name in self.objects):\n+                newname = classname + '.' + name\n+            if not newname and name in self.objects:\n+                newname = name\n+            if not newname:\n+                searchname = '.' + name\n+                matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname)]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
