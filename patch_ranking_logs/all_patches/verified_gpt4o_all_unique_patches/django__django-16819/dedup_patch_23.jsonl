{"model_name_or_path": "agentless", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex a9ec258..884f040 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -40,30 +41,24 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1 :]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1 : i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            if isinstance(operation, AddIndex):\n+                # Check for a matching RemoveIndex operation\n+                for j in range(i + 1, len(operations)):\n+                    if (\n+                        isinstance(operations[j], RemoveIndex) and\n+                        operations[j].name == operation.index.name and\n+                        operations[j].model_name == operation.model_name\n+                    ):\n+                        # Skip both operations\n+                        i = j + 1\n                         break\n-                    new_operations.extend(operations[i + j + 2 :])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n+                else:\n+                    new_operations.append(operation)\n+                    i += 1\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+                i += 1\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..a682b93 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,25 +11,18 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            if isinstance(operation, AddIndex):\n+                for j in range(i + 1, len(operations)):\n+                    if isinstance(operations[j], RemoveIndex) and operations[j].name == operation.index.name and (operations[j].model_name == operation.model_name):\n+                        i = j + 1\n                         break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    right = False\n+                else:\n+                    new_operations.append(operation)\n+                    i += 1\n             else:\n                 new_operations.append(operation)\n+                i += 1\n         return new_operations\n\\ No newline at end of file\n", "normalized_occurrence": 1}
