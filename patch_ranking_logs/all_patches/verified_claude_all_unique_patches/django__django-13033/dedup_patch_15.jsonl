{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..ac94911 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1895,6 +1895,9 @@ class Query(BaseExpression):\n \n         If 'ordering' is empty, clear all ordering from the query.\n         \"\"\"\n+        # Clear any existing ordering when explicit ordering is provided\n+        if ordering:\n+            self.clear_ordering(force_empty=True)\n         errors = []\n         for item in ordering:\n             if isinstance(item, str):\n", "occurrence": 3, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..2495b38 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1007,6 +1007,8 @@ class Query(BaseExpression):\n                 names = sorted([*get_field_names_from_opts(opts), *self.extra, *self.annotation_select, *self._filtered_relations])\n                 raise FieldError('Cannot resolve keyword %r into field. Choices are: %s' % (name, ', '.join(names)))\n     def add_ordering(self, *ordering):\n+        if ordering:\n+            self.clear_ordering(force_empty=True)\n         errors = []\n         for item in ordering:\n             if isinstance(item, str):\n", "normalized_occurrence": 5}
