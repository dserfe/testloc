{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6386", "model_patch": "diff --git a/pylint/config/option_manager_mixin.py b/pylint/config/option_manager_mixin.py\nindex d22ea01..4f85f2e 100644\n--- a/pylint/config/option_manager_mixin.py\n+++ b/pylint/config/option_manager_mixin.py\n@@ -166,6 +166,8 @@ class OptionsManagerMixIn:\n             del optdict[\"default\"]\n         args = [\"--\" + str(opt)]\n         if \"short\" in optdict:\n+            if optdict[\"short\"] == \"v\":\n+                optdict[\"action\"] = \"store_true\"\n             self._short_options[optdict[\"short\"]] = opt\n             args.append(\"-\" + optdict[\"short\"])\n             del optdict[\"short\"]\n@@ -184,8 +186,10 @@ class OptionsManagerMixIn:\n             # short option, get its long equivalent\n             opt = self._short_options[opt[1:]]\n         # trick since we can't set action='store_true' on options\n-        if value is None:\n+        if value is None and opt != \"verbose\":\n             value = 1\n+        elif opt == \"verbose\":\n+            value = True\n         self.global_set_option(opt, value)\n \n     def global_set_option(self, opt, value):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/option_manager_mixin.py b/pylint/config/option_manager_mixin.py\nindex 073d6af..d67db48 100644\n--- a/pylint/config/option_manager_mixin.py\n+++ b/pylint/config/option_manager_mixin.py\n@@ -100,6 +100,8 @@ class OptionsManagerMixIn:\n             del optdict['default']\n         args = ['--' + str(opt)]\n         if 'short' in optdict:\n+            if optdict['short'] == 'v':\n+                optdict['action'] = 'store_true'\n             self._short_options[optdict['short']] = opt\n             args.append('-' + optdict['short'])\n             del optdict['short']\n@@ -112,8 +114,10 @@ class OptionsManagerMixIn:\n             opt = opt[2:]\n         else:\n             opt = self._short_options[opt[1:]]\n-        if value is None:\n+        if value is None and opt != 'verbose':\n             value = 1\n+        elif opt == 'verbose':\n+            value = True\n         self.global_set_option(opt, value)\n     def global_set_option(self, opt, value):\n         self._all_options[opt].set_option(opt, value)\n", "normalized_occurrence": 1}
