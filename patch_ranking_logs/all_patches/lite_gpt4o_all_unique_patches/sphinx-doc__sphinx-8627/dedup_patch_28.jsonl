{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..cd72b15 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -18,6 +18,8 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+import struct\n+from typing import get_type_hints\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -28,11 +30,20 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            hints = get_type_hints(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    ann = hints.get(param.name, param.annotation)\n+                    if ann is struct.Struct:\n+                        annotation[param.name] = 'struct.Struct'\n+                    else:\n+                        annotation[param.name] = typing.stringify(ann)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                retann = hints.get('return', sig.return_annotation)\n+                if retann is struct.Struct:\n+                    annotation['return'] = 'struct.Struct'\n+                else:\n+                    annotation['return'] = typing.stringify(retann)\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..98b6148 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -6,17 +6,28 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+import struct\n+from typing import get_type_hints\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            hints = get_type_hints(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    ann = hints.get(param.name, param.annotation)\n+                    if ann is struct.Struct:\n+                        annotation[param.name] = 'struct.Struct'\n+                    else:\n+                        annotation[param.name] = typing.stringify(ann)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                retann = hints.get('return', sig.return_annotation)\n+                if retann is struct.Struct:\n+                    annotation['return'] = 'struct.Struct'\n+                else:\n+                    annotation['return'] = typing.stringify(retann)\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
