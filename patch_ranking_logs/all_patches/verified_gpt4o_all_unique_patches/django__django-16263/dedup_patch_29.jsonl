{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..7c467d6 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,20 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # Strip out annotations that are not referenced by filters, other annotations, or ordering.\n+        if obj.annotations:\n+            referenced_annotations = set()\n+            if obj.where:\n+                referenced_annotations.update(obj.where.get_source_expressions())\n+            if obj.order_by:\n+                referenced_annotations.update(obj.order_by)\n+            if obj.group_by:\n+                referenced_annotations.update(obj.group_by)\n+            if obj.having:\n+                referenced_annotations.update(obj.having.get_source_expressions())\n+            for alias in list(obj.annotations):\n+                if alias not in referenced_annotations:\n+                    del obj.annotations[alias]\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..6400ffd 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,19 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        if obj.annotations:\n+            referenced_annotations = set()\n+            if obj.where:\n+                referenced_annotations.update(obj.where.get_source_expressions())\n+            if obj.order_by:\n+                referenced_annotations.update(obj.order_by)\n+            if obj.group_by:\n+                referenced_annotations.update(obj.group_by)\n+            if obj.having:\n+                referenced_annotations.update(obj.having.get_source_expressions())\n+            for alias in list(obj.annotations):\n+                if alias not in referenced_annotations:\n+                    del obj.annotations[alias]\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
