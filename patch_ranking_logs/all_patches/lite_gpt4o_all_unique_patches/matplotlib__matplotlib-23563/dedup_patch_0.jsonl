{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23563", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..02acb3a 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -192,10 +192,12 @@ class Line3D(lines.Line2D):\n         -----\n         Accepts x, y, z arguments or a single array-like (x, y, z)\n         \"\"\"\n-        if len(args) == 1:\n-            self._verts3d = args[0]\n+        if len(args) == 1 and isinstance(args[0], (list, tuple, np.ndarray)) and len(args[0]) == 3:\n+            self._verts3d = tuple(map(np.asarray, args[0]))\n+        elif len(args) == 3:\n+            self._verts3d = tuple(map(np.asarray, args))\n         else:\n-            self._verts3d = args\n+            raise ValueError(\"Expecting 3 arrays/lists for x, y, z data\")\n         self.stale = True\n \n     def get_data_3d(self):\n@@ -222,7 +224,7 @@ def line_2d_to_3d(line, zs=0, zdir='z'):\n     \"\"\"Convert a 2D line to 3D.\"\"\"\n \n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line.__class__ = Line3D(line.get_xdata(), line.get_ydata(), zs)\n \n \n def _path_to_3d_segment(path, zs=0, zdir='z'):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..d2ca315 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -72,10 +72,12 @@ class Line3D(lines.Line2D):\n         self._verts3d = juggle_axes(xs, ys, zs, zdir)\n         self.stale = True\n     def set_data_3d(self, *args):\n-        if len(args) == 1:\n-            self._verts3d = args[0]\n+        if len(args) == 1 and isinstance(args[0], (list, tuple, np.ndarray)) and (len(args[0]) == 3):\n+            self._verts3d = tuple(map(np.asarray, args[0]))\n+        elif len(args) == 3:\n+            self._verts3d = tuple(map(np.asarray, args))\n         else:\n-            self._verts3d = args\n+            raise ValueError('Expecting 3 arrays/lists for x, y, z data')\n         self.stale = True\n     def get_data_3d(self):\n         return self._verts3d\n@@ -88,7 +90,7 @@ class Line3D(lines.Line2D):\n         self.stale = False\n def line_2d_to_3d(line, zs=0, zdir='z'):\n     line.__class__ = Line3D\n-    line.set_3d_properties(zs, zdir)\n+    line.__class__ = Line3D(line.get_xdata(), line.get_ydata(), zs)\n def _path_to_3d_segment(path, zs=0, zdir='z'):\n     zs = np.broadcast_to(zs, len(path))\n     pathsegs = path.iter_segments(simplify=False, curves=False)\n", "normalized_occurrence": 1}
