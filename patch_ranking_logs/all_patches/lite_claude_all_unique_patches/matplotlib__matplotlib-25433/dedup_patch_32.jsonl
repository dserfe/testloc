{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..f34ef39 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -872,6 +872,7 @@ class RangeSlider(SliderBase):\n         if event.name == \"button_press_event\" and event.inaxes == self.ax:\n             self.drag_active = True\n             event.canvas.grab_mouse(self.ax)\n+            self.canvas = event.canvas  # Store canvas reference for cleanup\n \n         if not self.drag_active:\n             return\n@@ -913,6 +914,16 @@ class RangeSlider(SliderBase):\n             _, s1, s2, _ = self._fmt.format_ticks(\n                 [self.valmin, *val, self.valmax]\n             )\n+            \n+    def destroy(self, *args):\n+        \"\"\"\n+        Disconnect bindings and release mouse grab before destroying.\n+        \"\"\"\n+        if self.canvas is not None:\n+            if self.drag_active:\n+                self.drag_active = False\n+                self.canvas.release_mouse(self.ax)\n+                self._active_handle = None\n             # fmt.get_offset is actually the multiplicative factor, if any.\n             s1 += self._fmt.get_offset()\n             s2 += self._fmt.get_offset()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..a4de340 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -705,6 +705,7 @@ class RangeSlider(SliderBase):\n         if event.name == 'button_press_event' and event.inaxes == self.ax:\n             self.drag_active = True\n             event.canvas.grab_mouse(self.ax)\n+            self.canvas = event.canvas\n         if not self.drag_active:\n             return\n         elif event.name == 'button_release_event' or (event.name == 'button_press_event' and event.inaxes != self.ax):\n@@ -730,6 +731,16 @@ class RangeSlider(SliderBase):\n             return f'({self.valfmt % val[0]}, {self.valfmt % val[1]})'\n         else:\n             _, s1, s2, _ = self._fmt.format_ticks([self.valmin, *val, self.valmax])\n+\n+    def destroy(self, *args):\n+        \"\"\"\n+        Disconnect bindings and release mouse grab before destroying.\n+        \"\"\"\n+        if self.canvas is not None:\n+            if self.drag_active:\n+                self.drag_active = False\n+                self.canvas.release_mouse(self.ax)\n+                self._active_handle = None\n             s1 += self._fmt.get_offset()\n             s2 += self._fmt.get_offset()\n             return f'({s1}, {s2})'\n", "normalized_occurrence": 1}
