{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..ae3c087 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -111,8 +111,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n+    processed_names = set()\n     for name, annotation in annotations.items():\n-        if name == 'return':\n+        if name == 'return' or name in processed_names:\n             continue\n \n         arg = arguments.get(name, {})\n@@ -127,6 +128,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n+        processed_names.add(name)\n+\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n         if annotation == 'None' and suppress_rtype:\n@@ -167,14 +170,16 @@ def augment_descriptions_with_types(\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n+    processed_names = set()\n     for name in annotations:\n-        if name in ('return', 'returns'):\n+        if name in ('return', 'returns') or name in processed_names:\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n+        processed_names.add(name)\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..a34c9f3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -82,8 +82,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n+    processed_names = set()\n     for name, annotation in annotations.items():\n-        if name == 'return':\n+        if name == 'return' or name in processed_names:\n             continue\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n@@ -96,6 +97,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n+        processed_names.add(name)\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n         if annotation == 'None' and suppress_rtype:\n@@ -125,14 +127,16 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n+    processed_names = set()\n     for name in annotations:\n-        if name in ('return', 'returns'):\n+        if name in ('return', 'returns') or name in processed_names:\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n+        processed_names.add(name)\n     if 'return' in annotations:\n         rtype = annotations['return']\n         if 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n", "normalized_occurrence": 1}
