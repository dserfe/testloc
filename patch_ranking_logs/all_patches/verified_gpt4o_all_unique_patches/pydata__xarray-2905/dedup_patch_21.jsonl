{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex d82c4a0..90548f8 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,17 +855,20 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n-            if value.ndim > len(dims):\n+            if hasattr(value, 'values'):\n+                value_data = value\n+            else:\n+                value_data = as_compatible_data(value)\n+            if value_data.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n                     \"broadcast to indexing result with %s dimensions\"\n-                    % (value.shape, len(dims))\n+                    % (value_data.shape, len(dims))\n                 )\n-            if value.ndim == 0:\n-                value = Variable((), value)\n+            if value_data.ndim == 0:\n+                value = Variable((), value_data)\n             else:\n-                value = Variable(dims[-value.ndim :], value)\n+                value = Variable(dims[-value_data.ndim :], value_data)\n         # broadcast to become assignable\n         value = value.set_dims(dims).data\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex de67650..1c2b293 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -622,13 +622,16 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         \"\"\"\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n-            if value.ndim > len(dims):\n-                raise ValueError('shape mismatch: value array of shape %s could not be broadcast to indexing result with %s dimensions' % (value.shape, len(dims)))\n-            if value.ndim == 0:\n-                value = Variable((), value)\n+            if hasattr(value, 'values'):\n+                value_data = value\n             else:\n-                value = Variable(dims[-value.ndim:], value)\n+                value_data = as_compatible_data(value)\n+            if value_data.ndim > len(dims):\n+                raise ValueError('shape mismatch: value array of shape %s could not be broadcast to indexing result with %s dimensions' % (value_data.shape, len(dims)))\n+            if value_data.ndim == 0:\n+                value = Variable((), value_data)\n+            else:\n+                value = Variable(dims[-value_data.ndim:], value_data)\n         value = value.set_dims(dims).data\n         if new_order:\n             value = duck_array_ops.asarray(value)\n", "normalized_occurrence": 1}
