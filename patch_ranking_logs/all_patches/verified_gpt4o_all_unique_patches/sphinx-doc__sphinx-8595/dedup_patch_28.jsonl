{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..d21efd6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1016,7 +1016,7 @@ class ModuleDocumenter(Documenter):\n         ret = super().import_object(raiseerror)\n \n         try:\n-            if not self.options.ignore_module_all:\n+            if not self.options.ignore_module_all and hasattr(self.object, '__all__'):\n                 self.__all__ = inspect.getall(self.object)\n         except AttributeError as exc:\n             # __all__ raises an error.\n@@ -1074,9 +1074,7 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n+            if self.__all__ is None:\n                 return True, list(members.values())\n             else:\n                 for member in members.values():\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..057c010 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -535,7 +535,7 @@ class ModuleDocumenter(Documenter):\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n         try:\n-            if not self.options.ignore_module_all:\n+            if not self.options.ignore_module_all and hasattr(self.object, '__all__'):\n                 self.__all__ = inspect.getall(self.object)\n         except AttributeError as exc:\n             logger.warning(__('%s.__all__ raises an error. Ignored: %r'), (self.fullname, exc), type='autodoc')\n@@ -575,7 +575,7 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+            if self.__all__ is None:\n                 return (True, list(members.values()))\n             else:\n                 for member in members.values():\n", "normalized_occurrence": 1}
