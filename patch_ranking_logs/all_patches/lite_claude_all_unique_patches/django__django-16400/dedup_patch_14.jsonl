{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex c21d9d7..7c474f6 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -87,10 +87,12 @@ def create_permissions(\n     # Find all the Permissions that have a content_type for a model we're\n     # looking for.  We don't need to check for codenames since we already have\n     # a list of the ones we're going to create.\n+    # Ensure we have the complete list of content types from the correct database\n+    ctypes_ids = [ct.pk for ct in ctypes]\n     all_perms = set(\n         Permission.objects.using(using)\n         .filter(\n-            content_type__in=ctypes,\n+            content_type_id__in=ctypes_ids,\n         )\n         .values_list(\"content_type\", \"codename\")\n     )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex eb43af8..748ec6d 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -32,7 +32,8 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_\n         ctypes.add(ctype)\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n-    all_perms = set(Permission.objects.using(using).filter(content_type__in=ctypes).values_list('content_type', 'codename'))\n+    ctypes_ids = [ct.pk for ct in ctypes]\n+    all_perms = set(Permission.objects.using(using).filter(content_type_id__in=ctypes_ids).values_list('content_type', 'codename'))\n     perms = [Permission(codename=codename, name=name, content_type=ct) for ct, (codename, name) in searched_perms if (ct.pk, codename) not in all_perms]\n     Permission.objects.using(using).bulk_create(perms)\n     if verbosity >= 2:\n", "normalized_occurrence": 1}
