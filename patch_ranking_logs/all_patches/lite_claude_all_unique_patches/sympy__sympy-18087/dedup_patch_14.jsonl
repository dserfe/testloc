{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 73bbc98..170b600 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -471,6 +471,26 @@ def trigsimp(expr, **opts):\n \n     expr = sympify(expr)\n \n+    # Special case: handle sqrt(sin(x)**2) type expressions carefully\n+    from sympy import sqrt, sin, cos, Abs\n+    from sympy.core.function import ArgumentIndexError\n+    if expr.has(sqrt) and expr.has(sin) and expr.has(cos):\n+        def _handle_sqrt_trig(ex):\n+            if ex.is_Atom:\n+                return ex\n+            if (ex.func == sqrt and \n+                len(ex.args) == 1 and \n+                ex.args[0].is_Pow and \n+                ex.args[0].exp == 2 and \n+                isinstance(ex.args[0].base, (sin, cos))):\n+                # For sqrt(sin(x)**2) or sqrt(cos(x)**2), only simplify if x is real\n+                arg = ex.args[0].base.args[0]\n+                if arg.is_real is True:\n+                    return Abs(ex.args[0].base)\n+                return ex\n+            return ex.func(*[_handle_sqrt_trig(arg) for arg in ex.args])\n+        expr = _handle_sqrt_trig(expr)\n+\n     _eval_trigsimp = getattr(expr, '_eval_trigsimp', None)\n     if _eval_trigsimp is not None:\n         return _eval_trigsimp(**opts)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex fb82ea6..97469f7 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -146,6 +146,19 @@ _trigs = (TrigonometricFunction, HyperbolicFunction)\n def trigsimp(expr, **opts):\n     from sympy.simplify.fu import fu\n     expr = sympify(expr)\n+    from sympy import sqrt, sin, cos, Abs\n+    from sympy.core.function import ArgumentIndexError\n+    if expr.has(sqrt) and expr.has(sin) and expr.has(cos):\n+        def _handle_sqrt_trig(ex):\n+            if ex.is_Atom:\n+                return ex\n+            if ex.func == sqrt and len(ex.args) == 1 and ex.args[0].is_Pow and (ex.args[0].exp == 2) and isinstance(ex.args[0].base, (sin, cos)):\n+                arg = ex.args[0].base.args[0]\n+                if arg.is_real is True:\n+                    return Abs(ex.args[0].base)\n+                return ex\n+            return ex.func(*[_handle_sqrt_trig(arg) for arg in ex.args])\n+        expr = _handle_sqrt_trig(expr)\n     _eval_trigsimp = getattr(expr, '_eval_trigsimp', None)\n     if _eval_trigsimp is not None:\n         return _eval_trigsimp(**opts)\n", "normalized_occurrence": 1}
