{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..144e0e0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -933,18 +933,21 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         normalized to unit norm.\n \n     transform_algorithm : {'lasso_lars', 'lasso_cd', 'lars', 'omp', \\\n-    'threshold'}\n+    'threshold'},\n         Algorithm used to transform the data:\n-        lars: uses the least angle regression method (linear_model.lars_path)\n-        lasso_lars: uses Lars to compute the Lasso solution\n-        lasso_cd: uses the coordinate descent method to compute the\n-        Lasso solution (linear_model.Lasso). lasso_lars will be faster if\n-        the estimated components are sparse.\n-        omp: uses orthogonal matching pursuit to estimate the sparse solution\n-        threshold: squashes to zero all coefficients less than alpha from\n-        the projection ``dictionary * X'``\n+        - lars: uses the least angle regression method (linear_model.lars_path)\n+        - lasso_lars: uses Lars to compute the Lasso solution\n+        - lasso_cd: uses the coordinate descent method to compute the\n+          Lasso solution (linear_model.Lasso). lasso_lars will be faster if\n+          the estimated components are sparse.\n+        - omp: uses orthogonal matching pursuit to estimate the sparse solution\n+        - threshold: squashes to zero all coefficients less than alpha from\n+          the projection ``dictionary * X'``\n \n     transform_n_nonzero_coefs : int, ``0.1 * n_features`` by default\n+\n+    transform_max_iter : int, 1000 by default\n+        Maximum number of iterations to perform if `transform_algorithm='lasso_cd'`.\n         Number of nonzero coefficients to target in each column of the\n         solution. This is only used by `algorithm='lars'` and `algorithm='omp'`\n         and is overridden by `alpha` in the `omp` case.\n@@ -992,12 +995,14 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n                  split_sign=False, n_jobs=None, positive_code=False):\n-        self._set_sparse_coding_params(dictionary.shape[0],\n-                                       transform_algorithm,\n-                                       transform_n_nonzero_coefs,\n-                                       transform_alpha, split_sign, n_jobs,\n-                                       positive_code)\n-        self.components_ = dictionary\n+        self.dictionary = dictionary\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.transform_max_iter = transform_max_iter\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n \n     def fit(self, X, y=None):\n         \"\"\"Do nothing and return the estimator unchanged\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..f4f7d60 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -285,8 +285,14 @@ class SparseCodingMixin(TransformerMixin):\n class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = ['dictionary']\n     def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False):\n-        self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n-        self.components_ = dictionary\n+        self.dictionary = dictionary\n+        self.transform_algorithm = transform_algorithm\n+        self.transform_n_nonzero_coefs = transform_n_nonzero_coefs\n+        self.transform_alpha = transform_alpha\n+        self.transform_max_iter = transform_max_iter\n+        self.split_sign = split_sign\n+        self.n_jobs = n_jobs\n+        self.positive_code = positive_code\n     def fit(self, X, y=None):\n         return self\n class DictionaryLearning(BaseEstimator, SparseCodingMixin):\n", "normalized_occurrence": 1}
