{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 1c19fd6..79629ee 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -50,8 +50,9 @@ def python(expr, **settings):\n     (can be passed to the exec() function without any modifications)\"\"\"\n \n     printer = PythonPrinter(settings)\n-    exprp = printer.doprint(expr)\n-\n+    # First collect all symbols by doing a dry run\n+    _ = printer.doprint(expr)\n+    \n     result = ''\n     # Returning found symbols and functions\n     renamings = {}\n@@ -81,12 +82,15 @@ def python(expr, **settings):\n                     break\n         result += newfunctionname + ' = Function(\\'' + functionname + '\\')\\n'\n \n-    if not len(renamings) == 0:\n-        exprp = expr.subs(renamings)\n+    if renamings:\n+        expr = expr.subs(renamings)\n+    \n+    # Now do the actual printing\n+    exprp = printer.doprint(expr)\n     result += 'e = ' + printer._str(exprp)\n     return result\n \n \n def print_python(expr, **settings):\n     \"\"\"Print output of python() function\"\"\"\n-    print(python(expr, **settings))\n+    print(python(expr, **settings))\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..a4dd054 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -630,7 +630,7 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..6fc5d19 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -455,7 +455,7 @@ class StrPrinter(Printer):\n     def _print_Relational(self, expr):\n         charmap = {'==': 'Eq', '!=': 'Ne', ':=': 'Assignment', '+=': 'AddAugmentedAssignment', '-=': 'SubAugmentedAssignment', '*=': 'MulAugmentedAssignment', '/=': 'DivAugmentedAssignment', '%=': 'ModAugmentedAssignment'}\n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)), self._relationals.get(expr.rel_op) or expr.rel_op, self.parenthesize(expr.rhs, precedence(expr)))\n     def _print_ComplexRootOf(self, expr):\n         return 'CRootOf(%s, %d)' % (self._print_Add(expr.expr, order='lex'), expr.index)\ndiff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 2a63937..0d84ca5 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -28,7 +28,7 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n         raise ValueError('Modules in the expression are unacceptable')\n def python(expr, **settings):\n     printer = PythonPrinter(settings)\n-    exprp = printer.doprint(expr)\n+    _ = printer.doprint(expr)\n     result = ''\n     renamings = {}\n     for symbolname in printer.symbols:\n@@ -49,8 +49,9 @@ def python(expr, **settings):\n                     renamings[sympy.Function(functionname)] = sympy.Function(newfunctionname)\n                     break\n         result += newfunctionname + \" = Function('\" + functionname + \"')\\n\"\n-    if not len(renamings) == 0:\n-        exprp = expr.subs(renamings)\n+    if renamings:\n+        expr = expr.subs(renamings)\n+    exprp = printer.doprint(expr)\n     result += 'e = ' + printer._str(exprp)\n     return result\n def print_python(expr, **settings):\n", "normalized_occurrence": 1}
