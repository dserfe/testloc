{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..bb6b05a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,7 +239,16 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max(len(str(value)) for value, _ in self.choices)\n+                if self.max_length < longest_choice:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E007',\n+                        )\n+                    ]\n \n     def _check_choices(self):\n         if not self.choices:\n@@ -280,7 +289,16 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max(len(str(value)) for value, _ in self.choices)\n+                if self.max_length < longest_choice:\n+                    return [\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                            obj=self,\n+                            id='fields.E007',\n+                        )\n+                    ]\n \n         return [\n             checks.Error(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..6e4c7d8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -115,8 +115,10 @@ class Field(RegisterLookupMixin):\n             return [checks.Error('Field names must not contain \"%s\".' % (LOOKUP_SEP,), obj=self, id='fields.E002')]\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n-        else:\n-            return []\n+        elif self.max_length is not None and self.choices:\n+            longest_choice = max((len(str(value)) for value, _ in self.choices))\n+            if self.max_length < longest_choice:\n+                return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E007')]\n     def _check_choices(self):\n         if not self.choices:\n             return []\n@@ -139,7 +141,10 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            if self.max_length is not None and self.choices:\n+                longest_choice = max((len(str(value)) for value, _ in self.choices))\n+                if self.max_length < longest_choice:\n+                    return [checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", obj=self, id='fields.E007')]\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n", "normalized_occurrence": 1}
