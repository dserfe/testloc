{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..aa98eb3 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3453,12 +3453,15 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n \n         def ensure_stackable(val):\n             assign_coords = {variable_dim: val.name}\n+            # ensure the coordinate to be assigned does not conflict\n+            val = val.drop_vars(variable_dim, errors='ignore')\n             for dim in stacking_dims:\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n \n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            if expand_dims:\n+                expand_dims.add(variable_dim)\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..aa1a92a 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1147,11 +1147,13 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                 raise ValueError('All variables in the dataset must contain the dimensions {}.'.format(dims))\n         def ensure_stackable(val):\n             assign_coords = {variable_dim: val.name}\n+            val = val.drop_vars(variable_dim, errors='ignore')\n             for dim in stacking_dims:\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            if expand_dims:\n+                expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n             return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n", "normalized_occurrence": 1}
