{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..77ec439 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,23 +1933,21 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n+            syms = [m for m in self.args if not m.is_number]\n+            if nums:\n                 intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                if nums[0] > other.start:\n+                    intervals.append(Interval(other.start, nums[0], other.left_open, True))\n                 for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    intervals.append(Interval(a, b, True, True))\n+                if nums[-1] < other.end:\n+                    intervals.append(Interval(nums[-1], other.end, True, other.right_open))\n+\n+                if syms:\n+                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+                return Union(intervals, evaluate=False)\n+            elif syms:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..f95352c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,19 +842,20 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+            syms = [m for m in self.args if not m.is_number]\n+            if nums:\n                 intervals = []\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                if nums[0] > other.start:\n+                    intervals.append(Interval(other.start, nums[0], other.left_open, True))\n                 for a, b in zip(nums[:-1], nums[1:]):\n                     intervals.append(Interval(a, b, True, True))\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n+                if nums[-1] < other.end:\n+                    intervals.append(Interval(nums[-1], other.end, True, other.right_open))\n+                if syms:\n                     return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n-                else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                return Union(intervals, evaluate=False)\n+            elif syms:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
