{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5413", "model_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 4c5d4d8..82c90a5 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -715,6 +715,12 @@ class RaisesContext:\n \n     def __enter__(self):\n         self.excinfo = _pytest._code.ExceptionInfo.for_later()\n+        # Override the __str__ method to return the string representation of the exception\n+        class CustomExceptionInfo(_pytest._code.ExceptionInfo):\n+            def __str__(self):\n+                return str(self.value)\n+\n+        self.excinfo = CustomExceptionInfo.for_later()\n         return self.excinfo\n \n     def __exit__(self, *tp):\n@@ -725,4 +731,4 @@ class RaisesContext:\n         suppress_exception = issubclass(self.excinfo.type, self.expected_exception)\n         if self.match_expr is not None and suppress_exception:\n             self.excinfo.match(self.match_expr)\n-        return suppress_exception\n+        return suppress_exception\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/python_api.py b/src/_pytest/python_api.py\nindex 75af5d2..9880190 100644\n--- a/src/_pytest/python_api.py\n+++ b/src/_pytest/python_api.py\n@@ -221,6 +221,10 @@ class RaisesContext:\n         self.excinfo = None\n     def __enter__(self):\n         self.excinfo = _pytest._code.ExceptionInfo.for_later()\n+        class CustomExceptionInfo(_pytest._code.ExceptionInfo):\n+            def __str__(self):\n+                return str(self.value)\n+        self.excinfo = CustomExceptionInfo.for_later()\n         return self.excinfo\n     def __exit__(self, *tp):\n         __tracebackhide__ = True\n", "normalized_occurrence": 1}
