{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex bbc34e8..c16d458 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -978,7 +978,11 @@ class Case(Expression):\n         if not case_parts:\n             return default_sql, default_params\n         case_joiner = case_joiner or self.case_joiner\n-        template_params['cases'] = case_joiner.join(case_parts)\n+        # Ensure there is a space between 'DISTINCT' and 'CASE' when used together\n+        case_sql = case_joiner.join(case_parts)\n+        if 'distinct' in extra_context and extra_context['distinct']:\n+            case_sql = 'DISTINCT ' + case_sql\n+        template_params['cases'] = case_sql\n         template_params['default'] = default_sql\n         sql_params.extend(default_params)\n         template = template or template_params.get('template', self.template)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 5106e76..f69365b 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -592,7 +592,10 @@ class Case(Expression):\n         if not case_parts:\n             return (default_sql, default_params)\n         case_joiner = case_joiner or self.case_joiner\n-        template_params['cases'] = case_joiner.join(case_parts)\n+        case_sql = case_joiner.join(case_parts)\n+        if 'distinct' in extra_context and extra_context['distinct']:\n+            case_sql = 'DISTINCT ' + case_sql\n+        template_params['cases'] = case_sql\n         template_params['default'] = default_sql\n         sql_params.extend(default_params)\n         template = template or template_params.get('template', self.template)\n", "normalized_occurrence": 1}
