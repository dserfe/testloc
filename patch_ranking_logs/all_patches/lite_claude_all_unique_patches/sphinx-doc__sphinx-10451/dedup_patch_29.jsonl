{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..fecb06d 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -96,16 +96,22 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n-                arg = arguments.setdefault(parts[1], {})\n+                name = parts[1].strip('*')  # Remove any stars for args/kwargs\n+                arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n+                # Preserve the original star notation\n+                if parts[1].startswith('*'):\n+                    arg['stars'] = parts[1].count('*')\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[2:]).strip('*')  # Remove any stars for args/kwargs\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n+                if parts[-1].startswith('*'):\n+                    arg['stars'] = parts[-1].count('*')\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = ' '.join(parts[1:]).strip('*')  # Remove any stars for args/kwargs\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -118,12 +124,16 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            # Add stars back if this is args/kwargs\n+            param_name = '*' * arg.get('stars', 0) + name if arg.get('stars') else name\n+            field += nodes.field_name('', 'type ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            # Add stars back if this is args/kwargs\n+            param_name = '*' * arg.get('stars', 0) + name if arg.get('stars') else name\n+            field += nodes.field_name('', 'param ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..60be576 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -69,15 +69,20 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         parts = re.split(' +', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n-                arg = arguments.setdefault(parts[1], {})\n+                name = parts[1].strip('*')\n+                arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n+                if parts[1].startswith('*'):\n+                    arg['stars'] = parts[1].count('*')\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[2:]).strip('*')\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n+                if parts[-1].startswith('*'):\n+                    arg['stars'] = parts[-1].count('*')\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = ' '.join(parts[1:]).strip('*')\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -88,12 +93,14 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            param_name = '*' * arg.get('stars', 0) + name if arg.get('stars') else name\n+            field += nodes.field_name('', 'type ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            param_name = '*' * arg.get('stars', 0) + name if arg.get('stars') else name\n+            field += nodes.field_name('', 'param ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n", "normalized_occurrence": 1}
