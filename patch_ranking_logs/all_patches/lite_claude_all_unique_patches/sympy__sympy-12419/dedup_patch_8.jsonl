{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex b4a2caa..f966bfd 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -854,6 +854,16 @@ def eval_sum(f, limits):\n         return f*(b - a + 1)\n     if a == b:\n         return f.subs(i, a)\n+        \n+    # Special handling for identity matrix elements\n+    from sympy.matrices.expressions import Identity\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if isinstance(matrix, Identity) or (hasattr(matrix, 'is_Identity') and matrix.is_Identity):\n+            i_idx, j_idx = f.args[1:]\n+            if (i_idx, j_idx) == limits[0:1]*2:  # diagonal sum case\n+                return b - a + 1\n+            return S.Zero\n     if isinstance(f, Piecewise):\n         if not any(i in arg.args[1].free_symbols for arg in f.args):\n             # Piecewise conditions do not depend on the dummy summation variable,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 3200d91..a53ac48 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -332,6 +332,14 @@ def eval_sum(f, limits):\n         return f * (b - a + 1)\n     if a == b:\n         return f.subs(i, a)\n+    from sympy.matrices.expressions import Identity\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if isinstance(matrix, Identity) or (hasattr(matrix, 'is_Identity') and matrix.is_Identity):\n+            i_idx, j_idx = f.args[1:]\n+            if (i_idx, j_idx) == limits[0:1] * 2:\n+                return b - a + 1\n+            return S.Zero\n     if isinstance(f, Piecewise):\n         if not any((i in arg.args[1].free_symbols for arg in f.args)):\n             newargs = []\n", "normalized_occurrence": 1}
