{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..689e00b 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,7 +1218,10 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+            if all(x.size == 0 for x in axes):\n+                return [np.array([]) for _ in axes]\n+            else:\n+                xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n@@ -1253,7 +1256,12 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     \"(coords[N][{0}], origin)\".format(self.naxis))\n             if self.naxis == 1 and len(xy.shape) == 1:\n                 return _return_list_of_arrays([xy], origin)\n-            return _return_single_array(xy, origin)\n+            if xy.size == 0:\n+                if self.naxis == 1:\n+                    return np.array([])\n+                return np.empty((0, self.naxis))\n+            else:\n+                return _return_single_array(xy, origin)\n \n         elif len(args) == self.naxis + 1:\n             axes = args[:-1]\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..387ac1c 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -598,7 +598,10 @@ class WCS(WCSBase):\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n                 raise ValueError('Coordinate arrays are not broadcastable to each other')\n-            xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n+            if all((x.size == 0 for x in axes)):\n+                return [np.array([]) for _ in axes]\n+            else:\n+                xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n             output = func(xy, origin)\n@@ -624,7 +627,12 @@ class WCS(WCSBase):\n                 raise TypeError('When providing two arguments, they must be (coords[N][{0}], origin)'.format(self.naxis))\n             if self.naxis == 1 and len(xy.shape) == 1:\n                 return _return_list_of_arrays([xy], origin)\n-            return _return_single_array(xy, origin)\n+            if xy.size == 0:\n+                if self.naxis == 1:\n+                    return np.array([])\n+                return np.empty((0, self.naxis))\n+            else:\n+                return _return_single_array(xy, origin)\n         elif len(args) == self.naxis + 1:\n             axes = args[:-1]\n             origin = args[-1]\n", "normalized_occurrence": 1}
