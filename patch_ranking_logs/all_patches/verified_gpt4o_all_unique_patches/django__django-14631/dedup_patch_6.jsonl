{"model_name_or_path": "agentless", "instance_id": "django__django-14631", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 2c0336e..41eaf7a 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -388,19 +388,16 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n-            else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+            bound_field = self[name]\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                    initial = bound_field.initial\n+                    value = field.clean(bound_field.data, initial)\n                 else:\n-                    value = field.clean(value)\n+                    value = field.clean(bound_field.data)\n                 self.cleaned_data[name] = value\n-                if hasattr(self, 'clean_%s' % name):\n-                    value = getattr(self, 'clean_%s' % name)()\n+                if hasattr(self, f'clean_{name}'):\n+                    value = getattr(self, f'clean_{name}')()\n                     self.cleaned_data[name] = value\n             except ValidationError as e:\n                 self.add_error(name, e)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex f8959b2..1dd745e 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -272,19 +272,16 @@ class BaseForm:\n \n     def _clean_fields(self):\n         for name, field in self.fields.items():\n-            if field.disabled:\n-                value = self.get_initial_for_field(field, name)\n-            else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+            bound_field = self[name]\n             try:\n                 if isinstance(field, FileField):\n-                    initial = self.get_initial_for_field(field, name)\n-                    value = field.clean(value, initial)\n+                    initial = bound_field.initial\n+                    value = field.clean(bound_field.data, initial)\n                 else:\n-                    value = field.clean(value)\n+                    value = field.clean(bound_field.data)\n                 self.cleaned_data[name] = value\n-                if hasattr(self, 'clean_%s' % name):\n-                    value = getattr(self, 'clean_%s' % name)()\n+                if hasattr(self, f'clean_{name}'):\n+                    value = getattr(self, f'clean_{name}')()\n                     self.cleaned_data[name] = value\n             except ValidationError as e:\n                 self.add_error(name, e)\n", "normalized_occurrence": 1}
