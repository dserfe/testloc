{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..73eb4a6 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -286,16 +286,17 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n \n     # other members\n     for name in dir(subject):\n-        try:\n-            value = attrgetter(subject, name)\n-            unmangled = unmangle(subject, name)\n-            if unmangled and unmangled not in members:\n-                if name in obj_dict:\n-                    members[unmangled] = ClassAttribute(subject, unmangled, value)\n-                else:\n-                    members[unmangled] = ClassAttribute(None, unmangled, value)\n-        except AttributeError:\n-            continue\n+        for cls in subject.__mro__:\n+            try:\n+                value = attrgetter(cls, name)\n+                unmangled = unmangle(cls, name)\n+                if unmangled and unmangled not in members:\n+                    if name in cls.__dict__:\n+                        members[unmangled] = ClassAttribute(cls, unmangled, value)\n+                    else:\n+                        members[unmangled] = ClassAttribute(None, unmangled, value)\n+            except AttributeError:\n+                continue\n \n     # annotation only member (ex. attr: int)\n     for cls in getmro(subject):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 65a9a3c..f299b07 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -184,16 +184,17 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, an\n     except (AttributeError, TypeError, ValueError):\n         pass\n     for name in dir(subject):\n-        try:\n-            value = attrgetter(subject, name)\n-            unmangled = unmangle(subject, name)\n-            if unmangled and unmangled not in members:\n-                if name in obj_dict:\n-                    members[unmangled] = ClassAttribute(subject, unmangled, value)\n-                else:\n-                    members[unmangled] = ClassAttribute(None, unmangled, value)\n-        except AttributeError:\n-            continue\n+        for cls in subject.__mro__:\n+            try:\n+                value = attrgetter(cls, name)\n+                unmangled = unmangle(cls, name)\n+                if unmangled and unmangled not in members:\n+                    if name in cls.__dict__:\n+                        members[unmangled] = ClassAttribute(cls, unmangled, value)\n+                    else:\n+                        members[unmangled] = ClassAttribute(None, unmangled, value)\n+            except AttributeError:\n+                continue\n     for cls in getmro(subject):\n         try:\n             for name in getannotations(cls):\n", "normalized_occurrence": 1}
