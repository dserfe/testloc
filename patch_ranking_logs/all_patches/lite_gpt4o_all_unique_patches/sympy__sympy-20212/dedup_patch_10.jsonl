{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20212", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1e8e438..7b4fc94 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2625,9 +2625,12 @@ class Zero(IntegerConstant, metaclass=Singleton):\n     def _eval_power(self, expt):\n         if expt.is_positive:\n             return self\n-        if expt.is_negative:\n-            return S.ComplexInfinity\n-        if expt.is_extended_real is False:\n+        if expt.is_infinite:\n+            if expt.is_negative:\n+                return S.ComplexInfinity\n+            elif expt.is_positive:\n+                return S.Zero\n+        elif expt.is_extended_real is False:\n             return S.NaN\n         # infinities are already handled with pos and neg\n         # tests above; now throw away leading numbers on Mul\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 4fccb81..4f45454 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2299,9 +2299,12 @@ class Zero(IntegerConstant, metaclass=Singleton):\n     def _eval_power(self, expt):\n         if expt.is_positive:\n             return self\n-        if expt.is_negative:\n-            return S.ComplexInfinity\n-        if expt.is_extended_real is False:\n+        if expt.is_infinite:\n+            if expt.is_negative:\n+                return S.ComplexInfinity\n+            elif expt.is_positive:\n+                return S.Zero\n+        elif expt.is_extended_real is False:\n             return S.NaN\n         coeff, terms = expt.as_coeff_Mul()\n         if coeff.is_negative:\n", "normalized_occurrence": 1}
