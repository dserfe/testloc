{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..e699f0c 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1088,7 +1088,10 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n+        # Ensure OuterRef is correctly handled within the subquery\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if any(isinstance(param, OuterRef) for param in params):\n+            raise ValueError(\"This queryset contains a reference to an outer query and may only be used in a subquery\")\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..5f0a1e4 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -666,6 +666,8 @@ class Exists(Subquery):\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n+        if any((isinstance(param, OuterRef) for param in params)):\n+            raise ValueError('This queryset contains a reference to an outer query and may only be used in a subquery')\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return (sql, params)\n", "normalized_occurrence": 1}
