{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..d1480a0 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,35 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n+            text = node.astext()\n+            # Split only if it's a compound keystroke (contains more than one key)\n+            if any(sep in text for sep in ['-', '+', '^']) and len(text.strip()) > 1:\n+                parts = []\n+                current = ''\n+                for char in text:\n+                    if char in ['-', '+', '^']:\n+                        if current:\n+                            parts.append(current)\n+                        parts.append(char)\n+                        current = ''\n+                    else:\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                \n+                self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in ['-', '+', '^']:\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % \n+                                       self.encode(part.strip()))\n+            else:\n+                # Single keystroke - no splitting needed\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                           CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -841,4 +868,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..f522d0c 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,35 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '',\n+            text = node.astext()\n+            # Split only if it's a compound keystroke (contains more than one key)\n+            if any(sep in text for sep in ['-', '+', '^']) and len(text.strip()) > 1:\n+                parts = []\n+                current = ''\n+                for char in text:\n+                    if char in ['-', '+', '^']:\n+                        if current:\n+                            parts.append(current)\n+                        parts.append(char)\n+                        current = ''\n+                    else:\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                \n+                self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in ['-', '+', '^']:\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % \n+                                       self.encode(part.strip()))\n+            else:\n+                # Single keystroke - no splitting needed\n+                self.body.append(self.starttag(node, 'kbd', '',\n+                                           CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -789,4 +816,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..8bcbae4 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -324,7 +324,29 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in ['-', '+', '^'])) and len(text.strip()) > 1:\n+                parts = []\n+                current = ''\n+                for char in text:\n+                    if char in ['-', '+', '^']:\n+                        if current:\n+                            parts.append(current)\n+                        parts.append(char)\n+                        current = ''\n+                    else:\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in ['-', '+', '^']:\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part.strip()))\n+            else:\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..361546a 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -297,7 +297,29 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n-            self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in ['-', '+', '^'])) and len(text.strip()) > 1:\n+                parts = []\n+                current = ''\n+                for char in text:\n+                    if char in ['-', '+', '^']:\n+                        if current:\n+                            parts.append(current)\n+                        parts.append(char)\n+                        current = ''\n+                    else:\n+                        current += char\n+                if current:\n+                    parts.append(current)\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                for i, part in enumerate(parts):\n+                    if part in ['-', '+', '^']:\n+                        self.body.append(part)\n+                    else:\n+                        self.body.append('<kbd class=\"docutils literal notranslate\">%s</kbd>' % self.encode(part.strip()))\n+            else:\n+                self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+                self.body.append(self.encode(text))\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
