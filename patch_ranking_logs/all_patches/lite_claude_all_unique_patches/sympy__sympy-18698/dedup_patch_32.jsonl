{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..f9a1047 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -322,16 +322,32 @@ def dup_sqf_list(f, K, all=False):\n         h = dup_sub(q, d, K)\n \n         if not h:\n-            result.append((p, i))\n+            if dup_degree(p) > 0:\n+                result.append((p, i))\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n-        if all or dup_degree(g) > 0:\n+        if dup_degree(g) > 0:\n             result.append((g, i))\n \n         i += 1\n \n+    # Sort and combine factors of equal multiplicity\n+    combined = {}\n+    for factor, mult in result:\n+        if mult in combined:\n+            combined[mult] = dup_mul(combined[mult], factor, K)\n+        else:\n+            combined[mult] = factor\n+\n+    result = [(factor, mult) for mult, factor in combined.items()]\n+    result.sort(key=lambda x: x[1])  # Sort by multiplicity\n+\n+    if all:\n+        if not result or result[0][1] > 1:\n+            result.insert(0, (K.one, 1))\n+\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..6572546 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -111,12 +111,24 @@ def dup_sqf_list(f, K, all=False):\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n         if not h:\n-            result.append((p, i))\n+            if dup_degree(p) > 0:\n+                result.append((p, i))\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n-        if all or dup_degree(g) > 0:\n+        if dup_degree(g) > 0:\n             result.append((g, i))\n         i += 1\n+    combined = {}\n+    for factor, mult in result:\n+        if mult in combined:\n+            combined[mult] = dup_mul(combined[mult], factor, K)\n+        else:\n+            combined[mult] = factor\n+    result = [(factor, mult) for mult, factor in combined.items()]\n+    result.sort(key=lambda x: x[1])\n+    if all:\n+        if not result or result[0][1] > 1:\n+            result.insert(0, (K.one, 1))\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n", "normalized_occurrence": 1}
