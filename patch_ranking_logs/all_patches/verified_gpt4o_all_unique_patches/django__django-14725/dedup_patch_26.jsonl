{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..c241e08 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -576,6 +576,7 @@ class BaseModelFormSet(BaseFormSet):\n                  queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new_objects = kwargs.pop('allow_new_objects', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -600,7 +601,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def _construct_form(self, i, **kwargs):\n         pk_required = i < self.initial_form_count()\n-        if pk_required:\n+        if not self.allow_new_objects and not pk_required:\n+            return None\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n                 try:\n@@ -628,7 +630,8 @@ class BaseModelFormSet(BaseFormSet):\n             except IndexError:\n                 pass\n         form = super()._construct_form(i, **kwargs)\n-        if pk_required:\n+        if not self.allow_new_objects and not pk_required:\n+            return None\n             form.fields[self.model._meta.pk.name].required = True\n         return form\n \n@@ -676,7 +679,9 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit)\n \n     save.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..1d21ac5 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -276,6 +276,7 @@ class BaseModelFormSet(BaseFormSet):\n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new_objects = kwargs.pop('allow_new_objects', True)\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n     def initial_form_count(self):\n         if not self.is_bound:\n@@ -291,7 +292,8 @@ class BaseModelFormSet(BaseFormSet):\n         return field.to_python\n     def _construct_form(self, i, **kwargs):\n         pk_required = i < self.initial_form_count()\n-        if pk_required:\n+        if not self.allow_new_objects and (not pk_required):\n+            return None\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n                 try:\n@@ -314,7 +316,8 @@ class BaseModelFormSet(BaseFormSet):\n             except IndexError:\n                 pass\n         form = super()._construct_form(i, **kwargs)\n-        if pk_required:\n+        if not self.allow_new_objects and (not pk_required):\n+            return None\n             form.fields[self.model._meta.pk.name].required = True\n         return form\n     def get_queryset(self):\n@@ -341,7 +344,9 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        return self.save_existing_objects(commit)\n     save.alters_data = True\n     def clean(self):\n         self.validate_unique()\n", "normalized_occurrence": 1}
