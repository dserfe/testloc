{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..f133fc3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -37,7 +37,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         pass\n \n \n-def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+def append_return_type_to_description(field_list: nodes.field_list, annotations: Dict[str, str]) -> None:\n+    for field in field_list:\n+        if isinstance(field, nodes.field) and field[0].astext() == 'Returns':\n+            if 'return' in annotations:\n+                desc = field[1]\n+                desc += f\" ({annotations['return']})\"\n+                field[1] = desc\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints not in ('both', 'description'):\n@@ -64,7 +70,10 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             if app.config.autodoc_typehints_description_target == \"all\":\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+                if app.config.autodoc_typehints_description_target == \"documented\":\n+                    append_return_type_to_description(field_list, annotations[fullname])\n+                else:\n+                    augment_descriptions_with_types(field_list, annotations[fullname])\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..c8406ee 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -19,7 +19,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n-def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+def append_return_type_to_description(field_list: nodes.field_list, annotations: Dict[str, str]) -> None:\n+    for field in field_list:\n+        if isinstance(field, nodes.field) and field[0].astext() == 'Returns':\n+            if 'return' in annotations:\n+                desc = field[1]\n+                desc += f\" ({annotations['return']})\"\n+                field[1] = desc\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints not in ('both', 'description'):\n@@ -41,6 +47,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == 'all':\n                 modify_field_list(field_list, annotations[fullname])\n+            elif app.config.autodoc_typehints_description_target == 'documented':\n+                append_return_type_to_description(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n def insert_field_list(node: Element) -> nodes.field_list:\n", "normalized_occurrence": 1}
