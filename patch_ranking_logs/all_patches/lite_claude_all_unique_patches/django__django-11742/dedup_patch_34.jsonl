{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..e998d88 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -256,6 +256,26 @@ class Field(RegisterLookupMixin):\n                     id='fields.E004',\n                 )\n             ]\n+            \n+        # Check max_length is sufficient for all choice values\n+        if hasattr(self, 'max_length') and self.max_length is not None:\n+            choice_values = []\n+            for choice in self.choices:\n+                if isinstance(choice[1], (list, tuple)):\n+                    choice_values.extend(str(val) for val, _ in choice[1])\n+                else:\n+                    choice_values.append(str(choice[0]))\n+                    \n+            longest_choice = max(len(val) for val in choice_values)\n+            if longest_choice > self.max_length:\n+                return [\n+                    checks.Error(\n+                        f\"'max_length' is too small to fit the longest value in choices \"\n+                        f\"(longest choice is {longest_choice} characters).\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                ]\n \n         # Expect [group_name, [value, display]]\n         for choices_group in self.choices:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..3d41160 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -124,6 +124,16 @@ class Field(RegisterLookupMixin):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n             return [checks.Error(\"'choices' must be an iterable (e.g., a list or tuple).\", obj=self, id='fields.E004')]\n+        if hasattr(self, 'max_length') and self.max_length is not None:\n+            choice_values = []\n+            for choice in self.choices:\n+                if isinstance(choice[1], (list, tuple)):\n+                    choice_values.extend((str(val) for val, _ in choice[1]))\n+                else:\n+                    choice_values.append(str(choice[0]))\n+            longest_choice = max((len(val) for val in choice_values))\n+            if longest_choice > self.max_length:\n+                return [checks.Error(f\"'max_length' is too small to fit the longest value in choices (longest choice is {longest_choice} characters).\", obj=self, id='fields.E009')]\n         for choices_group in self.choices:\n             try:\n                 group_name, group_choices = choices_group\n", "normalized_occurrence": 1}
