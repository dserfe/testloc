{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..1f3194e 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -58,7 +58,11 @@ class _MockObject:\n         return _make_subclass(str(key), self.__display_name__, self.__class__)()\n \n     def __getattr__(self, key: str) -> \"_MockObject\":\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+        # Create new mock object with the full path maintained in display name\n+        mock = _make_subclass(key, self.__display_name__, self.__class__)()\n+        # Store the attribute access so it persists\n+        setattr(self, key, mock)\n+        return mock\n \n     def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         call = self.__class__()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..36f6b7d 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -31,7 +31,9 @@ class _MockObject:\n     def __getitem__(self, key: Any) -> '_MockObject':\n         return _make_subclass(str(key), self.__display_name__, self.__class__)()\n     def __getattr__(self, key: str) -> '_MockObject':\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+        mock = _make_subclass(key, self.__display_name__, self.__class__)()\n+        setattr(self, key, mock)\n+        return mock\n     def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         call = self.__class__()\n         call.__sphinx_decorator_args__ = args\n", "normalized_occurrence": 1}
