{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..44530cc 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -254,7 +254,15 @@ class TensorProduct(Expr):\n \n         if add_args:\n             return Add(*add_args)\n+        elif isinstance(args[i], Pow):\n+            base = args[i].base\n+            exp = args[i].exp\n+            tp = TensorProduct(*args[:i] + (base,)*exp + args[i + 1:])\n+            if isinstance(tp, TensorProduct):\n+                tp = tp._eval_expand_tensorproduct()\n+            add_args.append(tp)\n         else:\n+            add_args.append(args[i])\n             return self\n \n     def _eval_trace(self, **kwargs):\n@@ -263,7 +271,15 @@ class TensorProduct(Expr):\n \n         if indices is None or len(indices) == 0:\n             return Mul(*[Tr(arg).doit() for arg in exp.args])\n+        elif isinstance(args[i], Pow):\n+            base = args[i].base\n+            exp = args[i].exp\n+            tp = TensorProduct(*args[:i] + (base,)*exp + args[i + 1:])\n+            if isinstance(tp, TensorProduct):\n+                tp = tp._eval_expand_tensorproduct()\n+            add_args.append(tp)\n         else:\n+            add_args.append(args[i])\n             return Mul(*[Tr(value).doit() if idx in indices else value\n                          for idx, value in enumerate(exp.args)])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..20ae764 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -122,14 +122,30 @@ class TensorProduct(Expr):\n                 break\n         if add_args:\n             return Add(*add_args)\n+        elif isinstance(args[i], Pow):\n+            base = args[i].base\n+            exp = args[i].exp\n+            tp = TensorProduct(*args[:i] + (base,) * exp + args[i + 1:])\n+            if isinstance(tp, TensorProduct):\n+                tp = tp._eval_expand_tensorproduct()\n+            add_args.append(tp)\n         else:\n+            add_args.append(args[i])\n             return self\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n         if indices is None or len(indices) == 0:\n             return Mul(*[Tr(arg).doit() for arg in exp.args])\n+        elif isinstance(args[i], Pow):\n+            base = args[i].base\n+            exp = args[i].exp\n+            tp = TensorProduct(*args[:i] + (base,) * exp + args[i + 1:])\n+            if isinstance(tp, TensorProduct):\n+                tp = tp._eval_expand_tensorproduct()\n+            add_args.append(tp)\n         else:\n+            add_args.append(args[i])\n             return Mul(*[Tr(value).doit() if idx in indices else value for idx, value in enumerate(exp.args)])\n def tensor_product_simp_Mul(e):\n     if not isinstance(e, Mul):\n", "normalized_occurrence": 1}
