{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..2dc32d0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -955,8 +955,29 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_max_length_for_choices(**kwargs),\n         ]\n \n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+            \n+        longest_value = 0\n+        for choice_key, choice_value in self.flatchoices:\n+            if choice_key is not None:  # Exclude None values\n+                longest_value = max(longest_value, len(str(choice_key)))\n+                \n+        if longest_value > self.max_length:\n+            return [\n+                checks.Error(\n+                    \"The 'max_length' is too short to fit the longest value in 'choices' \"\n+                    \"(got %d chars, but needs at least %d).\" % (self.max_length, longest_value),\n+                    obj=self,\n+                    id='fields.E124',\n+                )\n+            ]\n+        return []\n+\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..9b3d6af 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -461,7 +461,17 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs), *self._check_max_length_for_choices(**kwargs)]\n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        longest_value = 0\n+        for choice_key, choice_value in self.flatchoices:\n+            if choice_key is not None:\n+                longest_value = max(longest_value, len(str(choice_key)))\n+        if longest_value > self.max_length:\n+            return [checks.Error(\"The 'max_length' is too short to fit the longest value in 'choices' (got %d chars, but needs at least %d).\" % (self.max_length, longest_value), obj=self, id='fields.E124')]\n+        return []\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n", "normalized_occurrence": 1}
