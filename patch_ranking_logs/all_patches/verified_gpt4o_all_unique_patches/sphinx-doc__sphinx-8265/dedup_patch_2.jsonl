{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0e8e503..217b492 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1226,6 +1226,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         if self.env.config.strip_signature_backslash:\n             # escape backslashes for reST\n             args = args.replace('\\\\', '\\\\\\\\')\n+        # Ensure tuples are correctly formatted in the signature\n+        args = args.replace('(', '\\\\(').replace(')', '\\\\)')\n         return args\n \n     def document_members(self, all_members: bool = False) -> None:\n@@ -1846,6 +1848,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n         if self.env.config.strip_signature_backslash:\n             # escape backslashes for reST\n             args = args.replace('\\\\', '\\\\\\\\')\n+        # Ensure tuples are correctly formatted in the signature\n+        args = args.replace('(', '\\\\(').replace(')', '\\\\)')\n         return args\n \n     def add_directive_header(self, sig: str) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0ae2e22..c508f3a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -902,6 +902,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             args = ''\n         if self.env.config.strip_signature_backslash:\n             args = args.replace('\\\\', '\\\\\\\\')\n+        args = args.replace('(', '\\\\(').replace(')', '\\\\)')\n         return args\n \n     def document_members(self, all_members: bool=False) -> None:\n@@ -1354,6 +1355,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n             args = ''\n         if self.env.config.strip_signature_backslash:\n             args = args.replace('\\\\', '\\\\\\\\')\n+        args = args.replace('(', '\\\\(').replace(')', '\\\\)')\n         return args\n \n     def add_directive_header(self, sig: str) -> None:\n", "normalized_occurrence": 1}
