{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..afa248d 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -239,10 +239,16 @@ def _cstack(left, right):\n         cleft = np.zeros((noutp, left.shape[1]))\n         cleft[: left.shape[0], : left.shape[1]] = left\n     if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n+        if hasattr(right, 'separability_matrix'):\n+            # If right is a compound model, use its own separability matrix\n+            sep_matrix = right.separability_matrix\n+            cright = np.zeros((noutp, right.n_inputs))\n+            cright[-right.n_outputs:, -right.n_inputs:] = sep_matrix\n+        else:\n+            cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n \n     return np.hstack([cleft, cright])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..b0f195a 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -75,10 +75,15 @@ def _cstack(left, right):\n         cleft = np.zeros((noutp, left.shape[1]))\n         cleft[:left.shape[0], :left.shape[1]] = left\n     if isinstance(right, Model):\n-        cright = _coord_matrix(right, 'right', noutp)\n+        if hasattr(right, 'separability_matrix'):\n+            sep_matrix = right.separability_matrix\n+            cright = np.zeros((noutp, right.n_inputs))\n+            cright[-right.n_outputs:, -right.n_inputs:] = sep_matrix\n+        else:\n+            cright = _coord_matrix(right, 'right', noutp)\n     else:\n         cright = np.zeros((noutp, right.shape[1]))\n-        cright[-right.shape[0]:, -right.shape[1]:] = 1\n+        cright[-right.shape[0]:, -right.shape[1]:] = right\n     return np.hstack([cleft, cright])\n def _cdot(left, right):\n     left, right = (right, left)\n", "normalized_occurrence": 1}
