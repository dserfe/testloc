{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 73c394e..52375f4 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -235,14 +235,22 @@ class BaseEstimator:\n \n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n \n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n \n+        # Convert numpy arrays to lists for safe comparison\n+        def array_to_list(obj):\n+            if isinstance(obj, np.ndarray):\n+                return obj.tolist()\n+            return obj\n+\n         # use ellipsis for sequences with a lot of elements\n         pp = _EstimatorPrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n-            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+            n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW,\n+            array_to_list_fn=array_to_list)\n \n         repr_ = pp.pformat(self)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 64d90d3..a018a91 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -101,9 +101,14 @@ class BaseEstimator:\n         return self\n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n         N_CHAR_MAX = 700\n         N_MAX_ELEMENTS_TO_SHOW = 30\n-        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n+        def array_to_list(obj):\n+            if isinstance(obj, np.ndarray):\n+                return obj.tolist()\n+            return obj\n+        pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW, array_to_list_fn=array_to_list)\n         repr_ = pp.pformat(self)\n         if len(''.join(repr_.split())) > N_CHAR_MAX:\n             lim = N_CHAR_MAX // 2\n", "normalized_occurrence": 1}
