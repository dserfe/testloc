{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..e4bd826 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,7 +502,17 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n-        # If np.array(..) gives ComplexWarning, then we convert the warning\n+        if isinstance(array, pd.DataFrame):\n+            dtype_orig = array.dtypes[0]  # Assumes all columns have the same dtype\n+            if dtype_numeric and dtype_orig == 'O':\n+                array = array.astype(np.float64)\n+                if warn_on_dtype and array.dtypes[0] != dtype_orig:\n+                    warnings.warn(\n+                        \"Data with input dtype object was converted to float64.\",\n+                        DataConversionWarning\n+                    )\n+            else:\n+                array = array.to_numpy(dtype=dtype, order=order)\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n         # thereby passing the test made in the lines following the scope\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..72bf54b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,6 +152,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if isinstance(array, pd.DataFrame):\n+            dtype_orig = array.dtypes[0]\n+            if dtype_numeric and dtype_orig == 'O':\n+                array = array.astype(np.float64)\n+                if warn_on_dtype and array.dtypes[0] != dtype_orig:\n+                    warnings.warn('Data with input dtype object was converted to float64.', DataConversionWarning)\n+            else:\n+                array = array.to_numpy(dtype=dtype, order=order)\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n", "normalized_occurrence": 1}
