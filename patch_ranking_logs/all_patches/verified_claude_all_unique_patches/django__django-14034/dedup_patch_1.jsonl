{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..17081e2 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1021,14 +1021,12 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and not isinstance(value, list):\n             value = self.widget.decompress(value)\n-        if not value or isinstance(value, (list, tuple)):\n-            if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n-                    raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n-        else:\n+        if not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n+            \n+        if not value:\n+            value = ['' for _ in self.fields]\n+            \n         for i, field in enumerate(self.fields):\n             try:\n                 field_value = value[i]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..8b72822 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -588,14 +588,10 @@ class MultiValueField(Field):\n         errors = []\n         if self.disabled and (not isinstance(value, list)):\n             value = self.widget.decompress(value)\n-        if not value or isinstance(value, (list, tuple)):\n-            if not value or not [v for v in value if v not in self.empty_values]:\n-                if self.required:\n-                    raise ValidationError(self.error_messages['required'], code='required')\n-                else:\n-                    return self.compress([])\n-        else:\n+        if not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['invalid'], code='invalid')\n+        if not value:\n+            value = ['' for _ in self.fields]\n         for i, field in enumerate(self.fields):\n             try:\n                 field_value = value[i]\n", "normalized_occurrence": 1}
