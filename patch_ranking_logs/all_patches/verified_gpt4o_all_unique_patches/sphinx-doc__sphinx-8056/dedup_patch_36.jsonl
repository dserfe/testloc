{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..c28e23d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1090,20 +1090,16 @@ class NumpyDocstring(GoogleDocstring):\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n+        names, _, _type = self._partition_field_on_colon(line)\n+        names = [name.strip() for name in names.split(\",\")]\n+        _type = _type.strip()\n+        processed_names = [self._escape_args_and_kwargs(name) for name in names]\n         _type = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n-\n-        if prefer_type and not _type:\n-            _type, _name = _name, _type\n+        _name = \", \".join(processed_names)\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..2888888 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -660,15 +660,12 @@ class NumpyDocstring(GoogleDocstring):\n             return func(name)\n     def _consume_field(self, parse_type: bool=True, prefer_type: bool=False) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n-        if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n-        else:\n-            _name, _type = (line, '')\n-        _name, _type = (_name.strip(), _type.strip())\n-        _name = self._escape_args_and_kwargs(_name)\n+        names, _, _type = self._partition_field_on_colon(line)\n+        names = [name.strip() for name in names.split(',')]\n+        _type = _type.strip()\n+        processed_names = [self._escape_args_and_kwargs(name) for name in names]\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n-        if prefer_type and (not _type):\n-            _type, _name = (_name, _type)\n+        _name = ', '.join(processed_names)\n         indent = self._get_indent(line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n", "normalized_occurrence": 1}
