{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13195", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 244654c..38c7ba9 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -213,10 +213,13 @@ class HttpResponseBase:\n     def delete_cookie(self, key, path='/', domain=None):\n         # Most browsers ignore the Set-Cookie header if the cookie name starts\n         # with __Host- or __Secure- and the cookie doesn't use the secure flag.\n-        secure = key.startswith(('__Secure-', '__Host-'))\n+        secure = settings.SESSION_COOKIE_SECURE or key.startswith(('__Secure-', '__Host-'))\n         self.set_cookie(\n-            key, max_age=0, path=path, domain=domain, secure=secure,\n+            key, max_age=0, path=path, domain=domain,\n             expires='Thu, 01 Jan 1970 00:00:00 GMT',\n+            secure=secure,\n+            httponly=settings.SESSION_COOKIE_HTTPONLY or None,\n+            samesite=settings.SESSION_COOKIE_SAMESITE,\n         )\n \n     # Common methods used by subclasses\n", "occurrence": 1, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex c7367bd..0d658c1 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -138,8 +138,8 @@ class HttpResponseBase:\n         value = signing.get_cookie_signer(salt=key + salt).sign(value)\n         return self.set_cookie(key, value, **kwargs)\n     def delete_cookie(self, key, path='/', domain=None):\n-        secure = key.startswith(('__Secure-', '__Host-'))\n-        self.set_cookie(key, max_age=0, path=path, domain=domain, secure=secure, expires='Thu, 01 Jan 1970 00:00:00 GMT')\n+        secure = settings.SESSION_COOKIE_SECURE or key.startswith(('__Secure-', '__Host-'))\n+        self.set_cookie(key, max_age=0, path=path, domain=domain, expires='Thu, 01 Jan 1970 00:00:00 GMT', secure=secure, httponly=settings.SESSION_COOKIE_HTTPONLY or None, samesite=settings.SESSION_COOKIE_SAMESITE)\n     def make_bytes(self, value):\n         if isinstance(value, (bytes, memoryview)):\n             return bytes(value)\n", "normalized_occurrence": 1}
