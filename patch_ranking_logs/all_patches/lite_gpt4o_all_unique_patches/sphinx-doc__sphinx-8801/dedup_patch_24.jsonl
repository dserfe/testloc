{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 16f59c0..040c606 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -292,28 +292,25 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n         except AttributeError:\n             continue\n \n-    try:\n-        for cls in getmro(subject):\n-            # annotation only member (ex. attr: int)\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n-\n-            # append instance attributes (cf. self.attr1) if analyzer knows\n-            try:\n-                modname = safe_getattr(cls, '__module__')\n-                qualname = safe_getattr(cls, '__qualname__')\n-                analyzer = ModuleAnalyzer.for_module(modname)\n-                analyzer.analyze()\n-                for (ns, name), docstring in analyzer.attr_docs.items():\n-                    if ns == qualname and name not in members:\n-                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n-                                                     docstring='\\n'.join(docstring))\n-            except (AttributeError, PycodeError):\n-                pass\n-    except AttributeError:\n-        pass\n+    for cls in getmro(subject):\n+        # annotation only member (ex. attr: int)\n+        for name in getannotations(cls):\n+            name = unmangle(cls, name)\n+            if name and name not in members:\n+                members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n+\n+        # append instance attributes (cf. self.attr1) if analyzer knows\n+        try:\n+            modname = safe_getattr(cls, '__module__')\n+            qualname = safe_getattr(cls, '__qualname__')\n+            analyzer = ModuleAnalyzer.for_module(modname)\n+            analyzer.analyze()\n+            for (ns, name), docstring in analyzer.attr_docs.items():\n+                if ns == qualname and name not in members:\n+                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n+                                                 docstring='\\n'.join(docstring))\n+        except (AttributeError, PycodeError):\n+            pass\n \n     return members\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 7792b8a..8ebd769 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -187,24 +187,21 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n                     members[unmangled] = ObjectMember(unmangled, value)\n         except AttributeError:\n             continue\n-    try:\n-        for cls in getmro(subject):\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n-            try:\n-                modname = safe_getattr(cls, '__module__')\n-                qualname = safe_getattr(cls, '__qualname__')\n-                analyzer = ModuleAnalyzer.for_module(modname)\n-                analyzer.analyze()\n-                for (ns, name), docstring in analyzer.attr_docs.items():\n-                    if ns == qualname and name not in members:\n-                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring))\n-            except (AttributeError, PycodeError):\n-                pass\n-    except AttributeError:\n-        pass\n+    for cls in getmro(subject):\n+        for name in getannotations(cls):\n+            name = unmangle(cls, name)\n+            if name and name not in members:\n+                members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n+        try:\n+            modname = safe_getattr(cls, '__module__')\n+            qualname = safe_getattr(cls, '__qualname__')\n+            analyzer = ModuleAnalyzer.for_module(modname)\n+            analyzer.analyze()\n+            for (ns, name), docstring in analyzer.attr_docs.items():\n+                if ns == qualname and name not in members:\n+                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring))\n+        except (AttributeError, PycodeError):\n+            pass\n     return members\n from sphinx.ext.autodoc.mock import MockFinder, MockLoader, _MockModule, _MockObject, mock\n deprecated_alias('sphinx.ext.autodoc.importer', {'_MockModule': _MockModule, '_MockObject': _MockObject, 'MockFinder': MockFinder, 'MockLoader': MockLoader, 'mock': mock}, RemovedInSphinx40Warning, {'_MockModule': 'sphinx.ext.autodoc.mock._MockModule', '_MockObject': 'sphinx.ext.autodoc.mock._MockObject', 'MockFinder': 'sphinx.ext.autodoc.mock.MockFinder', 'MockLoader': 'sphinx.ext.autodoc.mock.MockLoader', 'mock': 'sphinx.ext.autodoc.mock.mock'})\n\\ No newline at end of file\n", "normalized_occurrence": 1}
