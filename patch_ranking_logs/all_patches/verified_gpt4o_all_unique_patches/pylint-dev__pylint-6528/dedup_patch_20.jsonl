{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..c7bd363 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -737,11 +737,13 @@ class PyLinter(\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n+        ignore_patterns = [re.compile(p) for p in self.config.ignore_patterns]\n+        ignore_paths_patterns = [re.compile(p) for p in self._ignore_paths]\n         result, errors = expand_modules(\n             modules,\n             self.config.ignore,\n-            self.config.ignore_patterns,\n-            self._ignore_paths,\n+            ignore_patterns,\n+            ignore_paths_patterns,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..e145dc0 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -298,7 +298,9 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr['basename'])\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n-        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths)\n+        ignore_patterns = [re.compile(p) for p in self.config.ignore_patterns]\n+        ignore_paths_patterns = [re.compile(p) for p in self._ignore_paths]\n+        result, errors = expand_modules(modules, self.config.ignore, ignore_patterns, ignore_paths_patterns)\n         for error in errors:\n             message = modname = error['mod']\n             key = error['key']\n", "normalized_occurrence": 1}
