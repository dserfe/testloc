{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..e19c8f0 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -478,7 +478,23 @@ def trigsimp(expr, **opts):\n     try:\n         return expr._eval_trigsimp(**opts)\n     except AttributeError:\n-        pass\n+        # Convert Rational arguments in trig functions to symbolic form temporarily\n+        def _rationalize(e):\n+            if isinstance(e, (sin, cos, tan)) and isinstance(e.args[0], Rational):\n+                # Create a temporary symbol and remember the substitution\n+                x = Dummy('x')\n+                _rationalize.subs_dict[x] = e.args[0]\n+                return e.func(x)\n+            return e\n+        _rationalize.subs_dict = {}\n+        \n+        # Transform expression\n+        if any(isinstance(a, Rational) for a in preorder_traversal(expr) if isinstance(a, Rational)):\n+            expr = expr.replace(lambda x: True, _rationalize)\n+            # Simplify with symbols\n+            result = trigsimp(expr, **opts)\n+            # Substitute back Rational values\n+            return result.subs(_rationalize.subs_dict)\n \n     old = opts.pop('old', False)\n     if not old:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..0327d73 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -150,7 +150,17 @@ def trigsimp(expr, **opts):\n     try:\n         return expr._eval_trigsimp(**opts)\n     except AttributeError:\n-        pass\n+        def _rationalize(e):\n+            if isinstance(e, (sin, cos, tan)) and isinstance(e.args[0], Rational):\n+                x = Dummy('x')\n+                _rationalize.subs_dict[x] = e.args[0]\n+                return e.func(x)\n+            return e\n+        _rationalize.subs_dict = {}\n+        if any((isinstance(a, Rational) for a in preorder_traversal(expr) if isinstance(a, Rational))):\n+            expr = expr.replace(lambda x: True, _rationalize)\n+            result = trigsimp(expr, **opts)\n+            return result.subs(_rationalize.subs_dict)\n     old = opts.pop('old', False)\n     if not old:\n         opts.pop('deep', None)\n", "normalized_occurrence": 1}
