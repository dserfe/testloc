{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11206", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex d5baf57..04263a0 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n \n from django.conf import settings\n@@ -27,18 +28,21 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+        _, digits, exponent = number.as_tuple()\n+        # If decimal_pos is specified and the number is too small to be represented\n+        # with the given decimal positions, return appropriate number of zeros\n+        if decimal_pos is not None and exponent < -decimal_pos:\n+            return '0' + decimal_sep + '0' * decimal_pos\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n-        _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n-            number = '{:e}'.format(number)\n-            coefficient, exponent = number.split('e')\n-            # Format the coefficient.\n-            coefficient = format(\n-                coefficient, decimal_sep, decimal_pos, grouping,\n-                thousand_sep, force_grouping, use_l10n,\n-            )\n-            return '{}e{}'.format(coefficient, exponent)\n+            number = '{:f}'.format(number)  # Convert to standard decimal first\n+            if '.' in number:\n+                int_part, dec_part = number.split('.')\n+                if decimal_pos is not None:\n+                    dec_part = dec_part[:decimal_pos]\n+                number = int_part + '.' + dec_part\n+            str_number = number\n         else:\n             str_number = '{:f}'.format(number)\n     else:\n@@ -76,4 +80,4 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n             int_part_gd += digit\n             cnt += 1\n         int_part = int_part_gd[::-1]\n-    return sign + int_part + dec_part\n+    return sign + int_part + dec_part\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 0318af1..0d857d1 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -10,11 +10,16 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', f\n     sign = ''\n     if isinstance(number, Decimal):\n         _, digits, exponent = number.as_tuple()\n+        if decimal_pos is not None and exponent < -decimal_pos:\n+            return '0' + decimal_sep + '0' * decimal_pos\n         if abs(exponent) + len(digits) > 200:\n-            number = '{:e}'.format(number)\n-            coefficient, exponent = number.split('e')\n-            coefficient = format(coefficient, decimal_sep, decimal_pos, grouping, thousand_sep, force_grouping, use_l10n)\n-            return '{}e{}'.format(coefficient, exponent)\n+            number = '{:f}'.format(number)\n+            if '.' in number:\n+                int_part, dec_part = number.split('.')\n+                if decimal_pos is not None:\n+                    dec_part = dec_part[:decimal_pos]\n+                number = int_part + '.' + dec_part\n+            str_number = number\n         else:\n             str_number = '{:f}'.format(number)\n     else:\n", "normalized_occurrence": 1}
