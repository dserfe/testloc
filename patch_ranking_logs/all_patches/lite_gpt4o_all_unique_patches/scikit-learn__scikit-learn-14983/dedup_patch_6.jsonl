{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 8743303..386dd20 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1185,6 +1185,9 @@ class RepeatedKFold(_RepeatedSplits):\n         If None, the random number generator is the RandomState instance used\n         by `np.random`.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Examples\n     --------\n     >>> import numpy as np\n@@ -1237,6 +1240,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         Random state to be used to generate random state for each\n         repetition.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Examples\n     --------\n     >>> import numpy as np\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 7f10fe3..af08ed4 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1067,6 +1067,9 @@ class RepeatedKFold(_RepeatedSplits):\n         If None, the random number generator is the RandomState instance used\n         by `np.random`.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Examples\n     --------\n     >>> import numpy as np\n@@ -1118,6 +1121,9 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n         Random state to be used to generate random state for each\n         repetition.\n \n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n     Examples\n     --------\n     >>> import numpy as np\n", "normalized_occurrence": 1}
