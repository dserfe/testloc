{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7982", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex e00a6f3..de54947 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -536,7 +536,7 @@ class Session(nodes.FSCollector):\n         ), \"{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})\".format(\n             path, path.isdir(), path.exists(), path.islink()\n         )\n-        ihook = self.gethookproxy(path)\n+        ihook = self.gethookproxy(path, follow_symlinks=follow_symlinks)\n         if not self.isinitpath(path):\n             if ihook.pytest_ignore_collect(path=path, config=self.config):\n                 return ()\n@@ -550,7 +550,7 @@ class Session(nodes.FSCollector):\n                 else:\n                     duplicate_paths.add(path)\n \n-        return ihook.pytest_collect_file(path=path, parent=self)  # type: ignore[no-any-return]\n+        return ihook.pytest_collect_file(path=path, parent=self, follow_symlinks=follow_symlinks)  # type: ignore[no-any-return]\n \n     @overload\n     def perform_collect(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex df5c6f0..f86a693 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -318,7 +318,7 @@ class Session(nodes.FSCollector):\n \n     def _collectfile(self, path: py.path.local, handle_dupes: bool=True) -> Sequence[nodes.Collector]:\n         assert path.isfile(), '{!r} is not a file (isdir={!r}, exists={!r}, islink={!r})'.format(path, path.isdir(), path.exists(), path.islink())\n-        ihook = self.gethookproxy(path)\n+        ihook = self.gethookproxy(path, follow_symlinks=follow_symlinks)\n         if not self.isinitpath(path):\n             if ihook.pytest_ignore_collect(path=path, config=self.config):\n                 return ()\n@@ -330,7 +330,7 @@ class Session(nodes.FSCollector):\n                     return ()\n                 else:\n                     duplicate_paths.add(path)\n-        return ihook.pytest_collect_file(path=path, parent=self)\n+        return ihook.pytest_collect_file(path=path, parent=self, follow_symlinks=follow_symlinks)\n \n     @overload\n     def perform_collect(self, args: Optional[Sequence[str]]=..., genitems: 'Literal[True]'=...) -> Sequence[nodes.Item]:\n", "normalized_occurrence": 1}
