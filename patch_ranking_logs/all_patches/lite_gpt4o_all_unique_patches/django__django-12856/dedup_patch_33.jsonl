{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..cb85fcd 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -68,6 +68,7 @@ class CheckConstraint(BaseConstraint):\n     def deconstruct(self):\n         path, args, kwargs = super().deconstruct()\n         kwargs['check'] = self.check\n+        kwargs['model'] = self.model\n         return path, args, kwargs\n \n \n@@ -77,7 +78,7 @@ class Deferrable(Enum):\n \n \n class UniqueConstraint(BaseConstraint):\n-    def __init__(self, *, fields, name, condition=None, deferrable=None):\n+    def __init__(self, *, fields, name, model, condition=None, deferrable=None):\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n         if not isinstance(condition, (type(None), Q)):\n@@ -91,6 +92,19 @@ class UniqueConstraint(BaseConstraint):\n                 'UniqueConstraint.deferrable must be a Deferrable instance.'\n             )\n         self.fields = tuple(fields)\n+        # Check if all specified fields exist in the model.\n+        for field in self.fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise ValueError(f\"The field '{field}' does not exist in the model.\")\n+        self.model = model\n+        # Check if all specified fields exist in the model.\n+        for field in self.fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise ValueError(f\"The field '{field}' does not exist in the model.\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n@@ -150,4 +164,5 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        kwargs['model'] = self.model\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 76d46f4..db84a28 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -47,12 +47,13 @@ class CheckConstraint(BaseConstraint):\n     def deconstruct(self):\n         path, args, kwargs = super().deconstruct()\n         kwargs['check'] = self.check\n+        kwargs['model'] = self.model\n         return (path, args, kwargs)\n class Deferrable(Enum):\n     DEFERRED = 'deferred'\n     IMMEDIATE = 'immediate'\n class UniqueConstraint(BaseConstraint):\n-    def __init__(self, *, fields, name, condition=None, deferrable=None):\n+    def __init__(self, *, fields, name, model, condition=None, deferrable=None):\n         if not fields:\n             raise ValueError('At least one field is required to define a unique constraint.')\n         if not isinstance(condition, (type(None), Q)):\n@@ -62,6 +63,17 @@ class UniqueConstraint(BaseConstraint):\n         if not isinstance(deferrable, (type(None), Deferrable)):\n             raise ValueError('UniqueConstraint.deferrable must be a Deferrable instance.')\n         self.fields = tuple(fields)\n+        for field in self.fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise ValueError(f\"The field '{field}' does not exist in the model.\")\n+        self.model = model\n+        for field in self.fields:\n+            try:\n+                model._meta.get_field(field)\n+            except FieldDoesNotExist:\n+                raise ValueError(f\"The field '{field}' does not exist in the model.\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n@@ -97,4 +109,5 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n+        kwargs['model'] = self.model\n         return (path, args, kwargs)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
