{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex c9b4ff0..25ae333 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -186,10 +186,14 @@ def _diff_text(left, right, verbose=0):\n         r = r.replace(r\"\\r\", \"\\r\")\n         return r\n \n-    if isinstance(left, bytes):\n-        left = escape_for_readable_diff(left)\n-    if isinstance(right, bytes):\n-        right = escape_for_readable_diff(right)\n+    if isinstance(left, bytes) and isinstance(right, bytes):\n+        left = left.decode('utf-8', errors='replace')\n+        right = right.decode('utf-8', errors='replace')\n+    else:\n+        if isinstance(left, bytes):\n+            left = escape_for_readable_diff(left)\n+        if isinstance(right, bytes):\n+            right = escape_for_readable_diff(right)\n     if verbose < 1:\n         i = 0  # just in case left or right has zero length\n         for i in range(min(len(left), len(right))):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 855efef..aa42fd5 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -108,10 +108,14 @@ def _diff_text(left, right, verbose=0):\n         r = r.replace('\\\\n', '\\n')\n         r = r.replace('\\\\r', '\\r')\n         return r\n-    if isinstance(left, bytes):\n-        left = escape_for_readable_diff(left)\n-    if isinstance(right, bytes):\n-        right = escape_for_readable_diff(right)\n+    if isinstance(left, bytes) and isinstance(right, bytes):\n+        left = left.decode('utf-8', errors='replace')\n+        right = right.decode('utf-8', errors='replace')\n+    else:\n+        if isinstance(left, bytes):\n+            left = escape_for_readable_diff(left)\n+        if isinstance(right, bytes):\n+            right = escape_for_readable_diff(right)\n     if verbose < 1:\n         i = 0\n         for i in range(min(len(left), len(right))):\n", "normalized_occurrence": 1}
