{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 305de38..a1dfbf2 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1090,7 +1090,7 @@ class Exists(Subquery):\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n-            sql = 'NOT {}'.format(sql)\n+            sql = 'NOT ({})'.format(sql)\n         return sql, params\n \n     def select_format(self, compiler, sql, params):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex d6b917d..10f5a4c 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -667,7 +667,7 @@ class Exists(Subquery):\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         sql, params = super().as_sql(compiler, connection, template, **extra_context)\n         if self.negated:\n-            sql = 'NOT {}'.format(sql)\n+            sql = 'NOT ({})'.format(sql)\n         return (sql, params)\n     def select_format(self, compiler, sql, params):\n         if not compiler.connection.features.supports_boolean_expr_in_select_clause:\n", "normalized_occurrence": 1}
