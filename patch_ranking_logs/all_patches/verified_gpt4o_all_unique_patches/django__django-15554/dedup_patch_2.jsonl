{"model_name_or_path": "agentless", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..08c9840 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -798,7 +798,7 @@ class Query(BaseExpression):\n         most recently created alias for the table (if one exists) is reused.\n         \"\"\"\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and alias_list and filtered_relation is None:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return alias, False\n@@ -1599,6 +1599,15 @@ class Query(BaseExpression):\n                         \"%r).\" % (lookup, filtered_relation.relation_name)\n                     )\n         self._filtered_relations[filtered_relation.alias] = filtered_relation\n+        if filtered_relation.alias not in self.alias_map:\n+            self.alias_map[filtered_relation.alias] = JoinInfo(\n+                table_name=self.alias_map[filtered_relation.relation_name].table_name,\n+                rhs_alias=filtered_relation.alias,\n+                join_type=LOUTER,\n+                join_field=None,\n+                nullable=True,\n+                filtered_relation=filtered_relation,\n+            )\n \n     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..7a54dd7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -426,7 +426,7 @@ class Query(BaseExpression):\n                 callback(target, model, values)\n     def table_alias(self, table_name, create=False, filtered_relation=None):\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and alias_list and (filtered_relation is None):\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n@@ -797,6 +797,8 @@ class Query(BaseExpression):\n                 else:\n                     raise ValueError(\"FilteredRelation's condition doesn't support nested relations deeper than the relation_name (got %r for %r).\" % (lookup, filtered_relation.relation_name))\n         self._filtered_relations[filtered_relation.alias] = filtered_relation\n+        if filtered_relation.alias not in self.alias_map:\n+            self.alias_map[filtered_relation.alias] = JoinInfo(table_name=self.alias_map[filtered_relation.relation_name].table_name, rhs_alias=filtered_relation.alias, join_type=LOUTER, join_field=None, nullable=True, filtered_relation=filtered_relation)\n     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):\n         path, names_with_path = ([], [])\n         for pos, name in enumerate(names):\n", "normalized_occurrence": 1}
