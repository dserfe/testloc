{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..cf5f227 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -140,7 +140,7 @@ def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars',\n         # sklearn.linear_model.coordinate_descent.enet_path has a verbosity\n         # argument that we could pass in from Lasso.\n         clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False,\n-                    precompute=gram, max_iter=max_iter, warm_start=True,\n+                    precompute=gram, max_iter=self.max_iter, warm_start=True,\n                     positive=positive)\n \n         if init is not None:\n@@ -991,7 +991,8 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False, max_iter=1000):\n+        self.max_iter = max_iter\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..616fc5b 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -35,7 +35,7 @@ def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars', regula\n             np.seterr(**err_mgt)\n     elif algorithm == 'lasso_cd':\n         alpha = float(regularization) / n_features\n-        clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False, precompute=gram, max_iter=max_iter, warm_start=True, positive=positive)\n+        clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False, precompute=gram, max_iter=self.max_iter, warm_start=True, positive=positive)\n         if init is not None:\n             clf.coef_ = init\n         clf.fit(dictionary.T, X.T, check_input=check_input)\n@@ -284,7 +284,8 @@ class SparseCodingMixin(TransformerMixin):\n         return code\n class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = ['dictionary']\n-    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False):\n+    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False, max_iter=1000):\n+        self.max_iter = max_iter\n         self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n         self.components_ = dictionary\n     def fit(self, X, y=None):\n", "normalized_occurrence": 1}
