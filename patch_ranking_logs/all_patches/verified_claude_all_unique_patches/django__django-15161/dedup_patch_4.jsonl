{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..372e5ce 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -737,6 +737,14 @@ class Value(SQLiteNumericMixin, Expression):\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = [self.value]\n+        kwargs = {}\n+        if self._output_field is not None:\n+            kwargs['output_field'] = self._output_field\n+        return path, args, kwargs\n+\n     def __init__(self, value, output_field=None):\n         \"\"\"\n         Arguments:\n@@ -990,6 +998,16 @@ class When(Expression):\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            kwargs['condition'] = self.condition\n+        if self.result is not None:\n+            kwargs['then'] = self.result\n+        return path, args, kwargs\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1064,6 +1082,18 @@ class Case(SQLiteNumericMixin, Expression):\n             ELSE 'zero'\n         END\n     \"\"\"\n+\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self._output_field is not None:\n+            kwargs['output_field'] = self._output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return path, args, kwargs\n     template = 'CASE %(cases)s ELSE %(default)s END'\n     case_joiner = ' '\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = [self.value]\n+        kwargs = {}\n+        if self._output_field is not None:\n+            kwargs['output_field'] = self._output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            kwargs['condition'] = self.condition\n+        if self.result is not None:\n+            kwargs['then'] = self.result\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self._output_field is not None:\n+            kwargs['output_field'] = self._output_field\n+        if self.extra:\n+            kwargs.update(self.extra)\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
