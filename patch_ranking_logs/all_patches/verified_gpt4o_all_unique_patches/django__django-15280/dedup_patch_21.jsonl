{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..c095777 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -186,11 +186,14 @@ class ForwardManyToOneDescriptor:\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n                 remote_field = self.field.remote_field\n-                # If this is a one-to-one relation, set the reverse accessor\n-                # cache on the related object to the current instance to avoid\n-                # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                # Handle deferred fields\n+                if hasattr(instance, '_deferred') and instance._deferred:\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field in deferred_fields:\n+                        if field in rel_obj.get_deferred_fields():\n+                            rel_obj._deferred.add(field)\n             self.field.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None and not self.field.null:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..a194213 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -60,6 +60,11 @@ class ForwardManyToOneDescriptor:\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n+                if hasattr(instance, '_deferred') and instance._deferred:\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field in deferred_fields:\n+                        if field in rel_obj.get_deferred_fields():\n+                            rel_obj._deferred.add(field)\n             self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n", "normalized_occurrence": 1}
