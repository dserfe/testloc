{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..f2cef46 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -789,6 +789,8 @@ class Field(RegisterLookupMixin):\n         return getattr(model_instance, self.attname)\n \n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n@@ -1008,11 +1010,15 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n \n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n \n@@ -1753,6 +1759,8 @@ class IntegerField(Field):\n         return validators_\n \n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n@@ -1767,6 +1775,8 @@ class IntegerField(Field):\n         return \"IntegerField\"\n \n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if value is None:\n             return value\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..bb4e9fa 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -356,6 +356,9 @@ class Field(RegisterLookupMixin):\n     def pre_save(self, model_instance, add):\n         return getattr(model_instance, self.attname)\n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n+        'Perform preliminary non-db specific value checks and conversions.'\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n         return value\n@@ -485,10 +488,14 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         value = super().get_prep_value(value)\n         return self.to_python(value)\n     def formfield(self, **kwargs):\n@@ -880,6 +887,8 @@ class IntegerField(Field):\n             validators_.append(validators.MaxValueValidator(max_value))\n         return validators_\n     def get_prep_value(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n@@ -890,6 +899,8 @@ class IntegerField(Field):\n     def get_internal_type(self):\n         return 'IntegerField'\n     def to_python(self, value):\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         if value is None:\n             return value\n         try:\n", "normalized_occurrence": 1}
