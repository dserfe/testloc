{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..94b8985 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,7 +212,7 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:')) and not uri.startswith(('file:', '/')):\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n@@ -224,7 +224,17 @@ class CheckExternalLinksBuilder(Builder):\n                 if rex.match(uri):\n                     return 'ignored', '', 0\n \n-            # need to actually check the URI\n+            # Handle local file links\n+            if uri.startswith(('file:', '/')):\n+                local_path = uri[7:] if uri.startswith('file:') else uri\n+                if not os.path.isabs(local_path):\n+                    local_path = os.path.join(self.app.srcdir, local_path)\n+                if os.path.exists(local_path):\n+                    return 'working', '', 0\n+                else:\n+                    return 'broken', __(\"Local file not found\"), 0\n+\n+            # Need to actually check the URI\n             for _ in range(self.app.config.linkcheck_retries):\n                 status, info, code = check_uri()\n                 if status != \"broken\":\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..c298ad2 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -132,7 +132,7 @@ class CheckExternalLinksBuilder(Builder):\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n-            elif not uri.startswith(('http:', 'https:')):\n+            elif not uri.startswith(('http:', 'https:')) and (not uri.startswith(('file:', '/'))):\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n@@ -143,6 +143,14 @@ class CheckExternalLinksBuilder(Builder):\n             for rex in self.to_ignore:\n                 if rex.match(uri):\n                     return ('ignored', '', 0)\n+            if uri.startswith(('file:', '/')):\n+                local_path = uri[7:] if uri.startswith('file:') else uri\n+                if not os.path.isabs(local_path):\n+                    local_path = os.path.join(self.app.srcdir, local_path)\n+                if os.path.exists(local_path):\n+                    return ('working', '', 0)\n+                else:\n+                    return ('broken', __('Local file not found'), 0)\n             for _ in range(self.app.config.linkcheck_retries):\n                 status, info, code = check_uri()\n                 if status != 'broken':\n", "normalized_occurrence": 1}
