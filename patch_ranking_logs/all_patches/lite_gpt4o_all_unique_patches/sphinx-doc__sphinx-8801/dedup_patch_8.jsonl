{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..5b17bde 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -657,9 +657,10 @@ class Documenter:\n             return False, selected\n         elif self.options.inherited_members:\n             return False, [(m.name, m.value) for m in members.values()]\n+        elif self.options.inherited_members:\n+            return False, list(members.values())\n         else:\n-            return False, [(m.name, m.value) for m in members.values()\n-                           if m.directly_defined]\n+            return False, [m for m in members.values() if m.class_ == self.object]\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n@@ -684,8 +685,8 @@ class Documenter:\n                         return True\n                     elif name in cls.__dict__:\n                         return False\n-                    elif name in self.get_attr(cls, '__annotations__', {}):\n-                        return False\n+                    elif name in cls.__annotations__:\n+                        return True\n                     elif isinstance(obj, ObjectMember) and obj.class_ is cls:\n                         return False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..f740788 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -342,8 +342,10 @@ class Documenter:\n             return (False, selected)\n         elif self.options.inherited_members:\n             return (False, [(m.name, m.value) for m in members.values()])\n+        elif self.options.inherited_members:\n+            return (False, list(members.values()))\n         else:\n-            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n+            return (False, [m for m in members.values() if m.class_ == self.object])\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n@@ -352,8 +354,8 @@ class Documenter:\n                         return True\n                     elif name in cls.__dict__:\n                         return False\n-                    elif name in self.get_attr(cls, '__annotations__', {}):\n-                        return False\n+                    elif name in cls.__annotations__:\n+                        return True\n                     elif isinstance(obj, ObjectMember) and obj.class_ is cls:\n                         return False\n             return False\n", "normalized_occurrence": 1}
