{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..7b4f067 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1383,11 +1383,22 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n-        if inspect.isclass(getattr(builtins, reftarget, None)):\n-            # built-in class\n+        modname = node.get('py:module')\n+        \n+        # Handle fully qualified names (like struct.Struct)\n+        if '.' in reftarget:\n+            mod, cls = reftarget.rsplit('.', 1)\n+            try:\n+                module = importlib.import_module(mod)\n+                if inspect.isclass(getattr(module, cls, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n+        # Handle built-in types\n+        elif inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n+        # Handle typing module types\n         elif istyping(reftarget):\n-            # typing class\n             return contnode\n \n     return None\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..747c42e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -843,7 +843,16 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n-        if inspect.isclass(getattr(builtins, reftarget, None)):\n+        modname = node.get('py:module')\n+        if '.' in reftarget:\n+            mod, cls = reftarget.rsplit('.', 1)\n+            try:\n+                module = importlib.import_module(mod)\n+                if inspect.isclass(getattr(module, cls, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n+        elif inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n", "normalized_occurrence": 1}
