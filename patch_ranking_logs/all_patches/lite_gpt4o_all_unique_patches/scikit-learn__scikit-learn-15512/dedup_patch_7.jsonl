{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..30c2a43 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -193,13 +193,14 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n+            if not unconverged and (K > 0):\n                 if verbose:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n-    else:\n-        if verbose:\n-            print(\"Did not converge\")\n+        if it == max_iter:\n+            if verbose:\n+                print(\"Did not converge\")\n+            unconverged = True\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n@@ -219,7 +220,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         # Reduce labels to a sorted, gapless, list\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n+    if unconverged:\n         warnings.warn(\"Affinity propagation did not converge, this model \"\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..edb3ca1 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -64,13 +64,14 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n             unconverged = np.sum((se == convergence_iter) + (se == 0)) != n_samples\n-            if not unconverged and K > 0 or it == max_iter:\n+            if not unconverged and K > 0:\n                 if verbose:\n                     print('Converged after %d iterations.' % it)\n                 break\n-    else:\n-        if verbose:\n-            print('Did not converge')\n+        if it == max_iter:\n+            if verbose:\n+                print('Did not converge')\n+            unconverged = True\n     I = np.flatnonzero(E)\n     K = I.size\n     if K > 0:\n@@ -85,7 +86,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         labels = I[c]\n         cluster_centers_indices = np.unique(labels)\n         labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n+    if unconverged:\n         warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n", "normalized_occurrence": 1}
