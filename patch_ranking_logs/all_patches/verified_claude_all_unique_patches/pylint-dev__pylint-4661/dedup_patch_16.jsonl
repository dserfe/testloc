{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4661", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 1b8a20a..d17ec37 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -1235,11 +1235,20 @@ class PyLinter(\n         for msg_cat in MSG_TYPES.values():\n             self.stats[msg_cat] = 0\n \n+    def _get_data_path(self):\n+        \"\"\"Get the XDG compliant data directory path for pylint.\"\"\"\n+        xdg_data_home = os.environ.get('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))\n+        return os.path.join(xdg_data_home, 'pylint')\n+\n     def generate_reports(self):\n         \"\"\"close the whole package /module, it's time to make reports !\n \n         if persistent run, pickle results for later comparison\n         \"\"\"\n+        # Ensure the XDG data directory exists\n+        if self.config.persistent:\n+            data_dir = self._get_data_path()\n+            os.makedirs(data_dir, exist_ok=True)\n         # Display whatever messages are left on the reporter.\n         self.reporter.display_messages(report_nodes.Section())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 31c726e..28371f4 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -449,7 +449,13 @@ class PyLinter(config.OptionsManagerMixIn, MessagesHandlerMixIn, reporters.Repor\n             MANAGER.extension_package_whitelist.update(self.config.extension_pkg_whitelist)\n         for msg_cat in MSG_TYPES.values():\n             self.stats[msg_cat] = 0\n+    def _get_data_path(self):\n+        xdg_data_home = os.environ.get('XDG_DATA_HOME', os.path.expanduser('~/.local/share'))\n+        return os.path.join(xdg_data_home, 'pylint')\n     def generate_reports(self):\n+        if self.config.persistent:\n+            data_dir = self._get_data_path()\n+            os.makedirs(data_dir, exist_ok=True)\n         self.reporter.display_messages(report_nodes.Section())\n         if self.file_state.base_name is not None:\n             previous_stats = config.load_results(self.file_state.base_name)\n", "normalized_occurrence": 1}
