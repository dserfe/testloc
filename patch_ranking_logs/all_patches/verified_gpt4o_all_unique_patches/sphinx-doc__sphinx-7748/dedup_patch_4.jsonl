{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..2742639 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1044,7 +1044,7 @@ class DocstringSignatureMixin:\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1067,9 +1067,14 @@ class DocstringSignatureMixin:\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n             result = args, retann\n-            # don't look any further\n-            break\n-        return result\n+            results.append((args, retann))\n+\n+        # Combine all found signatures\n+        if results:\n+            combined_args = '\\n'.join([res[0] for res in results])\n+            combined_retann = '\\n'.join([res[1] for res in results if res[1]])\n+            return combined_args, combined_retann\n+        return None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:\n         if encoding is not None:\n@@ -1087,7 +1092,7 @@ class DocstringSignatureMixin:\n             # the feature is enabled\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                self.args, self.retann = result[0], result[1]\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..fb3acc6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -759,7 +759,7 @@ class DocstringSignatureMixin:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -777,8 +777,12 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n             result = (args, retann)\n-            break\n-        return result\n+            results.append((args, retann))\n+        if results:\n+            combined_args = '\\n'.join([res[0] for res in results])\n+            combined_retann = '\\n'.join([res[1] for res in results if res[1]])\n+            return (combined_args, combined_retann)\n+        return None\n \n     def get_doc(self, encoding: str=None, ignore: int=None) -> List[List[str]]:\n         if encoding is not None:\n@@ -792,7 +796,7 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:\n             result = self._find_signature()\n             if result is not None:\n-                self.args, self.retann = result\n+                self.args, self.retann = (result[0], result[1])\n         return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n", "normalized_occurrence": 1}
