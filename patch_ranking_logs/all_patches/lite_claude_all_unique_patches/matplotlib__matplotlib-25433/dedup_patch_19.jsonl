{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..9e68a01 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -983,7 +983,21 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        def wrapped_func(val):\n+            # Store current event handling state\n+            canvas = self.ax.figure.canvas\n+            current_callbacks = canvas.callbacks.callbacks.copy()\n+            \n+            # Call the user function\n+            result = func(val)\n+            \n+            # Restore event handling state if figure was cleared\n+            if not canvas.callbacks.callbacks:\n+                canvas.callbacks.callbacks = current_callbacks\n+            \n+            return result\n+            \n+        return self._observers.connect('changed', wrapped_func)\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..7f47654 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -795,7 +795,15 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def wrapped_func(val):\n+            canvas = self.ax.figure.canvas\n+            current_callbacks = canvas.callbacks.callbacks.copy()\n+            result = func(val)\n+            if not canvas.callbacks.callbacks:\n+                canvas.callbacks.callbacks = current_callbacks\n+            return result\n+        return self._observers.connect('changed', wrapped_func)\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
