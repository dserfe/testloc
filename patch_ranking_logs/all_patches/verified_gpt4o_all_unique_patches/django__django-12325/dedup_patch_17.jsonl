{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..88e8bad 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -201,7 +201,8 @@ class ModelBase(type):\n             if base != new_class and not base._meta.abstract:\n                 continue\n             # Locate OneToOneField instances.\n-            for field in base._meta.local_fields:\n+            # Process fields with parent_link=True first\n+            for field in sorted(base._meta.local_fields, key=lambda f: not getattr(f, 'parent_link', False)):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..8971275 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -104,7 +104,7 @@ class ModelBase(type):\n                 continue\n             if base != new_class and (not base._meta.abstract):\n                 continue\n-            for field in base._meta.local_fields:\n+            for field in sorted(base._meta.local_fields, key=lambda f: not getattr(f, 'parent_link', False)):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n", "normalized_occurrence": 1}
