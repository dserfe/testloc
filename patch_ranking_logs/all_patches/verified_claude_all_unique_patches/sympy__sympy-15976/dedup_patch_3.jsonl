{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..110af80 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -777,11 +777,29 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n \n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        # Split name into letter and number parts if it ends with digits\n+        import re\n+        match = re.match(r'([a-zA-Z_]+)(\\d+)$', name)\n+        if match:\n+            letter, number = match.groups()\n+            mrow = self.dom.createElement('mrow')\n+            mi = self.dom.createElement('mi')\n+            mi.appendChild(self.dom.createTextNode(letter))\n+            mn = self.dom.createElement('mn')\n+            mn.appendChild(self.dom.createTextNode(number))\n+            mrow.appendChild(mi)\n+            mrow.appendChild(mn)\n+            mname = mrow\n+        else:\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n+\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                if isinstance(mname, self.dom.createElement('mrow').__class__):\n+                    x = mname\n+                else:\n+                    x.appendChild(self.dom.createTextNode(name))\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..23e5d3f 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -544,11 +544,27 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        import re\n+        match = re.match('([a-zA-Z_]+)(\\\\d+)$', name)\n+        if match:\n+            letter, number = match.groups()\n+            mrow = self.dom.createElement('mrow')\n+            mi = self.dom.createElement('mi')\n+            mi.appendChild(self.dom.createTextNode(letter))\n+            mn = self.dom.createElement('mn')\n+            mn.appendChild(self.dom.createTextNode(number))\n+            mrow.appendChild(mi)\n+            mrow.appendChild(mn)\n+            mname = mrow\n+        else:\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n+                if isinstance(mname, self.dom.createElement('mrow').__class__):\n+                    x = mname\n+                else:\n+                    x.appendChild(self.dom.createTextNode(name))\n             else:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n", "normalized_occurrence": 1}
