{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..dbd4227 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2105,11 +2105,19 @@ def uniq(seq, result=None):\n     [1, 4, 5, 2]\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n+\n+    Notes\n+    =====\n+    If the input sequence supports len(), modifying it while iterating will\n+    raise a RuntimeError, similar to modifying a dict while iterating.\n     \"\"\"\n     try:\n         seen = set()\n         result = result or []\n+        initial_len = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            if initial_len is not None and len(seq) != initial_len:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..54f6845 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -733,7 +733,10 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        initial_len = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            if initial_len is not None and len(seq) != initial_len:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 12}
