{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..3975066 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,17 +84,38 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+\n+        # Get types from instance_attrs_type and locals_type\n+        attr_types = {}\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n-            + properties\n         ):\n+            if self.show_attr(node_name):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    attr_types[node_name] = names\n+\n+        # Get types from __init__ annotations\n+        init = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init and init.args.annotations:\n+            for arg_name, annotation in init.args.annotations.items():\n+                if arg_name != 'return' and self.show_attr(arg_name):\n+                    try:\n+                        annotation_name = annotation.name\n+                        if annotation_name and arg_name not in attr_types:\n+                            attr_types[arg_name] = [annotation_name]\n+                    except AttributeError:\n+                        continue\n+\n+        # Format attributes with their types\n+        for node_name in (list(attr_types.keys()) + [n for n, _ in properties]):\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = \"{} : {}\".format(node_name, \", \".join(names))\n+            if node_name in attr_types and attr_types[node_name]:\n+                node_name = \"{} : {}\".format(node_name, \", \".join(attr_types[node_name]))\n             attrs.append(node_name)\n+\n         return sorted(attrs)\n \n     def get_methods(self, node):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..604a284 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,12 +57,27 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n+        attr_types = {}\n+        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()):\n+            if self.show_attr(node_name):\n+                names = self.class_names(associated_nodes)\n+                if names:\n+                    attr_types[node_name] = names\n+        init = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        if init and init.args.annotations:\n+            for arg_name, annotation in init.args.annotations.items():\n+                if arg_name != 'return' and self.show_attr(arg_name):\n+                    try:\n+                        annotation_name = annotation.name\n+                        if annotation_name and arg_name not in attr_types:\n+                            attr_types[arg_name] = [annotation_name]\n+                    except AttributeError:\n+                        continue\n+        for node_name in list(attr_types.keys()) + [n for n, _ in properties]:\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n-            if names:\n-                node_name = '{} : {}'.format(node_name, ', '.join(names))\n+            if node_name in attr_types and attr_types[node_name]:\n+                node_name = '{} : {}'.format(node_name, ', '.join(attr_types[node_name]))\n             attrs.append(node_name)\n         return sorted(attrs)\n \n", "normalized_occurrence": 1}
