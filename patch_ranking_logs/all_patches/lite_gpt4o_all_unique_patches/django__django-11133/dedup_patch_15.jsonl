{"model_name_or_path": "agentless", "instance_id": "django__django-11133", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 5126111..9c0e5ec 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -233,6 +233,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return value.tobytes()\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \n@@ -316,7 +318,8 @@ class HttpResponse(HttpResponseBase):\n                     value.close()\n                 except Exception:\n                     pass\n-        else:\n+        elif isinstance(value, memoryview):\n+            content = value.tobytes()\n             content = self.make_bytes(value)\n         # Create a list of properly encoded bytestrings to support write().\n         self._container = [content]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 1fade57..a138c42 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -144,6 +144,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return value.tobytes()\n         return str(value).encode(self.charset)\n     def close(self):\n         for closable in self._closable_objects:\n@@ -189,7 +191,8 @@ class HttpResponse(HttpResponseBase):\n                     value.close()\n                 except Exception:\n                     pass\n-        else:\n+        elif isinstance(value, memoryview):\n+            content = value.tobytes()\n             content = self.make_bytes(value)\n         self._container = [content]\n     def __iter__(self):\n", "normalized_occurrence": 1}
