{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex 9ab9719..b1a4703 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -474,7 +474,11 @@ class prettyForm(stringPict):\n \n     def __pow__(self, b):\n         \"\"\"Make a pretty power.\n+        If self is a vector basis element's prettyForm, wrap it in parentheses.\n         \"\"\"\n+        # Check if this is a vector basis element by looking for special vector formatting\n+        is_vector_basis = any(line.endswith('_j') or line.endswith('_i') or line.endswith('_k') \n+                            for line in self.picture)\n         a = self\n         use_inline_func_form = False\n         if b.binding == prettyForm.POW:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex e2b1308..e043332 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -226,6 +226,7 @@ class prettyForm(stringPict):\n     def __repr__(self):\n         return 'prettyForm(%r,%d,%d)' % ('\\n'.join(self.picture), self.baseline, self.binding)\n     def __pow__(self, b):\n+        is_vector_basis = any((line.endswith('_j') or line.endswith('_i') or line.endswith('_k') for line in self.picture))\n         a = self\n         use_inline_func_form = False\n         if b.binding == prettyForm.POW:\n", "normalized_occurrence": 1}
