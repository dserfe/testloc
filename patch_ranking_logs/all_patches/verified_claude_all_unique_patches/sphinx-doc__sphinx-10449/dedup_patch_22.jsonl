{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..25d2761 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -170,13 +170,15 @@ def augment_descriptions_with_types(\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n-        rtype = annotations['return']\n-        if 'return' not in has_type and ('return' in has_description or\n-                                         (force_rtype and rtype != \"None\")):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', rtype))\n-            node += field\n+        # Don't add return type for classes\n+        if objtype != 'class':\n+            rtype = annotations['return']\n+            if 'return' not in has_type and ('return' in has_description or\n+                                             (force_rtype and rtype != \"None\")):\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                field += nodes.field_body('', nodes.paragraph('', rtype))\n+                node += field\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..fa9868b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -128,12 +128,13 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n     if 'return' in annotations:\n-        rtype = annotations['return']\n-        if 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n-            field = nodes.field()\n-            field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', rtype))\n-            node += field\n+        if objtype != 'class':\n+            rtype = annotations['return']\n+            if 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                field += nodes.field_body('', nodes.paragraph('', rtype))\n+                node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\n", "normalized_occurrence": 1}
