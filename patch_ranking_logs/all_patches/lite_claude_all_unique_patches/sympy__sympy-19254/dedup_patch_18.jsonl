{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..5777404 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,32 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n-    n = dup_degree(f)\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    This implements the improved Knuth-Cohen bound which provides\n+    a tighter factor coefficient bound compared to Mignotte's bound.\n+    \"\"\"\n+    n = dup_degree(f)\n+    lc = abs(dup_LC(f, K))\n+    norm = dup_max_norm(f, K)\n+    \n+    # Knuth-Cohen bound formula\n+    return 2 * K.sqrt(K(2)**(n-1) * norm * (norm - lc) + (lc/2)**2)\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`.\n+    \n+    This implements the improved Knuth-Cohen bound which provides\n+    a tighter factor coefficient bound compared to Mignotte's bound.\n+    The bound is adapted for the multivariate case.\n+    \"\"\"\n     n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    norm = dmp_max_norm(f, u, K)\n+    \n+    # Knuth-Cohen bound formula adapted for multivariate case\n+    return 2 * K.sqrt(K(2)**(n-1) * norm * (norm - lc) + (lc/2)**2)\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..fb3cdb4 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,15 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dup_LC(f, K))\n+    norm = dup_max_norm(f, K)\n+    return 2 * K.sqrt(K(2) ** (n - 1) * norm * (norm - lc) + (lc / 2) ** 2)\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n     n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    norm = dmp_max_norm(f, u, K)\n+    return 2 * K.sqrt(K(2) ** (n - 1) * norm * (norm - lc) + (lc / 2) ** 2)\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
