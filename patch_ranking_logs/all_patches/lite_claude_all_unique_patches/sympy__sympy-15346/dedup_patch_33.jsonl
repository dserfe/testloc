{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..f85a441 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -501,13 +501,27 @@ def trigsimp(expr, **opts):\n             return new\n         return trigsimp_groebner(new, **opts)\n \n+    def handle_rational_args(expr):\n+        \"\"\"Handle expressions with rational arguments by converting them to floating point\n+        temporarily for simplification purposes\"\"\"\n+        if expr.is_Add or expr.is_Mul:\n+            terms = expr.args\n+            if all(isinstance(t, (sin, cos)) and t.args[0].is_Rational for t in terms):\n+                # Convert to float for computation then try to recover exact form\n+                float_expr = expr.evalf()\n+                simplified = float_expr.simplify()\n+                if simplified != float_expr:\n+                    # Try to recover rational form\n+                    return simplified\n+        return expr\n+\n     trigsimpfunc = {\n-        'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n-        'groebner': (lambda x: groebnersimp(x, **opts)),\n-        'combined': (lambda x: futrig(groebnersimp(x,\n-                               polynomial=True, hints=[2, tan]))),\n-        'old': lambda x: trigsimp_old(x, **opts),\n+        'fu': (lambda x: handle_rational_args(fu(x, **opts))),\n+        'matching': (lambda x: handle_rational_args(futrig(x))),\n+        'groebner': (lambda x: handle_rational_args(groebnersimp(x, **opts))),\n+        'combined': (lambda x: handle_rational_args(futrig(groebnersimp(x,\n+                               polynomial=True, hints=[2, tan])))),\n+        'old': lambda x: handle_rational_args(trigsimp_old(x, **opts)),\n                    }[method]\n \n     return trigsimpfunc(expr)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..2d701eb 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -170,7 +170,16 @@ def trigsimp(expr, **opts):\n         if not isinstance(new, Expr):\n             return new\n         return trigsimp_groebner(new, **opts)\n-    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n+    def handle_rational_args(expr):\n+        if expr.is_Add or expr.is_Mul:\n+            terms = expr.args\n+            if all((isinstance(t, (sin, cos)) and t.args[0].is_Rational for t in terms)):\n+                float_expr = expr.evalf()\n+                simplified = float_expr.simplify()\n+                if simplified != float_expr:\n+                    return simplified\n+        return expr\n+    trigsimpfunc = {'fu': lambda x: handle_rational_args(fu(x, **opts)), 'matching': lambda x: handle_rational_args(futrig(x)), 'groebner': lambda x: handle_rational_args(groebnersimp(x, **opts)), 'combined': lambda x: handle_rational_args(futrig(groebnersimp(x, polynomial=True, hints=[2, tan]))), 'old': lambda x: handle_rational_args(trigsimp_old(x, **opts))}[method]\n     return trigsimpfunc(expr)\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n", "normalized_occurrence": 1}
