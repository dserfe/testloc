{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..661a3f9 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,7 +38,11 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        converted_kwargs = {\n+            key: list(value) if isinstance(value, dict_keys) else value\n+            for key, value in kwargs.items()\n+        }\n+        super().__init__(children=[*args, *sorted(converted_kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..917e0bd 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -16,7 +16,8 @@ class Q(tree.Node):\n     default = AND\n     conditional = True\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        converted_kwargs = {key: list(value) if isinstance(value, dict_keys) else value for key, value in kwargs.items()}\n+        super().__init__(children=[*args, *sorted(converted_kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n", "normalized_occurrence": 1}
