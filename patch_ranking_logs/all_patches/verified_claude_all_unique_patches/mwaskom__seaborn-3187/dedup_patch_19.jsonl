{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 609c102..ddc66b4 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -647,7 +647,11 @@ class Continuous(ContinuousBase):\n             formatter = EngFormatter(unit, sep=sep)\n \n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            # Force the formatter to compute its offset\n+            dummy_axis = mpl.axes.Axes(mpl.figure.Figure(), [0, 0, 1, 1])\n+            dummy_axis.set_major_formatter(formatter)\n+            formatter.set_locs([])  # Trigger format_data computation\n \n         return formatter\n \ndiff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..dc63a41 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -90,6 +90,18 @@ class DotBase(Mark):\n \n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        \n+        # Handle formatter offset if present\n+        for var in variables:\n+            if var in scales:\n+                scale = scales[var]\n+                if hasattr(scale, \"_label_params\"):\n+                    formatter = scale._get_formatter(**scale._label_params)\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        # Apply offset to the legend value if needed\n+                        if formatter.offset != 0:\n+                            if var in key:\n+                                key[var] = key[var] / (10 ** formatter.orderOfMagnitude)\n \n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex ff6da17..95fbe3c 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -317,7 +317,10 @@ class Continuous(ContinuousBase):\n                 sep = ' '\n             formatter = EngFormatter(unit, sep=sep)\n         else:\n-            formatter = ScalarFormatter()\n+            formatter = ScalarFormatter(useOffset=True)\n+            dummy_axis = mpl.axes.Axes(mpl.figure.Figure(), [0, 0, 1, 1])\n+            dummy_axis.set_major_formatter(formatter)\n+            formatter.set_locs([])\n         return formatter\n @dataclass\n class Temporal(ContinuousBase):\ndiff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..d687013 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,15 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales:\n+                scale = scales[var]\n+                if hasattr(scale, '_label_params'):\n+                    formatter = scale._get_formatter(**scale._label_params)\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        if formatter.offset != 0:\n+                            if var in key:\n+                                key[var] = key[var] / 10 ** formatter.orderOfMagnitude\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
