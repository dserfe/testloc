{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7233", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex c0dd828..ccf6a39 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1014,6 +1014,10 @@ class Dataset(\n                 indexes = self._indexes.copy()\n             if encoding is _default:\n                 encoding = copy.copy(self._encoding)\n+            new_coord_names = coord_names.copy()\n+            for dim in dims:\n+                if dim in new_coord_names:\n+                    new_coord_names.remove(dim)\n             obj = self._construct_direct(\n                 variables, coord_names, dims, attrs, indexes, encoding\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex f13a66b..4dee6a5 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -393,6 +393,10 @@ class Dataset(DataWithCoords, DatasetAggregations, DatasetArithmetic, Mapping[Ha\n                 indexes = self._indexes.copy()\n             if encoding is _default:\n                 encoding = copy.copy(self._encoding)\n+            new_coord_names = coord_names.copy()\n+            for dim in dims:\n+                if dim in new_coord_names:\n+                    new_coord_names.remove(dim)\n             obj = self._construct_direct(variables, coord_names, dims, attrs, indexes, encoding)\n         return obj\n     def _replace_with_new_dims(self: T_Dataset, variables: dict[Hashable, Variable], coord_names: set | None=None, attrs: dict[Hashable, Any] | None | Default=_default, indexes: dict[Hashable, Index] | None=None, inplace: bool=False) -> T_Dataset:\n", "normalized_occurrence": 1}
