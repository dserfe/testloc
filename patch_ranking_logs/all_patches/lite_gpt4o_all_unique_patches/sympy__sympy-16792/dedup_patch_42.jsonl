{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..eb75dcf 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -455,6 +455,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n+            if isinstance(arg, InputArgument) and not arg.dimensions:\n+                return proto\n             return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..c6a5f01 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -207,6 +207,8 @@ class CythonCodeWrapper(CodeWrapper):\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n+            if isinstance(arg, InputArgument) and (not arg.dimensions):\n+                return proto\n             return proto + ' = 0'\n     def _call_arg(self, arg):\n         if arg.dimensions:\n", "normalized_occurrence": 1}
