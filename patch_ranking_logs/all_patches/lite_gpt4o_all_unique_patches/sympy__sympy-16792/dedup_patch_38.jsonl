{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..cd36148 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -446,6 +446,11 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            self._need_numpy = True\n+            ndim = len(arg.dimensions)\n+            mtype = np_types[t]\n+            return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n             return \"%s %s\" % (t, self._string_var(arg.name))\n \n@@ -454,6 +459,9 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         if arg.dimensions:\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n+            return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n             return proto + \" = 0\"\n \n@@ -461,6 +469,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..1b0818a 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -199,6 +199,11 @@ class CythonCodeWrapper(CodeWrapper):\n             ndim = len(arg.dimensions)\n             mtype = np_types[t]\n             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            self._need_numpy = True\n+            ndim = len(arg.dimensions)\n+            mtype = np_types[t]\n+            return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))\n         else:\n             return '%s %s' % (t, self._string_var(arg.name))\n     def _declare_arg(self, arg):\n@@ -206,12 +211,17 @@ class CythonCodeWrapper(CodeWrapper):\n         if arg.dimensions:\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n+            return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n             return proto + ' = 0'\n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n+        elif isinstance(arg, (InputArgument, InOutArgument)) and arg.dimensions:\n+            return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return '&{0}'.format(self._string_var(arg.name))\n         else:\n", "normalized_occurrence": 1}
