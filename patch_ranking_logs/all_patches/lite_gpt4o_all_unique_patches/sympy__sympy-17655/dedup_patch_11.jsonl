{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..2a56777 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -177,11 +177,25 @@ class Point(GeometryEntity):\n         # the general Point\n         return GeometryEntity.__new__(cls, *coords)\n \n-    def __abs__(self):\n+    def __rmul__(self, other):\n+        \"\"\"Right multiplication of a Point by a scalar.\"\"\"\n+        if isinstance(other, (int, float, sympy.Basic)):\n+            coords = [simplify(other * x) for x in self.args]\n+            return Point(coords, evaluate=False)\n+        raise GeometryError(\"Don't know how to multiply {} and a Point object\".format(other))\n         \"\"\"Returns the distance between this point and the origin.\"\"\"\n         origin = Point([0]*len(self))\n         return Point.distance(origin, self)\n \n+    def __mul__(self, other):\n+        \"\"\"Multiplication of a Point by a scalar.\"\"\"\n+        if isinstance(other, (int, float, sympy.Basic)):\n+            coords = [simplify(x * other) for x in self.args]\n+            return Point(coords, evaluate=False)\n+        raise GeometryError(\"Don't know how to multiply {} and a Point object\".format(other))\n+        origin = Point([0]*len(self))\n+        return Point.distance(origin, self)\n+\n     def __add__(self, other):\n         \"\"\"Add other to self by incrementing self's coordinates by\n         those of other.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..20edb70 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -58,7 +58,18 @@ class Point(GeometryEntity):\n             kwargs['_nocheck'] = True\n             return Point3D(*coords, **kwargs)\n         return GeometryEntity.__new__(cls, *coords)\n-    def __abs__(self):\n+    def __rmul__(self, other):\n+        if isinstance(other, (int, float, sympy.Basic)):\n+            coords = [simplify(other * x) for x in self.args]\n+            return Point(coords, evaluate=False)\n+        raise GeometryError(\"Don't know how to multiply {} and a Point object\".format(other))\n+        origin = Point([0] * len(self))\n+        return Point.distance(origin, self)\n+    def __mul__(self, other):\n+        if isinstance(other, (int, float, sympy.Basic)):\n+            coords = [simplify(x * other) for x in self.args]\n+            return Point(coords, evaluate=False)\n+        raise GeometryError(\"Don't know how to multiply {} and a Point object\".format(other))\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n", "normalized_occurrence": 1}
