{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-26291", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 8110df0..f16b394 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -395,7 +395,17 @@ class OffsetBox(martist.Artist):\n     def get_window_extent(self, renderer=None):\n         # docstring inherited\n         if renderer is None:\n-            renderer = self.figure._get_renderer()\n+            if hasattr(self, 'figure') and self.figure is not None:\n+                renderer = self.figure._get_renderer()\n+            if renderer is None:\n+                from matplotlib.backends.backend_agg import FigureCanvasAgg\n+                if hasattr(self, 'figure') and self.figure is not None:\n+                    canvas = FigureCanvasAgg(self.figure)\n+                    renderer = canvas.get_renderer()\n+                else:\n+                    # Return a dummy bbox if we have no renderer and no figure\n+                    from matplotlib.transforms import Bbox\n+                    return Bbox.from_bounds(0, 0, 0, 0)\n         bbox = self.get_bbox(renderer)\n         try:  # Some subclasses redefine get_offset to take no args.\n             px, py = self.get_offset(bbox, renderer)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 509a096..a9f5b61 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -360,7 +360,16 @@ class OffsetBox(martist.Artist):\n \n     def get_window_extent(self, renderer=None):\n         if renderer is None:\n-            renderer = self.figure._get_renderer()\n+            if hasattr(self, 'figure') and self.figure is not None:\n+                renderer = self.figure._get_renderer()\n+            if renderer is None:\n+                from matplotlib.backends.backend_agg import FigureCanvasAgg\n+                if hasattr(self, 'figure') and self.figure is not None:\n+                    canvas = FigureCanvasAgg(self.figure)\n+                    renderer = canvas.get_renderer()\n+                else:\n+                    from matplotlib.transforms import Bbox\n+                    return Bbox.from_bounds(0, 0, 0, 0)\n         bbox = self.get_bbox(renderer)\n         try:\n             px, py = self.get_offset(bbox, renderer)\n", "normalized_occurrence": 1}
