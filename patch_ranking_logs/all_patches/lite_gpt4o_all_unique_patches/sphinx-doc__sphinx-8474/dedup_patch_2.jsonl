{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8474", "model_patch": "diff --git a/sphinx/builders/latex/__init__.py b/sphinx/builders/latex/__init__.py\nindex e316785..1398b04 100644\n--- a/sphinx/builders/latex/__init__.py\n+++ b/sphinx/builders/latex/__init__.py\n@@ -264,6 +264,7 @@ class LaTeXBuilder(Builder):\n         patch_settings(docsettings)\n \n         self.init_document_data()\n+        self.init_numfig()\n         self.write_stylesheet()\n \n         for entry in self.document_data:\n@@ -303,7 +304,12 @@ class LaTeXBuilder(Builder):\n                 docwriter.theme = theme\n                 docwriter.write(doctree, destination)\n \n-    def get_contentsname(self, indexfile: str) -> str:\n+    def init_numfig(self) -> None:\n+        if self.config.numfig:\n+            for figtype in ('figure', 'table', 'code-block'):\n+                key = figtype + 'name'\n+                if key in self.context:\n+                    self.context[key] = self.config.numfig_format.get(figtype, '').split('%s', 1)\n         tree = self.env.get_doctree(indexfile)\n         contentsname = None\n         for toctree in tree.traverse(addnodes.toctree):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/latex/__init__.py b/sphinx/builders/latex/__init__.py\nindex 7d628f1..e5be9a8 100644\n--- a/sphinx/builders/latex/__init__.py\n+++ b/sphinx/builders/latex/__init__.py\n@@ -138,6 +138,7 @@ class LaTeXBuilder(Builder):\n         docsettings = OptionParser(defaults=self.env.settings, components=(docwriter,), read_config_files=True).get_default_values()\n         patch_settings(docsettings)\n         self.init_document_data()\n+        self.init_numfig()\n         self.write_stylesheet()\n         for entry in self.document_data:\n             docname, targetname, title, author, themename = entry[:5]\n@@ -169,7 +170,12 @@ class LaTeXBuilder(Builder):\n                 doctree.settings = docsettings\n                 docwriter.theme = theme\n                 docwriter.write(doctree, destination)\n-    def get_contentsname(self, indexfile: str) -> str:\n+    def init_numfig(self) -> None:\n+        if self.config.numfig:\n+            for figtype in ('figure', 'table', 'code-block'):\n+                key = figtype + 'name'\n+                if key in self.context:\n+                    self.context[key] = self.config.numfig_format.get(figtype, '').split('%s', 1)\n         tree = self.env.get_doctree(indexfile)\n         contentsname = None\n         for toctree in tree.traverse(addnodes.toctree):\n", "normalized_occurrence": 1}
