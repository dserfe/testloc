{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..85c6834 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -33,7 +33,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'NoneType':\n+                    return_annotation = 'None'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n \n@@ -52,14 +55,17 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     else:\n         fullname = signature['fullname']\n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if fullname in annotations:\n+        full_annotations = annotations[fullname]\n+        if 'return' in full_annotations and full_annotations['return'] == 'NoneType':\n+            full_annotations['return'] = 'None'\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, full_annotations)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -138,4 +144,4 @@ def setup(app: Sphinx) -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..2ceadf7 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -17,7 +17,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = typing.stringify(sig.return_annotation)\n+                if return_annotation == 'NoneType':\n+                    return_annotation = 'None'\n+                annotation['return'] = return_annotation\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n@@ -33,13 +36,16 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     else:\n         fullname = signature['fullname']\n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if fullname in annotations:\n+        full_annotations = annotations[fullname]\n+        if 'return' in full_annotations and full_annotations['return'] == 'NoneType':\n+            full_annotations['return'] = 'None'\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, full_annotations)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
