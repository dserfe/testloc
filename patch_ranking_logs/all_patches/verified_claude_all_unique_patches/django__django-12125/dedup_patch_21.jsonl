{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..9998361 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,26 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Handle django.db.models as a special case\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            name = \"models.\" + path[len(\"django.db.models.\"):]\n+            return name, imports\n+            \n+        # Find the module path (everything up to the first class)\n+        parts = path.split('.')\n+        module = parts[0]\n+        for part in parts[1:]:\n+            # Try importing to see if it's still a module\n+            try:\n+                importlib.import_module(f\"{module}.{part}\")\n+                module = f\"{module}.{part}\"\n+            except ImportError:\n+                break\n+                \n+        imports = {\"import %s\" % module}\n+        # Keep the rest of the path intact for inner classes\n+        name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..021bf84 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,20 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n+            name = 'models.' + path[len('django.db.models.'):]\n+            return (name, imports)\n+        parts = path.split('.')\n+        module = parts[0]\n+        for part in parts[1:]:\n+            try:\n+                importlib.import_module(f'{module}.{part}')\n+                module = f'{module}.{part}'\n+            except ImportError:\n+                break\n+        imports = {'import %s' % module}\n+        name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
