{"model_name_or_path": "agentless", "instance_id": "django__django-11999", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e63da1b..a7f45ff 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -941,6 +941,9 @@ class Model(metaclass=ModelBase):\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n+        custom_display_method = \"get_%s_display\" % field.name\n+        if hasattr(self, custom_display_method):\n+            return getattr(self, custom_display_method)()\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n \n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex f4898c2..b259d4a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -498,6 +498,9 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n+        custom_display_method = 'get_%s_display' % field.name\n+        if hasattr(self, custom_display_method):\n+            return getattr(self, custom_display_method)()\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n         if not self.pk:\n", "normalized_occurrence": 1}
