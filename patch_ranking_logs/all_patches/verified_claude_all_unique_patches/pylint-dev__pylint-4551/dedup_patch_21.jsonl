{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..c17a4cf 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,15 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get type hints from __init__ parameters\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and hasattr(init_method, 'args') and init_method.args.annotations:\n+            for arg, annotation in init_method.args.annotations.items():\n+                if arg != 'self' and arg != 'return':\n+                    init_type_hints[arg] = annotation\n+\n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n@@ -92,6 +101,17 @@ class ClassDiagram(Figure, FilterMixIn):\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n+            # If we have a type hint for this attribute from __init__, use it\n+            if not names and node_name in init_type_hints:\n+                try:\n+                    hint_name = init_type_hints[node_name].as_string()\n+                    # Clean up the type hint (remove quotes and 'typing.' prefix)\n+                    hint_name = hint_name.replace(\"'\", \"\").replace('\"', \"\")\n+                    if hint_name.startswith(\"typing.\"):\n+                        hint_name = hint_name[7:]\n+                    names = [hint_name]\n+                except (AttributeError, ValueError):\n+                    pass\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..b4f73ea 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,10 +57,25 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and hasattr(init_method, 'args') and init_method.args.annotations:\n+            for arg, annotation in init_method.args.annotations.items():\n+                if arg != 'self' and arg != 'return':\n+                    init_type_hints[arg] = annotation\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n+            if not names and node_name in init_type_hints:\n+                try:\n+                    hint_name = init_type_hints[node_name].as_string()\n+                    hint_name = hint_name.replace(\"'\", '').replace('\"', '')\n+                    if hint_name.startswith('typing.'):\n+                        hint_name = hint_name[7:]\n+                    names = [hint_name]\n+                except (AttributeError, ValueError):\n+                    pass\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n", "normalized_occurrence": 1}
