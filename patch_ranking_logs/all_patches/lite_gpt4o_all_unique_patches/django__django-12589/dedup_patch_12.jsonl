{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..4a4eb8d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -133,11 +133,19 @@ class SQLCompiler:\n         expressions = self.collapse_group_by(expressions, having_group_by)\n \n         for expr in expressions:\n-            sql, params = self.compile(expr)\n-            params_hash = make_hashable(params)\n-            if (sql, params_hash) not in seen:\n-                result.append((sql, params))\n-                seen.add((sql, params_hash))\n+            if isinstance(expr, Subquery):\n+                subquery_sql, subquery_params = self.compile(expr.queryset.query)\n+                subquery_sql = '(%s)' % subquery_sql  # wrap subquery with parentheses\n+                params_hash = make_hashable(subquery_params)\n+                if (subquery_sql, params_hash) not in seen:\n+                    result.append((subquery_sql, subquery_params))\n+                    seen.add((subquery_sql, params_hash))\n+            else:\n+                sql, params = self.compile(expr)\n+                params_hash = make_hashable(params)\n+                if (sql, params_hash) not in seen:\n+                    result.append((sql, params))\n+                    seen.add((sql, params_hash))\n         return result\n \n     def collapse_group_by(self, expressions, having):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..6eb7b0e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -64,11 +64,19 @@ class SQLCompiler:\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n         for expr in expressions:\n-            sql, params = self.compile(expr)\n-            params_hash = make_hashable(params)\n-            if (sql, params_hash) not in seen:\n-                result.append((sql, params))\n-                seen.add((sql, params_hash))\n+            if isinstance(expr, Subquery):\n+                subquery_sql, subquery_params = self.compile(expr.queryset.query)\n+                subquery_sql = '(%s)' % subquery_sql\n+                params_hash = make_hashable(subquery_params)\n+                if (subquery_sql, params_hash) not in seen:\n+                    result.append((subquery_sql, subquery_params))\n+                    seen.add((subquery_sql, params_hash))\n+            else:\n+                sql, params = self.compile(expr)\n+                params_hash = make_hashable(params)\n+                if (sql, params_hash) not in seen:\n+                    result.append((sql, params))\n+                    seen.add((sql, params_hash))\n         return result\n     def collapse_group_by(self, expressions, having):\n         if self.connection.features.allows_group_by_pk:\n", "normalized_occurrence": 1}
