{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..2219431 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -251,11 +251,11 @@ class Product(ExprWithIntLimits):\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n \n-        dif = n - a\n-        if dif.is_Integer:\n+        if a.is_Integer and n.is_Integer:\n+            dif = n - a\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n-\n-        elif term.is_polynomial(k):\n+        \n+        if term.is_polynomial(k):\n             poly = term.as_poly(k)\n \n             A = B = Q = S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..dd6deab 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -58,10 +58,10 @@ class Product(ExprWithIntLimits):\n             return term.subs(k, a)\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n-        dif = n - a\n-        if dif.is_Integer:\n+        if a.is_Integer and n.is_Integer:\n+            dif = n - a\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n-        elif term.is_polynomial(k):\n+        if term.is_polynomial(k):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n             all_roots = roots(poly)\n", "normalized_occurrence": 1}
