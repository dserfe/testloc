{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..ac509e1 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -87,9 +87,12 @@ class SessionRedirectMixin(object):\n \n         i = 0\n \n+        # Store the request that was made to get the response\n+        previous = req\n+        \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n-\n+            prepared_request = previous.copy()\n+            \n             resp.content  # Consume socket so it can be released\n \n             if i >= self.max_redirects:\n@@ -181,6 +184,7 @@ class SessionRedirectMixin(object):\n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n             i += 1\n+            previous = prepared_request  # Store the previous request for next iteration\n             yield resp\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..4687822 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -35,8 +35,9 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n+        previous = req\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = previous.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n@@ -83,6 +84,7 @@ class SessionRedirectMixin(object):\n             resp = self.send(prepared_request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies, allow_redirects=False)\n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n             i += 1\n+            previous = prepared_request\n             yield resp\n class Session(SessionRedirectMixin):\n     __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream', 'trust_env', 'max_redirects']\n", "normalized_occurrence": 1}
