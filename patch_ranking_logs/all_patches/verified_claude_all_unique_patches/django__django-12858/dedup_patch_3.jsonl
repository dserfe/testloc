{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..316b1d2 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -14,6 +14,37 @@ def check_all_models(app_configs=None, **kwargs):\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n+    def _is_valid_ordering_reference(field_name, model):\n+        \"\"\"\n+        Check if the field name is a valid reference for ordering.\n+        Allows for __isnull lookups on foreign key fields.\n+        \"\"\"\n+        # Handle __isnull lookup specially\n+        if field_name.endswith('__isnull'):\n+            field_name = field_name[:-8]  # Remove __isnull suffix\n+            if not field_name:  # If only __isnull was provided\n+                return False\n+\n+        # Split the field path into parts\n+        parts = field_name.split('__')\n+        current_model = model\n+        \n+        for part in parts:\n+            if not part:\n+                return False\n+                \n+            try:\n+                field = current_model._meta.get_field(part)\n+                if hasattr(field, 'remote_field') and field.remote_field:\n+                    current_model = field.remote_field.model\n+            except FieldDoesNotExist:\n+                # If it's not a field but a valid transform/lookup, that's okay\n+                if part == 'isnull':\n+                    return True\n+                return False\n+                \n+        return True\n+\n     if app_configs is None:\n         models = apps.get_models()\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 50dfeb8..9406537 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -11,6 +11,25 @@ def check_all_models(app_configs=None, **kwargs):\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n+    def _is_valid_ordering_reference(field_name, model):\n+        if field_name.endswith('__isnull'):\n+            field_name = field_name[:-8]\n+            if not field_name:\n+                return False\n+        parts = field_name.split('__')\n+        current_model = model\n+        for part in parts:\n+            if not part:\n+                return False\n+            try:\n+                field = current_model._meta.get_field(part)\n+                if hasattr(field, 'remote_field') and field.remote_field:\n+                    current_model = field.remote_field.model\n+            except FieldDoesNotExist:\n+                if part == 'isnull':\n+                    return True\n+                return False\n+        return True\n     if app_configs is None:\n         models = apps.get_models()\n     else:\n", "normalized_occurrence": 1}
