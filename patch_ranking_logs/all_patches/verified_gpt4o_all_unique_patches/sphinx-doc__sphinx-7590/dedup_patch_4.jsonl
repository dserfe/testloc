{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..3307bc5 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -785,6 +785,10 @@ class ASTExpression(ASTBase):\n # Primary expressions\n ################################################################################\n \n+import re\n+\n+user_defined_literal_re = re.compile(r'\\d+(\\.\\d+)?[a-zA-Z_]\\w*')\n+\n class ASTLiteral(ASTExpression):\n     pass\n \n@@ -4602,6 +4606,20 @@ class Symbol:\n         return ''.join(res)\n \n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.value\n+\n+    def get_id(self, version: int) -> str:\n+        return 'L' + self.value\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_name(self.value, self.value)\n+\n class DefinitionParser(BaseParser):\n     # those without signedness and size modifiers\n     # see https://en.cppreference.com/w/cpp/language/types\n@@ -4682,7 +4700,9 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined-literal\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..d8b9304 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -219,6 +219,8 @@ class ASTExpression(ASTBase):\n         raise NotImplementedError(repr(self))\n     def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n         raise NotImplementedError(repr(self))\n+import re\n+user_defined_literal_re = re.compile('\\\\d+(\\\\.\\\\d+)?[a-zA-Z_]\\\\w*')\n class ASTLiteral(ASTExpression):\n     pass\n class ASTPointerLiteral(ASTLiteral):\n@@ -3018,6 +3020,15 @@ class Symbol:\n         for c in self._children:\n             res.append(c.dump(indent + 1))\n         return ''.join(res)\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return self.value\n+    def get_id(self, version: int) -> str:\n+        return 'L' + self.value\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += addnodes.desc_name(self.value, self.value)\n class DefinitionParser(BaseParser):\n     _simple_fundemental_types = ('void', 'bool', 'char', 'wchar_t', 'char16_t', 'char32_t', 'int', 'float', 'double', 'auto')\n     _prefix_keys = ('class', 'struct', 'enum', 'union', 'typename')\n@@ -3074,6 +3085,8 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match(user_defined_literal_re):\n+            return ASTUserDefinedLiteral(self.matched_text)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
