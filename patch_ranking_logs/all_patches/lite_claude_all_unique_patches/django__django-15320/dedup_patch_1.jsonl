{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15320", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex f1f229b..bb3208d 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1150,6 +1150,8 @@ class Subquery(BaseExpression, Combinable):\n     def __init__(self, queryset, output_field=None, **extra):\n         # Allow the usage of both QuerySet and sql.Query objects.\n         self.query = getattr(queryset, 'query', queryset)\n+        # Ensure subquery attribute is set to generate correct SQL\n+        self.query.subquery = True\n         self.extra = extra\n         super().__init__(output_field)\n \n@@ -1179,7 +1181,11 @@ class Subquery(BaseExpression, Combinable):\n         template_params = {**self.extra, **extra_context}\n         query = query or self.query\n         subquery_sql, sql_params = query.as_sql(compiler, connection)\n-        template_params['subquery'] = subquery_sql[1:-1]\n+        # Only strip parentheses if they are actually present\n+        sql = subquery_sql\n+        if sql.startswith('(') and sql.endswith(')'):\n+            sql = sql[1:-1]\n+        template_params['subquery'] = sql\n \n         template = template or template_params.get('template', self.template)\n         sql = template % template_params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex a3ee007..797c204 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -713,6 +713,7 @@ class Subquery(BaseExpression, Combinable):\n     empty_result_set_value = None\n     def __init__(self, queryset, output_field=None, **extra):\n         self.query = getattr(queryset, 'query', queryset)\n+        self.query.subquery = True\n         self.extra = extra\n         super().__init__(output_field)\n     def get_source_expressions(self):\n@@ -735,7 +736,10 @@ class Subquery(BaseExpression, Combinable):\n         template_params = {**self.extra, **extra_context}\n         query = query or self.query\n         subquery_sql, sql_params = query.as_sql(compiler, connection)\n-        template_params['subquery'] = subquery_sql[1:-1]\n+        sql = subquery_sql\n+        if sql.startswith('(') and sql.endswith(')'):\n+            sql = sql[1:-1]\n+        template_params['subquery'] = sql\n         template = template or template_params.get('template', self.template)\n         sql = template % template_params\n         return (sql, sql_params)\n", "normalized_occurrence": 1}
