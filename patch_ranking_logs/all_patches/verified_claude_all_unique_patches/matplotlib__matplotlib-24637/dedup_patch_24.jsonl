{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24637", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex e7f0196..d9868e7 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1203,6 +1203,12 @@ class OffsetImage(OffsetBox):\n \n     def draw(self, renderer):\n         # docstring inherited\n+        # If this OffsetImage is contained within an AnnotationBbox, ensure the gid\n+        # is propagated to the image before drawing\n+        if hasattr(self, '_parent_artist'):\n+            parent_gid = self._parent_artist.get_gid()\n+            if parent_gid is not None:\n+                self.image.set_gid(parent_gid)\n         self.image.draw(renderer)\n         # bbox_artist(self, renderer, fill=False, props=dict(pad=0.))\n         self.stale = False\n@@ -1216,6 +1222,13 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n \n     This is like `.Annotation`, but with `OffsetBox` instead of `.Text`.\n     \"\"\"\n+    def __init__(self, offsetbox, xy, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        # Set this AnnotationBbox as the parent of the offsetbox\n+        if hasattr(offsetbox, '_children'):\n+            for child in offsetbox._children:\n+                if hasattr(child, '_parent_artist'):\n+                    child._parent_artist = self\n \n     zorder = 3\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex dd9cb5f..ade3bbb 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1011,6 +1011,10 @@ class OffsetImage(OffsetBox):\n         return (w, h, 0, 0)\n \n     def draw(self, renderer):\n+        if hasattr(self, '_parent_artist'):\n+            parent_gid = self._parent_artist.get_gid()\n+            if parent_gid is not None:\n+                self.image.set_gid(parent_gid)\n         self.image.draw(renderer)\n         self.stale = False\n \n@@ -1022,6 +1026,13 @@ class AnnotationBbox(martist.Artist, mtext._AnnotationBase):\n \n     This is like `.Annotation`, but with `OffsetBox` instead of `.Text`.\n     \"\"\"\n+\n+    def __init__(self, offsetbox, xy, *args, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        if hasattr(offsetbox, '_children'):\n+            for child in offsetbox._children:\n+                if hasattr(child, '_parent_artist'):\n+                    child._parent_artist = self\n     zorder = 3\n \n     def __str__(self):\n", "normalized_occurrence": 1}
