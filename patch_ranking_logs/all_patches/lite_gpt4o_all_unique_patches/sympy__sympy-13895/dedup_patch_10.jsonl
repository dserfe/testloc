{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..f5142ac 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -198,12 +198,14 @@ class Pow(Expr):\n             elif e is S.One:\n                 return b\n             # Only perform autosimplification if exponent or base is a Symbol or number\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n-                e.is_integer and _coeff_isneg(b):\n-                if e.is_even:\n-                    b = -b\n-                elif e.is_odd:\n-                    return -Pow(-b, e)\n+            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number):\n+                if e.is_integer and _coeff_isneg(b):\n+                    if e.is_even:\n+                        b = -b\n+                    elif e.is_odd:\n+                        return -Pow(-b, e)\n+                elif _coeff_isneg(b) and not e.is_integer:\n+                    return Pow(S.NegativeOne, e) * Pow(-b, e)\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n             elif b is S.One:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..91b1957 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -72,11 +72,14 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n-                if e.is_even:\n-                    b = -b\n-                elif e.is_odd:\n-                    return -Pow(-b, e)\n+            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number):\n+                if e.is_integer and _coeff_isneg(b):\n+                    if e.is_even:\n+                        b = -b\n+                    elif e.is_odd:\n+                        return -Pow(-b, e)\n+                elif _coeff_isneg(b) and (not e.is_integer):\n+                    return Pow(S.NegativeOne, e) * Pow(-b, e)\n             if S.NaN in (b, e):\n                 return S.NaN\n             elif b is S.One:\n", "normalized_occurrence": 1}
