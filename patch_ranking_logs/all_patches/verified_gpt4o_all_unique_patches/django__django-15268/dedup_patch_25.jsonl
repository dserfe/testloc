{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..9631f52 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -41,29 +41,17 @@ class MigrationOptimizer:\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n+            reduced = False\n             for j, other in enumerate(operations[i + 1:]):\n                 result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n+                if result:\n                     in_between = operations[i + 1:i + j + 1]\n-                    if right:\n+                    if all(op.reduce(other, app_label) is True for op in in_between):\n                         new_operations.extend(in_between)\n                         new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n+                        new_operations.extend(operations[i + j + 2:])\n+                        reduced = True\n                         break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n-            else:\n+            if not reduced:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..731dd22 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -12,24 +12,17 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n         for i, operation in enumerate(operations):\n-            right = True\n+            reduced = False\n             for j, other in enumerate(operations[i + 1:]):\n                 result = operation.reduce(other, app_label)\n-                if isinstance(result, list):\n+                if result:\n                     in_between = operations[i + 1:i + j + 1]\n-                    if right:\n+                    if all((op.reduce(other, app_label) is True for op in in_between)):\n                         new_operations.extend(in_between)\n                         new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n+                        new_operations.extend(operations[i + j + 2:])\n+                        reduced = True\n                         break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n-                elif not result:\n-                    right = False\n-            else:\n+            if not reduced:\n                 new_operations.append(operation)\n         return new_operations\n\\ No newline at end of file\n", "normalized_occurrence": 1}
