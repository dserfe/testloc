{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13579", "model_patch": "diff --git a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\nindex 4dc881d..9a0eba2 100644\n--- a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+++ b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n@@ -76,8 +76,17 @@ class HighLevelWCSWrapper(HighLevelWCSMixin):\n         \"\"\"\n         return self.low_level_wcs._as_mpl_axes()\n \n+    def world_to_pixel(self, skycoord, *world_quantities):\n+        \"\"\"\n+        Transform world coordinates to pixel coordinates using the low level WCS.\n+        \"\"\"\n+        # Ensure we handle slicing properly and account for PC matrix adjustments\n+        if isinstance(self.low_level_wcs, SlicedLowLevelWCS):\n+            return self.low_level_wcs.world_to_pixel(skycoord, *world_quantities)\n+        return super().world_to_pixel(skycoord, *world_quantities)\n+\n     def __str__(self):\n         return wcs_info_str(self.low_level_wcs)\n \n     def __repr__(self):\n-        return f\"{object.__repr__(self)}\\n{str(self)}\"\n+        return f\"{object.__repr__(self)}\\n{str(self)}\"\n", "occurrence": 1, "normalized_patch": "--- a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+++ b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+    def world_to_pixel(self, skycoord, *world_quantities):\n+        if isinstance(self.low_level_wcs, SlicedLowLevelWCS):\n+            return self.low_level_wcs.world_to_pixel(skycoord, *world_quantities)\n+        return super().world_to_pixel(skycoord, *world_quantities)", "normalized_occurrence": 1}
