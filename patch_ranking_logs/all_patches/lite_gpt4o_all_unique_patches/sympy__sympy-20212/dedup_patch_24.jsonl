{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20212", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1e8e438..f1d63b6 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2623,11 +2623,11 @@ class Zero(IntegerConstant, metaclass=Singleton):\n         return S.Zero\n \n     def _eval_power(self, expt):\n-        if expt.is_positive:\n+        if expt.is_extended_positive:\n             return self\n-        if expt.is_negative:\n+        if expt.is_extended_negative:\n             return S.ComplexInfinity\n-        if expt.is_extended_real is False:\n+        if expt.is_real is False:\n             return S.NaN\n         # infinities are already handled with pos and neg\n         # tests above; now throw away leading numbers on Mul\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 4fccb81..b90863e 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2297,11 +2297,11 @@ class Zero(IntegerConstant, metaclass=Singleton):\n         return S.Zero\n \n     def _eval_power(self, expt):\n-        if expt.is_positive:\n+        if expt.is_extended_positive:\n             return self\n-        if expt.is_negative:\n+        if expt.is_extended_negative:\n             return S.ComplexInfinity\n-        if expt.is_extended_real is False:\n+        if expt.is_real is False:\n             return S.NaN\n         coeff, terms = expt.as_coeff_Mul()\n         if coeff.is_negative:\n", "normalized_occurrence": 1}
