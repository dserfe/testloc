{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..3495f3c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,6 +31,7 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        import functools\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -45,6 +46,17 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            # Store partial's arguments\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            # Get the underlying function\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -59,6 +71,12 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if self.partial_args or self.partial_keywords:\n+            return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s, partial_args=%s, partial_keywords=%s)\" % (\n+                self._func_path, self.args, self.kwargs, self.url_name,\n+                self.app_names, self.namespaces, self.route,\n+                self.partial_args, self.partial_keywords,\n+            )\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n             self._func_path, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..cddda6b 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        import functools\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -29,6 +30,13 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n@@ -38,6 +46,8 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n+        if self.partial_args or self.partial_keywords:\n+            return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s, partial_args=%s, partial_keywords=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route, self.partial_args, self.partial_keywords)\n         return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n", "normalized_occurrence": 1}
