{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..bac243f 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -442,4 +442,9 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        result = dict(deleted_counter)\n+        # Ensure consistency: even if no objects are deleted, the dictionary should contain all involved models with zero count.\n+        for model in self.data.keys():\n+            if model._meta.label not in result:\n+                result[model._meta.label] = 0\n+        return sum(deleted_counter.values()), result\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..ea87294 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -234,4 +234,8 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return (sum(deleted_counter.values()), dict(deleted_counter))\n\\ No newline at end of file\n+        result = dict(deleted_counter)\n+        for model in self.data.keys():\n+            if model._meta.label not in result:\n+                result[model._meta.label] = 0\n+        return (sum(deleted_counter.values()), result)\n\\ No newline at end of file\n", "normalized_occurrence": 3}
