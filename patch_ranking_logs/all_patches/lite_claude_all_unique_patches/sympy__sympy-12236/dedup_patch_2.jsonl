{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..0fd54f1 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -118,17 +118,27 @@ def apart(f, x=None, full=False, **options):\n             return f.xreplace(dict(reps))\n \n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-\n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n+        # Handle parameters by trying substitution method first\n+        if x is not None and len(P.free_symbols - {x}) > 0:\n+            # Try to cancel only with respect to x\n+            fc = f.together().cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+        else:\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            raise NotImplementedError(\n+                \"multivariate partial fraction decomposition\")\n \n     common, P, Q = P.cancel(Q)\n \n-    poly, P = P.div(Q, auto=True)\n-    P, Q = P.rat_clear_denoms(Q)\n+    # For parametric expressions, avoid premature division\n+    if x is not None and len(P.free_symbols - {x}) > 0:\n+        partial = apart_undetermined_coeffs(P, Q)\n+    else:\n+        poly, P = P.div(Q, auto=True)\n+        P, Q = P.rat_clear_denoms(Q)\n \n     if Q.degree() <= 1:\n         partial = P/Q\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..de87701 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -55,13 +55,21 @@ def apart(f, x=None, full=False, **options):\n                     pass\n             return f.xreplace(dict(reps))\n     if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n+        if x is not None and len(P.free_symbols - {x}) > 0:\n+            fc = f.together().cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+        else:\n+            fc = f.cancel()\n+            if fc != f:\n+                return apart(fc, x=x, full=full, **_options)\n+            raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n-    poly, P = P.div(Q, auto=True)\n-    P, Q = P.rat_clear_denoms(Q)\n+    if x is not None and len(P.free_symbols - {x}) > 0:\n+        partial = apart_undetermined_coeffs(P, Q)\n+    else:\n+        poly, P = P.div(Q, auto=True)\n+        P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n         partial = P / Q\n     elif not full:\n", "normalized_occurrence": 1}
