{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..21b4c6e 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -360,6 +360,18 @@ class LiteralIncludeReader:\n         else:\n             return lines\n \n+    def apply_filters(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        \"\"\"Apply filters in the correct order to maintain indentation.\"\"\"\n+        # First dedent the original content\n+        if 'dedent' in self.options:\n+            lines = self.dedent_filter(lines, location)\n+        \n+        # Then apply prepend/append to preserve their indentation\n+        lines = self.prepend_filter(lines, location)\n+        lines = self.append_filter(lines, location)\n+        \n+        return lines\n+\n \n class LiteralInclude(SphinxDirective):\n     \"\"\"\n", "normalized_patch": "--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n+    def apply_filters(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n+        if 'dedent' in self.options:\n+            lines = self.dedent_filter(lines, location)\n+        lines = self.prepend_filter(lines, location)\n+        lines = self.append_filter(lines, location)\n+        return lines", "normalized_occurrence": 1}
