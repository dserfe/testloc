{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..751c611 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -257,13 +257,22 @@ class ModelFormOptions:\n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n+        # First check for formfield_callback in Meta of the new class\n+        meta = attrs.get('Meta')\n+        meta_callback = getattr(meta, 'formfield_callback', None) if meta else None\n+        \n+        # Then check bases for either direct formfield_callback or in their Meta\n         base_formfield_callback = None\n         for b in bases:\n+            if hasattr(b, \"formfield_callback\"):\n+                base_formfield_callback = b.formfield_callback\n+                break\n             if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n \n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # Priority: Meta callback > direct attribute > base callback\n+        formfield_callback = attrs.pop(\"formfield_callback\", meta_callback or base_formfield_callback)\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..ffd39e1 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -109,12 +109,17 @@ class ModelFormOptions:\n         self.field_classes = getattr(options, 'field_classes', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n+        meta = attrs.get('Meta')\n+        meta_callback = getattr(meta, 'formfield_callback', None) if meta else None\n         base_formfield_callback = None\n         for b in bases:\n+            if hasattr(b, 'formfield_callback'):\n+                base_formfield_callback = b.formfield_callback\n+                break\n             if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        formfield_callback = attrs.pop('formfield_callback', meta_callback or base_formfield_callback)\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n", "normalized_occurrence": 1}
