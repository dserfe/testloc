{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..bcf043e 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -894,12 +894,14 @@ class Permutation(Basic):\n         # for convenience in case one wants to enter permutations where\n         # counting starts from 1.\n \n-        temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        if is_cycle:\n+            # Check for duplicates within each cycle\n+            for cycle in args:\n+                if has_dups(cycle):\n+                    raise ValueError('Duplicate elements within a cycle are not allowed')\n+        else:\n+            # For array form, still check for duplicates across entire permutation\n+            if has_dups(args):\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..edaf459 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -193,12 +193,12 @@ class Permutation(Basic):\n             args = [[int(i) for i in c] for c in args]\n         else:\n             args = [int(i) for i in args]\n-        temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+        if is_cycle:\n+            for cycle in args:\n+                if has_dups(cycle):\n+                    raise ValueError('Duplicate elements within a cycle are not allowed')\n+        elif has_dups(args):\n+            raise ValueError('there were repeated elements.')\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n", "normalized_occurrence": 1}
