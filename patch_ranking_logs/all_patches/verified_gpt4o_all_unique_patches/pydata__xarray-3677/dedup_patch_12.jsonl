{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3677", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex cad360a..8f8e256 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -809,6 +809,11 @@ def dataset_merge_method(\n     # method due for backwards compatibility\n     # TODO: consider deprecating it?\n \n+    from .dataarray import DataArray\n+\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n+\n     if isinstance(overwrite_vars, Iterable) and not isinstance(overwrite_vars, str):\n         overwrite_vars = set(overwrite_vars)\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 2140bbd..36d6bc0 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -614,6 +614,9 @@ def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str\n def dataset_merge_method(dataset: 'Dataset', other: 'CoercibleMapping', overwrite_vars: Union[Hashable, Iterable[Hashable]], compat: str, join: str, fill_value: Any) -> _MergeResult:\n     \"\"\"Guts of the Dataset.merge method.\n     \"\"\"\n+    from .dataarray import DataArray\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n     if isinstance(overwrite_vars, Iterable) and (not isinstance(overwrite_vars, str)):\n         overwrite_vars = set(overwrite_vars)\n     else:\n", "normalized_occurrence": 2}
