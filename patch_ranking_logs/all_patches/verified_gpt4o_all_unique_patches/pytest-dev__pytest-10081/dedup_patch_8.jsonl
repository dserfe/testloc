{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10081", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28c146e..4f0aa2a 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -316,9 +316,10 @@ class TestCaseFunction(Function):\n             # Arguably we could always postpone tearDown(), but this changes the moment where the\n             # TestCase instance interacts with the results object, so better to only do it\n             # when absolutely needed.\n-            if self.config.getoption(\"usepdb\") and not _is_skipped(self.obj):\n-                self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, \"tearDown\", lambda *args: None)\n+            if self.config.getoption(\"usepdb\") and not _is_skipped(self._testcase):\n+                if not getattr(self._testcase.__class__, \"__unittest_skip__\", False):\n+                    self._explicit_tearDown = self._testcase.tearDown\n+                    setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n             # We need to update the actual bound method with self.obj, because\n             # wrap_pytest_function_for_tracing replaces self.obj by a wrapper.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex c60e5c9..93697b7 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -196,9 +196,10 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(result=self)\n         else:\n-            if self.config.getoption('usepdb') and (not _is_skipped(self.obj)):\n-                self._explicit_tearDown = self._testcase.tearDown\n-                setattr(self._testcase, 'tearDown', lambda *args: None)\n+            if self.config.getoption('usepdb') and (not _is_skipped(self._testcase)):\n+                if not getattr(self._testcase.__class__, '__unittest_skip__', False):\n+                    self._explicit_tearDown = self._testcase.tearDown\n+                    setattr(self._testcase, 'tearDown', lambda *args: None)\n             setattr(self._testcase, self.name, self.obj)\n             try:\n                 self._testcase(result=self)\n", "normalized_occurrence": 1}
