{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..acc027e 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -169,7 +169,7 @@ class CheckExternalLinksBuilder(Builder):\n                     found = check_anchor(response, unquote(anchor))\n \n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        raise Exception(__(\"Anchor '%s' not found\") % anchor, response)\n                 else:\n                     try:\n                         # try a HEAD request first, which should be easier on\n@@ -192,7 +192,10 @@ class CheckExternalLinksBuilder(Builder):\n                     return 'ignored', str(err), 0\n                 else:\n                     return 'broken', str(err), 0\n-            except Exception as err:\n+            except Exception as err: \n+                if isinstance(err, tuple) and len(err) == 2 and isinstance(err[1], requests.Response):\n+                    response = err[1]\n+                    return 'broken', f\"{err[0]} (HTTP {response.status_code} Error: {response.reason})\", 0\n                 if is_ssl_error(err):\n                     return 'ignored', str(err), 0\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex ace1ed3..ec2de1a 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -99,7 +99,7 @@ class CheckExternalLinksBuilder(Builder):\n                     response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        raise Exception(__(\"Anchor '%s' not found\") % anchor, response)\n                 else:\n                     try:\n                         response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n@@ -115,6 +115,9 @@ class CheckExternalLinksBuilder(Builder):\n                 else:\n                     return ('broken', str(err), 0)\n             except Exception as err:\n+                if isinstance(err, tuple) and len(err) == 2 and isinstance(err[1], requests.Response):\n+                    response = err[1]\n+                    return ('broken', f'{err[0]} (HTTP {response.status_code} Error: {response.reason})', 0)\n                 if is_ssl_error(err):\n                     return ('ignored', str(err), 0)\n                 else:\n", "normalized_occurrence": 1}
