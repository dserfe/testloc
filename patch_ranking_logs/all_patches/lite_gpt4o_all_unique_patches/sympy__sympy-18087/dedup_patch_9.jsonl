{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..380ec8d 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -301,7 +301,10 @@ class sin(TrigonometricFunction):\n \n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n-            return S.ImaginaryUnit * sinh(i_coeff)\n+            if arg.is_real:\n+                return S.ImaginaryUnit * sinh(i_coeff)\n+            else:\n+                return S.ImaginaryUnit * sinh(i_coeff) - S.ImaginaryUnit * sinh(i_coeff)\n \n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n@@ -575,7 +578,10 @@ class cos(TrigonometricFunction):\n \n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n-            return cosh(i_coeff)\n+            if arg.is_real:\n+                return cosh(i_coeff)\n+            else:\n+                return cosh(i_coeff) - cosh(i_coeff)\n \n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..2603d78 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -161,7 +161,10 @@ class sin(TrigonometricFunction):\n             return -cls(-arg)\n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n-            return S.ImaginaryUnit * sinh(i_coeff)\n+            if arg.is_real:\n+                return S.ImaginaryUnit * sinh(i_coeff)\n+            else:\n+                return S.ImaginaryUnit * sinh(i_coeff) - S.ImaginaryUnit * sinh(i_coeff)\n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n             if pi_coeff.is_integer:\n@@ -335,7 +338,10 @@ class cos(TrigonometricFunction):\n             return cls(-arg)\n         i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n         if i_coeff is not None:\n-            return cosh(i_coeff)\n+            if arg.is_real:\n+                return cosh(i_coeff)\n+            else:\n+                return cosh(i_coeff) - cosh(i_coeff)\n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n             if pi_coeff.is_integer:\n", "normalized_occurrence": 1}
