{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..60da12d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -292,12 +292,23 @@ class BaseReloader:\n         Yield all files that need to be watched, including module files and\n         files within globs.\n         \"\"\"\n-        yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        watched = set()\n+        # Add Python module files\n+        for file in iter_all_python_module_files():\n+            watched.add(str(file))\n+            yield file\n+        # Add extra files\n+        for file in self.extra_files:\n+            watched.add(str(file))\n+            yield file\n+        # Add glob matches while avoiding duplicates\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    for path in directory.glob(pattern):\n+                        if str(path) not in watched:\n+                            watched.add(str(path))\n+                            yield path\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..a795a03 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -180,12 +180,20 @@ class BaseReloader:\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n         self.directory_globs[path].add(glob)\n     def watched_files(self, include_globs=True):\n-        yield from iter_all_python_module_files()\n-        yield from self.extra_files\n+        watched = set()\n+        for file in iter_all_python_module_files():\n+            watched.add(str(file))\n+            yield file\n+        for file in self.extra_files:\n+            watched.add(str(file))\n+            yield file\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    for path in directory.glob(pattern):\n+                        if str(path) not in watched:\n+                            watched.add(str(path))\n+                            yield path\n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         while django_main_thread.is_alive():\n             if app_reg.ready_event.wait(timeout=0.1):\n", "normalized_occurrence": 1}
