{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4356", "model_patch": "diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex 74e25c7..94a6a0a 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -32,7 +32,7 @@ def _maybe_null_out(result, axis, mask, min_count=1):\n         )\n \n     if axis is not None and getattr(result, \"ndim\", False):\n-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n+        null_mask = (np.take(mask.shape, axis).prod() - mask.sum(axis) - min_count) < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex ba6f235..7df6e18 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -15,7 +15,7 @@ def _maybe_null_out(result, axis, mask, min_count=1):\n     if hasattr(axis, '__len__'):\n         raise ValueError('min_count is not available for reduction with more than one dimensions.')\n     if axis is not None and getattr(result, 'ndim', False):\n-        null_mask = mask.shape[axis] - mask.sum(axis) - min_count < 0\n+        null_mask = np.take(mask.shape, axis).prod() - mask.sum(axis) - min_count < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n", "normalized_occurrence": 1}
