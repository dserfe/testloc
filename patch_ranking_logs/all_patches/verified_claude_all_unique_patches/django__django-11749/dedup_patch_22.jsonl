{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..e182a36 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,11 +130,25 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n+    # Get all mutually exclusive groups\n+    mutex_groups = [\n+        group for group in parser._mutually_exclusive_groups\n+        if group.required\n+    ]\n+    # Build a set of arguments that belong to required mutex groups\n+    mutex_args = {\n+        action for group in mutex_groups\n+        for action in group._group_actions\n+    }\n     # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # to parse_args(). This includes both individual required arguments and\n+    # arguments that belong to a required mutually exclusive group.\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if (\n+            (opt.required or opt in mutex_args) and\n+            opt.dest in options\n+        )\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..b1df6e5 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,9 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    mutex_groups = [group for group in parser._mutually_exclusive_groups if group.required]\n+    mutex_args = {action for group in mutex_groups for action in group._group_actions}\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if (opt.required or opt in mutex_args) and opt.dest in options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
