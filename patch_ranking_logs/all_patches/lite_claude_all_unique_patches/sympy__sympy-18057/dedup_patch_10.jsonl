{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..3b210e8 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,11 +120,15 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        # Only attempt to sympify objects that explicitly define conversion\n+        if hasattr(other, '_sympy_') or isinstance(other, (int, float)):\n+            try:\n+                other = sympify(other)\n+                if not isinstance(other, Expr):\n+                    return False\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        else:\n             return False\n         # check for pure number expr\n         if  not (self.is_Number and other.is_Number) and (\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..ab4f02d 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,11 +46,14 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n-            if not isinstance(other, Expr):\n+        if hasattr(other, '_sympy_') or isinstance(other, (int, float)):\n+            try:\n+                other = sympify(other)\n+                if not isinstance(other, Expr):\n+                    return False\n+            except (SympifyError, SyntaxError):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        else:\n             return False\n         if not (self.is_Number and other.is_Number) and type(self) != type(other):\n             return False\n", "normalized_occurrence": 1}
