{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7d82110 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -841,7 +841,13 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.push_format_context()\n         # Rewrite assert into a bunch of statements.\n         top_condition, explanation = self.visit(assert_.test)\n-        # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n+        # Handle `all` and `any` calls to provide better error messages.\n+        if (\n+            isinstance(assert_.test, ast.Call)\n+            and isinstance(assert_.test.func, ast.Name)\n+            and assert_.test.func.id in (\"all\", \"any\")\n+        ):\n+            self._rewrite_all_any(assert_)\n         if self.module_path is not None:\n             self.statements.append(\n                 self.warn_about_none_ast(\n@@ -1081,4 +1087,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..12a1af5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -459,6 +459,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.on_failure = []\n         self.push_format_context()\n         top_condition, explanation = self.visit(assert_.test)\n+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and (assert_.test.func.id in ('all', 'any')):\n+            self._rewrite_all_any(assert_)\n         if self.module_path is not None:\n             self.statements.append(self.warn_about_none_ast(top_condition, module_path=self.module_path, lineno=assert_.lineno))\n         body = self.on_failure\n", "normalized_occurrence": 1}
