{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..292ead8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1915,6 +1915,15 @@ class Query(BaseExpression):\n                     continue\n                 if self.extra and item in self.extra:\n                     continue\n+                # Handle foreign key id fields specially to avoid unnecessary joins\n+                if item.endswith('_id'):\n+                    base_name = item[:-3]\n+                    try:\n+                        # Try to resolve without the _id suffix first\n+                        self.names_to_path(base_name.split(LOOKUP_SEP), self.model._meta)\n+                        continue\n+                    except FieldError:\n+                        pass\n                 # names_to_path() validates the lookup. A descriptive\n                 # FieldError will be raise if it's not.\n                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..86135f3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1021,6 +1021,13 @@ class Query(BaseExpression):\n                     continue\n                 if self.extra and item in self.extra:\n                     continue\n+                if item.endswith('_id'):\n+                    base_name = item[:-3]\n+                    try:\n+                        self.names_to_path(base_name.split(LOOKUP_SEP), self.model._meta)\n+                        continue\n+                    except FieldError:\n+                        pass\n                 self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n             elif not hasattr(item, 'resolve_expression'):\n                 errors.append(item)\n", "normalized_occurrence": 1}
