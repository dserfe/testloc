{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..e15d698 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -691,7 +691,7 @@ class _EvaluatorPrinter(object):\n         @classmethod\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and ident.isidentifier() \\\n-                    and not keyword.iskeyword(ident)\n+                    and not keyword.iskeyword(ident) and \"{\" not in ident and \"}\" not in ident\n     else:\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..77cae1b 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -275,7 +275,7 @@ class _EvaluatorPrinter(object):\n     if PY3:\n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and ident.isidentifier() and (not keyword.iskeyword(ident))\n+            return isinstance(ident, str) and ident.isidentifier() and (not keyword.iskeyword(ident)) and ('{' not in ident) and ('}' not in ident)\n     else:\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n         @classmethod\n", "normalized_occurrence": 1}
