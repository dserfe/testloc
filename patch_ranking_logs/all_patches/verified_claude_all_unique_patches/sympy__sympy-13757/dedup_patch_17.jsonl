{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13757", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c4501f6..f53ab84 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -4053,9 +4053,10 @@ class Poly(Expr):\n             try:\n                 g = f.__class__(g, *f.gens)\n             except PolynomialError:\n-                return g*f.as_expr()\n+                # Try to handle expressions by converting Poly to expr first\n+                return f.as_expr()*g\n \n-        return g.mul(f)\n+        return f.mul(g)\n \n     @_sympifyit('n', NotImplemented)\n     def __pow__(f, n):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 69acdb8..fc8044b 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -1265,8 +1265,8 @@ class Poly(Expr):\n             try:\n                 g = f.__class__(g, *f.gens)\n             except PolynomialError:\n-                return g * f.as_expr()\n-        return g.mul(f)\n+                return f.as_expr() * g\n+        return f.mul(g)\n     @_sympifyit('n', NotImplemented)\n     def __pow__(f, n):\n         if n.is_Integer and n >= 0:\n", "normalized_occurrence": 2}
