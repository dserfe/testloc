{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..35b209a 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -434,7 +434,14 @@ class LogCaptureFixture:\n         # save the original log-level to restore it during teardown\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n+        \n+def _teardown(self):\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    if hasattr(self, '_initial_handler_level'):\n+        self.handler.setLevel(self._initial_handler_level)\n \n     @contextmanager\n     def at_level(\n@@ -450,7 +457,14 @@ class LogCaptureFixture:\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n+        \n+def _teardown(self):\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    if hasattr(self, '_initial_handler_level'):\n+        self.handler.setLevel(self._initial_handler_level)\n         try:\n             yield\n         finally:\n@@ -460,6 +474,7 @@ class LogCaptureFixture:\n \n @pytest.fixture\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n+    request.addfinalizer(lambda: caplog_fixture._teardown())\n     \"\"\"Access and control log capturing.\n \n     Captured logs are available through the following properties/methods::\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..4d6f843 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -191,14 +191,26 @@ class LogCaptureFixture:\n         logger_obj = logging.getLogger(logger)\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n+def _teardown(self):\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    if hasattr(self, '_initial_handler_level'):\n+        self.handler.setLevel(self._initial_handler_level)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n         orig_level = logger_obj.level\n         logger_obj.setLevel(level)\n         handler_orig_level = self.handler.level\n+        self._initial_handler_level = self.handler.level\n         self.handler.setLevel(level)\n+def _teardown(self):\n+    for logger, level in self._initial_logger_levels.items():\n+        logging.getLogger(logger).setLevel(level)\n+    if hasattr(self, '_initial_handler_level'):\n+        self.handler.setLevel(self._initial_handler_level)\n         try:\n             yield\n         finally:\n@@ -206,6 +218,7 @@ class LogCaptureFixture:\n             self.handler.setLevel(handler_orig_level)\n @pytest.fixture\n def caplog(request: FixtureRequest) -> Generator[LogCaptureFixture, None, None]:\n+    request.addfinalizer(lambda: caplog_fixture._teardown())\n     result = LogCaptureFixture(request.node)\n     yield result\n     result._finalize()\n", "normalized_occurrence": 1}
