{"model_name_or_path": "agentless", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..503741d 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -88,7 +88,7 @@ class Columns(TableColumns):\n             except IndexError:\n                 return self.quote_name(column)\n \n-        return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n+        return ', '.join(col_str(column, idx).strip() for idx, column in enumerate(self.columns))\n \n \n class IndexName(TableColumns):\n@@ -112,14 +112,14 @@ class IndexColumns(Columns):\n         def col_str(column, idx):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx]).strip()\n             try:\n                 col = '{} {}'.format(col, self.col_suffixes[idx])\n             except IndexError:\n                 pass\n             return col\n \n-        return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n+        return ', '.join(col_str(column, idx).strip() for idx, column in enumerate(self.columns))\n \n \n class ForeignKeyName(TableColumns):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 285a76a..356a075 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -44,7 +44,7 @@ class Columns(TableColumns):\n                 return self.quote_name(column) + self.col_suffixes[idx]\n             except IndexError:\n                 return self.quote_name(column)\n-        return ', '.join((col_str(column, idx) for idx, column in enumerate(self.columns)))\n+        return ', '.join((col_str(column, idx).strip() for idx, column in enumerate(self.columns)))\n class IndexName(TableColumns):\n     def __init__(self, table, columns, suffix, create_index_name):\n         self.suffix = suffix\n@@ -58,13 +58,13 @@ class IndexColumns(Columns):\n         super().__init__(table, columns, quote_name, col_suffixes)\n     def __str__(self):\n         def col_str(column, idx):\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx]).strip()\n             try:\n                 col = '{} {}'.format(col, self.col_suffixes[idx])\n             except IndexError:\n                 pass\n             return col\n-        return ', '.join((col_str(column, idx) for idx, column in enumerate(self.columns)))\n+        return ', '.join((col_str(column, idx).strip() for idx, column in enumerate(self.columns)))\n class ForeignKeyName(TableColumns):\n     def __init__(self, from_table, from_columns, to_table, to_columns, suffix_template, create_fk_name):\n         self.to_reference = TableColumns(to_table, to_columns)\n", "normalized_occurrence": 1}
