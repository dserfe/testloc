{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..1f6fa9f 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -549,6 +549,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # make sure we actually converted to numeric:\n         if dtype_numeric and array.dtype.kind == \"O\":\n             array = array.astype(np.float64)\n+        if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError(\"Found array with dim %d. %s expected <= 2.\"\n                              % (array.ndim, estimator_name))\n@@ -573,11 +577,6 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                              % (n_features, shape_repr, ensure_min_features,\n                                 context))\n \n-    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n-        msg = (\"Data with input dtype %s was converted to %s%s.\"\n-               % (dtype_orig, array.dtype, context))\n-        warnings.warn(msg, DataConversionWarning)\n-\n     if copy and np.may_share_memory(array, array_orig):\n         array = np.array(array, dtype=dtype, order=order)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..7c51eae 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -168,6 +168,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n         if dtype_numeric and array.dtype.kind == 'O':\n             array = array.astype(np.float64)\n+        if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+            msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+            warnings.warn(msg, DataConversionWarning)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n         if force_all_finite:\n@@ -181,9 +184,6 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         n_features = array.shape[1]\n         if n_features < ensure_min_features:\n             raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, shape_repr, ensure_min_features, context))\n-    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n-        msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n-        warnings.warn(msg, DataConversionWarning)\n     if copy and np.may_share_memory(array, array_orig):\n         array = np.array(array, dtype=dtype, order=order)\n     return array\n", "normalized_occurrence": 1}
