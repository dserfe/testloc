{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25122", "model_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex e9c7d39..d129921 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -424,10 +424,10 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None,\n             result /= Fs\n             # Scale the spectrum by the norm of the window to compensate for\n             # windowing loss; see Bendat & Piersol Sec 11.5.2.\n-            result /= (np.abs(window)**2).sum()\n+            result /= (window**2).sum()\n         else:\n             # In this case, preserve power in the segment, not amplitude\n-            result /= np.abs(window).sum()**2\n+            result /= (window.sum())**2\n \n     t = np.arange(NFFT/2, len(x) - NFFT/2 + 1, NFFT - noverlap)/Fs\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/mlab.py b/lib/matplotlib/mlab.py\nindex 86b6c43..5bae1e1 100644\n--- a/lib/matplotlib/mlab.py\n+++ b/lib/matplotlib/mlab.py\n@@ -164,9 +164,9 @@ def _spectral_helper(x, y=None, NFFT=None, Fs=None, detrend_func=None, window=No\n         result[slc] *= scaling_factor\n         if scale_by_freq:\n             result /= Fs\n-            result /= (np.abs(window) ** 2).sum()\n+            result /= (window ** 2).sum()\n         else:\n-            result /= np.abs(window).sum() ** 2\n+            result /= window.sum() ** 2\n     t = np.arange(NFFT / 2, len(x) - NFFT / 2 + 1, NFFT - noverlap) / Fs\n     if sides == 'twosided':\n         freqs = np.roll(freqs, -freqcenter, axis=0)\n", "normalized_occurrence": 30}
