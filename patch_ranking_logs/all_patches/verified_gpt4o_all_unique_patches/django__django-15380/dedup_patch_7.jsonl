{"model_name_or_path": "agentless", "instance_id": "django__django-15380", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 6db1dcc..edb9fbd 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -829,7 +829,7 @@ class MigrationAutodetector:\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\n             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):\n-                if rem_app_label == app_label and rem_model_name == model_name:\n+                if rem_app_label == app_label and rem_model_name == old_model_name:\n                     old_field = old_model_state.get_field(rem_field_name)\n                     old_field_dec = self.deep_deconstruct(old_field)\n                     if field.remote_field and field.remote_field.model and 'to' in old_field_dec[2]:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c56271..74700d7 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -387,7 +387,7 @@ class MigrationAutodetector:\n             field = new_model_state.get_field(field_name)\n             field_dec = self.deep_deconstruct(field)\n             for rem_app_label, rem_model_name, rem_field_name in sorted(self.old_field_keys - self.new_field_keys):\n-                if rem_app_label == app_label and rem_model_name == model_name:\n+                if rem_app_label == app_label and rem_model_name == old_model_name:\n                     old_field = old_model_state.get_field(rem_field_name)\n                     old_field_dec = self.deep_deconstruct(old_field)\n                     if field.remote_field and field.remote_field.model and ('to' in old_field_dec[2]):\n", "normalized_occurrence": 1}
