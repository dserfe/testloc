{"model_name_or_path": "agentless", "instance_id": "django__django-11477", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 58da200..d851a3a 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -617,10 +617,9 @@ class URLResolver:\n                         continue\n                     candidate_subs = dict(zip(params, args))\n                 else:\n-                    if set(kwargs).symmetric_difference(params).difference(defaults):\n-                        continue\n-                    if any(kwargs.get(k, v) != v for k, v in defaults.items()):\n+                    if not set(params).issubset(kwargs) and not set(params).issubset(defaults):\n                         continue\n+                    candidate_subs = {k: kwargs.get(k, defaults.get(k)) for k in params}\n                     candidate_subs = kwargs\n                 # Convert the candidate subs to text using Converter.to_url().\n                 text_candidate_subs = {}\n@@ -666,4 +665,4 @@ class URLResolver:\n                 \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                 \"a valid view function or pattern name.\" % {'view': lookup_view_s}\n             )\n-        raise NoReverseMatch(msg)\n+        raise NoReverseMatch(msg)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex e10e0e8..b6eafe5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -403,10 +403,9 @@ class URLResolver:\n                         continue\n                     candidate_subs = dict(zip(params, args))\n                 else:\n-                    if set(kwargs).symmetric_difference(params).difference(defaults):\n-                        continue\n-                    if any((kwargs.get(k, v) != v for k, v in defaults.items())):\n+                    if not set(params).issubset(kwargs) and (not set(params).issubset(defaults)):\n                         continue\n+                    candidate_subs = {k: kwargs.get(k, defaults.get(k)) for k in params}\n                     candidate_subs = kwargs\n                 text_candidate_subs = {}\n                 for k, v in candidate_subs.items():\n", "normalized_occurrence": 1}
