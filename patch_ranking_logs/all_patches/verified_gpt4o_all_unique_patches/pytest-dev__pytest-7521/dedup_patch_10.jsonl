{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7521", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex f40cad0..77d1a35 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -295,13 +295,13 @@ class SysCaptureBinary:\n         setattr(sys, self.name, self.tmpfile)\n         self._state = \"started\"\n \n-    def snap(self):\n+    def snap(self) -> str:\n         self._assert_state(\"snap\", (\"started\", \"suspended\"))\n         self.tmpfile.seek(0)\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r')\n \n     def done(self) -> None:\n         self._assert_state(\"done\", (\"initialized\", \"started\", \"suspended\", \"done\"))\n@@ -334,11 +334,11 @@ class SysCaptureBinary:\n class SysCapture(SysCaptureBinary):\n     EMPTY_BUFFER = \"\"  # type: ignore[assignment]\n \n-    def snap(self):\n+    def snap(self) -> str:\n         res = self.tmpfile.getvalue()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r')\n \n     def writeorg(self, data):\n         self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 230e591..ec8f54d 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -138,13 +138,13 @@ class SysCaptureBinary:\n         self._assert_state('start', ('initialized',))\n         setattr(sys, self.name, self.tmpfile)\n         self._state = 'started'\n-    def snap(self):\n+    def snap(self) -> str:\n         self._assert_state('snap', ('started', 'suspended'))\n         self.tmpfile.seek(0)\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r')\n     def done(self) -> None:\n         self._assert_state('done', ('initialized', 'started', 'suspended', 'done'))\n         if self._state == 'done':\n@@ -170,11 +170,11 @@ class SysCaptureBinary:\n         self._old.buffer.flush()\n class SysCapture(SysCaptureBinary):\n     EMPTY_BUFFER = ''\n-    def snap(self):\n+    def snap(self) -> str:\n         res = self.tmpfile.getvalue()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r')\n     def writeorg(self, data):\n         self._assert_state('writeorg', ('started', 'suspended'))\n         self._old.write(data)\n", "normalized_occurrence": 1}
