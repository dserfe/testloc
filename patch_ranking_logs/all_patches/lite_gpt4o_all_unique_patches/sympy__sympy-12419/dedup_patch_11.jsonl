{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..dc20898 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -434,6 +434,12 @@ class MatrixSymbol(MatrixExpr):\n             return self\n \n     def _eval_simplify(self, **kwargs):\n+        from sympy import Sum, symbols\n+        i, j = symbols('i j', integer=True)\n+        n = self.args[0]\n+        total_sum = Sum(Sum(self._entry(i, j), (i, 0, n - 1)), (j, 0, n - 1)).doit()\n+        if total_sum != 0:\n+            return Identity(n)\n         return self\n \n class Identity(MatrixExpr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 9ec3ea5..09eacb2 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -258,6 +258,12 @@ class MatrixSymbol(MatrixExpr):\n         else:\n             return self\n     def _eval_simplify(self, **kwargs):\n+        from sympy import Sum, symbols\n+        i, j = symbols('i j', integer=True)\n+        n = self.args[0]\n+        total_sum = Sum(Sum(self._entry(i, j), (i, 0, n - 1)), (j, 0, n - 1)).doit()\n+        if total_sum != 0:\n+            return Identity(n)\n         return self\n class Identity(MatrixExpr):\n     is_Identity = True\n", "normalized_occurrence": 1}
