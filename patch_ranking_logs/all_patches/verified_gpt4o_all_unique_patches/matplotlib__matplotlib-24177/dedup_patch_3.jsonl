{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..614924d 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6755,7 +6755,10 @@ such objects\n             # If a stacked density plot, normalize so the area of all the\n             # stacked histograms together is 1\n             if density:\n-                tops = (tops / np.diff(bins)) / tops[-1].sum()\n+                if histtype.startswith('step'):\n+                    tops = tops / (np.diff(bins) * tops.sum(axis=1)[:, np.newaxis])\n+                else:\n+                    tops = (tops / np.diff(bins)) / tops[-1].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..3bcead8 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1954,7 +1954,10 @@ class Axes(_AxesBase):\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n-                tops = tops / np.diff(bins) / tops[-1].sum()\n+                if histtype.startswith('step'):\n+                    tops = tops / (np.diff(bins) * tops.sum(axis=1)[:, np.newaxis])\n+                else:\n+                    tops = tops / np.diff(bins) / tops[-1].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "normalized_occurrence": 1}
