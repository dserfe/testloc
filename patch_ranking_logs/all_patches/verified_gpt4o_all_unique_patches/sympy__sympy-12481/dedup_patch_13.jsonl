{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..af65218 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -912,8 +912,8 @@ class Permutation(Basic):\n             # it's not necessarily canonical so we won't store\n             # it -- use the array form instead\n             c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n+            for ci in reversed(args):\n+                c = c(*reversed(ci))\n             aform = c.list()\n         else:\n             aform = list(args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..b309ae5 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -204,8 +204,8 @@ class Permutation(Basic):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n             c = Cycle()\n-            for ci in args:\n-                c = c(*ci)\n+            for ci in reversed(args):\n+                c = c(*reversed(ci))\n             aform = c.list()\n         else:\n             aform = list(args)\n", "normalized_occurrence": 1}
