{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..0b15e9d 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,29 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        if len(constraint_names) > 1:\n+            # Filter out constraints that don't match the constraint_kwargs type\n+            filtered_constraints = [\n+                name for name in constraint_names\n+                if self._constraint_matches_type(name, constraint_kwargs)\n+            ]\n+            if len(filtered_constraints) != 1:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(filtered_constraints),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n+            constraint_names = filtered_constraints\n+        \n+        if len(constraint_names) == 1:\n+            self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+\n+def _constraint_matches_type(self, constraint_name, constraint_kwargs):\n+    if constraint_kwargs.get('unique', False):\n+        return constraint_name.endswith('_key') or constraint_name.endswith('_uniq')\n+    if constraint_kwargs.get('index', False):\n+        return constraint_name.endswith('_idx')\n+    return False\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..734327e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,9 +230,19 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        if len(constraint_names) > 1:\n+            filtered_constraints = [name for name in constraint_names if self._constraint_matches_type(name, constraint_kwargs)]\n+            if len(filtered_constraints) != 1:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(filtered_constraints), model._meta.db_table, ', '.join(columns)))\n+            constraint_names = filtered_constraints\n+        if len(constraint_names) == 1:\n+            self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+def _constraint_matches_type(self, constraint_name, constraint_kwargs):\n+    if constraint_kwargs.get('unique', False):\n+        return constraint_name.endswith('_key') or constraint_name.endswith('_uniq')\n+    if constraint_kwargs.get('index', False):\n+        return constraint_name.endswith('_idx')\n+    return False\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n", "normalized_occurrence": 1}
