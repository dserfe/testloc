{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 400ae0b..05d6e68 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -636,9 +636,21 @@ class TerminalReporter(object):\n                 for item in items:\n                     self._tw.line(item.nodeid)\n             return\n+        from _pytest.fixtures import FixtureDef\n+\n         stack = []\n         indent = \"\"\n+        def get_fixture_scope(fixturedef):\n+            if isinstance(fixturedef, FixtureDef):\n+                return fixturedef.scope\n+            return \"function\"\n+\n         for item in items:\n+            if isinstance(item, Function) and item._fixtureinfo:\n+                fixturedefs = item._fixtureinfo.name2fixturedefs.values()\n+                for fixturedef in fixturedefs:\n+                    scope = get_fixture_scope(fixturedef)\n+                    self._tw.line(f\"Fixture: {fixturedef[0].argname}, Scope: {scope}\")\n             needed_collectors = item.listchain()[1:]  # strip root node\n             while stack:\n                 if stack == needed_collectors[: len(stack)]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 17fce8c..ecf949c 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -409,9 +409,19 @@ class TerminalReporter(object):\n                 for item in items:\n                     self._tw.line(item.nodeid)\n             return\n+        from _pytest.fixtures import FixtureDef\n         stack = []\n         indent = ''\n+        def get_fixture_scope(fixturedef):\n+            if isinstance(fixturedef, FixtureDef):\n+                return fixturedef.scope\n+            return 'function'\n         for item in items:\n+            if isinstance(item, Function) and item._fixtureinfo:\n+                fixturedefs = item._fixtureinfo.name2fixturedefs.values()\n+                for fixturedef in fixturedefs:\n+                    scope = get_fixture_scope(fixturedef)\n+                    self._tw.line(f'Fixture: {fixturedef[0].argname}, Scope: {scope}')\n             needed_collectors = item.listchain()[1:]\n             while stack:\n                 if stack == needed_collectors[:len(stack)]:\n", "normalized_occurrence": 1}
