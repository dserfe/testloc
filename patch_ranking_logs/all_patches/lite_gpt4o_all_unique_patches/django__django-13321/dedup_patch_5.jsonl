{"model_name_or_path": "agentless", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 3174ba6..32c11ec 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -121,7 +121,7 @@ class SessionBase:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         # RemovedInDjango40Warning: when the deprecation ends, handle here\n         # exceptions similar to what _legacy_decode() does now.\n-        except Exception:\n+        except (signing.BadSignature, binascii.Error):\n             return self._legacy_decode(session_data)\n \n     def _legacy_encode(self, session_dict):\n@@ -141,12 +141,15 @@ class SessionBase:\n                 raise SuspiciousSession(\"Session data corrupted\")\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n-            # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n-            # these happen, just return an empty dictionary (an empty session).\n+        except (ValueError, SuspiciousOperation, binascii.Error) as e:\n+            # ValueError, SuspiciousOperation, binascii.Error (for padding issues), unpickling exceptions.\n+            # If any of these happen, just return an empty dictionary (an empty session).\n             if isinstance(e, SuspiciousOperation):\n                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n                 logger.warning(str(e))\n+            else:\n+                logger = logging.getLogger('django.security.SuspiciousSession')\n+                logger.warning('Session decoding failed: %s' % e)\n             return {}\n \n     def update(self, dict_):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex cfa6de2..643a6c1 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -70,7 +70,7 @@ class SessionBase:\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n-        except Exception:\n+        except (signing.BadSignature, binascii.Error):\n             return self._legacy_decode(session_data)\n     def _legacy_encode(self, session_dict):\n         serialized = self.serializer().dumps(session_dict)\n@@ -85,10 +85,13 @@ class SessionBase:\n                 raise SuspiciousSession('Session data corrupted')\n             else:\n                 return self.serializer().loads(serialized)\n-        except Exception as e:\n+        except (ValueError, SuspiciousOperation, binascii.Error) as e:\n             if isinstance(e, SuspiciousOperation):\n                 logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n                 logger.warning(str(e))\n+            else:\n+                logger = logging.getLogger('django.security.SuspiciousSession')\n+                logger.warning('Session decoding failed: %s' % e)\n             return {}\n     def update(self, dict_):\n         self._session.update(dict_)\n", "normalized_occurrence": 1}
