{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23562", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..3470139 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -681,33 +681,7 @@ class Poly3DCollection(PolyCollection):\n         triangulation and thus generates consistent surfaces.\n     \"\"\"\n \n-    def __init__(self, verts, *args, zsort='average', **kwargs):\n-        \"\"\"\n-        Parameters\n-        ----------\n-        verts : list of (N, 3) array-like\n-            Each element describes a polygon as a sequence of ``N_i`` points\n-            ``(x, y, z)``.\n-        zsort : {'average', 'min', 'max'}, default: 'average'\n-            The calculation method for the z-order.\n-            See `~.Poly3DCollection.set_zsort` for details.\n-        *args, **kwargs\n-            All other parameters are forwarded to `.PolyCollection`.\n \n-        Notes\n-        -----\n-        Note that this class does a bit of magic with the _facecolors\n-        and _edgecolors properties.\n-        \"\"\"\n-        super().__init__(verts, *args, **kwargs)\n-        if isinstance(verts, np.ndarray):\n-            if verts.ndim != 3:\n-                raise ValueError('verts must be a list of (N, 3) array-like')\n-        else:\n-            if any(len(np.shape(vert)) != 2 for vert in verts):\n-                raise ValueError('verts must be a list of (N, 3) array-like')\n-        self.set_zsort(zsort)\n-        self._codes3d = None\n \n     _zsort_functions = {\n         'average': np.average,\n@@ -867,10 +841,12 @@ class Poly3DCollection(PolyCollection):\n         self.stale = True\n \n     def get_facecolor(self):\n-        return self._facecolors2d\n+        # Return 2D colors if set, otherwise return 3D colors\n+        return getattr(self, '_facecolors2d', self._facecolor3d)\n \n     def get_edgecolor(self):\n-        return self._edgecolors2d\n+        # Return 2D colors if set, otherwise return 3D colors\n+        return getattr(self, '_edgecolors2d', self._edgecolor3d)\n \n \n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..81ebf24 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -302,15 +302,6 @@ def patch_collection_2d_to_3d(col, zs=0, zdir='z', depthshade=True):\n     col._in_draw = False\n     col.set_3d_properties(zs, zdir)\n class Poly3DCollection(PolyCollection):\n-    def __init__(self, verts, *args, zsort='average', **kwargs):\n-        super().__init__(verts, *args, **kwargs)\n-        if isinstance(verts, np.ndarray):\n-            if verts.ndim != 3:\n-                raise ValueError('verts must be a list of (N, 3) array-like')\n-        elif any((len(np.shape(vert)) != 2 for vert in verts)):\n-            raise ValueError('verts must be a list of (N, 3) array-like')\n-        self.set_zsort(zsort)\n-        self._codes3d = None\n     _zsort_functions = {'average': np.average, 'min': np.min, 'max': np.max}\n     def set_zsort(self, zsort):\n         self._zsortfunc = self._zsort_functions[zsort]\n@@ -402,9 +393,9 @@ class Poly3DCollection(PolyCollection):\n             pass\n         self.stale = True\n     def get_facecolor(self):\n-        return self._facecolors2d\n+        return getattr(self, '_facecolors2d', self._facecolor3d)\n     def get_edgecolor(self):\n-        return self._edgecolors2d\n+        return getattr(self, '_edgecolors2d', self._edgecolor3d)\n def poly_collection_2d_to_3d(col, zs=0, zdir='z'):\n     segments_3d, codes = _paths_to_3d_segments_with_codes(col.get_paths(), zs, zdir)\n     col.__class__ = Poly3DCollection\n", "normalized_occurrence": 1}
