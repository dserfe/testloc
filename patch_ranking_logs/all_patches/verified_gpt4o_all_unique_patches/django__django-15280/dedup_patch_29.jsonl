{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1013471..1b77026 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -843,6 +843,11 @@ class QuerySet:\n \n     def _prefetch_related_objects(self):\n         # This method can only be called once the result cache has been filled.\n+        # Ensure deferred fields are handled correctly in nested prefetches\n+        for obj in self._result_cache:\n+            if hasattr(obj, '_deferred'):\n+                for field in obj._deferred:\n+                    setattr(obj, field, None)\n         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n         self._prefetch_done = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b23a375..8960110 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -513,6 +513,10 @@ class QuerySet:\n             return obj in self._result_cache\n         return self.filter(pk=obj.pk).exists()\n     def _prefetch_related_objects(self):\n+        for obj in self._result_cache:\n+            if hasattr(obj, '_deferred'):\n+                for field in obj._deferred:\n+                    setattr(obj, field, None)\n         prefetch_related_objects(self._result_cache, *self._prefetch_related_lookups)\n         self._prefetch_done = True\n     def explain(self, *, format=None, **options):\n", "normalized_occurrence": 1}
