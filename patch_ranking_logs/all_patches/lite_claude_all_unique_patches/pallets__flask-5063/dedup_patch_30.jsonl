{"model_name_or_path": "agentless_claude", "instance_id": "pallets__flask-5063", "model_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex 7de3e81..d8025f8 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -1008,11 +1008,51 @@ def routes_command(sort: str, all_methods: bool) -> None:\n \n     ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n \n+    if sort in (\"endpoint\", \"rule\"):\n+        rules = sorted(rules, key=attrgetter(sort))\n+    elif sort == \"methods\":\n+        rules = list(current_app.url_map.iter_rules())\n+    if not rules:\n+        click.echo(\"No routes were registered.\")\n+        return\n+\n+    ignored_methods = set(() if all_methods else (\"HEAD\", \"OPTIONS\"))\n+\n     if sort in (\"endpoint\", \"rule\"):\n         rules = sorted(rules, key=attrgetter(sort))\n     elif sort == \"methods\":\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))  # type: ignore\n \n+    server_name = current_app.config.get('SERVER_NAME', '')\n+    \n+    def get_domain(rule):\n+        if not rule.subdomain:\n+            return server_name\n+        return f\"{rule.subdomain}.{server_name}\"\n+\n+    rule_methods = [\n+        \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n+        for rule in rules\n+    ]\n+    \n+    domains = [get_domain(rule) for rule in rules]\n+\n+    headers = (\"Domain\", \"Endpoint\", \"Methods\", \"Rule\")\n+    widths = (\n+        max(len(domain) for domain in domains),\n+        max(len(rule.endpoint) for rule in rules),\n+        max(len(methods) for methods in rule_methods),\n+        max(len(rule.rule) for rule in rules),\n+    )\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = \"{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}\".format(*widths)\n+\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*(\"-\" * width for width in widths)))\n+\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n+\n     rule_methods = [\n         \", \".join(sorted(rule.methods - ignored_methods))  # type: ignore\n         for rule in rules\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/cli.py b/src/flask/cli.py\nindex fe39489..e54c300 100644\n--- a/src/flask/cli.py\n+++ b/src/flask/cli.py\n@@ -583,10 +583,34 @@ def routes_command(sort: str, all_methods: bool) -> None:\n         click.echo('No routes were registered.')\n         return\n     ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))\n+    if sort in ('endpoint', 'rule'):\n+        rules = sorted(rules, key=attrgetter(sort))\n+    elif sort == 'methods':\n+        rules = list(current_app.url_map.iter_rules())\n+    if not rules:\n+        click.echo('No routes were registered.')\n+        return\n+    ignored_methods = set(() if all_methods else ('HEAD', 'OPTIONS'))\n     if sort in ('endpoint', 'rule'):\n         rules = sorted(rules, key=attrgetter(sort))\n     elif sort == 'methods':\n         rules = sorted(rules, key=lambda rule: sorted(rule.methods))\n+    server_name = current_app.config.get('SERVER_NAME', '')\n+\n+    def get_domain(rule):\n+        if not rule.subdomain:\n+            return server_name\n+        return f'{rule.subdomain}.{server_name}'\n+    rule_methods = [', '.join(sorted(rule.methods - ignored_methods)) for rule in rules]\n+    domains = [get_domain(rule) for rule in rules]\n+    headers = ('Domain', 'Endpoint', 'Methods', 'Rule')\n+    widths = (max((len(domain) for domain in domains)), max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n+    widths = [max(len(h), w) for h, w in zip(headers, widths)]\n+    row = '{{0:<{0}}}  {{1:<{1}}}  {{2:<{2}}}  {{3:<{3}}}'.format(*widths)\n+    click.echo(row.format(*headers).strip())\n+    click.echo(row.format(*('-' * width for width in widths)))\n+    for rule, methods, domain in zip(rules, rule_methods, domains):\n+        click.echo(row.format(domain, rule.endpoint, methods, rule.rule).rstrip())\n     rule_methods = [', '.join(sorted(rule.methods - ignored_methods)) for rule in rules]\n     headers = ('Endpoint', 'Methods', 'Rule')\n     widths = (max((len(rule.endpoint) for rule in rules)), max((len(methods) for methods in rule_methods)), max((len(rule.rule) for rule in rules)))\n", "normalized_occurrence": 1}
