{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..2a468c5 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -953,7 +953,9 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         The name of the parameter to be printed in error messages.\n \n     target_type : type or tuple\n-        Acceptable data types for the parameter.\n+        Acceptable data types for the parameter. If float, will accept any\n+        numeric type that can be cast to float. If int, will accept any\n+        numeric type that can be cast to int.\n \n     min_val : float or int, optional (default=None)\n         The minimum valid value the parameter can take. If None (default) it\n@@ -971,13 +973,22 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     ValueError\n         If the parameter's value violates the given bounds.\n     \"\"\"\n-\n-    if not isinstance(x, target_type):\n+    import numbers\n+\n+    if target_type == float:\n+        if not isinstance(x, numbers.Real):\n+            raise TypeError('`{}` must be a real number, not {}.'\n+                          .format(name, type(x)))\n+    elif target_type == int:\n+        if not isinstance(x, numbers.Integral):\n+            raise TypeError('`{}` must be an integer, not {}.'\n+                          .format(name, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+                       .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..fca4ad7 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,14 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    import numbers\n+    if target_type == float:\n+        if not isinstance(x, numbers.Real):\n+            raise TypeError('`{}` must be a real number, not {}.'.format(name, type(x)))\n+    elif target_type == int:\n+        if not isinstance(x, numbers.Integral):\n+            raise TypeError('`{}` must be an integer, not {}.'.format(name, type(x)))\n+    elif not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
