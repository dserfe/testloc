{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..1864c02 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -193,10 +193,16 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n+            if (not unconverged and (K > 0)):\n                 if verbose:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n+            elif it == max_iter:\n+                if verbose:\n+                    print(\"Did not converge\")\n+                I = np.array([], dtype=int)\n+                K = 0\n+                break\n     else:\n         if verbose:\n             print(\"Did not converge\")\n@@ -388,8 +394,10 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n                 convergence_iter=self.convergence_iter, damping=self.damping,\n                 copy=self.copy, verbose=self.verbose, return_n_iter=True)\n \n-        if self.affinity != \"precomputed\":\n+        if self.affinity != \"precomputed\" and len(self.cluster_centers_indices_) > 0:\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n+        else:\n+            self.cluster_centers_ = np.array([])\n \n         return self\n \n@@ -440,4 +448,4 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n         labels : ndarray, shape (n_samples,)\n             Cluster labels.\n         \"\"\"\n-        return super().fit_predict(X, y)\n+        return super().fit_predict(X, y)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..3b0c64a 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -64,10 +64,16 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n             unconverged = np.sum((se == convergence_iter) + (se == 0)) != n_samples\n-            if not unconverged and K > 0 or it == max_iter:\n+            if not unconverged and K > 0:\n                 if verbose:\n                     print('Converged after %d iterations.' % it)\n                 break\n+            elif it == max_iter:\n+                if verbose:\n+                    print('Did not converge')\n+                I = np.array([], dtype=int)\n+                K = 0\n+                break\n     else:\n         if verbose:\n             print('Did not converge')\n@@ -118,8 +124,10 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n         else:\n             raise ValueError(\"Affinity must be 'precomputed' or 'euclidean'. Got %s instead\" % str(self.affinity))\n         self.cluster_centers_indices_, self.labels_, self.n_iter_ = affinity_propagation(self.affinity_matrix_, self.preference, max_iter=self.max_iter, convergence_iter=self.convergence_iter, damping=self.damping, copy=self.copy, verbose=self.verbose, return_n_iter=True)\n-        if self.affinity != 'precomputed':\n+        if self.affinity != 'precomputed' and len(self.cluster_centers_indices_) > 0:\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n+        else:\n+            self.cluster_centers_ = np.array([])\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
