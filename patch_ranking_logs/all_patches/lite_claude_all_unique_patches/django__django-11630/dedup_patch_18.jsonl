{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 231b761..8d1ab62 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -9,6 +10,7 @@ from django.core.checks import Error, Tags, register\n \n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n+    # Track models by (db_table, database) tuple to allow same table names in different databases\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n@@ -19,7 +21,10 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n     for model in models:\n         if model._meta.managed and not model._meta.proxy:\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            # Get the database for this model\n+            db = getattr(model._meta, 'using', 'default')\n+            # Use (table_name, database) as the key\n+            db_table_models[(model._meta.db_table, db)].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(\n                 Error(\n@@ -35,12 +40,18 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+    # Group models by table name only to check for conflicts within the same database\n+    table_conflicts = defaultdict(list)\n+    for (db_table, db), model_labels in db_table_models.items():\n+        table_conflicts[(db_table, db)].extend(model_labels)\n+    \n+    # Only raise error if same table name is used by multiple models in the same database\n+    for (db_table, db), model_labels in table_conflicts.items():\n         if len(model_labels) != 1:\n             errors.append(\n                 Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n+                    \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                    % (db_table, db, ', '.join(model_labels)),\n                     obj=db_table,\n                     id='models.E028',\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8001d47..d05a814 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -16,7 +16,8 @@ def check_all_models(app_configs=None, **kwargs):\n         models = chain.from_iterable((app_config.get_models() for app_config in app_configs))\n     for model in models:\n         if model._meta.managed and (not model._meta.proxy):\n-            db_table_models[model._meta.db_table].append(model._meta.label)\n+            db = getattr(model._meta, 'using', 'default')\n+            db_table_models[model._meta.db_table, db].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(Error(\"The '%s.check()' class method is currently overridden by %r.\" % (model.__name__, model.check), obj=model, id='models.E020'))\n         else:\n@@ -25,9 +26,12 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n+    table_conflicts = defaultdict(list)\n+    for (db_table, db), model_labels in db_table_models.items():\n+        table_conflicts[db_table, db].extend(model_labels)\n+    for (db_table, db), model_labels in table_conflicts.items():\n         if len(model_labels) != 1:\n-            errors.append(Error(\"db_table '%s' is used by multiple models: %s.\" % (db_table, ', '.join(db_table_models[db_table])), obj=db_table, id='models.E028'))\n+            errors.append(Error(\"db_table '%s' is used by multiple models in database '%s': %s.\" % (db_table, db, ', '.join(model_labels)), obj=db_table, id='models.E028'))\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n", "normalized_occurrence": 1}
