{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..25f34a4 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -885,7 +885,21 @@ class Permutation(Basic):\n \n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:  # e\n+            # Convert cycles to integer lists\n             args = [[int(i) for i in c] for c in args]\n+            # Handle cycles by applying them in left-to-right order\n+            size = max([max(c) for c in args], default=-1) + 1\n+            result = list(range(size))  # Start with identity permutation\n+            for cycle in args:\n+                if not cycle:\n+                    continue\n+                # Apply this cycle\n+                temp = result.copy()\n+                for i in range(len(cycle)-1):\n+                    temp[result[cycle[i]]] = result[cycle[i+1]]\n+                temp[result[cycle[-1]]] = result[cycle[0]]\n+                result = temp\n+            return _af_new(result)\n         else:  # d\n             args = [int(i) for i in args]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..6982d1b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -191,6 +191,17 @@ class Permutation(Basic):\n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:\n             args = [[int(i) for i in c] for c in args]\n+            size = max([max(c) for c in args], default=-1) + 1\n+            result = list(range(size))\n+            for cycle in args:\n+                if not cycle:\n+                    continue\n+                temp = result.copy()\n+                for i in range(len(cycle) - 1):\n+                    temp[result[cycle[i]]] = result[cycle[i + 1]]\n+                temp[result[cycle[-1]]] = result[cycle[0]]\n+                result = temp\n+            return _af_new(result)\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n", "normalized_occurrence": 1}
