{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 96f4a03..1175cea 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -683,6 +683,10 @@ class BuildEnvironment:\n \n         # allow custom references to be resolved\n         self.events.emit('doctree-resolved', doctree, docname)\n+        for node in doctree.traverse(nodes.include):\n+            included_docname = node.get('refdoc', docname)\n+            included_source = self.get_doctree(included_docname).astext()\n+            self.events.emit('source-read', included_docname, [included_source])\n \n     def collect_relations(self) -> dict[str, list[str | None]]:\n         traversed: set[str] = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 3c422c4..2113f19 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -383,6 +383,10 @@ class BuildEnvironment:\n         finally:\n             self.temp_data = backup\n         self.events.emit('doctree-resolved', doctree, docname)\n+        for node in doctree.traverse(nodes.include):\n+            included_docname = node.get('refdoc', docname)\n+            included_source = self.get_doctree(included_docname).astext()\n+            self.events.emit('source-read', included_docname, [included_source])\n     def collect_relations(self) -> dict[str, list[str | None]]:\n         traversed: set[str] = set()\n         relations = {}\n", "normalized_occurrence": 1}
