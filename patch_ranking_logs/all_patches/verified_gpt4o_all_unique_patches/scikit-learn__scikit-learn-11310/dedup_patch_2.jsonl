{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..09cb325 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -764,8 +764,11 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                 self.best_index_]\n \n         if self.refit:\n+            start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n+            self.best_estimator_.fit(X, y, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex dd929b2..a0e4bb8 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -252,7 +252,10 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n             self.best_params_ = candidate_params[self.best_index_]\n             self.best_score_ = results['mean_test_%s' % refit_metric][self.best_index_]\n         if self.refit:\n+            start_time = time.time()\n             self.best_estimator_ = clone(base_estimator).set_params(**self.best_params_)\n+            self.best_estimator_.fit(X, y, **fit_params)\n+            self.refit_time_ = time.time() - start_time\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n             else:\n", "normalized_occurrence": 1}
