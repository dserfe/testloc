{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..e2ccde3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1155,11 +1155,26 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode, but stricter for attributes\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        for oname in self.objects:\n+                            if oname.endswith(searchname) and self.objects[oname].objtype in objtypes:\n+                                # For attributes, only match if in the same class\n+                                if type in ('attr', 'data'):\n+                                    # Compare the parent class/module path\n+                                    ref_parts = oname.split('.')\n+                                    current_parts = []\n+                                    if modname:\n+                                        current_parts.extend(modname.split('.'))\n+                                    if classname:\n+                                        current_parts.append(classname)\n+                                    \n+                                    # Only match if the parent paths are the same\n+                                    if ref_parts[:-1] == current_parts:\n+                                        matches.append((oname, self.objects[oname]))\n+                                else:\n+                                    matches.append((oname, self.objects[oname]))\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..ddd1c52 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -684,7 +684,20 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        for oname in self.objects:\n+                            if oname.endswith(searchname) and self.objects[oname].objtype in objtypes:\n+                                if type in ('attr', 'data'):\n+                                    ref_parts = oname.split('.')\n+                                    current_parts = []\n+                                    if modname:\n+                                        current_parts.extend(modname.split('.'))\n+                                    if classname:\n+                                        current_parts.append(classname)\n+                                    if ref_parts[:-1] == current_parts:\n+                                        matches.append((oname, self.objects[oname]))\n+                                else:\n+                                    matches.append((oname, self.objects[oname]))\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
