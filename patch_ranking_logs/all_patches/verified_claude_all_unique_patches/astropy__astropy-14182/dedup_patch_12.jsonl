{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..d3fdd7c 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,24 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        # Get the separator line (the one with ===)\n+        separator = lines[1]\n+        \n+        # For standard table without header_rows, add separator at top and bottom\n+        if not hasattr(self, 'header_rows') or not self.header_rows:\n+            return [separator] + lines + [separator]\n+            \n+        # For tables with header_rows, add separator after each header row\n+        result = []\n+        header_count = len(self.header_rows)\n+        for i, line in enumerate(lines):\n+            result.append(line)\n+            # Add separator after each header row and after the data\n+            if i < header_count or i == len(lines) - 1:\n+                result.append(separator)\n+        return result\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..08a40e3 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,9 +18,17 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n-        super().__init__(delimiter_pad=None, bookend=False)\n+    def __init__(self, **kwargs):\n+        super().__init__(delimiter_pad=None, bookend=False, **kwargs)\n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n\\ No newline at end of file\n+        separator = lines[1]\n+        if not hasattr(self, 'header_rows') or not self.header_rows:\n+            return [separator] + lines + [separator]\n+        result = []\n+        header_count = len(self.header_rows)\n+        for i, line in enumerate(lines):\n+            result.append(line)\n+            if i < header_count or i == len(lines) - 1:\n+                result.append(separator)\n+        return result\n\\ No newline at end of file\n", "normalized_occurrence": 1}
