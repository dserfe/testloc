{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..5513bd7 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -695,9 +695,9 @@ class Response(object):\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n-\n-        return chunks\n+            return stream_decode_response_unicode(chunks, self)\n+        else:\n+            return chunks\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..b5c0e25 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -360,8 +360,9 @@ class Response(object):\n         stream_chunks = generate()\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n-        return chunks\n+            return stream_decode_response_unicode(chunks, self)\n+        else:\n+            return chunks\n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         pending = None\n         for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):\n", "normalized_occurrence": 1}
