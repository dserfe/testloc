{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..7a50485 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -93,34 +93,19 @@ class PrettyPrinter(Printer):\n         return prettyForm(sstr(e, full_prec=full_prec))\n \n     def _print_Cross(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n-        return pform\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        return prettyForm(*vec1.right(' \\u2A2F ').right(vec2))\n \n     def _print_Curl(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n-        return pform\n+        vec = self._print(e._expr)\n+        nabla = prettyForm(' \\u2207 ')\n+        return prettyForm(*nabla.right(' \\u2A2F ').right(vec))\n \n     def _print_Divergence(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n-        return pform\n+        vec = self._print(e._expr)\n+        nabla = prettyForm(' \\u2207 ')\n+        return prettyForm(*nabla.right(' \\u00B7 ').right(vec))\n \n     def _print_Dot(self, e):\n         vec1 = e._expr1\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..1b2638f 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -58,32 +58,17 @@ class PrettyPrinter(Printer):\n             full_prec = self._print_level == 1\n         return prettyForm(sstr(e, full_prec=full_prec))\n     def _print_Cross(self, e):\n-        vec1 = e._expr1\n-        vec2 = e._expr2\n-        pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n-        return pform\n+        vec1 = self._print(e._expr1)\n+        vec2 = self._print(e._expr2)\n+        return prettyForm(*vec1.right(' ⨯ ').right(vec2))\n     def _print_Curl(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n-        return pform\n+        vec = self._print(e._expr)\n+        nabla = prettyForm(' ∇ ')\n+        return prettyForm(*nabla.right(' ⨯ ').right(vec))\n     def _print_Divergence(self, e):\n-        vec = e._expr\n-        pform = self._print(vec)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('DOT OPERATOR'))))\n-        pform = prettyForm(*pform.left(self._print(U('NABLA'))))\n-        return pform\n+        vec = self._print(e._expr)\n+        nabla = prettyForm(' ∇ ')\n+        return prettyForm(*nabla.right(' · ').right(vec))\n     def _print_Dot(self, e):\n         vec1 = e._expr1\n         vec2 = e._expr2\n", "normalized_occurrence": 1}
