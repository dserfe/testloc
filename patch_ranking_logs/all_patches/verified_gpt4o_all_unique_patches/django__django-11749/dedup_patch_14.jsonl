{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..5562b47 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,11 +130,21 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n+    # Any required arguments or mutually exclusive group arguments which are passed in via **options must be passed\n     # to parse_args().\n+    required_groups = [\n+        group for group in parser._mutually_exclusive_groups if group.required\n+    ]\n+    for group in required_groups:\n+        if not any(opt.dest in options for opt in group._group_actions):\n+            raise CommandError(\n+                \"Error: one of the arguments {} is required\".format(\n+                    \" \".join(opt.option_strings[0] for opt in group._group_actions)\n+                )\n+            )\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if (opt.required or any(opt in group._group_actions for group in required_groups)) and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..699ca03 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,11 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    required_groups = [group for group in parser._mutually_exclusive_groups if group.required]\n+    for group in required_groups:\n+        if not any((opt.dest in options for opt in group._group_actions)):\n+            raise CommandError('Error: one of the arguments {} is required'.format(' '.join((opt.option_strings[0] for opt in group._group_actions))))\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if (opt.required or any((opt in group._group_actions for group in required_groups))) and opt.dest in options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
