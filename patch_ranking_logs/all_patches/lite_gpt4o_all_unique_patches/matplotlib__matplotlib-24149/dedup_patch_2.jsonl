{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5af9d96..5f50733 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2171,22 +2171,30 @@ class Axes(_AxesBase):\n             # attempt to add the width to x0; this works for\n             # datetime+timedelta, for instance\n \n-            # only use the first element of x and x0.  This saves\n-            # having to be sure addition works across the whole\n-            # vector.  This is particularly an issue if\n-            # x0 and dx are lists so x0 + dx just concatenates the lists.\n-            # We can't just cast x0 and dx to numpy arrays because that\n-            # removes the units from unit packages like `pint` that\n-            # wrap numpy arrays.\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n+            # Check if all values are NaN\n+            if np.isnan(x0).all():\n+                x0 = np.nan\n+            else:\n+                # only use the first element of x and x0.  This saves\n+                # having to be sure addition works across the whole\n+                # vector.  This is particularly an issue if\n+                # x0 and dx are lists so x0 + dx just concatenates the lists.\n+                # We can't just cast x0 and dx to numpy arrays because that\n+                # removes the units from unit packages like `pint` that\n+                # wrap numpy arrays.\n+                try:\n+                    x0 = cbook._safe_first_finite(x0)\n+                except (TypeError, IndexError, KeyError):\n+                    pass\n \n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+            # Check if all values are NaN\n+            if np.isnan(xconv).all():\n                 x = xconv\n+            else:\n+                try:\n+                    x = cbook._safe_first_finite(xconv)\n+                except (TypeError, IndexError, KeyError):\n+                    x = xconv\n \n             delist = False\n             if not np.iterable(dx):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5336f05..ecd9373 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -455,14 +455,20 @@ class Axes(_AxesBase):\n         if xconv.size == 0:\n             return convert(dx)\n         try:\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n+            if np.isnan(x0).all():\n+                x0 = np.nan\n+            else:\n+                try:\n+                    x0 = cbook._safe_first_finite(x0)\n+                except (TypeError, IndexError, KeyError):\n+                    pass\n+            if np.isnan(xconv).all():\n                 x = xconv\n+            else:\n+                try:\n+                    x = cbook._safe_first_finite(xconv)\n+                except (TypeError, IndexError, KeyError):\n+                    x = xconv\n             delist = False\n             if not np.iterable(dx):\n                 dx = [dx]\n", "normalized_occurrence": 1}
