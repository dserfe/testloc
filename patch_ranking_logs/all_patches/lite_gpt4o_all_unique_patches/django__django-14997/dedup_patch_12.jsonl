{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..556a1a4 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -425,7 +425,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().add_constraint(model, constraint)\n+            raise NotSupportedError(\n+                'Adding a UNIQUE constraint with conditions, expressions, '\n+                'include, or deferrable is not supported with SQLite.'\n+            )\n         else:\n             self._remake_table(model)\n \n@@ -436,9 +439,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             constraint.include or\n             constraint.deferrable\n         ):\n-            super().remove_constraint(model, constraint)\n+            raise NotSupportedError(\n+                'Removing a UNIQUE constraint with conditions, expressions, '\n+                'include, or deferrable is not supported with SQLite.'\n+            )\n         else:\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..156f7d8 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -202,12 +202,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.delete_model(old_field.remote_field.through)\n     def add_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().add_constraint(model, constraint)\n+            raise NotSupportedError('Adding a UNIQUE constraint with conditions, expressions, include, or deferrable is not supported with SQLite.')\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().remove_constraint(model, constraint)\n+            raise NotSupportedError('Removing a UNIQUE constraint with conditions, expressions, include, or deferrable is not supported with SQLite.')\n         else:\n             self._remake_table(model)\n     def _collate_sql(self, collation):\n", "normalized_occurrence": 1}
