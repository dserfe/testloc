{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex ebc163c..c25ae94 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -776,13 +776,16 @@ class TerminalReporter:\n \n     def _locationline(self, nodeid, fspath, lineno, domain):\n         def mkrel(nodeid):\n-            line = self.config.cwd_relative_nodeid(nodeid)\n-            if domain and line.endswith(domain):\n-                line = line[: -len(domain)]\n+            # Get the absolute path first\n+            abs_path = os.path.abspath(nodeid)\n+            # Then make it relative to the original start directory\n+            rel_path = os.path.relpath(abs_path, start=str(self.startdir))\n+            if domain and rel_path.endswith(domain):\n+                rel_path = rel_path[: -len(domain)]\n                 values = domain.split(\"[\")\n                 values[0] = values[0].replace(\".\", \"::\")  # don't replace '.' in params\n-                line += \"[\".join(values)\n-            return line\n+                rel_path += \"[\".join(values)\n+            return rel_path\n \n         # collect_fspath comes from testid which has a \"/\"-normalized path\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 554ecf8..b924d47 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -510,13 +510,14 @@ class TerminalReporter:\n                 self._tw.line('(to show a full traceback on KeyboardInterrupt use --full-trace)', yellow=True)\n     def _locationline(self, nodeid, fspath, lineno, domain):\n         def mkrel(nodeid):\n-            line = self.config.cwd_relative_nodeid(nodeid)\n-            if domain and line.endswith(domain):\n-                line = line[:-len(domain)]\n+            abs_path = os.path.abspath(nodeid)\n+            rel_path = os.path.relpath(abs_path, start=str(self.startdir))\n+            if domain and rel_path.endswith(domain):\n+                rel_path = rel_path[:-len(domain)]\n                 values = domain.split('[')\n                 values[0] = values[0].replace('.', '::')\n-                line += '['.join(values)\n-            return line\n+                rel_path += '['.join(values)\n+            return rel_path\n         if fspath:\n             res = mkrel(nodeid)\n             if self.verbosity >= 2 and nodeid.split('::')[0] != fspath.replace('\\\\', nodes.SEP):\n", "normalized_occurrence": 1}
