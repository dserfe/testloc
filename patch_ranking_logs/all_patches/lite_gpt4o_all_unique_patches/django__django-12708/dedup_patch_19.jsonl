{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..7c9080f 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,12 +407,21 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n+        # If there are multiple constraints found, we need to filter out\n+        # the constraint that matches the specific type we want to remove.\n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n+            for constraint_name in constraint_names:\n+                # Check if the constraint name ends with the expected suffix\n+                if (constraint_kwargs.get('unique') and constraint_name.endswith('_uniq')) or \\\n+                   (constraint_kwargs.get('index') and constraint_name.endswith('_idx')):\n+                    constraint_names = [constraint_name]\n+                    break\n+            else:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..f0518d1 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -231,7 +231,12 @@ class BaseDatabaseSchemaEditor:\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+            for constraint_name in constraint_names:\n+                if constraint_kwargs.get('unique') and constraint_name.endswith('_uniq') or (constraint_kwargs.get('index') and constraint_name.endswith('_idx')):\n+                    constraint_names = [constraint_name]\n+                    break\n+            else:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n", "normalized_occurrence": 1}
