{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..adbe1dd 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -499,6 +499,17 @@ def trigsimp(expr, **opts):\n         new = traverse(ex)\n         if not isinstance(new, Expr):\n             return new\n+            \n+        # Special handling for sin/cos products with rational arguments\n+        from sympy import sin, cos, Rational\n+        if isinstance(new, Mul):\n+            terms = new.args\n+            sin_terms = [t for t in terms if t.func == sin and isinstance(t.args[0], Rational)]\n+            cos_terms = [t for t in terms if t.func == cos and isinstance(t.args[0], Rational)]\n+            if len(sin_terms) == 2 or len(cos_terms) == 2:\n+                # Try to apply cos(a-b) = cos(a)cos(b) + sin(a)sin(b) in reverse\n+                return trigsimp_groebner(new, **opts)\n+                \n         return trigsimp_groebner(new, **opts)\n \n     trigsimpfunc = {\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..cc57bcc 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -169,6 +169,13 @@ def trigsimp(expr, **opts):\n         new = traverse(ex)\n         if not isinstance(new, Expr):\n             return new\n+        from sympy import sin, cos, Rational\n+        if isinstance(new, Mul):\n+            terms = new.args\n+            sin_terms = [t for t in terms if t.func == sin and isinstance(t.args[0], Rational)]\n+            cos_terms = [t for t in terms if t.func == cos and isinstance(t.args[0], Rational)]\n+            if len(sin_terms) == 2 or len(cos_terms) == 2:\n+                return trigsimp_groebner(new, **opts)\n         return trigsimp_groebner(new, **opts)\n     trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n     return trigsimpfunc(expr)\n", "normalized_occurrence": 1}
