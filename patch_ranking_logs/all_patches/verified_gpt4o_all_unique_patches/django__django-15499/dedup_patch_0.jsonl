{"model_name_or_path": "agentless", "instance_id": "django__django-15499", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 111e13a..26dbef8 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -153,6 +153,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterModelOptions)\n             and self.name_lower == operation.name_lower\n@@ -170,6 +183,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterTogetherOptionOperation)\n             and self.name_lower == operation.name_lower\n@@ -186,6 +212,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, AlterOrderWithRespectTo)\n             and self.name_lower == operation.name_lower\n@@ -202,6 +241,19 @@ class CreateModel(ModelOperation):\n                     managers=self.managers,\n                 ),\n             ]\n+        elif (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=operation.managers,\n+                ),\n+            ]\n         elif (\n             isinstance(operation, FieldOperation)\n             and self.name_lower == operation.model_name_lower\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 184d7a0..271e1b5 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -75,16 +75,24 @@ class CreateModel(ModelOperation):\n             return []\n         elif isinstance(operation, RenameModel) and self.name_lower == operation.old_name_lower:\n             return [CreateModel(operation.new_name, fields=self.fields, options=self.options, bases=self.bases, managers=self.managers)]\n+        elif isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            return [CreateModel(self.name, fields=self.fields, options=self.options, bases=self.bases, managers=operation.managers)]\n         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:\n             options = {**self.options, **operation.options}\n             for key in operation.ALTER_OPTION_KEYS:\n                 if key not in operation.options:\n                     options.pop(key, None)\n             return [CreateModel(self.name, fields=self.fields, options=options, bases=self.bases, managers=self.managers)]\n+        elif isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            return [CreateModel(self.name, fields=self.fields, options=self.options, bases=self.bases, managers=operation.managers)]\n         elif isinstance(operation, AlterTogetherOptionOperation) and self.name_lower == operation.name_lower:\n             return [CreateModel(self.name, fields=self.fields, options={**self.options, **{operation.option_name: operation.option_value}}, bases=self.bases, managers=self.managers)]\n+        elif isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            return [CreateModel(self.name, fields=self.fields, options=self.options, bases=self.bases, managers=operation.managers)]\n         elif isinstance(operation, AlterOrderWithRespectTo) and self.name_lower == operation.name_lower:\n             return [CreateModel(self.name, fields=self.fields, options={**self.options, 'order_with_respect_to': operation.order_with_respect_to}, bases=self.bases, managers=self.managers)]\n+        elif isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            return [CreateModel(self.name, fields=self.fields, options=self.options, bases=self.bases, managers=operation.managers)]\n         elif isinstance(operation, FieldOperation) and self.name_lower == operation.model_name_lower:\n             if isinstance(operation, AddField):\n                 return [CreateModel(self.name, fields=self.fields + [(operation.name, operation.field)], options=self.options, bases=self.bases, managers=self.managers)]\n", "normalized_occurrence": 1}
