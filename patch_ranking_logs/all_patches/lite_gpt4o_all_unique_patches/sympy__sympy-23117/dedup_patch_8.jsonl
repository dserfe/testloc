{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..4f80714 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -194,13 +194,18 @@ class NDimArray(Printable):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n \n-            result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n+            if not pointer:\n+                return [], ()\n+            try:\n+                elems, shapes = zip(*[f(i) for i in pointer])\n+            except ValueError:  # catches the case where pointer is empty\n+                return [], ()\n             if len(set(shapes)) != 1:\n                 raise ValueError(\"could not determine shape unambiguously\")\n+            result = []\n             for i in elems:\n                 result.extend(i)\n-            return result, (len(shapes),)+shapes[0]\n+            return result, (len(shapes),) + shapes[0]\n \n         return f(iterable)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..d81faef 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -70,10 +70,15 @@ class NDimArray(Printable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n-            result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n+            if not pointer:\n+                return ([], ())\n+            try:\n+                elems, shapes = zip(*[f(i) for i in pointer])\n+            except ValueError:\n+                return ([], ())\n             if len(set(shapes)) != 1:\n                 raise ValueError('could not determine shape unambiguously')\n+            result = []\n             for i in elems:\n                 result.extend(i)\n             return (result, (len(shapes),) + shapes[0])\n", "normalized_occurrence": 1}
