{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8282", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex cd0e9c6..0f57a91 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1262,11 +1262,18 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n                     sigs.append(documenter.format_signature())\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n-            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__,\n-                                              self.env.config.autodoc_type_aliases)\n+            if self.env.config.autodoc_typehints == 'none':\n+                for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n+                    overload = evaluate_signature(overload, __globals__,\n+                                                  self.env.config.autodoc_type_aliases)\n \n-                sig = stringify_signature(overload, **kwargs)\n+                    sig = stringify_signature(overload, typehints=False, **kwargs)\n+            else:\n+                for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n+                    overload = evaluate_signature(overload, __globals__,\n+                                                  self.env.config.autodoc_type_aliases)\n+\n+                    sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n \n         return \"\\n\".join(sigs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex be7144a..c2ba231 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -699,9 +699,14 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     sigs.append(documenter.format_signature())\n         if overloaded:\n             __globals__ = safe_getattr(self.object, '__globals__', {})\n-            for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n-                overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n-                sig = stringify_signature(overload, **kwargs)\n+            if self.env.config.autodoc_typehints == 'none':\n+                for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n+                    overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n+                    sig = stringify_signature(overload, typehints=False, **kwargs)\n+            else:\n+                for overload in self.analyzer.overloads.get('.'.join(self.objpath)):\n+                    overload = evaluate_signature(overload, __globals__, self.env.config.autodoc_type_aliases)\n+                    sig = stringify_signature(overload, **kwargs)\n                 sigs.append(sig)\n         return '\\n'.join(sigs)\n     def annotate_to_first_argument(self, func: Callable, typ: Type) -> None:\n", "normalized_occurrence": 1}
