{"model_name_or_path": "agentless", "instance_id": "django__django-17029", "model_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex ca85962..aeba93a 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -367,6 +367,15 @@ class Apps:\n         self.apps_ready = self.models_ready = self.ready = True\n         self.clear_cache()\n \n+    @functools.lru_cache(None)\n+    def get_swappable_settings_name(self, to_string):\n+        from django.db import settings\n+\n+        try:\n+            return settings[REWRITES[to_string]]\n+        except KeyError:\n+            return None\n+\n     def clear_cache(self):\n         \"\"\"\n         Clear all internal caches, for methods that alter the app registry.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/apps/registry.py b/django/apps/registry.py\nindex 057d99d..1f1cc8f 100644\n--- a/django/apps/registry.py\n+++ b/django/apps/registry.py\n@@ -153,6 +153,13 @@ class Apps:\n         self.app_configs = self.stored_app_configs.pop()\n         self.apps_ready = self.models_ready = self.ready = True\n         self.clear_cache()\n+    @functools.lru_cache(None)\n+    def get_swappable_settings_name(self, to_string):\n+        from django.db import settings\n+        try:\n+            return settings[REWRITES[to_string]]\n+        except KeyError:\n+            return None\n     def clear_cache(self):\n         self.get_models.cache_clear()\n         if self.ready:\n", "normalized_occurrence": 1}
