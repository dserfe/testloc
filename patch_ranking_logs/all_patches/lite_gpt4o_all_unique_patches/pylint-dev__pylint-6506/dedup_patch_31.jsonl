{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6506", "model_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex 75cba62..4be89f0 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -132,9 +132,14 @@ group are mutually exclusive.\",\n         linter.disable(\"I\")\n         linter.enable(\"c-extension-no-member\")\n \n-        args = _config_initialization(\n-            linter, args, reporter, config_file=self._rcfile, verbose_mode=self.verbose\n-        )\n+        try:\n+            args = _config_initialization(\n+                linter, args, reporter, config_file=self._rcfile, verbose_mode=self.verbose\n+            )\n+        except _UnrecognizedOptionError as exc:\n+            print(f\"Error: unrecognized option(s) found: {', '.join(exc.options)}\", file=sys.stderr)\n+            print(linter.help())\n+            sys.exit(32)\n \n         if linter.config.jobs < 0:\n             print(\n@@ -187,4 +192,4 @@ group are mutually exclusive.\",\n                     # So we use self.linter.msg_status if that is non-zero, otherwise we just return 1.\n                     sys.exit(self.linter.msg_status or 1)\n             else:\n-                sys.exit(self.linter.msg_status)\n+                sys.exit(self.linter.msg_status)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/run.py b/pylint/lint/run.py\nindex 5ad0cc6..ed8e5a5 100644\n--- a/pylint/lint/run.py\n+++ b/pylint/lint/run.py\n@@ -71,7 +71,12 @@ class Run:\n         linter.load_plugin_modules(self._plugins)\n         linter.disable('I')\n         linter.enable('c-extension-no-member')\n-        args = _config_initialization(linter, args, reporter, config_file=self._rcfile, verbose_mode=self.verbose)\n+        try:\n+            args = _config_initialization(linter, args, reporter, config_file=self._rcfile, verbose_mode=self.verbose)\n+        except _UnrecognizedOptionError as exc:\n+            print(f\"Error: unrecognized option(s) found: {', '.join(exc.options)}\", file=sys.stderr)\n+            print(linter.help())\n+            sys.exit(32)\n         if linter.config.jobs < 0:\n             print(f'Jobs number ({linter.config.jobs}) should be greater than or equal to 0', file=sys.stderr)\n             sys.exit(32)\n", "normalized_occurrence": 1}
