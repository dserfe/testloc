{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..a80ddd2 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -184,6 +184,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -195,6 +196,21 @@ class MigrationAutodetector:\n         self._build_migration_list(graph)\n         self._optimize_migrations()\n \n+    def generate_foreign_key_dependencies(self):\n+        \"\"\"\n+        Generate dependencies for ForeignKey fields.\n+        \"\"\"\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+\n+            for field_name, field in new_model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, model_name, dep)\n+\n         return self.migrations\n \n     def _prepare_field_lists(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..4d0ae2f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -98,6 +98,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -107,6 +108,16 @@ class MigrationAutodetector:\n         self._sort_migrations()\n         self._build_migration_list(graph)\n         self._optimize_migrations()\n+    def generate_foreign_key_dependencies(self):\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n+            old_model_state = self.from_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            for field_name, field in new_model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, model_name, dep)\n         return self.migrations\n     def _prepare_field_lists(self):\n         self.kept_model_keys = self.old_model_keys & self.new_model_keys\n", "normalized_occurrence": 1}
