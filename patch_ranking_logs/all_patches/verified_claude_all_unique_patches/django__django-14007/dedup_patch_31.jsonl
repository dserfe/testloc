{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..ea4ba6a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,23 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            if converters:\n+                rows = list(result)\n+                for i, row in enumerate(rows):\n+                    values = list(row)\n+                    for pos, value in enumerate(values):\n+                        for converter in converters:\n+                            value = converter(value, None, connection)\n+                        values[pos] = value\n+                    rows[i] = tuple(values)\n+                result = rows\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..408c058 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,23 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        result = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if result is not None and returning_fields:\n+            connection = connections[using]\n+            converters = []\n+            for field in returning_fields:\n+                converters.extend(field.get_db_converters(connection))\n+            if converters:\n+                rows = list(result)\n+                for i, row in enumerate(rows):\n+                    values = list(row)\n+                    for pos, value in enumerate(values):\n+                        for converter in converters:\n+                            value = converter(value, None, connection)\n+                        values[pos] = value\n+                    rows[i] = tuple(values)\n+                result = rows\n+        return result\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
