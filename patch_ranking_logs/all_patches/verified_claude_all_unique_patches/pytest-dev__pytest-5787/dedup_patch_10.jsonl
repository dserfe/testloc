{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..78f7096 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,28 +162,42 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+            def _disassemble_tb(tb):\n+                result = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in result[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                result[\"reprentries\"] = new_entries\n+                return result\n+\n+            reprtraceback = _disassemble_tb(rep.longrepr.reprtraceback)\n             reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n \n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n-\n-            return {\n+            result = {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n             }\n \n+            # Handle chained exceptions\n+            if hasattr(rep.longrepr, \"chain\"):\n+                result[\"chain\"] = []\n+                for tb, cause_message in rep.longrepr.chain:\n+                    chain_entry = {\n+                        \"reprtraceback\": _disassemble_tb(tb),\n+                        \"cause_message\": cause_message,\n+                    }\n+                    result[\"chain\"].append(chain_entry)\n+\n+            return result\n+\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n             if hasattr(self.longrepr, \"reprtraceback\") and hasattr(\n@@ -250,11 +264,51 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+                def _build_reprtraceback(traceback_dict):\n+                    unserialized_entries = []\n+                    for entry_data in traceback_dict[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                filelocrepr=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    traceback_dict[\"reprentries\"] = unserialized_entries\n+                    return ReprTraceback(**traceback_dict)\n+\n+                reprtraceback = _build_reprtraceback(reprtraceback)\n                 exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n+                    reprtraceback=reprtraceback,\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n \n+                # Handle chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for item in reportdict[\"longrepr\"][\"chain\"]:\n+                        tb = _build_reprtraceback(item[\"reprtraceback\"])\n+                        chain.append((tb, item[\"cause_message\"]))\n+                    exception_info.chain = chain\n+\n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..0191b36 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,26 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n+            def _disassemble_tb(tb):\n+                result = tb.__dict__.copy()\n+                new_entries = []\n+                for entry in result['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                result['reprentries'] = new_entries\n+                return result\n+            reprtraceback = _disassemble_tb(rep.longrepr.reprtraceback)\n             reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            result = {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            if hasattr(rep.longrepr, 'chain'):\n+                result['chain'] = []\n+                for tb, cause_message in rep.longrepr.chain:\n+                    chain_entry = {'reprtraceback': _disassemble_tb(tb), 'cause_message': cause_message}\n+                    result['chain'].append(chain_entry)\n+            return result\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -130,7 +139,37 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                def _build_reprtraceback(traceback_dict):\n+                    unserialized_entries = []\n+                    for entry_data in traceback_dict['reprentries']:\n+                        data = entry_data['data']\n+                        entry_type = entry_data['type']\n+                        if entry_type == 'ReprEntry':\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data['reprfuncargs']:\n+                                reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                            if data['reprfileloc']:\n+                                reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                            if data['reprlocals']:\n+                                reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                            reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                        elif entry_type == 'ReprEntryNative':\n+                            reprentry = ReprEntryNative(data['lines'])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    traceback_dict['reprentries'] = unserialized_entries\n+                    return ReprTraceback(**traceback_dict)\n+                reprtraceback = _build_reprtraceback(reprtraceback)\n+                exception_info = ReprExceptionInfo(reprtraceback=reprtraceback, reprcrash=ReprFileLocation(**reprcrash))\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for item in reportdict['longrepr']['chain']:\n+                        tb = _build_reprtraceback(item['reprtraceback'])\n+                        chain.append((tb, item['cause_message']))\n+                    exception_info.chain = chain\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 1}
