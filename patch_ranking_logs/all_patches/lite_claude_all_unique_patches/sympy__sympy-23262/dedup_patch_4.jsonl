{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 9b53255..1b3198e 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -308,7 +308,14 @@ class AbstractPythonCodePrinter(CodePrinter):\n \n     def _print_Return(self, ret):\n         arg, = ret.args\n-        return 'return %s' % self._print(arg)\n+        printed_arg = self._print(arg)\n+        # Special case: if the argument is a tuple with single element\n+        # we need to ensure the comma is present\n+        if (isinstance(arg, tuple) or getattr(arg, '__class__.__name__', '') == 'Tuple') and len(arg) == 1:\n+            if printed_arg.startswith('(') and printed_arg.endswith(')'):\n+                inner = printed_arg[1:-1].strip()\n+                return 'return (%s,)' % inner\n+        return 'return %s' % printed_arg\n \n     def _print_Print(self, prnt):\n         print_args = ', '.join(map(lambda arg: self._print(arg), prnt.print_args))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex d08d049..9aa8ecf 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -132,7 +132,12 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return '%s = %s' % (self._print(decl.variable.symbol), self._print(decl.variable.value))\n     def _print_Return(self, ret):\n         arg, = ret.args\n-        return 'return %s' % self._print(arg)\n+        printed_arg = self._print(arg)\n+        if (isinstance(arg, tuple) or getattr(arg, '__class__.__name__', '') == 'Tuple') and len(arg) == 1:\n+            if printed_arg.startswith('(') and printed_arg.endswith(')'):\n+                inner = printed_arg[1:-1].strip()\n+                return 'return (%s,)' % inner\n+        return 'return %s' % printed_arg\n     def _print_Print(self, prnt):\n         print_args = ', '.join(map(lambda arg: self._print(arg), prnt.print_args))\n         if prnt.format_string != None:\n", "normalized_occurrence": 1}
