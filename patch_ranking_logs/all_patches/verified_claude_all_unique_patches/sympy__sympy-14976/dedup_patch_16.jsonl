{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14976", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..a7bb7df 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -398,23 +398,32 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n+            def rational_to_mpf(r):\n+                return 'mpmath.mpf(%r)/%r' % (r.p, r.q)\n+            printer_settings = {'rational_to_decimal': False, 'rational_repr': rational_to_mpf}\n         elif _module_present('numpy', namespaces):\n             from sympy.printing.pycode import NumPyPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('numexpr', namespaces):\n             from sympy.printing.lambdarepr import NumExprPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('tensorflow', namespaces):\n             from sympy.printing.lambdarepr import TensorflowPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('sympy', namespaces):\n             from sympy.printing.pycode import SymPyPrinter as Printer\n+            printer_settings = {}\n         else:\n             from sympy.printing.pycode import PythonCodePrinter as Printer\n+            printer_settings = {}\n         user_functions = {}\n         for m in namespaces[::-1]:\n             if isinstance(m, dict):\n                 for k in m:\n                     user_functions[k] = k\n-        printer = Printer({'fully_qualified_modules': False, 'inline': True,\n+        printer_settings.update({'fully_qualified_modules': False, 'inline': True,\n                            'user_functions': user_functions})\n+        printer = Printer(printer_settings)\n \n     # Get the names of the args, for creating a docstring\n     if not iterable(args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..5582d3b 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -88,22 +88,31 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n+            def rational_to_mpf(r):\n+                return 'mpmath.mpf(%r)/%r' % (r.p, r.q)\n+            printer_settings = {'rational_to_decimal': False, 'rational_repr': rational_to_mpf}\n         elif _module_present('numpy', namespaces):\n             from sympy.printing.pycode import NumPyPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('numexpr', namespaces):\n             from sympy.printing.lambdarepr import NumExprPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('tensorflow', namespaces):\n             from sympy.printing.lambdarepr import TensorflowPrinter as Printer\n+            printer_settings = {}\n         elif _module_present('sympy', namespaces):\n             from sympy.printing.pycode import SymPyPrinter as Printer\n+            printer_settings = {}\n         else:\n             from sympy.printing.pycode import PythonCodePrinter as Printer\n+            printer_settings = {}\n         user_functions = {}\n         for m in namespaces[::-1]:\n             if isinstance(m, dict):\n                 for k in m:\n                     user_functions[k] = k\n-        printer = Printer({'fully_qualified_modules': False, 'inline': True, 'user_functions': user_functions})\n+        printer_settings.update({'fully_qualified_modules': False, 'inline': True, 'user_functions': user_functions})\n+        printer = Printer(printer_settings)\n     if not iterable(args):\n         args = (args,)\n     names = []\n", "normalized_occurrence": 1}
