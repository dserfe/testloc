{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..7d5f392 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,12 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Resolve repeated elements by applying cycles in left-to-right order\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n+                temp = list(range(len(aform)))\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..38b52d0 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,7 +196,11 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n+                temp = list(range(len(aform)))\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "normalized_occurrence": 1}
