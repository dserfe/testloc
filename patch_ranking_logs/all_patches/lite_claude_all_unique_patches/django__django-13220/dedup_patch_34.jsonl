{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..e3e13b7 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,27 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+            \n+        if hasattr(self, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            # Compare error lists for each field, order-independently\n+            return all(\n+                sorted(self.error_dict[field], key=lambda x: str(x.message)) ==\n+                sorted(other.error_dict[field], key=lambda x: str(x.message))\n+                for field in self.error_dict\n+            )\n+        \n+        # Compare non-dictionary error lists order-independently\n+        return sorted(self.error_list, key=lambda x: str(x.message)) == \\\n+               sorted(other.error_list, key=lambda x: str(x.message))\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +211,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+        if hasattr(self, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            return all((sorted(self.error_dict[field], key=lambda x: str(x.message)) == sorted(other.error_dict[field], key=lambda x: str(x.message)) for field in self.error_dict))\n+        return sorted(self.error_list, key=lambda x: str(x.message)) == sorted(other.error_list, key=lambda x: str(x.message))\n+", "normalized_occurrence": 1}
