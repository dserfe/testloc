{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..3d2b065 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -193,6 +193,17 @@ class Options:\n             # order_with_respect_and ordering are mutually exclusive.\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n+            # Validate ordering fields\n+            if self.ordering:\n+                for field in self.ordering:\n+                    if isinstance(field, str) and LOOKUP_SEP in field:\n+                        parts = field.split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if field_name not in [f.name for f in self.fields]:\n+                            raise FieldError(\n+                                \"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field\n+                            )\n+\n             # Any leftover attributes must be invalid.\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..58a379f 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -118,6 +118,13 @@ class Options:\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n+            if self.ordering:\n+                for field in self.ordering:\n+                    if isinstance(field, str) and LOOKUP_SEP in field:\n+                        parts = field.split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if field_name not in [f.name for f in self.fields]:\n+                            raise FieldError(\"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field)\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n         else:\n", "normalized_occurrence": 1}
