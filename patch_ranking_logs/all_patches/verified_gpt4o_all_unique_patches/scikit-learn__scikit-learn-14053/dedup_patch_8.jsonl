{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14053", "model_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 8644d61..8e00558 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -871,9 +871,9 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         raise ValueError(\"max_depth bust be >= 0, given %d\" % max_depth)\n \n     if (feature_names is not None and\n-            len(feature_names) != tree_.n_features):\n+            len(feature_names) != tree_.n_features_in_):\n         raise ValueError(\"feature_names must contain \"\n-                         \"%d elements, got %d\" % (tree_.n_features,\n+                         \"%d elements, got %d\" % (tree_.n_features_in_,\n                                                   len(feature_names)))\n \n     if spacing <= 0:\n@@ -890,7 +890,7 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n         value_fmt = \"{}{} value: {}\\n\"\n \n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] for i in tree_.feature if i != _tree.TREE_UNDEFINED]\n     else:\n         feature_names_ = [\"feature_{}\".format(i) for i in tree_.feature]\n \n@@ -954,4 +954,4 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n                                                             trunc_report)\n \n     print_tree_recurse(0, 1)\n-    return export_text.report\n+    return export_text.report\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex bcf8cf4..47abcf3 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -333,8 +333,8 @@ def export_text(decision_tree, feature_names=None, max_depth=10, spacing=3, deci\n     truncation_fmt = '{} {}\\n'\n     if max_depth < 0:\n         raise ValueError('max_depth bust be >= 0, given %d' % max_depth)\n-    if feature_names is not None and len(feature_names) != tree_.n_features:\n-        raise ValueError('feature_names must contain %d elements, got %d' % (tree_.n_features, len(feature_names)))\n+    if feature_names is not None and len(feature_names) != tree_.n_features_in_:\n+        raise ValueError('feature_names must contain %d elements, got %d' % (tree_.n_features_in_, len(feature_names)))\n     if spacing <= 0:\n         raise ValueError('spacing must be > 0, given %d' % spacing)\n     if decimals < 0:\n@@ -346,7 +346,7 @@ def export_text(decision_tree, feature_names=None, max_depth=10, spacing=3, deci\n     else:\n         value_fmt = '{}{} value: {}\\n'\n     if feature_names:\n-        feature_names_ = [feature_names[i] for i in tree_.feature]\n+        feature_names_ = [feature_names[i] for i in tree_.feature if i != _tree.TREE_UNDEFINED]\n     else:\n         feature_names_ = ['feature_{}'.format(i) for i in tree_.feature]\n     export_text.report = ''\n", "normalized_occurrence": 1}
