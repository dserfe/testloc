{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..b08f517 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -427,7 +427,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         ):\n             super().add_constraint(model, constraint)\n         else:\n-            self._remake_table(model)\n+            raise NotSupportedError(\n+                'Removing unique constraints with conditions, expressions, '\n+                'includes, or deferrable is not supported by SQLite.'\n+            )\n \n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (\n@@ -438,7 +441,10 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         ):\n             super().remove_constraint(model, constraint)\n         else:\n-            self._remake_table(model)\n+            raise NotSupportedError(\n+                'Removing unique constraints with conditions, expressions, '\n+                'includes, or deferrable is not supported by SQLite.'\n+            )\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..4290136 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -204,11 +204,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n             super().add_constraint(model, constraint)\n         else:\n-            self._remake_table(model)\n+            raise NotSupportedError('Removing unique constraints with conditions, expressions, includes, or deferrable is not supported by SQLite.')\n     def remove_constraint(self, model, constraint):\n         if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n             super().remove_constraint(model, constraint)\n         else:\n-            self._remake_table(model)\n+            raise NotSupportedError('Removing unique constraints with conditions, expressions, includes, or deferrable is not supported by SQLite.')\n     def _collate_sql(self, collation):\n         return 'COLLATE ' + collation\n\\ No newline at end of file\n", "normalized_occurrence": 1}
