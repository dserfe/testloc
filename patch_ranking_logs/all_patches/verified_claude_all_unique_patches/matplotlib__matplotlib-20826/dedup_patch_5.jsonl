{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..3f68ead 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1189,8 +1189,19 @@ class _AxesBase(martist.Artist):\n         else:\n             patch_visible = True\n \n+        # Save full axis state for shared axes\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        \n+        if self._sharex is not None:\n+            xaxis_ticklabels_visible = self.xaxis.get_ticklabels(minor=False, which='both')[0].get_visible()\n+            xticks_top = self.xaxis.get_ticks_position() in ['top', 'both']\n+            xticks_bottom = self.xaxis.get_ticks_position() in ['bottom', 'both']\n+        \n+        if self._sharey is not None:\n+            yaxis_ticklabels_visible = self.yaxis.get_ticklabels(minor=False, which='both')[0].get_visible()\n+            yticks_left = self.yaxis.get_ticks_position() in ['left', 'both']\n+            yticks_right = self.yaxis.get_ticks_position() in ['right', 'both']\n \n         self.xaxis.clear()\n         self.yaxis.clear()\n@@ -1305,9 +1316,17 @@ class _AxesBase(martist.Artist):\n         if self._sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Restore shared x-axis state\n+            for label in self.xaxis.get_ticklabels(minor=False, which='both'):\n+                label.set_visible(xaxis_ticklabels_visible)\n+            self.tick_params(top=xticks_top, bottom=xticks_bottom)\n         if self._sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Restore shared y-axis state\n+            for label in self.yaxis.get_ticklabels(minor=False, which='both'):\n+                label.set_visible(yaxis_ticklabels_visible)\n+            self.tick_params(left=yticks_left, right=yticks_right)\n \n         self.stale = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 33a6de3..e9d5547 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -503,6 +503,14 @@ class _AxesBase(martist.Artist):\n             patch_visible = True\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        if self._sharex is not None:\n+            xaxis_ticklabels_visible = self.xaxis.get_ticklabels(minor=False, which='both')[0].get_visible()\n+            xticks_top = self.xaxis.get_ticks_position() in ['top', 'both']\n+            xticks_bottom = self.xaxis.get_ticks_position() in ['bottom', 'both']\n+        if self._sharey is not None:\n+            yaxis_ticklabels_visible = self.yaxis.get_ticklabels(minor=False, which='both')[0].get_visible()\n+            yticks_left = self.yaxis.get_ticks_position() in ['left', 'both']\n+            yticks_right = self.yaxis.get_ticks_position() in ['right', 'both']\n         self.xaxis.clear()\n         self.yaxis.clear()\n         for name, spine in self.spines.items():\n@@ -578,9 +586,15 @@ class _AxesBase(martist.Artist):\n         if self._sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            for label in self.xaxis.get_ticklabels(minor=False, which='both'):\n+                label.set_visible(xaxis_ticklabels_visible)\n+            self.tick_params(top=xticks_top, bottom=xticks_bottom)\n         if self._sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            for label in self.yaxis.get_ticklabels(minor=False, which='both'):\n+                label.set_visible(yaxis_ticklabels_visible)\n+            self.tick_params(left=yticks_left, right=yticks_right)\n         self.stale = True\n     class ArtistList(MutableSequence):\n         def __init__(self, axes, prop_name, add_name, valid_types=None, invalid_types=None):\n", "normalized_occurrence": 1}
