{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 0194550..d205c26 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -4537,7 +4537,14 @@ class Dataset(\n                 idx = index_cls.stack(product_vars, new_dim)\n                 new_indexes[new_dim] = idx\n                 new_indexes.update({k: idx for k in product_vars})\n-                idx_vars = idx.create_variables(product_vars)\n+                # Create variables with original dtypes preserved\n+                idx_vars = {}\n+                for name, var in product_vars.items():\n+                    idx_var = idx.create_variables({name: var})[name]\n+                    if var.dtype != idx_var.dtype and np.issubdtype(var.dtype, np.integer):\n+                        idx_vars[name] = idx_var.astype(var.dtype)\n+                    else:\n+                        idx_vars[name] = idx_var\n                 # keep consistent multi-index coordinate order\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex b7eb26f..655e23f 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1449,7 +1449,13 @@ class Dataset(DataWithCoords, DatasetAggregations, DatasetArithmetic, Mapping[Ha\n                 idx = index_cls.stack(product_vars, new_dim)\n                 new_indexes[new_dim] = idx\n                 new_indexes.update({k: idx for k in product_vars})\n-                idx_vars = idx.create_variables(product_vars)\n+                idx_vars = {}\n+                for name, var in product_vars.items():\n+                    idx_var = idx.create_variables({name: var})[name]\n+                    if var.dtype != idx_var.dtype and np.issubdtype(var.dtype, np.integer):\n+                        idx_vars[name] = idx_var.astype(var.dtype)\n+                    else:\n+                        idx_vars[name] = idx_var\n                 for k in idx_vars:\n                     new_variables.pop(k, None)\n                 new_variables.update(idx_vars)\n", "normalized_occurrence": 1}
