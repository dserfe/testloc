{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..83dfbb7 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,15 +130,29 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the entire test module\n+        requires features not available in the current environment (e.g., Python\n+        version dependencies). Must be set to True for module-level skipping.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For regular test skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n+\n+    Example for module-level skipping::\n+\n+        import sys\n+        from pytest import skip\n+\n+        # Skip entire module for Python < 3.8\n+        if sys.version_info < (3, 8):\n+            skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # Module imports and test cases follow...\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..9d1254f 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,15 +88,29 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the entire test module\n+        requires features not available in the current environment (e.g., Python\n+        version dependencies). Must be set to True for module-level skipping.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n+        For regular test skipping, it is better to use the :ref:`pytest.mark.skipif ref`\n+        marker when possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n+\n+    Example for module-level skipping::\n+\n+        import sys\n+        from pytest import skip\n+\n+        # Skip entire module for Python < 3.8\n+        if sys.version_info < (3, 8):\n+            skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+        # Module imports and test cases follow...\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "normalized_occurrence": 1}
