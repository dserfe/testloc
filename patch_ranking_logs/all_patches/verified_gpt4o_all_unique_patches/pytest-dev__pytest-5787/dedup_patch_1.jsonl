{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..05259ae 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,7 +408,59 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple) and len(longrepr) == 3:\n+        return {\n+            \"reprtype\": \"tuple\",\n+            \"repr\": longrepr,\n+        }\n+    elif isinstance(longrepr, ExceptionInfo):\n+        return {\n+            \"reprtype\": \"ExceptionInfo\",\n+            \"repr\": longrepr._excinfo,\n+            \"chain\": serialize_longrepr_chain(longrepr.chain),\n+        }\n+    return longrepr\n+\n+def serialize_longrepr_chain(chain):\n+    if chain is None:\n+        return None\n+    return [serialize_longrepr(exc) for exc in chain]\n+\n+def deserialize_longrepr(longrepr):\n+    if isinstance(longrepr, dict) and \"reprtype\" in longrepr:\n+        if longrepr[\"reprtype\"] == \"tuple\":\n+            return tuple(longrepr[\"repr\"])\n+        elif longrepr[\"reprtype\"] == \"ExceptionInfo\":\n+            excinfo = ExceptionInfo.from_excinfo(longrepr[\"repr\"])\n+            excinfo.chain = deserialize_longrepr_chain(longrepr[\"chain\"])\n+            return excinfo\n+    return longrepr\n+\n+def deserialize_longrepr_chain(chain):\n+    if chain is None:\n+        return None\n+    return [deserialize_longrepr(exc) for exc in chain]\n+\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        data[\"longrepr\"] = serialize_longrepr(report.longrepr)\n+        return data\n+\n+def pytest_report_from_serializable(data):\n+    if \"_report_type\" in data:\n+        if data[\"_report_type\"] == \"TestReport\":\n+            report = TestReport._from_json(data)\n+        elif data[\"_report_type\"] == \"CollectReport\":\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(\n+                data[\"_report_type\"]\n+            )\n+        report.longrepr = deserialize_longrepr(data.get(\"longrepr\"))\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..541dae7 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,7 +205,45 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple) and len(longrepr) == 3:\n+        return {'reprtype': 'tuple', 'repr': longrepr}\n+    elif isinstance(longrepr, ExceptionInfo):\n+        return {'reprtype': 'ExceptionInfo', 'repr': longrepr._excinfo, 'chain': serialize_longrepr_chain(longrepr.chain)}\n+    return longrepr\n+def serialize_longrepr_chain(chain):\n+    if chain is None:\n+        return None\n+    return [serialize_longrepr(exc) for exc in chain]\n+def deserialize_longrepr(longrepr):\n+    if isinstance(longrepr, dict) and 'reprtype' in longrepr:\n+        if longrepr['reprtype'] == 'tuple':\n+            return tuple(longrepr['repr'])\n+        elif longrepr['reprtype'] == 'ExceptionInfo':\n+            excinfo = ExceptionInfo.from_excinfo(longrepr['repr'])\n+            excinfo.chain = deserialize_longrepr_chain(longrepr['chain'])\n+            return excinfo\n+    return longrepr\n+def deserialize_longrepr_chain(chain):\n+    if chain is None:\n+        return None\n+    return [deserialize_longrepr(exc) for exc in chain]\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        data['longrepr'] = serialize_longrepr(report.longrepr)\n+        return data\n+def pytest_report_from_serializable(data):\n+    if '_report_type' in data:\n+        if data['_report_type'] == 'TestReport':\n+            report = TestReport._from_json(data)\n+        elif data['_report_type'] == 'CollectReport':\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        report.longrepr = deserialize_longrepr(data.get('longrepr'))\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n", "normalized_occurrence": 1}
