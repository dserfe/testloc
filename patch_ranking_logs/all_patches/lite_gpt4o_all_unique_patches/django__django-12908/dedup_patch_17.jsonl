{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..3e8587b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -473,12 +473,19 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n+        distinct_fields_sql, distinct_params = self.get_distinct()\n+        if distinct_fields_sql:\n+            distinct_sql = 'DISTINCT ON ({}) '.format(', '.join(distinct_fields_sql))\n+        else:\n+            distinct_sql = ''\n+\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = ['{}{}'.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        params.extend(distinct_params)\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..0dd7ee5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,12 +265,18 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n+        distinct_fields_sql, distinct_params = self.get_distinct()\n+        if distinct_fields_sql:\n+            distinct_sql = 'DISTINCT ON ({}) '.format(', '.join(distinct_fields_sql))\n+        else:\n+            distinct_sql = ''\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        result = ['{}{}'.format(distinct_sql, ' {} '.format(combinator_sql).join(sql_parts))]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        params.extend(distinct_params)\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
