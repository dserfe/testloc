{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..2479e11 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2107,20 +2107,29 @@ def uniq(seq, result=None):\n     [[1], [2, 1]]\n     \"\"\"\n     try:\n+        initial_length = len(seq)\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if initial_length != len(seq):\n+                raise RuntimeError(\"dictionary changed size during iteration\")\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n+        if initial_length != len(seq):\n+            raise RuntimeError(\"dictionary changed size during iteration\")\n         if s not in result:\n             yield s\n             result.append(s)\n         if hasattr(seq, '__getitem__'):\n             for s in uniq(seq[i + 1:], result):\n+                if initial_length != len(seq):\n+                    raise RuntimeError(\"dictionary changed size during iteration\")\n                 yield s\n         else:\n             for s in uniq(seq, result):\n+                if initial_length != len(seq):\n+                    raise RuntimeError(\"dictionary changed size during iteration\")\n                 yield s\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..2558f45 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -731,20 +731,29 @@ def has_variety(seq):\n     return False\n def uniq(seq, result=None):\n     try:\n+        initial_length = len(seq)\n         seen = set()\n         result = result or []\n         for i, s in enumerate(seq):\n+            if initial_length != len(seq):\n+                raise RuntimeError('dictionary changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n+        if initial_length != len(seq):\n+            raise RuntimeError('dictionary changed size during iteration')\n         if s not in result:\n             yield s\n             result.append(s)\n         if hasattr(seq, '__getitem__'):\n             for s in uniq(seq[i + 1:], result):\n+                if initial_length != len(seq):\n+                    raise RuntimeError('dictionary changed size during iteration')\n                 yield s\n         else:\n             for s in uniq(seq, result):\n+                if initial_length != len(seq):\n+                    raise RuntimeError('dictionary changed size during iteration')\n                 yield s\n def generate_bell(n):\n     n = as_int(n)\n", "normalized_occurrence": 1}
