{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..0c97f49 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1015,12 +1015,19 @@ class MigrationAutodetector:\n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n+                dependencies = []\n+                # Add a dependency on AlterOrderWithRespectTo if _order is in the index\n+                if '_order' in index.fields:\n+                    dependencies.append(\n+                        (app_label, model_name, '_order', True)\n+                    )\n                 self.add_operation(\n                     app_label,\n                     operations.AddIndex(\n                         model_name=model_name,\n                         index=index,\n-                    )\n+                    ),\n+                    dependencies=dependencies,\n                 )\n \n     def generate_removed_indexes(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..c8e6c2f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -495,7 +495,10 @@ class MigrationAutodetector:\n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['added_indexes']:\n-                self.add_operation(app_label, operations.AddIndex(model_name=model_name, index=index))\n+                dependencies = []\n+                if '_order' in index.fields:\n+                    dependencies.append((app_label, model_name, '_order', True))\n+                self.add_operation(app_label, operations.AddIndex(model_name=model_name, index=index), dependencies=dependencies)\n     def generate_removed_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             for index in alt_indexes['removed_indexes']:\n", "normalized_occurrence": 1}
