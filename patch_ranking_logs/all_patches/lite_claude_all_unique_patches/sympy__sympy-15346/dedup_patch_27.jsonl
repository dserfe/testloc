{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..c453ca8 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -428,6 +428,10 @@ _trigs = (TrigonometricFunction, HyperbolicFunction)\n def trigsimp(expr, **opts):\n     \"\"\"\n     reduces expression by using known trig identities\n+    \n+    For expressions containing trigonometric functions with rational number \n+    arguments, this will attempt to simplify using standard trigonometric \n+    identities regardless of whether arguments are symbolic or numeric.\n \n     Notes\n     =====\n@@ -503,10 +507,10 @@ def trigsimp(expr, **opts):\n \n     trigsimpfunc = {\n         'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n+        'matching': (lambda x: futrig(x, rational=True)),\n         'groebner': (lambda x: groebnersimp(x, **opts)),\n         'combined': (lambda x: futrig(groebnersimp(x,\n-                               polynomial=True, hints=[2, tan]))),\n+                               polynomial=True, hints=[2, tan]), rational=True)),\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..9f13ef3 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -170,7 +170,7 @@ def trigsimp(expr, **opts):\n         if not isinstance(new, Expr):\n             return new\n         return trigsimp_groebner(new, **opts)\n-    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n+    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x, rational=True), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan]), rational=True), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n     return trigsimpfunc(expr)\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n", "normalized_occurrence": 1}
