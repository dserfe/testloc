{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..04a02b7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -925,7 +925,10 @@ class Model(metaclass=ModelBase):\n                 # database to raise an IntegrityError if applicable. If\n                 # constraints aren't supported by the database, there's the\n                 # unavoidable risk of data corruption.\n-                if obj.pk is None:\n+                # Check for both None and empty string for non-auto primary keys\n+                if obj.pk is None or (\n+                    not field.remote_field.model._meta.pk.auto_created and not obj.pk\n+                ):\n                     # Remove the object from a related instance cache.\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n@@ -933,7 +936,9 @@ class Model(metaclass=ModelBase):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) is None or (\n+                    not field.remote_field.model._meta.pk.auto_created and not getattr(self, field.attname)\n+                ):\n                     # Use pk from related object if it has been saved after\n                     # an assignment.\n                     setattr(self, field.attname, obj.pk)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..d773a34 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -489,11 +489,11 @@ class Model(metaclass=ModelBase):\n                 obj = getattr(self, field.name, None)\n                 if not obj:\n                     continue\n-                if obj.pk is None:\n+                if obj.pk is None or (not field.remote_field.model._meta.pk.auto_created and (not obj.pk)):\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) is None or (not field.remote_field.model._meta.pk.auto_created and (not getattr(self, field.attname))):\n                     setattr(self, field.attname, obj.pk)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n", "normalized_occurrence": 1}
