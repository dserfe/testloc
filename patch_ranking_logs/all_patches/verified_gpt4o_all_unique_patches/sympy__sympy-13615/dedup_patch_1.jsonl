{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..31d6d4e 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -204,8 +204,10 @@ class Set(Basic):\n             return Union(p for p in product_sets if p != other)\n \n         elif isinstance(other, Interval):\n-            if isinstance(self, Interval) or isinstance(self, FiniteSet):\n+            if isinstance(self, Interval):\n                 return Intersection(other, self.complement(S.Reals))\n+            elif isinstance(self, FiniteSet):\n+                return FiniteSet(*[el for el in self if el not in other])\n \n         elif isinstance(other, Union):\n             return Union(o - self for o in other.args)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..a94024a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -61,8 +61,10 @@ class Set(Basic):\n             product_sets = (ProductSet(*set) for set in switch_sets)\n             return Union((p for p in product_sets if p != other))\n         elif isinstance(other, Interval):\n-            if isinstance(self, Interval) or isinstance(self, FiniteSet):\n+            if isinstance(self, Interval):\n                 return Intersection(other, self.complement(S.Reals))\n+            elif isinstance(self, FiniteSet):\n+                return FiniteSet(*[el for el in self if el not in other])\n         elif isinstance(other, Union):\n             return Union((o - self for o in other.args))\n         elif isinstance(other, Complement):\n", "normalized_occurrence": 1}
