{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..30488a7 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -199,6 +199,10 @@ class Xfail:\n \n def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n     \"\"\"Evaluate xfail marks on item, returning Xfail if triggered.\"\"\"\n+    # Reset xfailed_key to ensure dynamic markers are considered\n+    if hasattr(item, \"_store\"):\n+        item._store.setdefault(xfailed_key, None)\n+        \n     for mark in item.iter_markers(name=\"xfail\"):\n         run = mark.kwargs.get(\"run\", True)\n         strict = mark.kwargs.get(\"strict\", item.config.getini(\"xfail_strict\"))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..9cb1acb 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -97,6 +97,8 @@ class Xfail:\n     strict = attr.ib(type=bool)\n     raises = attr.ib(type=Optional[Tuple['Type[BaseException]', ...]])\n def evaluate_xfail_marks(item: Item) -> Optional[Xfail]:\n+    if hasattr(item, '_store'):\n+        item._store.setdefault(xfailed_key, None)\n     for mark in item.iter_markers(name='xfail'):\n         run = mark.kwargs.get('run', True)\n         strict = mark.kwargs.get('strict', item.config.getini('xfail_strict'))\n", "normalized_occurrence": 1}
