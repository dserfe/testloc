{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex da040b3..7f1c2fe 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -121,6 +121,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Constant):  # type: ignore\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n+            elif hasattr(node.value, '__module__') and hasattr(node.value, 'name') and isinstance(node.value, Enum):\n+                return [nodes.Text(f\"{node.value.__class__.__name__}.{node.value.name}\")]\n             else:\n                 return [nodes.Text(node.value)]\n         elif isinstance(node, ast.Expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 5b8a917..cfebf5e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -70,6 +70,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n         elif isinstance(node, ast.Constant):\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', '...')]\n+            elif hasattr(node.value, '__module__') and hasattr(node.value, 'name') and isinstance(node.value, Enum):\n+                return [nodes.Text(f'{node.value.__class__.__name__}.{node.value.name}')]\n             else:\n                 return [nodes.Text(node.value)]\n         elif isinstance(node, ast.Expr):\n", "normalized_occurrence": 1}
