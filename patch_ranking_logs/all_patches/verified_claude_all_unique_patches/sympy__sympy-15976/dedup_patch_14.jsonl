{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..7e27415 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -777,28 +777,28 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n \n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n+        if len(supers) == 0 and len(subs) == 0:\n+            x.appendChild(self.dom.createTextNode(name))\n+        else:\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n+            if len(supers) == 0:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n                 msub.appendChild(join(subs))\n                 x.appendChild(msub)\n-        else:\n-            if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n             else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n+                if len(subs) == 0:\n+                    msup = self.dom.createElement('msup')\n+                    msup.appendChild(mname)\n+                    msup.appendChild(join(supers))\n+                    x.appendChild(msup)\n+                else:\n+                    msubsup = self.dom.createElement('msubsup')\n+                    msubsup.appendChild(mname)\n+                    msubsup.appendChild(join(subs))\n+                    msubsup.appendChild(join(supers))\n+                    x.appendChild(msubsup)\n         return x\n \n     def _print_MatrixSymbol(self, sym):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..97a5ec5 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -544,27 +544,27 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n+        if len(supers) == 0 and len(subs) == 0:\n+            x.appendChild(self.dom.createTextNode(name))\n+        else:\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n+            if len(supers) == 0:\n                 msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n                 msub.appendChild(join(subs))\n                 x.appendChild(msub)\n-        elif len(subs) == 0:\n-            msup = self.dom.createElement('msup')\n-            msup.appendChild(mname)\n-            msup.appendChild(join(supers))\n-            x.appendChild(msup)\n-        else:\n-            msubsup = self.dom.createElement('msubsup')\n-            msubsup.appendChild(mname)\n-            msubsup.appendChild(join(subs))\n-            msubsup.appendChild(join(supers))\n-            x.appendChild(msubsup)\n+            elif len(subs) == 0:\n+                msup = self.dom.createElement('msup')\n+                msup.appendChild(mname)\n+                msup.appendChild(join(supers))\n+                x.appendChild(msup)\n+            else:\n+                msubsup = self.dom.createElement('msubsup')\n+                msubsup.appendChild(mname)\n+                msubsup.appendChild(join(subs))\n+                msubsup.appendChild(join(supers))\n+                x.appendChild(msubsup)\n         return x\n     def _print_MatrixSymbol(self, sym):\n         return self._print_Symbol(sym, style=self._settings['mat_symbol_style'])\n", "normalized_occurrence": 1}
