{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..604621c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,19 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Special case for django.db.models\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            name = \"models.%s\" % path[len(\"django.db.models.\"):]\n+            return name, imports\n+        \n+        # Find the module path (everything up to the first class)\n+        parts = path.split('.')\n+        module = '.'.join(parts[:2])  # Assuming standard format like 'app.models'\n+        class_path = '.'.join(parts[2:])  # Keep the full class path including inner classes\n+        \n+        imports = {\"import %s\" % module}\n+        name = \"%s.%s\" % (module, class_path)\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..1369f99 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,15 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n+            name = 'models.%s' % path[len('django.db.models.'):]\n+            return (name, imports)\n+        parts = path.split('.')\n+        module = '.'.join(parts[:2])\n+        class_path = '.'.join(parts[2:])\n+        imports = {'import %s' % module}\n+        name = '%s.%s' % (module, class_path)\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
