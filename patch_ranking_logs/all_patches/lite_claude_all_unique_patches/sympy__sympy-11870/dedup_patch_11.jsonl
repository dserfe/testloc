{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..78959d6 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -439,14 +439,24 @@ class exp(ExpBase):\n         return exp(arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n+        if I in arg.free_symbols:\n+            # Handle exp(I*x) = cos(x) + I*sin(x)\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I*sin(x)\n+        return None\n \n     def _eval_rewrite_as_cos(self, arg):\n-        from sympy import cos\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return cos(I*arg) + I*cos(I*arg + S.Pi/2)\n+        if I in arg.free_symbols:\n+            # Handle exp(I*x) = cos(x) + I*sin(x)\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I*sin(x)\n+        return None\n \n     def _eval_rewrite_as_tanh(self, arg):\n         from sympy import tanh\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..8f49a15 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -271,13 +271,21 @@ class exp(ExpBase):\n             return S.One\n         return exp(arg)\n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n+        if I in arg.free_symbols:\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I * sin(x)\n+        return None\n     def _eval_rewrite_as_cos(self, arg):\n-        from sympy import cos\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n-        return cos(I * arg) + I * cos(I * arg + S.Pi / 2)\n+        if I in arg.free_symbols:\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I * sin(x)\n+        return None\n     def _eval_rewrite_as_tanh(self, arg):\n         from sympy import tanh\n         return (1 + tanh(arg / 2)) / (1 - tanh(arg / 2))\n", "normalized_occurrence": 1}
