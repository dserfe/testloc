{"model_name_or_path": "agentless", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..3a4e400 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1588,7 +1588,10 @@ class QuerySet:\n         Return a query set with added aliases for extra data or aggregations.\n         \"\"\"\n         self._not_support_combined_queries(\"alias\")\n-        return self._annotate(args, kwargs, select=False)\n+        obj = self._annotate(args, kwargs, select=False)\n+        if self.query.alias_cols:\n+            self.query.clear_select_fields()\n+        return obj\n \n     def _annotate(self, args, kwargs, select=True):\n         self._validate_values_are_expressions(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..09cc727 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -848,7 +848,10 @@ class QuerySet:\n         return self._annotate(args, kwargs, select=True)\n     def alias(self, *args, **kwargs):\n         self._not_support_combined_queries('alias')\n-        return self._annotate(args, kwargs, select=False)\n+        obj = self._annotate(args, kwargs, select=False)\n+        if self.query.alias_cols:\n+            self.query.clear_select_fields()\n+        return obj\n     def _annotate(self, args, kwargs, select=True):\n         self._validate_values_are_expressions(args + tuple(kwargs.values()), method_name='annotate')\n         annotations = {}\n", "normalized_occurrence": 1}
