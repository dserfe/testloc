{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 1f2a00b..2caf5e9 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -244,6 +244,11 @@ class sinh(HyperbolicFunction):\n         arg = self.args[0]\n         if arg.is_real:\n             return True\n+            \n+        # Don't evaluate Piecewise arguments to avoid polynomial errors\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n \n         # if `im` is of the form n*pi\n         # else, check if it is a number\n@@ -432,6 +437,11 @@ class cosh(HyperbolicFunction):\n         # `cosh(x)` is real for real OR purely imaginary `x`\n         if arg.is_real or arg.is_imaginary:\n             return True\n+            \n+        # Don't evaluate Piecewise arguments to avoid polynomial errors\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n \n         # cosh(a+ib) = cos(b)*cosh(a) + i*sin(b)*sinh(a)\n         # the imaginary part can be an expression like n*pi\n@@ -654,6 +664,11 @@ class tanh(HyperbolicFunction):\n         arg = self.args[0]\n         if arg.is_real:\n             return True\n+            \n+        # Don't evaluate Piecewise arguments to avoid polynomial errors\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n \n         re, im = arg.as_real_imag()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 1fd73fe..3c999ac 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -143,6 +143,9 @@ class sinh(HyperbolicFunction):\n         arg = self.args[0]\n         if arg.is_real:\n             return True\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n         re, im = arg.as_real_imag()\n         return (im % pi).is_zero\n     def _eval_is_extended_real(self):\n@@ -274,6 +277,9 @@ class cosh(HyperbolicFunction):\n         arg = self.args[0]\n         if arg.is_real or arg.is_imaginary:\n             return True\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n         re, im = arg.as_real_imag()\n         return (im % pi).is_zero\n     def _eval_is_positive(self):\n@@ -405,6 +411,9 @@ class tanh(HyperbolicFunction):\n         arg = self.args[0]\n         if arg.is_real:\n             return True\n+        from sympy import Piecewise\n+        if arg.has(Piecewise):\n+            return None\n         re, im = arg.as_real_imag()\n         if re == 0 and im % pi == pi / 2:\n             return None\n", "normalized_occurrence": 3}
