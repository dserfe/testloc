{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..4ebd004 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1082,10 +1082,8 @@ class NumpyDocstring(GoogleDocstring):\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n \n-        if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n-        else:\n-            return func(name)\n+        names = [n.strip() for n in name.split(\",\")]\n+        return \", \".join(func(n) for n in names)\n \n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n@@ -1101,7 +1099,11 @@ class NumpyDocstring(GoogleDocstring):\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n-\n+        \n+        # Check for 'optional' keyword in the type and handle it\n+        if \"optional\" in _type:\n+            _type = _type.replace(\"optional\", \"\").strip()\n+            _type += \", optional\"\n         if prefer_type and not _type:\n             _type, _name = _name, _type\n         indent = self._get_indent(line) + 1\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..4e7b4dd 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -654,10 +654,8 @@ class NumpyDocstring(GoogleDocstring):\n         return ':'.join([filepath, 'docstring of %s' % name])\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n-        if ', ' in name:\n-            return ', '.join((func(param) for param in name.split(', ')))\n-        else:\n-            return func(name)\n+        names = [n.strip() for n in name.split(',')]\n+        return ', '.join((func(n) for n in names))\n     def _consume_field(self, parse_type: bool=True, prefer_type: bool=False) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n@@ -667,6 +665,9 @@ class NumpyDocstring(GoogleDocstring):\n         _name, _type = (_name.strip(), _type.strip())\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        if 'optional' in _type:\n+            _type = _type.replace('optional', '').strip()\n+            _type += ', optional'\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n", "normalized_occurrence": 1}
