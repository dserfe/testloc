{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..2ddc41e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -955,9 +955,15 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         # Fix locations (line numbers/column offsets).\n-        for stmt in self.statements:\n-            for node in traverse_node(stmt):\n+        # Only copy location for the first statement (the if/assertion check)\n+        # to avoid including subsequent code in error messages\n+        if self.statements:\n+            for node in traverse_node(self.statements[0]):\n                 ast.copy_location(node, assert_)\n+            # For remaining statements, use the original assertion line number\n+            # but don't include them in the error message context\n+            for stmt in self.statements[1:]:\n+                ast.copy_location(stmt, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..66afe71 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -512,9 +512,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n-        for stmt in self.statements:\n-            for node in traverse_node(stmt):\n+        if self.statements:\n+            for node in traverse_node(self.statements[0]):\n                 ast.copy_location(node, assert_)\n+            for stmt in self.statements[1:]:\n+                ast.copy_location(stmt, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
