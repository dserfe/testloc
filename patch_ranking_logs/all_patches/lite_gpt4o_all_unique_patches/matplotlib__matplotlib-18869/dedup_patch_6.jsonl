{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..2311be7 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,7 +130,28 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+import setuptools_scm\n+from distutils.version import LooseVersion\n+\n+# Retrieve version information\n+root = Path(__file__).resolve().parents[2]\n+if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n+    __version__ = setuptools_scm.get_version(\n+        root=root,\n+        version_scheme=\"post-release\",\n+        local_scheme=\"node-and-date\",\n+        fallback_version=_version.version,\n+    )\n+else:  # Get the version from the _version.py setuptools_scm file.\n+    __version__ = _version.version\n+\n+# Create a version_info tuple for easy comparison\n+version_parts = __version__.split('.')\n+version_info = tuple(map(int, version_parts[:3]))\n+\n def __getattr__(name):\n+    if name == \"version_info\":\n+        return version_info\n     if name == \"__version__\":\n         import setuptools_scm\n         global __version__  # cache it.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 4b4b135..bf5e9fc 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -25,7 +25,18 @@ from matplotlib.cbook import mplDeprecation\n from matplotlib.rcsetup import validate_backend, cycler\n _log = logging.getLogger(__name__)\n __bibtex__ = '@Article{Hunter:2007,\\n  Author    = {Hunter, J. D.},\\n  Title     = {Matplotlib: A 2D graphics environment},\\n  Journal   = {Computing in Science \\\\& Engineering},\\n  Volume    = {9},\\n  Number    = {3},\\n  Pages     = {90--95},\\n  abstract  = {Matplotlib is a 2D graphics package used for Python\\n  for application development, interactive scripting, and\\n  publication-quality image generation across user\\n  interfaces and operating systems.},\\n  publisher = {IEEE COMPUTER SOC},\\n  year      = 2007\\n}'\n+import setuptools_scm\n+from distutils.version import LooseVersion\n+root = Path(__file__).resolve().parents[2]\n+if (root / '.git').exists() and (not (root / '.git/shallow').exists()):\n+    __version__ = setuptools_scm.get_version(root=root, version_scheme='post-release', local_scheme='node-and-date', fallback_version=_version.version)\n+else:\n+    __version__ = _version.version\n+version_parts = __version__.split('.')\n+version_info = tuple(map(int, version_parts[:3]))\n def __getattr__(name):\n+    if name == 'version_info':\n+        return version_info\n     if name == '__version__':\n         import setuptools_scm\n         global __version__\n", "normalized_occurrence": 1}
