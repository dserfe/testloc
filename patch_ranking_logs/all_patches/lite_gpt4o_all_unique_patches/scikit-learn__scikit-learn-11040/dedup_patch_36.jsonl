{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..e7a485d 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,9 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f\"Expected n_neighbors to be a positive integer. Got {n_neighbors}.\")\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -329,6 +332,8 @@ class KNeighborsMixin(object):\n             n_neighbors = self.n_neighbors\n \n         if X is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f\"Expected n_neighbors to be a positive integer. Got {n_neighbors}.\")\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n         else:\n@@ -469,6 +474,8 @@ class KNeighborsMixin(object):\n \n         # kneighbors does the None handling.\n         if X is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f\"Expected n_neighbors to be a positive integer. Got {n_neighbors}.\")\n             X = check_array(X, accept_sparse='csr')\n             n_samples1 = X.shape[0]\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..23a2792 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,6 +47,9 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f'Expected n_neighbors to be a positive integer. Got {n_neighbors}.')\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -163,6 +166,8 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n         if X is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f'Expected n_neighbors to be a positive integer. Got {n_neighbors}.')\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n         else:\n@@ -220,6 +225,8 @@ class KNeighborsMixin(object):\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n         if X is not None:\n+            if not isinstance(n_neighbors, int) or n_neighbors <= 0:\n+                raise ValueError(f'Expected n_neighbors to be a positive integer. Got {n_neighbors}.')\n             X = check_array(X, accept_sparse='csr')\n             n_samples1 = X.shape[0]\n         else:\n", "normalized_occurrence": 1}
