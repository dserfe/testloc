{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..c07b756 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -191,19 +191,18 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n+            model_class = ct.model_class()\n+            pks = [model_class._meta.pk.to_python(fkey) for fkey in fkeys]\n+            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=pks))\n \n         # For doing the join in Python, we have to match both the FK val and the\n         # content type, so we use a callable that returns a (fk, class) pair.\n         def gfk_key(obj):\n-            ct_id = getattr(obj, ct_attname)\n-            if ct_id is None:\n-                return None\n-            else:\n-                model = self.get_content_type(id=ct_id,\n-                                              using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+            model_class = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n+            fk_val = getattr(obj, self.fk_field)\n+            if fk_val is not None:\n+                fk_val = model_class._meta.pk.to_python(fk_val)\n+            return (fk_val, model_class)\n \n         return (\n             ret_val,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..93dfaed 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -93,14 +93,15 @@ class GenericForeignKey(FieldCacheMixin):\n         for ct_id, fkeys in fk_dict.items():\n             instance = instance_dict[ct_id]\n             ct = self.get_content_type(id=ct_id, using=instance._state.db)\n-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))\n+            model_class = ct.model_class()\n+            pks = [model_class._meta.pk.to_python(fkey) for fkey in fkeys]\n+            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=pks))\n         def gfk_key(obj):\n-            ct_id = getattr(obj, ct_attname)\n-            if ct_id is None:\n-                return None\n-            else:\n-                model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n+            model_class = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n+            fk_val = getattr(obj, self.fk_field)\n+            if fk_val is not None:\n+                fk_val = model_class._meta.pk.to_python(fk_val)\n+            return (fk_val, model_class)\n         return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
