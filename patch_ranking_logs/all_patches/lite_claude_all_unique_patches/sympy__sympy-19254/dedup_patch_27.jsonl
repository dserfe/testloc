{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..96f3b27 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -124,21 +124,62 @@ def dmp_trial_division(f, factors, u, K):\n \n \n def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n-    n = dup_degree(f)\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`.\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    References\n+    ==========\n+    .. [1] Knuth D.E., The Art of Computer Programming: Seminumerical Algorithms,\n+           Vol. 2, 3rd edition, Addison-Wesley, 1998, pp. 452-454.\n+    .. [2] Cohen, H., A Course in Computational Algebraic Number Theory,\n+           Graduate Texts in Mathematics, Vol. 138, Springer, 1993, pp. 137-138.\n+    \"\"\"\n+    n = dup_degree(f)\n+    lc = abs(dup_LC(f, K))\n+    \n+    # Get all coefficients except the leading one\n+    coeffs = [abs(c) for c in f[:-1]]\n+    if not coeffs:\n+        return lc  # Handle constant polynomials\n+        \n+    # Calculate the sum of squares of coefficients (excluding leading coefficient)\n+    coeff_sum = sum(c*c for c in coeffs)\n+    \n+    # Knuth-Cohen bound\n+    return K(2 * K.sqrt(coeff_sum) + abs(lc))\n \n \n def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n-    n = sum(dmp_degree_list(f, u))\n+    \"\"\"Knuth-Cohen bound adapted for multivariate polynomials in `K[X]`.\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    This is an adaptation of the Knuth-Cohen bound for the multivariate case.\n+    The bound is computed by treating the polynomial as univariate in its\n+    main variable and applying the bound to the coefficients recursively.\n+\n+    References\n+    ==========\n+    .. [1] Knuth D.E., The Art of Computer Programming: Seminumerical Algorithms,\n+           Vol. 2, 3rd edition, Addison-Wesley, 1998, pp. 452-454.\n+    .. [2] Cohen, H., A Course in Computational Algebraic Number Theory,\n+           Graduate Texts in Mathematics, Vol. 138, Springer, 1993, pp. 137-138.\n+    \"\"\"\n+    if not u:  # univariate case\n+        return dup_zz_mignotte_bound(f, K)\n+        \n+    # Get the leading coefficient\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    \n+    # Convert to the coefficient domain\n+    coeffs = dmp_to_dict(f, u, K)\n+    \n+    # Calculate the sum of squares of all coefficients except the leading one\n+    coeff_sum = K(0)\n+    lm = dmp_ground_LC(f, u, K)\n+    for coeff in coeffs.values():\n+        if coeff != lm:  # Skip the leading coefficient\n+            coeff_sum += coeff * coeff\n+            \n+    # Apply the Knuth-Cohen bound\n+    return K(2 * K.sqrt(coeff_sum) + abs(lc))\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..7973f0d 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -36,15 +36,24 @@ def dmp_trial_division(f, factors, u, K):\n         result.append((factor, k))\n     return _sort_factors(result)\n def dup_zz_mignotte_bound(f, K):\n-    a = dup_max_norm(f, K)\n-    b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    lc = abs(dup_LC(f, K))\n+    coeffs = [abs(c) for c in f[:-1]]\n+    if not coeffs:\n+        return lc\n+    coeff_sum = sum((c * c for c in coeffs))\n+    return K(2 * K.sqrt(coeff_sum) + abs(lc))\n def dmp_zz_mignotte_bound(f, u, K):\n-    a = dmp_max_norm(f, u, K)\n-    b = abs(dmp_ground_LC(f, u, K))\n-    n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    if not u:\n+        return dup_zz_mignotte_bound(f, K)\n+    lc = abs(dmp_ground_LC(f, u, K))\n+    coeffs = dmp_to_dict(f, u, K)\n+    coeff_sum = K(0)\n+    lm = dmp_ground_LC(f, u, K)\n+    for coeff in coeffs.values():\n+        if coeff != lm:\n+            coeff_sum += coeff * coeff\n+    return K(2 * K.sqrt(coeff_sum) + abs(lc))\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
