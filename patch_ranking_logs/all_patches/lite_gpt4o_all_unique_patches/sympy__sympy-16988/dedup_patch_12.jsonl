{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..67ab169 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1269,7 +1269,13 @@ class Intersection(Set, LatticeOp):\n \n         args = list(ordered(args, Set._infimum_key))\n \n-        obj = Basic.__new__(cls, *args)\n+        args = list(uniq(args))  # Remove duplicates\n+        if not args:\n+            return S.EmptySet\n+        if len(args) == 1:\n+            return args[0]\n+\n+        obj = super(Intersection, cls).__new__(cls, *args)\n         obj._argset = frozenset(args)\n         return obj\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..34d9c2f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -478,7 +478,12 @@ class Intersection(Set, LatticeOp):\n             args = list(cls._new_args_filter(args))\n             return simplify_intersection(args)\n         args = list(ordered(args, Set._infimum_key))\n-        obj = Basic.__new__(cls, *args)\n+        args = list(uniq(args))\n+        if not args:\n+            return S.EmptySet\n+        if len(args) == 1:\n+            return args[0]\n+        obj = super(Intersection, cls).__new__(cls, *args)\n         obj._argset = frozenset(args)\n         return obj\n     @property\n", "normalized_occurrence": 1}
