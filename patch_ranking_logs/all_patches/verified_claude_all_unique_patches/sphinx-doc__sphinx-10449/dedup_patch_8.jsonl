{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d42883b..53c0f2b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1552,6 +1552,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n+        # For constructors, strip the return annotation\n+        if self._signature_method_name == '__init__':\n+            sig = sig.replace(return_annotation=Parameter.empty)\n+\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2c8c52a..7a9d041 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -869,6 +869,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             return None\n         if sig is None:\n             return None\n+        if self._signature_method_name == '__init__':\n+            sig = sig.replace(return_annotation=Parameter.empty)\n         return stringify_signature(sig, show_return_annotation=False, **kwargs)\n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n", "normalized_occurrence": 1}
