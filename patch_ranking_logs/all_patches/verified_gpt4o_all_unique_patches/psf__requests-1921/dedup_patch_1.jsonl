{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0d0af12..739265a 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -391,7 +391,9 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP headers.\"\"\"\n \n         if headers:\n-            self.headers = CaseInsensitiveDict((to_native_string(name), value) for name, value in headers.items())\n+            self.headers = CaseInsensitiveDict(\n+                (to_native_string(name), value) for name, value in headers.items() if value is not None\n+            )\n         else:\n             self.headers = CaseInsensitiveDict()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 29581be..d3c5369 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -204,7 +204,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         self.url = url\n     def prepare_headers(self, headers):\n         if headers:\n-            self.headers = CaseInsensitiveDict(((to_native_string(name), value) for name, value in headers.items()))\n+            self.headers = CaseInsensitiveDict(((to_native_string(name), value) for name, value in headers.items() if value is not None))\n         else:\n             self.headers = CaseInsensitiveDict()\n     def prepare_body(self, data, files):\n", "normalized_occurrence": 13}
