{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..ab5b8ee 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -6,6 +7,8 @@ from sympy.logic.boolalg import Boolean\n from sympy.assumptions import ask, Q  # type: ignore\n \n \n+from sympy.functions.elementary.complexes import arg\n+\n def refine(expr, assumptions=True):\n     \"\"\"\n     Simplify an expression using assumptions.\n@@ -54,7 +57,11 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n-    name = expr.__class__.__name__\n+    if isinstance(expr, arg):\n+        if ask(Q.positive(expr.args[0]), assumptions):\n+            return S.Zero\n+        if ask(Q.negative(expr.args[0]), assumptions):\n+            return S.Pi\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n         return expr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..55d4109 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -2,6 +2,7 @@ from typing import Dict, Callable\n from sympy.core import S, Add, Expr, Basic, Mul\n from sympy.logic.boolalg import Boolean\n from sympy.assumptions import ask, Q\n+from sympy.functions.elementary.complexes import arg\n def refine(expr, assumptions=True):\n     if not isinstance(expr, Basic):\n         return expr\n@@ -12,7 +13,11 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n-    name = expr.__class__.__name__\n+    if isinstance(expr, arg):\n+        if ask(Q.positive(expr.args[0]), assumptions):\n+            return S.Zero\n+        if ask(Q.negative(expr.args[0]), assumptions):\n+            return S.Pi\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n         return expr\n", "normalized_occurrence": 1}
