{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..ab33fc8 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -78,6 +78,7 @@ def unique_labels(*ys):\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n \n+    ys = [np.asarray(y) if hasattr(y, \"dtype\") and pd.api.types.is_extension_array_dtype(y.dtype) else y for y in ys]\n     ys_types = set(type_of_target(x) for x in ys)\n     if ys_types == {\"binary\", \"multiclass\"}:\n         ys_types = {\"multiclass\"}\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..9f5d9c1 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -20,6 +20,7 @@ def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError('No argument has been passed.')\n+    ys = [np.asarray(y) if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype) else y for y in ys]\n     ys_types = set((type_of_target(x) for x in ys))\n     if ys_types == {'binary', 'multiclass'}:\n         ys_types = {'multiclass'}\n", "normalized_occurrence": 1}
