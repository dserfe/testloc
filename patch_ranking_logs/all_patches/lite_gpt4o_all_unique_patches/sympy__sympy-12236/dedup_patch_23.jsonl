{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..876225e 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -77,45 +77,16 @@ def apart(f, x=None, full=False, **options):\n     else:\n         P, Q = f.as_numer_denom()\n \n+    if x is not None:\n+        f = f.apart(x)\n+        P, Q = f.as_numer_denom()\n+\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n-        if f.is_commutative:\n-            raise PolynomialError(msg)\n-        # non-commutative\n-        if f.is_Mul:\n-            c, nc = f.args_cnc(split_1=False)\n-            nc = f.func(*nc)\n-            if c:\n-                c = apart(f.func._from_args(c), x=x, full=full, **_options)\n-                return c*nc\n-            else:\n-                return nc\n-        elif f.is_Add:\n-            c = []\n-            nc = []\n-            for i in f.args:\n-                if i.is_commutative:\n-                    c.append(i)\n-                else:\n-                    try:\n-                        nc.append(apart(i, x=x, full=full, **_options))\n-                    except NotImplementedError:\n-                        nc.append(i)\n-            return apart(f.func(*c), x=x, full=full, **_options) + f.func(*nc)\n-        else:\n-            reps = []\n-            pot = preorder_traversal(f)\n-            next(pot)\n-            for e in pot:\n-                try:\n-                    reps.append((e, apart(e, x=x, full=full, **_options)))\n-                    pot.skip()  # this was handled successfully\n-                except NotImplementedError:\n-                    pass\n-            return f.xreplace(dict(reps))\n+        raise PolynomialError(msg)\n \n     if P.is_multivariate:\n         fc = f.cancel()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..92170d4 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -16,44 +16,15 @@ def apart(f, x=None, full=False, **options):\n         return f\n     else:\n         P, Q = f.as_numer_denom()\n+    if x is not None:\n+        f = f.apart(x)\n+        P, Q = f.as_numer_denom()\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n-        if f.is_commutative:\n-            raise PolynomialError(msg)\n-        if f.is_Mul:\n-            c, nc = f.args_cnc(split_1=False)\n-            nc = f.func(*nc)\n-            if c:\n-                c = apart(f.func._from_args(c), x=x, full=full, **_options)\n-                return c * nc\n-            else:\n-                return nc\n-        elif f.is_Add:\n-            c = []\n-            nc = []\n-            for i in f.args:\n-                if i.is_commutative:\n-                    c.append(i)\n-                else:\n-                    try:\n-                        nc.append(apart(i, x=x, full=full, **_options))\n-                    except NotImplementedError:\n-                        nc.append(i)\n-            return apart(f.func(*c), x=x, full=full, **_options) + f.func(*nc)\n-        else:\n-            reps = []\n-            pot = preorder_traversal(f)\n-            next(pot)\n-            for e in pot:\n-                try:\n-                    reps.append((e, apart(e, x=x, full=full, **_options)))\n-                    pot.skip()\n-                except NotImplementedError:\n-                    pass\n-            return f.xreplace(dict(reps))\n+        raise PolynomialError(msg)\n     if P.is_multivariate:\n         fc = f.cancel()\n         if fc != f:\n", "normalized_occurrence": 1}
