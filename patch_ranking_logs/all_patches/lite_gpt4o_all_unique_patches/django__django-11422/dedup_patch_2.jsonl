{"model_name_or_path": "agentless", "instance_id": "django__django-11422", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 2510c51..0c9158e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -97,6 +97,10 @@ def ensure_echo_on():\n \n \n def iter_all_python_module_files():\n+    # Ensure manage.py is included in the watch list\n+    manage_py_path = pathlib.Path(__file__).parent.parent / 'manage.py'\n+    if manage_py_path.exists():\n+        _error_files.add(str(manage_py_path.resolve().absolute()))\n     # This is a hot path during reloading. Create a stable sorted list of\n     # modules based on the module name and pass it to iter_modules_and_files().\n     # This ensures cached results are returned in the usual case that modules\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex bb4b189..186cb00 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -68,6 +68,9 @@ def ensure_echo_on():\n         if old_handler is not None:\n             signal.signal(signal.SIGTTOU, old_handler)\n def iter_all_python_module_files():\n+    manage_py_path = pathlib.Path(__file__).parent.parent / 'manage.py'\n+    if manage_py_path.exists():\n+        _error_files.add(str(manage_py_path.resolve().absolute()))\n     keys = sorted(sys.modules)\n     modules = tuple((m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes)))\n     return iter_modules_and_files(modules, frozenset(_error_files))\n", "normalized_occurrence": 1}
