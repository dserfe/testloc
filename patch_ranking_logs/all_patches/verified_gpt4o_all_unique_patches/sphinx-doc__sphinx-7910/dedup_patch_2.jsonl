{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 87c3fb8..32c7890 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1456,9 +1456,14 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         # config value; the default is only the class docstring\n         if content in ('both', 'init'):\n             __init__ = self.get_attr(self.object, '__init__', None)\n-            initdocstring = getdoc(__init__, self.get_attr,\n-                                   self.env.config.autodoc_inherit_docstrings,\n-                                   self.parent, self.object_name)\n+            if hasattr(__init__, \"__wrapped__\"):\n+                initdocstring = getdoc(__init__.__wrapped__, self.get_attr,\n+                                       self.env.config.autodoc_inherit_docstrings,\n+                                       self.parent, self.object_name)\n+            else:\n+                initdocstring = getdoc(__init__, self.get_attr,\n+                                       self.env.config.autodoc_inherit_docstrings,\n+                                       self.parent, self.object_name)\n             # for new-style classes, no __init__ means default __init__\n             if (initdocstring is not None and\n                 (initdocstring == object.__init__.__doc__ or  # for pypy\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 69b2ccc..ab0bdb9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1056,7 +1056,10 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             docstrings.append(attrdocstring)\n         if content in ('both', 'init'):\n             __init__ = self.get_attr(self.object, '__init__', None)\n-            initdocstring = getdoc(__init__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+            if hasattr(__init__, '__wrapped__'):\n+                initdocstring = getdoc(__init__.__wrapped__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+            else:\n+                initdocstring = getdoc(__init__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n             if initdocstring is not None and (initdocstring == object.__init__.__doc__ or initdocstring.strip() == object.__init__.__doc__):\n                 initdocstring = None\n             if not initdocstring:\n", "normalized_occurrence": 1}
