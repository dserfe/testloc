{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..2f48ad5 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -976,7 +976,21 @@ class CharField(Field):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            if self.choices:\n+                # Check all choice values to ensure they fit within max_length\n+                choice_values = [str(choice[0]) for choice in self.flatchoices]\n+                longest_choice = max(choice_values, key=len, default='')\n+                if len(longest_choice) > self.max_length:\n+                    errors.append(\n+                        checks.Error(\n+                            \"'max_length' is too small to fit the longest value in 'choices' \"\n+                            f\"(got {self.max_length}, need at least {len(longest_choice)}).\",\n+                            obj=self,\n+                            id='fields.E122',\n+                        )\n+                    )\n+            return errors\n \n     def cast_db_type(self, connection):\n         if self.max_length is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..8f171ef 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -468,7 +468,13 @@ class CharField(Field):\n         elif not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or self.max_length <= 0:\n             return [checks.Error(\"'max_length' must be a positive integer.\", obj=self, id='fields.E121')]\n         else:\n-            return []\n+            errors = []\n+            if self.choices:\n+                choice_values = [str(choice[0]) for choice in self.flatchoices]\n+                longest_choice = max(choice_values, key=len, default='')\n+                if len(longest_choice) > self.max_length:\n+                    errors.append(checks.Error(f\"'max_length' is too small to fit the longest value in 'choices' (got {self.max_length}, need at least {len(longest_choice)}).\", obj=self, id='fields.E122'))\n+            return errors\n     def cast_db_type(self, connection):\n         if self.max_length is None:\n             return connection.ops.cast_char_field_without_max_length\n", "normalized_occurrence": 1}
