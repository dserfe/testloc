{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..e2221d7 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -133,7 +133,10 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         of the module. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when possible \n+        to declare a test to be skipped under certain conditions like mismatching \n+        platforms or dependencies. To skip the entire module use pytest.skip with \n+        allow_module_level=True or use the new skip_module(\"reason\") API.\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n@@ -144,7 +147,16 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n-@_with_exception(Failed)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function can be used to skip the rest of the module during collection.\n+\n+    :param str msg:\n+        The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg, allow_module_level=True)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..36e2f5e 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -91,7 +91,10 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n         of the module. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when possible \n+        to declare a test to be skipped under certain conditions like mismatching \n+        platforms or dependencies. To skip the entire module use pytest.skip with \n+        allow_module_level=True or use the new skip_module(\"reason\") API.\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n@@ -101,7 +104,17 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n-@_with_exception(Failed)\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This function can be used to skip the rest of the module during collection.\n+\n+    :param str msg:\n+        The message to show the user as reason for the skip.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg, allow_module_level=True)\n+\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "normalized_occurrence": 1}
