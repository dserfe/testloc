{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..3b23d99 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -367,6 +367,7 @@ class Node(metaclass=NodeMeta):\n         except OSError:\n             abspath = True\n \n+        original_path = os.getcwd()\n         return excinfo.getrepr(\n             funcargs=True,\n             abspath=abspath,\n@@ -374,16 +375,23 @@ class Node(metaclass=NodeMeta):\n             style=style,\n             tbfilter=False,  # pruned already, or in --fulltrace mode.\n             truncate_locals=truncate_locals,\n+            cwd=original_path,\n+            funcargs=True,\n+            abspath=abspath,\n+            showlocals=self.config.getoption(\"showlocals\", False),\n+            style=style,\n+            tbfilter=False,  # pruned already, or in --fulltrace mode.\n+            truncate_locals=truncate_locals,\n         )\n \n     def repr_failure(\n         self, excinfo, style=None\n     ) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n-        \"\"\"\n-        Return a representation of a collection or test failure.\n+        \"\"\"Return a representation of a collection or test failure.\n \n         :param excinfo: Exception information for the failure.\n         \"\"\"\n+        original_path = os.getcwd()\n         return self._repr_failure_py(excinfo, style)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..1c53393 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -294,14 +294,15 @@ class Node(metaclass=NodeMeta):\n             abspath = False\n         except OSError:\n             abspath = True\n-        return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        original_path = os.getcwd()\n+        return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals, cwd=original_path, funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n-        \"\"\"\n-        Return a representation of a collection or test failure.\n+        \"\"\"Return a representation of a collection or test failure.\n \n         :param excinfo: Exception information for the failure.\n         \"\"\"\n+        original_path = os.getcwd()\n         return self._repr_failure_py(excinfo, style)\n \n def get_fslocation_from_item(item: 'Item') -> Tuple[Union[str, py.path.local], Optional[int]]:\n", "normalized_occurrence": 1}
