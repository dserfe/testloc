{"model_name_or_path": "agentless", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..03a1c49 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -366,14 +366,14 @@ class CaseInsensitiveMixin:\n class KeyTransformIsNull(lookups.IsNull):\n     # key__isnull=False is the same as has_key='key'\n     def as_oracle(self, compiler, connection):\n-        if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        if self.rhs:\n+            return 'JSON_VALUE(%s, \\'$.\"%s\"\\') IS NULL' % (self.lhs.lhs.as_sql(compiler, connection)[0], self.lhs.key_name), []\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        if self.rhs:\n+            return 'JSON_EXTRACT(%s, \\'$.%s\\') IS NULL' % (self.lhs.lhs.as_sql(compiler, connection)[0], self.lhs.key_name), []\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n \n \n class KeyTransformIn(lookups.In):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..9cc077c 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -239,13 +239,13 @@ class CaseInsensitiveMixin:\n         return (rhs, rhs_params)\n class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n-        if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        if self.rhs:\n+            return ('JSON_VALUE(%s, \\'$.\"%s\"\\') IS NULL' % (self.lhs.lhs.as_sql(compiler, connection)[0], self.lhs.key_name), [])\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n     def as_sqlite(self, compiler, connection):\n-        if not self.rhs:\n-            return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        if self.rhs:\n+            return (\"JSON_EXTRACT(%s, '$.%s') IS NULL\" % (self.lhs.lhs.as_sql(compiler, connection)[0], self.lhs.key_name), [])\n+        return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n         sql, params = super().resolve_expression_parameter(compiler, connection, sql, param)\n", "normalized_occurrence": 1}
