{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..72309be 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1738,12 +1738,18 @@ class QuerySet(AltersData):\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n+        \n+        # Check for filtered relations\n+        only_load = set()\n         for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+            field_name = field.split(LOOKUP_SEP, 1)[0]\n+            if field_name in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n+            only_load.add(field)\n+            \n         clone = self._chain()\n-        clone.query.add_immediate_loading(fields)\n+        clone.query.clear_deferred_loading()\n+        clone.query.add_immediate_loading(frozenset(only_load))\n         return clone\n \n     def using(self, alias):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..1b513fe 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -940,12 +940,15 @@ class QuerySet(AltersData):\n             raise TypeError('Cannot call only() after .values() or .values_list()')\n         if fields == (None,):\n             raise TypeError('Cannot pass None as an argument to only().')\n+        only_load = set()\n         for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+            field_name = field.split(LOOKUP_SEP, 1)[0]\n+            if field_name in self.query._filtered_relations:\n                 raise ValueError('only() is not supported with FilteredRelation.')\n+            only_load.add(field)\n         clone = self._chain()\n-        clone.query.add_immediate_loading(fields)\n+        clone.query.clear_deferred_loading()\n+        clone.query.add_immediate_loading(frozenset(only_load))\n         return clone\n     def using(self, alias):\n         clone = self._chain()\n", "normalized_occurrence": 1}
