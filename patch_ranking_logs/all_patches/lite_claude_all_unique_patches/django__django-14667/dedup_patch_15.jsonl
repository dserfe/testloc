{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..6754bb2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2105,9 +2105,11 @@ class Query(BaseExpression):\n             field_names.add(self.get_meta().pk.name)\n \n         if defer:\n-            # Remove any existing deferred names from the current set before\n-            # setting the new names.\n-            self.deferred_loading = field_names.difference(existing), False\n+            # If we're in deferred loading mode, we need to start with the new\n+            # immediate load fields and then add back any existing deferred fields\n+            # that weren't specified in the new immediate set\n+            immediate_fields = field_names\n+            self.deferred_loading = existing.intersection(field_names), True\n         else:\n             # Replace any existing \"immediate load\" field names.\n             self.deferred_loading = frozenset(field_names), False\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..16cfb1a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1148,7 +1148,8 @@ class Query(BaseExpression):\n             field_names.remove('pk')\n             field_names.add(self.get_meta().pk.name)\n         if defer:\n-            self.deferred_loading = (field_names.difference(existing), False)\n+            immediate_fields = field_names\n+            self.deferred_loading = (existing.intersection(field_names), True)\n         else:\n             self.deferred_loading = (frozenset(field_names), False)\n     def get_loaded_field_names(self):\n", "normalized_occurrence": 1}
