{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..cb54605 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -116,12 +116,11 @@ class SQLCompiler:\n             # select clause are already part of the group by.\n             if not expr.contains_aggregate and not is_ref:\n                 expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n+        if self.having:\n+            expressions.extend(self.having.get_group_by_cols())\n         result = []\n         seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        expressions = self.collapse_group_by(expressions)\n \n         for expr in expressions:\n             sql, params = self.compile(expr)\n@@ -131,7 +130,7 @@ class SQLCompiler:\n                 seen.add((sql, params_hash))\n         return result\n \n-    def collapse_group_by(self, expressions, having):\n+    def collapse_group_by(self, expressions):\n         # If the DB can group by primary key, then group by the primary key of\n         # query's main model. Note that for PostgreSQL the GROUP BY clause must\n         # include the primary key of every table, but for MySQL it is enough to\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..fe80a9e 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -52,12 +52,11 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             if not expr.contains_aggregate and (not is_ref):\n                 expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n+        if self.having:\n+            expressions.extend(self.having.get_group_by_cols())\n         result = []\n         seen = set()\n-        expressions = self.collapse_group_by(expressions, having_group_by)\n+        expressions = self.collapse_group_by(expressions)\n         for expr in expressions:\n             sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n@@ -65,7 +64,7 @@ class SQLCompiler:\n                 result.append((sql, params))\n                 seen.add((sql, params_hash))\n         return result\n-    def collapse_group_by(self, expressions, having):\n+    def collapse_group_by(self, expressions):\n         if self.connection.features.allows_group_by_pk:\n             pk = None\n             for expr in expressions:\n", "normalized_occurrence": 1}
