{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20049", "model_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex b711aa3..5192735 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -518,10 +518,17 @@ class Point(object):\n         \"\"\"\n \n         _check_frame(frame)\n-        if not (frame in self._vel_dict):\n+        if frame not in self._vel_dict:\n+            # Attempt to calculate the velocity if not explicitly defined\n+            if self._pos_dict:\n+                for ref_frame, pos in self._pos_dict.items():\n+                    if ref_frame == frame:\n+                        self.set_vel(frame, pos.dt(frame))\n+                        return self._vel_dict[frame]\n             raise ValueError('Velocity of point ' + self.name + ' has not been'\n                              ' defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        else:\n+            return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n         \"\"\"Returns the partial velocities of the linear velocity vector of this\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex f85c3bd..3350b7b 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -120,9 +120,15 @@ class Point(object):\n         return self.vel(outframe)\n     def vel(self, frame):\n         _check_frame(frame)\n-        if not frame in self._vel_dict:\n+        if frame not in self._vel_dict:\n+            if self._pos_dict:\n+                for ref_frame, pos in self._pos_dict.items():\n+                    if ref_frame == frame:\n+                        self.set_vel(frame, pos.dt(frame))\n+                        return self._vel_dict[frame]\n             raise ValueError('Velocity of point ' + self.name + ' has not been defined in ReferenceFrame ' + frame.name)\n-        return self._vel_dict[frame]\n+        else:\n+            return self._vel_dict[frame]\n     def partial_velocity(self, frame, *gen_speeds):\n         partials = [self.vel(frame).diff(speed, frame, var_in_dcm=False) for speed in gen_speeds]\n         if len(partials) == 1:\n", "normalized_occurrence": 1}
