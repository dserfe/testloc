{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..2dbf948 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,10 +1074,12 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n+            if self.__all__ is None:\n+                # If __all__ is not defined, consider all members\n                 return True, list(members.values())\n+            elif len(self.__all__) == 0:\n+                # If __all__ is empty, return no members\n+                return True, []\n             else:\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..42c7189 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -575,8 +575,10 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n+            if self.__all__ is None:\n                 return (True, list(members.values()))\n+            elif len(self.__all__) == 0:\n+                return (True, [])\n             else:\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n", "normalized_occurrence": 1}
