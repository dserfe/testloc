{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..1e4b3fa 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -428,8 +428,10 @@ class MatrixSymbol(MatrixExpr):\n \n     def doit(self, **hints):\n         if hints.get('deep', True):\n-            return type(self)(self.name, self.args[1].doit(**hints),\n-                    self.args[2].doit(**hints))\n+            return type(self)(*[\n+                arg.doit(**hints) if isinstance(arg, MatrixExpr) else arg\n+                for arg in self.args\n+            ])\n         else:\n             return self\n \n@@ -481,6 +483,9 @@ class Identity(MatrixExpr):\n         else:\n             return S.Zero\n \n+    def doit(self, **hints):\n+        return self\n+\n     def _eval_determinant(self):\n         return S.One\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 9ec3ea5..f735036 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -254,7 +254,7 @@ class MatrixSymbol(MatrixExpr):\n         return set((self,))\n     def doit(self, **hints):\n         if hints.get('deep', True):\n-            return type(self)(self.name, self.args[1].doit(**hints), self.args[2].doit(**hints))\n+            return type(self)(*[arg.doit(**hints) if isinstance(arg, MatrixExpr) else arg for arg in self.args])\n         else:\n             return self\n     def _eval_simplify(self, **kwargs):\n@@ -285,6 +285,8 @@ class Identity(MatrixExpr):\n             return S.One\n         else:\n             return S.Zero\n+    def doit(self, **hints):\n+        return self\n     def _eval_determinant(self):\n         return S.One\n class ZeroMatrix(MatrixExpr):\n", "normalized_occurrence": 1}
