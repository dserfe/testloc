{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..ce05ef7 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -32,7 +32,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n+            if sig.return_annotation is not sig.empty and sig.return_annotation is not None:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n@@ -126,7 +126,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        if annotation == 'None':\n+            field += nodes.field_body('', nodes.paragraph('', nodes.reference('', 'None', refuri='https://docs.python.org/3/library/constants.html#None')))\n+        else:\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n         node += field\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..9430133 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -16,7 +16,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n+            if sig.return_annotation is not sig.empty and sig.return_annotation is not None:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n@@ -90,7 +90,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        if annotation == 'None':\n+            field += nodes.field_body('', nodes.paragraph('', nodes.reference('', 'None', refuri='https://docs.python.org/3/library/constants.html#None')))\n+        else:\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n         node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n", "normalized_occurrence": 1}
