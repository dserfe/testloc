{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..eb54666 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,26 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                self_errors = sorted(str(e) for e in self.error_dict[field])\n+                other_errors = sorted(str(e) for e in other.error_dict[field])\n+                if self_errors != other_errors:\n+                    return False\n+            return True\n+        elif hasattr(self, 'error_dict') or hasattr(other, 'error_dict'):\n+            return False\n+        else:\n+            self_messages = sorted(str(e) for e in self.error_list)\n+            other_messages = sorted(str(e) for e in other.error_list)\n+            return self_messages == other_messages\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +210,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                self_errors = sorted((str(e) for e in self.error_dict[field]))\n+                other_errors = sorted((str(e) for e in other.error_dict[field]))\n+                if self_errors != other_errors:\n+                    return False\n+            return True\n+        elif hasattr(self, 'error_dict') or hasattr(other, 'error_dict'):\n+            return False\n+        else:\n+            self_messages = sorted((str(e) for e in self.error_list))\n+            other_messages = sorted((str(e) for e in other.error_list))\n+            return self_messages == other_messages\n+", "normalized_occurrence": 1}
