{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 400ae0b..f3d083b 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -651,9 +651,14 @@ class TerminalReporter(object):\n                 indent = (len(stack) - 1) * \"  \"\n                 self._tw.line(\"%s%s\" % (indent, col))\n                 if self.config.option.verbose >= 1:\n-                    if hasattr(col, \"_obj\") and col._obj.__doc__:\n-                        for line in col._obj.__doc__.strip().splitlines():\n-                            self._tw.line(\"%s%s\" % (indent + \"  \", line.strip()))\n+                    if hasattr(col, \"_obj\"):\n+                        if col._obj.__doc__:\n+                            for line in col._obj.__doc__.strip().splitlines():\n+                                self._tw.line(\"%s%s\" % (indent + \"  \", line.strip()))\n+                        if hasattr(col._obj, \"_pytestfixturefunction\"):\n+                            fixture_func = col._obj._pytestfixturefunction\n+                            scope = fixture_func.scope\n+                            self._tw.line(\"%s(scope: %s)\" % (indent + \"  \", scope))\n \n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 17fce8c..152e2a7 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -424,9 +424,14 @@ class TerminalReporter(object):\n                 indent = (len(stack) - 1) * '  '\n                 self._tw.line('%s%s' % (indent, col))\n                 if self.config.option.verbose >= 1:\n-                    if hasattr(col, '_obj') and col._obj.__doc__:\n-                        for line in col._obj.__doc__.strip().splitlines():\n-                            self._tw.line('%s%s' % (indent + '  ', line.strip()))\n+                    if hasattr(col, '_obj'):\n+                        if col._obj.__doc__:\n+                            for line in col._obj.__doc__.strip().splitlines():\n+                                self._tw.line('%s%s' % (indent + '  ', line.strip()))\n+                        if hasattr(col._obj, '_pytestfixturefunction'):\n+                            fixture_func = col._obj._pytestfixturefunction\n+                            scope = fixture_func.scope\n+                            self._tw.line('%s(scope: %s)' % (indent + '  ', scope))\n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n         outcome = (yield)\n", "normalized_occurrence": 1}
