{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..4042c13 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -809,6 +809,22 @@ class ProductSet(Set):\n                 'number of symbols must match the number of sets')\n         return And(*[s.as_relational(i) for s, i in zip(self.sets, symbols)])\n \n+    def _eval_is_subset(self, other):\n+        if isinstance(other, ProductSet):\n+            if len(self.sets) != len(other.sets):\n+                return False\n+            return all(s1._eval_is_subset(s2) for s1, s2 in zip(self.sets, other.sets))\n+        elif isinstance(other, FiniteSet):\n+            # Check if all possible combinations from our cartesian product\n+            # are contained in the other finite set\n+            from itertools import product\n+            # If any set is not finite, we can't determine subset\n+            if not all(s.is_finite_set for s in self.sets):\n+                return None\n+            all_elements = product(*[list(s) for s in self.sets])\n+            return all(other.contains(e) for e in all_elements)\n+        return None\n+\n     @property\n     def _boundary(self):\n         return Union(*(ProductSet(*(b + b.boundary if i != j else b.boundary\n", "occurrence": 1, "normalized_patch": "--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n+    def _eval_is_subset(self, other):\n+        if isinstance(other, ProductSet):\n+            if len(self.sets) != len(other.sets):\n+                return False\n+            return all((s1._eval_is_subset(s2) for s1, s2 in zip(self.sets, other.sets)))\n+        elif isinstance(other, FiniteSet):\n+            from itertools import product\n+            if not all((s.is_finite_set for s in self.sets)):\n+                return None\n+            all_elements = product(*[list(s) for s in self.sets])\n+            return all((other.contains(e) for e in all_elements))\n+        return None", "normalized_occurrence": 1}
