{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..42fff12 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -111,7 +111,10 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    ys_labels = set(chain.from_iterable(\n+        (i for i in _unique_labels(y.astype(y.dtype.name))) if hasattr(y, \"dtype\") and pd.api.types.is_extension_array_dtype(y.dtype) else (i for i in _unique_labels(y))\n+        for y in ys\n+    ))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n@@ -280,6 +283,15 @@ def type_of_target(y, input_name=\"\"):\n     'multilabel-indicator'\n     \"\"\"\n     xp, is_array_api = get_namespace(y)\n+    \n+    # Convert nullable pandas dtypes to their corresponding standard numpy dtypes\n+    if hasattr(y, \"dtype\") and pd.api.types.is_extension_array_dtype(y.dtype):\n+        if pd.api.types.is_integer_dtype(y.dtype):\n+            y = y.astype(\"int64\")\n+        elif pd.api.types.is_float_dtype(y.dtype):\n+            y = y.astype(\"float64\")\n+        elif pd.api.types.is_bool_dtype(y.dtype):\n+            y = y.astype(\"bool\")\n     valid = (\n         (isinstance(y, Sequence) or issparse(y) or hasattr(y, \"__array__\"))\n         and not isinstance(y, str)\n@@ -340,7 +352,7 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n+    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str) and not pd.api.types.is_extension_array_dtype(y.dtype):\n         # [obj_1] and not [\"label_1\"]\n         return \"unknown\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..e10a60d 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -34,7 +34,7 @@ def unique_labels(*ys):\n     if is_array_api:\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n-    ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y)) for y in ys)))\n+    ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y.astype(y.dtype.name))) if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype) else (i for i in _unique_labels(y)) for y in ys)))\n     if len(set((isinstance(label, str) for label in ys_labels))) > 1:\n         raise ValueError('Mix of label input types (string and number)')\n     return xp.asarray(sorted(ys_labels))\n@@ -65,6 +65,13 @@ def check_classification_targets(y):\n         raise ValueError('Unknown label type: %r' % y_type)\n def type_of_target(y, input_name=''):\n     xp, is_array_api = get_namespace(y)\n+    if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype):\n+        if pd.api.types.is_integer_dtype(y.dtype):\n+            y = y.astype('int64')\n+        elif pd.api.types.is_float_dtype(y.dtype):\n+            y = y.astype('float64')\n+        elif pd.api.types.is_bool_dtype(y.dtype):\n+            y = y.astype('bool')\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n@@ -91,7 +98,7 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n+    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)) and (not pd.api.types.is_extension_array_dtype(y.dtype)):\n         return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n", "normalized_occurrence": 1}
