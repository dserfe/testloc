{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13448", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex d751f3a..875ab47 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -74,7 +74,9 @@ class BaseDatabaseCreation:\n         # and store it on the connection. This slightly horrific process is so people\n         # who are testing on databases without transactions or who are using\n         # a TransactionTestCase still get a clean database on every test run.\n-        if serialize:\n+        # Skip serialization if migrations are disabled and we're not using an existing DB,\n+        # as the tables won't exist.\n+        if serialize and (self.connection.settings_dict['TEST']['MIGRATE'] or keepdb):\n             self.connection._test_serialized_contents = self.serialize_db_to_string()\n \n         call_command('createcachetable', database=self.connection.alias)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 4f2d479..444201b 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -28,7 +28,7 @@ class BaseDatabaseCreation:\n         self.connection.settings_dict['NAME'] = test_database_name\n         if self.connection.settings_dict['TEST']['MIGRATE']:\n             call_command('migrate', verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias, run_syncdb=True)\n-        if serialize:\n+        if serialize and (self.connection.settings_dict['TEST']['MIGRATE'] or keepdb):\n             self.connection._test_serialized_contents = self.serialize_db_to_string()\n         call_command('createcachetable', database=self.connection.alias)\n         self.connection.ensure_connection()\n", "normalized_occurrence": 11}
