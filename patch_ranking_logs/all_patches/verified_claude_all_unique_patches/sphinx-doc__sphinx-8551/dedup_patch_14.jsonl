{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..540ec2b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1260,13 +1260,28 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    # First try current module scope\n+                    if modname:\n+                        # Try full module path first\n+                        fullname = modname + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            newname = fullname\n+                        else:\n+                            # Try parent modules in reverse order\n+                            parts = modname.split('.')\n+                            for i in range(len(parts), 0, -1):\n+                                parent_modname = '.'.join(parts[:i])\n+                                fullname = parent_modname + '.' + name\n+                                if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                    newname = fullname\n+                                    break\n+                    \n+                    # If still not found, try unqualified name\n+                    if not newname and name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n+                    \n+                    # Only do fuzzy search as last resort\n+                    if not newname:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..922b548 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -759,11 +759,21 @@ class PythonDomain(Domain):\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    if modname:\n+                        fullname = modname + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            newname = fullname\n+                        else:\n+                            parts = modname.split('.')\n+                            for i in range(len(parts), 0, -1):\n+                                parent_modname = '.'.join(parts[:i])\n+                                fullname = parent_modname + '.' + name\n+                                if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                                    newname = fullname\n+                                    break\n+                    if not newname and name in self.objects and (self.objects[name].objtype in objtypes):\n                         newname = name\n-                    else:\n+                    if not newname:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n", "normalized_occurrence": 1}
