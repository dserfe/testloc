{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..80b98eb 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,10 +416,11 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n-            mode += \"b\"\n-        f = os.fdopen(newfd, mode, 0)  # no buffering\n-    return EncodedFile(f, encoding or default_encoding)\n+        f = os.fdopen(newfd, mode + \"b\", 0)  # no buffering\n+    encoded_file = EncodedFile(f, encoding or default_encoding)\n+    if \"b\" not in getattr(f, \"mode\", \"\") and hasattr(f, \"encoding\"):\n+        encoded_file.mode = getattr(f, \"mode\", \"\").replace(\"b\", \"\")\n+    return encoded_file\n \n \n class EncodedFile(object):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..fffd06b 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -241,10 +241,11 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if 'b' not in mode:\n-            mode += 'b'\n-        f = os.fdopen(newfd, mode, 0)\n-    return EncodedFile(f, encoding or default_encoding)\n+        f = os.fdopen(newfd, mode + 'b', 0)\n+    encoded_file = EncodedFile(f, encoding or default_encoding)\n+    if 'b' not in getattr(f, 'mode', '') and hasattr(f, 'encoding'):\n+        encoded_file.mode = getattr(f, 'mode', '').replace('b', '')\n+    return encoded_file\n class EncodedFile(object):\n     errors = 'strict'\n     def __init__(self, buffer, encoding):\n", "normalized_occurrence": 1}
