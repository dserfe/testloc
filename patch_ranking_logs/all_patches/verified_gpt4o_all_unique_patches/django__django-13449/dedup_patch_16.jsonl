{"model_name_or_path": "agentless", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 3ac1bb9..9b0246f 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -15,18 +15,13 @@ from django.utils.functional import cached_property\n from django.utils.hashable import make_hashable\n \n \n-class SQLiteNumericMixin:\n-    \"\"\"\n-    Some expressions with output_field=DecimalField() must be cast to\n-    numeric to be properly filtered.\n-    \"\"\"\n+class Window(SQLiteNumericMixin, Expression):\n+    template = '%(expression)s OVER (%(window)s)'\n+\n     def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n-        try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n-        except FieldError:\n-            pass\n+        sql, params = super().as_sqlite(compiler, connection, **extra_context)\n+        if self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n         return sql, params\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8033a49..8f749bd 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -12,14 +12,12 @@ from django.db.models.query_utils import Q\n from django.utils.deconstruct import deconstructible\n from django.utils.functional import cached_property\n from django.utils.hashable import make_hashable\n-class SQLiteNumericMixin:\n+class Window(SQLiteNumericMixin, Expression):\n+    template = '%(expression)s OVER (%(window)s)'\n     def as_sqlite(self, compiler, connection, **extra_context):\n-        sql, params = self.as_sql(compiler, connection, **extra_context)\n-        try:\n-            if self.output_field.get_internal_type() == 'DecimalField':\n-                sql = 'CAST(%s AS NUMERIC)' % sql\n-        except FieldError:\n-            pass\n+        sql, params = super().as_sqlite(compiler, connection, **extra_context)\n+        if self.output_field.get_internal_type() == 'DecimalField':\n+            sql = 'CAST(%s AS NUMERIC)' % sql\n         return (sql, params)\n class Combinable:\n     ADD = '+'\n", "normalized_occurrence": 1}
