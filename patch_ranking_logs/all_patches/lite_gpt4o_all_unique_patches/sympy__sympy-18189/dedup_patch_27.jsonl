{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..d2f4d93 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -179,10 +179,19 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+            if syms != var and permute:\n+                syms_set = set(syms)\n+                var_set = set(var)\n+                if syms_set != var_set:\n+                    raise ValueError(\"Symbols in 'syms' must match the symbols in the equation\")\n+                permutations = list(signed_permutations(syms))\n+                result = set()\n+                for perm in permutations:\n+                    dict_sym_index = dict(zip(perm, range(len(perm))))\n+                    sub_result = {tuple([t[dict_sym_index[i]] for i in var])\n+                                 for t in diophantine(eq, param)}\n+                    result.update(sub_result)\n+                return result\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..54c74f6 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,9 +70,18 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+            if syms != var and permute:\n+                syms_set = set(syms)\n+                var_set = set(var)\n+                if syms_set != var_set:\n+                    raise ValueError(\"Symbols in 'syms' must match the symbols in the equation\")\n+                permutations = list(signed_permutations(syms))\n+                result = set()\n+                for perm in permutations:\n+                    dict_sym_index = dict(zip(perm, range(len(perm))))\n+                    sub_result = {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                    result.update(sub_result)\n+                return result\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
