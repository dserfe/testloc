{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-9288", "model_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex 915d041..fea459b 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -363,13 +363,14 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n     if effective_n_jobs(n_jobs) == 1:\n         # For a single thread, less memory is needed if we just store one set\n         # of the best results (as opposed to one set per run per thread).\n-        for it in range(n_init):\n-            # run a k-means once\n+        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n+        for it, seed in zip(range(n_init), seeds):\n+            random_state_it = check_random_state(seed)\n             labels, inertia, centers, n_iter_ = kmeans_single(\n                 X, sample_weight, n_clusters, max_iter=max_iter, init=init,\n                 verbose=verbose, precompute_distances=precompute_distances,\n                 tol=tol, x_squared_norms=x_squared_norms,\n-                random_state=random_state)\n+                random_state=random_state_it)\n             # determine if these results are the best so far\n             if best_inertia is None or inertia < best_inertia:\n                 best_labels = labels.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex abcc315..b3b24dc 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -107,8 +107,10 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++', precompute_dist\n     else:\n         raise ValueError(\"Algorithm must be 'auto', 'full' or 'elkan', got %s\" % str(algorithm))\n     if effective_n_jobs(n_jobs) == 1:\n-        for it in range(n_init):\n-            labels, inertia, centers, n_iter_ = kmeans_single(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, precompute_distances=precompute_distances, tol=tol, x_squared_norms=x_squared_norms, random_state=random_state)\n+        seeds = random_state.randint(np.iinfo(np.int32).max, size=n_init)\n+        for it, seed in zip(range(n_init), seeds):\n+            random_state_it = check_random_state(seed)\n+            labels, inertia, centers, n_iter_ = kmeans_single(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, precompute_distances=precompute_distances, tol=tol, x_squared_norms=x_squared_norms, random_state=random_state_it)\n             if best_inertia is None or inertia < best_inertia:\n                 best_labels = labels.copy()\n                 best_centers = centers.copy()\n", "normalized_occurrence": 1}
