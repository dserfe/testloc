{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..40b7534 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,6 +13,7 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n+    @wraps(_wrapper)\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n@@ -40,6 +41,7 @@ def _multi_decorate(decorators, method):\n         bound_method = partial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n \n     # Copy any attributes that a decorator adds to the function it decorates.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..37cb496 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -5,6 +5,7 @@ class classonlymethod(classmethod):\n             raise AttributeError('This method is available only on the class, not on instances.')\n         return super().__get__(instance, cls)\n def _update_method_wrapper(_wrapper, decorator):\n+    @wraps(_wrapper)\n     @decorator\n     def dummy(*args, **kwargs):\n         pass\n@@ -18,6 +19,7 @@ def _multi_decorate(decorators, method):\n         bound_method = partial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n+        update_wrapper(bound_method, method)\n         return bound_method(*args, **kwargs)\n     for dec in decorators:\n         _update_method_wrapper(_wrapper, dec)\n", "normalized_occurrence": 1}
