{"model_name_or_path": "agentless", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..922876a 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2030,6 +2030,7 @@ class InlineModelAdmin(BaseModelAdmin):\n         # default.\n         exclude = exclude or None\n         can_delete = self.can_delete and self.has_delete_permission(request, obj)\n+        readonly_fields = self.get_readonly_fields(request, obj)\n         defaults = {\n             'form': self.form,\n             'formset': self.formset,\n@@ -2041,10 +2042,14 @@ class InlineModelAdmin(BaseModelAdmin):\n             'min_num': self.get_min_num(request, obj, **kwargs),\n             'max_num': self.get_max_num(request, obj, **kwargs),\n             'can_delete': can_delete,\n+            'readonly_fields': readonly_fields,\n             **kwargs,\n         }\n \n         base_model_form = defaults['form']\n+        if not self.has_change_permission(request, obj):\n+            for field in base_model_form.base_fields.values():\n+                field.disabled = True\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n \n@@ -2159,4 +2164,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..e212ed8 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1000,8 +1000,12 @@ class InlineModelAdmin(BaseModelAdmin):\n             exclude.extend(self.form._meta.exclude)\n         exclude = exclude or None\n         can_delete = self.can_delete and self.has_delete_permission(request, obj)\n-        defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, **kwargs}\n+        readonly_fields = self.get_readonly_fields(request, obj)\n+        defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, 'readonly_fields': readonly_fields, **kwargs}\n         base_model_form = defaults['form']\n+        if not self.has_change_permission(request, obj):\n+            for field in base_model_form.base_fields.values():\n+                field.disabled = True\n         can_change = self.has_change_permission(request, obj) if request else True\n         can_add = self.has_add_permission(request, obj) if request else True\n         class DeleteProtectedModelForm(base_model_form):\n", "normalized_occurrence": 1}
