{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19487", "model_patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 6852819..97b11ef 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -643,11 +643,12 @@ class MinMaxBase(Expr, LatticeOp):\n             l.append(df * da)\n         return Add(*l)\n \n-    def _eval_rewrite_as_Abs(self, *args, **kwargs):\n+    def _eval_rewrite_as_Abs(self, arg, **kwargs):\n         from sympy.functions.elementary.complexes import Abs\n-        s = (args[0] + self.func(*args[1:]))/2\n-        d = abs(args[0] - self.func(*args[1:]))/2\n-        return (s + d if isinstance(self, Max) else s - d).rewrite(Abs)\n+        from sympy.core import S\n+        if arg.is_zero:\n+            return S.NaN\n+        return arg / Abs(arg)\n \n     def evalf(self, n=15, **options):\n         return self.func(*[a.evalf(n, **options) for a in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex b26bc6b..ee3b583 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -230,11 +230,12 @@ class MinMaxBase(Expr, LatticeOp):\n                 df = Function.fdiff(self, i)\n             l.append(df * da)\n         return Add(*l)\n-    def _eval_rewrite_as_Abs(self, *args, **kwargs):\n+    def _eval_rewrite_as_Abs(self, arg, **kwargs):\n         from sympy.functions.elementary.complexes import Abs\n-        s = (args[0] + self.func(*args[1:])) / 2\n-        d = abs(args[0] - self.func(*args[1:])) / 2\n-        return (s + d if isinstance(self, Max) else s - d).rewrite(Abs)\n+        from sympy.core import S\n+        if arg.is_zero:\n+            return S.NaN\n+        return arg / Abs(arg)\n     def evalf(self, n=15, **options):\n         return self.func(*[a.evalf(n, **options) for a in self.args])\n     def n(self, *args, **kwargs):\n", "normalized_occurrence": 1}
