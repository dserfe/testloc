{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..7ac66fe 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1635,13 +1635,14 @@ class QuerySet:\n                     is_summary=False,\n                     select=select,\n                 )\n-        for alias, annotation in clone.query.annotations.items():\n-            if alias in annotations and annotation.contains_aggregate:\n-                if clone._fields is None:\n-                    clone.query.group_by = True\n-                else:\n-                    clone.query.set_group_by()\n-                break\n+                # Only consider the annotation for GROUP BY if it's actually selected\n+                if select:\n+                    if alias in annotations and annotation.contains_aggregate:\n+                        if clone._fields is None:\n+                            clone.query.group_by = True\n+                        else:\n+                            clone.query.set_group_by()\n+                        break\n \n         return clone\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..f9bbd8e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -871,13 +871,13 @@ class QuerySet:\n                 clone.query.add_filtered_relation(annotation, alias)\n             else:\n                 clone.query.add_annotation(annotation, alias, is_summary=False, select=select)\n-        for alias, annotation in clone.query.annotations.items():\n-            if alias in annotations and annotation.contains_aggregate:\n-                if clone._fields is None:\n-                    clone.query.group_by = True\n-                else:\n-                    clone.query.set_group_by()\n-                break\n+                if select:\n+                    if alias in annotations and annotation.contains_aggregate:\n+                        if clone._fields is None:\n+                            clone.query.group_by = True\n+                        else:\n+                            clone.query.set_group_by()\n+                        break\n         return clone\n     def order_by(self, *field_names):\n         if self.query.is_sliced:\n", "normalized_occurrence": 1}
