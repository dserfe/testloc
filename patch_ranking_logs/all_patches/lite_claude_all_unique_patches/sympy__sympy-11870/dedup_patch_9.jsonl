{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..72eb7aa 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -439,8 +439,14 @@ class exp(ExpBase):\n         return exp(arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos, im\n         I = S.ImaginaryUnit\n+        # Handle exp(I*x) case for trig conversions\n+        if arg.has(I):\n+            # Extract real part from I*x in exp(I*x)\n+            x = im(arg)/I\n+            if x != 0:\n+                return cos(x) + I*sin(x)\n         return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n \n     def _eval_rewrite_as_cos(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..02bf204 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -271,8 +271,12 @@ class exp(ExpBase):\n             return S.One\n         return exp(arg)\n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos, im\n         I = S.ImaginaryUnit\n+        if arg.has(I):\n+            x = im(arg) / I\n+            if x != 0:\n+                return cos(x) + I * sin(x)\n         return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n", "normalized_occurrence": 1}
