{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..a133aae 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core.numbers import nan\n from .function import Function\n from .kind import NumberKind\n@@ -94,12 +95,12 @@ class Mod(Function):\n                         if p.is_positive:\n                             return d + q\n                         elif p.is_negative:\n-                            return -d\n+                            return d + q\n                     elif q.is_negative:\n                         if p.is_positive:\n                             return d\n                         elif p.is_negative:\n-                            return -d + q\n+                            return d\n                     break\n \n         rv = doit(p, q)\n@@ -240,4 +241,4 @@ class Mod(Function):\n \n     def _eval_rewrite_as_floor(self, a, b, **kwargs):\n         from sympy.functions.elementary.integers import floor\n-        return a - b*floor(a/b)\n+        return a - b*floor(a/b)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..15a1435 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -51,12 +51,12 @@ class Mod(Function):\n                         if p.is_positive:\n                             return d + q\n                         elif p.is_negative:\n-                            return -d\n+                            return d + q\n                     elif q.is_negative:\n                         if p.is_positive:\n                             return d\n                         elif p.is_negative:\n-                            return -d + q\n+                            return d\n                     break\n         rv = doit(p, q)\n         if rv is not None:\n", "normalized_occurrence": 1}
