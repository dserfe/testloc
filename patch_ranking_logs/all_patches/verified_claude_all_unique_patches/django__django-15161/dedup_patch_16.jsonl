{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..df002ff 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -808,6 +808,14 @@ class Value(SQLiteNumericMixin, Expression):\n \n \n class RawSQL(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -986,6 +994,16 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n \n \n class When(Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            kwargs['condition'] = self.condition\n+        if self.result is not None:\n+            kwargs['then'] = self.result\n+        return path, args, kwargs\n+\n     template = 'WHEN %(condition)s THEN %(result)s'\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n@@ -1053,6 +1071,16 @@ class When(Expression):\n \n \n class Case(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self.output_field:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     \"\"\"\n     An SQL searched CASE expression:\n \n@@ -1308,6 +1336,20 @@ class OrderBy(Expression):\n \n \n class Window(SQLiteNumericMixin, Expression):\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     template = '%(expression)s OVER (%(window)s)'\n     # Although the main expression may either be an aggregate or an\n     # expression with an aggregate function, the GROUP BY that will\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.RawSQL'\n+        args = [self.sql, self.params]\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            kwargs['condition'] = self.condition\n+        if self.result is not None:\n+            kwargs['then'] = self.result\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Case'\n+        args = [*self.cases]\n+        kwargs = {}\n+        if self.default:\n+            kwargs['default'] = self.default\n+        if self.output_field:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    \"\\n    An SQL searched CASE expression:\\n\\n        CASE\\n            WHEN n > 0\\n                THEN 'positive'\\n            WHEN n < 0\\n                THEN 'negative'\\n            ELSE 'zero'\\n        END\\n    \"\n+    def deconstruct(self):\n+        path = 'django.db.models.Window'\n+        args = [self.source_expression]\n+        kwargs = {}\n+        if self.partition_by is not None:\n+            kwargs['partition_by'] = self.partition_by\n+        if self.order_by is not None:\n+            kwargs['order_by'] = self.order_by\n+        if self.frame is not None:\n+            kwargs['frame'] = self.frame\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
