{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13328", "model_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 774a22b..41b6c5b 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -252,6 +252,9 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         \"\"\"\n         X, y = check_X_y(\n             X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+        \n+        # Ensure X is of type float to avoid TypeError with boolean predictors\n+        X = X.astype(np.float64)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/linear_model/huber.py b/sklearn/linear_model/huber.py\nindex 81acf45..1cd4b46 100644\n--- a/sklearn/linear_model/huber.py\n+++ b/sklearn/linear_model/huber.py\n@@ -61,6 +61,7 @@ class HuberRegressor(LinearModel, RegressorMixin, BaseEstimator):\n         self.tol = tol\n     def fit(self, X, y, sample_weight=None):\n         X, y = check_X_y(X, y, copy=False, accept_sparse=['csr'], y_numeric=True)\n+        X = X.astype(np.float64)\n         if sample_weight is not None:\n             sample_weight = np.array(sample_weight)\n             check_consistent_length(y, sample_weight)\n", "normalized_occurrence": 1}
