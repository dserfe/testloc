{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..2633aa4 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -94,12 +94,12 @@ class SQLCompiler:\n         # to the group by.\n         if self.query.group_by is None:\n             return []\n-        expressions = []\n+        expressions = list(self.query.annotations.values())\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n             # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n+            # when we have public API way of forcing the GROUP BY clause.\n             # Converts string references to expressions.\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..ded5a54 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -40,7 +40,7 @@ class SQLCompiler:\n     def get_group_by(self, select, order_by):\n         if self.query.group_by is None:\n             return []\n-        expressions = []\n+        expressions = list(self.query.annotations.values())\n         if self.query.group_by is not True:\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n", "normalized_occurrence": 1}
