{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..1205463 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,6 +73,7 @@ def unique_labels(*ys):\n     >>> unique_labels([1, 2, 10], [5, 11])\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n+    ys = [np.asarray(y) if pd.api.types.is_extension_array_dtype(y.dtype) else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n@@ -298,6 +299,15 @@ def type_of_target(y, input_name=\"\"):\n     if is_multilabel(y):\n         return \"multilabel-indicator\"\n \n+    # Convert pandas nullable dtypes to appropriate numpy dtypes\n+    if hasattr(y, \"dtype\") and pd.api.types.is_extension_array_dtype(y.dtype):\n+        if pd.api.types.is_integer_dtype(y.dtype):\n+            y = y.astype('int64')\n+        elif pd.api.types.is_float_dtype(y.dtype):\n+            y = y.astype('float64')\n+        elif pd.api.types.is_bool_dtype(y.dtype):\n+            y = y.astype('bool')\n+\n     # DeprecationWarning will be replaced by ValueError, see NEP 34\n     # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n     # We therefore catch both deprecation (NumPy < 1.24) warning and\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..547fa49 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -17,6 +17,7 @@ def _unique_indicator(y):\n     return np.arange(check_array(y, input_name='y', accept_sparse=['csr', 'csc', 'coo']).shape[1])\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n+    ys = [np.asarray(y) if pd.api.types.is_extension_array_dtype(y.dtype) else y for y in ys]\n     xp, is_array_api = get_namespace(*ys)\n     if not ys:\n         raise ValueError('No argument has been passed.')\n@@ -73,6 +74,13 @@ def type_of_target(y, input_name=''):\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n     if is_multilabel(y):\n         return 'multilabel-indicator'\n+    if hasattr(y, 'dtype') and pd.api.types.is_extension_array_dtype(y.dtype):\n+        if pd.api.types.is_integer_dtype(y.dtype):\n+            y = y.astype('int64')\n+        elif pd.api.types.is_float_dtype(y.dtype):\n+            y = y.astype('float64')\n+        elif pd.api.types.is_bool_dtype(y.dtype):\n+            y = y.astype('bool')\n     with warnings.catch_warnings():\n         warnings.simplefilter('error', np.VisibleDeprecationWarning)\n         if not issparse(y):\n", "normalized_occurrence": 1}
