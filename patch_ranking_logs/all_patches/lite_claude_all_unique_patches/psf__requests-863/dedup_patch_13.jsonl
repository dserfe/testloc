{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 2c937f2..fe4b5b7 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -39,11 +39,15 @@ def dispatch_hook(key, hooks, hook_data):\n \n         if hasattr(hooks, '__call__'):\n             hooks = [hooks]\n+        elif not isinstance(hooks, (list, tuple)):\n+            raise TypeError(f\"Hook '{key}' must be callable or a list of callables\")\n \n         for hook in hooks:\n+            if not hasattr(hook, '__call__'):\n+                raise TypeError(f\"Hook '{key}' must be callable or a list of callables\")\n             _hook_data = hook(hook_data)\n             if _hook_data is not None:\n                 hook_data = _hook_data\n \n \n-    return hook_data\n+    return hook_data\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 7057710..3864621 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -5,7 +5,11 @@ def dispatch_hook(key, hooks, hook_data):\n         hooks = hooks.get(key)\n         if hasattr(hooks, '__call__'):\n             hooks = [hooks]\n+        elif not isinstance(hooks, (list, tuple)):\n+            raise TypeError(f\"Hook '{key}' must be callable or a list of callables\")\n         for hook in hooks:\n+            if not hasattr(hook, '__call__'):\n+                raise TypeError(f\"Hook '{key}' must be callable or a list of callables\")\n             _hook_data = hook(hook_data)\n             if _hook_data is not None:\n                 hook_data = _hook_data\n", "normalized_occurrence": 1}
