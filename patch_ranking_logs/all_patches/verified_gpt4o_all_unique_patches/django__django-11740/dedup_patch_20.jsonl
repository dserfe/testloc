{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..856bdac 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -183,7 +183,22 @@ class MigrationAutodetector:\n         self.generate_renamed_fields()\n         self.generate_removed_fields()\n         self.generate_added_fields()\n+\n+    def generate_altered_foreign_keys(self):\n+        \"\"\"\n+        Generate operations for altered foreign keys.\n+        \"\"\"\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_state = self.from_state.models[app_label, model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            for field_name, old_field in sorted(old_model_state.fields.items()):\n+                new_field = new_model_state.fields.get(field_name)\n+                if isinstance(old_field, models.UUIDField) and isinstance(new_field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, model_name, dep)\n         self.generate_altered_fields()\n+        self.generate_altered_foreign_keys()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..25a63ce 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -97,7 +97,18 @@ class MigrationAutodetector:\n         self.generate_renamed_fields()\n         self.generate_removed_fields()\n         self.generate_added_fields()\n+    def generate_altered_foreign_keys(self):\n+        for app_label, model_name in sorted(self.kept_model_keys):\n+            old_model_state = self.from_state.models[app_label, model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n+            for field_name, old_field in sorted(old_model_state.fields.items()):\n+                new_field = new_model_state.fields.get(field_name)\n+                if isinstance(old_field, models.UUIDField) and isinstance(new_field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                    for dep in dependencies:\n+                        self.add_dependency(app_label, model_name, dep)\n         self.generate_altered_fields()\n+        self.generate_altered_foreign_keys()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n", "normalized_occurrence": 1}
