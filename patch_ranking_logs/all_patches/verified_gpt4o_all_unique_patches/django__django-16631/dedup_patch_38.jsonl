{"model_name_or_path": "agentless", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/core/signing.py b/django/core/signing.py\nindex 6cd40ee..e0751ad 100644\n--- a/django/core/signing.py\n+++ b/django/core/signing.py\n@@ -223,7 +223,10 @@ class Signer:\n \n     def signature(self, value, key=None):\n         key = key or self.key\n-        return base64_hmac(self.salt + \"signer\", value, key, algorithm=self.algorithm)\n+        for fallback_key in [key, *self.fallback_keys]:\n+            result = base64_hmac(self.salt + \"signer\", value, fallback_key, algorithm=self.algorithm)\n+            if result:\n+                return result\n \n     def sign(self, value):\n         return \"%s%s%s\" % (value, self.sep, self.signature(value))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/signing.py b/django/core/signing.py\nindex 475cae6..ace01ea 100644\n--- a/django/core/signing.py\n+++ b/django/core/signing.py\n@@ -74,7 +74,10 @@ class Signer:\n             raise ValueError('Unsafe Signer separator: %r (cannot be empty or consist of only A-z0-9-_=)' % sep)\n     def signature(self, value, key=None):\n         key = key or self.key\n-        return base64_hmac(self.salt + 'signer', value, key, algorithm=self.algorithm)\n+        for fallback_key in [key, *self.fallback_keys]:\n+            result = base64_hmac(self.salt + 'signer', value, fallback_key, algorithm=self.algorithm)\n+            if result:\n+                return result\n     def sign(self, value):\n         return '%s%s%s' % (value, self.sep, self.signature(value))\n     def unsign(self, signed_value):\n", "normalized_occurrence": 1}
