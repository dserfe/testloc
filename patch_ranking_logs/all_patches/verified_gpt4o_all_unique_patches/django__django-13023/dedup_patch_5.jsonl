{"model_name_or_path": "agentless", "instance_id": "django__django-13023", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex b1fce64..7a9f67e 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1500,8 +1500,10 @@ class DecimalField(Field):\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n+            if isinstance(value, dict):\n+                raise TypeError(\"Cannot convert dictionary to decimal\")\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (TypeError, decimal.InvalidOperation):\n             raise exceptions.ValidationError(\n                 self.error_messages['invalid'],\n                 code='invalid',\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d93730b..859ea34 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -750,8 +750,10 @@ class DecimalField(Field):\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n         try:\n+            if isinstance(value, dict):\n+                raise TypeError('Cannot convert dictionary to decimal')\n             return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n+        except (TypeError, decimal.InvalidOperation):\n             raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n     def get_db_prep_save(self, value, connection):\n         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)\n", "normalized_occurrence": 1}
