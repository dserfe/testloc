{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex d08f29d..08c4656 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -79,16 +79,32 @@ class CursorWrapper:\n     def _execute(self, sql, params, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            if params is None:\n-                # params default might be backend specific.\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+            retry_attempts = 5\n+            for attempt in range(retry_attempts):\n+                try:\n+                    if params is None:\n+                        # params default might be backend specific.\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+                except self.db.Database.OperationalError as e:\n+                    if \"database is locked\" in str(e) and attempt < retry_attempts - 1:\n+                        time.sleep(0.1)  # Small delay before retrying\n+                    else:\n+                        raise\n \n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            return self.cursor.executemany(sql, param_list)\n+            retry_attempts = 5\n+            for attempt in range(retry_attempts):\n+                try:\n+                    return self.cursor.executemany(sql, param_list)\n+                except self.db.Database.OperationalError as e:\n+                    if \"database is locked\" in str(e) and attempt < retry_attempts - 1:\n+                        time.sleep(0.1)  # Small delay before retrying\n+                    else:\n+                        raise\n \n \n class CursorDebugWrapper(CursorWrapper):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex 8a96ea8..5120993 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -54,14 +54,30 @@ class CursorWrapper:\n     def _execute(self, sql, params, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            if params is None:\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+            retry_attempts = 5\n+            for attempt in range(retry_attempts):\n+                try:\n+                    if params is None:\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+                except self.db.Database.OperationalError as e:\n+                    if 'database is locked' in str(e) and attempt < retry_attempts - 1:\n+                        time.sleep(0.1)\n+                    else:\n+                        raise\n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            return self.cursor.executemany(sql, param_list)\n+            retry_attempts = 5\n+            for attempt in range(retry_attempts):\n+                try:\n+                    return self.cursor.executemany(sql, param_list)\n+                except self.db.Database.OperationalError as e:\n+                    if 'database is locked' in str(e) and attempt < retry_attempts - 1:\n+                        time.sleep(0.1)\n+                    else:\n+                        raise\n class CursorDebugWrapper(CursorWrapper):\n     def execute(self, sql, params=None):\n         with self.debug_sql(sql, params, use_last_executed_query=True):\n", "normalized_occurrence": 1}
