{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15503", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 0a76a39..71eb58d 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -227,9 +227,25 @@ class HasKeyLookup(PostgresOperatorLookup):\n         return super().as_postgresql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(\n-            compiler, connection, template=\"JSON_TYPE(%s, %%s) IS NOT NULL\"\n-        )\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs = self.rhs\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        conditions = []\n+        params = []\n+        for key in rhs:\n+            # Format the key as a proper JSON path\n+            if isinstance(key, str) and key.isnumeric():\n+                path = f\"$[{key}]\"\n+            else:\n+                path = f\"$.{key}\"\n+            conditions.append(\"JSON_TYPE(%s, ?) IS NOT NULL\")\n+            params.append(path)\n+        \n+        sql = \" OR \".join(conditions) % (lhs,) * len(conditions)\n+        if len(conditions) > 1 and self.logical_operator:\n+            sql = f\"({sql})\"\n+        return sql, tuple(params)\n \n \n class HasKey(HasKeyLookup):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 272d7b8..258620c 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -141,7 +141,23 @@ class HasKeyLookup(PostgresOperatorLookup):\n             self.rhs = rhs_key_transforms[-1]\n         return super().as_postgresql(compiler, connection)\n     def as_sqlite(self, compiler, connection):\n-        return self.as_sql(compiler, connection, template='JSON_TYPE(%s, %%s) IS NOT NULL')\n+        lhs, lhs_params = self.process_lhs(compiler, connection)\n+        rhs = self.rhs\n+        if not isinstance(rhs, (list, tuple)):\n+            rhs = [rhs]\n+        conditions = []\n+        params = []\n+        for key in rhs:\n+            if isinstance(key, str) and key.isnumeric():\n+                path = f'$[{key}]'\n+            else:\n+                path = f'$.{key}'\n+            conditions.append('JSON_TYPE(%s, ?) IS NOT NULL')\n+            params.append(path)\n+        sql = ' OR '.join(conditions) % (lhs,) * len(conditions)\n+        if len(conditions) > 1 and self.logical_operator:\n+            sql = f'({sql})'\n+        return (sql, tuple(params))\n class HasKey(HasKeyLookup):\n     lookup_name = 'has_key'\n     postgres_operator = '?'\n", "normalized_occurrence": 1}
