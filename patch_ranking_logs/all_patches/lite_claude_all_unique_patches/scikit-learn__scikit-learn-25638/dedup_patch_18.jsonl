{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..76e8606 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -298,6 +298,18 @@ def type_of_target(y, input_name=\"\"):\n     if is_multilabel(y):\n         return \"multilabel-indicator\"\n \n+    # Handle pandas nullable dtypes early\n+    if hasattr(y, \"dtype\") and hasattr(y.dtype, \"name\"):\n+        pd_dtype = y.dtype\n+        if pd_dtype.name in (\"Int64\", \"Float64\", \"boolean\"):\n+            # Convert to corresponding numpy dtype\n+            if pd_dtype.name == \"Int64\":\n+                y = y.astype(\"float64\")  # handles NA values\n+            elif pd_dtype.name == \"Float64\":\n+                y = y.astype(\"float64\")\n+            elif pd_dtype.name == \"boolean\":\n+                y = y.astype(\"bool\")\n+\n     # DeprecationWarning will be replaced by ValueError, see NEP 34\n     # https://numpy.org/neps/nep-0034-infer-dtype-is-object.html\n     # We therefore catch both deprecation (NumPy < 1.24) warning and\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..46c7821 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -73,6 +73,15 @@ def type_of_target(y, input_name=''):\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n     if is_multilabel(y):\n         return 'multilabel-indicator'\n+    if hasattr(y, 'dtype') and hasattr(y.dtype, 'name'):\n+        pd_dtype = y.dtype\n+        if pd_dtype.name in ('Int64', 'Float64', 'boolean'):\n+            if pd_dtype.name == 'Int64':\n+                y = y.astype('float64')\n+            elif pd_dtype.name == 'Float64':\n+                y = y.astype('float64')\n+            elif pd_dtype.name == 'boolean':\n+                y = y.astype('bool')\n     with warnings.catch_warnings():\n         warnings.simplefilter('error', np.VisibleDeprecationWarning)\n         if not issparse(y):\n", "normalized_occurrence": 1}
