{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..0683469 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,51 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.expr import Expr\n+        # If i or j are symbolic, return generic entry\n+        if isinstance(i, (Symbol, Expr)) or isinstance(j, (Symbol, Expr)):\n+            # Build an expression including all possible blocks\n+            from sympy.core.logic import Or\n+            from sympy.functions.elementary.piecewise import Piecewise\n+            current_row = 0\n+            pieces = []\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                current_col = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    # Add condition for this block\n+                    cond = And(\n+                        current_row <= i,\n+                        i < current_row + numrows,\n+                        current_col <= j,\n+                        j < current_col + numcols\n+                    )\n+                    block = self.blocks[row_block, col_block]\n+                    pieces.append(\n+                        (block[i - current_row, j - current_col], cond)\n+                    )\n+                    current_col += numcols\n+                current_row += numrows\n+            return Piecewise(*pieces)\n+        \n+        # For numeric indices, use original logic\n+        current_row = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < current_row + numrows:\n                 break\n-            else:\n-                i -= numrows\n+            current_row += numrows\n+        else:\n+            raise IndexError(\"Row index out of range\")\n+            \n+        current_col = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < current_col + numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            current_col += numcols\n+        else:\n+            raise IndexError(\"Column index out of range\")\n+            \n+        return self.blocks[row_block, col_block][i - current_row, j - current_col]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..4e26139 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,37 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.expr import Expr\n+        if isinstance(i, (Symbol, Expr)) or isinstance(j, (Symbol, Expr)):\n+            from sympy.core.logic import Or\n+            from sympy.functions.elementary.piecewise import Piecewise\n+            current_row = 0\n+            pieces = []\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                current_col = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    cond = And(current_row <= i, i < current_row + numrows, current_col <= j, j < current_col + numcols)\n+                    block = self.blocks[row_block, col_block]\n+                    pieces.append((block[i - current_row, j - current_col], cond))\n+                    current_col += numcols\n+                current_row += numrows\n+            return Piecewise(*pieces)\n+        current_row = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < current_row + numrows:\n                 break\n-            else:\n-                i -= numrows\n+            current_row += numrows\n+        else:\n+            raise IndexError('Row index out of range')\n+        current_col = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < current_col + numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            current_col += numcols\n+        else:\n+            raise IndexError('Column index out of range')\n+        return self.blocks[row_block, col_block][i - current_row, j - current_col]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
