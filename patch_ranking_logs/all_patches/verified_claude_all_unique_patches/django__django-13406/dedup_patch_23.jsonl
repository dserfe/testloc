{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..e2014aa 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,13 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        # Preserve values()/values_list() state\n+        if hasattr(self, '_fields'):\n+            state['_fields'] = self._fields\n+        if hasattr(self, '_iterable_class'):\n+            state['_iterable_class'] = self._iterable_class\n+        return state\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n@@ -257,7 +263,13 @@ class QuerySet:\n                 RuntimeWarning,\n                 stacklevel=2,\n             )\n+        \n+        # Restore the queryset state\n         self.__dict__.update(state)\n+        \n+        # If this was a values/values_list query, ensure query is properly configured\n+        if hasattr(self, '_fields'):\n+            self.query.set_values(self._fields)\n \n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n", "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..2f53ac8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -143,7 +143,12 @@ class QuerySet:\n         return obj\n     def __getstate__(self):\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        state = {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        if hasattr(self, '_fields'):\n+            state['_fields'] = self._fields\n+        if hasattr(self, '_iterable_class'):\n+            state['_iterable_class'] = self._iterable_class\n+        return state\n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n         if pickled_version:\n@@ -152,6 +157,8 @@ class QuerySet:\n         else:\n             warnings.warn(\"Pickled queryset instance's Django version is not specified.\", RuntimeWarning, stacklevel=2)\n         self.__dict__.update(state)\n+        if hasattr(self, '_fields'):\n+            self.query.set_values(self._fields)\n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n         if len(data) > REPR_OUTPUT_SIZE:\n", "normalized_occurrence": 1}
