{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..a08c435 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,13 +100,21 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Handle django.db.models as a special case\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            name = \"models.%s\" % path[16:]\n+            return name, imports\n+            \n+        # Find the module by looking for the last portion that exists as a module\n+        module_name = path\n+        while \".\" in module_name:\n+            if importlib.util.find_spec(module_name) is not None:\n+                break\n+            module_name = module_name.rsplit(\".\", 1)[0]\n+            \n+        imports = {\"import %s\" % module_name}\n+        name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..2cb486f 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,13 +70,17 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n+            name = 'models.%s' % path[16:]\n+            return (name, imports)\n+        module_name = path\n+        while '.' in module_name:\n+            if importlib.util.find_spec(module_name) is not None:\n+                break\n+            module_name = module_name.rsplit('.', 1)[0]\n+        imports = {'import %s' % module_name}\n+        name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
