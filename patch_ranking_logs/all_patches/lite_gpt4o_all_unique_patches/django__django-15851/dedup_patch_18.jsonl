{"model_name_or_path": "agentless", "instance_id": "django__django-15851", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 55aff39..45b2706 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -54,6 +54,9 @@ class DatabaseClient(BaseDatabaseClient):\n         return args, (env or None)\n \n     def runshell(self, parameters):\n+        # Ensure the database name is placed at the end of the parameters list.\n+        args, env = self._construct_args()\n+        parameters = args + parameters\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n@@ -61,4 +64,4 @@ class DatabaseClient(BaseDatabaseClient):\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 8620a6f..fed9a7c 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -45,6 +45,8 @@ class DatabaseClient(BaseDatabaseClient):\n             env['PGPASSFILE'] = str(passfile)\n         return (args, env or None)\n     def runshell(self, parameters):\n+        args, env = self._construct_args()\n+        parameters = args + parameters\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n", "normalized_occurrence": 1}
