{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..304ea48 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -78,12 +78,17 @@ ModuleEntry = NamedTuple('ModuleEntry', [('docname', str),\n                                          ('deprecated', bool)])\n \n \n-def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xref:\n+def type_to_xref(text: str, env: BuildEnvironment = None) -> List[addnodes.pending_xref]:\n     \"\"\"Convert a type string to a cross reference node.\"\"\"\n-    if text == 'None':\n-        reftype = 'obj'\n-    else:\n-        reftype = 'class'\n+    refs = []\n+    for part in text.split('.'):\n+        if part == 'None':\n+            reftype = 'obj'\n+        else:\n+            reftype = 'class'\n+        refs.append(pending_xref('', nodes.Text(part),\n+                                 refdomain='py', reftype=reftype, reftarget=part, **kwargs))\n+    return refs\n \n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'),\n@@ -91,8 +96,7 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     else:\n         kwargs = {}\n \n-    return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+    return refs\n \n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n@@ -157,9 +161,13 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n     try:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n-        for i, node in enumerate(result):\n+        new_result = []\n+        for node in result:\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                new_result.extend(type_to_xref(str(node), env))\n+            else:\n+                new_result.append(node)\n+        return new_result\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..16465bc 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -34,16 +34,20 @@ py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n-def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n-    if text == 'None':\n-        reftype = 'obj'\n-    else:\n-        reftype = 'class'\n+def type_to_xref(text: str, env: BuildEnvironment=None) -> List[addnodes.pending_xref]:\n+    refs = []\n+    for part in text.split('.'):\n+        if part == 'None':\n+            reftype = 'obj'\n+        else:\n+            reftype = 'class'\n+        refs.append(pending_xref('', nodes.Text(part), refdomain='py', reftype=reftype, reftarget=part, **kwargs))\n+    return refs\n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n     else:\n         kwargs = {}\n-    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+    return refs\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -98,9 +102,13 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n     try:\n         tree = ast_parse(annotation)\n         result = unparse(tree)\n-        for i, node in enumerate(result):\n+        new_result = []\n+        for node in result:\n             if isinstance(node, nodes.Text):\n-                result[i] = type_to_xref(str(node), env)\n+                new_result.extend(type_to_xref(str(node), env))\n+            else:\n+                new_result.append(node)\n+        return new_result\n         return result\n     except SyntaxError:\n         return [type_to_xref(annotation, env)]\n", "normalized_occurrence": 1}
