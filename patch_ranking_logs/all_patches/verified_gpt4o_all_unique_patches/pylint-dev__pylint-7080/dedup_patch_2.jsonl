{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 440e6fe..1f70e61 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -593,6 +593,8 @@ class PyLinter(\n             ):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n+                    if _is_ignored_file(root, [], [], self._ignore_paths):\n+                        continue\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n                         continue\n@@ -775,7 +777,7 @@ class PyLinter(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex afb1178..c04962d 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -228,6 +228,8 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n+                    if _is_ignored_file(root, [], [], self._ignore_paths):\n+                        continue\n                     if any((root.startswith(s) for s in skip_subtrees)):\n                         continue\n                     if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n@@ -306,7 +308,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr['basename'])\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n-        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths)\n+        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths)\n         for error in errors:\n             message = modname = error['mod']\n             key = error['key']\n", "normalized_occurrence": 1}
