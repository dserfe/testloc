{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..45b7fa8 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -88,6 +88,12 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n         return Add.fromiter(convert_to(i, target_units, unit_system) for i in expr.args)\n \n     expr = sympify(expr)\n+    \n+    # Check dimensional compatibility\n+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    target_dim = Dimension(unit_system.get_dimensional_expr(Mul.fromiter(target_units)))\n+    if expr_dim != target_dim:\n+        return expr\n \n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..747aa0d 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -28,6 +28,10 @@ def convert_to(expr, target_units, unit_system='SI'):\n     if isinstance(expr, Add):\n         return Add.fromiter((convert_to(i, target_units, unit_system) for i in expr.args))\n     expr = sympify(expr)\n+    expr_dim = Dimension(unit_system.get_dimensional_expr(expr))\n+    target_dim = Dimension(unit_system.get_dimensional_expr(Mul.fromiter(target_units)))\n+    if expr_dim != target_dim:\n+        return expr\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n     def get_total_scale_factor(expr):\n", "normalized_occurrence": 1}
