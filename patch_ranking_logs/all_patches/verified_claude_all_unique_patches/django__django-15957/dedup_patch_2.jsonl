{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..36e7986 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -2145,16 +2145,17 @@ class Prefetch:\n         self.prefetch_through = lookup\n         # `prefetch_to` is the path to the attribute that stores the result.\n         self.prefetch_to = lookup\n-        if queryset is not None and (\n-            isinstance(queryset, RawQuerySet)\n-            or (\n-                hasattr(queryset, \"_iterable_class\")\n-                and not issubclass(queryset._iterable_class, ModelIterable)\n-            )\n-        ):\n-            raise ValueError(\n-                \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n-            )\n+        if queryset is not None:\n+            if (isinstance(queryset, RawQuerySet) or\n+                (hasattr(queryset, \"_iterable_class\") and\n+                 not issubclass(queryset._iterable_class, ModelIterable))):\n+                raise ValueError(\n+                    \"Prefetch querysets cannot use raw(), values(), and values_list().\"\n+                )\n+            if queryset._result_cache is None and queryset.query.low_mark or queryset.query.high_mark:\n+                raise ValueError(\n+                    \"Prefetch querysets cannot be sliced.\"\n+                )\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(\n                 lookup.split(LOOKUP_SEP)[:-1] + [to_attr]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..a9440bc 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1117,8 +1117,11 @@ class Prefetch:\n     def __init__(self, lookup, queryset=None, to_attr=None):\n         self.prefetch_through = lookup\n         self.prefetch_to = lookup\n-        if queryset is not None and (isinstance(queryset, RawQuerySet) or (hasattr(queryset, '_iterable_class') and (not issubclass(queryset._iterable_class, ModelIterable)))):\n-            raise ValueError('Prefetch querysets cannot use raw(), values(), and values_list().')\n+        if queryset is not None:\n+            if isinstance(queryset, RawQuerySet) or (hasattr(queryset, '_iterable_class') and (not issubclass(queryset._iterable_class, ModelIterable))):\n+                raise ValueError('Prefetch querysets cannot use raw(), values(), and values_list().')\n+            if queryset._result_cache is None and queryset.query.low_mark or queryset.query.high_mark:\n+                raise ValueError('Prefetch querysets cannot be sliced.')\n         if to_attr:\n             self.prefetch_to = LOOKUP_SEP.join(lookup.split(LOOKUP_SEP)[:-1] + [to_attr])\n         self.queryset = queryset\n", "normalized_occurrence": 1}
