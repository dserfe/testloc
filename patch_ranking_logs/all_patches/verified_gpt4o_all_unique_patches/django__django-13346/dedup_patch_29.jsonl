{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..f3fc78c 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -455,7 +455,20 @@ class KeyTransformIRegex(CaseInsensitiveMixin, KeyTransformTextLookupMixin, look\n     pass\n \n \n-class KeyTransformNumericLookupMixin:\n+class KeyTransformIn(lookups.In):\n+    def process_lhs(self, compiler, connection):\n+        lhs, lhs_params = super().process_lhs(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            lhs = 'JSON_EXTRACT(%s, %%s)' % lhs\n+        return lhs, lhs_params\n+\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor in ['oracle', 'sqlite']:\n+            rhs_params = [json.dumps(value) if isinstance(value, (int, float, bool)) else value for value in rhs_params]\n+        elif connection.vendor == 'mysql':\n+            rhs_params = [json.dumps(value) for value in rhs_params]\n+        return rhs, rhs_params\n     def process_rhs(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n         if not connection.features.has_native_json_field:\n@@ -480,6 +493,7 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n \n \n KeyTransform.register_lookup(KeyTransformExact)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n KeyTransform.register_lookup(KeyTransformIContains)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..9d4498f 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -299,7 +299,19 @@ class KeyTransformRegex(KeyTransformTextLookupMixin, lookups.Regex):\n     pass\n class KeyTransformIRegex(CaseInsensitiveMixin, KeyTransformTextLookupMixin, lookups.IRegex):\n     pass\n-class KeyTransformNumericLookupMixin:\n+class KeyTransformIn(lookups.In):\n+    def process_lhs(self, compiler, connection):\n+        lhs, lhs_params = super().process_lhs(compiler, connection)\n+        if connection.vendor == 'sqlite':\n+            lhs = 'JSON_EXTRACT(%s, %%s)' % lhs\n+        return (lhs, lhs_params)\n+    def process_rhs(self, compiler, connection):\n+        rhs, rhs_params = super().process_rhs(compiler, connection)\n+        if connection.vendor in ['oracle', 'sqlite']:\n+            rhs_params = [json.dumps(value) if isinstance(value, (int, float, bool)) else value for value in rhs_params]\n+        elif connection.vendor == 'mysql':\n+            rhs_params = [json.dumps(value) for value in rhs_params]\n+        return (rhs, rhs_params)\n     def process_rhs(self, compiler, connection):\n         rhs, rhs_params = super().process_rhs(compiler, connection)\n         if not connection.features.has_native_json_field:\n@@ -314,6 +326,7 @@ class KeyTransformGt(KeyTransformNumericLookupMixin, lookups.GreaterThan):\n class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual):\n     pass\n KeyTransform.register_lookup(KeyTransformExact)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n KeyTransform.register_lookup(KeyTransformIContains)\n", "normalized_occurrence": 1}
