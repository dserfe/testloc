{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..f5f6799 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -344,6 +344,10 @@ def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy,\n     return spmatrix\n \n \n+import warnings\n+from sklearn.exceptions import DataConversionWarning\n+...\n+\n def _ensure_no_complex_data(array):\n     if hasattr(array, 'dtype') and array.dtype is not None \\\n             and hasattr(array.dtype, 'kind') and array.dtype.kind == \"c\":\n@@ -538,6 +542,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                     \"if it contains a single sample.\".format(array))\n \n         # in the future np.flexible dtypes will be handled like object dtypes\n+        if dtype_orig is not None and hasattr(dtype_orig, 'kind') and dtype_orig.kind == \"O\":\n+            dtype = np.float64\n         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n             warnings.warn(\n                 \"Beginning in version 0.22, arrays of strings will be \"\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..ed4ab3c 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -116,6 +116,9 @@ def _ensure_sparse_format(spmatrix, accept_sparse, dtype, copy, force_all_finite\n         else:\n             _assert_all_finite(spmatrix.data, allow_nan=force_all_finite == 'allow-nan')\n     return spmatrix\n+import warnings\n+from sklearn.exceptions import DataConversionWarning\n+...\n def _ensure_no_complex_data(array):\n     if hasattr(array, 'dtype') and array.dtype is not None and hasattr(array.dtype, 'kind') and (array.dtype.kind == 'c'):\n         raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n@@ -164,6 +167,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n                 raise ValueError('Expected 2D array, got scalar array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n             if array.ndim == 1:\n                 raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n+        if dtype_orig is not None and hasattr(dtype_orig, 'kind') and (dtype_orig.kind == 'O'):\n+            dtype = np.float64\n         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n         if dtype_numeric and array.dtype.kind == 'O':\n", "normalized_occurrence": 1}
