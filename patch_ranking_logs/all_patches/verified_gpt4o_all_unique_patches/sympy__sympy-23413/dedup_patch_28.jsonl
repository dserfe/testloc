{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23413", "model_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex aec23b1..61ebb2d 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -223,17 +223,15 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n             return 1\n \n     if M.rows == 2 and M.cols == 2:\n-        zeros = [iszerofunc(x) for x in M]\n-\n-        if False not in zeros and None not in zeros:\n+        if iszerofunc(M[0, 0]) and iszerofunc(M[1, 1]) and iszerofunc(M[0, 1]) and iszerofunc(M[1, 0]):\n             return 0\n \n-        d = M.det()\n-\n-        if iszerofunc(d) and False in zeros:\n+        if iszerofunc(M[1, 1]) and not iszerofunc(M[0, 0]):\n+            return 1\n+        if not iszerofunc(M[1, 1]):\n+            if not iszerofunc(M[1, 0]):\n+                return 2\n             return 1\n-        if iszerofunc(d) is False:\n-            return 2\n \n     mat, _       = _permute_complexity_right(M, iszerofunc=iszerofunc)\n     _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/reductions.py b/sympy/matrices/reductions.py\nindex bf0ff55..6477f09 100644\n--- a/sympy/matrices/reductions.py\n+++ b/sympy/matrices/reductions.py\n@@ -80,14 +80,14 @@ def _rank(M, iszerofunc=_iszero, simplify=False):\n         if False in zeros:\n             return 1\n     if M.rows == 2 and M.cols == 2:\n-        zeros = [iszerofunc(x) for x in M]\n-        if False not in zeros and None not in zeros:\n+        if iszerofunc(M[0, 0]) and iszerofunc(M[1, 1]) and iszerofunc(M[0, 1]) and iszerofunc(M[1, 0]):\n             return 0\n-        d = M.det()\n-        if iszerofunc(d) and False in zeros:\n+        if iszerofunc(M[1, 1]) and (not iszerofunc(M[0, 0])):\n+            return 1\n+        if not iszerofunc(M[1, 1]):\n+            if not iszerofunc(M[1, 0]):\n+                return 2\n             return 1\n-        if iszerofunc(d) is False:\n-            return 2\n     mat, _ = _permute_complexity_right(M, iszerofunc=iszerofunc)\n     _, pivots, _ = _row_reduce(mat, iszerofunc, simpfunc, normalize_last=True, normalize=False, zero_above=False)\n     return len(pivots)\n", "normalized_occurrence": 1}
