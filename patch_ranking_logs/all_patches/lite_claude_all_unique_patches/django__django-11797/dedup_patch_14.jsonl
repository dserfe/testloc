{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..7c2b543 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -99,11 +99,22 @@ class SQLCompiler:\n             # Backwards compatibility hack for setting query.group_by. Remove\n             # when  we have public API way of forcing the GROUP BY clause.\n             # Converts string references to expressions.\n-            for expr in self.query.group_by:\n-                if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n+            if isinstance(self.query.group_by, (list, tuple)):\n+                # When group_by is a list/tuple, use it as the definitive grouping\n+                for expr in self.query.group_by:\n+                    if not hasattr(expr, 'as_sql'):\n+                        expressions.append(self.query.resolve_ref(expr))\n+                    else:\n+                        expressions.append(expr)\n+                # Return early to prevent additional columns from being added\n+                return [(sql, params) for sql, params in \n+                       (self.compile(expr) for expr in expressions)]\n+            else:\n+                for expr in self.query.group_by:\n+                    if not hasattr(expr, 'as_sql'):\n+                        expressions.append(self.query.resolve_ref(expr))\n+                    else:\n+                        expressions.append(expr)\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..53d33ec 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -40,11 +40,19 @@ class SQLCompiler:\n             return []\n         expressions = []\n         if self.query.group_by is not True:\n-            for expr in self.query.group_by:\n-                if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n+            if isinstance(self.query.group_by, (list, tuple)):\n+                for expr in self.query.group_by:\n+                    if not hasattr(expr, 'as_sql'):\n+                        expressions.append(self.query.resolve_ref(expr))\n+                    else:\n+                        expressions.append(expr)\n+                return [(sql, params) for sql, params in (self.compile(expr) for expr in expressions)]\n+            else:\n+                for expr in self.query.group_by:\n+                    if not hasattr(expr, 'as_sql'):\n+                        expressions.append(self.query.resolve_ref(expr))\n+                    else:\n+                        expressions.append(expr)\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 1}
