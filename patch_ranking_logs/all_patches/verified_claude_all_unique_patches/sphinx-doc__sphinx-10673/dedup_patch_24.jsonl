{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 52ac0d3..d9e2cd3 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -164,15 +164,32 @@ class TocTree:\n                                           'doesn\\'t have a title: no link will be generated'),\n                                        ref, location=toctreenode)\n                 except KeyError:\n-                    # this is raised if the included file does not exist\n-                    if excluded(self.env.doc2path(ref, False)):\n-                        message = __('toctree contains reference to excluded document %r')\n-                    elif not included(self.env.doc2path(ref, False)):\n-                        message = __('toctree contains reference to non-included document %r')\n+                    # Handle special Sphinx-generated pages\n+                    if ref in ('genindex', 'modindex', 'search'):\n+                        if ref == 'genindex':\n+                            title = _('Index')\n+                        elif ref == 'modindex':\n+                            title = _('Module Index')\n+                        else:  # search\n+                            title = _('Search Page')\n+                        reference = nodes.reference('', '', internal=True,\n+                                                refuri=ref,\n+                                                anchorname='',\n+                                                *[nodes.Text(title)])\n+                        para = addnodes.compact_paragraph('', '', reference)\n+                        item = nodes.list_item('', para)\n+                        toc = nodes.bullet_list('', item)\n                     else:\n-                        message = __('toctree contains reference to nonexisting document %r')\n+                        # this is raised if the included file does not exist\n+                        if excluded(self.env.doc2path(ref, False)):\n+                            message = __('toctree contains reference to excluded document %r')\n+                        elif not included(self.env.doc2path(ref, False)):\n+                            message = __('toctree contains reference to non-included document %r')\n+                        else:\n+                            message = __('toctree contains reference to nonexisting document %r')\n \n-                    logger.warning(message, ref, location=toctreenode)\n+                        logger.warning(message, ref, location=toctreenode)\n+                        continue\n                 else:\n                     # if titles_only is given, only keep the main title and\n                     # sub-toctrees\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 07fcee3..a33f87d 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -86,13 +86,26 @@ class TocTree:\n                     if not toc.children:\n                         logger.warning(__(\"toctree contains reference to document %r that doesn't have a title: no link will be generated\"), ref, location=toctreenode)\n                 except KeyError:\n-                    if excluded(self.env.doc2path(ref, False)):\n-                        message = __('toctree contains reference to excluded document %r')\n-                    elif not included(self.env.doc2path(ref, False)):\n-                        message = __('toctree contains reference to non-included document %r')\n+                    if ref in ('genindex', 'modindex', 'search'):\n+                        if ref == 'genindex':\n+                            title = _('Index')\n+                        elif ref == 'modindex':\n+                            title = _('Module Index')\n+                        else:\n+                            title = _('Search Page')\n+                        reference = nodes.reference('', '', *[nodes.Text(title)], internal=True, refuri=ref, anchorname='')\n+                        para = addnodes.compact_paragraph('', '', reference)\n+                        item = nodes.list_item('', para)\n+                        toc = nodes.bullet_list('', item)\n                     else:\n-                        message = __('toctree contains reference to nonexisting document %r')\n-                    logger.warning(message, ref, location=toctreenode)\n+                        if excluded(self.env.doc2path(ref, False)):\n+                            message = __('toctree contains reference to excluded document %r')\n+                        elif not included(self.env.doc2path(ref, False)):\n+                            message = __('toctree contains reference to non-included document %r')\n+                        else:\n+                            message = __('toctree contains reference to nonexisting document %r')\n+                        logger.warning(message, ref, location=toctreenode)\n+                        continue\n                 else:\n                     if titles_only:\n                         children = cast(Iterable[nodes.Element], toc)\n", "normalized_occurrence": 1}
