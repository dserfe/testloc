{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 7b0ad01..91d1ffe 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -151,7 +151,8 @@ class DenseMatrix(MatrixBase):\n         # we assume both arguments are dense matrices since\n         # sparse matrices have a higher priority\n         mat = [a + b for a,b in zip(self._mat, other._mat)]\n-        return classof(self, other)._new(self.rows, self.cols, mat, copy=False)\n+        new_cols = self.cols + other.cols if self.rows == 0 and other.rows == 0 else self.cols\n+        return classof(self, other)._new(self.rows, new_cols, mat, copy=False)\n \n     def _eval_extract(self, rowsList, colsList):\n         mat = self._mat\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex edd691e..a5df6f5 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -78,7 +78,8 @@ class DenseMatrix(MatrixBase):\n         return self._new(rhs.rows, rhs.cols, lambda i, j: rhs[i, j] / self[i, i])\n     def _eval_add(self, other):\n         mat = [a + b for a, b in zip(self._mat, other._mat)]\n-        return classof(self, other)._new(self.rows, self.cols, mat, copy=False)\n+        new_cols = self.cols + other.cols if self.rows == 0 and other.rows == 0 else self.cols\n+        return classof(self, other)._new(self.rows, new_cols, mat, copy=False)\n     def _eval_extract(self, rowsList, colsList):\n         mat = self._mat\n         cols = self.cols\n", "normalized_occurrence": 1}
