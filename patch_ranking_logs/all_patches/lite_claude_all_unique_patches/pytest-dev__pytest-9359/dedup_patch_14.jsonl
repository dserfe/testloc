{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..7d594ef 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -603,8 +603,10 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n             elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n                 _write_and_reset()\n             elif lines and lineno not in seen_lines:\n-                lines.append(line)\n-                seen_lines.add(lineno)\n+                # Only append lines that belong to the actual assertion\n+                if not hasattr(lines, '_assert_lineno') or lineno == lines._assert_lineno:\n+                    lines.append(line)\n+                    seen_lines.add(lineno)\n \n     return ret\n \n@@ -891,6 +893,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             else:\n                 assertmsg = ast.Str(\"\")\n                 gluestr = \"assert \"\n+            # Only include the actual assertion line in the error message\n             err_explanation = ast.BinOp(ast.Str(gluestr), ast.Add(), msg)\n             err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..9934b8f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -346,8 +346,9 @@ def _get_assertion_exprs(src: bytes) -> Dict[int, str]:\n             elif tp in {tokenize.NEWLINE, tokenize.ENDMARKER}:\n                 _write_and_reset()\n             elif lines and lineno not in seen_lines:\n-                lines.append(line)\n-                seen_lines.add(lineno)\n+                if not hasattr(lines, '_assert_lineno') or lineno == lines._assert_lineno:\n+                    lines.append(line)\n+                    seen_lines.add(lineno)\n     return ret\n class AssertionRewriter(ast.NodeVisitor):\n     def __init__(self, module_path: Optional[str], config: Optional[Config], source: bytes) -> None:\n", "normalized_occurrence": 1}
