{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..3e1dc97 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -381,7 +381,8 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n                 mat, ind = [self._string_var(v) for v in val]\n                 local_decs.append(\"    cdef {0} = {1}.shape[{2}]\".format(proto, mat, ind))\n             local_decs.extend([\"    cdef {0}\".format(self._declare_arg(a)) for a in py_loc])\n-            declarations = \"\\n\".join(local_decs)\n+            # Ensure all arguments are declared properly\n+            declarations = \"\\n\".join(local_decs + [\"    cdef {0}\".format(self._prototype_arg(a)) for a in py_args])\n             if declarations:\n                 declarations = declarations + \"\\n\"\n \n@@ -433,7 +434,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n         # Filter inferred arguments from py_args\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        py_args = [a for a in py_args if a.name not in py_inferred]\n         return py_returns, py_args, py_locals, py_inferred\n \n     def _prototype_arg(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..97032e7 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -149,7 +149,7 @@ class CythonCodeWrapper(CodeWrapper):\n                 mat, ind = [self._string_var(v) for v in val]\n                 local_decs.append('    cdef {0} = {1}.shape[{2}]'.format(proto, mat, ind))\n             local_decs.extend(['    cdef {0}'.format(self._declare_arg(a)) for a in py_loc])\n-            declarations = '\\n'.join(local_decs)\n+            declarations = '\\n'.join(local_decs + ['    cdef {0}'.format(self._prototype_arg(a)) for a in py_args])\n             if declarations:\n                 declarations = declarations + '\\n'\n             args_c = ', '.join([self._call_arg(a) for a in routine.arguments])\n@@ -188,7 +188,7 @@ class CythonCodeWrapper(CodeWrapper):\n         for arg in args:\n             if arg.name in py_inferred:\n                 py_inferred[arg] = py_inferred.pop(arg.name)\n-        py_args = [a for a in py_args if a not in py_inferred]\n+        py_args = [a for a in py_args if a.name not in py_inferred]\n         return (py_returns, py_args, py_locals, py_inferred)\n     def _prototype_arg(self, arg):\n         mat_dec = 'np.ndarray[{mtype}, ndim={ndim}] {name}'\n", "normalized_occurrence": 1}
