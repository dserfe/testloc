{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..a449b5e 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1370,7 +1370,7 @@ class PythonDomain(Domain):\n \n def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n                      node: pending_xref, contnode: Element) -> Element:\n-    \"\"\"Do not emit nitpicky warnings for built-in types.\"\"\"\n+    \"\"\"Do not emit nitpicky warnings for built-in types and standard library types.\"\"\"\n     def istyping(s: str) -> bool:\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n@@ -1383,6 +1383,17 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        module = node.get('py:module', '')\n+        \n+        # Handle standard library module references\n+        if module:\n+            try:\n+                mod = __import__(module, None, None, [''])\n+                if hasattr(mod, reftarget) and inspect.isclass(getattr(mod, reftarget)):\n+                    return contnode\n+            except ImportError:\n+                pass\n+\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             # built-in class\n             return contnode\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..9cd2334 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -843,6 +843,14 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        module = node.get('py:module', '')\n+        if module:\n+            try:\n+                mod = __import__(module, None, None, [''])\n+                if hasattr(mod, reftarget) and inspect.isclass(getattr(mod, reftarget)):\n+                    return contnode\n+            except ImportError:\n+                pass\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n", "normalized_occurrence": 1}
