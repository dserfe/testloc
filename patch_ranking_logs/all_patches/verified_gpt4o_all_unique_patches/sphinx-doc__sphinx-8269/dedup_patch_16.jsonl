{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..c23425d 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -166,10 +166,22 @@ class CheckExternalLinksBuilder(Builder):\n                     # Read the whole document and see if #anchor exists\n                     response = requests.get(req_url, stream=True, config=self.app.config,\n                                             auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n+                    try:\n+                        response.raise_for_status()\n+                        found = check_anchor(response, unquote(anchor))\n+                    except HTTPError as err:\n+                        if err.response.status_code == 401:\n+                            # We'll take \"Unauthorized\" as working.\n+                            return 'working', ' - unauthorized', 0\n+                        elif err.response.status_code == 503:\n+                            # We'll take \"Service Unavailable\" as ignored.\n+                            return 'ignored', str(err), 0\n+                        else:\n+                            return 'broken', str(err), 0\n \n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        if not found:\n+                            return 'broken', __(\"Anchor '%s' not found\") % anchor, 0\n                 else:\n                     try:\n                         # try a HEAD request first, which should be easier on\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex ace1ed3..8118ab9 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -97,9 +97,19 @@ class CheckExternalLinksBuilder(Builder):\n             try:\n                 if anchor and self.app.config.linkcheck_anchors:\n                     response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n-                    found = check_anchor(response, unquote(anchor))\n+                    try:\n+                        response.raise_for_status()\n+                        found = check_anchor(response, unquote(anchor))\n+                    except HTTPError as err:\n+                        if err.response.status_code == 401:\n+                            return ('working', ' - unauthorized', 0)\n+                        elif err.response.status_code == 503:\n+                            return ('ignored', str(err), 0)\n+                        else:\n+                            return ('broken', str(err), 0)\n                     if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n+                        if not found:\n+                            return ('broken', __(\"Anchor '%s' not found\") % anchor, 0)\n                 else:\n                     try:\n                         response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n", "normalized_occurrence": 1}
