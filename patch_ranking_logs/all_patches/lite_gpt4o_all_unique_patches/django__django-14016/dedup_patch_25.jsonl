{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..99c3857 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -51,6 +51,14 @@ class Q(tree.Node):\n         elif not self:\n             return copy.deepcopy(other)\n \n+        def _convert_non_pickleable_objects(q):\n+            for child in q.children:\n+                if isinstance(child, tuple) and hasattr(child[1], '__iter__') and not isinstance(child[1], (str, bytes, bytearray)):\n+                    child = (child[0], list(child[1]))\n+            return q\n+\n+        self = _convert_non_pickleable_objects(self)\n+        other = _convert_non_pickleable_objects(other)\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n@@ -64,6 +72,14 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __invert__(self):\n+        def _convert_non_pickleable_objects(q):\n+            for child in q.children:\n+                if isinstance(child, tuple) and hasattr(child[1], '__iter__') and not isinstance(child[1], (str, bytes, bytearray)):\n+                    child = (child[0], list(child[1]))\n+            return q\n+\n+        self = _convert_non_pickleable_objects(self)\n+        other = _convert_non_pickleable_objects(other)\n         obj = type(self)()\n         obj.add(self, self.AND)\n         obj.negate()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..d3e3fa3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -24,6 +24,13 @@ class Q(tree.Node):\n             return copy.deepcopy(self)\n         elif not self:\n             return copy.deepcopy(other)\n+        def _convert_non_pickleable_objects(q):\n+            for child in q.children:\n+                if isinstance(child, tuple) and hasattr(child[1], '__iter__') and (not isinstance(child[1], (str, bytes, bytearray))):\n+                    child = (child[0], list(child[1]))\n+            return q\n+        self = _convert_non_pickleable_objects(self)\n+        other = _convert_non_pickleable_objects(other)\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n@@ -34,6 +41,13 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __invert__(self):\n+        def _convert_non_pickleable_objects(q):\n+            for child in q.children:\n+                if isinstance(child, tuple) and hasattr(child[1], '__iter__') and (not isinstance(child[1], (str, bytes, bytearray))):\n+                    child = (child[0], list(child[1]))\n+            return q\n+        self = _convert_non_pickleable_objects(self)\n+        other = _convert_non_pickleable_objects(other)\n         obj = type(self)()\n         obj.add(self, self.AND)\n         obj.negate()\n", "normalized_occurrence": 1}
