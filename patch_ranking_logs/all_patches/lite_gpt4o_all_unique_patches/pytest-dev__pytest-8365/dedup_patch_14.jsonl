{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8365", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex cae5caf..926d249 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = sanitize_username(get_user() or \"unknown\")\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -148,7 +148,11 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n \n \n-def get_user() -> Optional[str]:\n+import re\n+\n+def sanitize_username(username: str) -> str:\n+    \"\"\"Sanitize the username by removing or replacing illegal characters.\"\"\"\n+    return re.sub(r'[^a-zA-Z0-9_-]', '_', username)\n     \"\"\"Return the current user name, or None if getuser() does not work\n     in the current environment (see #1010).\"\"\"\n     import getpass\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 6f08c0a..4857bac 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -57,7 +57,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get('PYTEST_DEBUG_TEMPROOT')\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or 'unknown'\n+            user = sanitize_username(get_user() or 'unknown')\n             rootdir = temproot.joinpath(f'pytest-of-{user}')\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(prefix='pytest-', root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT)\n@@ -76,7 +76,9 @@ class TempdirFactory:\n         return py.path.local(self._tmppath_factory.mktemp(basename, numbered).resolve())\n     def getbasetemp(self) -> py.path.local:\n         return py.path.local(self._tmppath_factory.getbasetemp().resolve())\n-def get_user() -> Optional[str]:\n+import re\n+def sanitize_username(username: str) -> str:\n+    return re.sub('[^a-zA-Z0-9_-]', '_', username)\n     import getpass\n     try:\n         return getpass.getuser()\n", "normalized_occurrence": 1}
