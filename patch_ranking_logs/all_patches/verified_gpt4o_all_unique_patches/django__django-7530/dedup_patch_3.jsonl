{"model_name_or_path": "agentless", "instance_id": "django__django-7530", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex bea18af..27df9cc 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -103,9 +103,9 @@ class Command(BaseCommand):\n             connection = connections[alias]\n             if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n                     # At least one model must be migrated to the database.\n-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n-                    for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n+                    router.allow_migrate(connection.alias, model._meta.app_label, model_name=model._meta.object_name)\n+                    for config in apps.get_app_configs()\n+                    for model in apps.get_models(config.label)\n             )):\n                 loader.check_consistent_history(connection)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex c375091..c7dc296 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -55,7 +55,7 @@ class Command(BaseCommand):\n         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n         for alias in sorted(aliases_to_check):\n             connection = connections[alias]\n-            if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models(app_label))):\n+            if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, model._meta.app_label, model_name=model._meta.object_name) for config in apps.get_app_configs() for model in apps.get_models(config.label))):\n                 loader.check_consistent_history(connection)\n         conflicts = loader.detect_conflicts()\n         if app_labels:\n", "normalized_occurrence": 1}
