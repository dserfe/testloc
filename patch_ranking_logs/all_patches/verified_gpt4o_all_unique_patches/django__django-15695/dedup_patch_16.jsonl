{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..68334c2 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -959,7 +959,28 @@ class RenameIndex(IndexOperation):\n             )\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n-            old_index = from_model_state.get_index_by_name(self.old_name)\n+            if self.old_name:\n+                old_index = from_model_state.get_index_by_name(self.old_name)\n+            else:\n+                columns = [\n+                    from_model_state.get_field(field).column for field in self.old_fields\n+                ]\n+                matching_index_name = schema_editor._constraint_names(\n+                    from_model_state, column_names=columns, index=True\n+                )\n+                if len(matching_index_name) != 1:\n+                    raise ValueError(\n+                        \"Found wrong number (%s) of indexes for %s(%s).\"\n+                        % (\n+                            len(matching_index_name),\n+                            from_model_state.db_table,\n+                            \", \".join(columns),\n+                        )\n+                    )\n+                old_index = models.Index(\n+                    fields=self.old_fields,\n+                    name=matching_index_name[0],\n+                )\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..ec1a28d 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -430,7 +430,14 @@ class RenameIndex(IndexOperation):\n             old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n-            old_index = from_model_state.get_index_by_name(self.old_name)\n+            if self.old_name:\n+                old_index = from_model_state.get_index_by_name(self.old_name)\n+            else:\n+                columns = [from_model_state.get_field(field).column for field in self.old_fields]\n+                matching_index_name = schema_editor._constraint_names(from_model_state, column_names=columns, index=True)\n+                if len(matching_index_name) != 1:\n+                    raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), from_model_state.db_table, ', '.join(columns)))\n+                old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n", "normalized_occurrence": 1}
