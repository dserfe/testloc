{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..da0c94b 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,34 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        # Check if this is an all() or any() call with a generator or list comprehension\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in ('all', 'any') and\n+            len(call.args) == 1 and\n+            (isinstance(call.args[0], ast.GeneratorExp) or \n+             isinstance(call.args[0], ast.ListComp))):\n+            \n+            # Extract the generator/listcomp parts\n+            gen = call.args[0]\n+            elt = gen.elt  # The expression being evaluated for each item\n+            for_loop = gen.generators[0]  # Get the first (and usually only) for loop\n+            \n+            # Create a for loop that checks each item\n+            target = for_loop.target\n+            iter_expr = for_loop.iter\n+            \n+            # Create the loop body - assert the condition for each item\n+            test = elt\n+            \n+            # Create a new for loop AST node\n+            new_node = ast.For(\n+                target=target,\n+                iter=iter_expr,\n+                body=[ast.Assert(test=test, msg=None)],\n+                orelse=[]\n+            )\n+            \n+            return new_node, \"unrolled all/any call into for loop\"\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..912ce7e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,15 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1) and (isinstance(call.args[0], ast.GeneratorExp) or isinstance(call.args[0], ast.ListComp)):\n+            gen = call.args[0]\n+            elt = gen.elt\n+            for_loop = gen.generators[0]\n+            target = for_loop.target\n+            iter_expr = for_loop.iter\n+            test = elt\n+            new_node = ast.For(target=target, iter=iter_expr, body=[ast.Assert(test=test, msg=None)], orelse=[])\n+            return (new_node, 'unrolled all/any call into for loop')\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
