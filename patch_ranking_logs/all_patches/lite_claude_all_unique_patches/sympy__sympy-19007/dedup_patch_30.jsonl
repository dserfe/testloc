{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..c4fda42 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,34 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        if not i.is_number:\n+            # For symbolic indices, return an expression representing the element selection\n+            # from the appropriate blocks based on conditions\n+            from sympy import Piecewise\n+            row_blocks = []\n+            current_row = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                row_blocks.append((\n+                    self.blocks[row_block, 0][i - current_row, j],\n+                    (i >= current_row) & (i < current_row + numrows)\n+                ))\n+                current_row += numrows\n+            return Piecewise(*row_blocks)\n+        \n+        # For numeric indices, find the appropriate block\n+        row_pos = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if row_pos < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            row_pos -= numrows\n+        \n+        col_pos = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if col_pos < numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_pos -= numcols\n+        \n+        return self.blocks[row_block, col_block][row_pos, col_pos]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..31f742a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,25 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        if not i.is_number:\n+            from sympy import Piecewise\n+            row_blocks = []\n+            current_row = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                row_blocks.append((self.blocks[row_block, 0][i - current_row, j], (i >= current_row) & (i < current_row + numrows)))\n+                current_row += numrows\n+            return Piecewise(*row_blocks)\n+        row_pos = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if row_pos < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            row_pos -= numrows\n+        col_pos = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if col_pos < numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_pos -= numcols\n+        return self.blocks[row_block, col_block][row_pos, col_pos]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
