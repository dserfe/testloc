{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex d08f29d..bcaa60f 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -78,17 +78,35 @@ class CursorWrapper:\n \n     def _execute(self, sql, params, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n-        with self.db.wrap_database_errors:\n-            if params is None:\n-                # params default might be backend specific.\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+        retries = 5\n+        while retries > 0:\n+            try:\n+                with self.db.wrap_database_errors:\n+                    if params is None:\n+                        # params default might be backend specific.\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+            except sqlite3.OperationalError as e:\n+                if 'database is locked' in str(e) and retries > 0:\n+                    retries -= 1\n+                    time.sleep(0.1)\n+                else:\n+                    raise\n \n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n-        with self.db.wrap_database_errors:\n-            return self.cursor.executemany(sql, param_list)\n+        retries = 5\n+        while retries > 0:\n+            try:\n+                with self.db.wrap_database_errors:\n+                    return self.cursor.executemany(sql, param_list)\n+            except sqlite3.OperationalError as e:\n+                if 'database is locked' in str(e) and retries > 0:\n+                    retries -= 1\n+                    time.sleep(0.1)\n+                else:\n+                    raise\n \n \n class CursorDebugWrapper(CursorWrapper):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex 8a96ea8..44e7251 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -53,15 +53,33 @@ class CursorWrapper:\n         return executor(sql, params, many, context)\n     def _execute(self, sql, params, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n-        with self.db.wrap_database_errors:\n-            if params is None:\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+        retries = 5\n+        while retries > 0:\n+            try:\n+                with self.db.wrap_database_errors:\n+                    if params is None:\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+            except sqlite3.OperationalError as e:\n+                if 'database is locked' in str(e) and retries > 0:\n+                    retries -= 1\n+                    time.sleep(0.1)\n+                else:\n+                    raise\n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n-        with self.db.wrap_database_errors:\n-            return self.cursor.executemany(sql, param_list)\n+        retries = 5\n+        while retries > 0:\n+            try:\n+                with self.db.wrap_database_errors:\n+                    return self.cursor.executemany(sql, param_list)\n+            except sqlite3.OperationalError as e:\n+                if 'database is locked' in str(e) and retries > 0:\n+                    retries -= 1\n+                    time.sleep(0.1)\n+                else:\n+                    raise\n class CursorDebugWrapper(CursorWrapper):\n     def execute(self, sql, params=None):\n         with self.debug_sql(sql, params, use_last_executed_query=True):\n", "normalized_occurrence": 1}
