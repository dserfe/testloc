{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..4882109 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6756,6 +6756,9 @@ such objects\n             # stacked histograms together is 1\n             if density:\n                 tops = (tops / np.diff(bins)) / tops[-1].sum()\n+        elif density:  # Add normalization for non-stacked density plots\n+            for i in range(len(tops)):\n+                tops[i] = tops[i] / (tops[i].sum() * np.diff(bins))\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..c4ed5ca 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1955,6 +1955,9 @@ class Axes(_AxesBase):\n             tops = tops.cumsum(axis=0)\n             if density:\n                 tops = tops / np.diff(bins) / tops[-1].sum()\n+        elif density:\n+            for i in range(len(tops)):\n+                tops[i] = tops[i] / (tops[i].sum() * np.diff(bins))\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n", "normalized_occurrence": 2}
