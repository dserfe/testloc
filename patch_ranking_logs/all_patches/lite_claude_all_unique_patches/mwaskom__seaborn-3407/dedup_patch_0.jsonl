{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3407", "model_patch": "diff --git a/seaborn/_core/data.py b/seaborn/_core/data.py\nindex 37cf527..24cccfe 100644\n--- a/seaborn/_core/data.py\n+++ b/seaborn/_core/data.py\n@@ -203,6 +203,9 @@ class PlotData:\n                 # (isinstance(val, abc.Hashable) and val in source_data)\n                 (val_is_hashable and val in source_data)\n                 or (isinstance(val, str) and val in index)\n+                or (isinstance(source_data, pd.DataFrame) \n+                    and isinstance(source_data.columns, pd.MultiIndex)\n+                    and any(val in level for level in zip(*source_data.columns.levels)))\n             )\n \n             if val_as_data_key:\n@@ -211,6 +214,15 @@ class PlotData:\n                     plot_data[key] = source_data[val]\n                 elif val in index:\n                     plot_data[key] = index[val]\n+                elif (isinstance(source_data, pd.DataFrame) \n+                      and isinstance(source_data.columns, pd.MultiIndex)):\n+                    # Handle MultiIndex columns by concatenating values for the matching level\n+                    matches = []\n+                    for col in source_data.columns:\n+                        if val in col:\n+                            matches.append(col)\n+                    if matches:\n+                        plot_data[key] = source_data[matches].values.ravel()\n                 names[key] = ids[key] = str(val)\n \n             elif isinstance(val, str):\n@@ -257,4 +269,4 @@ class PlotData:\n         # TODO Note: this fails when variable specs *only* have scalars!\n         frame = pd.DataFrame(plot_data)\n \n-        return frame, names, ids\n+        return frame, names, ids\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/data.py b/seaborn/_core/data.py\nindex 69c6b95..a6d7361 100644\n--- a/seaborn/_core/data.py\n+++ b/seaborn/_core/data.py\n@@ -68,13 +68,20 @@ class PlotData:\n                 val_is_hashable = True\n             except TypeError:\n                 val_is_hashable = False\n-            val_as_data_key = val_is_hashable and val in source_data or (isinstance(val, str) and val in index)\n+            val_as_data_key = val_is_hashable and val in source_data or (isinstance(val, str) and val in index) or (isinstance(source_data, pd.DataFrame) and isinstance(source_data.columns, pd.MultiIndex) and any((val in level for level in zip(*source_data.columns.levels))))\n             if val_as_data_key:\n                 val = cast(ColumnName, val)\n                 if val in source_data:\n                     plot_data[key] = source_data[val]\n                 elif val in index:\n                     plot_data[key] = index[val]\n+                elif isinstance(source_data, pd.DataFrame) and isinstance(source_data.columns, pd.MultiIndex):\n+                    matches = []\n+                    for col in source_data.columns:\n+                        if val in col:\n+                            matches.append(col)\n+                    if matches:\n+                        plot_data[key] = source_data[matches].values.ravel()\n                 names[key] = ids[key] = str(val)\n             elif isinstance(val, str):\n                 err = f'Could not interpret value `{val}` for `{key}`. '\n", "normalized_occurrence": 1}
