{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..27499c8 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints, TypeVar, _GenericAlias\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -24,9 +24,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n-        if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n+        annotations = app.env.temp_data.setdefault('annotations', {})\n+        annotation = annotations.setdefault(name, OrderedDict())\n+        if isinstance(obj, _GenericAlias) or isinstance(obj, TypeVar):\n+            type_hints = get_type_hints(obj)\n+            for k, v in type_hints.items():\n+                annotation[k] = typing.stringify(v)\n+        elif callable(obj):\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..63c8a02 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,6 +1,6 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints, TypeVar, _GenericAlias\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -8,9 +8,13 @@ from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n-        if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n+        annotations = app.env.temp_data.setdefault('annotations', {})\n+        annotation = annotations.setdefault(name, OrderedDict())\n+        if isinstance(obj, _GenericAlias) or isinstance(obj, TypeVar):\n+            type_hints = get_type_hints(obj)\n+            for k, v in type_hints.items():\n+                annotation[k] = typing.stringify(v)\n+        elif callable(obj):\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n", "normalized_occurrence": 1}
