{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..2ec4ed0 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -129,14 +129,19 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level, skipping the rest\n+        of the module. This is the recommended way to skip modules that contain syntax\n+        or imports that are incompatible with the current Python version/environment.\n+        Must be explicitly set to True for module-level skips. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For simple test skipping based on conditions, using the :ref:`pytest.mark.skipif ref`\n+        marker is recommended. However, when you need to skip an entire module and prevent\n+        any module-level code from executing (e.g., when the module contains incompatible\n+        syntax), use ``skip(msg=\"reason\", allow_module_level=True)`` at the module level\n+        before any incompatible imports or code.\n+        \n+        For doctests, you can use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..729b84a 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -87,14 +87,19 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level, skipping the rest\n+        of the module. This is the recommended way to skip modules that contain syntax\n+        or imports that are incompatible with the current Python version/environment.\n+        Must be explicitly set to True for module-level skips. Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For simple test skipping based on conditions, using the :ref:`pytest.mark.skipif ref`\n+        marker is recommended. However, when you need to skip an entire module and prevent\n+        any module-level code from executing (e.g., when the module contains incompatible\n+        syntax), use ``skip(msg=\"reason\", allow_module_level=True)`` at the module level\n+        before any incompatible imports or code.\n+        \n+        For doctests, you can use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "normalized_occurrence": 1}
