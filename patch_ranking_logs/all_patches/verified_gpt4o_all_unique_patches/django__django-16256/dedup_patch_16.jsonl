{"model_name_or_path": "agentless", "instance_id": "django__django-16256", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex a01cd24..eb25901 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -785,29 +785,29 @@ def create_reverse_many_to_one_manager(superclass, rel):\n \n         add.alters_data = True\n \n-        def create(self, **kwargs):\n+        async def acreate(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n \n-        create.alters_data = True\n+        acreate.alters_data = True\n \n-        def get_or_create(self, **kwargs):\n+        async def aget_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n \n-        get_or_create.alters_data = True\n+        aget_or_create.alters_data = True\n \n-        def update_or_create(self, **kwargs):\n+        async def aupdate_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n \n-        update_or_create.alters_data = True\n+        aupdate_or_create.alters_data = True\n \n         # remove() and clear() are only provided if the ForeignKey can have a\n         # value of null.\n@@ -1191,18 +1191,16 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n \n         create.alters_data = True\n \n-        def get_or_create(self, *, through_defaults=None, **kwargs):\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n-            obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(\n-                **kwargs\n-            )\n+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n             # We only need to add() if created because if we got an object back\n             # from get() then the relationship already exists.\n             if created:\n                 self.add(obj, through_defaults=through_defaults)\n             return obj, created\n \n-        get_or_create.alters_data = True\n+        aget_or_create.alters_data = True\n \n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex be1830e..4508f14 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -299,24 +299,24 @@ def create_reverse_many_to_one_manager(superclass, rel):\n                         check_and_update_obj(obj)\n                         obj.save()\n         add.alters_data = True\n-        def create(self, **kwargs):\n+        async def acreate(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).create(**kwargs)\n-        create.alters_data = True\n-        def get_or_create(self, **kwargs):\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).create)(**kwargs)\n+        acreate.alters_data = True\n+        async def aget_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n-        get_or_create.alters_data = True\n-        def update_or_create(self, **kwargs):\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n+        aget_or_create.alters_data = True\n+        async def aupdate_or_create(self, **kwargs):\n             self._check_fk_val()\n             kwargs[self.field.name] = self.instance\n             db = router.db_for_write(self.model, instance=self.instance)\n-            return super(RelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n-        update_or_create.alters_data = True\n+            return await sync_to_async(super(RelatedManager, self.db_manager(db)).update_or_create)(**kwargs)\n+        aupdate_or_create.alters_data = True\n         if rel.field.null:\n             def remove(self, *objs, bulk=True):\n                 if not objs:\n@@ -510,13 +510,13 @@ def create_forward_many_to_many_manager(superclass, rel, reverse):\n             self.add(new_obj, through_defaults=through_defaults)\n             return new_obj\n         create.alters_data = True\n-        def get_or_create(self, *, through_defaults=None, **kwargs):\n+        async def aget_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n-            obj, created = super(ManyRelatedManager, self.db_manager(db)).get_or_create(**kwargs)\n+            obj, created = await sync_to_async(super(ManyRelatedManager, self.db_manager(db)).get_or_create)(**kwargs)\n             if created:\n                 self.add(obj, through_defaults=through_defaults)\n             return (obj, created)\n-        get_or_create.alters_data = True\n+        aget_or_create.alters_data = True\n         def update_or_create(self, *, through_defaults=None, **kwargs):\n             db = router.db_for_write(self.instance.__class__, instance=self.instance)\n             obj, created = super(ManyRelatedManager, self.db_manager(db)).update_or_create(**kwargs)\n", "normalized_occurrence": 1}
