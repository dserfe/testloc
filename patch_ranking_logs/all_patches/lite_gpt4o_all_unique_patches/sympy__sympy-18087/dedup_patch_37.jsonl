{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 73bbc98..6931bba 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -421,7 +421,11 @@ def trigsimp_groebner(expr, hints=[], quick=False, order=\"grlex\",\n _trigs = (TrigonometricFunction, HyperbolicFunction)\n \n \n+from sympy import Abs\n+\n def trigsimp(expr, **opts):\n+    if expr.has(sin, cos):\n+        expr = expr.replace(sqrt, lambda x: sqrt(x) if x >= 0 else Abs(sqrt(x)))\n     \"\"\"\n     reduces expression by using known trig identities\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex fb82ea6..93e06c2 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -143,7 +143,11 @@ def trigsimp_groebner(expr, hints=[], quick=False, order='grlex', polynomial=Fal\n     else:\n         return ratsimpmodprime(expr, list(G), order=order, gens=freegens + gens, quick=quick, domain=ZZ, polynomial=polynomial).subs(subs)\n _trigs = (TrigonometricFunction, HyperbolicFunction)\n+from sympy import Abs\n def trigsimp(expr, **opts):\n+    if expr.has(sin, cos):\n+        expr = expr.replace(sqrt, lambda x: sqrt(x) if x >= 0 else Abs(sqrt(x)))\n+    '\\n    reduces expression by using known trig identities\\n\\n    Notes\\n    =====\\n\\n    method:\\n    - Determine the method to use. Valid choices are \\'matching\\' (default),\\n    \\'groebner\\', \\'combined\\', and \\'fu\\'. If \\'matching\\', simplify the\\n    expression recursively by targeting common patterns. If \\'groebner\\', apply\\n    an experimental groebner basis algorithm. In this case further options\\n    are forwarded to ``trigsimp_groebner``, please refer to its docstring.\\n    If \\'combined\\', first run the groebner basis algorithm with small\\n    default parameters, then run the \\'matching\\' algorithm. \\'fu\\' runs the\\n    collection of trigonometric transformations described by Fu, et al.\\n    (see the `fu` docstring).\\n\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import trigsimp, sin, cos, log\\n    >>> from sympy.abc import x, y\\n    >>> e = 2*sin(x)**2 + 2*cos(x)**2\\n    >>> trigsimp(e)\\n    2\\n\\n    Simplification occurs wherever trigonometric functions are located.\\n\\n    >>> trigsimp(log(e))\\n    log(2)\\n\\n    Using `method=\"groebner\"` (or `\"combined\"`) might lead to greater\\n    simplification.\\n\\n    The old trigsimp routine can be accessed as with method \\'old\\'.\\n\\n    >>> from sympy import coth, tanh\\n    >>> t = 3*tanh(x)**7 - 2/coth(x)**7\\n    >>> trigsimp(t, method=\\'old\\') == t\\n    True\\n    >>> trigsimp(t)\\n    tanh(x)**7\\n\\n    '\n     from sympy.simplify.fu import fu\n     expr = sympify(expr)\n     _eval_trigsimp = getattr(expr, '_eval_trigsimp', None)\n", "normalized_occurrence": 1}
