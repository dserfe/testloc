{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13579", "model_patch": "diff --git a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\nindex 4dc881d..28ef427 100644\n--- a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+++ b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n@@ -75,9 +75,23 @@ class HighLevelWCSWrapper(HighLevelWCSMixin):\n         See `~astropy.wcs.wcsapi.BaseLowLevelWCS._as_mpl_axes`\n         \"\"\"\n         return self.low_level_wcs._as_mpl_axes()\n-\n+    \n+    def world_to_pixel(self, *world_objects):\n+        # Ensure input world objects are compatible with the WCS\n+        if len(world_objects) != self.low_level_wcs.world_n_dim:\n+            raise ValueError(\"Number of world inputs does not match WCS dimensionality\")\n+        \n+        # Perform the world to pixel transformation\n+        pixel_coords = self.low_level_wcs.world_to_pixel(*world_objects)\n+        \n+        # If sliced, adjust the pixel coordinates accordingly\n+        if isinstance(self.low_level_wcs, SlicedLowLevelWCS):\n+            pixel_coords = self.low_level_wcs._apply_slicing_pixel_transform(pixel_coords)\n+        \n+        return pixel_coords\n+    \n     def __str__(self):\n         return wcs_info_str(self.low_level_wcs)\n \n     def __repr__(self):\n-        return f\"{object.__repr__(self)}\\n{str(self)}\"\n+        return f\"{object.__repr__(self)}\\n{str(self)}\"\n", "occurrence": 1, "normalized_patch": "--- a/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+++ b/astropy/wcs/wcsapi/high_level_wcs_wrapper.py\n+    def world_to_pixel(self, *world_objects):\n+        if len(world_objects) != self.low_level_wcs.world_n_dim:\n+            raise ValueError('Number of world inputs does not match WCS dimensionality')\n+        pixel_coords = self.low_level_wcs.world_to_pixel(*world_objects)\n+        if isinstance(self.low_level_wcs, SlicedLowLevelWCS):\n+            pixel_coords = self.low_level_wcs._apply_slicing_pixel_transform(pixel_coords)\n+        return pixel_coords", "normalized_occurrence": 1}
