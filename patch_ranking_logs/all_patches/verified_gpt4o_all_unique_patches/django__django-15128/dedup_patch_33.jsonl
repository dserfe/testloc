{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..e5d8168 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -761,7 +761,12 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Ensure the new alias does not intersect with change_map keys and values.\n+            index = len(self.alias_map) + 1\n+            alias = '%s%d' % (self.alias_prefix, index)\n+            while alias in change_map.values():\n+                index += 1\n+                alias = '%s%d' % (self.alias_prefix, index)\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..f79d621 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -429,7 +429,11 @@ class Query(BaseExpression):\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            index = len(self.alias_map) + 1\n+            alias = '%s%d' % (self.alias_prefix, index)\n+            while alias in change_map.values():\n+                index += 1\n+                alias = '%s%d' % (self.alias_prefix, index)\n             alias_list.append(alias)\n         else:\n             alias = filtered_relation.alias if filtered_relation is not None else table_name\n", "normalized_occurrence": 1}
