{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..adf1a73 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -975,8 +975,20 @@ class CharField(Field):\n                     id='fields.E121',\n                 )\n             ]\n-        else:\n-            return []\n+        \n+        # Check if max_length is sufficient for the longest choice value\n+        if self.choices:\n+            longest_choice = max(len(str(choice[0])) for choice in self.flatchoices)\n+            if longest_choice > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest choice value. \"\n+                        f\"'max_length' is {self.max_length} but should be at least {longest_choice}.\",\n+                        obj=self,\n+                        id='fields.E122',\n+                    )\n+                ]\n+        return []\n \n     def cast_db_type(self, connection):\n         if self.max_length is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..ad399a7 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -467,8 +467,11 @@ class CharField(Field):\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n         elif not isinstance(self.max_length, int) or isinstance(self.max_length, bool) or self.max_length <= 0:\n             return [checks.Error(\"'max_length' must be a positive integer.\", obj=self, id='fields.E121')]\n-        else:\n-            return []\n+        if self.choices:\n+            longest_choice = max((len(str(choice[0])) for choice in self.flatchoices))\n+            if longest_choice > self.max_length:\n+                return [checks.Error(f\"'max_length' is too small to fit the longest choice value. 'max_length' is {self.max_length} but should be at least {longest_choice}.\", obj=self, id='fields.E122')]\n+        return []\n     def cast_db_type(self, connection):\n         if self.max_length is None:\n             return connection.ops.cast_char_field_without_max_length\n", "normalized_occurrence": 1}
