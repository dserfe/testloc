{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..64ce82c 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,7 +573,8 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_add=True, **kwargs):\n+        self.allow_add = allow_add\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -627,7 +628,10 @@ class BaseModelFormSet(BaseFormSet):\n                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n             except IndexError:\n                 pass\n-        form = super()._construct_form(i, **kwargs)\n+        if not self.allow_add and i >= self.initial_form_count():\n+            raise ValidationError(\"Adding new objects is not allowed in this formset.\")\n+        else:\n+            form = super()._construct_form(i, **kwargs)\n         if pk_required:\n             form.fields[self.model._meta.pk.name].required = True\n         return form\n@@ -813,6 +817,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if not self.allow_add:\n+            return []\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -875,7 +881,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n                          min_num=None, validate_min=False, field_classes=None,\n-                         absolute_max=None, can_delete_extra=True, renderer=None):\n+                         absolute_max=None, can_delete_extra=True, renderer=None, allow_add=True):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n     if (getattr(meta, 'fields', fields) is None and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..00289ff 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -273,7 +273,8 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, allow_add=True, **kwargs):\n+        self.allow_add = allow_add\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -313,7 +314,10 @@ class BaseModelFormSet(BaseFormSet):\n                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n             except IndexError:\n                 pass\n-        form = super()._construct_form(i, **kwargs)\n+        if not self.allow_add and i >= self.initial_form_count():\n+            raise ValidationError('Adding new objects is not allowed in this formset.')\n+        else:\n+            form = super()._construct_form(i, **kwargs)\n         if pk_required:\n             form.fields[self.model._meta.pk.name].required = True\n         return form\n@@ -418,6 +422,8 @@ class BaseModelFormSet(BaseFormSet):\n         return saved_instances\n     def save_new_objects(self, commit=True):\n         self.new_objects = []\n+        if not self.allow_add:\n+            return []\n         for form in self.extra_forms:\n             if not form.has_changed():\n                 continue\n@@ -454,7 +460,7 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None, allow_add=True):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n", "normalized_occurrence": 1}
