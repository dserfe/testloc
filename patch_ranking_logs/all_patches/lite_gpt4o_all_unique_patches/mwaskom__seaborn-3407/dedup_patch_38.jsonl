{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3407", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 29c361e..f9cfbf7 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1241,6 +1241,12 @@ class PairGrid(Grid):\n \n         super().__init__()\n \n+        # If data has MultiIndex columns, flatten them for internal operations\n+        if isinstance(data.columns, pd.MultiIndex):\n+            data.columns = [' '.join(map(str, col)).strip() for col in data.columns]\n+\n+        self._original_columns = data.columns\n+\n         # Sort out the variables that define the grid\n         numeric_cols = self._find_numeric_cols(data)\n         if hue in numeric_cols:\n@@ -1303,6 +1309,10 @@ class PairGrid(Grid):\n         # Label the axes\n         self._add_axis_labels()\n \n+        # Restore original columns if they were MultiIndex\n+        if hasattr(self, \"_original_columns\"):\n+            self.data.columns = self._original_columns\n+\n         # Sort out the hue variable\n         self._hue_var = hue\n         if hue is None:\n@@ -1508,6 +1518,10 @@ class PairGrid(Grid):\n             ax.legend_ = None\n \n         self._add_axis_labels()\n+\n+        # Restore original columns if they were MultiIndex\n+        if hasattr(self, \"_original_columns\"):\n+            self.data.columns = self._original_columns\n         return self\n \n     def _map_diag_iter_hue(self, func, **kwargs):\n@@ -1547,6 +1561,10 @@ class PairGrid(Grid):\n \n         self._add_axis_labels()\n \n+        # Restore original columns if they were MultiIndex\n+        if hasattr(self, \"_original_columns\"):\n+            self.data.columns = self._original_columns\n+\n         return self\n \n     def _map_bivariate(self, func, indices, **kwargs):\n@@ -1568,6 +1586,10 @@ class PairGrid(Grid):\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n         self._add_axis_labels()\n \n+        # Restore original columns if they were MultiIndex\n+        if hasattr(self, \"_original_columns\"):\n+            self.data.columns = self._original_columns\n+\n         if \"hue\" in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 039b44a..9f046a3 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -534,6 +534,9 @@ class FacetGrid(Grid):\n class PairGrid(Grid):\n     def __init__(self, data, *, hue=None, vars=None, x_vars=None, y_vars=None, hue_order=None, palette=None, hue_kws=None, corner=False, diag_sharey=True, height=2.5, aspect=1, layout_pad=0.5, despine=True, dropna=False):\n         super().__init__()\n+        if isinstance(data.columns, pd.MultiIndex):\n+            data.columns = [' '.join(map(str, col)).strip() for col in data.columns]\n+        self._original_columns = data.columns\n         numeric_cols = self._find_numeric_cols(data)\n         if hue in numeric_cols:\n             numeric_cols.remove(hue)\n@@ -573,6 +576,8 @@ class PairGrid(Grid):\n         self.diag_axes = None\n         self._dropna = dropna\n         self._add_axis_labels()\n+        if hasattr(self, '_original_columns'):\n+            self.data.columns = self._original_columns\n         self._hue_var = hue\n         if hue is None:\n             self.hue_names = hue_order = ['_nolegend_']\n@@ -684,6 +689,8 @@ class PairGrid(Grid):\n             func(x=vector, **plot_kwargs)\n             ax.legend_ = None\n         self._add_axis_labels()\n+        if hasattr(self, '_original_columns'):\n+            self.data.columns = self._original_columns\n         return self\n     def _map_diag_iter_hue(self, func, **kwargs):\n         fixed_color = kwargs.pop('color', None)\n@@ -710,6 +717,8 @@ class PairGrid(Grid):\n                 else:\n                     func(data_k, label=label_k, color=color, **plot_kwargs)\n         self._add_axis_labels()\n+        if hasattr(self, '_original_columns'):\n+            self.data.columns = self._original_columns\n         return self\n     def _map_bivariate(self, func, indices, **kwargs):\n         from .distributions import histplot, kdeplot\n@@ -724,6 +733,8 @@ class PairGrid(Grid):\n                 continue\n             self._plot_bivariate(x_var, y_var, ax, func, **kws)\n         self._add_axis_labels()\n+        if hasattr(self, '_original_columns'):\n+            self.data.columns = self._original_columns\n         if 'hue' in signature(func).parameters:\n             self.hue_names = list(self._legend_data)\n     def _plot_bivariate(self, x_var, y_var, ax, func, **kwargs):\n", "normalized_occurrence": 1}
