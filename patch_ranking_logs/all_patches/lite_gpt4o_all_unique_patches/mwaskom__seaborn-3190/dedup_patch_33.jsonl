{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3190", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 9be3959..d575515 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -346,12 +346,20 @@ class ContinuousBase(Scale):\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n+            if data.dtype == bool:\n+                vmin, vmax = 0, 1\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n \n-            def normalize(x):\n-                return (x - a) / b\n+                def normalize(x):\n+                    return x.astype(int)\n+            else:\n+                vmin, vmax = axis.convert_units((vmin, vmax))\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+\n+                def normalize(x):\n+                    return (x - a) / b\n \n         else:\n             normalize = vmin = vmax = None\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex b2a020b..d774c08 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -160,11 +160,18 @@ class ContinuousBase(Scale):\n                 vmin, vmax = (data.min(), data.max())\n             else:\n                 vmin, vmax = new.norm\n-            vmin, vmax = axis.convert_units((vmin, vmax))\n-            a = forward(vmin)\n-            b = forward(vmax) - forward(vmin)\n-            def normalize(x):\n-                return (x - a) / b\n+            if data.dtype == bool:\n+                vmin, vmax = (0, 1)\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+                def normalize(x):\n+                    return x.astype(int)\n+            else:\n+                vmin, vmax = axis.convert_units((vmin, vmax))\n+                a = forward(vmin)\n+                b = forward(vmax) - forward(vmin)\n+                def normalize(x):\n+                    return (x - a) / b\n         else:\n             normalize = vmin = vmax = None\n         new._pipeline = [axis.convert_units, forward, normalize, prop.get_mapping(new, data)]\n", "normalized_occurrence": 1}
