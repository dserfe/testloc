{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..fa42085 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -62,8 +62,9 @@ class BaseConstraint:\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n-    def get_violation_error_message(self):\n-        return self.violation_error_message % {\"name\": self.name}\n+    def get_validation_error(self):\n+        message = self.violation_error_message % {\"name\": self.name}\n+        return ValidationError(message, code=self.violation_error_code)\n \n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n@@ -74,6 +75,8 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if self.violation_error_code is not None:\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n@@ -112,7 +115,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise self.get_validation_error()\n         except FieldError:\n             pass\n \n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..557c53d 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -39,14 +39,17 @@ class BaseConstraint:\n         raise NotImplementedError('This method must be implemented by a subclass.')\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError('This method must be implemented by a subclass.')\n-    def get_violation_error_message(self):\n-        return self.violation_error_message % {'name': self.name}\n+    def get_validation_error(self):\n+        message = self.violation_error_message % {'name': self.name}\n+        return ValidationError(message, code=self.violation_error_code)\n     def deconstruct(self):\n         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace('django.db.models.constraints', 'django.db.models')\n         kwargs = {'name': self.name}\n         if self.violation_error_message is not None and self.violation_error_message != self.default_violation_error_message:\n             kwargs['violation_error_message'] = self.violation_error_message\n+        if self.violation_error_code is not None:\n+            kwargs['violation_error_code'] = self.violation_error_code\n         return (path, (), kwargs)\n     def clone(self):\n         _, args, kwargs = self.deconstruct()\n@@ -75,7 +78,7 @@ class CheckConstraint(BaseConstraint):\n         against = instance._get_field_value_map(meta=model._meta, exclude=exclude)\n         try:\n             if not Q(self.check).check(against, using=using):\n-                raise ValidationError(self.get_violation_error_message())\n+                raise self.get_validation_error()\n         except FieldError:\n             pass\n     def __repr__(self):\n", "normalized_occurrence": 2}
