{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..c1f19db 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -540,7 +540,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._record_import(node, imported_module)\n \n             if imported_module is None:\n-                continue\n+                # Check if the import is used in a type comment\n+                if any(\n+                    isinstance(comment, str) and name in comment\n+                    for comment in (node.parent.type_comment, getattr(node.parent.scope(), 'type_comment', ''))\n+                ):\n+                    continue\n \n             self._add_imported_module(node, imported_module.name)\n \n@@ -565,7 +570,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n-            return\n+            # Check if the import is used in a type comment\n+            if any(\n+                isinstance(comment, str) and basename in comment\n+                for comment in (node.parent.type_comment, getattr(node.parent.scope(), 'type_comment', ''))\n+            ):\n+                return\n         for name, _ in node.names:\n             if name != \"*\":\n                 self._add_imported_module(node, f\"{imported_module.name}.{name}\")\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..a1ee46d 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -182,7 +182,8 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if isinstance(node.scope(), astroid.Module):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n-                continue\n+                if any((isinstance(comment, str) and name in comment for comment in (node.parent.type_comment, getattr(node.parent.scope(), 'type_comment', '')))):\n+                    continue\n             self._add_imported_module(node, imported_module.name)\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n@@ -201,7 +202,8 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n-            return\n+            if any((isinstance(comment, str) and basename in comment for comment in (node.parent.type_comment, getattr(node.parent.scope(), 'type_comment', '')))):\n+                return\n         for name, _ in node.names:\n             if name != '*':\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n", "normalized_occurrence": 1}
