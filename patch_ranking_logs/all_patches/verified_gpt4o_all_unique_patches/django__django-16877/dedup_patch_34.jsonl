{"model_name_or_path": "agentless", "instance_id": "django__django-16877", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 693c70d..e20d261 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -591,6 +591,18 @@ def join(value, arg, autoescape=True):\n             data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n+\n+@register.filter(is_safe=True, needs_autoescape=True)\n+def escapeseq(value, autoescape=True):\n+    \"\"\"Escape each item in a sequence.\"\"\"\n+    try:\n+        if autoescape:\n+            data = [conditional_escape(v) for v in value]\n+        else:\n+            data = [escape(v) for v in value]\n+        return data\n+    except TypeError:\n+        return value\n     return mark_safe(data)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 8184649..a555ee4 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -295,6 +295,16 @@ def join(value, arg, autoescape=True):\n             data = arg.join(value)\n     except TypeError:\n         return value\n+@register.filter(is_safe=True, needs_autoescape=True)\n+def escapeseq(value, autoescape=True):\n+    try:\n+        if autoescape:\n+            data = [conditional_escape(v) for v in value]\n+        else:\n+            data = [escape(v) for v in value]\n+        return data\n+    except TypeError:\n+        return value\n     return mark_safe(data)\n @register.filter(is_safe=True)\n def last(value):\n", "normalized_occurrence": 1}
