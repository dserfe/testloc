{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..6cacc1a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -501,6 +501,9 @@ class SQLCompiler:\n                 if not getattr(features, 'supports_select_{}'.format(combinator)):\n                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))\n                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)\n+                # If there's a distinct clause, wrap it around the combinator query\n+                if self.query.distinct:\n+                    result = ['SELECT'] + [distinct_sql] + ['FROM ('] + result + [') AS wrapped_subquery']\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 # This must come after 'select', 'ordering', and 'distinct'\n@@ -511,13 +514,23 @@ class SQLCompiler:\n                 result = ['SELECT']\n                 params = []\n \n-                if self.query.distinct:\n+                # Handle DISTINCT after combinator queries to ensure proper wrapping\n+                distinct_sql = ''\n+                if self.query.distinct and not combinator:\n                     distinct_result, distinct_params = self.connection.ops.distinct_sql(\n                         distinct_fields,\n                         distinct_params,\n                     )\n                     result += distinct_result\n                     params += distinct_params\n+                elif self.query.distinct and combinator:\n+                    # Store the distinct clause to wrap around the combinator query later\n+                    distinct_result, distinct_params = self.connection.ops.distinct_sql(\n+                        distinct_fields,\n+                        distinct_params,\n+                    )\n+                    distinct_sql = ' '.join(distinct_result)\n+                    params += distinct_params\n \n                 out_cols = []\n                 col_idx = 1\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..d3f6447 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -284,6 +284,8 @@ class SQLCompiler:\n                 if not getattr(features, 'supports_select_{}'.format(combinator)):\n                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))\n                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)\n+                if self.query.distinct:\n+                    result = ['SELECT'] + [distinct_sql] + ['FROM ('] + result + [') AS wrapped_subquery']\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 from_, f_params = self.get_from_clause()\n@@ -291,10 +293,15 @@ class SQLCompiler:\n                 having, h_params = self.compile(self.having) if self.having is not None else ('', [])\n                 result = ['SELECT']\n                 params = []\n-                if self.query.distinct:\n+                distinct_sql = ''\n+                if self.query.distinct and (not combinator):\n                     distinct_result, distinct_params = self.connection.ops.distinct_sql(distinct_fields, distinct_params)\n                     result += distinct_result\n                     params += distinct_params\n+                elif self.query.distinct and combinator:\n+                    distinct_result, distinct_params = self.connection.ops.distinct_sql(distinct_fields, distinct_params)\n+                    distinct_sql = ' '.join(distinct_result)\n+                    params += distinct_params\n                 out_cols = []\n                 col_idx = 1\n                 for _, (s_sql, s_params), alias in self.select + extra_select:\n", "normalized_occurrence": 1}
