{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..4795103 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -255,7 +255,9 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n-        elif term.is_polynomial(k):\n+        elif term.is_polynomial(k) and not any(arg.has(S.Exp1) or\n+                                     any(b.is_Integer and e.has(k) for b, e in arg.atoms(Pow))\n+                                     for arg in term.args):\n             poly = term.as_poly(k)\n \n             A = B = Q = S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..6a90aa5 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,7 +61,7 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n-        elif term.is_polynomial(k):\n+        elif term.is_polynomial(k) and (not any((arg.has(S.Exp1) or any((b.is_Integer and e.has(k) for b, e in arg.atoms(Pow))) for arg in term.args))):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n             all_roots = roots(poly)\n", "normalized_occurrence": 1}
