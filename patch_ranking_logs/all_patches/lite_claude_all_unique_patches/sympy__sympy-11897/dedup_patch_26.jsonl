{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..c7c9675 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,8 +356,25 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n+        # Don't use fraction() to avoid automatic simplification\n+        if expr.is_Mul:\n+            numer = []\n+            denom = []\n+            for term in expr.args:\n+                if term.is_Pow and term.exp.is_Rational and term.exp.is_negative:\n+                    denom.append(Pow(term.base, -term.exp))\n+                elif term.is_Rational and term is not S.Infinity:\n+                    if term.p != 1:\n+                        numer.append(Rational(term.p))\n+                    if term.q != 1:\n+                        denom.append(Rational(term.q))\n+                else:\n+                    numer.append(term)\n+            numer = Mul(*numer)\n+            denom = Mul(*denom)\n+        else:\n+            numer = expr\n+            denom = S.One\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..ad0707e 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,8 +165,24 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n+        if expr.is_Mul:\n+            numer = []\n+            denom = []\n+            for term in expr.args:\n+                if term.is_Pow and term.exp.is_Rational and term.exp.is_negative:\n+                    denom.append(Pow(term.base, -term.exp))\n+                elif term.is_Rational and term is not S.Infinity:\n+                    if term.p != 1:\n+                        numer.append(Rational(term.p))\n+                    if term.q != 1:\n+                        denom.append(Rational(term.q))\n+                else:\n+                    numer.append(term)\n+            numer = Mul(*numer)\n+            denom = Mul(*denom)\n+        else:\n+            numer = expr\n+            denom = S.One\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n         def convert(expr):\n", "normalized_occurrence": 1}
