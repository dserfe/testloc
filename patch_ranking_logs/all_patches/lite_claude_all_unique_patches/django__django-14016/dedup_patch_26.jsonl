{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..c3a2014 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -46,10 +46,10 @@ class Q(tree.Node):\n \n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n-            return copy.deepcopy(self)\n+            return type(self)(*self.children, _connector=self.connector, _negated=self.negated)\n         # Or if this Q is empty, ignore it and just use `other`.\n         elif not self:\n-            return copy.deepcopy(other)\n+            return type(self)(*other.children, _connector=other.connector, _negated=other.negated)\n \n         obj = type(self)()\n         obj.connector = conn\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..3691fe3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -21,9 +21,9 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n         if not other:\n-            return copy.deepcopy(self)\n+            return type(self)(*self.children, _connector=self.connector, _negated=self.negated)\n         elif not self:\n-            return copy.deepcopy(other)\n+            return type(self)(*other.children, _connector=other.connector, _negated=other.negated)\n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n", "normalized_occurrence": 1}
