{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..b9033bd 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,6 +72,12 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n+        # Handle XOR parity logic\n+        if hasattr(other, '_children'):\n+            result = self._combine(other._children[0], self.XOR)\n+            for child in other._children[1:]:\n+                result = result._combine(child, self.XOR)\n+            return result\n         return self._combine(other, self.XOR)\n \n     def __invert__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..77f4373 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,6 +36,11 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n+        if hasattr(other, '_children'):\n+            result = self._combine(other._children[0], self.XOR)\n+            for child in other._children[1:]:\n+                result = result._combine(child, self.XOR)\n+            return result\n         return self._combine(other, self.XOR)\n     def __invert__(self):\n         obj = self.copy()\n", "normalized_occurrence": 1}
