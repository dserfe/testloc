{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..8ce3147 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -66,6 +66,14 @@ class _MockObject:\n         return call\n \n     def __repr__(self) -> str:\n+        # If this is a mocked module (contains '.'), return the full display name\n+        # Otherwise just return the name itself to avoid incomplete class names\n+        if '.' in self.__display_name__:\n+            parts = self.__display_name__.split('.')\n+            if parts[-1]:  # Ensure we don't end with a dot\n+                return self.__display_name__\n+            else:\n+                return '.'.join(parts[:-1])  # Remove trailing dot\n         return self.__display_name__\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..e01451d 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -37,6 +37,12 @@ class _MockObject:\n         call.__sphinx_decorator_args__ = args\n         return call\n     def __repr__(self) -> str:\n+        if '.' in self.__display_name__:\n+            parts = self.__display_name__.split('.')\n+            if parts[-1]:\n+                return self.__display_name__\n+            else:\n+                return '.'.join(parts[:-1])\n         return self.__display_name__\n def _make_subclass(name: str, module: str, superclass: Any=_MockObject, attributes: Any=None, decorator_args: Tuple=()) -> Any:\n     attrs = {'__module__': module, '__display_name__': module + '.' + name, '__sphinx_decorator_args__': decorator_args}\n", "normalized_occurrence": 1}
