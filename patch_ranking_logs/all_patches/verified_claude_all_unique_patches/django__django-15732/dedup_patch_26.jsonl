{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..83bbc8c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -562,11 +562,32 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n             alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n-            alter_together(\n-                new_model,\n-                getattr(old_model._meta, self.option_name, set()),\n-                getattr(new_model._meta, self.option_name, set()),\n-            )\n+            \n+            # Get old and new constraint sets\n+            old_together = getattr(old_model._meta, self.option_name, set())\n+            new_together = getattr(new_model._meta, self.option_name, set())\n+            \n+            # For unique_together, filter out single-field constraints that are already\n+            # unique (primary key or unique=True)\n+            if self.option_name == 'unique_together':\n+                old_together = {\n+                    fields for fields in old_together \n+                    if len(fields) > 1 or not any(\n+                        old_model._meta.get_field(f).unique or \n+                        old_model._meta.get_field(f).primary_key \n+                        for f in fields\n+                    )\n+                }\n+                new_together = {\n+                    fields for fields in new_together\n+                    if len(fields) > 1 or not any(\n+                        new_model._meta.get_field(f).unique or \n+                        new_model._meta.get_field(f).primary_key \n+                        for f in fields\n+                    )\n+                }\n+            \n+            alter_together(new_model, old_together, new_together)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b786bec..f501514 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -244,7 +244,12 @@ class AlterTogetherOptionOperation(ModelOptionOperation):\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.name)\n             alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n-            alter_together(new_model, getattr(old_model._meta, self.option_name, set()), getattr(new_model._meta, self.option_name, set()))\n+            old_together = getattr(old_model._meta, self.option_name, set())\n+            new_together = getattr(new_model._meta, self.option_name, set())\n+            if self.option_name == 'unique_together':\n+                old_together = {fields for fields in old_together if len(fields) > 1 or not any((old_model._meta.get_field(f).unique or old_model._meta.get_field(f).primary_key for f in fields))}\n+                new_together = {fields for fields in new_together if len(fields) > 1 or not any((new_model._meta.get_field(f).unique or new_model._meta.get_field(f).primary_key for f in fields))}\n+            alter_together(new_model, old_together, new_together)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         return self.database_forwards(app_label, schema_editor, from_state, to_state)\n     def references_field(self, model_name, name, app_label):\n", "normalized_occurrence": 1}
