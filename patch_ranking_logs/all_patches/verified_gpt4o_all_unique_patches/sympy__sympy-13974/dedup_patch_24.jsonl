{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..d50ee5a 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -238,7 +238,9 @@ class TensorProduct(Expr):\n     def doit(self, **hints):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n \n-    def _eval_expand_tensorproduct(self, **hints):\n+    def _eval_power(self, exp):\n+        new_args = [arg**exp for arg in self.args]\n+        return TensorProduct(*new_args)\n         \"\"\"Distribute TensorProducts across addition.\"\"\"\n         args = self.args\n         add_args = []\n@@ -382,7 +384,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            new_args = [arg**e.exp for arg in base.args]\n+            return TensorProduct(*new_args)\n+        return base**e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +396,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..bb169af 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -108,7 +108,9 @@ class TensorProduct(Expr):\n         return s\n     def doit(self, **hints):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n-    def _eval_expand_tensorproduct(self, **hints):\n+    def _eval_power(self, exp):\n+        new_args = [arg ** exp for arg in self.args]\n+        return TensorProduct(*new_args)\n         args = self.args\n         add_args = []\n         stop = False\n@@ -161,7 +163,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            new_args = [arg ** e.exp for arg in base.args]\n+            return TensorProduct(*new_args)\n+        return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
