{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..f5a8a39 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,7 +573,8 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, can_create=True, **kwargs):\n+        self.can_create = can_create\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -600,6 +601,8 @@ class BaseModelFormSet(BaseFormSet):\n \n     def _construct_form(self, i, **kwargs):\n         pk_required = i < self.initial_form_count()\n+        if not self.can_create and i >= self.initial_form_count():\n+            raise ValidationError(\"Adding new objects is not allowed.\")\n         if pk_required:\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n@@ -874,7 +877,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n-                         min_num=None, validate_min=False, field_classes=None,\n+                         min_num=None, validate_min=False, field_classes=None, can_create=True,\n                          absolute_max=None, can_delete_extra=True, renderer=None):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n@@ -893,7 +896,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n+                              absolute_max=absolute_max, can_delete_extra=can_delete_extra, can_create=can_create,\n                               renderer=renderer)\n     FormSet.model = model\n     return FormSet\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..a128d27 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -273,7 +273,8 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, can_create=True, **kwargs):\n+        self.can_create = can_create\n         self.queryset = queryset\n         self.initial_extra = initial\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n@@ -291,6 +292,8 @@ class BaseModelFormSet(BaseFormSet):\n         return field.to_python\n     def _construct_form(self, i, **kwargs):\n         pk_required = i < self.initial_form_count()\n+        if not self.can_create and i >= self.initial_form_count():\n+            raise ValidationError('Adding new objects is not allowed.')\n         if pk_required:\n             if self.is_bound:\n                 pk_key = '%s-%s' % (self.add_prefix(i), self.model._meta.pk.name)\n@@ -454,12 +457,12 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, can_create=True, absolute_max=None, can_delete_extra=True, renderer=None):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback, widgets=widgets, localized_fields=localized_fields, labels=labels, help_texts=help_texts, error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, can_create=can_create, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n class BaseInlineFormSet(BaseModelFormSet):\n", "normalized_occurrence": 1}
