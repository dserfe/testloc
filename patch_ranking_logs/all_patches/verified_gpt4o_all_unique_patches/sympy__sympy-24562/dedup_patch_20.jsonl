{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..b3a5706 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1605,13 +1605,8 @@ class Rational(Number):\n                 else:\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp/fq\n+                    # Handle both decimal and fractional string inputs uniformly\n+                    p = fractions.Fraction(p)\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..88badf1 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1391,13 +1391,7 @@ class Rational(Number):\n                 else:\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n-                        p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n-                        p = fp / fq\n+                    p = fractions.Fraction(p)\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n", "normalized_occurrence": 1}
