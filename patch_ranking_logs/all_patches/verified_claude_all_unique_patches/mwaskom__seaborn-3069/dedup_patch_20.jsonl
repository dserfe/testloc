{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..8d1d835 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,20 +177,39 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set up default formatters and locators\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                \n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+                \n+                # Disable grid by default for nominal scales\n+                axis.grid(False)\n+                \n+                # Add invisible artist with sticky edges for proper category padding\n+                from matplotlib.patches import Rectangle\n+                invisible_rect = Rectangle((0, 0), 1, 1, visible=False)\n+                invisible_rect.sticky_edges.x = [0, len(units_seed) - 1]\n+                invisible_rect.sticky_edges.y = [0, len(units_seed) - 1]\n+                axis.get_figure().add_artist(invisible_rect)\n+                \n+                # Set margins to 0 to allow sticky edges to control padding\n+                axis.set_xmargin(0)\n+                axis.set_ymargin(0)\n+                \n+                # Invert y-axis if this is a y-axis scale\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.invert_default()\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with padding for categorical plots\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..7f04144 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,11 +90,26 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                major_locator, minor_locator = new._get_locators(**new._tick_params)\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                axis.set_major_locator(major_locator)\n+                if minor_locator is not None:\n+                    axis.set_minor_locator(minor_locator)\n+                axis.set_major_formatter(major_formatter)\n+                axis.grid(False)\n+                from matplotlib.patches import Rectangle\n+                invisible_rect = Rectangle((0, 0), 1, 1, visible=False)\n+                invisible_rect.sticky_edges.x = [0, len(units_seed) - 1]\n+                invisible_rect.sticky_edges.y = [0, len(units_seed) - 1]\n+                axis.get_figure().add_artist(invisible_rect)\n+                axis.set_xmargin(0)\n+                axis.set_ymargin(0)\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.invert_default()\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
