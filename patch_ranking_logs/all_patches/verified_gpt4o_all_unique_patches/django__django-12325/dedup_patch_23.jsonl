{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..b86b7fd 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -191,8 +191,12 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n \n+        # Track fields inherited from base models.\n+        inherited_attributes = set()\n+\n         # Collect the parent links for multi-table inheritance.\n         parent_links = {}\n+        # Collect the parent links for multi-table inheritance.\n         for base in reversed([new_class] + parents):\n             # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n@@ -205,10 +209,6 @@ class ModelBase(type):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n-\n-        # Track fields inherited from base models.\n-        inherited_attributes = set()\n-        # Do the appropriate setup for any model parents.\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n                 # Things without _meta aren't functional models, so they're\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..6c102e7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -98,6 +98,7 @@ class ModelBase(type):\n             new_class._meta.concrete_model = base._meta.concrete_model\n         else:\n             new_class._meta.concrete_model = new_class\n+        inherited_attributes = set()\n         parent_links = {}\n         for base in reversed([new_class] + parents):\n             if not hasattr(base, '_meta'):\n@@ -108,7 +109,6 @@ class ModelBase(type):\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n                     parent_links[make_model_tuple(related)] = field\n-        inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n                 inherited_attributes.update(base.__dict__)\n", "normalized_occurrence": 1}
