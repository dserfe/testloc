{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex ecd2cce..7f1f836 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1381,15 +1381,17 @@ class Float(Number):\n         return int(mlib.to_int(self._mpf_))  # uses round_fast = round_down\n \n     def __eq__(self, other):\n-        from sympy.logic.boolalg import Boolean\n+        from sympy.logic.boolalg import Boolean, false\n         try:\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n+            if self == 0 and other is false:\n+                return True\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c5d42bc..5e725e5 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1186,15 +1186,17 @@ class Float(Number):\n         return int(mlib.to_int(self._mpf_))\n \n     def __eq__(self, other):\n-        from sympy.logic.boolalg import Boolean\n+        from sympy.logic.boolalg import Boolean, false\n         try:\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not self:\n-            return not other\n         if isinstance(other, Boolean):\n+            if self == 0 and other is false:\n+                return True\n             return False\n+        if not self:\n+            return not other\n         if other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n", "normalized_occurrence": 1}
