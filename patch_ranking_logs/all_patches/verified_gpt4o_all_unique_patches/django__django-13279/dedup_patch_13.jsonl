{"model_name_or_path": "agentless", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..6d87c90 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,10 +108,14 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n-        return signing.dumps(\n-            session_dict, salt=self.key_salt, serializer=self.serializer,\n-            compress=True,\n-        )\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            # Use legacy encode method for 'sha1' hashing algorithm\n+            return self._legacy_encode(session_dict)\n+        else:\n+            return signing.dumps(\n+                session_dict, salt=self.key_salt, serializer=self.serializer,\n+                compress=True,\n+            )\n \n     def decode(self, session_data):\n         try:\n@@ -121,7 +125,11 @@ class SessionBase:\n         except Exception:\n             return self._legacy_decode(session_data)\n \n-    def _legacy_decode(self, session_data):\n+    def _legacy_encode(self, session_dict):\n+        \"Legacy method to encode the given session dictionary.\"\n+        serialized = self.serializer().dumps(session_dict).encode('latin-1')\n+        hash = self._hash(serialized)\n+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 25789fc..a6beacd 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -64,13 +64,19 @@ class SessionBase:\n         key_salt = 'django.contrib.sessions' + self.__class__.__name__\n         return salted_hmac(key_salt, value).hexdigest()\n     def encode(self, session_dict):\n-        return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            return self._legacy_encode(session_dict)\n+        else:\n+            return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n     def decode(self, session_data):\n         try:\n             return signing.loads(session_data, salt=self.key_salt, serializer=self.serializer)\n         except Exception:\n             return self._legacy_decode(session_data)\n-    def _legacy_decode(self, session_data):\n+    def _legacy_encode(self, session_dict):\n+        serialized = self.serializer().dumps(session_dict).encode('latin-1')\n+        hash = self._hash(serialized)\n+        return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n         encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n             hash, serialized = encoded_data.split(b':', 1)\n", "normalized_occurrence": 1}
