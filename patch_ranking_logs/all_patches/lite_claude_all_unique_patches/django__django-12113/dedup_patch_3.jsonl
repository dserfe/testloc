{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..11a5a38 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -169,35 +169,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     introspection_class = DatabaseIntrospection\n     ops_class = DatabaseOperations\n \n-    def get_connection_params(self):\n-        settings_dict = self.settings_dict\n-        if not settings_dict['NAME']:\n-            raise ImproperlyConfigured(\n-                \"settings.DATABASES is improperly configured. \"\n-                \"Please supply the NAME value.\")\n-        kwargs = {\n-            # TODO: Remove str() when dropping support for PY36.\n-            # https://bugs.python.org/issue33496\n-            'database': str(settings_dict['NAME']),\n-            'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES,\n-            **settings_dict['OPTIONS'],\n-        }\n-        # Always allow the underlying SQLite connection to be shareable\n-        # between multiple threads. The safe-guarding will be handled at a\n-        # higher level by the `BaseDatabaseWrapper.allow_thread_sharing`\n-        # property. This is necessary as the shareability is disabled by\n-        # default in pysqlite and it cannot be changed once a connection is\n-        # opened.\n-        if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n-            warnings.warn(\n-                'The `check_same_thread` option was provided and set to '\n-                'True. It will be overridden with False. Use the '\n-                '`DatabaseWrapper.allow_thread_sharing` property instead '\n-                'for controlling thread shareability.',\n-                RuntimeWarning\n-            )\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n-        return kwargs\n+\n \n     @async_unsafe\n     def get_new_connection(self, conn_params):\n@@ -252,7 +224,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         return conn\n \n     def init_connection_state(self):\n-        pass\n+        # Set pragmas for better concurrent access handling\n+        with self.connection.cursor() as cursor:\n+            cursor.execute('PRAGMA busy_timeout = 30000;')  # 30 seconds timeout\n+            cursor.execute('PRAGMA journal_mode=WAL;')  # Use WAL journal mode\n+            cursor.execute('PRAGMA synchronous=NORMAL;')  # Reduce synchronous mode for better performance\n \n     def create_cursor(self, name=None):\n         return self.connection.cursor(factory=SQLiteCursorWrapper)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..4ce6f19 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -60,15 +60,6 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     features_class = DatabaseFeatures\n     introspection_class = DatabaseIntrospection\n     ops_class = DatabaseOperations\n-    def get_connection_params(self):\n-        settings_dict = self.settings_dict\n-        if not settings_dict['NAME']:\n-            raise ImproperlyConfigured('settings.DATABASES is improperly configured. Please supply the NAME value.')\n-        kwargs = {'database': str(settings_dict['NAME']), 'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES, **settings_dict['OPTIONS']}\n-        if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n-            warnings.warn('The `check_same_thread` option was provided and set to True. It will be overridden with False. Use the `DatabaseWrapper.allow_thread_sharing` property instead for controlling thread shareability.', RuntimeWarning)\n-        kwargs.update({'check_same_thread': False, 'uri': True})\n-        return kwargs\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n         conn = Database.connect(**conn_params)\n@@ -121,7 +112,10 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         conn.execute('PRAGMA foreign_keys = ON')\n         return conn\n     def init_connection_state(self):\n-        pass\n+        with self.connection.cursor() as cursor:\n+            cursor.execute('PRAGMA busy_timeout = 30000;')\n+            cursor.execute('PRAGMA journal_mode=WAL;')\n+            cursor.execute('PRAGMA synchronous=NORMAL;')\n     def create_cursor(self, name=None):\n         return self.connection.cursor(factory=SQLiteCursorWrapper)\n     @async_unsafe\n", "normalized_occurrence": 1}
