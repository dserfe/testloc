{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..6b48816 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -312,9 +313,19 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n+            # Instead of raising an error, we'll handle missing variables\n+            # by creating empty ones filled with NaN when join is 'outer'\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n+            ds_vars = {}\n+            for var in variables_to_merge:\n+                if var in ds:\n+                    ds_vars[var] = ds[var]\n+                elif join == 'outer':\n+                    # Create empty variable filled with NaN for missing variables\n+                    shape = tuple(ds.dims[d] for d in ds.dims)\n+                    ds_vars[var] = Variable(ds.dims, np.full(shape, fill_value))\n+                else:\n+                    raise ValueError(\n                     \"variables %r are present in some datasets but not others. \"\n                     % absent_merge_vars\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..e34a867 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -127,8 +127,15 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n             absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n+            ds_vars = {}\n+            for var in variables_to_merge:\n+                if var in ds:\n+                    ds_vars[var] = ds[var]\n+                elif join == 'outer':\n+                    shape = tuple((ds.dims[d] for d in ds.dims))\n+                    ds_vars[var] = Variable(ds.dims, np.full(shape, fill_value))\n+                else:\n+                    raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n         for var in variables_to_merge:\n", "normalized_occurrence": 1}
