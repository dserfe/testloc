{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..3cc4136 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -256,6 +256,9 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n \n     yield\n \n+    # Re-evaluate xfail marks after the test has been called to consider dynamically added markers\n+    item._store[xfailed_key] = evaluate_xfail_marks(item)\n+\n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n@@ -263,6 +266,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     rep = outcome.get_result()\n     xfailed = item._store.get(xfailed_key, None)\n     # unittest special case, see setting of unexpectedsuccess_key\n+    # Re-evaluate xfail marks before generating the report to consider dynamically added markers\n+    item._store[xfailed_key] = evaluate_xfail_marks(item)\n+\n+    xfailed = item._store.get(xfailed_key, None)\n+\n     if unexpectedsuccess_key in item._store and rep.when == \"call\":\n         reason = item._store[unexpectedsuccess_key]\n         if reason:\n@@ -312,4 +320,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..28178c5 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -136,11 +136,14 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n         if xfailed and (not xfailed.run):\n             xfail('[NOTRUN] ' + xfailed.reason)\n     yield\n+    item._store[xfailed_key] = evaluate_xfail_marks(item)\n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = (yield)\n     rep = outcome.get_result()\n     xfailed = item._store.get(xfailed_key, None)\n+    item._store[xfailed_key] = evaluate_xfail_marks(item)\n+    xfailed = item._store.get(xfailed_key, None)\n     if unexpectedsuccess_key in item._store and rep.when == 'call':\n         reason = item._store[unexpectedsuccess_key]\n         if reason:\n", "normalized_occurrence": 1}
