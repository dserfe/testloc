{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..6920b9e 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,8 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        # Use set difference to avoid negative lengths due to more _coord_names\n+        return len(set(self._dataset._variables) - set(self._dataset._coord_names))\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n@@ -381,7 +382,8 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n     @property\n     def variables(self) -> Mapping[Hashable, Variable]:\n         all_variables = self._dataset.variables\n-        return Frozen({k: all_variables[k] for k in self})\n+        # Ensure we only include data variables by checking the DataVariables membership\n+        return Frozen({k: all_variables[k] for k in self._dataset.data_vars})\n \n     @property\n     def dtypes(self) -> Frozen[Hashable, np.dtype]:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex fa0ec48..45e10fc 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -163,7 +163,7 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     def __iter__(self) -> Iterator[Hashable]:\n         return (key for key in self._dataset._variables if key not in self._dataset._coord_names)\n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return len(set(self._dataset._variables) - set(self._dataset._coord_names))\n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n     def __getitem__(self, key: Hashable) -> DataArray:\n@@ -175,7 +175,7 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     @property\n     def variables(self) -> Mapping[Hashable, Variable]:\n         all_variables = self._dataset.variables\n-        return Frozen({k: all_variables[k] for k in self})\n+        return Frozen({k: all_variables[k] for k in self._dataset.data_vars})\n     @property\n     def dtypes(self) -> Frozen[Hashable, np.dtype]:\n         return self._dataset.dtypes\n", "normalized_occurrence": 1}
