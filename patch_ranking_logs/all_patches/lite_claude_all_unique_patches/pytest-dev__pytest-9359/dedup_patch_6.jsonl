{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..39f0511 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -955,9 +955,14 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         # Fix locations (line numbers/column offsets).\n+        # Only copy location for the main assertion test and error handling\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and isinstance(stmt.test, ast.UnaryOp):\n+                # This is the main assertion test\n+                ast.copy_location(stmt.test, assert_)\n+                if stmt.body:  # Error handling branch\n+                    for node in traverse_node(stmt.body[-1]):  # Only process the raise statement\n+                        ast.copy_location(node, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..71762f8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -513,8 +513,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         for stmt in self.statements:\n-            for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+            if isinstance(stmt, ast.If) and isinstance(stmt.test, ast.UnaryOp):\n+                ast.copy_location(stmt.test, assert_)\n+                if stmt.body:\n+                    for node in traverse_node(stmt.body[-1]):\n+                        ast.copy_location(node, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
