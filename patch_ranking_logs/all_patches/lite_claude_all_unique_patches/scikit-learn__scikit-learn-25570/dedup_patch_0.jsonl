{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..074c84c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -850,9 +850,25 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         else:\n             Xs = [f.toarray() if sparse.issparse(f) else f for f in Xs]\n             config = _get_output_config(\"transform\", self)\n-            if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n+            if config[\"dense\"] == \"pandas\":\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n+                # Handle empty transformers by adding empty DataFrames\n+                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n+                if not Xs:\n+                    # If all transformers were skipped, create empty DataFrame\n+                    output = pd.DataFrame(index=range(X.shape[0]))\n+                else:\n+                    # Ensure all transformers have a corresponding DataFrame\n+                    all_Xs = []\n+                    xs_idx = 0\n+                    for name in transformer_names:\n+                        if xs_idx < len(Xs) and hasattr(Xs[xs_idx], \"iloc\"):\n+                            all_Xs.append(Xs[xs_idx])\n+                            xs_idx += 1\n+                        else:\n+                            # Add empty DataFrame for skipped transformer\n+                            all_Xs.append(pd.DataFrame(index=range(X.shape[0])))\n+                    output = pd.concat(all_Xs, axis=1)\n \n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..f1c5f6b 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -252,9 +252,21 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         else:\n             Xs = [f.toarray() if sparse.issparse(f) else f for f in Xs]\n             config = _get_output_config('transform', self)\n-            if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n+            if config['dense'] == 'pandas':\n                 pd = check_pandas_support('transform')\n-                output = pd.concat(Xs, axis=1)\n+                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n+                if not Xs:\n+                    output = pd.DataFrame(index=range(X.shape[0]))\n+                else:\n+                    all_Xs = []\n+                    xs_idx = 0\n+                    for name in transformer_names:\n+                        if xs_idx < len(Xs) and hasattr(Xs[xs_idx], 'iloc'):\n+                            all_Xs.append(Xs[xs_idx])\n+                            xs_idx += 1\n+                        else:\n+                            all_Xs.append(pd.DataFrame(index=range(X.shape[0])))\n+                    output = pd.concat(all_Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n                 transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n", "normalized_occurrence": 1}
