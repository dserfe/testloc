{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..c0b3d9a 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -592,6 +592,7 @@ class GaussianMixture(BaseMixture):\n             verbose=verbose, verbose_interval=verbose_interval)\n \n         self.covariance_type = covariance_type\n+        self.n_clusters = n_components  # Alias for consistency with clusterers\n         self.weights_init = weights_init\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n@@ -720,6 +721,21 @@ class GaussianMixture(BaseMixture):\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model and predict the labels for the data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component memberships.\n+        \"\"\"\n+        self.fit(X)\n+        return self.labels_\n+\n     def bic(self, X):\n         \"\"\"Bayesian information criterion for the current model on the input X.\n \n@@ -747,4 +763,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..86bf55c 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -119,6 +119,7 @@ class GaussianMixture(BaseMixture):\n     def __init__(self, n_components=1, covariance_type='full', tol=0.001, reg_covar=1e-06, max_iter=100, n_init=1, init_params='kmeans', weights_init=None, means_init=None, precisions_init=None, random_state=None, warm_start=False, verbose=0, verbose_interval=10):\n         super(GaussianMixture, self).__init__(n_components=n_components, tol=tol, reg_covar=reg_covar, max_iter=max_iter, n_init=n_init, init_params=init_params, random_state=random_state, warm_start=warm_start, verbose=verbose, verbose_interval=verbose_interval)\n         self.covariance_type = covariance_type\n+        self.n_clusters = n_components\n         self.weights_init = weights_init\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n@@ -185,6 +186,9 @@ class GaussianMixture(BaseMixture):\n             cov_params = self.n_components\n         mean_params = n_features * self.n_components\n         return int(cov_params + mean_params + self.n_components - 1)\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.labels_\n     def bic(self, X):\n         return -2 * self.score(X) * X.shape[0] + self._n_parameters() * np.log(X.shape[0])\n     def aic(self, X):\n", "normalized_occurrence": 1}
