{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13023", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex b1fce64..8340ac1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1499,14 +1499,20 @@ class DecimalField(Field):\n             return value\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n-        try:\n-            return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n-            raise exceptions.ValidationError(\n-                self.error_messages['invalid'],\n-                code='invalid',\n-                params={'value': value},\n-            )\n+        if isinstance(value, (str, int, decimal.Decimal)):\n+            try:\n+                return decimal.Decimal(value)\n+            except decimal.InvalidOperation:\n+                raise exceptions.ValidationError(\n+                    self.error_messages['invalid'],\n+                    code='invalid',\n+                    params={'value': value},\n+                )\n+        raise exceptions.ValidationError(\n+            self.error_messages['invalid'],\n+            code='invalid',\n+            params={'value': value},\n+        )\n \n     def get_db_prep_save(self, value, connection):\n         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)\n", "occurrence": 3, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d93730b..e4b91b8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -749,10 +749,12 @@ class DecimalField(Field):\n             return value\n         if isinstance(value, float):\n             return self.context.create_decimal_from_float(value)\n-        try:\n-            return decimal.Decimal(value)\n-        except decimal.InvalidOperation:\n-            raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n+        if isinstance(value, (str, int, decimal.Decimal)):\n+            try:\n+                return decimal.Decimal(value)\n+            except decimal.InvalidOperation:\n+                raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n+        raise exceptions.ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})\n     def get_db_prep_save(self, value, connection):\n         return connection.ops.adapt_decimalfield_value(self.to_python(value), self.max_digits, self.decimal_places)\n     def get_prep_value(self, value):\n", "normalized_occurrence": 3}
