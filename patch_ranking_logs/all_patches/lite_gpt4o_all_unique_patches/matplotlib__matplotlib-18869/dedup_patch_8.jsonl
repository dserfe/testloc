{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..298040a 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -130,8 +130,15 @@ __bibtex__ = r\"\"\"@Article{Hunter:2007,\n }\"\"\"\n \n \n+from distutils.version import LooseVersion\n+\n+__version__ = None\n+version_info = None\n+__loose_version__ = None\n+\n def __getattr__(name):\n-    if name == \"__version__\":\n+    global __version__, version_info, __loose_version__\n+    if name in (\"__version__\", \"version_info\", \"__loose_version__\"):\n         import setuptools_scm\n         global __version__  # cache it.\n         # Only shell out to a git subprocess if really needed, and not on a\n@@ -147,7 +154,16 @@ def __getattr__(name):\n             )\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n-        return __version__\n+        if name == \"__version__\":\n+            return __version__\n+        elif name == \"version_info\":\n+            if version_info is None:\n+                version_info = tuple(map(int, __version__.split(\".\")[:3]))\n+            return version_info\n+        elif name == \"__loose_version__\":\n+            if __loose_version__ is None:\n+                __loose_version__ = LooseVersion(__version__)\n+            return __loose_version__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 4b4b135..b44b838 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -25,8 +25,13 @@ from matplotlib.cbook import mplDeprecation\n from matplotlib.rcsetup import validate_backend, cycler\n _log = logging.getLogger(__name__)\n __bibtex__ = '@Article{Hunter:2007,\\n  Author    = {Hunter, J. D.},\\n  Title     = {Matplotlib: A 2D graphics environment},\\n  Journal   = {Computing in Science \\\\& Engineering},\\n  Volume    = {9},\\n  Number    = {3},\\n  Pages     = {90--95},\\n  abstract  = {Matplotlib is a 2D graphics package used for Python\\n  for application development, interactive scripting, and\\n  publication-quality image generation across user\\n  interfaces and operating systems.},\\n  publisher = {IEEE COMPUTER SOC},\\n  year      = 2007\\n}'\n+from distutils.version import LooseVersion\n+__version__ = None\n+version_info = None\n+__loose_version__ = None\n def __getattr__(name):\n-    if name == '__version__':\n+    global __version__, version_info, __loose_version__\n+    if name in ('__version__', 'version_info', '__loose_version__'):\n         import setuptools_scm\n         global __version__\n         root = Path(__file__).resolve().parents[2]\n@@ -34,7 +39,16 @@ def __getattr__(name):\n             __version__ = setuptools_scm.get_version(root=root, version_scheme='post-release', local_scheme='node-and-date', fallback_version=_version.version)\n         else:\n             __version__ = _version.version\n-        return __version__\n+        if name == '__version__':\n+            return __version__\n+        elif name == 'version_info':\n+            if version_info is None:\n+                version_info = tuple(map(int, __version__.split('.')[:3]))\n+            return version_info\n+        elif name == '__loose_version__':\n+            if __loose_version__ is None:\n+                __loose_version__ = LooseVersion(__version__)\n+            return __loose_version__\n     raise AttributeError(f'module {__name__!r} has no attribute {name!r}')\n def _check_versions():\n     from . import ft2font\n", "normalized_occurrence": 1}
