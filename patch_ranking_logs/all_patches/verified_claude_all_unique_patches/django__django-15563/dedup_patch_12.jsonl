{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..3059ccc 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,14 +987,39 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        \n+        # Get the model and its parents\n+        model = self.model\n+        parents = [parent for parent in model.__bases__ if issubclass(parent, models.Model)]\n+        \n+        # Separate updates by parent table\n+        updates_by_parent = {}\n+        for field_name, value in kwargs.items():\n+            for parent in [model] + parents:\n+                if field_name in parent._meta.fields_map:\n+                    if parent not in updates_by_parent:\n+                        updates_by_parent[parent] = {}\n+                    updates_by_parent[parent][field_name] = value\n+                    break\n+        \n+        total_rows = 0\n+        # Perform updates for each parent table\n+        for parent, updates in updates_by_parent.items():\n+            if not updates:\n+                continue\n+                \n+            query = self.query.chain(sql.UpdateQuery)\n+            query.model = parent\n+            query.add_update_values(updates)\n+            query.annotations = {}\n+            \n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if rows:\n+                    total_rows = rows\n+                    \n         self._result_cache = None\n-        return rows\n+        return total_rows\n \n     update.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..7671dfe 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,13 +532,30 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        query.annotations = {}\n-        with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        model = self.model\n+        parents = [parent for parent in model.__bases__ if issubclass(parent, models.Model)]\n+        updates_by_parent = {}\n+        for field_name, value in kwargs.items():\n+            for parent in [model] + parents:\n+                if field_name in parent._meta.fields_map:\n+                    if parent not in updates_by_parent:\n+                        updates_by_parent[parent] = {}\n+                    updates_by_parent[parent][field_name] = value\n+                    break\n+        total_rows = 0\n+        for parent, updates in updates_by_parent.items():\n+            if not updates:\n+                continue\n+            query = self.query.chain(sql.UpdateQuery)\n+            query.model = parent\n+            query.add_update_values(updates)\n+            query.annotations = {}\n+            with transaction.mark_for_rollback_on_error(using=self.db):\n+                rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+                if rows:\n+                    total_rows = rows\n         self._result_cache = None\n-        return rows\n+        return total_rows\n     update.alters_data = True\n     def _update(self, values):\n         if self.query.is_sliced:\n", "normalized_occurrence": 1}
