{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..cf54b4c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -53,8 +53,17 @@ class Q(tree.Node):\n \n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        def pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+\n+        self_children = [(k, pickleable(v)) for k, v in self.children]\n+        other_children = [(k, pickleable(v)) for k, v in other.children]\n+\n+        obj.children.extend(self_children)\n+        obj.connector = conn\n+        obj.children.extend(other_children)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..41d2e2c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -26,8 +26,15 @@ class Q(tree.Node):\n             return copy.deepcopy(other)\n         obj = type(self)()\n         obj.connector = conn\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        def pickleable(value):\n+            if isinstance(value, dict_keys):\n+                return list(value)\n+            return value\n+        self_children = [(k, pickleable(v)) for k, v in self.children]\n+        other_children = [(k, pickleable(v)) for k, v in other.children]\n+        obj.children.extend(self_children)\n+        obj.connector = conn\n+        obj.children.extend(other_children)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
