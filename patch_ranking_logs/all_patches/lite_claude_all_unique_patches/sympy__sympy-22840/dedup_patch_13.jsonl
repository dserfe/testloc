{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex e84863b..de8427c 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -684,6 +684,10 @@ class MatrixSymbol(MatrixExpr):\n         return self.args[0].name\n \n     def _entry(self, i, j, **kwargs):\n+        from sympy.matrices.expressions.matexpr import MatrixElement\n+        # Return a direct reference to avoid CSE creating redundant variables\n+        if i.is_number and j.is_number:\n+            return self[i*self.shape[1] + j]  \n         return MatrixElement(self, i, j)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 7f0177d..7cb9bde 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -397,6 +397,9 @@ class MatrixSymbol(MatrixExpr):\n     def name(self):\n         return self.args[0].name\n     def _entry(self, i, j, **kwargs):\n+        from sympy.matrices.expressions.matexpr import MatrixElement\n+        if i.is_number and j.is_number:\n+            return self[i * self.shape[1] + j]\n         return MatrixElement(self, i, j)\n     @property\n     def free_symbols(self):\n", "normalized_occurrence": 1}
