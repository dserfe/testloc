{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..f680e9d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,7 +964,39 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n+    def _rewrite_all_any(self, call):\n+        func_name = call.func.id\n+        comp = call.args[0]\n+        iter_var = comp.elt\n+        \n+        # Create a new variable to store the result of the iterable expression\n+        res_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], comp))\n+        \n+        # Create a for loop to iterate over the items in the iterable\n+        loop_var = ast.Name(id='item', ctx=ast.Store())\n+        loop_body = []\n+        self.statements.append(ast.For(\n+            target=loop_var,\n+            iter=ast.Name(id=res_var, ctx=ast.Load()),\n+            body=loop_body,\n+            orelse=[]\n+        ))\n+        \n+        # Create the appropriate assertion inside the loop body\n+        test = ast.Call(\n+            func=call.func,\n+            args=[comp.elt],\n+            keywords=[]\n+        )\n+        assert_stmt = ast.Assert(\n+            test=test,\n+            msg=ast.Str(s=f\"{func_name}({ast.dump(comp.elt)}) failed\")\n+        )\n+        loop_body.append(assert_stmt)\n+        \n+        # Return the main assertion based on the original call\n+        return self.generic_visit(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1028,6 +1060,7 @@ warn_explicit(\n         return res, outer_expl\n \n     # ast.Call signature changed on 3.5,\n+        visit_Call = visit_Call_35\n     # conditionally change  which methods is named\n     # visit_Call depending on Python version\n     if sys.version_info >= (3, 5):\n@@ -1081,4 +1114,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..87029e2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,7 +543,19 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n+    def _rewrite_all_any(self, call):\n+        func_name = call.func.id\n+        comp = call.args[0]\n+        iter_var = comp.elt\n+        res_var = self.variable()\n+        self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], comp))\n+        loop_var = ast.Name(id='item', ctx=ast.Store())\n+        loop_body = []\n+        self.statements.append(ast.For(target=loop_var, iter=ast.Name(id=res_var, ctx=ast.Load()), body=loop_body, orelse=[]))\n+        test = ast.Call(func=call.func, args=[comp.elt], keywords=[])\n+        assert_stmt = ast.Assert(test=test, msg=ast.Str(s=f'{func_name}({ast.dump(comp.elt)}) failed'))\n+        loop_body.append(assert_stmt)\n+        return self.generic_visit(call)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -595,6 +607,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         res_expl = self.explanation_param(self.display(res))\n         outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n         return (res, outer_expl)\n+        visit_Call = visit_Call_35\n     if sys.version_info >= (3, 5):\n         visit_Call = visit_Call_35\n     else:\n", "normalized_occurrence": 1}
