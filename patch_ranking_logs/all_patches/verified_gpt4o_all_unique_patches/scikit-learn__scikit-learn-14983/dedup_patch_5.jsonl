{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14983", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 8743303..32cdff9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1217,6 +1217,63 @@ class RepeatedKFold(_RepeatedSplits):\n             KFold, n_repeats, random_state, n_splits=n_splits)\n \n \n+class RepeatedKFold(_RepeatedSplits):\n+    \"\"\"Repeated K-Fold cross validator.\n+\n+    Repeats K-Fold n times with different randomization in each repetition.\n+\n+    Read more in the :ref:`User Guide <cross_validation>`.\n+\n+    Parameters\n+    ----------\n+    n_splits : int, default=5\n+        Number of folds. Must be at least 2.\n+\n+    n_repeats : int, default=10\n+        Number of times cross-validator needs to be repeated.\n+\n+    random_state : int, RandomState instance or None, optional, default=None\n+        If int, random_state is the seed used by the random number generator;\n+        If RandomState instance, random_state is the random number generator;\n+        If None, the random number generator is the RandomState instance used\n+        by `np.random`.\n+\n+    Examples\n+    --------\n+    >>> import numpy as np\n+    >>> from sklearn.model_selection import RepeatedKFold\n+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n+    >>> y = np.array([0, 0, 1, 1])\n+    >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)\n+    >>> for train_index, test_index in rkf.split(X):\n+    ...     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n+    ...     X_train, X_test = X[train_index], X[test_index]\n+    ...     y_train, y_test = y[train_index], y[test_index]\n+    ...\n+    TRAIN: [0 1] TEST: [2 3]\n+    TRAIN: [2 3] TEST: [0 1]\n+    TRAIN: [1 2] TEST: [0 3]\n+    TRAIN: [0 3] TEST: [1 2]\n+\n+    Notes\n+    -----\n+    Randomized CV splitters may return different results for each call of\n+    split. You can make the results identical by setting ``random_state``\n+    to an integer.\n+\n+    See also\n+    --------\n+    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n+    \"\"\"\n+    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        super().__init__(\n+            KFold, n_repeats, random_state, n_splits=n_splits)\n+\n+    def __repr__(self):\n+        return (f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, \"\n+                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n+\n+\n class RepeatedStratifiedKFold(_RepeatedSplits):\n     \"\"\"Repeated Stratified K-Fold cross validator.\n \n@@ -1270,6 +1327,15 @@ class RepeatedStratifiedKFold(_RepeatedSplits):\n             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n \n \n+    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        super().__init__(\n+            StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n+\n+    def __repr__(self):\n+        return (f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, \"\n+                f\"n_repeats={self.n_repeats}, random_state={self.random_state})\")\n+\n+\n class BaseShuffleSplit(metaclass=ABCMeta):\n     \"\"\"Base class for ShuffleSplit and StratifiedShuffleSplit\"\"\"\n \n", "occurrence": 1, "normalized_patch": "--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n+class RepeatedKFold(_RepeatedSplits):\n+    \"\"\"Repeated K-Fold cross validator.\n+\n+    Repeats K-Fold n times with different randomization in each repetition.\n+\n+    Read more in the :ref:`User Guide <cross_validation>`.\n+\n+    Parameters\n+    ----------\n+    n_splits : int, default=5\n+        Number of folds. Must be at least 2.\n+\n+    n_repeats : int, default=10\n+        Number of times cross-validator needs to be repeated.\n+\n+    random_state : int, RandomState instance or None, optional, default=None\n+        If int, random_state is the seed used by the random number generator;\n+        If RandomState instance, random_state is the random number generator;\n+        If None, the random number generator is the RandomState instance used\n+        by `np.random`.\n+\n+    Examples\n+    --------\n+    >>> import numpy as np\n+    >>> from sklearn.model_selection import RepeatedKFold\n+    >>> X = np.array([[1, 2], [3, 4], [1, 2], [3, 4]])\n+    >>> y = np.array([0, 0, 1, 1])\n+    >>> rkf = RepeatedKFold(n_splits=2, n_repeats=2, random_state=2652124)\n+    >>> for train_index, test_index in rkf.split(X):\n+    ...     print(\"TRAIN:\", train_index, \"TEST:\", test_index)\n+    ...     X_train, X_test = X[train_index], X[test_index]\n+    ...     y_train, y_test = y[train_index], y[test_index]\n+    ...\n+    TRAIN: [0 1] TEST: [2 3]\n+    TRAIN: [2 3] TEST: [0 1]\n+    TRAIN: [1 2] TEST: [0 3]\n+    TRAIN: [0 3] TEST: [1 2]\n+\n+    Notes\n+    -----\n+    Randomized CV splitters may return different results for each call of\n+    split. You can make the results identical by setting ``random_state``\n+    to an integer.\n+\n+    See also\n+    --------\n+    RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.\n+    \"\"\"\n+\n+    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        super().__init__(KFold, n_repeats, random_state, n_splits=n_splits)\n+\n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+\n+    def __init__(self, n_splits=5, n_repeats=10, random_state=None):\n+        super().__init__(StratifiedKFold, n_repeats, random_state, n_splits=n_splits)\n+\n+    def __repr__(self):\n+        return f\"{self.__class__.__name__}(n_splits={self.cvargs['n_splits']}, n_repeats={self.n_repeats}, random_state={self.random_state})\"\n+", "normalized_occurrence": 1}
