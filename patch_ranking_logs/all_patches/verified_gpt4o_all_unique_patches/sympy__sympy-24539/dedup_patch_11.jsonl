{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24539", "model_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 8995407..ac6b93c 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -618,7 +618,7 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n", "occurrence": 6, "normalized_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 082d6a9..a021a61 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -339,7 +339,7 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError('not enough symbols, expected %s got %s' % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n         return expr_from_dict(self.as_expr_dict(), *symbols)\n     def as_expr_dict(self):\n", "normalized_occurrence": 6}
