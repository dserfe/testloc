{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..6cba0ad 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -242,6 +242,16 @@ class Field(RegisterLookupMixin):\n             return []\n \n     def _check_choices(self):\n+        if self.choices and self.max_length:\n+            longest_choice_length = max(len(str(choice[0])) for choice in self.choices if isinstance(choice, (list, tuple)))\n+            if longest_choice_length > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest choice value.\",\n+                        obj=self,\n+                        id='fields.E122',\n+                    )\n+                ]\n         if not self.choices:\n             return []\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..1f23055 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -118,6 +118,10 @@ class Field(RegisterLookupMixin):\n         else:\n             return []\n     def _check_choices(self):\n+        if self.choices and self.max_length:\n+            longest_choice_length = max((len(str(choice[0])) for choice in self.choices if isinstance(choice, (list, tuple))))\n+            if longest_choice_length > self.max_length:\n+                return [checks.Error(\"'max_length' is too small to fit the longest choice value.\", obj=self, id='fields.E122')]\n         if not self.choices:\n             return []\n         def is_value(value, accept_promise=True):\n", "normalized_occurrence": 1}
