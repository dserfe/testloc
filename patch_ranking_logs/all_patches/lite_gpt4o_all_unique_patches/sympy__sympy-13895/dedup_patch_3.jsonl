{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..a0ac6db 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -215,14 +215,15 @@ class Pow(Expr):\n                 if not e.is_Atom and b is not S.Exp1 and not isinstance(b, exp_polar):\n                     from sympy import numer, denom, log, sign, im, factor_terms\n                     c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n-                    den = denom(ex)\n-                    if isinstance(den, log) and den.args[0] == b:\n-                        return S.Exp1**(c*numer(ex))\n-                    elif den.is_Add:\n-                        s = sign(im(b))\n-                        if s.is_Number and s and den == \\\n-                                log(-factor_terms(b, sign=False)) + s*S.ImaginaryUnit*S.Pi:\n+                    if not (im(b).is_zero or im(c).is_zero):\n+                        den = denom(ex)\n+                        if isinstance(den, log) and den.args[0] == b:\n                             return S.Exp1**(c*numer(ex))\n+                        elif den.is_Add:\n+                            s = sign(im(b))\n+                            if s.is_Number and s and den == \\\n+                                    log(-factor_terms(b, sign=False)) + s*S.ImaginaryUnit*S.Pi:\n+                                return S.Exp1**(c*numer(ex))\n \n                 obj = b._eval_power(e)\n                 if obj is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..058f8d5 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -87,13 +87,14 @@ class Pow(Expr):\n                 if not e.is_Atom and b is not S.Exp1 and (not isinstance(b, exp_polar)):\n                     from sympy import numer, denom, log, sign, im, factor_terms\n                     c, ex = factor_terms(e, sign=False).as_coeff_Mul()\n-                    den = denom(ex)\n-                    if isinstance(den, log) and den.args[0] == b:\n-                        return S.Exp1 ** (c * numer(ex))\n-                    elif den.is_Add:\n-                        s = sign(im(b))\n-                        if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n+                    if not (im(b).is_zero or im(c).is_zero):\n+                        den = denom(ex)\n+                        if isinstance(den, log) and den.args[0] == b:\n                             return S.Exp1 ** (c * numer(ex))\n+                        elif den.is_Add:\n+                            s = sign(im(b))\n+                            if s.is_Number and s and (den == log(-factor_terms(b, sign=False)) + s * S.ImaginaryUnit * S.Pi):\n+                                return S.Exp1 ** (c * numer(ex))\n                 obj = b._eval_power(e)\n                 if obj is not None:\n                     return obj\n", "normalized_occurrence": 1}
