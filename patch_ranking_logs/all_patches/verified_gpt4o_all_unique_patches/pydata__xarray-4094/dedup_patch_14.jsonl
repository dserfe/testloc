{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..aac1b90 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3458,7 +3458,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                     assign_coords[dim] = None\n \n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            if expand_dims:\n+                expand_dims.add(variable_dim)\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n@@ -3470,7 +3471,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n \n         # concatenate the arrays\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n-        data_array = xr.concat(stackable_vars, dim=new_dim)\n+        data_array = xr.concat(stackable_vars, dim=new_dim, fill_value=np.nan)\n \n         # coerce the levels of the MultiIndex to have the same type as the\n         # input dimensions. This code is messy, so it might be better to just\n@@ -3479,7 +3480,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         levels = [idx.levels[0]] + [\n             level.astype(self[level.name].dtype) for level in idx.levels[1:]\n         ]\n-        new_idx = idx.set_levels(levels)\n+        new_idx = idx.set_levels(levels, verify_integrity=False)\n         data_array[new_dim] = IndexVariable(new_dim, new_idx)\n \n         if name is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..1374a1c 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1151,14 +1151,15 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            if expand_dims:\n+                expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n             return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n-        data_array = xr.concat(stackable_vars, dim=new_dim)\n+        data_array = xr.concat(stackable_vars, dim=new_dim, fill_value=np.nan)\n         idx = data_array.indexes[new_dim]\n         levels = [idx.levels[0]] + [level.astype(self[level.name].dtype) for level in idx.levels[1:]]\n-        new_idx = idx.set_levels(levels)\n+        new_idx = idx.set_levels(levels, verify_integrity=False)\n         data_array[new_dim] = IndexVariable(new_dim, new_idx)\n         if name is not None:\n             data_array.name = name\n", "normalized_occurrence": 1}
