{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..f09ab91 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -112,12 +112,15 @@ class IndexColumns(Columns):\n         def col_str(column, idx):\n             # Index.__init__() guarantees that self.opclasses is the same\n             # length as self.columns.\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            parts = [self.quote_name(column)]\n+            if self.opclasses[idx]:\n+                parts.append(self.opclasses[idx])\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                if self.col_suffixes[idx]:\n+                    parts.append(self.col_suffixes[idx])\n             except IndexError:\n                 pass\n-            return col\n+            return ' '.join(parts)\n \n         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))\n \n", "occurrence": 9, "normalized_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 285a76a..e4d3b8e 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -58,12 +58,15 @@ class IndexColumns(Columns):\n         super().__init__(table, columns, quote_name, col_suffixes)\n     def __str__(self):\n         def col_str(column, idx):\n-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])\n+            parts = [self.quote_name(column)]\n+            if self.opclasses[idx]:\n+                parts.append(self.opclasses[idx])\n             try:\n-                col = '{} {}'.format(col, self.col_suffixes[idx])\n+                if self.col_suffixes[idx]:\n+                    parts.append(self.col_suffixes[idx])\n             except IndexError:\n                 pass\n-            return col\n+            return ' '.join(parts)\n         return ', '.join((col_str(column, idx) for idx, column in enumerate(self.columns)))\n class ForeignKeyName(TableColumns):\n     def __init__(self, from_table, from_columns, to_table, to_columns, suffix_template, create_fk_name):\n", "normalized_occurrence": 9}
