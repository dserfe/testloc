{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a096f65..914fc1e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,6 +622,10 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n+        # Strip unused annotations for count queries\n+        unreferenced_annotations = set(self.query.annotations.keys()) - set(self.query.annotation_select)\n+        if unreferenced_annotations:\n+            self.query.set_annotation_mask(self.query.annotation_select)\n         return self.query.get_count(using=self.db)\n \n     async def acount(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 56014f8..644bab9 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -323,6 +323,9 @@ class QuerySet(AltersData):\n     def count(self):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n+        unreferenced_annotations = set(self.query.annotations.keys()) - set(self.query.annotation_select)\n+        if unreferenced_annotations:\n+            self.query.set_annotation_mask(self.query.annotation_select)\n         return self.query.get_count(using=self.db)\n     async def acount(self):\n         return await sync_to_async(self.count)()\n", "normalized_occurrence": 1}
