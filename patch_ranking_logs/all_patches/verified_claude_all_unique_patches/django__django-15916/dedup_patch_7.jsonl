{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..442c47c 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -253,17 +253,13 @@ class ModelFormOptions:\n         self.help_texts = getattr(options, \"help_texts\", None)\n         self.error_messages = getattr(options, \"error_messages\", None)\n         self.field_classes = getattr(options, \"field_classes\", None)\n+        self.formfield_callback = getattr(options, \"formfield_callback\", None)\n \n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-\n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # Get formfield_callback from class attributes or None\n+        formfield_callback = attrs.pop(\"formfield_callback\", None)\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n@@ -271,6 +267,10 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             return new_class\n \n         opts = new_class._meta = ModelFormOptions(getattr(new_class, \"Meta\", None))\n+        \n+        # If formfield_callback is specified in Meta, use that instead\n+        if formfield_callback is None and hasattr(opts, \"formfield_callback\"):\n+            formfield_callback = opts.formfield_callback\n \n         # We check if a string was passed to `fields` or `exclude`,\n         # which is likely to be a mistake where the user typed ('foo') instead\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..06c899b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -107,18 +107,16 @@ class ModelFormOptions:\n         self.help_texts = getattr(options, 'help_texts', None)\n         self.error_messages = getattr(options, 'error_messages', None)\n         self.field_classes = getattr(options, 'field_classes', None)\n+        self.formfield_callback = getattr(options, 'formfield_callback', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        formfield_callback = attrs.pop('formfield_callback', None)\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n         opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))\n+        if formfield_callback is None and hasattr(opts, 'formfield_callback'):\n+            formfield_callback = opts.formfield_callback\n         for opt in ['fields', 'exclude', 'localized_fields']:\n             value = getattr(opts, opt)\n             if isinstance(value, str) and value != ALL_FIELDS:\n", "normalized_occurrence": 1}
