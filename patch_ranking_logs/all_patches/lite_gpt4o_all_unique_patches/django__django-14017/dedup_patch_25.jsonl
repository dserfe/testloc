{"model_name_or_path": "agentless", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..c4746aa 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,6 +40,8 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        if hasattr(other, '__rand__'):\n+            return other.__rand__(self)\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n@@ -64,6 +66,12 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n \n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+\n+    def __ror__(self, other):\n+        return self._combine(other, self.OR)\n+\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..04ce56d 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -17,6 +17,8 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n+        if hasattr(other, '__rand__'):\n+            return other.__rand__(self)\n         if not isinstance(other, Q):\n             raise TypeError(other)\n         if not other:\n@@ -34,6 +36,10 @@ class Q(tree.Node):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n+    def __rand__(self, other):\n+        return self._combine(other, self.AND)\n+    def __ror__(self, other):\n+        return self._combine(other, self.OR)\n     def __invert__(self):\n         obj = type(self)()\n         obj.add(self, self.AND)\n", "normalized_occurrence": 1}
