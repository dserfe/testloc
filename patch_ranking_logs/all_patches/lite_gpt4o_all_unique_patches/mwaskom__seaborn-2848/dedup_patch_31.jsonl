{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..cce077e 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1586,17 +1586,23 @@ class PairGrid(Grid):\n         else:\n             axes_vars = [x_var, y_var]\n \n-        hue_grouped = self.data.groupby(self.hue_vals)\n-        for k, label_k in enumerate(self._hue_order):\n+        if 'hue' in kwargs:\n+            hue = pd.Series(kwargs['hue'], index=self.data.index)\n+            hue_grouped = self.data.groupby(hue)\n+            hue_order = categorical_order(hue, kwargs.get('hue_order', None))\n+            palette = self._get_palette(self.data, hue, hue_order, self._orig_palette)\n+        else:\n+            hue_grouped = self.data.groupby(self.hue_vals)\n+            hue_order = self._hue_order\n+            palette = self.palette\n \n+        for k, label_k in enumerate(hue_order):\n             kws = kwargs.copy()\n \n-            # Attempt to get data for this level, allowing for empty\n             try:\n                 data_k = hue_grouped.get_group(label_k)\n             except KeyError:\n-                data_k = pd.DataFrame(columns=axes_vars,\n-                                      dtype=float)\n+                data_k = pd.DataFrame(columns=axes_vars, dtype=float)\n \n             if self._dropna:\n                 data_k = data_k[axes_vars].dropna()\n@@ -1606,7 +1612,7 @@ class PairGrid(Grid):\n \n             for kw, val_list in self.hue_kws.items():\n                 kws[kw] = val_list[k]\n-            kws.setdefault(\"color\", self.palette[k])\n+            kws.setdefault(\"color\", palette[k])\n             if self._hue_var is not None:\n                 kws[\"label\"] = label_k\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..3a03bce 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -761,8 +761,16 @@ class PairGrid(Grid):\n             axes_vars = [x_var]\n         else:\n             axes_vars = [x_var, y_var]\n-        hue_grouped = self.data.groupby(self.hue_vals)\n-        for k, label_k in enumerate(self._hue_order):\n+        if 'hue' in kwargs:\n+            hue = pd.Series(kwargs['hue'], index=self.data.index)\n+            hue_grouped = self.data.groupby(hue)\n+            hue_order = categorical_order(hue, kwargs.get('hue_order', None))\n+            palette = self._get_palette(self.data, hue, hue_order, self._orig_palette)\n+        else:\n+            hue_grouped = self.data.groupby(self.hue_vals)\n+            hue_order = self._hue_order\n+            palette = self.palette\n+        for k, label_k in enumerate(hue_order):\n             kws = kwargs.copy()\n             try:\n                 data_k = hue_grouped.get_group(label_k)\n@@ -774,7 +782,7 @@ class PairGrid(Grid):\n             y = data_k[y_var]\n             for kw, val_list in self.hue_kws.items():\n                 kws[kw] = val_list[k]\n-            kws.setdefault('color', self.palette[k])\n+            kws.setdefault('color', palette[k])\n             if self._hue_var is not None:\n                 kws['label'] = label_k\n             if str(func.__module__).startswith('seaborn'):\n", "normalized_occurrence": 1}
