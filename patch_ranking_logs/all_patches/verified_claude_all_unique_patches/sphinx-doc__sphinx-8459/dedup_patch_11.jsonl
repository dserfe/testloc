{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..97e4a4a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -54,6 +54,8 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     except KeyError:\n         # signature node does not have valid context info for the target object\n         return\n+        \n+    type_aliases = app.config.autodoc_type_aliases\n \n     annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n@@ -62,8 +64,14 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n+        # Apply type aliases to annotations\n+        processed_annotations = annotations[fullname].copy()\n+        for param_name, annotation in processed_annotations.items():\n+            if annotation in type_aliases:\n+                processed_annotations[param_name] = type_aliases[annotation]\n+\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, processed_annotations)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..455c887 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -34,14 +34,19 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             fullname = signature['fullname']\n     except KeyError:\n         return\n+    type_aliases = app.config.autodoc_type_aliases\n     annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n         if field_lists == []:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n+        processed_annotations = annotations[fullname].copy()\n+        for param_name, annotation in processed_annotations.items():\n+            if annotation in type_aliases:\n+                processed_annotations[param_name] = type_aliases[annotation]\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, processed_annotations)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
