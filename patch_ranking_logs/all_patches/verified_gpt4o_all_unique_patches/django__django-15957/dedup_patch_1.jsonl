{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex dad7142..12f41af 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -145,7 +145,10 @@ class ForwardManyToOneDescriptor:\n             }\n         else:\n             query = {\"%s__in\" % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        if queryset.query.is_sliced:\n+            raise ValueError(\"Cannot use sliced querysets with prefetch_related()\")\n+        else:\n+            queryset = queryset.filter(**query)\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 4910c4e..4a1c034 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -33,7 +33,10 @@ class ForwardManyToOneDescriptor:\n             query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        if queryset.query.is_sliced:\n+            raise ValueError('Cannot use sliced querysets with prefetch_related()')\n+        else:\n+            queryset = queryset.filter(**query)\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n", "normalized_occurrence": 1}
