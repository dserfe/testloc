{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..261b1f1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,58 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and call.args:\n+            # Get the first argument (generator or iterable)\n+            arg = call.args[0]\n+            if isinstance(arg, ast.GeneratorExp) or isinstance(arg, ast.ListComp):\n+                # Create a for loop that checks each element\n+                iter_var = arg.generators[0].target\n+                iter_expr = arg.generators[0].iter\n+                test_expr = arg.elt\n+                \n+                # Create the loop AST\n+                temp_var = self.new_name()\n+                if call.func.id == 'all':\n+                    # for x in iter: assert pred(x)\n+                    loop_body = [ast.Assert(test_expr, None)]\n+                else:  # any\n+                    # found = False\n+                    # for x in iter:\n+                    #     if pred(x):\n+                    #         found = True\n+                    #         break\n+                    # assert found\n+                    found_var = self.new_name()\n+                    loop_body = [\n+                        ast.If(\n+                            test_expr,\n+                            [ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(value=True)),\n+                             ast.Break()],\n+                            []\n+                        )\n+                    ]\n+                    \n+                loop = ast.For(iter_var, iter_expr, loop_body, [])\n+                if call.func.id == 'any':\n+                    # Wrap in try/finally to ensure found is initialized\n+                    wrapper = [\n+                        ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(value=False)),\n+                        loop,\n+                        ast.Assert(ast.Name(found_var, ast.Load()), None)\n+                    ]\n+                    return self.assign(wrapper), func_expl\n+                return self.assign(loop), func_expl\n+        \n+        # Normal call handling\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        \"\"\"\n+        visit `ast.Call` nodes on Python3.5 and after\n+        \"\"\"\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..c85772d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,27 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and call.args:\n+            arg = call.args[0]\n+            if isinstance(arg, ast.GeneratorExp) or isinstance(arg, ast.ListComp):\n+                iter_var = arg.generators[0].target\n+                iter_expr = arg.generators[0].iter\n+                test_expr = arg.elt\n+                temp_var = self.new_name()\n+                if call.func.id == 'all':\n+                    loop_body = [ast.Assert(test_expr, None)]\n+                else:\n+                    found_var = self.new_name()\n+                    loop_body = [ast.If(test_expr, [ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(value=True)), ast.Break()], [])]\n+                loop = ast.For(iter_var, iter_expr, loop_body, [])\n+                if call.func.id == 'any':\n+                    wrapper = [ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(value=False)), loop, ast.Assert(ast.Name(found_var, ast.Load()), None)]\n+                    return (self.assign(wrapper), func_expl)\n+                return (self.assign(loop), func_expl)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
