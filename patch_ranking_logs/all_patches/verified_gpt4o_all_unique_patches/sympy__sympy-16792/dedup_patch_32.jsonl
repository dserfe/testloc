{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..e2d0780 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -393,6 +393,11 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n                 if rets:\n                     body = body + ', ' + rets\n             else:\n+                # Ensure that all arguments are used in the C function signature\n+                # even if they do not appear in the final expression\n+                unused_args = [arg for arg in routine.arguments if not routine.expr.has(arg)]\n+                for arg in unused_args:\n+                    args_c += \", \" + self._call_arg(arg)\n                 body = '    %s(%s)\\n' % (routine.name, args_c)\n                 body = body + '    return ' + rets\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..f062ecf 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -159,6 +159,9 @@ class CythonCodeWrapper(CodeWrapper):\n                 if rets:\n                     body = body + ', ' + rets\n             else:\n+                unused_args = [arg for arg in routine.arguments if not routine.expr.has(arg)]\n+                for arg in unused_args:\n+                    args_c += ', ' + self._call_arg(arg)\n                 body = '    %s(%s)\\n' % (routine.name, args_c)\n                 body = body + '    return ' + rets\n             functions.append(self.pyx_func.format(name=name, arg_string=arg_string, declarations=declarations, body=body))\n", "normalized_occurrence": 1}
