{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..54c3b53 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -141,6 +141,17 @@ class Query(BaseExpression):\n \n     compiler = 'SQLCompiler'\n \n+    def __getstate__(self):\n+        \"\"\"\n+        Pickle the query including values() configuration to ensure it's properly restored.\n+        \"\"\"\n+        state = self.__dict__.copy()\n+        # Clear cached properties that shouldn't be pickled\n+        state.pop('_annotation_select_cache', None)\n+        state.pop('_extra_select_cache', None)\n+        state.pop('_loaded_field_names_cache', None) \n+        return state\n+\n     def __init__(self, model, where=WhereNode, alias_cols=True):\n         self.model = model\n         self.alias_refcount = {}\n@@ -164,6 +175,7 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self.values_select = ()\n \n         # SQL-related attributes\n         # Select and related select clauses are expressions to use in the\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..3ada39e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -81,6 +81,12 @@ class Query(BaseExpression):\n     alias_prefix = 'T'\n     subq_aliases = frozenset([alias_prefix])\n     compiler = 'SQLCompiler'\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state.pop('_annotation_select_cache', None)\n+        state.pop('_extra_select_cache', None)\n+        state.pop('_loaded_field_names_cache', None)\n+        return state\n     def __init__(self, model, where=WhereNode, alias_cols=True):\n         self.model = model\n         self.alias_refcount = {}\n@@ -94,6 +100,7 @@ class Query(BaseExpression):\n         self.used_aliases = set()\n         self.filter_is_sticky = False\n         self.subquery = False\n+        self.values_select = ()\n         self.select = ()\n         self.where = where()\n         self.where_class = where\n", "normalized_occurrence": 1}
