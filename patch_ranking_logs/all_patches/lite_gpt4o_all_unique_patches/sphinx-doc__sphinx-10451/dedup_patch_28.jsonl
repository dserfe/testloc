{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..b6c6ae2 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -101,13 +101,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n                 name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n-                arg['param'] = True\n-                arg['type'] = True\n+                if name not in arguments:  # Add this condition to avoid duplicates for *args and **kwargs\n+                    arg = arguments.setdefault(name, {})\n+                    arg['param'] = True\n+                    arg['type'] = True\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n+            if name not in arguments:  # Add this condition to avoid duplicates for *args and **kwargs\n+                arg = arguments.setdefault(name, {})\n+                arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..d430683 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -73,13 +73,15 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 name = ' '.join(parts[2:])\n-                arg = arguments.setdefault(name, {})\n-                arg['param'] = True\n-                arg['type'] = True\n+                if name not in arguments:\n+                    arg = arguments.setdefault(name, {})\n+                    arg['param'] = True\n+                    arg['type'] = True\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n+            if name not in arguments:\n+                arg = arguments.setdefault(name, {})\n+                arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n", "normalized_occurrence": 1}
