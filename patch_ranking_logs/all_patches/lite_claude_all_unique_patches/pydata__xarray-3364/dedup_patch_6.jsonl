{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..4fcd05d 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -299,11 +300,27 @@ def _dataset_concat(\n     if (dim in coord_names or dim in data_names) and dim not in dim_names:\n         datasets = [ds.expand_dims(dim) for ds in datasets]\n \n-    # determine which variables to concatentate\n+    # determine which variables to concatenate\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(\n         datasets, dim, dim_names, data_vars, coords, compat\n     )\n \n+    # For any missing variables in datasets, create them with fill_value\n+    for ds in datasets:\n+        missing_vars = concat_over - set(ds.variables)\n+        for var in missing_vars:\n+            # Get the variable from another dataset that has it\n+            template_ds = next(d for d in datasets if var in d.variables)\n+            template_var = template_ds[var]\n+            \n+            # Create a new variable with the same dims but filled with fill_value\n+            shape = list(template_var.shape)\n+            for i, dim_name in enumerate(template_var.dims):\n+                if dim_name in ds.dims:\n+                    shape[i] = ds.dims[dim_name]\n+            \n+            ds[var] = utils.full_like(template_var, fill_value, shape=tuple(shape))\n+\n     # determine which variables to merge, and then merge them according to compat\n     variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..b55ef56 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -121,6 +121,16 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if (dim in coord_names or dim in data_names) and dim not in dim_names:\n         datasets = [ds.expand_dims(dim) for ds in datasets]\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat)\n+    for ds in datasets:\n+        missing_vars = concat_over - set(ds.variables)\n+        for var in missing_vars:\n+            template_ds = next((d for d in datasets if var in d.variables))\n+            template_var = template_ds[var]\n+            shape = list(template_var.shape)\n+            for i, dim_name in enumerate(template_var.dims):\n+                if dim_name in ds.dims:\n+                    shape[i] = ds.dims[dim_name]\n+            ds[var] = utils.full_like(template_var, fill_value, shape=tuple(shape))\n     variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n     result_vars = {}\n     if variables_to_merge:\n", "normalized_occurrence": 1}
