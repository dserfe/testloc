{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..5b04650 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,9 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.match(r'([0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][-+]?[0-9]+)?[a-zA-Z_]\\w*'):\n+            return ASTLiteral(self.matched_text)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -5280,12 +5282,9 @@ class DefinitionParser(BaseParser):\n                 op += '[]'\n             return ASTOperatorBuildIn(op)\n \n-        # user-defined literal?\n-        if self.skip_string('\"\"'):\n-            self.skip_ws()\n-            if not self.match(identifier_re):\n-                self.fail(\"Expected user-defined literal suffix.\")\n-            identifier = ASTIdentifier(self.matched_text)\n+        # user-defined literal operator\n+        if self.match(r'operator\\s*\"\"\\s*[a-zA-Z_]\\w*'):\n+            identifier = ASTIdentifier(self.matched_text.split('\"\"')[-1].strip())\n             return ASTOperatorLiteral(identifier)\n \n         # oh well, looks like a cast operator definition.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..14db34a 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,8 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.match('([0-9]+(\\\\.[0-9]*)?|\\\\.[0-9]+)([eE][-+]?[0-9]+)?[a-zA-Z_]\\\\w*'):\n+            return ASTLiteral(self.matched_text)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n@@ -3509,11 +3511,8 @@ class DefinitionParser(BaseParser):\n                     self.fail('Expected \"]\" after  \"operator ' + op + '[\"')\n                 op += '[]'\n             return ASTOperatorBuildIn(op)\n-        if self.skip_string('\"\"'):\n-            self.skip_ws()\n-            if not self.match(identifier_re):\n-                self.fail('Expected user-defined literal suffix.')\n-            identifier = ASTIdentifier(self.matched_text)\n+        if self.match('operator\\\\s*\"\"\\\\s*[a-zA-Z_]\\\\w*'):\n+            identifier = ASTIdentifier(self.matched_text.split('\"\"')[-1].strip())\n             return ASTOperatorLiteral(identifier)\n         type = self._parse_type(named=False, outer='operatorCast')\n         return ASTOperatorType(type)\n", "normalized_occurrence": 1}
