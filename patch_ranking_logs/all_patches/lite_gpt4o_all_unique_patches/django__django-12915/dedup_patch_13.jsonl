{"model_name_or_path": "agentless", "instance_id": "django__django-12915", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex f289230..7e84e3e 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -53,6 +53,15 @@ class StaticFilesHandlerMixin:\n             return response_for_exception(request, e)\n \n \n+class StaticFilesHandlerMixin:\n+    ...\n+    \n+    async def get_response_async(self, request):\n+        try:\n+            return self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)\n+\n class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):\n     \"\"\"\n     WSGI middleware that intercepts calls to the static files directory, as\n@@ -85,4 +94,4 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n", "occurrence": 1, "normalized_patch": "--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n+class StaticFilesHandlerMixin:\n+    ...\n+    async def get_response_async(self, request):\n+        try:\n+            return self.serve(request)\n+        except Http404 as e:\n+            return response_for_exception(request, e)", "normalized_occurrence": 1}
