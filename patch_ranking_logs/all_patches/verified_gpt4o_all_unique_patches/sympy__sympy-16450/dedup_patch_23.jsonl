{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16450", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9a1c686..e7ae84f 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -210,7 +210,9 @@ class Symbol(AtomicExpr, Boolean):\n \n         \"\"\"\n         cls._sanitize(assumptions, cls)\n-        return Symbol.__xnew_cached_(cls, name, **assumptions)\n+        sym = Symbol.__xnew_cached_(cls, name, **assumptions)\n+        sym._assumptions.update(assumptions)  # preserve assumptions\n+        return sym\n \n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, string_types):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9bc1e52..271bce0 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -69,7 +69,9 @@ class Symbol(AtomicExpr, Boolean):\n             assumptions[key] = bool(v)\n     def __new__(cls, name, **assumptions):\n         cls._sanitize(assumptions, cls)\n-        return Symbol.__xnew_cached_(cls, name, **assumptions)\n+        sym = Symbol.__xnew_cached_(cls, name, **assumptions)\n+        sym._assumptions.update(assumptions)\n+        return sym\n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, string_types):\n             raise TypeError('name should be a string, not %s' % repr(type(name)))\n", "normalized_occurrence": 1}
