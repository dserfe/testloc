{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..5cdbd30 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -99,7 +99,8 @@ class SQLCompiler:\n             # Backwards compatibility hack for setting query.group_by. Remove\n             # when  we have public API way of forcing the GROUP BY clause.\n             # Converts string references to expressions.\n-            for expr in self.query.group_by:\n+            group_by = getattr(self.query.subquery, 'group_by', self.query.group_by)\n+            for expr in group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..40df929 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -40,7 +40,8 @@ class SQLCompiler:\n             return []\n         expressions = []\n         if self.query.group_by is not True:\n-            for expr in self.query.group_by:\n+            group_by = getattr(self.query.subquery, 'group_by', self.query.group_by)\n+            for expr in group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n", "normalized_occurrence": 1}
