{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..308684f 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -645,29 +645,23 @@ class StratifiedKFold(_BaseKFold):\n                            \" be less than n_splits=%d.\"\n                            % (min_groups, self.n_splits)), Warning)\n \n-        # pre-assign each sample to a test fold index using individual KFold\n-        # splitting strategies for each class so as to respect the balance of\n-        # classes\n-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]\n-        # will break when the data is not 100% stratifiable for all classes.\n-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold\n-        per_cls_cvs = [\n-            KFold(self.n_splits, shuffle=self.shuffle,\n-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))\n-            for count in y_counts]\n-\n+        # Initialize test_folds\n         test_folds = np.zeros(n_samples, dtype=np.int)\n-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n-                cls_test_folds = test_folds[y == cls]\n-                # the test split can be too big because we used\n-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%\n-                # stratifiable for all the classes\n-                # (we use a warning instead of raising an exception)\n-                # If this is the case, let's trim it:\n-                test_split = test_split[test_split < len(cls_test_folds)]\n-                cls_test_folds[test_split] = test_fold_indices\n-                test_folds[y == cls] = cls_test_folds\n+        \n+        # For each class, get the indices and assign folds\n+        for cls_idx, cls in enumerate(unique_y):\n+            cls_mask = y == cls\n+            n_split_samples = np.sum(cls_mask)\n+            # Get all indices for this class\n+            cls_indices = np.where(cls_mask)[0]\n+            \n+            if self.shuffle:\n+                # Shuffle indices within this class if requested\n+                rng.shuffle(cls_indices)\n+            \n+            # Assign fold indices using modulo\n+            fold_indices = np.arange(n_split_samples) % self.n_splits\n+            test_folds[cls_indices] = fold_indices\n \n         return test_folds\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex a142d27..56fa8a9 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -562,14 +562,15 @@ class StratifiedKFold(_BaseKFold):\n             raise ValueError('n_splits=%d cannot be greater than the number of members in each class.' % self.n_splits)\n         if self.n_splits > min_groups:\n             warnings.warn('The least populated class in y has only %d members, which is too few. The minimum number of members in any class cannot be less than n_splits=%d.' % (min_groups, self.n_splits), Warning)\n-        per_cls_cvs = [KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n         test_folds = np.zeros(n_samples, dtype=np.int)\n-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):\n-                cls_test_folds = test_folds[y == cls]\n-                test_split = test_split[test_split < len(cls_test_folds)]\n-                cls_test_folds[test_split] = test_fold_indices\n-                test_folds[y == cls] = cls_test_folds\n+        for cls_idx, cls in enumerate(unique_y):\n+            cls_mask = y == cls\n+            n_split_samples = np.sum(cls_mask)\n+            cls_indices = np.where(cls_mask)[0]\n+            if self.shuffle:\n+                rng.shuffle(cls_indices)\n+            fold_indices = np.arange(n_split_samples) % self.n_splits\n+            test_folds[cls_indices] = fold_indices\n         return test_folds\n \n     def _iter_test_masks(self, X, y=None, groups=None):\n", "normalized_occurrence": 1}
