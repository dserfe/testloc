{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..c04d403 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1614,10 +1614,12 @@ class Rational(Number):\n                         p = fp/fq\n                     try:\n                         p = fractions.Fraction(p)\n+                        if q is not None:  # If we have a denominator argument\n+                            p = p / fractions.Fraction(q)\n+                            q = None  # Reset q since we've used it\n+                        return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass  # error will raise below\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..f78e09c 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1400,10 +1400,12 @@ class Rational(Number):\n                         p = fp / fq\n                     try:\n                         p = fractions.Fraction(p)\n+                        if q is not None:\n+                            p = p / fractions.Fraction(q)\n+                            q = None\n+                        return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n", "normalized_occurrence": 1}
