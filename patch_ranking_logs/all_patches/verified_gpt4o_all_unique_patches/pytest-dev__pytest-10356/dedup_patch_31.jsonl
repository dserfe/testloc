{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..9c576ba 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -357,7 +357,16 @@ class MarkDecorator:\n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n     \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n+    mark_list = []\n+    seen = set()\n+    for cls in obj.__mro__:\n+        cls_marks = getattr(cls, \"pytestmark\", [])\n+        if not isinstance(cls_marks, list):\n+            cls_marks = [cls_marks]\n+        for mark in cls_marks:\n+            if mark not in seen:\n+                seen.add(mark)\n+                mark_list.append(mark)\n     if not isinstance(mark_list, list):\n         mark_list = [mark_list]\n     return normalize_mark_list(mark_list)\n@@ -389,6 +398,8 @@ def store_mark(obj, mark: Mark) -> None:\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n     obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    # Ensure deduplication and proper MRO consideration\n+    obj.pytestmark = list({m: None for m in itertools.chain.from_iterable(getattr(c, 'pytestmark', []) for c in obj.__mro__)}.keys())\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..1ed6824 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,7 +161,16 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n+    mark_list = []\n+    seen = set()\n+    for cls in obj.__mro__:\n+        cls_marks = getattr(cls, 'pytestmark', [])\n+        if not isinstance(cls_marks, list):\n+            cls_marks = [cls_marks]\n+        for mark in cls_marks:\n+            if mark not in seen:\n+                seen.add(mark)\n+                mark_list.append(mark)\n     if not isinstance(mark_list, list):\n         mark_list = [mark_list]\n     return normalize_mark_list(mark_list)\n@@ -174,6 +183,7 @@ def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iter\n def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n     obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    obj.pytestmark = list({m: None for m in itertools.chain.from_iterable((getattr(c, 'pytestmark', []) for c in obj.__mro__))}.keys())\n if TYPE_CHECKING:\n     from _pytest.scope import _ScopeName\n     class _SkipMarkDecorator(MarkDecorator):\n", "normalized_occurrence": 1}
