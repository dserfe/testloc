{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..9e157e3 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -187,13 +187,18 @@ class Nominal(Scale):\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with categorical-style padding (+/- 0.5)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n+        # Disable grid for nominal scales\n+        if isinstance(axis, mpl.axis.Axis):\n+            axis.grid(False)\n+            # Invert y-axis if this is a y-axis\n+            if isinstance(axis, mpl.axis.YAxis):\n+                axis.set_inverted(True)\n+\n         # TODO array cast necessary to handle float/int mixture, which we need\n         # to solve in a more systematic way probably\n         # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..c913d69 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -94,8 +94,12 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n+        if isinstance(axis, mpl.axis.Axis):\n+            axis.grid(False)\n+            if isinstance(axis, mpl.axis.YAxis):\n+                axis.set_inverted(True)\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n             keep = np.array([x_ in units_seed for x_ in x], bool)\n", "normalized_occurrence": 1}
