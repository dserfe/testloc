{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 3c5d091..6765ad4 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -2280,7 +2280,14 @@ def set_cmap(cmap: Colormap | str) -> None:\n     \"\"\"\n     cmap = get_cmap(cmap)\n \n-    rc('image', cmap=cmap.name)\n+    # Use the registered name from get_cmap() instead of the internal name\n+    for name, registered_cmap in cm._colormaps.items():\n+        if registered_cmap is cmap:\n+            rc('image', cmap=name)\n+            break\n+    else:\n+        rc('image', cmap=cmap.name)  # fallback to internal name if not found\n+    \n     im = gci()\n \n     if im is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/pyplot.py b/lib/matplotlib/pyplot.py\nindex 1eb21f9..442d1d7 100644\n--- a/lib/matplotlib/pyplot.py\n+++ b/lib/matplotlib/pyplot.py\n@@ -542,7 +542,12 @@ def get_cmap(name: Colormap | str | None=None, lut: int | None=None) -> Colormap\n get_cmap.__doc__ = cm._get_cmap.__doc__\n def set_cmap(cmap: Colormap | str) -> None:\n     cmap = get_cmap(cmap)\n-    rc('image', cmap=cmap.name)\n+    for name, registered_cmap in cm._colormaps.items():\n+        if registered_cmap is cmap:\n+            rc('image', cmap=name)\n+            break\n+    else:\n+        rc('image', cmap=cmap.name)\n     im = gci()\n     if im is not None:\n         im.set_cmap(cmap)\n", "normalized_occurrence": 1}
