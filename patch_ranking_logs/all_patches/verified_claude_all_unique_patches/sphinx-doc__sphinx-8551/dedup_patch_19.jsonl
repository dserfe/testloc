{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..7bb258f 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1255,22 +1255,34 @@ class PythonDomain(Domain):\n             else:\n                 objtypes = self.objtypes_for_role(type)\n             if objtypes is not None:\n+                # First try fully qualified name\n                 if modname and classname:\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                \n+                # Then try in current module scope\n+                if not newname and modname:\n+                    current_modname = modname\n+                    while current_modname and not newname:\n+                        fullname = current_modname + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            newname = fullname\n+                            break\n+                        # Move up to parent module\n+                        current_modname = current_modname.rpartition('.')[0]\n+                \n+                # Fall back to unqualified name\n+                if not newname and name in self.objects and self.objects[name].objtype in objtypes:\n+                    newname = name\n+                \n+                # Only do fuzzy search if nothing else matched\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        # \"fuzzy\" searching mode\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                    # \"fuzzy\" searching mode\n+                    searchname = '.' + name\n+                    matches = [(oname, self.objects[oname]) for oname in self.objects\n+                               if oname.endswith(searchname) and\n+                               self.objects[oname].objtype in objtypes]\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..599f2a2 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -758,14 +758,19 @@ class PythonDomain(Domain):\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                if not newname and modname:\n+                    current_modname = modname\n+                    while current_modname and (not newname):\n+                        fullname = current_modname + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            newname = fullname\n+                            break\n+                        current_modname = current_modname.rpartition('.')[0]\n+                if not newname and name in self.objects and (self.objects[name].objtype in objtypes):\n+                    newname = name\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n-                        newname = name\n-                    else:\n-                        searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                    searchname = '.' + name\n+                    matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
