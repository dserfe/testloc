{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..050b209 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2044,8 +2044,11 @@ class VariablesChecker(BaseChecker):\n                         # because they can be imported for exporting.\n                         continue\n \n-                    if is_type_annotation_import:\n-                        # Most likely a typing import if it wasn't used so far.\n+                    if is_type_annotation_import or any(\n+                        node.type_annotation_name == real_name\n+                        for node in stmt.parent.nodes_of_class(astroid.Assign)\n+                    ):\n+                        # Skip if it's a typing import or used in type comments\n                         continue\n \n                     if as_name == \"_\":\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..e60a1ad 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -809,7 +809,7 @@ class VariablesChecker(BaseChecker):\n                 if isinstance(stmt, astroid.Import) or (isinstance(stmt, astroid.ImportFrom) and (not stmt.modname)):\n                     if isinstance(stmt, astroid.ImportFrom) and SPECIAL_OBJ.search(imported_name):\n                         continue\n-                    if is_type_annotation_import:\n+                    if is_type_annotation_import or any((node.type_annotation_name == real_name for node in stmt.parent.nodes_of_class(astroid.Assign))):\n                         continue\n                     if as_name == '_':\n                         continue\n", "normalized_occurrence": 1}
