{"model_name_or_path": "agentless", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..2b8929f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2516,15 +2516,18 @@ class AutoFieldMeta(type):\n     for detecting automatically-generated fields.\n     \"\"\"\n \n-    @property\n-    def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n-\n-    def __instancecheck__(self, instance):\n-        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n-\n-    def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+@property\n+def _subclasses(self):\n+    return (BigAutoField, SmallAutoField, AutoField)\n+\n+def __instancecheck__(self, instance):\n+    return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n+\n+def __subclasscheck__(self, subclass):\n+    return (\n+        issubclass(subclass, self._subclasses) or \n+        super().__subclasscheck__(subclass)\n+    )\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 7cf6173..0edb9a0 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1732,15 +1732,15 @@ class AutoFieldMeta(type):\n     for detecting automatically-generated fields.\n     \"\"\"\n \n-    @property\n-    def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+@property\n+def _subclasses(self):\n+    return (BigAutoField, SmallAutoField, AutoField)\n \n-    def __instancecheck__(self, instance):\n-        return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n+def __instancecheck__(self, instance):\n+    return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n-    def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+def __subclasscheck__(self, subclass):\n+    return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)\n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n \n", "normalized_occurrence": 1}
