{"model_name_or_path": "agentless", "instance_id": "django__django-11149", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex acc7653..0e54dd5 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2045,8 +2045,12 @@ class InlineModelAdmin(BaseModelAdmin):\n         }\n \n         base_model_form = defaults['form']\n-        can_change = self.has_change_permission(request, obj) if request else True\n-        can_add = self.has_add_permission(request, obj) if request else True\n+        if self.opts.auto_created:\n+            can_change = self.has_view_permission(request, obj)\n+            can_add = self.has_view_permission(request, obj)\n+        else:\n+            can_change = self.has_change_permission(request, obj) if request else True\n+            can_add = self.has_add_permission(request, obj) if request else True\n \n         class DeleteProtectedModelForm(base_model_form):\n \n@@ -2091,7 +2095,7 @@ class InlineModelAdmin(BaseModelAdmin):\n                 # Protect against unauthorized edits.\n                 if not can_change and not self.instance._state.adding:\n                     return False\n-                if not can_add and self.instance._state.adding:\n+                if not can_change and not can_add and self.instance._state.adding:\n                     return False\n                 return super().has_changed()\n \n@@ -2159,4 +2163,4 @@ class StackedInline(InlineModelAdmin):\n \n \n class TabularInline(InlineModelAdmin):\n-    template = 'admin/edit_inline/tabular.html'\n+    template = 'admin/edit_inline/tabular.html'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex b043b1a..064573e 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1002,8 +1002,12 @@ class InlineModelAdmin(BaseModelAdmin):\n         can_delete = self.can_delete and self.has_delete_permission(request, obj)\n         defaults = {'form': self.form, 'formset': self.formset, 'fk_name': self.fk_name, 'fields': fields, 'exclude': exclude, 'formfield_callback': partial(self.formfield_for_dbfield, request=request), 'extra': self.get_extra(request, obj, **kwargs), 'min_num': self.get_min_num(request, obj, **kwargs), 'max_num': self.get_max_num(request, obj, **kwargs), 'can_delete': can_delete, **kwargs}\n         base_model_form = defaults['form']\n-        can_change = self.has_change_permission(request, obj) if request else True\n-        can_add = self.has_add_permission(request, obj) if request else True\n+        if self.opts.auto_created:\n+            can_change = self.has_view_permission(request, obj)\n+            can_add = self.has_view_permission(request, obj)\n+        else:\n+            can_change = self.has_change_permission(request, obj) if request else True\n+            can_add = self.has_add_permission(request, obj) if request else True\n         class DeleteProtectedModelForm(base_model_form):\n             def hand_clean_DELETE(self):\n                 if self.cleaned_data.get(DELETION_FIELD_NAME, False):\n@@ -1026,7 +1030,7 @@ class InlineModelAdmin(BaseModelAdmin):\n             def has_changed(self):\n                 if not can_change and (not self.instance._state.adding):\n                     return False\n-                if not can_add and self.instance._state.adding:\n+                if not can_change and (not can_add) and self.instance._state.adding:\n                     return False\n                 return super().has_changed()\n         defaults['form'] = DeleteProtectedModelForm\n", "normalized_occurrence": 1}
