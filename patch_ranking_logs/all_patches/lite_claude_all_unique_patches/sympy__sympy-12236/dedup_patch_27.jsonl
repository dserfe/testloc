{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..c2739ce 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -122,11 +122,21 @@ def apart(f, x=None, full=False, **options):\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n \n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n+        # Only raise NotImplementedError if truly multivariate in main variable\n+        if x is not None and P.degree(x) > 0:\n+            terms = [v for v in P.gens if v != x]\n+            if any(P.degree(v) > 0 for v in terms):\n+                raise NotImplementedError(\n+                    \"multivariate partial fraction decomposition\")\n \n     common, P, Q = P.cancel(Q)\n \n+    # Avoid incorrect cancellation with symbolic coefficients\n+    if not common.is_number and x is not None:\n+        # Reconstruct the rational function with symbolic coefficients\n+        P = P * common\n+        common = S.One\n+\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..dec54db 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -58,8 +58,14 @@ def apart(f, x=None, full=False, **options):\n         fc = f.cancel()\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n+        if x is not None and P.degree(x) > 0:\n+            terms = [v for v in P.gens if v != x]\n+            if any((P.degree(v) > 0 for v in terms)):\n+                raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n+    if not common.is_number and x is not None:\n+        P = P * common\n+        common = S.One\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n", "normalized_occurrence": 1}
