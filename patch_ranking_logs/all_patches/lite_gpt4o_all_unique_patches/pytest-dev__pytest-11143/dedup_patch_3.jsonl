{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..7503516 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -666,6 +666,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         # We'll insert some special imports at the top of the module, but after any\n         # docstrings and __future__ imports, so first figure out where that is.\n         doc = getattr(mod, \"docstring\", None)\n+        if not isinstance(doc, str):\n+            doc = None\n         expect_docstring = doc is None\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n@@ -678,7 +680,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..ef8af86 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -355,6 +355,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         if not mod.body:\n             return\n         doc = getattr(mod, 'docstring', None)\n+        if not isinstance(doc, str):\n+            doc = None\n         expect_docstring = doc is None\n         if doc is not None and self.is_rewrite_disabled(doc):\n             return\n@@ -363,7 +365,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         for item in mod.body:\n             if expect_docstring and isinstance(item, ast.Expr) and isinstance(item.value, ast.Constant):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif isinstance(item, ast.ImportFrom) and item.level == 0 and (item.module == '__future__'):\n", "normalized_occurrence": 1}
