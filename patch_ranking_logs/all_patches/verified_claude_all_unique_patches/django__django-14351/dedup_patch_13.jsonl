{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..86ea29b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -226,6 +226,10 @@ class SQLCompiler:\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n             cols = self.get_default_columns()\n+            # If this is a subquery for an __in lookup, we only need the primary key\n+            if (getattr(self.query, 'subquery', False) and \n+                any(isinstance(c, Col) and c.target.primary_key for c in cols)):\n+                cols = [c for c in cols if isinstance(c, Col) and c.target.primary_key]\n         else:\n             # self.query.select is a special case. These columns never go to\n             # any model.\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..c92201d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -100,6 +100,8 @@ class SQLCompiler:\n         assert not (self.query.select and self.query.default_cols)\n         if self.query.default_cols:\n             cols = self.get_default_columns()\n+            if getattr(self.query, 'subquery', False) and any((isinstance(c, Col) and c.target.primary_key for c in cols)):\n+                cols = [c for c in cols if isinstance(c, Col) and c.target.primary_key]\n         else:\n             cols = self.query.select\n         if cols:\n", "normalized_occurrence": 1}
