{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..67845b1 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1473,7 +1473,11 @@ class Variable(\n         dim_order = other_dims + [old_dim]\n         reordered = self.transpose(*dim_order)\n \n-        new_shape = reordered.shape[: len(other_dims)] + new_dim_sizes\n+        # Handle the case where there are no other_dims (single-dim variables)\n+        if len(other_dims) == 0:\n+            new_shape = new_dim_sizes\n+        else:\n+            new_shape = reordered.shape[: len(other_dims)] + new_dim_sizes\n         new_data = reordered.data.reshape(new_shape)\n         new_dims = reordered.dims[: len(other_dims)] + new_dim_names\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..a67f7aa 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1118,7 +1118,10 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         other_dims = [d for d in self.dims if d != old_dim]\n         dim_order = other_dims + [old_dim]\n         reordered = self.transpose(*dim_order)\n-        new_shape = reordered.shape[:len(other_dims)] + new_dim_sizes\n+        if len(other_dims) == 0:\n+            new_shape = new_dim_sizes\n+        else:\n+            new_shape = reordered.shape[:len(other_dims)] + new_dim_sizes\n         new_data = reordered.data.reshape(new_shape)\n         new_dims = reordered.dims[:len(other_dims)] + new_dim_names\n         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)\n", "normalized_occurrence": 1}
