{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..2753ecb 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -182,15 +182,26 @@ class Nominal(Scale):\n                 # if minor_locator is not None:\n                 #     axis.set_minor_locator(minor_locator)\n                 # axis.set_major_formatter(major_formatter)\n+                \n+                # Add padding of 0.5 on both ends\n+                if hasattr(axis, 'get_view_interval'):\n+                    vmin, vmax = axis.get_view_interval()\n+                    axis.set_view_interval(vmin - 0.5, vmax + 0.5)\n+                \n+                # Turn off grid\n+                if hasattr(axis, 'grid'):\n+                    axis.grid(False)\n+                \n+                # Invert y-axis if this is a y-axis\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.set_inverted(True)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with padding for categorical-style layout\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..409acb9 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -91,10 +91,17 @@ class Nominal(Scale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n                 ...\n+                if hasattr(axis, 'get_view_interval'):\n+                    vmin, vmax = axis.get_view_interval()\n+                    axis.set_view_interval(vmin - 0.5, vmax + 0.5)\n+                if hasattr(axis, 'grid'):\n+                    axis.grid(False)\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.set_inverted(True)\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
