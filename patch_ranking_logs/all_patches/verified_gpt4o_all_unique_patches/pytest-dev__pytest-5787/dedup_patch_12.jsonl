{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..476e622 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -411,6 +411,8 @@ class CollectErrorRepr(TerminalRepr):\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n+        if isinstance(report.longrepr, ExceptionInfo):\n+            data[\"longrepr\"] = report.longrepr.chain\n         data[\"_report_type\"] = report.__class__.__name__\n         return data\n \n@@ -418,7 +420,10 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if \"longrepr\" in data and isinstance(data[\"longrepr\"], list):\n+                report.longrepr = ExceptionInfo.from_exc_chain(data[\"longrepr\"])\n+            return report\n         elif data[\"_report_type\"] == \"CollectReport\":\n             return CollectReport._from_json(data)\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..29ce545 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -208,12 +208,17 @@ class CollectErrorRepr(TerminalRepr):\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n+        if isinstance(report.longrepr, ExceptionInfo):\n+            data['longrepr'] = report.longrepr.chain\n         data['_report_type'] = report.__class__.__name__\n         return data\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if 'longrepr' in data and isinstance(data['longrepr'], list):\n+                report.longrepr = ExceptionInfo.from_exc_chain(data['longrepr'])\n+            return report\n         elif data['_report_type'] == 'CollectReport':\n             return CollectReport._from_json(data)\n         assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
