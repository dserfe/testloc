{"model_name_or_path": "agentless", "instance_id": "django__django-15037", "model_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex fa27bfc..a1b2fff 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -99,7 +99,7 @@ class Command(BaseCommand):\n                     comment_notes = []  # Holds Field notes, to be displayed in a Python comment.\n                     extra_params = {}  # Holds Field parameters such as 'db_column'.\n                     column_name = row.name\n-                    is_relation = column_name in relations\n+                    is_relation = column_name in relations and column_name not in unique_columns\n \n                     att_name, params, notes = self.normalize_col_name(\n                         column_name, used_column_names, is_relation)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/inspectdb.py b/django/core/management/commands/inspectdb.py\nindex 09bd4a3..fbecfe3 100644\n--- a/django/core/management/commands/inspectdb.py\n+++ b/django/core/management/commands/inspectdb.py\n@@ -70,7 +70,7 @@ class Command(BaseCommand):\n                     comment_notes = []\n                     extra_params = {}\n                     column_name = row.name\n-                    is_relation = column_name in relations\n+                    is_relation = column_name in relations and column_name not in unique_columns\n                     att_name, params, notes = self.normalize_col_name(column_name, used_column_names, is_relation)\n                     extra_params.update(params)\n                     comment_notes.extend(notes)\n", "normalized_occurrence": 1}
