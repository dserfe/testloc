{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex e210750..1e05d35 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -30,6 +30,8 @@ class Q(tree.Node):\n     Encapsulate filters as objects that can then be combined logically (using\n     `&` and `|`).\n     \"\"\"\n+    from django.db.models.expressions import Exists\n+\n     # Connection types\n     AND = 'AND'\n     OR = 'OR'\n@@ -40,9 +42,13 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n \n+        # If other is an Exists object, convert it to a Q object\n+        if isinstance(other, Exists):\n+            other = Q(other)\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             _, args, kwargs = self.deconstruct()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex a5f3526..eab40e7 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -10,6 +10,7 @@ def subclasses(cls):\n     for subclass in cls.__subclasses__():\n         yield from subclasses(subclass)\n class Q(tree.Node):\n+    from django.db.models.expressions import Exists\n     AND = 'AND'\n     OR = 'OR'\n     default = AND\n@@ -17,8 +18,10 @@ class Q(tree.Node):\n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n     def _combine(self, other, conn):\n-        if not isinstance(other, Q):\n+        if not isinstance(other, (Q, Exists)):\n             raise TypeError(other)\n+        if isinstance(other, Exists):\n+            other = Q(other)\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n", "normalized_occurrence": 1}
