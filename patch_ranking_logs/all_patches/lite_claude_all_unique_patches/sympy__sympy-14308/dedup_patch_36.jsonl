{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex 9ab9719..6cb5568 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -474,7 +474,29 @@ class prettyForm(stringPict):\n \n     def __pow__(self, b):\n         \"\"\"Make a pretty power.\n+        \n+        Handles proper parentheses and baseline alignment for power expressions.\n+        Division expressions within the base are automatically parenthesized.\n         \"\"\"\n+        # Always parenthesize division expressions in the base\n+        if self.binding == prettyForm.DIV:\n+            base = stringPict(*self.parens())\n+        else:\n+            base = self\n+            \n+        # Add parentheses for weak binding operations\n+        if base.binding > prettyForm.ATOM:\n+            base = stringPict(*base.parens())\n+            \n+        # We want the power to be aligned with the baseline of the base\n+        power_str = b.left()\n+        base_str = base.right()\n+\n+        # Stack them to get proper vertical alignment\n+        result = stringPict(*base_str)\n+        result = stringPict(*result.right(power_str, upper=True))\n+        \n+        return prettyForm(binding=prettyForm.POW, *result)\n         a = self\n         use_inline_func_form = False\n         if b.binding == prettyForm.POW:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex e2b1308..0821b67 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -226,6 +226,17 @@ class prettyForm(stringPict):\n     def __repr__(self):\n         return 'prettyForm(%r,%d,%d)' % ('\\n'.join(self.picture), self.baseline, self.binding)\n     def __pow__(self, b):\n+        if self.binding == prettyForm.DIV:\n+            base = stringPict(*self.parens())\n+        else:\n+            base = self\n+        if base.binding > prettyForm.ATOM:\n+            base = stringPict(*base.parens())\n+        power_str = b.left()\n+        base_str = base.right()\n+        result = stringPict(*base_str)\n+        result = stringPict(*result.right(power_str, upper=True))\n+        return prettyForm(*result, binding=prettyForm.POW)\n         a = self\n         use_inline_func_form = False\n         if b.binding == prettyForm.POW:\n", "normalized_occurrence": 1}
