{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..5e9663b 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6738,7 +6738,11 @@ such objects\n \n         density = bool(density)\n         if density and not stacked:\n-            hist_kwargs['density'] = density\n+            if histtype.startswith('step'):\n+                # For step plots, compute normalization ourselves to ensure consistency\n+                hist_kwargs['density'] = False\n+            else:\n+                hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n         tops = []  # Will have shape (n_datasets, n_bins).\n@@ -6750,6 +6754,10 @@ such objects\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n+        \n+        # Apply density normalization for step plots here\n+        if density and not stacked and histtype.startswith('step'):\n+            tops = tops / (tops.sum() * np.diff(bins)[:, None]).T\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             # If a stacked density plot, normalize so the area of all the\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..f74b28f 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1944,13 +1944,18 @@ class Axes(_AxesBase):\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n         if density and (not stacked):\n-            hist_kwargs['density'] = density\n+            if histtype.startswith('step'):\n+                hist_kwargs['density'] = False\n+            else:\n+                hist_kwargs['density'] = density\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n             tops.append(m)\n         tops = np.array(tops, float)\n         bins = np.array(bins, float)\n+        if density and (not stacked) and histtype.startswith('step'):\n+            tops = tops / (tops.sum() * np.diff(bins)[:, None]).T\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n", "normalized_occurrence": 1}
