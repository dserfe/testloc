{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 00a392c..907a0a1 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -173,7 +173,7 @@ def where_method(self, cond, other=dtypes.NA):\n \n     # alignment for three arguments is complicated, so don't support it yet\n     join = \"inner\" if other is dtypes.NA else \"exact\"\n-    return apply_ufunc(\n+    result = apply_ufunc(\n         duck_array_ops.where_method,\n         self,\n         cond,\n@@ -183,6 +183,9 @@ def where_method(self, cond, other=dtypes.NA):\n         dask=\"allowed\",\n         keep_attrs=True,\n     )\n+    if keep_attrs:\n+        result.attrs.update(self.attrs)\n+    return result\n \n \n def _call_possibly_missing_method(arg, name, args, kwargs):\n", "occurrence": 3, "normalized_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 2895e91..3174dfe 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -22,7 +22,10 @@ def fillna(data, other, join='left', dataset_join='left'):\n def where_method(self, cond, other=dtypes.NA):\n     from .computation import apply_ufunc\n     join = 'inner' if other is dtypes.NA else 'exact'\n-    return apply_ufunc(duck_array_ops.where_method, self, cond, other, join=join, dataset_join=join, dask='allowed', keep_attrs=True)\n+    result = apply_ufunc(duck_array_ops.where_method, self, cond, other, join=join, dataset_join=join, dask='allowed', keep_attrs=True)\n+    if keep_attrs:\n+        result.attrs.update(self.attrs)\n+    return result\n def _call_possibly_missing_method(arg, name, args, kwargs):\n     try:\n         method = getattr(arg, name)\n", "normalized_occurrence": 3}
