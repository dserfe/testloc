{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..c52f593 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,15 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined lit\n+        pos = self.pos\n+        if self.match(integer_literal_re) or self.match(float_literal_re):\n+            literal_end = self.pos\n+            while self.current_char.isalpha() or self.current_char == '_':\n+                self.pos += 1\n+            if self.pos > literal_end:\n+                return ASTUserDefinedLiteral(self.definition[pos:self.pos])\n+            self.pos = pos\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -4744,6 +4752,13 @@ class DefinitionParser(BaseParser):\n             self.fail(\"Expected ')' to end binary fold expression.\")\n         return ASTFoldExpr(leftExpr, op, rightExpr)\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+\n+    def __repr__(self) -> str:\n+        return 'ASTUserDefinedLiteral(%s)' % self.value\n+\n     def _parse_primary_expression(self) -> ASTExpression:\n         # literal\n         # \"this\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..645350a 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,14 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        pos = self.pos\n+        if self.match(integer_literal_re) or self.match(float_literal_re):\n+            literal_end = self.pos\n+            while self.current_char.isalpha() or self.current_char == '_':\n+                self.pos += 1\n+            if self.pos > literal_end:\n+                return ASTUserDefinedLiteral(self.definition[pos:self.pos])\n+            self.pos = pos\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n@@ -3120,6 +3128,11 @@ class DefinitionParser(BaseParser):\n         if not self.skip_string(')'):\n             self.fail(\"Expected ')' to end binary fold expression.\")\n         return ASTFoldExpr(leftExpr, op, rightExpr)\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str) -> None:\n+        self.value = value\n+    def __repr__(self) -> str:\n+        return 'ASTUserDefinedLiteral(%s)' % self.value\n     def _parse_primary_expression(self) -> ASTExpression:\n         self.skip_ws()\n         res = self._parse_literal()\n", "normalized_occurrence": 1}
