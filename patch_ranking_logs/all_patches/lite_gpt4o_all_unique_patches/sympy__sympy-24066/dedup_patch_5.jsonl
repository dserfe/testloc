{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..1ee2528 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -192,8 +192,12 @@ class UnitSystem(_QuantityMapper):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            if expr.func == exp:\n+                if all(self.get_dimension_system().is_dimensionless(d[1]) for d in fds):\n+                    return exp(*(f[0] for f in fds)), Dimension(1)\n+                else:\n+                    raise ValueError('Exponent must be dimensionless')\n+            return expr.func(*(f[0] for f in fds)), Dimension(1)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n@@ -203,4 +207,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 33c8d4e..cc7f200 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -117,7 +117,12 @@ class UnitSystem(_QuantityMapper):\n             return (factor, dim)\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)), *(d[1] for d in fds))\n+            if expr.func == exp:\n+                if all((self.get_dimension_system().is_dimensionless(d[1]) for d in fds)):\n+                    return (exp(*(f[0] for f in fds)), Dimension(1))\n+                else:\n+                    raise ValueError('Exponent must be dimensionless')\n+            return (expr.func(*(f[0] for f in fds)), Dimension(1))\n         elif isinstance(expr, Dimension):\n             return (S.One, expr)\n         else:\n", "normalized_occurrence": 1}
