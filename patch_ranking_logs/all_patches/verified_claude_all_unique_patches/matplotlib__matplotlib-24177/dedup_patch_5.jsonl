{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..3fe2996 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,7 +6737,8 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n-        if density and not stacked:\n+        # Only pass density to histogram if not doing steps or stacked\n+        if density and not stacked and not histtype.startswith('step'):\n             hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n@@ -6750,6 +6751,9 @@ such objects\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n+        # Handle density normalization for step histograms\n+        if density and not stacked and histtype.startswith('step'):\n+            tops = (tops / np.diff(bins)) / tops.sum()\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             # If a stacked density plot, normalize so the area of all the\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..216d9de 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1943,7 +1943,7 @@ class Axes(_AxesBase):\n         else:\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n-        if density and (not stacked):\n+        if density and (not stacked) and (not histtype.startswith('step')):\n             hist_kwargs['density'] = density\n         tops = []\n         for i in range(nx):\n@@ -1951,6 +1951,8 @@ class Axes(_AxesBase):\n             tops.append(m)\n         tops = np.array(tops, float)\n         bins = np.array(bins, float)\n+        if density and (not stacked) and histtype.startswith('step'):\n+            tops = tops / np.diff(bins) / tops.sum()\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n", "normalized_occurrence": 1}
