{"model_name_or_path": "agentless", "instance_id": "django__django-11087", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 067de0d..73a08a5 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -683,7 +683,7 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n-        del_query = self._chain()\n+        del_query = self._chain().only('id')\n \n         # The delete is actually 2 queries - one to find related objects,\n         # and one to delete. Make sure that the discovery of related\n@@ -696,7 +696,7 @@ class QuerySet:\n         del_query.query.clear_ordering(force_empty=True)\n \n         collector = Collector(using=del_query.db)\n-        collector.collect(del_query)\n+        collector.collect(del_query, select_related=False)\n         deleted, _rows_count = collector.delete()\n \n         # Clear the result cache, in case this QuerySet gets reused.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 19f2cc6..4d8330c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -416,13 +416,13 @@ class QuerySet:\n         assert self.query.can_filter(), \"Cannot use 'limit' or 'offset' with delete.\"\n         if self._fields is not None:\n             raise TypeError('Cannot call delete() after .values() or .values_list()')\n-        del_query = self._chain()\n+        del_query = self._chain().only('id')\n         del_query._for_write = True\n         del_query.query.select_for_update = False\n         del_query.query.select_related = False\n         del_query.query.clear_ordering(force_empty=True)\n         collector = Collector(using=del_query.db)\n-        collector.collect(del_query)\n+        collector.collect(del_query, select_related=False)\n         deleted, _rows_count = collector.delete()\n         self._result_cache = None\n         return (deleted, _rows_count)\n", "normalized_occurrence": 1}
