{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 3a09d85..8fd1849 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -849,7 +849,11 @@ def merge(\n                 \"Dataset(s), DataArray(s), and dictionaries.\"\n             )\n \n-        obj = obj.to_dataset(promote_attrs=True) if isinstance(obj, DataArray) else obj\n+        if isinstance(obj, DataArray):\n+            obj = obj.to_dataset(promote_attrs=True)\n+        elif not isinstance(obj, dict):\n+            obj = obj.to_dataset()\n+\n         dict_like_objects.append(obj)\n \n     merge_result = merge_core(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 0a5d6cd..8822f55 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -648,7 +648,10 @@ def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str\n     for obj in objects:\n         if not isinstance(obj, (DataArray, Dataset, dict)):\n             raise TypeError('objects must be an iterable containing only Dataset(s), DataArray(s), and dictionaries.')\n-        obj = obj.to_dataset(promote_attrs=True) if isinstance(obj, DataArray) else obj\n+        if isinstance(obj, DataArray):\n+            obj = obj.to_dataset(promote_attrs=True)\n+        elif not isinstance(obj, dict):\n+            obj = obj.to_dataset()\n         dict_like_objects.append(obj)\n     merge_result = merge_core(dict_like_objects, compat, join, combine_attrs=combine_attrs, fill_value=fill_value)\n     merged = Dataset._construct_direct(**merge_result._asdict())\n", "normalized_occurrence": 1}
