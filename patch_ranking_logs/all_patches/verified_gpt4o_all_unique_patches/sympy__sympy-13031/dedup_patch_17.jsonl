{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..a56415c 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -226,8 +226,9 @@ class BlockDiagMatrix(BlockMatrix):\n \n     @property\n     def shape(self):\n-        return (sum(block.rows for block in self.args),\n-                sum(block.cols for block in self.args))\n+        numrows = max(block.rows for block in self.args) if self.args else 0\n+        numcols = sum(block.cols for block in self.args)\n+        return (numrows, numcols)\n \n     @property\n     def blockshape(self):\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..363f8e2 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -124,7 +124,9 @@ class BlockDiagMatrix(BlockMatrix):\n         return ImmutableDenseMatrix(data)\n     @property\n     def shape(self):\n-        return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n+        numrows = max((block.rows for block in self.args)) if self.args else 0\n+        numcols = sum((block.cols for block in self.args))\n+        return (numrows, numcols)\n     @property\n     def blockshape(self):\n         n = len(self.args)\n", "normalized_occurrence": 2}
