{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..9f72de7 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -254,7 +254,16 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n         if xfailed and not xfailed.run:\n             xfail(\"[NOTRUN] \" + xfailed.reason)\n \n-    yield\n+    try:\n+        yield\n+    except Exception as e:\n+        if xfailed:\n+            rep = item.config.hook.pytest_make_report(item=item, call=call)\n+            rep.wasxfail = xfailed.reason\n+            rep.outcome = \"skipped\"\n+            item.config.hook.pytest_runtest_logreport(report=rep)\n+        else:\n+            raise e\n \n \n @hookimpl(hookwrapper=True)\n@@ -276,7 +285,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n+    elif xfailed:\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n@@ -312,4 +321,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..6347409 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -135,7 +135,16 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     if not item.config.option.runxfail:\n         if xfailed and (not xfailed.run):\n             xfail('[NOTRUN] ' + xfailed.reason)\n-    yield\n+    try:\n+        yield\n+    except Exception as e:\n+        if xfailed:\n+            rep = item.config.hook.pytest_make_report(item=item, call=call)\n+            rep.wasxfail = xfailed.reason\n+            rep.outcome = 'skipped'\n+            item.config.hook.pytest_runtest_logreport(report=rep)\n+        else:\n+            raise e\n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n     outcome = (yield)\n@@ -154,7 +163,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n+    elif xfailed:\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n", "normalized_occurrence": 1}
