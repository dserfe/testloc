{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..3df2935 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -895,6 +895,9 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n+\n+    def __new__(cls, text):\n+        return super(String, cls).__new__(cls, text=text)\n     not_in_args = ['text']\n     is_Atom = True\n \n@@ -911,9 +914,15 @@ class String(Token):\n class QuotedString(String):\n     \"\"\" Represents a string which should be printed with quotes. \"\"\"\n \n+    def __new__(cls, text):\n+        return super(QuotedString, cls).__new__(cls, text)\n+\n class Comment(String):\n     \"\"\" Represents a comment. \"\"\"\n \n+    def __new__(cls, text):\n+        return super(Comment, cls).__new__(cls, text)\n+\n class Node(Token):\n     \"\"\" Subclass of Token, carrying the attribute 'attrs' (Tuple)\n \n", "occurrence": 1, "normalized_patch": "--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n+\n+    def __new__(cls, text):\n+        return super(String, cls).__new__(cls, text=text)\n+    def __new__(cls, text):\n+        return super(QuotedString, cls).__new__(cls, text)\n+\n+    def __new__(cls, text):\n+        return super(Comment, cls).__new__(cls, text)\n+", "normalized_occurrence": 1}
