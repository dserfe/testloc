{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..8814afb 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -89,6 +89,12 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n \n     expr = sympify(expr)\n \n+    # Handle straightforward cases where target_units are part of expr\n+    if isinstance(expr, Mul) or isinstance(expr, Pow):\n+        expr_units = [arg for arg in expr.args if isinstance(arg, Quantity)]\n+        if all(unit in expr_units for unit in target_units):\n+            return expr\n+\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..69e1fde 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -28,6 +28,10 @@ def convert_to(expr, target_units, unit_system='SI'):\n     if isinstance(expr, Add):\n         return Add.fromiter((convert_to(i, target_units, unit_system) for i in expr.args))\n     expr = sympify(expr)\n+    if isinstance(expr, Mul) or isinstance(expr, Pow):\n+        expr_units = [arg for arg in expr.args if isinstance(arg, Quantity)]\n+        if all((unit in expr_units for unit in target_units)):\n+            return expr\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n     def get_total_scale_factor(expr):\n", "normalized_occurrence": 1}
