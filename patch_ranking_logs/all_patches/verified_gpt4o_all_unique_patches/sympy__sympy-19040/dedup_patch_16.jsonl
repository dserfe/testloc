{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19040", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 65ce47d..4f085f7 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -6347,7 +6347,7 @@ def factor(f, *gens, **args):\n         return f.xreplace(partials)\n \n     try:\n-        return _generic_factor(f, gens, args, method='factor')\n+        return _generic_factor(f, gens, args, method='factor', extension=args.get('extension', None))\n     except PolynomialError as msg:\n         if not f.is_commutative:\n             from sympy.core.exprtools import factor_nc\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex 33f947b..e175ae4 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -2314,7 +2314,7 @@ def factor(f, *gens, **args):\n                 partials[p] = fac\n         return f.xreplace(partials)\n     try:\n-        return _generic_factor(f, gens, args, method='factor')\n+        return _generic_factor(f, gens, args, method='factor', extension=args.get('extension', None))\n     except PolynomialError as msg:\n         if not f.is_commutative:\n             from sympy.core.exprtools import factor_nc\n", "normalized_occurrence": 1}
