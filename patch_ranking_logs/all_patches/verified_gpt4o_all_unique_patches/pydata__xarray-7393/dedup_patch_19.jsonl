{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex d49b2c1..c5cef12 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -706,11 +706,14 @@ class PandasMultiIndex(PandasIndex):\n                     f\"from variable {name!r} that wraps a multi-index\"\n                 )\n \n-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n+        split_labels, levels = zip(*[\n+            (lev.factorize()[0], pd.Index(lev.factorize()[1], dtype=lev.dtype))\n+            for lev in level_indexes\n+        ])\n         labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n         labels = [x.ravel() for x in labels_mesh]\n \n-        index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n+        index = pd.MultiIndex(levels=levels, codes=labels, sortorder=0, names=variables.keys())\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n \n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 6be2e3c..c579808 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -371,10 +371,10 @@ class PandasMultiIndex(PandasIndex):\n         for name, idx in zip(variables, level_indexes):\n             if isinstance(idx, pd.MultiIndex):\n                 raise ValueError(f'cannot create a multi-index along stacked dimension {dim!r} from variable {name!r} that wraps a multi-index')\n-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n+        split_labels, levels = zip(*[(lev.factorize()[0], pd.Index(lev.factorize()[1], dtype=lev.dtype)) for lev in level_indexes])\n         labels_mesh = np.meshgrid(*split_labels, indexing='ij')\n         labels = [x.ravel() for x in labels_mesh]\n-        index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n+        index = pd.MultiIndex(levels=levels, codes=labels, sortorder=0, names=variables.keys())\n         level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n     def unstack(self) -> tuple[dict[Hashable, Index], pd.MultiIndex]:\n", "normalized_occurrence": 1}
