{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14672", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 7ae0a4d..6595059 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n@@ -327,4 +327,4 @@ class ManyToManyRel(ForeignObjectRel):\n                 rel = getattr(field, 'remote_field', None)\n                 if rel and rel.model == self.model:\n                     break\n-        return field.foreign_related_fields[0]\n+        return field.foreign_related_fields[0]\n", "occurrence": 27, "normalized_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 32fd814..4e7c03c 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -132,7 +132,7 @@ class ManyToManyRel(ForeignObjectRel):\n         self.db_constraint = db_constraint\n     @property\n     def identity(self):\n-        return super().identity + (self.through, self.through_fields, self.db_constraint)\n+        return super().identity + (self.through, make_hashable(self.through_fields), self.db_constraint)\n     def get_related_field(self):\n         opts = self.through._meta\n         if self.through_fields:\n", "normalized_occurrence": 27}
