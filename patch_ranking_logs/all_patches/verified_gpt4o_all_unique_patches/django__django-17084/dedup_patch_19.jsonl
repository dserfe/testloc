{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ac042d4..970fc2e 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -240,7 +240,7 @@ class BaseExpression:\n     @cached_property\n     def contains_aggregate(self):\n         return any(\n-            expr and expr.contains_aggregate for expr in self.get_source_expressions()\n+            expr and expr.contains_aggregate and not isinstance(expr, Window) for expr in self.get_source_expressions()\n         )\n \n     @cached_property\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex bd0f587..b79efc2 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -123,7 +123,7 @@ class BaseExpression:\n         raise NotImplementedError('Subclasses must implement as_sql()')\n     @cached_property\n     def contains_aggregate(self):\n-        return any((expr and expr.contains_aggregate for expr in self.get_source_expressions()))\n+        return any((expr and expr.contains_aggregate and (not isinstance(expr, Window)) for expr in self.get_source_expressions()))\n     @cached_property\n     def contains_over_clause(self):\n         return any((expr and expr.contains_over_clause for expr in self.get_source_expressions()))\n", "normalized_occurrence": 1}
