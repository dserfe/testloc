{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..f530d76 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -96,7 +96,12 @@ class DeconstructableSerializer(BaseSerializer):\n             name = \"models.%s\" % name\n         else:\n             imports = {\"import %s\" % module}\n-            name = path\n+            # Check if the class is an inner class and format the import path correctly\n+            if '.' in name:\n+                outer_class_name, inner_class_name = name.split('.', 1)\n+                name = f\"{module}.{outer_class_name}.{inner_class_name}\"\n+            else:\n+                name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..7b0261e 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -74,7 +74,11 @@ class DeconstructableSerializer(BaseSerializer):\n             name = 'models.%s' % name\n         else:\n             imports = {'import %s' % module}\n-            name = path\n+            if '.' in name:\n+                outer_class_name, inner_class_name = name.split('.', 1)\n+                name = f'{module}.{outer_class_name}.{inner_class_name}'\n+            else:\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
