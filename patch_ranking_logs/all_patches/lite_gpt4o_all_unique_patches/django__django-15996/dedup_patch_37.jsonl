{"model_name_or_path": "agentless", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..ede80a5 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -121,14 +121,24 @@ class DictionarySerializer(BaseSerializer):\n         return \"{%s}\" % (\", \".join(\"%s: %s\" % (k, v) for k, v in strings)), imports\n \n \n+from enum import Enum\n+\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        if isinstance(self.value, Enum) and hasattr(enum_class, '_decompose'):\n+            _, members, _ = enum_class._decompose(self.value)\n+            value_expr = \" | \".join(f\"{module}.{enum_class.__qualname__}.{m.name}\" for m in members)\n+            return (\n+                value_expr,\n+                {\"import %s\" % module},\n+            )\n+        else:\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..f70c665 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -88,11 +88,17 @@ class DictionarySerializer(BaseSerializer):\n             imports.update(v_imports)\n             strings.append((k_string, v_string))\n         return ('{%s}' % ', '.join(('%s: %s' % (k, v) for k, v in strings)), imports)\n+from enum import Enum\n class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        if isinstance(self.value, Enum) and hasattr(enum_class, '_decompose'):\n+            _, members, _ = enum_class._decompose(self.value)\n+            value_expr = ' | '.join((f'{module}.{enum_class.__qualname__}.{m.name}' for m in members))\n+            return (value_expr, {'import %s' % module})\n+        else:\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 1}
