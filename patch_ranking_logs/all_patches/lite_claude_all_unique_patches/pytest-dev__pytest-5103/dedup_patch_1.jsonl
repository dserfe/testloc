{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..1e54a92 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -965,6 +965,63 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        # Check if this is a call to all() or any()\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in ('all', 'any') and \n+            len(call.args) == 1):\n+            \n+            # Get the iterator argument\n+            iter_arg = call.args[0]\n+            \n+            # For generator expressions and list comprehensions\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                # Create a for loop that checks each element\n+                target = iter_arg.generators[0].target\n+                iter_expr = iter_arg.generators[0].iter\n+                test_expr = iter_arg.elt\n+                \n+                # Create loop body with assertion\n+                if call.func.id == 'all':\n+                    body = [ast.Assert(test_expr, None)]\n+                else:  # any()\n+                    # For any(), we need to track if we found a True value\n+                    found_var = self.variable()\n+                    body = [\n+                        ast.If(\n+                            test_expr,\n+                            [ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(True))],\n+                            []\n+                        )\n+                    ]\n+                \n+                # Create the loop\n+                loop = ast.For(target, iter_expr, body, [])\n+                \n+                if call.func.id == 'any':\n+                    # Initialize found variable\n+                    init = ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(False))\n+                    # Add final assertion\n+                    final_assert = ast.Assert(ast.Name(found_var, ast.Load()), None)\n+                    return ast.Module([init, loop, final_assert], []), \"unrolled any() call\"\n+                \n+                return loop, \"unrolled all() call\"\n+                \n+        # Default handling for other calls\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..8fca03a 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,39 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1):\n+            iter_arg = call.args[0]\n+            if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                target = iter_arg.generators[0].target\n+                iter_expr = iter_arg.generators[0].iter\n+                test_expr = iter_arg.elt\n+                if call.func.id == 'all':\n+                    body = [ast.Assert(test_expr, None)]\n+                else:\n+                    found_var = self.variable()\n+                    body = [ast.If(test_expr, [ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(True))], [])]\n+                loop = ast.For(target, iter_expr, body, [])\n+                if call.func.id == 'any':\n+                    init = ast.Assign([ast.Name(found_var, ast.Store())], ast.Constant(False))\n+                    final_assert = ast.Assert(ast.Name(found_var, ast.Load()), None)\n+                    return (ast.Module([init, loop, final_assert], []), 'unrolled any() call')\n+                return (loop, 'unrolled all() call')\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
