{"model_name_or_path": "agentless", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 73109d9..e2655dd 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -220,11 +220,11 @@ class FileField(Field):\n \n     description = _(\"File\")\n \n-    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n+    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, path='', **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n \n         self.storage = storage or default_storage\n-        self.upload_to = upload_to\n+        self.path = path if callable(path) else str(path)\n \n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -266,7 +266,10 @@ class FileField(Field):\n         name, path, args, kwargs = super().deconstruct()\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n-        kwargs['upload_to'] = self.upload_to\n+        if callable(self.path):\n+            kwargs['path'] = self.path.__module__ + '.' + self.path.__qualname__\n+        else:\n+            kwargs['path'] = self.path\n         if self.storage is not default_storage:\n             kwargs['storage'] = self.storage\n         return name, path, args, kwargs\n@@ -282,6 +285,8 @@ class FileField(Field):\n         return str(value)\n \n     def pre_save(self, model_instance, add):\n+        if callable(self.path):\n+            self.path = self.path()\n         file = super().pre_save(model_instance, add)\n         if file and not file._committed:\n             # Commit the file to storage prior to saving the model\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 782a310..d653788 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -119,10 +119,10 @@ class FileField(Field):\n     attr_class = FieldFile\n     descriptor_class = FileDescriptor\n     description = _('File')\n-    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n+    def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, path='', **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n         self.storage = storage or default_storage\n-        self.upload_to = upload_to\n+        self.path = path if callable(path) else str(path)\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n     def check(self, **kwargs):\n@@ -141,7 +141,10 @@ class FileField(Field):\n         name, path, args, kwargs = super().deconstruct()\n         if kwargs.get('max_length') == 100:\n             del kwargs['max_length']\n-        kwargs['upload_to'] = self.upload_to\n+        if callable(self.path):\n+            kwargs['path'] = self.path.__module__ + '.' + self.path.__qualname__\n+        else:\n+            kwargs['path'] = self.path\n         if self.storage is not default_storage:\n             kwargs['storage'] = self.storage\n         return (name, path, args, kwargs)\n@@ -153,6 +156,8 @@ class FileField(Field):\n             return None\n         return str(value)\n     def pre_save(self, model_instance, add):\n+        if callable(self.path):\n+            self.path = self.path()\n         file = super().pre_save(model_instance, add)\n         if file and (not file._committed):\n             file.save(file.name, file.file, save=False)\n", "normalized_occurrence": 1}
