{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..656311b 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,6 +213,14 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n+                # Check if local reference exists\n+                if uri.startswith('#'):\n+                    # Check anchor in current document\n+                    return 'working' if docname in self.env.all_docs else ('broken', 'Document not found', 0)\n+                elif ':' in uri:\n+                    # Cross-reference to other document\n+                    doc, anchor = uri.split('#', 1) if '#' in uri else (uri, '')\n+                    return 'working' if doc in self.env.all_docs else ('broken', 'Referenced document not found', 0)\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..babdb19 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,6 +133,11 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n+                if uri.startswith('#'):\n+                    return 'working' if docname in self.env.all_docs else ('broken', 'Document not found', 0)\n+                elif ':' in uri:\n+                    doc, anchor = uri.split('#', 1) if '#' in uri else (uri, '')\n+                    return 'working' if doc in self.env.all_docs else ('broken', 'Referenced document not found', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n", "normalized_occurrence": 1}
