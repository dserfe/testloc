{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..1c26fa1 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,10 +1961,21 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Get the data for this variable, handling missing values\n+            var_data = self.sel({variable_dim: k}, drop=True)\n+            if var_data.size == 0:\n+                # If no data (was dropped during stacking), create with original dims\n+                other_levels = [n for n in idx.names if n != variable_dim]\n+                if other_levels:\n+                    # Get the first non-empty variable's coordinates for the remaining dimensions\n+                    template_var = next(v for v in variables if self.sel({variable_dim: v}, drop=True).size > 0)\n+                    template_data = self.sel({variable_dim: template_var}, drop=True)\n+                    coords = {dim: template_data[dim] for dim in other_levels}\n+                    var_data = xr.DataArray(np.nan, coords=coords)\n+            data_dict[k] = var_data.squeeze()\n \n         # unstacked dataset\n-        return Dataset(data_dict)\n+        return Dataset(data_dict, attrs=self.attrs)\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..a635847 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,8 +534,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-        return Dataset(data_dict)\n+            var_data = self.sel({variable_dim: k}, drop=True)\n+            if var_data.size == 0:\n+                other_levels = [n for n in idx.names if n != variable_dim]\n+                if other_levels:\n+                    template_var = next((v for v in variables if self.sel({variable_dim: v}, drop=True).size > 0))\n+                    template_data = self.sel({variable_dim: template_var}, drop=True)\n+                    coords = {dim: template_data[dim] for dim in other_levels}\n+                    var_data = xr.DataArray(np.nan, coords=coords)\n+            data_dict[k] = var_data.squeeze()\n+        return Dataset(data_dict, attrs=self.attrs)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n             dims = tuple(utils.infix_dims(dims, self.dims))\n", "normalized_occurrence": 1}
