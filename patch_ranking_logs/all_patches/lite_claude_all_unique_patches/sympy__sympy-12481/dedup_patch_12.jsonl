{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..867db82 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -886,6 +886,20 @@ class Permutation(Basic):\n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:  # e\n             args = [[int(i) for i in c] for c in args]\n+            # Handle cycles by composing them left-to-right\n+            # Start with identity permutation\n+            size = max(max(c) for c in args) + 1 if args else 0\n+            result = list(range(size))\n+            # Apply each cycle in order\n+            for cycle in args:\n+                if not cycle:\n+                    continue\n+                # Apply this cycle\n+                new_result = result.copy()\n+                for i in range(len(cycle)):\n+                    new_result[cycle[i]] = result[cycle[(i + 1) % len(cycle)]]\n+                result = new_result\n+            return _af_new(result)\n         else:  # d\n             args = [int(i) for i in args]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..aa08d45 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -191,6 +191,16 @@ class Permutation(Basic):\n         is_cycle = args and is_sequence(args[0])\n         if is_cycle:\n             args = [[int(i) for i in c] for c in args]\n+            size = max((max(c) for c in args)) + 1 if args else 0\n+            result = list(range(size))\n+            for cycle in args:\n+                if not cycle:\n+                    continue\n+                new_result = result.copy()\n+                for i in range(len(cycle)):\n+                    new_result[cycle[i]] = result[cycle[(i + 1) % len(cycle)]]\n+                result = new_result\n+            return _af_new(result)\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n", "normalized_occurrence": 1}
