{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..5be084f 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -9,6 +9,17 @@ from django.core.checks import Error, Tags, Warning, register\n \n \n @register(Tags.models)\n+def _is_valid_ordering_reference(lookup):\n+    \"\"\"\n+    Check if the lookup path is a valid reference for model ordering.\n+    \"\"\"\n+    return (\n+        not isinstance(lookup, str) or\n+        '__' not in lookup or\n+        lookup.endswith('__isnull') or\n+        not any(lookup.endswith(suffix) for suffix in ('__exact', '__gt', '__lt', '__gte', '__lte'))\n+    )\n+\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n@@ -30,6 +41,16 @@ def check_all_models(app_configs=None, **kwargs):\n                     id='models.E020'\n                 )\n             )\n+        # Check that ordering references are valid\n+        for field in model._meta.ordering:\n+            if not _is_valid_ordering_reference(field):\n+                errors.append(\n+                    Error(\n+                        \"'ordering' contains a lookup '%s' which is not a valid ordering reference\" % field,\n+                        obj=model,\n+                        id='models.E015'\n+                    )\n+                )\n         else:\n             errors.extend(model.check(**kwargs))\n         for model_index in model._meta.indexes:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 50dfeb8..32a98e0 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -6,6 +6,8 @@ from django.apps import apps\n from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n @register(Tags.models)\n+def _is_valid_ordering_reference(lookup):\n+    return not isinstance(lookup, str) or '__' not in lookup or lookup.endswith('__isnull') or (not any((lookup.endswith(suffix) for suffix in ('__exact', '__gt', '__lt', '__gte', '__lte'))))\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n     indexes = defaultdict(list)\n@@ -20,6 +22,9 @@ def check_all_models(app_configs=None, **kwargs):\n             db_table_models[model._meta.db_table].append(model._meta.label)\n         if not inspect.ismethod(model.check):\n             errors.append(Error(\"The '%s.check()' class method is currently overridden by %r.\" % (model.__name__, model.check), obj=model, id='models.E020'))\n+        for field in model._meta.ordering:\n+            if not _is_valid_ordering_reference(field):\n+                errors.append(Error(\"'ordering' contains a lookup '%s' which is not a valid ordering reference\" % field, obj=model, id='models.E015'))\n         else:\n             errors.extend(model.check(**kwargs))\n         for model_index in model._meta.indexes:\n", "normalized_occurrence": 1}
