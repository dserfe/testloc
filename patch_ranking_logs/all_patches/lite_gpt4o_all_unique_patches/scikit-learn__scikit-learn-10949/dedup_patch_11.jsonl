{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..4af9001 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -473,6 +473,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         else:\n             dtype = None\n \n+    if dtype_orig is not None and hasattr(array, \"dtypes\") and warn_on_dtype:\n+        # Check if the original DataFrame had any object columns\n+        if any(array.dtypes == np.object):\n+            warnings.warn(\n+                \"Data with input dtype object was converted to float64.\",\n+                DataConversionWarning\n+            )\n+\n     if isinstance(dtype, (list, tuple)):\n         if dtype_orig is not None and dtype_orig in dtype:\n             # no dtype conversion required\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..3b2bf4b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -133,6 +133,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             dtype = np.float64\n         else:\n             dtype = None\n+    if dtype_orig is not None and hasattr(array, 'dtypes') and warn_on_dtype:\n+        if any(array.dtypes == np.object):\n+            warnings.warn('Data with input dtype object was converted to float64.', DataConversionWarning)\n     if isinstance(dtype, (list, tuple)):\n         if dtype_orig is not None and dtype_orig in dtype:\n             dtype = None\n", "normalized_occurrence": 1}
