{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..7cbed8d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -254,8 +254,12 @@ def get_child_arguments():\n \n \n def trigger_reload(filename):\n-    logger.info('%s changed, reloading.', filename)\n-    sys.exit(3)\n+    # Ensure any changes in settings file or directories trigger the reload\n+    if 'settings' in filename or os.path.dirname(filename) in settings.TEMPLATES[0]['DIRS']:\n+        logger.info('%s changed, reloading.', filename)\n+        sys.exit(3)\n+    else:\n+        logger.info('%s changed, but not reloading due to exclusion.', filename)\n \n \n def restart_with_reloader():\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..6238029 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -156,8 +156,11 @@ def get_child_arguments():\n         args += sys.argv\n     return args\n def trigger_reload(filename):\n-    logger.info('%s changed, reloading.', filename)\n-    sys.exit(3)\n+    if 'settings' in filename or os.path.dirname(filename) in settings.TEMPLATES[0]['DIRS']:\n+        logger.info('%s changed, reloading.', filename)\n+        sys.exit(3)\n+    else:\n+        logger.info('%s changed, but not reloading due to exclusion.', filename)\n def restart_with_reloader():\n     new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true'}\n     args = get_child_arguments()\n", "normalized_occurrence": 1}
