{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-14623", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 3079800..860d553 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -3626,19 +3626,23 @@ class _AxesBase(martist.Artist):\n         if top is None:\n             top = old_top\n \n-        if self.get_yscale() == 'log':\n-            if bottom <= 0:\n+        log_scale = self.get_yscale() == 'log'\n+        if log_scale:\n+            if bottom <= 0 or top <= 0:\n                 cbook._warn_external(\n-                    'Attempted to set non-positive bottom ylim on a '\n+                    'Attempted to set non-positive ylim on a '\n                     'log-scaled axis.\\n'\n-                    'Invalid limit will be ignored.')\n-                bottom = old_bottom\n-            if top <= 0:\n+                    'Invalid limits will be ignored.')\n+                bottom = old_bottom if bottom <= 0 else bottom\n+                top = old_top if top <= 0 else top\n+        if bottom > top:\n+            if log_scale and (bottom > 0 and top > 0):\n+                bottom, top = top, bottom\n+            else:\n                 cbook._warn_external(\n-                    'Attempted to set non-positive top ylim on a '\n-                    'log-scaled axis.\\n'\n-                    'Invalid limit will be ignored.')\n-                top = old_top\n+                    'Attempted to set bottom > top on a linear axis.\\n'\n+                    'Limits will be switched.')\n+                bottom, top = top, bottom\n         if bottom == top:\n             cbook._warn_external(\n                 f\"Attempting to set identical bottom == top == {bottom} \"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex df8d28b..ebdc741 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1434,13 +1434,18 @@ class _AxesBase(martist.Artist):\n             bottom = old_bottom\n         if top is None:\n             top = old_top\n-        if self.get_yscale() == 'log':\n-            if bottom <= 0:\n-                cbook._warn_external('Attempted to set non-positive bottom ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n-                bottom = old_bottom\n-            if top <= 0:\n-                cbook._warn_external('Attempted to set non-positive top ylim on a log-scaled axis.\\nInvalid limit will be ignored.')\n-                top = old_top\n+        log_scale = self.get_yscale() == 'log'\n+        if log_scale:\n+            if bottom <= 0 or top <= 0:\n+                cbook._warn_external('Attempted to set non-positive ylim on a log-scaled axis.\\nInvalid limits will be ignored.')\n+                bottom = old_bottom if bottom <= 0 else bottom\n+                top = old_top if top <= 0 else top\n+        if bottom > top:\n+            if log_scale and (bottom > 0 and top > 0):\n+                bottom, top = (top, bottom)\n+            else:\n+                cbook._warn_external('Attempted to set bottom > top on a linear axis.\\nLimits will be switched.')\n+                bottom, top = (top, bottom)\n         if bottom == top:\n             cbook._warn_external(f'Attempting to set identical bottom == top == {bottom} results in singular transformations; automatically expanding.')\n         bottom, top = self.yaxis.get_major_locator().nonsingular(bottom, top)\n", "normalized_occurrence": 1}
