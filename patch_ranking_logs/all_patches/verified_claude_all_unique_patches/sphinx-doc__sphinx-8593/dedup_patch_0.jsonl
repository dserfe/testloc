{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..0315dd0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1865,7 +1865,27 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        if not (isinstance(parent, ModuleDocumenter) and isattr):\n+            return False\n+\n+        # check if the member has a docstring with :meta public:\n+        try:\n+            docstring = getattr(member, '__doc__', None)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+        except Exception:\n+            pass\n+\n+        # check if it's documented in the parent's docstring\n+        try:\n+            parent_doc = parent.__doc__ or ''\n+            if f'{membername}.*:meta public:' in parent_doc:\n+                return True\n+        except Exception:\n+            pass\n+\n+        # default case: document if it's not private\n+        return not membername.startswith('_')\n \n     def update_annotations(self, parent: Any) -> None:\n         \"\"\"Update __annotations__ to support type_comment and so on.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f71844a..0cec713 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1047,7 +1047,21 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin, Uninitialize\n     option_spec['no-value'] = bool_option\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        if not (isinstance(parent, ModuleDocumenter) and isattr):\n+            return False\n+        try:\n+            docstring = getattr(member, '__doc__', None)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+        except Exception:\n+            pass\n+        try:\n+            parent_doc = parent.__doc__ or ''\n+            if f'{membername}.*:meta public:' in parent_doc:\n+                return True\n+        except Exception:\n+            pass\n+        return not membername.startswith('_')\n     def update_annotations(self, parent: Any) -> None:\n         try:\n             annotations = dict(inspect.getannotations(parent))\n", "normalized_occurrence": 1}
