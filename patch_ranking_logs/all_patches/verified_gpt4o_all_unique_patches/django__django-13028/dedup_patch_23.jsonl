{"model_name_or_path": "agentless", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a6a3e97..dcf9f75 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1122,8 +1122,13 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n \n-    def check_filterable(self, expression):\n+    def check_filterable(self, expression, context=None):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n+        if context is None:\n+            context = set()\n+        if id(expression) in context:\n+            return\n+        context.add(id(expression))\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(\n                 expression.__class__.__name__ + ' is disallowed in the filter '\n@@ -1131,7 +1136,7 @@ class Query(BaseExpression):\n             )\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n-                self.check_filterable(expr)\n+                self.check_filterable(expr, context)\n \n     def build_lookup(self, lookups, lhs, rhs):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5b98027..3352ffd 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -610,12 +610,17 @@ class Query(BaseExpression):\n             elif hasattr(value, '__iter__'):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n-    def check_filterable(self, expression):\n+    def check_filterable(self, expression, context=None):\n+        if context is None:\n+            context = set()\n+        if id(expression) in context:\n+            return\n+        context.add(id(expression))\n         if not getattr(expression, 'filterable', True):\n             raise NotSupportedError(expression.__class__.__name__ + ' is disallowed in the filter clause.')\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n-                self.check_filterable(expr)\n+                self.check_filterable(expr, context)\n     def build_lookup(self, lookups, lhs, rhs):\n         *transforms, lookup_name = lookups or ['exact']\n         for name in transforms:\n", "normalized_occurrence": 1}
