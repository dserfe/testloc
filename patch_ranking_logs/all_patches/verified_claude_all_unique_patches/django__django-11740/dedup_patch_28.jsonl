{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..b85a579 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -886,6 +886,29 @@ class MigrationAutodetector:\n             self._generate_removed_field(app_label, model_name, field_name)\n \n     def _generate_removed_field(self, app_label, model_name, field_name):\n+        dependencies = []\n+        # Check if this field is being replaced by a foreign key\n+        if (app_label, model_name, field_name) in self.renamed_fields:\n+            # If this field is being renamed, we need to check the new field\n+            new_field_name = field_name\n+        else:\n+            # Check if there's a new field with the same name in new_field_keys\n+            new_field_name = None\n+            for new_app_label, new_model_name, new_field in self.new_field_keys:\n+                if (new_app_label == app_label and \n+                    new_model_name == model_name and \n+                    new_field == field_name):\n+                    new_field_name = new_field\n+                    break\n+            \n+        if new_field_name:\n+            try:\n+                new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(new_field_name)\n+                if new_field.remote_field and new_field.remote_field.model:\n+                    dependencies.extend(self._get_dependencies_for_foreign_key(new_field))\n+            except (LookupError, FieldDoesNotExist):\n+                pass\n+\n         self.add_operation(\n             app_label,\n             operations.RemoveField(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..77e8d8c 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -428,6 +428,22 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):\n             self._generate_removed_field(app_label, model_name, field_name)\n     def _generate_removed_field(self, app_label, model_name, field_name):\n+        dependencies = []\n+        if (app_label, model_name, field_name) in self.renamed_fields:\n+            new_field_name = field_name\n+        else:\n+            new_field_name = None\n+            for new_app_label, new_model_name, new_field in self.new_field_keys:\n+                if new_app_label == app_label and new_model_name == model_name and (new_field == field_name):\n+                    new_field_name = new_field\n+                    break\n+        if new_field_name:\n+            try:\n+                new_field = self.new_apps.get_model(app_label, model_name)._meta.get_field(new_field_name)\n+                if new_field.remote_field and new_field.remote_field.model:\n+                    dependencies.extend(self._get_dependencies_for_foreign_key(new_field))\n+            except (LookupError, FieldDoesNotExist):\n+                pass\n         self.add_operation(app_label, operations.RemoveField(model_name=model_name, name=field_name), dependencies=[(app_label, model_name, field_name, 'order_wrt_unset'), (app_label, model_name, field_name, 'foo_together_change')])\n     def generate_altered_fields(self):\n         for app_label, model_name, field_name in sorted(self.old_field_keys & self.new_field_keys):\n", "normalized_occurrence": 1}
