{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 87c3fb8..6d0e4b3 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1310,7 +1310,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             if inspect.is_builtin_class_method(obj, attr):\n                 return None\n             attr = self.get_attr(obj, attr, None)\n-            if not (inspect.ismethod(attr) or inspect.isfunction(attr)):\n+            # Unwrap the attribute to handle decorated methods\n+            unwrapped = inspect.unwrap(attr)\n+            if not (inspect.ismethod(unwrapped) or inspect.isfunction(unwrapped)):\n                 return None\n             return attr\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 69b2ccc..edce241 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -958,7 +958,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             if inspect.is_builtin_class_method(obj, attr):\n                 return None\n             attr = self.get_attr(obj, attr, None)\n-            if not (inspect.ismethod(attr) or inspect.isfunction(attr)):\n+            unwrapped = inspect.unwrap(attr)\n+            if not (inspect.ismethod(unwrapped) or inspect.isfunction(unwrapped)):\n                 return None\n             return attr\n         call = get_user_defined_function_or_method(type(self.object), '__call__')\n", "normalized_occurrence": 1}
