{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..b15ef2d 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,10 +897,11 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+                # Allow non-disjoint cycles by applying them in left-to-right order\n+                aform = list(range(max(temp) + 1))\n+                for ci in args:\n+                    for i in range(len(ci)):\n+                        aform[ci[i-1]], aform[ci[i]] = aform[ci[i]], aform[ci[i-1]]\n         temp = set(temp)\n \n         if not is_cycle and \\\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..bc348a7 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,9 +196,10 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n-                raise ValueError('there were repeated elements.')\n+                aform = list(range(max(temp) + 1))\n+                for ci in args:\n+                    for i in range(len(ci)):\n+                        aform[ci[i - 1]], aform[ci[i]] = (aform[ci[i]], aform[ci[i - 1]])\n         temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n", "normalized_occurrence": 1}
