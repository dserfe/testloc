{"model_name_or_path": "agentless", "instance_id": "django__django-11276", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 1bacb5c..95e61d2 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -24,26 +24,20 @@ word_split_re = re.compile(r'''([\\s<>\"']+)''')\n simple_url_re = re.compile(r'^https?://\\[?\\w', re.IGNORECASE)\n simple_url_2_re = re.compile(r'^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n \n-_html_escapes = {\n-    ord('&'): '&amp;',\n-    ord('<'): '&lt;',\n-    ord('>'): '&gt;',\n-    ord('\"'): '&quot;',\n-    ord(\"'\"): '&#39;',\n-}\n+import html\n \n \n @keep_lazy(str, SafeString)\n def escape(text):\n     \"\"\"\n-    Return the given text with ampersands, quotes and angle brackets encoded\n+    Return the given text with ampersands, quotes, and angle brackets encoded\n     for use in HTML.\n \n     Always escape input, even if it's already escaped and marked as such.\n     This may result in double-escaping. If this is a concern, use\n     conditional_escape() instead.\n     \"\"\"\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text), quote=True))\n \n \n _js_escapes = {\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex 51fd095..4975458 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -13,10 +13,10 @@ unencoded_ampersands_re = re.compile('&(?!(\\\\w+|#\\\\d+);)')\n word_split_re = re.compile('([\\\\s<>\"\\']+)')\n simple_url_re = re.compile('^https?://\\\\[?\\\\w', re.IGNORECASE)\n simple_url_2_re = re.compile('^www\\\\.|^(?!http)\\\\w[^@]+\\\\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)\n-_html_escapes = {ord('&'): '&amp;', ord('<'): '&lt;', ord('>'): '&gt;', ord('\"'): '&quot;', ord(\"'\"): '&#39;'}\n+import html\n @keep_lazy(str, SafeString)\n def escape(text):\n-    return mark_safe(str(text).translate(_html_escapes))\n+    return mark_safe(html.escape(str(text), quote=True))\n _js_escapes = {ord('\\\\'): '\\\\u005C', ord(\"'\"): '\\\\u0027', ord('\"'): '\\\\u0022', ord('>'): '\\\\u003E', ord('<'): '\\\\u003C', ord('&'): '\\\\u0026', ord('='): '\\\\u003D', ord('-'): '\\\\u002D', ord(';'): '\\\\u003B', ord('`'): '\\\\u0060', ord('\\u2028'): '\\\\u2028', ord('\\u2029'): '\\\\u2029'}\n _js_escapes.update(((ord('%c' % z), '\\\\u%04X' % z) for z in range(32)))\n @keep_lazy(str, SafeString)\n", "normalized_occurrence": 11}
