{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..1244309 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,7 +408,53 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+import traceback\n+import json\n+\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, Exception):\n+        return {\n+            \"reprtraceback\": str(longrepr),\n+            \"reprcrash\": {\n+                \"path\": getattr(longrepr, 'filename', None),\n+                \"lineno\": getattr(longrepr, 'lineno', None),\n+                \"message\": str(longrepr),\n+            },\n+            \"chain\": [{\n+                \"type\": type(exc).__name__,\n+                \"message\": str(exc),\n+                \"traceback\": traceback.format_exception(etype=type(exc), value=exc, tb=exc.__traceback__)\n+            } for exc in longrepr.__cause__ or longrepr.__context__ or []]\n+        }\n+    return longrepr\n+\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict) and \"reprtraceback\" in data:\n+        chain = data.get(\"chain\", [])\n+        exc = Exception(data[\"reprtraceback\"])\n+        for chained_exception in reversed(chain):\n+            exc_type = type(chained_exception[\"type\"], (Exception,), {})\n+            exc = exc_type(chained_exception[\"message\"]).with_traceback(chained_exception[\"traceback\"])\n+        return exc\n+    return data\n+\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        data[\"longrepr\"] = serialize_longrepr(report.longrepr)\n+        return data\n+\n+def pytest_report_from_serializable(data):\n+    if \"_report_type\" in data:\n+        if data[\"_report_type\"] == \"TestReport\":\n+            report = TestReport._from_json(data)\n+        elif data[\"_report_type\"] == \"CollectReport\":\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(data[\"_report_type\"])\n+        report.longrepr = deserialize_longrepr(data[\"longrepr\"])\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..1ccd833 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,7 +205,37 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+import traceback\n+import json\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, Exception):\n+        return {'reprtraceback': str(longrepr), 'reprcrash': {'path': getattr(longrepr, 'filename', None), 'lineno': getattr(longrepr, 'lineno', None), 'message': str(longrepr)}, 'chain': [{'type': type(exc).__name__, 'message': str(exc), 'traceback': traceback.format_exception(etype=type(exc), value=exc, tb=exc.__traceback__)} for exc in longrepr.__cause__ or longrepr.__context__ or []]}\n+    return longrepr\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict) and 'reprtraceback' in data:\n+        chain = data.get('chain', [])\n+        exc = Exception(data['reprtraceback'])\n+        for chained_exception in reversed(chain):\n+            exc_type = type(chained_exception['type'], (Exception,), {})\n+            exc = exc_type(chained_exception['message']).with_traceback(chained_exception['traceback'])\n+        return exc\n+    return data\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        data['longrepr'] = serialize_longrepr(report.longrepr)\n+        return data\n+def pytest_report_from_serializable(data):\n+    if '_report_type' in data:\n+        if data['_report_type'] == 'TestReport':\n+            report = TestReport._from_json(data)\n+        elif data['_report_type'] == 'CollectReport':\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        report.longrepr = deserialize_longrepr(data['longrepr'])\n+        return report\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n", "normalized_occurrence": 1}
