{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..aef8eb9 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -16,6 +16,12 @@ from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n+        # Handle both traditional packages with __init__.py and implicit namespace packages\n+        basename = os.path.basename(filename)\n+        dirname = os.path.basename(os.path.dirname(filename))\n+        # Don't require __init__.py if the file has same name as directory\n+        if basename.startswith(dirname + '.'):\n+            return True\n         return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n \n     return modutils.modpath_from_file_with_callback(\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..963c606 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -7,6 +7,10 @@ from astroid import modutils\n from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n+        basename = os.path.basename(filename)\n+        dirname = os.path.basename(os.path.dirname(filename))\n+        if basename.startswith(dirname + '.'):\n+            return True\n         return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n     return modutils.modpath_from_file_with_callback(filename, path=path, is_package_cb=_is_package_cb)\n def get_python_path(filepath: str) -> str:\n", "normalized_occurrence": 1}
