{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..b144d1b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1155,11 +1155,24 @@ class PythonDomain(Domain):\n                     elif name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # \"fuzzy\" searching mode with context awareness\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects\n-                                   if oname.endswith(searchname) and\n-                                   self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        for oname, obj in self.objects.items():\n+                            if not oname.endswith(searchname) or obj.objtype not in objtypes:\n+                                continue\n+                            # For attributes/variables, only match within same class/module context\n+                            if obj.objtype in ('attribute', 'data'):\n+                                # If we have a class context, only match within same class\n+                                if classname:\n+                                    if oname.startswith(modname + '.' + classname + '.'):\n+                                        matches.append((oname, obj))\n+                                # If we have a module context, only match within same module\n+                                elif modname:\n+                                    if oname.startswith(modname + '.'):\n+                                        matches.append((oname, obj))\n+                            else:\n+                                matches.append((oname, obj))\n         else:\n             # NOTE: searching for exact match, object type is not considered\n             if name in self.objects:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..f3524d5 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -684,7 +684,19 @@ class PythonDomain(Domain):\n                         newname = name\n                     else:\n                         searchname = '.' + name\n-                        matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n+                        matches = []\n+                        for oname, obj in self.objects.items():\n+                            if not oname.endswith(searchname) or obj.objtype not in objtypes:\n+                                continue\n+                            if obj.objtype in ('attribute', 'data'):\n+                                if classname:\n+                                    if oname.startswith(modname + '.' + classname + '.'):\n+                                        matches.append((oname, obj))\n+                                elif modname:\n+                                    if oname.startswith(modname + '.'):\n+                                        matches.append((oname, obj))\n+                            else:\n+                                matches.append((oname, obj))\n         elif name in self.objects:\n             newname = name\n         elif type == 'mod':\n", "normalized_occurrence": 1}
