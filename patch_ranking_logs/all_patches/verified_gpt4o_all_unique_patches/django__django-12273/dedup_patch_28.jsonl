{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..f13d410 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -674,6 +674,10 @@ class Model(metaclass=ModelBase):\n         # a ForeignKey or OneToOneField on this model. If the field is\n         # nullable, allowing the save() would result in silent data loss.\n         for field in self._meta.concrete_fields:\n+            # If the primary key is None, we need to assign a new value\n+            if field.primary_key and getattr(self, field.attname) is None:\n+                continue\n+            \n             # If the related field isn't cached, then an instance hasn't\n             # been assigned and there's no need to worry about this check.\n             if field.is_relation and field.is_cached(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9dcf0cd..51c3bcc 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -366,6 +366,8 @@ class Model(metaclass=ModelBase):\n         return getattr(self, field.attname)\n     def save(self, force_insert=False, force_update=False, using=None, update_fields=None):\n         for field in self._meta.concrete_fields:\n+            if field.primary_key and getattr(self, field.attname) is None:\n+                continue\n             if field.is_relation and field.is_cached(self):\n                 obj = getattr(self, field.name, None)\n                 if not obj:\n", "normalized_occurrence": 1}
