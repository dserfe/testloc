{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..b6635a6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -59,7 +59,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.intersphinx_mapping)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n@@ -75,7 +75,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], intersphinx_mapping: Dict[str, Tuple[str, None]]) -> None:\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -104,6 +104,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             continue\n \n         arg = arguments.get(name, {})\n+        if annotation == 'None':\n+            annotation = f'<a class=\"reference external\" href=\"{intersphinx_mapping[\"python\"][0]}/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'\n         field = nodes.field()\n         if arg.get('param') and arg.get('type'):\n             # both param and type are already filled manually\n@@ -124,6 +126,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n+        if annotation == 'None':\n+            annotation = f'<a class=\"reference external\" href=\"{intersphinx_mapping[\"python\"][0]}/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n         field += nodes.field_body('', nodes.paragraph('', annotation))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..c164905 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -39,7 +39,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n-            modify_field_list(field_list, annotations[fullname])\n+            modify_field_list(field_list, annotations[fullname], app.config.intersphinx_mapping)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n@@ -49,7 +49,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], intersphinx_mapping: Dict[str, Tuple[str, None]]) -> None:\n     arguments = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -74,6 +74,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n+        if annotation == 'None':\n+            annotation = f'''<a class=\"reference external\" href=\"{intersphinx_mapping['python'][0]}/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'''\n         field = nodes.field()\n         if arg.get('param') and arg.get('type'):\n             continue\n@@ -88,6 +90,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             field += nodes.field_body('', nodes.paragraph('', ''))\n         node += field\n     if 'return' in annotations and 'return' not in arguments:\n+        if annotation == 'None':\n+            annotation = f'''<a class=\"reference external\" href=\"{intersphinx_mapping['python'][0]}/library/constants.html#None\" title=\"(in Python v3.8)\">None</a>'''\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n         field += nodes.field_body('', nodes.paragraph('', annotation))\n", "normalized_occurrence": 1}
