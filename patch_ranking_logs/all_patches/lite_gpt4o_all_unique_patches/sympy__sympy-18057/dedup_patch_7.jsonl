{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..9351b53 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -121,10 +121,10 @@ class Expr(Basic, EvalfMixin):\n \n     def __eq__(self, other):\n         try:\n-            other = sympify(other)\n+            other = _safe_sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        except (SympifyError, SyntaxError, AttributeError):\n             return False\n         # check for pure number expr\n         if  not (self.is_Number and other.is_Number) and (\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..2017881 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -47,10 +47,10 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n     def __eq__(self, other):\n         try:\n-            other = sympify(other)\n+            other = _safe_sympify(other)\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n+        except (SympifyError, SyntaxError, AttributeError):\n             return False\n         if not (self.is_Number and other.is_Number) and type(self) != type(other):\n             return False\n", "normalized_occurrence": 1}
