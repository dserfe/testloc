{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10924", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f5823d9..42b1365 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1709,7 +1709,7 @@ class FilePathField(Field):\n \n     def formfield(self, **kwargs):\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': self._get_path(),\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n@@ -1721,6 +1721,14 @@ class FilePathField(Field):\n     def get_internal_type(self):\n         return \"FilePathField\"\n \n+    def _get_path(self):\n+        \"\"\"\n+        Return the evaluated path when path is a callable.\n+        \"\"\"\n+        if callable(self.path):\n+            return self.path()\n+        return self.path\n+\n \n class FloatField(Field):\n     empty_strings_allowed = False\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 285706a..83b6bec 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -875,9 +875,13 @@ class FilePathField(Field):\n             return None\n         return str(value)\n     def formfield(self, **kwargs):\n-        return super().formfield(**{'path': self.path, 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n+        return super().formfield(**{'path': self._get_path(), 'match': self.match, 'recursive': self.recursive, 'form_class': forms.FilePathField, 'allow_files': self.allow_files, 'allow_folders': self.allow_folders, **kwargs})\n     def get_internal_type(self):\n         return 'FilePathField'\n+    def _get_path(self):\n+        if callable(self.path):\n+            return self.path()\n+        return self.path\n class FloatField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {'invalid': _(\"'%(value)s' value must be a float.\")}\n", "normalized_occurrence": 1}
