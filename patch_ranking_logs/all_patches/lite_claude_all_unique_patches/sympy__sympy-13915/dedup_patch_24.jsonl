{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 30870a1..4a2d927 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1862,6 +1862,13 @@ class Subs(Expr):\n     def _eval_subs(self, old, new):\n         if old in self.variables:\n             if old in self.point:\n+                # Check if substitution would lead to undefined expression\n+                if old == new and self.expr.has(old):\n+                    try:\n+                        # Try to evaluate the limit instead of direct substitution\n+                        return self.expr.limit(old, new)\n+                    except:\n+                        pass\n                 newpoint = tuple(new if i == old else i for i in self.point)\n                 return self.func(self.expr, self.variables, newpoint)\n             return self\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 209c1c6..b4638aa 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -768,6 +768,11 @@ class Subs(Expr):\n     def _eval_subs(self, old, new):\n         if old in self.variables:\n             if old in self.point:\n+                if old == new and self.expr.has(old):\n+                    try:\n+                        return self.expr.limit(old, new)\n+                    except:\n+                        pass\n                 newpoint = tuple((new if i == old else i for i in self.point))\n                 return self.func(self.expr, self.variables, newpoint)\n             return self\n", "normalized_occurrence": 1}
