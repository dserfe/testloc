{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 30870a1..13405e0 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1860,10 +1860,19 @@ class Subs(Expr):\n         return (self._expr.xreplace(self.canonical_variables),)\n \n     def _eval_subs(self, old, new):\n+        from sympy.core.numbers import nan, zoo\n         if old in self.variables:\n             if old in self.point:\n                 newpoint = tuple(new if i == old else i for i in self.point)\n-                return self.func(self.expr, self.variables, newpoint)\n+                result = self.func(self.expr, self.variables, newpoint)\n+                # If substitution leads to undefined expression (nan/zoo),\n+                # try evaluating the limit\n+                if result.has(nan) or result.has(zoo):\n+                    try:\n+                        return limit(self.expr, old, new)\n+                    except:\n+                        return result\n+                return result\n             return self\n \n     def _eval_derivative(self, s):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 209c1c6..01009f2 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -766,10 +766,17 @@ class Subs(Expr):\n     def _hashable_content(self):\n         return (self._expr.xreplace(self.canonical_variables),)\n     def _eval_subs(self, old, new):\n+        from sympy.core.numbers import nan, zoo\n         if old in self.variables:\n             if old in self.point:\n                 newpoint = tuple((new if i == old else i for i in self.point))\n-                return self.func(self.expr, self.variables, newpoint)\n+                result = self.func(self.expr, self.variables, newpoint)\n+                if result.has(nan) or result.has(zoo):\n+                    try:\n+                        return limit(self.expr, old, new)\n+                    except:\n+                        return result\n+                return result\n             return self\n     def _eval_derivative(self, s):\n         val = Add.fromiter((p.diff(s) * Subs(self.expr.diff(v), self.variables, self.point).doit() for v, p in zip(self.variables, self.point)))\n", "normalized_occurrence": 1}
