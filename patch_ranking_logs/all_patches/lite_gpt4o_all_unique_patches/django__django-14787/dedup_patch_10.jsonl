{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..9ff833e 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "occurrence": 3, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..1a8a1da 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -16,6 +16,7 @@ def _multi_decorate(decorators, method):\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n         bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = update_wrapper(bound_method, method)\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "normalized_occurrence": 3}
