{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..f05c584 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -442,4 +442,7 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        # Ensure all models in self.data are present in deleted_counter with at least 0 count\n+        all_models = {model._meta.label: 0 for model in self.data}\n+        all_models.update(deleted_counter)\n+        return sum(deleted_counter.values()), all_models\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..8ef1c5f 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -234,4 +234,6 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return (sum(deleted_counter.values()), dict(deleted_counter))\n\\ No newline at end of file\n+        all_models = {model._meta.label: 0 for model in self.data}\n+        all_models.update(deleted_counter)\n+        return (sum(deleted_counter.values()), all_models)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
