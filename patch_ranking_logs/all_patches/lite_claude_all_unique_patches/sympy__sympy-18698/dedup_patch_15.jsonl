{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..64d346d 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -420,6 +420,25 @@ def dmp_sqf_list(f, u, K, all=False):\n \n         i += 1\n \n+    # Combine factors with the same multiplicity\n+    if result:\n+        combined = []\n+        curr_factor, curr_mult = result[0]\n+        curr_deg = dmp_degree(curr_factor, u)\n+        \n+        for factor, mult in result[1:]:\n+            if mult == curr_mult:\n+                # Multiply factors with the same multiplicity\n+                curr_factor = dmp_mul(curr_factor, factor, u, K)\n+                curr_deg += dmp_degree(factor, u)\n+            else:\n+                combined.append((curr_factor, curr_mult))\n+                curr_factor, curr_mult = factor, mult\n+                curr_deg = dmp_degree(factor, u)\n+        \n+        combined.append((curr_factor, curr_mult))\n+        result = combined\n+\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..3f7d37e 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -154,6 +154,20 @@ def dmp_sqf_list(f, u, K, all=False):\n         if all or dmp_degree(g, u) > 0:\n             result.append((g, i))\n         i += 1\n+    if result:\n+        combined = []\n+        curr_factor, curr_mult = result[0]\n+        curr_deg = dmp_degree(curr_factor, u)\n+        for factor, mult in result[1:]:\n+            if mult == curr_mult:\n+                curr_factor = dmp_mul(curr_factor, factor, u, K)\n+                curr_deg += dmp_degree(factor, u)\n+            else:\n+                combined.append((curr_factor, curr_mult))\n+                curr_factor, curr_mult = (factor, mult)\n+                curr_deg = dmp_degree(factor, u)\n+        combined.append((curr_factor, curr_mult))\n+        result = combined\n     return (coeff, result)\n def dmp_sqf_list_include(f, u, K, all=False):\n     if not u:\n", "normalized_occurrence": 1}
