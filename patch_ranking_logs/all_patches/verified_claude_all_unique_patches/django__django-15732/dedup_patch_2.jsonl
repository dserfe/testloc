{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..2143535 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -186,6 +187,26 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n \n+    def _alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        \"\"\"\n+        Deal with a model changing its unique_together. The input is the old and new sets\n+        of unique_together constraints.\n+        \"\"\"\n+        olds = {tuple(fields) for fields in old_unique_together}\n+        news = {tuple(fields) for fields in new_unique_together}\n+\n+        # Drop unique constraints that are no longer needed\n+        for fields in olds - news:\n+            # Skip if this is actually a primary key constraint\n+            if len(fields) == 1 and model._meta.pk.name == fields[0]:\n+                continue\n+            self._delete_unique_constraint(model, fields)\n+\n+        # Add new unique constraints\n+        for fields in news - olds:\n+            columns = [model._meta.get_field(field).column for field in fields]\n+            self.execute(self._create_unique_sql(model, columns))\n+\n     def _alter_field(\n         self,\n         model,\n@@ -296,4 +317,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n+    def _alter_unique_together(self, model, old_unique_together, new_unique_together):\n+        olds = {tuple(fields) for fields in old_unique_together}\n+        news = {tuple(fields) for fields in new_unique_together}\n+        for fields in olds - news:\n+            if len(fields) == 1 and model._meta.pk.name == fields[0]:\n+                continue\n+            self._delete_unique_constraint(model, fields)\n+        for fields in news - olds:\n+            columns = [model._meta.get_field(field).column for field in fields]\n+            self.execute(self._create_unique_sql(model, columns))", "normalized_occurrence": 1}
