{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..0c75e86 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,26 +162,52 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            def serialize_traceback(exc_info):\n+                if exc_info is None:\n+                    return None\n+                    \n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": exc_info.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+            main_traceback = serialize_traceback(rep.longrepr)\n+            chain = []\n+            \n+            # Handle cause chain (__cause__, raised \"from\")\n+            current = getattr(rep.longrepr, 'cause', None)\n+            while current is not None:\n+                chain.append(('cause', serialize_traceback(current)))\n+                current = getattr(current, 'cause', None)\n+                \n+            # Handle context chain (__context__, implicit chaining)\n+            current = getattr(rep.longrepr, 'context', None)\n+            while current is not None:\n+                chain.append(('context', serialize_traceback(current)))\n+                current = getattr(current, 'context', None)\n \n             return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n+                \"reprcrash\": main_traceback[\"reprcrash\"],\n+                \"reprtraceback\": main_traceback[\"reprtraceback\"],\n+                \"sections\": main_traceback[\"sections\"],\n+                \"chain\": chain,\n             }\n \n         d = self.__dict__.copy()\n@@ -250,14 +276,34 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n-\n-                for section in reportdict[\"longrepr\"][\"sections\"]:\n-                    exception_info.addsection(*section)\n-                reportdict[\"longrepr\"] = exception_info\n+                def deserialize_traceback(serialized):\n+                    if serialized is None:\n+                        return None\n+                        \n+                    exc_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**serialized[\"reprtraceback\"]),\n+                        reprcrash=ReprFileLocation(**serialized[\"reprcrash\"]),\n+                    )\n+                    \n+                    for section in serialized[\"sections\"]:\n+                        exc_info.addsection(*section)\n+                    return exc_info\n+\n+                main_exc = deserialize_traceback({\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": reportdict[\"longrepr\"][\"sections\"]\n+                })\n+\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    for chain_type, exc_data in reportdict[\"longrepr\"][\"chain\"]:\n+                        chained_exc = deserialize_traceback(exc_data)\n+                        if chain_type == \"cause\":\n+                            main_exc.cause = chained_exc\n+                        else:  # context\n+                            main_exc.context = chained_exc\n+\n+                reportdict[\"longrepr\"] = main_exc\n \n         return cls(**reportdict)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..5a908b8 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,31 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def serialize_traceback(exc_info):\n+                if exc_info is None:\n+                    return None\n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback['reprentries'] = new_entries\n+                return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': exc_info.sections}\n+            main_traceback = serialize_traceback(rep.longrepr)\n+            chain = []\n+            current = getattr(rep.longrepr, 'cause', None)\n+            while current is not None:\n+                chain.append(('cause', serialize_traceback(current)))\n+                current = getattr(current, 'cause', None)\n+            current = getattr(rep.longrepr, 'context', None)\n+            while current is not None:\n+                chain.append(('context', serialize_traceback(current)))\n+                current = getattr(current, 'context', None)\n+            return {'reprcrash': main_traceback['reprcrash'], 'reprtraceback': main_traceback['reprtraceback'], 'sections': main_traceback['sections'], 'chain': chain}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -130,10 +144,22 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n-                for section in reportdict['longrepr']['sections']:\n-                    exception_info.addsection(*section)\n-                reportdict['longrepr'] = exception_info\n+                def deserialize_traceback(serialized):\n+                    if serialized is None:\n+                        return None\n+                    exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**serialized['reprtraceback']), reprcrash=ReprFileLocation(**serialized['reprcrash']))\n+                    for section in serialized['sections']:\n+                        exc_info.addsection(*section)\n+                    return exc_info\n+                main_exc = deserialize_traceback({'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': reportdict['longrepr']['sections']})\n+                if 'chain' in reportdict['longrepr']:\n+                    for chain_type, exc_data in reportdict['longrepr']['chain']:\n+                        chained_exc = deserialize_traceback(exc_data)\n+                        if chain_type == 'cause':\n+                            main_exc.cause = chained_exc\n+                        else:\n+                            main_exc.context = chained_exc\n+                reportdict['longrepr'] = main_exc\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n     url = 'https://github.com/pytest-dev/pytest/issues'\n", "normalized_occurrence": 1}
