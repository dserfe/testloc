{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2674", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 06b1117..520c83b 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -416,6 +416,9 @@ class HTTPAdapter(BaseAdapter):\n             if isinstance(e.reason, ConnectTimeoutError):\n                 raise ConnectTimeout(e, request=request)\n \n+            if isinstance(e.reason, TimeoutError):\n+                raise Timeout(e, request=request)\n+\n             if isinstance(e.reason, ResponseError):\n                 raise RetryError(e, request=request)\n \n@@ -429,7 +432,9 @@ class HTTPAdapter(BaseAdapter):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\n                 raise ReadTimeout(e, request=request)\n+            elif isinstance(e, DecodeError):\n+                raise RequestsError(e, request=request)\n             else:\n                 raise\n \n-        return self.build_response(request, resp)\n+        return self.build_response(request, resp)\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 9062cd5..2bba748 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -170,6 +170,8 @@ class HTTPAdapter(BaseAdapter):\n         except MaxRetryError as e:\n             if isinstance(e.reason, ConnectTimeoutError):\n                 raise ConnectTimeout(e, request=request)\n+            if isinstance(e.reason, TimeoutError):\n+                raise Timeout(e, request=request)\n             if isinstance(e.reason, ResponseError):\n                 raise RetryError(e, request=request)\n             raise ConnectionError(e, request=request)\n@@ -180,6 +182,8 @@ class HTTPAdapter(BaseAdapter):\n                 raise SSLError(e, request=request)\n             elif isinstance(e, ReadTimeoutError):\n                 raise ReadTimeout(e, request=request)\n+            elif isinstance(e, DecodeError):\n+                raise RequestsError(e, request=request)\n             else:\n                 raise\n         return self.build_response(request, resp)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
