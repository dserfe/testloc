{"model_name_or_path": "agentless", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..e06abec 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1,3 +1,4 @@\n+\n import copy\n import datetime\n import functools\n@@ -658,6 +659,15 @@ class Func(SQLiteNumericMixin, Expression):\n     arg_joiner = ', '\n     arity = None  # The number of arguments the function accepts.\n \n+    def deconstruct(self):\n+        \"\"\"\n+        Deconstruct the expression into a serializable form for migrations.\n+        \"\"\"\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return path, args, kwargs\n+\n     def __init__(self, *expressions, output_field=None, **extra):\n         if self.arity is not None and len(expressions) != self.arity:\n             raise TypeError(\n@@ -737,6 +747,15 @@ class Value(SQLiteNumericMixin, Expression):\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n \n+    def deconstruct(self):\n+        \"\"\"\n+        Deconstruct the expression into a serializable form for migrations.\n+        \"\"\"\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return path, args, kwargs\n+\n     def __init__(self, value, output_field=None):\n         \"\"\"\n         Arguments:\n@@ -808,6 +827,15 @@ class Value(SQLiteNumericMixin, Expression):\n \n \n class RawSQL(Expression):\n+    def deconstruct(self):\n+        \"\"\"\n+        Deconstruct the expression into a serializable form for migrations.\n+        \"\"\"\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return path, args, kwargs\n+\n     def __init__(self, sql, params, output_field=None):\n         if output_field is None:\n             output_field = fields.Field()\n@@ -920,6 +948,15 @@ class ExpressionList(Func):\n     \"\"\"\n     template = '%(expressions)s'\n \n+    def deconstruct(self):\n+        \"\"\"\n+        Deconstruct the expression into a serializable form for migrations.\n+        \"\"\"\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return path, args, kwargs\n+\n     def __init__(self, *expressions, **extra):\n         if not expressions:\n             raise ValueError('%s requires at least one expression.' % self.__class__.__name__)\n@@ -936,6 +973,15 @@ class ExpressionList(Func):\n class OrderByList(Func):\n     template = 'ORDER BY %(expressions)s'\n \n+    def deconstruct(self):\n+        \"\"\"\n+        Deconstruct the expression into a serializable form for migrations.\n+        \"\"\"\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return path, args, kwargs\n+\n     def __init__(self, *expressions, **extra):\n         expressions = (\n             (\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.%s' % self.__class__.__name__\n+        args = self.args\n+        kwargs = self.kwargs\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
