{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..a7c3d6e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -603,6 +603,20 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n \n     option_name = \"unique_together\"\n \n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # Filter out single-field unique constraints that might conflict with field's unique=True\n+            old_value = {fields for fields in old_value if len(fields) > 1}\n+            new_value = {fields for fields in new_value if len(fields) > 1}\n+            \n+            alter_together = getattr(schema_editor, \"alter_%s\" % self.option_name)\n+            alter_together(new_model, old_value, new_value)\n+\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            old_value = {fields for fields in old_value if len(fields) > 1}\n+            new_value = {fields for fields in new_value if len(fields) > 1}\n+            alter_together = getattr(schema_editor, 'alter_%s' % self.option_name)\n+            alter_together(new_model, old_value, new_value)", "normalized_occurrence": 2}
