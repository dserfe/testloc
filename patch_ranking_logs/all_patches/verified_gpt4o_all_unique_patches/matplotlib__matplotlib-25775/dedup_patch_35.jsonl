{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..ea5dbb6 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None,\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -150,6 +151,9 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self.set_antialiased(antialiased \n+                             if antialiased is not None \n+                             else mpl.rcParams['text.antialiased'])\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -188,7 +192,22 @@ class Text(Artist):\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n \n-    def update(self, kwargs):\n+    def set_antialiased(self, antialiased):\n+        \"\"\"\n+        Set whether the text should be antialiased.\n+\n+        Parameters\n+        ----------\n+        antialiased : bool\n+        \"\"\"\n+        self._antialiased = bool(antialiased)\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text is antialiased.\n+        \"\"\"\n+        return self._antialiased\n         # docstring inherited\n         kwargs = cbook.normalize_kwargs(kwargs, Text)\n         sentinel = object()  # bbox can be None, so use another sentinel.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..45f189f 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -41,11 +41,12 @@ class Text(Artist):\n     _charsize_cache = dict()\n     def __repr__(self):\n         return f'Text({self._x}, {self._y}, {self._text!r})'\n-    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, **kwargs):\n+    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, antialiased=None, **kwargs):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self.set_antialiased(antialiased if antialiased is not None else mpl.rcParams['text.antialiased'])\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n@@ -65,7 +66,11 @@ class Text(Artist):\n             linespacing = 1.2\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n-    def update(self, kwargs):\n+    def set_antialiased(self, antialiased):\n+        self._antialiased = bool(antialiased)\n+        self.stale = True\n+    def get_antialiased(self):\n+        return self._antialiased\n         kwargs = cbook.normalize_kwargs(kwargs, Text)\n         sentinel = object()\n         fontproperties = kwargs.pop('fontproperties', sentinel)\n", "normalized_occurrence": 1}
