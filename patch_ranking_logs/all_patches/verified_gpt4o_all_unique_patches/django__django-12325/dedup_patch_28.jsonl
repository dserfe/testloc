{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..deef1ee 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -193,6 +193,7 @@ class ModelBase(type):\n \n         # Collect the parent links for multi-table inheritance.\n         parent_links = {}\n+        one_to_one_fields = []\n         for base in reversed([new_class] + parents):\n             # Conceptually equivalent to `if base is Model`.\n             if not hasattr(base, '_meta'):\n@@ -200,11 +201,15 @@ class ModelBase(type):\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n+            # Collect OneToOneField instances.\n             for field in base._meta.local_fields:\n                 if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    one_to_one_fields.append((base, field))\n+        \n+        # Resolve parent links after collecting all OneToOneField instances.\n+        for base, field in one_to_one_fields:\n+            related = resolve_relation(new_class, field.remote_field.model)\n+            parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n         inherited_attributes = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..194a482 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -99,6 +99,7 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n         parent_links = {}\n+        one_to_one_fields = []\n         for base in reversed([new_class] + parents):\n             if not hasattr(base, '_meta'):\n                 continue\n@@ -106,8 +107,10 @@ class ModelBase(type):\n                 continue\n             for field in base._meta.local_fields:\n                 if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n+                    one_to_one_fields.append((base, field))\n+        for base, field in one_to_one_fields:\n+            related = resolve_relation(new_class, field.remote_field.model)\n+            parent_links[make_model_tuple(related)] = field\n         inherited_attributes = set()\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n", "normalized_occurrence": 1}
