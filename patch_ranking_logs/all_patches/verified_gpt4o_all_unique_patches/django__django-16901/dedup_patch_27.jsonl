{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..d6bfedd 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -60,9 +60,16 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n \n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            # Ensure behavior is correct for multiple XORs (parity check)\n+            combined_children = self.children + other.children\n+            true_counts = sum(1 for child in combined_children if isinstance(child, Q) and child.connector == self.XOR)\n+            is_odd = true_counts % 2 == 1\n+            return Q(is_odd)\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..d27263c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,9 +27,15 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            combined_children = self.children + other.children\n+            true_counts = sum((1 for child in combined_children if isinstance(child, Q) and child.connector == self.XOR))\n+            is_odd = true_counts % 2 == 1\n+            return Q(is_odd)\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
