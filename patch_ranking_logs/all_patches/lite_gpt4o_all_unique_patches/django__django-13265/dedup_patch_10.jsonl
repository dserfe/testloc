{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..7e41f81 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1207,14 +1207,13 @@ class MigrationAutodetector:\n                         True,\n                     ))\n                 # Actually generate the operation\n-                self.add_operation(\n-                    app_label,\n-                    operations.AlterOrderWithRespectTo(\n-                        name=model_name,\n-                        order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n-                    ),\n-                    dependencies=dependencies,\n+                # Add AlterOrderWithRespectTo before adding indexes\n+                alter_order_with_respect_to_op = operations.AlterOrderWithRespectTo(\n+                    name=model_name,\n+                    order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n                 )\n+                self.add_operation(app_label, alter_order_with_respect_to_op, dependencies=dependencies)\n+                self._pending_operations[app_label].append(alter_order_with_respect_to_op)\n \n     def generate_altered_managers(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..fe15a88 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -582,7 +582,9 @@ class MigrationAutodetector:\n                 dependencies = []\n                 if new_model_state.options.get('order_with_respect_to'):\n                     dependencies.append((app_label, model_name, new_model_state.options['order_with_respect_to'], True))\n-                self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to')), dependencies=dependencies)\n+                alter_order_with_respect_to_op = operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to'))\n+                self.add_operation(app_label, alter_order_with_respect_to_op, dependencies=dependencies)\n+                self._pending_operations[app_label].append(alter_order_with_respect_to_op)\n     def generate_altered_managers(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n", "normalized_occurrence": 1}
