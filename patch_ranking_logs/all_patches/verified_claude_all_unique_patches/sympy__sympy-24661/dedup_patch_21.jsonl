{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..681c430 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1091,6 +1091,14 @@ def evaluateFalse(s: str):\n     \"\"\"\n     Replaces operators with the SymPy equivalent and sets evaluate=False.\n     \"\"\"\n+    # Add evaluate=False to all function calls including relationals\n+    s = s.replace('<', 'Lt(')\n+    s = s.replace('<=', 'Le(')\n+    s = s.replace('>', 'Gt(')\n+    s = s.replace('>=', 'Ge(')\n+    s = s.replace('==', 'Eq(')\n+    s = s.replace('!=', 'Ne(')\n+    \n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     # node is a Module, we want an Expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..aa916c8 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -522,6 +522,12 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n             local_dict[i] = null\n         raise e from ValueError(f'Error from parse_expr with transformed code: {code!r}')\n def evaluateFalse(s: str):\n+    s = s.replace('<', 'Lt(')\n+    s = s.replace('<=', 'Le(')\n+    s = s.replace('>', 'Gt(')\n+    s = s.replace('>=', 'Ge(')\n+    s = s.replace('==', 'Eq(')\n+    s = s.replace('!=', 'Ne(')\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n", "normalized_occurrence": 1}
