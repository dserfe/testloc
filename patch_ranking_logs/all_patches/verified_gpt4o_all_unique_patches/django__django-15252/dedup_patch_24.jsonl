{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..af952ec 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -58,11 +58,11 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n-        # If the table's there, that's fine - we've never changed its schema\n-        # in the codebase.\n+        # Check if the router allows migrations for this connection\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         if self.has_table():\n             return\n-        # Make the table\n         try:\n             with self.connection.schema_editor() as editor:\n                 editor.create_model(self.Migration)\n@@ -93,4 +93,4 @@ class MigrationRecorder:\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..f023495 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -30,6 +30,8 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n     def ensure_schema(self):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         if self.has_table():\n             return\n         try:\n", "normalized_occurrence": 4}
