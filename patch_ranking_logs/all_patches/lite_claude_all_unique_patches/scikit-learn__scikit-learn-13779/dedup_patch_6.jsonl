{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..c2295e9 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -92,12 +92,14 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n                 delayed(_parallel_fit_estimator)(clone(clf), X, y,\n-                                                 sample_weight=sample_weight)\n+                                               sample_weight=sample_weight)\n                 for clf in clfs if clf is not None)\n \n         self.named_estimators_ = Bunch()\n-        for k, e in zip(self.estimators, self.estimators_):\n-            self.named_estimators_[k[0]] = e\n+        est_iter = iter(self.estimators_)\n+        for name, est in self.estimators:\n+            if est is not None:\n+                self.named_estimators_[name] = next(est_iter)\n         return self\n \n     def set_params(self, **params):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..c9ba959 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -44,8 +44,10 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n             raise ValueError('All estimators are None. At least one is required!')\n         self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clone(clf), X, y, sample_weight=sample_weight) for clf in clfs if clf is not None))\n         self.named_estimators_ = Bunch()\n-        for k, e in zip(self.estimators, self.estimators_):\n-            self.named_estimators_[k[0]] = e\n+        est_iter = iter(self.estimators_)\n+        for name, est in self.estimators:\n+            if est is not None:\n+                self.named_estimators_[name] = next(est_iter)\n         return self\n     def set_params(self, **params):\n         return self._set_params('estimators', **params)\n", "normalized_occurrence": 1}
