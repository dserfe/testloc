{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20322", "model_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex 3bfc4b1..f340905 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -376,6 +376,24 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False,\n     if evaluate is None:\n         evaluate = global_parameters.evaluate\n \n+    if evaluate is False:\n+        from sympy.parsing.sympy_parser import (parse_expr, standard_transformations)\n+        from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n+        from sympy.parsing.sympy_parser import rationalize as t_rationalize\n+\n+        transformations = standard_transformations\n+\n+        if rational:\n+            transformations += (t_rationalize,)\n+        if convert_xor:\n+            transformations += (t_convert_xor,)\n+\n+        try:\n+            expr = parse_expr(str(a).replace('\\n', ''), local_dict=locals, transformations=transformations, evaluate=evaluate)\n+            return expr\n+        except (TokenError, SyntaxError) as exc:\n+            raise SympifyError('could not parse %r' % a, exc)\n+\n     # Support for basic numpy datatypes\n     if _is_numpy_instance(a):\n         import numpy as np\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/sympify.py b/sympy/core/sympify.py\nindex d4b8b6a..3cd0469 100644\n--- a/sympy/core/sympify.py\n+++ b/sympy/core/sympify.py\n@@ -61,6 +61,20 @@ def sympify(a, locals=None, convert_xor=True, strict=False, rational=False, eval\n             return a\n     if evaluate is None:\n         evaluate = global_parameters.evaluate\n+    if evaluate is False:\n+        from sympy.parsing.sympy_parser import parse_expr, standard_transformations\n+        from sympy.parsing.sympy_parser import convert_xor as t_convert_xor\n+        from sympy.parsing.sympy_parser import rationalize as t_rationalize\n+        transformations = standard_transformations\n+        if rational:\n+            transformations += (t_rationalize,)\n+        if convert_xor:\n+            transformations += (t_convert_xor,)\n+        try:\n+            expr = parse_expr(str(a).replace('\\n', ''), local_dict=locals, transformations=transformations, evaluate=evaluate)\n+            return expr\n+        except (TokenError, SyntaxError) as exc:\n+            raise SympifyError('could not parse %r' % a, exc)\n     if _is_numpy_instance(a):\n         import numpy as np\n         if np.isscalar(a):\n", "normalized_occurrence": 1}
