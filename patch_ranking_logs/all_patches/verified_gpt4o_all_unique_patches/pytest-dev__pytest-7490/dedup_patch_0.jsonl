{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 1ea0522..166729c 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -270,17 +270,24 @@ class Node(metaclass=NodeMeta):\n         \"\"\"\n         from _pytest.mark import MARK_GEN\n \n+        from _pytest.mark import Mark\n+\n         if isinstance(marker, MarkDecorator):\n             marker_ = marker\n         elif isinstance(marker, str):\n             marker_ = getattr(MARK_GEN, marker)\n         else:\n             raise ValueError(\"is not a string or pytest.mark.* Marker\")\n+        \n         self.keywords[marker_.name] = marker_\n         if append:\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        \n+        # Handle xfail markers specifically\n+        if marker_.name == \"xfail\":\n+            self.add_marker(Mark(name=\"skip\", args=marker_.mark.args, kwargs=marker_.mark.kwargs), append)\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 8a79019..6b621a4 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -202,6 +202,7 @@ class Node(metaclass=NodeMeta):\n             if ``False`` insert at position ``0``.\n         \"\"\"\n         from _pytest.mark import MARK_GEN\n+        from _pytest.mark import Mark\n         if isinstance(marker, MarkDecorator):\n             marker_ = marker\n         elif isinstance(marker, str):\n@@ -213,6 +214,8 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        if marker_.name == 'xfail':\n+            self.add_marker(Mark(name='skip', args=marker_.mark.args, kwargs=marker_.mark.kwargs), append)\n \n     def iter_markers(self, name: Optional[str]=None) -> Iterator[Mark]:\n         \"\"\"\n", "normalized_occurrence": 1}
