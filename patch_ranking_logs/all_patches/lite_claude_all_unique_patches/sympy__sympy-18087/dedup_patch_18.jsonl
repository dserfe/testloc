{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 73bbc98..955eb7b 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -1073,6 +1073,9 @@ def futrig(e, **kwargs):\n     will be simplified, but this can be disabled by setting\n     ``hyper=False``.\n \n+    For expressions containing sqrt(sin(x)**2), simplification to sin(x)\n+    will only be performed if x is known to be real.\n+\n     Examples\n     ========\n \n@@ -1086,6 +1089,8 @@ def futrig(e, **kwargs):\n     cosh(x)\n \n     \"\"\"\n+    from sympy.assumptions.ask import ask, Q\n+    from sympy.core import Symbol\n     from sympy.simplify.fu import hyper_as_trig\n     from sympy.simplify.simplify import bottom_up\n \n@@ -1116,6 +1121,14 @@ def _futrig(e, **kwargs):\n         TR1, TR2, TR3, TR2i, TR10, L, TR10i,\n         TR8, TR6, TR15, TR16, TR111, TR5, TRmorrie, TR11, TR14, TR22,\n         TR12)\n+    from sympy.core import Symbol\n+\n+    # Check for sqrt(sin(x)**2) pattern and only simplify if x is real\n+    if e.is_Pow and e.exp == S.Half and e.base.is_Pow and e.base.exp == 2:\n+        if isinstance(e.base.base, sin):\n+            arg = e.base.base.args[0]\n+            if isinstance(arg, Symbol) and not ask(Q.real(arg)):\n+                return e  # Don't simplify for non-real arguments\n     from sympy.core.compatibility import _nodes\n \n     if not e.has(TrigonometricFunction):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex fb82ea6..85d62b8 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -476,6 +476,8 @@ def __trigsimp(expr, deep=False):\n         pass\n     return expr\n def futrig(e, **kwargs):\n+    from sympy.assumptions.ask import ask, Q\n+    from sympy.core import Symbol\n     from sympy.simplify.fu import hyper_as_trig\n     from sympy.simplify.simplify import bottom_up\n     e = sympify(e)\n@@ -493,6 +495,12 @@ def futrig(e, **kwargs):\n     return e\n def _futrig(e, **kwargs):\n     from sympy.simplify.fu import TR1, TR2, TR3, TR2i, TR10, L, TR10i, TR8, TR6, TR15, TR16, TR111, TR5, TRmorrie, TR11, TR14, TR22, TR12\n+    from sympy.core import Symbol\n+    if e.is_Pow and e.exp == S.Half and e.base.is_Pow and (e.base.exp == 2):\n+        if isinstance(e.base.base, sin):\n+            arg = e.base.base.args[0]\n+            if isinstance(arg, Symbol) and (not ask(Q.real(arg))):\n+                return e\n     from sympy.core.compatibility import _nodes\n     if not e.has(TrigonometricFunction):\n         return e\n", "normalized_occurrence": 1}
