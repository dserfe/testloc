{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex e2866af..a453e78 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -1101,11 +1101,12 @@ class Colorbar:\n             b = np.hstack((b, b[-1] + 1))\n \n         # transform from 0-1 to vmin-vmax:\n-        if not self.norm.scaled():\n+        if not self.norm.scaled() and self.norm.vmin is None and self.norm.vmax is None:\n             self.norm.vmin = 0\n             self.norm.vmax = 1\n-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n-            self.norm.vmin, self.norm.vmax, expander=0.1)\n+        if self.norm.vmin is not None and self.norm.vmax is not None:\n+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n+                self.norm.vmin, self.norm.vmax, expander=0.1)\n         if (not isinstance(self.norm, colors.BoundaryNorm) and\n                 (self.boundaries is None)):\n             b = self.norm.inverse(b)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 0f47201..8aff838 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -490,10 +490,11 @@ class Colorbar:\n             b = np.hstack((b[0] - 1, b))\n         if self._extend_upper():\n             b = np.hstack((b, b[-1] + 1))\n-        if not self.norm.scaled():\n+        if not self.norm.scaled() and self.norm.vmin is None and (self.norm.vmax is None):\n             self.norm.vmin = 0\n             self.norm.vmax = 1\n-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n+        if self.norm.vmin is not None and self.norm.vmax is not None:\n+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n         if not isinstance(self.norm, colors.BoundaryNorm) and self.boundaries is None:\n             b = self.norm.inverse(b)\n         self._boundaries = np.asarray(b, dtype=float)\n", "normalized_occurrence": 1}
