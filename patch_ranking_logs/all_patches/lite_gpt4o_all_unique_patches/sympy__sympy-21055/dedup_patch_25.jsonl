{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..d6f2261 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -55,6 +56,8 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n+    if name == \"arg\" and ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n         return expr\n@@ -66,6 +69,23 @@ def refine(expr, assumptions=True):\n     return refine(new_expr, assumptions)\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg\n+    >>> from sympy.abc import x\n+    >>> refine(arg(x), Q.positive(x))\n+    0\n+\n+    \"\"\"\n+    if ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    return expr\n+\n def refine_abs(expr, assumptions):\n     \"\"\"\n     Handler for the absolute value.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..43ae290 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -13,6 +13,8 @@ def refine(expr, assumptions=True):\n         if ref_expr is not None:\n             return ref_expr\n     name = expr.__class__.__name__\n+    if name == 'arg' and ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n         return expr\n@@ -22,6 +24,10 @@ def refine(expr, assumptions=True):\n     if not isinstance(new_expr, Expr):\n         return new_expr\n     return refine(new_expr, assumptions)\n+def refine_arg(expr, assumptions):\n+    if ask(Q.positive(expr.args[0]), assumptions):\n+        return S.Zero\n+    return expr\n def refine_abs(expr, assumptions):\n     from sympy.core.logic import fuzzy_not\n     from sympy import Abs\n", "normalized_occurrence": 1}
