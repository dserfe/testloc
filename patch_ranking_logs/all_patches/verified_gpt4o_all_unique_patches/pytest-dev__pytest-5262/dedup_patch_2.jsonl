{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..157b4d1 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -425,9 +425,10 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n class EncodedFile(object):\n     errors = \"strict\"  # possibly needed by py3 code (issue555)\n \n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode='w'):\n         self.buffer = buffer\n         self.encoding = encoding\n+        self._mode = mode\n \n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n@@ -443,8 +444,9 @@ class EncodedFile(object):\n         self.write(data)\n \n     @property\n-    def name(self):\n-        \"\"\"Ensure that file.name is a string.\"\"\"\n+    def mode(self):\n+        \"\"\"Ensure that mode does not include 'b' for binary.\"\"\"\n+        return self._mode\n         return repr(self.buffer)\n \n     def __getattr__(self, name):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..6c3784d 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -247,9 +247,10 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n     return EncodedFile(f, encoding or default_encoding)\n class EncodedFile(object):\n     errors = 'strict'\n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode='w'):\n         self.buffer = buffer\n         self.encoding = encoding\n+        self._mode = mode\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n@@ -260,7 +261,8 @@ class EncodedFile(object):\n         data = ''.join(linelist)\n         self.write(data)\n     @property\n-    def name(self):\n+    def mode(self):\n+        return self._mode\n         return repr(self.buffer)\n     def __getattr__(self, name):\n         return getattr(object.__getattribute__(self, 'buffer'), name)\n", "normalized_occurrence": 1}
