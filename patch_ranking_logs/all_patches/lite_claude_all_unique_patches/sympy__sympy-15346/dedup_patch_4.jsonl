{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex d9ef12f..7949c29 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -543,6 +543,11 @@ class cos(TrigonometricFunction):\n                 # preserves the information that sin(oo) is between\n                 # -1 and 1, where S.NaN does not do that.\n                 return AccumBounds(-1, 1)\n+            elif arg.is_Rational:\n+                # For rational numbers, try to simplify using _eval_rewrite_as_sqrt\n+                rewritten = cls(arg)._eval_rewrite_as_sqrt(arg)\n+                if rewritten is not None:\n+                    return rewritten\n \n         if arg is S.ComplexInfinity:\n             return S.NaN\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 9f9dff8..a56a7bc 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -317,6 +317,10 @@ class cos(TrigonometricFunction):\n                 return S.One\n             elif arg is S.Infinity or arg is S.NegativeInfinity:\n                 return AccumBounds(-1, 1)\n+            elif arg.is_Rational:\n+                rewritten = cls(arg)._eval_rewrite_as_sqrt(arg)\n+                if rewritten is not None:\n+                    return rewritten\n         if arg is S.ComplexInfinity:\n             return S.NaN\n         if isinstance(arg, AccumBounds):\n", "normalized_occurrence": 1}
