{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..f425fbe 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,22 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy import Piecewise\n+        # For each block, we need a condition and the corresponding entry\n+        row_offset = 0\n+        pieces = []\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                # Condition: index falls within this block's range\n+                cond = ((row_offset <= i) & (i < row_offset + numrows) &\n+                       (col_offset <= j) & (j < col_offset + numcols))\n+                # Entry: use shifted indices within the block\n+                entry = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                pieces.append((entry, cond))\n+                col_offset += numcols\n+            row_offset += numrows\n+        return Piecewise(*pieces)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..899f1fd 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,18 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n+        row_offset = 0\n+        pieces = []\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                cond = (row_offset <= i) & (i < row_offset + numrows) & (col_offset <= j) & (j < col_offset + numcols)\n+                entry = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                pieces.append((entry, cond))\n+                col_offset += numcols\n+            row_offset += numrows\n+        return Piecewise(*pieces)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
