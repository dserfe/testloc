{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..08812a5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -663,6 +663,12 @@ class Documenter:\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n+        def is_annotation_only_member(name: str, obj: Any) -> bool:\n+            if inspect.isclass(self.object):\n+                for cls in self.object.__mro__[1:]:  # Skip the current class\n+                    if name in getattr(cls, '__annotations__', {}):\n+                        return True\n+            return False\n         \"\"\"Filter the given member list.\n \n         Members are skipped if\n@@ -768,7 +774,7 @@ class Documenter:\n                     # keep documented attributes\n                     keep = True\n                 isattr = True\n-            elif want_all and isprivate:\n+            elif want_all and (isprivate or is_annotation_only_member(membername, member)):\n                 if has_doc or self.options.undoc_members:\n                     if self.options.private_members is None:\n                         keep = False\n@@ -783,7 +789,8 @@ class Documenter:\n                         is_filtered_inherited_member(membername, obj)):\n                     keep = False\n                 else:\n-                    # ignore undocumented members if :undoc-members: is not given\n+                    # ignore undocumented members if :undoc-members: is not given,\n+                    # except for annotation-only members.\n                     keep = has_doc or self.options.undoc_members\n \n             if isinstance(obj, ObjectMember) and obj.skipped:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..2566ec0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -345,6 +345,13 @@ class Documenter:\n         else:\n             return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n+        def is_annotation_only_member(name: str, obj: Any) -> bool:\n+            if inspect.isclass(self.object):\n+                for cls in self.object.__mro__[1:]:\n+                    if name in getattr(cls, '__annotations__', {}):\n+                        return True\n+            return False\n+        'Filter the given member list.\\n\\n        Members are skipped if\\n\\n        - they are private (except if given explicitly or the private-members\\n          option is set)\\n        - they are special methods (except if given explicitly or the\\n          special-members option is set)\\n        - they are undocumented (except if the undoc-members option is set)\\n\\n        The user can override the skipping decision by connecting to the\\n        ``autodoc-skip-member`` event.\\n        '\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n                 for cls in self.object.__mro__:\n@@ -411,7 +418,7 @@ class Documenter:\n                 else:\n                     keep = True\n                 isattr = True\n-            elif want_all and isprivate:\n+            elif want_all and (isprivate or is_annotation_only_member(membername, member)):\n                 if has_doc or self.options.undoc_members:\n                     if self.options.private_members is None:\n                         keep = False\n", "normalized_occurrence": 1}
