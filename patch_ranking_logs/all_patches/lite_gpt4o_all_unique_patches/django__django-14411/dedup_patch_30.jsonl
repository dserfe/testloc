{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..cf45904 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -307,14 +307,17 @@ def _get_non_gfk_field(opts, name):\n     return field\n \n \n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, widget=None):\n     \"\"\"\n     Return a sensible label for a field name. The name can be a callable,\n     property (but not created with @property decorator), or the name of an\n     object's attribute, as well as a model field. If return_attr is True, also\n     return the resolved attribute (which could be a callable). This will be\n     None if (and only if) the name refers to a field.\n+    \n+    If the widget is not labelable, the 'for' attribute will not be added.\n     \"\"\"\n+    is_labelable = not widget or getattr(widget, 'is_labelable', True)\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n@@ -362,9 +365,9 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         attr = name\n \n     if return_attr:\n-        return (label, attr)\n+        return (label, attr, is_labelable)\n     else:\n-        return label\n+        return label, is_labelable\n \n \n def help_text_for_field(name, model):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..c1c0855 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -178,7 +178,8 @@ def _get_non_gfk_field(opts, name):\n     if field.is_relation and (not field.many_to_many) and hasattr(field, 'attname') and (field.attname == name):\n         raise FieldIsAForeignKeyColumnName()\n     return field\n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, widget=None):\n+    is_labelable = not widget or getattr(widget, 'is_labelable', True)\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n@@ -221,9 +222,9 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         label = pretty_name(name)\n         attr = name\n     if return_attr:\n-        return (label, attr)\n+        return (label, attr, is_labelable)\n     else:\n-        return label\n+        return (label, is_labelable)\n def help_text_for_field(name, model):\n     help_text = ''\n     try:\n", "normalized_occurrence": 1}
