{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..17c5197 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -130,15 +130,24 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. This parameter is required when skipping\n+        an entire module, for example when the module contains syntax only available\n+        in newer Python versions::\n+\n+            if sys.version_info < (3, 8):\n+                skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+            # imports and test definitions follow...\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n-        to skip a doctest statically.\n+        While :ref:`pytest.mark.skipif ref` markers are generally preferred for\n+        skipping individual tests, they may not be sufficient when the entire\n+        module contains incompatible syntax or when the module-level imports\n+        would fail. In such cases, use ``skip()`` with ``allow_module_level=True``\n+        before any imports that could fail.\n+\n+        For doctest skipping, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_).\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..cdf7192 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -88,15 +88,24 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n \n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. Defaults to False. This parameter is required when skipping\n+        an entire module, for example when the module contains syntax only available\n+        in newer Python versions::\n+\n+            if sys.version_info < (3, 8):\n+                skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+            # imports and test definitions follow...\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n-        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n-        to skip a doctest statically.\n+        While :ref:`pytest.mark.skipif ref` markers are generally preferred for\n+        skipping individual tests, they may not be sufficient when the entire\n+        module contains incompatible syntax or when the module-level imports\n+        would fail. In such cases, use ``skip()`` with ``allow_module_level=True``\n+        before any imports that could fail.\n+\n+        For doctest skipping, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_).\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n", "normalized_occurrence": 1}
