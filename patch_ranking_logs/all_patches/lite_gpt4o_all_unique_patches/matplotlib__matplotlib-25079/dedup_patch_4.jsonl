{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..1750665 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -584,6 +584,8 @@ class ScalarMappable:\n \n         self.cmap = _ensure_cmap(cmap)\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.changed()  # Things are not set up properly yet.\n \n     @property\n@@ -612,11 +614,16 @@ class ScalarMappable:\n         in_init = self.norm is None\n         # Remove the current callback and connect to the new one\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n+        self.set_clim(norm.vmin, norm.vmax)\n         self._id_norm = self.norm.callbacks.connect('changed',\n                                                     self.changed)\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.changed()\n \n     def set_norm(self, norm):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..c9c3dd5 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -170,6 +170,8 @@ class ScalarMappable:\n         in_init = self.cmap is None\n         self.cmap = _ensure_cmap(cmap)\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.changed()\n     @property\n     def norm(self):\n@@ -189,10 +191,15 @@ class ScalarMappable:\n             return\n         in_init = self.norm is None\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n+        self.set_clim(norm.vmin, norm.vmax)\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n+            if self.colorbar:\n+                self.colorbar.update_normal(self)\n             self.changed()\n     def set_norm(self, norm):\n         self.norm = norm\n", "normalized_occurrence": 1}
