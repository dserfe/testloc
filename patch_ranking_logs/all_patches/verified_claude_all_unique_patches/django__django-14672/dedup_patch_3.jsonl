{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14672", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 7ae0a4d..94a2370 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -277,6 +277,9 @@ class OneToOneRel(ManyToOneRel):\n         self.multiple = False\n \n \n+from django.db.models.query_utils import make_hashable\n+\n+\n class ManyToManyRel(ForeignObjectRel):\n     \"\"\"\n     Used by ManyToManyField to store information about the relation.\n@@ -310,7 +313,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n@@ -327,4 +330,4 @@ class ManyToManyRel(ForeignObjectRel):\n                 rel = getattr(field, 'remote_field', None)\n                 if rel and rel.model == self.model:\n                     break\n-        return field.foreign_related_fields[0]\n+        return field.foreign_related_fields[0]\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex 32fd814..9ee900a 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -119,6 +119,7 @@ class OneToOneRel(ManyToOneRel):\n     def __init__(self, field, to, field_name, related_name=None, related_query_name=None, limit_choices_to=None, parent_link=False, on_delete=None):\n         super().__init__(field, to, field_name, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, parent_link=parent_link, on_delete=on_delete)\n         self.multiple = False\n+from django.db.models.query_utils import make_hashable\n class ManyToManyRel(ForeignObjectRel):\n     def __init__(self, field, to, related_name=None, related_query_name=None, limit_choices_to=None, symmetrical=True, through=None, through_fields=None, db_constraint=True):\n         super().__init__(field, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to)\n@@ -132,7 +133,7 @@ class ManyToManyRel(ForeignObjectRel):\n         self.db_constraint = db_constraint\n     @property\n     def identity(self):\n-        return super().identity + (self.through, self.through_fields, self.db_constraint)\n+        return super().identity + (self.through, make_hashable(self.through_fields), self.db_constraint)\n     def get_related_field(self):\n         opts = self.through._meta\n         if self.through_fields:\n", "normalized_occurrence": 2}
