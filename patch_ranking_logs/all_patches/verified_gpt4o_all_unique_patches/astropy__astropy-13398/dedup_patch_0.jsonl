{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13398", "model_patch": "diff --git a/astropy/coordinates/builtin_frames/altaz.py b/astropy/coordinates/builtin_frames/altaz.py\nindex fce6324..e812840 100644\n--- a/astropy/coordinates/builtin_frames/altaz.py\n+++ b/astropy/coordinates/builtin_frames/altaz.py\n@@ -72,6 +72,46 @@ doc_footer = \"\"\"\n     \"\"\"\n \n \n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+def itrs_to_altaz(itrs_coo, altaz_frame):\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = (itrs_coo.cartesian\n+                             - altaz_frame.location.get_itrs().cartesian)\n+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(altaz_frame))\n+    return altaz_frame.realize_frame(rep)\n+\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+def altaz_to_itrs(altaz_coo, itrs_frame):\n+    # form the Topocentric ITRS position\n+    topocentric_itrs_repr = altaz_coo.cartesian.transform(matrix_transpose(\n+                            itrs_to_observed_mat(altaz_coo)))\n+    # form the Geocentric ITRS position\n+    rep = topocentric_itrs_repr + altaz_coo.location.get_itrs().cartesian\n+    return itrs_frame.realize_frame(rep)\n+\n+def itrs_to_observed_mat(observed_frame):\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+    elong = lon.to_value(u.radian)\n+\n+    if isinstance(observed_frame, AltAz):\n+        # form ITRS to AltAz matrix\n+        elat = lat.to_value(u.radian)\n+        # AltAz frame is left handed\n+        minus_x = np.eye(3)\n+        minus_x[0][0] = -1.0\n+        mat = (minus_x\n+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+\n+    else:\n+        # form ITRS to HADec matrix\n+        # HADec frame is left handed\n+        minus_y = np.eye(3)\n+        minus_y[1][1] = -1.0\n+        mat = (minus_y\n+               @ rotation_matrix(elong, 'z', unit=u.radian))\n+    return mat\n+\n @format_doc(base_doc, components=doc_components, footer=doc_footer)\n class AltAz(BaseCoordinateFrame):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/astropy/coordinates/builtin_frames/altaz.py\n+++ b/astropy/coordinates/builtin_frames/altaz.py\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)\n+def itrs_to_altaz(itrs_coo, altaz_frame):\n+    topocentric_itrs_repr = itrs_coo.cartesian - altaz_frame.location.get_itrs().cartesian\n+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(altaz_frame))\n+    return altaz_frame.realize_frame(rep)\n+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)\n+def altaz_to_itrs(altaz_coo, itrs_frame):\n+    topocentric_itrs_repr = altaz_coo.cartesian.transform(matrix_transpose(itrs_to_observed_mat(altaz_coo)))\n+    rep = topocentric_itrs_repr + altaz_coo.location.get_itrs().cartesian\n+    return itrs_frame.realize_frame(rep)\n+def itrs_to_observed_mat(observed_frame):\n+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')\n+    elong = lon.to_value(u.radian)\n+    if isinstance(observed_frame, AltAz):\n+        elat = lat.to_value(u.radian)\n+        minus_x = np.eye(3)\n+        minus_x[0][0] = -1.0\n+        mat = minus_x @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian) @ rotation_matrix(elong, 'z', unit=u.radian)\n+    else:\n+        minus_y = np.eye(3)\n+        minus_y[1][1] = -1.0\n+        mat = minus_y @ rotation_matrix(elong, 'z', unit=u.radian)\n+    return mat", "normalized_occurrence": 1}
