{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11400", "model_patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex 51b3fb2..697b836 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -195,9 +195,12 @@ class RelatedFieldListFilter(FieldListFilter):\n \n     def field_choices(self, field, request, model_admin):\n         ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        related_model = field.remote_field.model\n+        related_admin = model_admin.admin_site._registry.get(related_model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = related_model._meta.ordering or ()\n         return field.get_choices(include_blank=False, ordering=ordering)\n \n     def choices(self, changelist):\n@@ -419,4 +422,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n+        related_model = field.remote_field.model\n+        related_admin = model_admin.admin_site._registry.get(related_model)\n+        ordering = ()\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = related_model._meta.ordering or ()\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/filters.py b/django/contrib/admin/filters.py\nindex c45609e..57a20ad 100644\n--- a/django/contrib/admin/filters.py\n+++ b/django/contrib/admin/filters.py\n@@ -104,9 +104,12 @@ class RelatedFieldListFilter(FieldListFilter):\n         return [self.lookup_kwarg, self.lookup_kwarg_isnull]\n     def field_choices(self, field, request, model_admin):\n         ordering = ()\n-        related_admin = model_admin.admin_site._registry.get(field.remote_field.model)\n+        related_model = field.remote_field.model\n+        related_admin = model_admin.admin_site._registry.get(related_model)\n         if related_admin is not None:\n             ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = related_model._meta.ordering or ()\n         return field.get_choices(include_blank=False, ordering=ordering)\n     def choices(self, changelist):\n         yield {'selected': self.lookup_val is None and (not self.lookup_val_isnull), 'query_string': changelist.get_query_string(remove=[self.lookup_kwarg, self.lookup_kwarg_isnull]), 'display': _('All')}\n@@ -216,4 +219,11 @@ FieldListFilter.register(lambda f: True, AllValuesFieldListFilter)\n class RelatedOnlyFieldListFilter(RelatedFieldListFilter):\n     def field_choices(self, field, request, model_admin):\n         pk_qs = model_admin.get_queryset(request).distinct().values_list('%s__pk' % self.field_path, flat=True)\n-        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs})\n\\ No newline at end of file\n+        related_model = field.remote_field.model\n+        related_admin = model_admin.admin_site._registry.get(related_model)\n+        ordering = ()\n+        if related_admin is not None:\n+            ordering = related_admin.get_ordering(request)\n+        if not ordering:\n+            ordering = related_model._meta.ordering or ()\n+        return field.get_choices(include_blank=False, limit_choices_to={'pk__in': pk_qs}, ordering=ordering)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
