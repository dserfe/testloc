{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 9149abb..9fdd078 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -568,6 +568,9 @@ class QuerySet(AltersData):\n         \"\"\"\n         if self.query.distinct_fields:\n             raise NotImplementedError(\"aggregate() + distinct(fields) not implemented.\")\n+        self._validate_no_window_functions(\n+            (*args, *kwargs.values()), method_name=\"aggregate\"\n+        )\n         self._validate_values_are_expressions(\n             (*args, *kwargs.values()), method_name=\"aggregate\"\n         )\n@@ -583,6 +586,14 @@ class QuerySet(AltersData):\n \n         return self.query.chain().get_aggregation(self.db, kwargs)\n \n+    def _validate_no_window_functions(self, expressions, *, method_name):\n+        \"\"\"\n+        Helper method to ensure no window functions are used within aggregates.\n+        \"\"\"\n+        for expression in expressions:\n+            if hasattr(expression, 'contains_over_clause') and expression.contains_over_clause:\n+                raise ValueError(f\"Window functions are not allowed in {method_name}().\")\n+                \n     async def aaggregate(self, *args, **kwargs):\n         return await sync_to_async(self.aggregate)(*args, **kwargs)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2540275..2ab9b72 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -299,6 +299,7 @@ class QuerySet(AltersData):\n     def aggregate(self, *args, **kwargs):\n         if self.query.distinct_fields:\n             raise NotImplementedError('aggregate() + distinct(fields) not implemented.')\n+        self._validate_no_window_functions((*args, *kwargs.values()), method_name='aggregate')\n         self._validate_values_are_expressions((*args, *kwargs.values()), method_name='aggregate')\n         for arg in args:\n             try:\n@@ -307,6 +308,10 @@ class QuerySet(AltersData):\n                 raise TypeError('Complex aggregates require an alias')\n             kwargs[arg.default_alias] = arg\n         return self.query.chain().get_aggregation(self.db, kwargs)\n+    def _validate_no_window_functions(self, expressions, *, method_name):\n+        for expression in expressions:\n+            if hasattr(expression, 'contains_over_clause') and expression.contains_over_clause:\n+                raise ValueError(f'Window functions are not allowed in {method_name}().')\n     async def aaggregate(self, *args, **kwargs):\n         return await sync_to_async(self.aggregate)(*args, **kwargs)\n     def count(self):\n", "normalized_occurrence": 1}
