{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..d89a6b0 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1278,13 +1278,12 @@ class PythonDomain(Domain):\n             elif type == 'mod':\n                 # only exact matches allowed for modules\n                 return []\n-            elif classname and classname + '.' + name in self.objects:\n-                newname = classname + '.' + name\n+            if modname and classname and modname + '.' + classname + '.' + name in self.objects:\n+                newname = modname + '.' + classname + '.' + name\n             elif modname and modname + '.' + name in self.objects:\n                 newname = modname + '.' + name\n-            elif modname and classname and \\\n-                    modname + '.' + classname + '.' + name in self.objects:\n-                newname = modname + '.' + classname + '.' + name\n+            elif classname and classname + '.' + name in self.objects:\n+                newname = classname + '.' + name\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "occurrence": 2, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..421e183 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -766,16 +766,17 @@ class PythonDomain(Domain):\n                     else:\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects if oname.endswith(searchname) and self.objects[oname].objtype in objtypes]\n-        elif name in self.objects:\n-            newname = name\n-        elif type == 'mod':\n-            return []\n-        elif classname and classname + '.' + name in self.objects:\n-            newname = classname + '.' + name\n-        elif modname and modname + '.' + name in self.objects:\n-            newname = modname + '.' + name\n-        elif modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n-            newname = modname + '.' + classname + '.' + name\n+        else:\n+            if name in self.objects:\n+                newname = name\n+            elif type == 'mod':\n+                return []\n+            if modname and classname and (modname + '.' + classname + '.' + name in self.objects):\n+                newname = modname + '.' + classname + '.' + name\n+            elif modname and modname + '.' + name in self.objects:\n+                newname = modname + '.' + name\n+            elif classname and classname + '.' + name in self.objects:\n+                newname = classname + '.' + name\n         if newname is not None:\n             matches.append((newname, self.objects[newname]))\n         return matches\n", "normalized_occurrence": 2}
