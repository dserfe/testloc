{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14711", "model_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex 77e79b6..5da578b 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -57,8 +57,11 @@ class Vector(object):\n \n     def __add__(self, other):\n         \"\"\"The add operator for Vector. \"\"\"\n-        other = _check_vector(other)\n-        return Vector(self.args + other.args)\n+        if other == 0:\n+            return self\n+        else:\n+            other = _check_vector(other)\n+            return Vector(self.args + other.args)\n \n     def __and__(self, other):\n         \"\"\"Dot product of two vectors.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/vector/vector.py b/sympy/physics/vector/vector.py\nindex 22f61ec..6ea90d7 100644\n--- a/sympy/physics/vector/vector.py\n+++ b/sympy/physics/vector/vector.py\n@@ -24,8 +24,11 @@ class Vector(object):\n     def __hash__(self):\n         return hash(tuple(self.args))\n     def __add__(self, other):\n-        other = _check_vector(other)\n-        return Vector(self.args + other.args)\n+        if other == 0:\n+            return self\n+        else:\n+            other = _check_vector(other)\n+            return Vector(self.args + other.args)\n     def __and__(self, other):\n         from sympy.physics.vector.dyadic import Dyadic\n         if isinstance(other, Dyadic):\n", "normalized_occurrence": 1}
