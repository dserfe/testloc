{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1e94c70..2cd7743 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -271,7 +271,14 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        if item._store.get(skipped_by_mark_key, True) and rep.skipped and type(rep.longrepr) is tuple:\n+            # skipped by mark.skipif; change the location of the failure\n+            # to point to the item definition, otherwise it will display\n+            # the location of where the skip exception was raised within pytest\n+            _, _, reason = rep.longrepr\n+            filename, line = item.reportinfo()[:2]\n+            assert line is not None\n+            rep.longrepr = str(filename), line + 1, reason\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -311,4 +318,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 5f70c26..7c9334f 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -149,7 +149,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             rep.longrepr = 'Unexpected success'\n         rep.outcome = 'failed'\n     elif item.config.option.runxfail:\n-        pass\n+        if item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n+            _, _, reason = rep.longrepr\n+            filename, line = item.reportinfo()[:2]\n+            assert line is not None\n+            rep.longrepr = (str(filename), line + 1, reason)\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n", "normalized_occurrence": 2}
