{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 92db988..1ae7522 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -234,9 +234,10 @@ class Text(Artist):\n \n     def __getstate__(self):\n         d = super().__getstate__()\n-        # remove the cached _renderer (if it exists)\n+        # remove the cached _renderer and any weakrefs (if they exist)\n         d['_renderer'] = None\n-        return d\n+        # Create a new dict without weakref objects\n+        return {k: v for k, v in d.items() if not isinstance(v, type(weakref.ref(self)))}\n \n     def contains(self, mouseevent):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 489c66c..6d0a704 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -90,7 +90,7 @@ class Text(Artist):\n     def __getstate__(self):\n         d = super().__getstate__()\n         d['_renderer'] = None\n-        return d\n+        return {k: v for k, v in d.items() if not isinstance(v, type(weakref.ref(self)))}\n     def contains(self, mouseevent):\n         inside, info = self._default_contains(mouseevent)\n         if inside is not None:\n", "normalized_occurrence": 1}
