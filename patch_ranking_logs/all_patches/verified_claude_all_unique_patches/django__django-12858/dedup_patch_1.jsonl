{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..0eda7c6 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -14,6 +14,44 @@ def check_all_models(app_configs=None, **kwargs):\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n+    def _is_valid_ordering_reference(field_name, model):\n+        \"\"\"\n+        Check if field_name is a valid ordering reference including lookups.\n+        \"\"\"\n+        # Handle reverse sorting prefix\n+        if field_name.startswith('-'):\n+            field_name = field_name[1:]\n+        \n+        # Split on __ to handle relationships and lookups\n+        parts = field_name.split('__')\n+        current_model = model\n+        \n+        # Traverse through all parts except the last one\n+        for part in parts[:-1]:\n+            try:\n+                field = current_model._meta.get_field(part)\n+                if hasattr(field, 'remote_field') and field.remote_field:\n+                    current_model = field.remote_field.model\n+                else:\n+                    return False\n+            except FieldDoesNotExist:\n+                return False\n+        \n+        # Handle the last part - could be either a field or a lookup\n+        last_part = parts[-1]\n+        try:\n+            field = current_model._meta.get_field(last_part)\n+            return True\n+        except FieldDoesNotExist:\n+            # Check if it's a valid lookup (like 'isnull')\n+            if len(parts) > 1:\n+                try:\n+                    previous_field = current_model._meta.get_field(parts[-2])\n+                    return last_part in previous_field.get_lookups()\n+                except (FieldDoesNotExist, IndexError):\n+                    return False\n+            return False\n+\n     if app_configs is None:\n         models = apps.get_models()\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 50dfeb8..bf57b1c 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -11,6 +11,32 @@ def check_all_models(app_configs=None, **kwargs):\n     indexes = defaultdict(list)\n     constraints = defaultdict(list)\n     errors = []\n+    def _is_valid_ordering_reference(field_name, model):\n+        if field_name.startswith('-'):\n+            field_name = field_name[1:]\n+        parts = field_name.split('__')\n+        current_model = model\n+        for part in parts[:-1]:\n+            try:\n+                field = current_model._meta.get_field(part)\n+                if hasattr(field, 'remote_field') and field.remote_field:\n+                    current_model = field.remote_field.model\n+                else:\n+                    return False\n+            except FieldDoesNotExist:\n+                return False\n+        last_part = parts[-1]\n+        try:\n+            field = current_model._meta.get_field(last_part)\n+            return True\n+        except FieldDoesNotExist:\n+            if len(parts) > 1:\n+                try:\n+                    previous_field = current_model._meta.get_field(parts[-2])\n+                    return last_part in previous_field.get_lookups()\n+                except (FieldDoesNotExist, IndexError):\n+                    return False\n+            return False\n     if app_configs is None:\n         models = apps.get_models()\n     else:\n", "normalized_occurrence": 1}
