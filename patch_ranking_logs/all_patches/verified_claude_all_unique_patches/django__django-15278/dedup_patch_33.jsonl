{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex be6e066..df39a33 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -327,7 +327,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         # Fields with default values cannot by handled by ALTER TABLE ADD\n         # COLUMN statement because DROP DEFAULT is not supported in\n         # ALTER TABLE.\n-        if not field.null or self.effective_default(field) is not None:\n+        # Unique fields also require table rebuild because they can't be added\n+        # via ALTER TABLE on SQLite.\n+        if (\n+            not field.null\n+            or self.effective_default(field) is not None\n+            or field.unique\n+            or (field.one_to_one and not field.remote_field.parent_link)\n+        ):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex fd5121f..fc0b689 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -161,7 +161,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 if isinstance(sql, Statement) and sql.references_table(model._meta.db_table):\n                     self.deferred_sql.remove(sql)\n     def add_field(self, model, field):\n-        if not field.null or self.effective_default(field) is not None:\n+        if not field.null or self.effective_default(field) is not None or field.unique or (field.one_to_one and (not field.remote_field.parent_link)):\n             self._remake_table(model, create_field=field)\n         else:\n             super().add_field(model, field)\n", "normalized_occurrence": 1}
