{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..502df56 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -592,13 +592,24 @@ def drange(dstart, dend, delta):\n \n \n def _wrap_in_tex(text):\n-    p = r'([a-zA-Z]+)'\n-    ret_text = re.sub(p, r'}$\\1$\\\\mathdefault{', text)\n-\n-    # Braces ensure dashes are not spaced like binary operators.\n-    ret_text = '$\\\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+    # Split into components while preserving spaces\n+    parts = re.split(r'(\\s+)', text)\n+    \n+    # Process each part\n+    processed_parts = []\n+    for part in parts:\n+        if part.strip():  # If part contains non-whitespace\n+            # Wrap alphabetic components in mathdefault\n+            p = r'([a-zA-Z]+)'\n+            processed = re.sub(p, r'\\\\mathdefault{\\1}', part)\n+            # Wrap in math mode\n+            processed = f'${processed}$'\n+            processed_parts.append(processed)\n+        else:\n+            # Preserve spacing\n+            processed_parts.append(part)\n+    \n+    return ''.join(processed_parts)\n \n \n ## date tickers and formatters ###\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 71de92e..b36907b 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -139,11 +139,17 @@ def drange(dstart, dend, delta):\n     f2 = date2num(dinterval_end)\n     return np.linspace(f1, f2, num + 1)\n def _wrap_in_tex(text):\n-    p = '([a-zA-Z]+)'\n-    ret_text = re.sub(p, '}$\\\\1$\\\\\\\\mathdefault{', text)\n-    ret_text = '$\\\\mathdefault{' + ret_text.replace('-', '{-}') + '}$'\n-    ret_text = ret_text.replace('$\\\\mathdefault{}$', '')\n-    return ret_text\n+    parts = re.split('(\\\\s+)', text)\n+    processed_parts = []\n+    for part in parts:\n+        if part.strip():\n+            p = '([a-zA-Z]+)'\n+            processed = re.sub(p, '\\\\\\\\mathdefault{\\\\1}', part)\n+            processed = f'${processed}$'\n+            processed_parts.append(processed)\n+        else:\n+            processed_parts.append(part)\n+    return ''.join(processed_parts)\n class DateFormatter(ticker.Formatter):\n     def __init__(self, fmt, tz=None, *, usetex=None):\n         if tz is None:\n", "normalized_occurrence": 1}
