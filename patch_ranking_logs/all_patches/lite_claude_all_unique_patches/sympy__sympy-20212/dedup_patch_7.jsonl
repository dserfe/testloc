{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20212", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0c22eee..bfa84f7 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -297,6 +297,9 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n+            elif b is S.Zero:\n+                if e.is_extended_negative is True and e.is_infinite is True:\n+                    return S.ComplexInfinity\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n@@ -1742,4 +1745,4 @@ power.add((object, object), Pow)\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex a771c39..4cc068f 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -120,6 +120,9 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n+            elif b is S.Zero:\n+                if e.is_extended_negative is True and e.is_infinite is True:\n+                    return S.ComplexInfinity\n             elif e == -1 and (not b):\n                 return S.ComplexInfinity\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n", "normalized_occurrence": 1}
