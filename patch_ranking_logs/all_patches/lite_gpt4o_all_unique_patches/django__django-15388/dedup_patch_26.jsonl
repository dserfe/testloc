{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..c8136e3 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -259,7 +259,7 @@ def trigger_reload(filename):\n \n \n def restart_with_reloader():\n-    new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true'}\n+    new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true', 'DJANGO_WATCH_DIRS': str(BASE_DIR)}\n     args = get_child_arguments()\n     while True:\n         p = subprocess.run(args, env=new_environ, close_fds=False)\n@@ -271,6 +271,10 @@ class BaseReloader:\n     def __init__(self):\n         self.extra_files = set()\n         self.directory_globs = defaultdict(set)\n+        watch_dirs = os.environ.get('DJANGO_WATCH_DIRS')\n+        if watch_dirs:\n+            for d in watch_dirs.split(os.pathsep):\n+                self.watch_dir(d, '**/*')\n         self._stop_condition = threading.Event()\n \n     def watch_dir(self, path, glob):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..e5e1e86 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -159,7 +159,7 @@ def trigger_reload(filename):\n     logger.info('%s changed, reloading.', filename)\n     sys.exit(3)\n def restart_with_reloader():\n-    new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true'}\n+    new_environ = {**os.environ, DJANGO_AUTORELOAD_ENV: 'true', 'DJANGO_WATCH_DIRS': str(BASE_DIR)}\n     args = get_child_arguments()\n     while True:\n         p = subprocess.run(args, env=new_environ, close_fds=False)\n@@ -169,6 +169,10 @@ class BaseReloader:\n     def __init__(self):\n         self.extra_files = set()\n         self.directory_globs = defaultdict(set)\n+        watch_dirs = os.environ.get('DJANGO_WATCH_DIRS')\n+        if watch_dirs:\n+            for d in watch_dirs.split(os.pathsep):\n+                self.watch_dir(d, '**/*')\n         self._stop_condition = threading.Event()\n     def watch_dir(self, path, glob):\n         path = Path(path)\n", "normalized_occurrence": 1}
