{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..5a982d6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -743,7 +743,7 @@ class AssertionRewriter(ast.NodeVisitor):\n \n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return \"PYTEST_DONT_REWRITE\" in docstring\n+        return isinstance(docstring, str) and \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n         \"\"\"Get a new variable.\"\"\"\n", "occurrence": 9, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..b08979f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -399,7 +399,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                     nodes.append(field)\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n-        return 'PYTEST_DONT_REWRITE' in docstring\n+        return isinstance(docstring, str) and 'PYTEST_DONT_REWRITE' in docstring\n     def variable(self) -> str:\n         name = '@py_assert' + str(next(self.variable_counter))\n         self.variables.append(name)\n", "normalized_occurrence": 9}
