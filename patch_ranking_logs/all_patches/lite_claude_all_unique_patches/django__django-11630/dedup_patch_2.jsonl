{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 231b761..0cbceb9 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -1,3 +1,4 @@\n+\n import inspect\n import types\n from collections import defaultdict\n@@ -35,16 +36,25 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n+    # Group models by both table name and database\n+    db_table_models_by_db = defaultdict(lambda: defaultdict(list))\n+    for model in models:\n+        if model._meta.managed and not model._meta.proxy:\n+            db = getattr(model._meta, 'using', 'default')\n+            db_table_models_by_db[db][model._meta.db_table].append(model._meta.label)\n+\n+    # Check for duplicate table names within the same database\n+    for db in db_table_models_by_db:\n+        for db_table, model_labels in db_table_models_by_db[db].items():\n+            if len(model_labels) != 1:\n+                errors.append(\n+                    Error(\n+                        \"db_table '%s' is used by multiple models in database '%s': %s.\"\n+                        % (db_table, db, ', '.join(model_labels)),\n+                        obj=db_table,\n+                        id='models.E028',\n+                    )\n                 )\n-            )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8001d47..e60494c 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -25,9 +25,15 @@ def check_all_models(app_configs=None, **kwargs):\n             indexes[model_index.name].append(model._meta.label)\n         for model_constraint in model._meta.constraints:\n             constraints[model_constraint.name].append(model._meta.label)\n-    for db_table, model_labels in db_table_models.items():\n-        if len(model_labels) != 1:\n-            errors.append(Error(\"db_table '%s' is used by multiple models: %s.\" % (db_table, ', '.join(db_table_models[db_table])), obj=db_table, id='models.E028'))\n+    db_table_models_by_db = defaultdict(lambda: defaultdict(list))\n+    for model in models:\n+        if model._meta.managed and (not model._meta.proxy):\n+            db = getattr(model._meta, 'using', 'default')\n+            db_table_models_by_db[db][model._meta.db_table].append(model._meta.label)\n+    for db in db_table_models_by_db:\n+        for db_table, model_labels in db_table_models_by_db[db].items():\n+            if len(model_labels) != 1:\n+                errors.append(Error(\"db_table '%s' is used by multiple models in database '%s': %s.\" % (db_table, db, ', '.join(model_labels)), obj=db_table, id='models.E028'))\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n", "normalized_occurrence": 1}
