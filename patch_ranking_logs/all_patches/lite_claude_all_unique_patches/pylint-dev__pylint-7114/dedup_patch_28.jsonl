{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..01daa3f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,14 +588,18 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n-                        continue\n+            if os.path.isdir(something):\n+                # Check if directory is a package (has __init__.py)\n+                has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n+                # Check if directory has a module with same name (e.g., dir/dir.py)\n+                has_same_name_module = os.path.isfile(os.path.join(something, os.path.basename(something) + \".py\"))\n+                \n+                if not has_init and not has_same_name_module:\n+                    skip_subtrees: list[str] = []\n+                    for root, _, files in os.walk(something):\n+                        if any(root.startswith(s) for s in skip_subtrees):\n+                            # Skip subtree of already discovered package.\n+                            continue\n \n                     if _is_ignored_file(\n                         root,\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..e3c63a3 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -225,11 +225,14 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 self._msgs_state[msg.msgid] = False\n     def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any((root.startswith(s) for s in skip_subtrees)):\n-                        continue\n+            if os.path.isdir(something):\n+                has_init = os.path.isfile(os.path.join(something, '__init__.py'))\n+                has_same_name_module = os.path.isfile(os.path.join(something, os.path.basename(something) + '.py'))\n+                if not has_init and (not has_same_name_module):\n+                    skip_subtrees: list[str] = []\n+                    for root, _, files in os.walk(something):\n+                        if any((root.startswith(s) for s in skip_subtrees)):\n+                            continue\n                     if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n                         skip_subtrees.append(root)\n                         continue\n", "normalized_occurrence": 1}
