{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..c1af918 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,11 +356,22 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n-    return normalize_mark_list(mark_list)\n+    \"\"\"Obtain the unpacked marks that are stored on an object and its MRO chain.\"\"\"\n+    # Handle non-class objects\n+    if not hasattr(obj, \"__mro__\"):\n+        mark_list = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        return normalize_mark_list(mark_list)\n+    \n+    # For classes, gather marks from entire MRO chain\n+    marks = []\n+    for cls in obj.__mro__:\n+        mark_list = getattr(cls, \"pytestmark\", [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        marks.extend(mark_list)\n+    return normalize_mark_list(marks)\n \n \n def normalize_mark_list(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..3143736 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,10 +161,18 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n-    return normalize_mark_list(mark_list)\n+    if not hasattr(obj, '__mro__'):\n+        mark_list = getattr(obj, 'pytestmark', [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        return normalize_mark_list(mark_list)\n+    marks = []\n+    for cls in obj.__mro__:\n+        mark_list = getattr(cls, 'pytestmark', [])\n+        if not isinstance(mark_list, list):\n+            mark_list = [mark_list]\n+        marks.extend(mark_list)\n+    return normalize_mark_list(marks)\n def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iterable[Mark]:\n     for mark in mark_list:\n         mark_obj = getattr(mark, 'mark', mark)\n", "normalized_occurrence": 1}
