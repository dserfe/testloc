{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..84b15e7 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -596,6 +596,22 @@ def exptrigsimp(expr):\n     if newexpr.has(TrigonometricFunction):\n         newexpr = TR2i(newexpr)\n \n+    # Handle exponential forms of sin/cos with I\n+    if newexpr.is_Mul or newexpr.is_Add:\n+        from sympy import expand\n+        expanded = expand(newexpr)\n+        if expanded.is_Add:\n+            terms = expanded.args\n+            for i in range(len(terms)):\n+                if (I in terms[i].free_symbols and \n+                    any(isinstance(arg, exp) for arg in terms[i].args)):\n+                    # Try to identify sin/cos patterns with I\n+                    coeff = S.Half\n+                    rest = expand(newexpr/(coeff))\n+                    if rest == -I*exp(I*rest.free_symbols.pop()) + I*exp(-I*rest.free_symbols.pop()):\n+                        from sympy import sin\n+                        return coeff * sin(rest.free_symbols.pop())\n+\n     # can we ever generate an I where there was none previously?\n     if not (newexpr.has(I) and not expr.has(I)):\n         expr = newexpr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..e78329b 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -228,6 +228,18 @@ def exptrigsimp(expr):\n         newexpr = f(TR2i(e))\n     if newexpr.has(TrigonometricFunction):\n         newexpr = TR2i(newexpr)\n+    if newexpr.is_Mul or newexpr.is_Add:\n+        from sympy import expand\n+        expanded = expand(newexpr)\n+        if expanded.is_Add:\n+            terms = expanded.args\n+            for i in range(len(terms)):\n+                if I in terms[i].free_symbols and any((isinstance(arg, exp) for arg in terms[i].args)):\n+                    coeff = S.Half\n+                    rest = expand(newexpr / coeff)\n+                    if rest == -I * exp(I * rest.free_symbols.pop()) + I * exp(-I * rest.free_symbols.pop()):\n+                        from sympy import sin\n+                        return coeff * sin(rest.free_symbols.pop())\n     if not (newexpr.has(I) and (not expr.has(I))):\n         expr = newexpr\n     return expr\n", "normalized_occurrence": 1}
