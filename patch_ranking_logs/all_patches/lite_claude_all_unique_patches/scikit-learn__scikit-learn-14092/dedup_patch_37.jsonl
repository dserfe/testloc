{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..f06871d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,7 +972,29 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n+    # For numeric types, try to convert to the target type\n+    if isinstance(target_type, type):\n+        numeric_types = (int, float, np.integer, np.floating)\n+        if (isinstance(x, numeric_types) and \n+            issubclass(target_type, (int, float))):\n+            try:\n+                x = target_type(x)\n+            except (ValueError, TypeError):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'\n+                              .format(name, target_type, type(x)))\n+    \n+    # Check if instance matches target_type, including numpy numeric types\n+    if isinstance(target_type, type):\n+        if issubclass(target_type, int):\n+            valid = isinstance(x, (int, np.integer))\n+        elif issubclass(target_type, float):\n+            valid = isinstance(x, (float, np.floating))\n+        else:\n+            valid = isinstance(x, target_type)\n+    else:\n+        valid = isinstance(x, target_type)\n+        \n+    if not valid:\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n                         .format(name, target_type, type(x)))\n \n@@ -980,4 +1002,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..7bcdde4 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,7 +281,23 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n+    if isinstance(target_type, type):\n+        numeric_types = (int, float, np.integer, np.floating)\n+        if isinstance(x, numeric_types) and issubclass(target_type, (int, float)):\n+            try:\n+                x = target_type(x)\n+            except (ValueError, TypeError):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    if isinstance(target_type, type):\n+        if issubclass(target_type, int):\n+            valid = isinstance(x, (int, np.integer))\n+        elif issubclass(target_type, float):\n+            valid = isinstance(x, (float, np.floating))\n+        else:\n+            valid = isinstance(x, target_type)\n+    else:\n+        valid = isinstance(x, target_type)\n+    if not valid:\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n", "normalized_occurrence": 1}
