{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..5d51d96 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -129,13 +129,25 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level to skip the rest\n+        of the module. This is particularly useful when you need to skip a module\n+        that contains syntax or imports that are only available in certain Python\n+        versions. Must be used before any incompatible imports or code.\n+        Example::\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+            # Now safe to import/use Python 3.8+ syntax\n+            from module_with_38_syntax import *\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where you don't need to skip the entire module\n+        (e.g., no incompatible imports or syntax), it is better to use the\n+        :ref:`pytest.mark.skipif ref` marker or ``pytestmark`` to declare tests\n+        to be skipped under certain conditions like mismatching platforms or\n+        dependencies.\n+\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..561b1a9 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -87,13 +87,25 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n-        Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        When True, allows this function to be called at module level to skip the rest\n+        of the module. This is particularly useful when you need to skip a module\n+        that contains syntax or imports that are only available in certain Python\n+        versions. Must be used before any incompatible imports or code.\n+        Example::\n+\n+            if sys.version_info < (3, 8):\n+                skip(\"Requires Python >= 3.8\", allow_module_level=True)\n+\n+            # Now safe to import/use Python 3.8+ syntax\n+            from module_with_38_syntax import *\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n+        For simpler cases where you don't need to skip the entire module\n+        (e.g., no incompatible imports or syntax), it is better to use the\n+        :ref:`pytest.mark.skipif ref` marker or ``pytestmark`` to declare tests\n+        to be skipped under certain conditions like mismatching platforms or\n+        dependencies.\n+\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n", "normalized_occurrence": 1}
