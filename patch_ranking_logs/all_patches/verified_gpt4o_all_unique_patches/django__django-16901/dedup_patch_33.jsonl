{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..ec6f0b1 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,7 +72,13 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        new_q = self._combine(other, self.OR)\n+        # Parity XOR: True if an odd number of conditions are True\n+        new_q.children = [\n+            (self & ~other) | (~self & other)\n+            for self, other in zip(self.children, other.children)\n+        ]\n+        return new_q\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..ec4d340 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,9 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        new_q = self._combine(other, self.OR)\n+        new_q.children = [self & ~other | ~self & other for self, other in zip(self.children, other.children)]\n+        return new_q\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
