{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..84060a1 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -369,8 +369,9 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         else:\n             modules = [\"numpy\"]\n \n-    # Get the needed namespaces.\n-    namespaces = []\n+    # Helper function to replace special characters in identifiers\n+    def _sanitize_ident(ident):\n+        return ''.join('_' if not c.isalnum() else c for c in ident)\n     # First find any function implementations\n     if use_imps:\n         namespaces.append(_imp_namespace(expr))\n@@ -393,7 +394,11 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         #Move on if expr.atoms in not implemented.\n         syms = expr.atoms(Symbol)\n         for term in syms:\n-            namespace.update({str(term): term})\n+            if isinstance(term, MatrixSymbol):\n+                term_str = _sanitize_ident(str(term))\n+                namespace.update({term_str: term})\n+            else:\n+                namespace.update({str(term): term})\n \n     if printer is None:\n         if _module_present('mpmath', namespaces):\n@@ -725,7 +730,7 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n                 argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..319519a 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -68,7 +68,8 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n             modules = ['math', 'mpmath', 'sympy']\n         else:\n             modules = ['numpy']\n-    namespaces = []\n+    def _sanitize_ident(ident):\n+        return ''.join(('_' if not c.isalnum() else c for c in ident))\n     if use_imps:\n         namespaces.append(_imp_namespace(expr))\n     if isinstance(modules, (dict, str)) or not hasattr(modules, '__iter__'):\n@@ -84,7 +85,11 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     if hasattr(expr, 'atoms'):\n         syms = expr.atoms(Symbol)\n         for term in syms:\n-            namespace.update({str(term): term})\n+            if isinstance(term, MatrixSymbol):\n+                term_str = _sanitize_ident(str(term))\n+                namespace.update({term_str: term})\n+            else:\n+                namespace.update({str(term): term})\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n@@ -294,7 +299,7 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n+            elif isinstance(arg, Symbol) or isinstance(arg, MatrixSymbol):\n                 argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n", "normalized_occurrence": 1}
