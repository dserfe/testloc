{"model_name_or_path": "agentless", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..401423a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -466,25 +466,31 @@ class Query(BaseExpression):\n                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n                 inner_query.default_cols = False\n \n-            relabels = {t: 'subquery' for t in inner_query.alias_map}\n-            relabels[None] = 'subquery'\n-            # Remove any aggregates marked for reduction from the subquery\n-            # and move them to the outer AggregateQuery.\n-            col_cnt = 0\n-            for alias, expression in list(inner_query.annotation_select.items()):\n-                annotation_select_mask = inner_query.annotation_select_mask\n-                if expression.is_summary:\n-                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n-                    outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n-                    del inner_query.annotations[alias]\n-                    annotation_select_mask.remove(alias)\n-                # Make sure the annotation_select wont use cached results.\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n-            if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n-                # In case of Model.objects[0:3].count(), there would be no\n-                # field selected in the inner query, yet we must use a subquery.\n-                # So, make sure at least one field is selected.\n-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+            # Ensure the subquery returns only the required columns\n+            if len(inner_query.select) == 1:\n+                select = inner_query.select[0]\n+                if getattr(select, 'target', None) or select.field:\n+                    inner_query.select = (select,)\n+            else:\n+                relabels = {t: 'subquery' for t in inner_query.alias_map}\n+                relabels[None] = 'subquery'\n+                # Remove any aggregates marked for reduction from the subquery\n+                # and move them to the outer AggregateQuery.\n+                col_cnt = 0\n+                for alias, expression in list(inner_query.annotation_select.items()):\n+                    annotation_select_mask = inner_query.annotation_select_mask\n+                    if expression.is_summary:\n+                        expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n+                        outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n+                        del inner_query.annotations[alias]\n+                        annotation_select_mask.remove(alias)\n+                    # Make sure the annotation_select wont use cached results.\n+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n+                if inner_query.select == () and not inner_query.default_cols and not inner_query.annotation_select_mask:\n+                    # In case of Model.objects[0:3].count(), there would be no\n+                    # field selected in the inner query, yet we must use a subquery.\n+                    # So, make sure at least one field is selected.\n+                    inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n         else:\n             outer_query = self\n             self.select = ()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..9b3a146 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -259,19 +259,24 @@ class Query(BaseExpression):\n                 if inner_query.default_cols and has_existing_aggregate_annotations:\n                     inner_query.group_by = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n                 inner_query.default_cols = False\n-            relabels = {t: 'subquery' for t in inner_query.alias_map}\n-            relabels[None] = 'subquery'\n-            col_cnt = 0\n-            for alias, expression in list(inner_query.annotation_select.items()):\n-                annotation_select_mask = inner_query.annotation_select_mask\n-                if expression.is_summary:\n-                    expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n-                    outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n-                    del inner_query.annotations[alias]\n-                    annotation_select_mask.remove(alias)\n-                inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n-            if inner_query.select == () and (not inner_query.default_cols) and (not inner_query.annotation_select_mask):\n-                inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n+            if len(inner_query.select) == 1:\n+                select = inner_query.select[0]\n+                if getattr(select, 'target', None) or select.field:\n+                    inner_query.select = (select,)\n+            else:\n+                relabels = {t: 'subquery' for t in inner_query.alias_map}\n+                relabels[None] = 'subquery'\n+                col_cnt = 0\n+                for alias, expression in list(inner_query.annotation_select.items()):\n+                    annotation_select_mask = inner_query.annotation_select_mask\n+                    if expression.is_summary:\n+                        expression, col_cnt = inner_query.rewrite_cols(expression, col_cnt)\n+                        outer_query.annotations[alias] = expression.relabeled_clone(relabels)\n+                        del inner_query.annotations[alias]\n+                        annotation_select_mask.remove(alias)\n+                    inner_query.set_annotation_mask(inner_query.annotation_select_mask)\n+                if inner_query.select == () and (not inner_query.default_cols) and (not inner_query.annotation_select_mask):\n+                    inner_query.select = (self.model._meta.pk.get_col(inner_query.get_initial_alias()),)\n         else:\n             outer_query = self\n             self.select = ()\n", "normalized_occurrence": 1}
