{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..8f8e4cf 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -128,7 +129,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join=\"outer\")\n \n \n def _calc_concat_dim_coord(dim):\n@@ -312,12 +313,10 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n+            # Fill missing variables with fill_value\n+            for var in variables_to_merge:\n+                if var not in ds.variables:\n+                    ds[var] = as_variable(np.full(ds.sizes, fill_value))\n \n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..e6a6c00 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -19,7 +19,7 @@ def concat(objs, dim, data_vars='all', coords='different', compat='equals', posi\n         f = _dataset_concat\n     else:\n         raise TypeError('can only concatenate xarray Dataset and DataArray objects, got %s' % type(first_obj))\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join='outer')\n def _calc_concat_dim_coord(dim):\n     from .dataarray import DataArray\n     if isinstance(dim, str):\n@@ -126,9 +126,9 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError('variables %r are present in some datasets but not others. ' % absent_merge_vars)\n+            for var in variables_to_merge:\n+                if var not in ds.variables:\n+                    ds[var] = as_variable(np.full(ds.sizes, fill_value))\n             for var in variables_to_merge:\n                 to_merge[var].append(ds.variables[var])\n         for var in variables_to_merge:\n", "normalized_occurrence": 1}
