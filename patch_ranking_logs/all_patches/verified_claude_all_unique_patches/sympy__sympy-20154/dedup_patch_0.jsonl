{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20154", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex aef37ab..06e178a 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1786,9 +1786,9 @@ def partitions(n, m=None, k=None, size=False):\n \n     if n == 0:\n         if size:\n-            yield 1, {0: 1}\n+            yield 1, {0: 1}.copy()\n         else:\n-            yield {0: 1}\n+            yield {0: 1}.copy()\n         return\n \n     k = min(k or n, n)\n@@ -1802,9 +1802,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield sum(ms.values()), ms\n+        yield sum(ms.values()), ms.copy()\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 0befff2..fc95c1c 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -589,9 +589,9 @@ def partitions(n, m=None, k=None, size=False):\n         m = min(m, n)\n     if n == 0:\n         if size:\n-            yield (1, {0: 1})\n+            yield (1, {0: 1}.copy())\n         else:\n-            yield {0: 1}\n+            yield {0: 1}.copy()\n         return\n     k = min(k or n, n)\n     n, m, k = (as_int(n), as_int(m), as_int(k))\n@@ -603,9 +603,9 @@ def partitions(n, m=None, k=None, size=False):\n         keys.append(r)\n     room = m - q - bool(r)\n     if size:\n-        yield (sum(ms.values()), ms)\n+        yield (sum(ms.values()), ms.copy())\n     else:\n-        yield ms\n+        yield ms.copy()\n     while keys != [1]:\n         if keys[-1] == 1:\n             del keys[-1]\n@@ -635,9 +635,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield (sum(ms.values()), ms)\n+            yield (sum(ms.values()), ms.copy())\n         else:\n-            yield ms\n+            yield ms.copy()\n def ordered_partitions(n, m=None, sort=True):\n     if n < 1 or (m is not None and m < 1):\n         yield []\n", "normalized_occurrence": 1}
