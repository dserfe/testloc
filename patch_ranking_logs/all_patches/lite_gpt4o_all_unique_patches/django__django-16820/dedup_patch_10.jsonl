{"model_name_or_path": "agentless", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..92de203 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1520,9 +1520,8 @@ class MigrationAutodetector:\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n \n-    # RemovedInDjango51Warning.\n-    def generate_removed_altered_index_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+    def generate_removed_altered_indexes(self):\n+        self._generate_removed_altered_foo_together(operations.AlterIndexes)\n \n     def _generate_altered_foo_together(self, operation):\n         for (\n@@ -1543,9 +1542,8 @@ class MigrationAutodetector:\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n \n-    # RemovedInDjango51Warning.\n-    def generate_altered_index_together(self):\n-        self._generate_altered_foo_together(operations.AlterIndexTogether)\n+    def generate_altered_indexes(self):\n+        self._generate_altered_foo_together(operations.AlterIndexes)\n \n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..db6e145 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -618,8 +618,8 @@ class MigrationAutodetector:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n-    def generate_removed_altered_index_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n+    def generate_removed_altered_indexes(self):\n+        self._generate_removed_altered_foo_together(operations.AlterIndexes)\n     def _generate_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n             removal_value = new_value.intersection(old_value)\n@@ -627,8 +627,8 @@ class MigrationAutodetector:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: new_value}), dependencies=dependencies)\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n-    def generate_altered_index_together(self):\n-        self._generate_altered_foo_together(operations.AlterIndexTogether)\n+    def generate_altered_indexes(self):\n+        self._generate_altered_foo_together(operations.AlterIndexes)\n     def generate_altered_db_table(self):\n         models_to_check = self.kept_model_keys.union(self.kept_proxy_keys, self.kept_unmanaged_keys)\n         for app_label, model_name in sorted(models_to_check):\n", "normalized_occurrence": 2}
