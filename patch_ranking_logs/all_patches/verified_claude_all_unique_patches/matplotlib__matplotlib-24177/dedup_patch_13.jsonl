{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..bcb2274 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6738,7 +6738,8 @@ such objects\n \n         density = bool(density)\n         if density and not stacked:\n-            hist_kwargs['density'] = density\n+            # For non-stacked plots, handle density normalization after histogramming\n+            hist_kwargs['density'] = False\n \n         # List to store all the top coordinates of the histograms\n         tops = []  # Will have shape (n_datasets, n_bins).\n@@ -6750,6 +6751,10 @@ such objects\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n+        \n+        # Apply density normalization for non-stacked plots\n+        if density and not stacked:\n+            tops = tops / (tops.sum(axis=1, keepdims=True) * np.diff(bins)[:, None]).T\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             # If a stacked density plot, normalize so the area of all the\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..08d6031 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1944,13 +1944,15 @@ class Axes(_AxesBase):\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n         if density and (not stacked):\n-            hist_kwargs['density'] = density\n+            hist_kwargs['density'] = False\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n             tops.append(m)\n         tops = np.array(tops, float)\n         bins = np.array(bins, float)\n+        if density and (not stacked):\n+            tops = tops / (tops.sum(axis=1, keepdims=True) * np.diff(bins)[:, None]).T\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n", "normalized_occurrence": 1}
