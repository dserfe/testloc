{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..d6a5b90 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,28 +968,53 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + \"=\" + expl)\n-            else:  # **args have `arg` keywords with an .arg of None\n-                arg_expls.append(\"**\" + expl)\n-\n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        func_name = call.func.id if isinstance(call.func, ast.Name) else None\n+\n+        if func_name in ('all', 'any') and len(call.args) == 1 and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):\n+            # Unroll the iterable to provide detailed error messages\n+            comp = call.args[0]\n+            temp_var = self.variable()\n+            elements_expl = []\n+\n+            for elt in comp.elt.elts if isinstance(comp.elt, ast.Tuple) else [comp.elt]:\n+                res, expl = self.visit(elt)\n+                elements_expl.append(expl)\n+                self.statements.append(ast.Assign([ast.Name(temp_var, ast.Store())], call))\n+\n+            body = [\n+                ast.If(\n+                    test=ast.UnaryOp(op=ast.Not(), operand=ast.Name(temp_var, ast.Load())),\n+                    body=self.on_failure,\n+                    orelse=[]\n+                )\n+            ]\n+            self.statements.extend(body)\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(elements_expl))\n+            res = self.assign(ast.Name(temp_var, ast.Load()))\n+            return res, expl\n+        else:\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            new_kwargs = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + \"=\" + expl)\n+                else:  # **args have `arg` keywords with an .arg of None\n+                    arg_expls.append(\"**\" + expl)\n+\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1106,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..7821ce8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,27 +544,42 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + '=' + expl)\n-            else:\n-                arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        func_name = call.func.id if isinstance(call.func, ast.Name) else None\n+        if func_name in ('all', 'any') and len(call.args) == 1 and isinstance(call.args[0], (ast.GeneratorExp, ast.ListComp)):\n+            comp = call.args[0]\n+            temp_var = self.variable()\n+            elements_expl = []\n+            for elt in comp.elt.elts if isinstance(comp.elt, ast.Tuple) else [comp.elt]:\n+                res, expl = self.visit(elt)\n+                elements_expl.append(expl)\n+                self.statements.append(ast.Assign([ast.Name(temp_var, ast.Store())], call))\n+            body = [ast.If(test=ast.UnaryOp(op=ast.Not(), operand=ast.Name(temp_var, ast.Load())), body=self.on_failure, orelse=[])]\n+            self.statements.extend(body)\n+            expl = '%s(%s)' % (func_expl, ', '.join(elements_expl))\n+            res = self.assign(ast.Name(temp_var, ast.Load()))\n+            return (res, expl)\n+        else:\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            new_kwargs = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + '=' + expl)\n+                else:\n+                    arg_expls.append('**' + expl)\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
