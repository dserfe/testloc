{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..d97461f 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -600,7 +600,14 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        def wrapped_func(val):\n+            canvas = self.ax.figure.canvas\n+            canvas._in_on_changed = True\n+            try:\n+                func(val)\n+            finally:\n+                canvas._in_on_changed = False\n+        return self._observers.connect('changed', lambda val: wrapped_func(val))\n \n \n class RangeSlider(SliderBase):\n@@ -965,7 +972,7 @@ class RangeSlider(SliderBase):\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n         self.val = (vmin, vmax)\n-        if self.eventson:\n+        if self.eventson and not hasattr(self.ax.figure.canvas, '_in_on_changed'):\n             self._observers.process(\"changed\", (vmin, vmax))\n \n     def on_changed(self, func):\n@@ -983,7 +990,14 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        def wrapped_func(val):\n+            canvas = self.ax.figure.canvas\n+            canvas._in_on_changed = True\n+            try:\n+                func(val)\n+            finally:\n+                canvas._in_on_changed = False\n+        return self._observers.connect('changed', lambda val: wrapped_func(val))\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..7825f32 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -519,7 +519,15 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def wrapped_func(val):\n+            canvas = self.ax.figure.canvas\n+            canvas._in_on_changed = True\n+            try:\n+                func(val)\n+            finally:\n+                canvas._in_on_changed = False\n+        return self._observers.connect('changed', lambda val: wrapped_func(val))\n \n class RangeSlider(SliderBase):\n     \"\"\"\n@@ -777,7 +785,7 @@ class RangeSlider(SliderBase):\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n         self.val = (vmin, vmax)\n-        if self.eventson:\n+        if self.eventson and (not hasattr(self.ax.figure.canvas, '_in_on_changed')):\n             self._observers.process('changed', (vmin, vmax))\n \n     def on_changed(self, func):\n@@ -795,7 +803,15 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+\n+        def wrapped_func(val):\n+            canvas = self.ax.figure.canvas\n+            canvas._in_on_changed = True\n+            try:\n+                func(val)\n+            finally:\n+                canvas._in_on_changed = False\n+        return self._observers.connect('changed', lambda val: wrapped_func(val))\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
