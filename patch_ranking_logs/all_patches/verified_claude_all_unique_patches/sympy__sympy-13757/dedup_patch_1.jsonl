{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13757", "model_patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\nindex dd02372..51e3eea 100644\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -290,6 +290,15 @@ class Mul(Expr, AssocOp):\n                 neg1e += S.Half\n                 continue\n \n+            elif hasattr(o, 'is_Poly') and o.is_Poly:\n+                # Handle polynomial multiplication specially\n+                if c_part or nc_part:\n+                    # If we have accumulated any terms, multiply them with the polynomial\n+                    base = Mul(*c_part) if c_part else S.One\n+                    base = Mul(base, *nc_part) if nc_part else base\n+                    return [o._eval_mul(base)], [], None\n+                c_part.append(o)\n+                continue\n             elif o.is_commutative:\n                 #      e\n                 # o = b\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mul.py b/sympy/core/mul.py\nindex 6739e29..01dd5d1 100644\n--- a/sympy/core/mul.py\n+++ b/sympy/core/mul.py\n@@ -118,6 +118,13 @@ class Mul(Expr, AssocOp):\n             elif o is S.ImaginaryUnit:\n                 neg1e += S.Half\n                 continue\n+            elif hasattr(o, 'is_Poly') and o.is_Poly:\n+                if c_part or nc_part:\n+                    base = Mul(*c_part) if c_part else S.One\n+                    base = Mul(base, *nc_part) if nc_part else base\n+                    return ([o._eval_mul(base)], [], None)\n+                c_part.append(o)\n+                continue\n             elif o.is_commutative:\n                 b, e = o.as_base_exp()\n                 if o.is_Pow:\n", "normalized_occurrence": 1}
