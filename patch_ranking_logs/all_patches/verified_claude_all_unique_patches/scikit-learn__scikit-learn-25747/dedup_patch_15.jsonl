{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..4df48d5 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -52,11 +52,12 @@ def _wrap_in_pandas_container(\n \n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n \n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        # Only set index if the transformed data doesn't already have one\n+        if index is not None and data_to_wrap.index.equals(pd.RangeIndex(len(data_to_wrap))):\n+            data_to_wrap.index = index[:len(data_to_wrap)]\n+        if isinstance(data_to_wrap, pd.DataFrame) and columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n-            data_to_wrap.index = index\n         return data_to_wrap\n \n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n", "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..e3aa9f4 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -12,11 +12,11 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n         except Exception:\n             columns = None\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n-    if isinstance(data_to_wrap, pd.DataFrame):\n-        if columns is not None:\n+    if isinstance(data_to_wrap, (pd.DataFrame, pd.Series)):\n+        if index is not None and data_to_wrap.index.equals(pd.RangeIndex(len(data_to_wrap))):\n+            data_to_wrap.index = index[:len(data_to_wrap)]\n+        if isinstance(data_to_wrap, pd.DataFrame) and columns is not None:\n             data_to_wrap.columns = columns\n-        if index is not None:\n-            data_to_wrap.index = index\n         return data_to_wrap\n     return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n def _get_output_config(method, estimator=None):\n", "normalized_occurrence": 1}
