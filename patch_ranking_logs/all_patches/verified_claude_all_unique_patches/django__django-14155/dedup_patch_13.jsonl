{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..60fda07 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,8 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n+\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -45,6 +47,13 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            self._partial = func\n+            func = func.func\n+        else:\n+            self._partial = None\n+\n         if not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n@@ -52,6 +61,13 @@ class ResolverMatch:\n             # A function-based view\n             self._func_path = func.__module__ + '.' + func.__name__\n \n+        # Add partial function arguments to the path if present\n+        if self._partial:\n+            partial_args = [repr(arg) for arg in self._partial.args]\n+            partial_kwargs = [f\"{k}={repr(v)}\" for k, v in self._partial.keywords.items()]\n+            partial_signature = ', '.join(partial_args + partial_kwargs)\n+            self._func_path = f\"{self._func_path}({partial_signature})\"\n+\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..78841a9 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -29,10 +30,20 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n+        if isinstance(func, functools.partial):\n+            self._partial = func\n+            func = func.func\n+        else:\n+            self._partial = None\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n+        if self._partial:\n+            partial_args = [repr(arg) for arg in self._partial.args]\n+            partial_kwargs = [f'{k}={repr(v)}' for k, v in self._partial.keywords.items()]\n+            partial_signature = ', '.join(partial_args + partial_kwargs)\n+            self._func_path = f'{self._func_path}({partial_signature})'\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n", "normalized_occurrence": 1}
