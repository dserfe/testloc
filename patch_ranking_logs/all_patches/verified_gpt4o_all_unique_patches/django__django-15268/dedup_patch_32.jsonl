{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..ea7d94a 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -40,11 +41,20 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            # Check for consecutive AlterUniqueTogether or AlterIndexTogether\n+            if isinstance(operation, (operations.AlterUniqueTogether, operations.AlterIndexTogether)):\n+                j = i + 1\n+                while j < len(operations) and isinstance(operations[j], type(operation)):\n+                    j += 1\n+                if j > i + 1:\n+                    # Merge operations\n+                    merged_operation = operation.reduce(operations[i + 1:j], app_label)\n+                    new_operations.append(merged_operation)\n+                    i = j\n+                    continue\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n                     if right:\n@@ -66,4 +76,4 @@ class MigrationOptimizer:\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..c31dd3c 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,10 +11,18 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n-                result = operation.reduce(other, app_label)\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            if isinstance(operation, (operations.AlterUniqueTogether, operations.AlterIndexTogether)):\n+                j = i + 1\n+                while j < len(operations) and isinstance(operations[j], type(operation)):\n+                    j += 1\n+                if j > i + 1:\n+                    merged_operation = operation.reduce(operations[i + 1:j], app_label)\n+                    new_operations.append(merged_operation)\n+                    i = j\n+                    continue\n                 if isinstance(result, list):\n                     in_between = operations[i + 1:i + j + 1]\n                     if right:\n", "normalized_occurrence": 1}
