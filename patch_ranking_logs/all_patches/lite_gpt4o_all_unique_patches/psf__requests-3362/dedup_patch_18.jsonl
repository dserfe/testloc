{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..9608c0c 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -687,6 +687,11 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n+        if self._content_consumed and isinstance(self._content, bool):\n+            raise StreamConsumedError()\n+        elif not isinstance(chunk_size, int):\n+            raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n+\n         # simulate reading small chunks of the content\n         reused_chunks = iter_slices(self._content, chunk_size)\n \n@@ -696,8 +701,12 @@ class Response(object):\n \n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n-\n-        return chunks\n+            # Ensure that chunks are strings when decode_unicode is True\n+            for chunk in chunks:\n+                yield chunk\n+        else:\n+            for chunk in chunks:\n+                yield chunk\n \n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         \"\"\"Iterates over the response data, one line at a time.  When\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..5c79bcf 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -356,12 +356,20 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n+        if self._content_consumed and isinstance(self._content, bool):\n+            raise StreamConsumedError()\n+        elif not isinstance(chunk_size, int):\n+            raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n         reused_chunks = iter_slices(self._content, chunk_size)\n         stream_chunks = generate()\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n-        return chunks\n+            for chunk in chunks:\n+                yield chunk\n+        else:\n+            for chunk in chunks:\n+                yield chunk\n     def iter_lines(self, chunk_size=ITER_CHUNK_SIZE, decode_unicode=None, delimiter=None):\n         pending = None\n         for chunk in self.iter_content(chunk_size=chunk_size, decode_unicode=decode_unicode):\n", "normalized_occurrence": 1}
