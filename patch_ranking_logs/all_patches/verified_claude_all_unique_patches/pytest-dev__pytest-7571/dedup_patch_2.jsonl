{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..0e98a39 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -436,6 +436,22 @@ class LogCaptureFixture:\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n+    def set_level(self, level: int, logger: Optional[str] = None) -> None:\n+        \"\"\"Sets the level for capturing of logs.\n+\n+        :param int level: the logger to level.\n+        :param str logger: the logger to update the level. If not given, the root logger level is updated.\n+\n+        .. versionchanged:: 3.4\n+            The levels of the loggers changed by this function will be restored to their initial values at the\n+            end of the test.\n+        \"\"\"\n+        logger_obj = logging.getLogger(logger)\n+        # save the original log-level to restore it during teardown\n+        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        logger_obj.setLevel(level)\n+        self.handler.setLevel(level)\n+\n     @contextmanager\n     def at_level(\n         self, level: int, logger: Optional[str] = None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..177a4eb 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -192,6 +192,11 @@ class LogCaptureFixture:\n         self._initial_logger_levels.setdefault(logger, logger_obj.level)\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n+    def set_level(self, level: int, logger: Optional[str]=None) -> None:\n+        logger_obj = logging.getLogger(logger)\n+        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        logger_obj.setLevel(level)\n+        self.handler.setLevel(level)\n     @contextmanager\n     def at_level(self, level: int, logger: Optional[str]=None) -> Generator[None, None, None]:\n         logger_obj = logging.getLogger(logger)\n", "normalized_occurrence": 1}
