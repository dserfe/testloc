{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex a09f791..7ae9689 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1013,7 +1013,10 @@ class OneToOneField(ForeignKey):\n \n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n         kwargs['unique'] = True\n+        parent_link = kwargs.get('parent_link', False)\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n+        # Store parent_link status early to ensure it's available during model validation\n+        self.parent_link = parent_link\n \n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n", "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex f0a0935..9c2d972 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -465,7 +465,9 @@ class OneToOneField(ForeignKey):\n     description = _('One-to-one relationship')\n     def __init__(self, to, on_delete, to_field=None, **kwargs):\n         kwargs['unique'] = True\n+        parent_link = kwargs.get('parent_link', False)\n         super().__init__(to, on_delete, to_field=to_field, **kwargs)\n+        self.parent_link = parent_link\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if 'unique' in kwargs:\n", "normalized_occurrence": 1}
