{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..0ca8c5a 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -252,9 +252,10 @@ class ClassAttribute:\n \n \n def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n-                      analyzer: ModuleAnalyzer = None) -> Dict[str, ClassAttribute]:\n+                      analyzer: ModuleAnalyzer = None, baseclass_ns: str = '') -> Dict[str, ClassAttribute]:\n     \"\"\"Get members and attributes of target class.\"\"\"\n     from sphinx.ext.autodoc import INSTANCEATTR\n+    baseclass_ns = baseclass_ns or '.'.join(objpath)\n \n     # the members directly defined in the class\n     obj_dict = attrgetter(subject, '__dict__', {})\n@@ -309,7 +310,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n \n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n+        namespace = baseclass_ns or '.'.join(objpath)\n         for (ns, name), docstring in analyzer.attr_docs.items():\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 65a9a3c..cfb35cf 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -162,8 +162,9 @@ class ClassAttribute:\n         self.name = name\n         self.value = value\n         self.docstring = docstring\n-def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, analyzer: ModuleAnalyzer=None) -> Dict[str, ClassAttribute]:\n+def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, analyzer: ModuleAnalyzer=None, baseclass_ns: str='') -> Dict[str, ClassAttribute]:\n     from sphinx.ext.autodoc import INSTANCEATTR\n+    baseclass_ns = baseclass_ns or '.'.join(objpath)\n     obj_dict = attrgetter(subject, '__dict__', {})\n     members = {}\n     if isenumclass(subject):\n@@ -203,7 +204,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, an\n         except AttributeError:\n             pass\n     if analyzer:\n-        namespace = '.'.join(objpath)\n+        namespace = baseclass_ns or '.'.join(objpath)\n         for (ns, name), docstring in analyzer.attr_docs.items():\n             if namespace == ns and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR, '\\n'.join(docstring))\n", "normalized_occurrence": 1}
