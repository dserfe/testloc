{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..f38bb59 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -190,7 +190,21 @@ class Options:\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n \n-            # order_with_respect_and ordering are mutually exclusive.\n+            # order_with_respect and ordering are mutually exclusive.\n+            if self.ordering:\n+                new_ordering = []\n+                for field in self.ordering:\n+                    if '__' in field and field.split('__')[-1] == 'isnull':\n+                        new_ordering.append(field)\n+                    else:\n+                        parts = field.lstrip('-').split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if not self.get_field(field_name).get_lookup(parts[1:]):\n+                            raise FieldDoesNotExist(\n+                                \"%s has no field named '%s'\" % (self.object_name, field_name)\n+                            )\n+                        new_ordering.append(field)\n+                self.ordering = tuple(new_ordering)\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n             # Any leftover attributes must be invalid.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..8591901 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -117,6 +117,18 @@ class Options:\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            if self.ordering:\n+                new_ordering = []\n+                for field in self.ordering:\n+                    if '__' in field and field.split('__')[-1] == 'isnull':\n+                        new_ordering.append(field)\n+                    else:\n+                        parts = field.lstrip('-').split(LOOKUP_SEP)\n+                        field_name = parts[0]\n+                        if not self.get_field(field_name).get_lookup(parts[1:]):\n+                            raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, field_name))\n+                        new_ordering.append(field)\n+                self.ordering = tuple(new_ordering)\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n", "normalized_occurrence": 1}
