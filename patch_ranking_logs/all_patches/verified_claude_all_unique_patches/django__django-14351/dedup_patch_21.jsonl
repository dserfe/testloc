{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e16dbc0..f2ec544 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -672,27 +672,18 @@ class SQLCompiler:\n             # Finally do cleanup - get rid of the joins we created above.\n             self.query.reset_refcounts(refcounts_before)\n \n-    def get_default_columns(self, start_alias=None, opts=None, from_parent=None):\n-        \"\"\"\n-        Compute the default columns for selecting every field in the base\n-        model. Will sometimes be called to pull in related models (e.g. via\n-        select_related), in which case \"opts\" and \"start_alias\" will be given\n-        to provide a starting point for the traversal.\n-\n-        Return a list of strings, quoted appropriately for use in SQL\n-        directly, as well as a set of aliases used in the select statement (if\n-        'as_pairs' is True, return a list of (alias, col_name) pairs instead\n-        of strings as the first component and None as the second component).\n-        \"\"\"\n-        result = []\n-        if opts is None:\n-            opts = self.query.get_meta()\n-        only_load = self.deferred_to_columns()\n-        start_alias = start_alias or self.query.get_initial_alias()\n-        # The 'seen_models' is used to optimize checking the needed parent\n-        # alias for a given field. This also includes None -> start_alias to\n-        # be used by local fields.\n-        seen_models = {None: start_alias}\n+\n+\n+        # For subqueries with __in lookups, only include the primary key\n+        if getattr(self.query, 'subquery', False) and any(\n+            child.lookup_name == 'in' \n+            for child in getattr(self.query.where, 'children', [])\n+            if hasattr(child, 'lookup_name')\n+        ):\n+            pk = opts.pk\n+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)\n+            result.append(pk.get_col(alias))\n+            return result\n \n         for field in opts.concrete_fields:\n             model = field.model._meta.concrete_model\n", "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b3e101b..4262a2d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -386,13 +386,11 @@ class SQLCompiler:\n             return (' '.join(result), tuple(params))\n         finally:\n             self.query.reset_refcounts(refcounts_before)\n-    def get_default_columns(self, start_alias=None, opts=None, from_parent=None):\n-        result = []\n-        if opts is None:\n-            opts = self.query.get_meta()\n-        only_load = self.deferred_to_columns()\n-        start_alias = start_alias or self.query.get_initial_alias()\n-        seen_models = {None: start_alias}\n+        if getattr(self.query, 'subquery', False) and any((child.lookup_name == 'in' for child in getattr(self.query.where, 'children', []) if hasattr(child, 'lookup_name'))):\n+            pk = opts.pk\n+            alias = self.query.join_parent_model(opts, None, start_alias, seen_models)\n+            result.append(pk.get_col(alias))\n+            return result\n         for field in opts.concrete_fields:\n             model = field.model._meta.concrete_model\n             if model == opts.model:\n", "normalized_occurrence": 1}
