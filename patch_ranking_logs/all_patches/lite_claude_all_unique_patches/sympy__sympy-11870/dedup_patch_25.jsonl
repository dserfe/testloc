{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..34ffda1 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -535,6 +535,22 @@ def exptrigsimp(expr):\n         # select the better of e, and e rewritten in terms of exp or trig\n         # functions\n         choices = [e]\n+        \n+        # Handle special case for sin(k) written as exponentials\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            # Try to match pattern: -I/2 * (exp(I*k) - exp(-I*k))\n+            # or equivalent forms like 1/2 * (-I*exp(I*k) + I*exp(-I*k))\n+            coeff, terms = e.as_coeff_Add()\n+            if len(terms.args) == 2:\n+                t1, t2 = terms.args\n+                if (isinstance(t1, exp) and isinstance(t2, exp) and\n+                    t1.args[0].is_Mul and t2.args[0].is_Mul and\n+                    S.ImaginaryUnit in (t1.args[0].args + t2.args[0].args)):\n+                    # Check if arguments are negatives of each other\n+                    if t1.args[0] == -t2.args[0]:\n+                        arg = t1.args[0]/S.ImaginaryUnit\n+                        choices.append(sin(arg))\n+\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..9cef1bc 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -177,6 +177,14 @@ def exptrigsimp(expr):\n     from sympy.simplify.simplify import bottom_up\n     def exp_trig(e):\n         choices = [e]\n+        if e.is_Mul and S.ImaginaryUnit in e.free_symbols:\n+            coeff, terms = e.as_coeff_Add()\n+            if len(terms.args) == 2:\n+                t1, t2 = terms.args\n+                if isinstance(t1, exp) and isinstance(t2, exp) and t1.args[0].is_Mul and t2.args[0].is_Mul and (S.ImaginaryUnit in t1.args[0].args + t2.args[0].args):\n+                    if t1.args[0] == -t2.args[0]:\n+                        arg = t1.args[0] / S.ImaginaryUnit\n+                        choices.append(sin(arg))\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n", "normalized_occurrence": 1}
