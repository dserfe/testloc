{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..d50324e 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -932,36 +932,28 @@ class PrettyPrinter(Printer):\n         lengths = []\n         strs = ['']\n         for i, partstr in enumerate(o1):\n-            # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n                 tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n+                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}', \n+                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}' \n                                           + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n+        n_newlines = max(len(x) for x in o1)\n+        max_widths = [max(len(parts[i]) if i < len(parts) else 0 for parts in o1) \n+                      for i in range(n_newlines)]\n         for parts in o1:\n-            lengths.append(len(parts[0]))\n             for j in range(n_newlines):\n-                if j+1 <= len(parts):\n+                if j < len(parts):\n                     if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' '*(lengths[-1] -\n-                                                   len(parts[j])+\n-                                                   3)\n+                        strs.append('')\n+                    strs[j] += parts[j].ljust(max_widths[j]) + ' + '\n                 else:\n                     if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    strs[j] += ' '*(lengths[-1]+3)\n-\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+                        strs.append('')\n+                    strs[j] += ' ' * max_widths[j] + ' + '\n+        return prettyForm(u'\\n'.join(s.rstrip(' + ') for s in strs))\n \n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..c0e138b 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -676,22 +676,19 @@ class PrettyPrinter(Printer):\n                 tempstr = tempstr.replace(u'⎞', u'⎞' + ' ' + vectstrs[i])\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n+        n_newlines = max((len(x) for x in o1))\n+        max_widths = [max((len(parts[i]) if i < len(parts) else 0 for parts in o1)) for i in range(n_newlines)]\n         for parts in o1:\n-            lengths.append(len(parts[0]))\n             for j in range(n_newlines):\n-                if j + 1 <= len(parts):\n+                if j < len(parts):\n                     if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n+                        strs.append('')\n+                    strs[j] += parts[j].ljust(max_widths[j]) + ' + '\n                 else:\n                     if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    strs[j] += ' ' * (lengths[-1] + 3)\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+                        strs.append('')\n+                    strs[j] += ' ' * max_widths[j] + ' + '\n+        return prettyForm(u'\\n'.join((s.rstrip(' + ') for s in strs)))\n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n         if expr.rank() == 0:\n", "normalized_occurrence": 1}
