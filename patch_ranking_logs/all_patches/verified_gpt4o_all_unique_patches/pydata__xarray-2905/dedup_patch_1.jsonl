{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex d82c4a0..0dd2398 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -855,7 +855,9 @@ class Variable(\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            # Check if the value is an object with 'values' attribute and handle appropriately\n+            if not (hasattr(value, 'values') and hasattr(value, 'dtype') and value.dtype == object):\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n                     \"shape mismatch: value array of shape %s could not be \"\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex de67650..cfc115c 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -622,7 +622,8 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         \"\"\"\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n         if not isinstance(value, Variable):\n-            value = as_compatible_data(value)\n+            if not (hasattr(value, 'values') and hasattr(value, 'dtype') and (value.dtype == object)):\n+                value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError('shape mismatch: value array of shape %s could not be broadcast to indexing result with %s dimensions' % (value.shape, len(dims)))\n             if value.ndim == 0:\n", "normalized_occurrence": 1}
