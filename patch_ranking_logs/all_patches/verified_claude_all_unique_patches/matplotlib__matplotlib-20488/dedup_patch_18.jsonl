{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..e1e5f62 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1551,6 +1551,19 @@ class LogNorm(Normalize):\n         # docstring inherited.\n         super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n \n+    def __call__(self, value, clip=None):\n+        value, is_scalar = self.process_value(value)\n+        self.autoscale_None(value)\n+        \n+        # Handle invalid vmin/vmax similar to LogLocator\n+        if self.vmin <= 0:\n+            minpos = np.min(value[value > 0]) if hasattr(value, 'size') else value\n+            self.vmin = minpos if np.isfinite(minpos) else 1e-300\n+        if self.vmax <= 0:\n+            self.vmax = 1.0\n+        \n+        return super().__call__(value, clip)\n+\n \n @_make_norm_from_scale(\n     scale.SymmetricalLogScale,\n", "normalized_patch": "--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n+    def __call__(self, value, clip=None):\n+        value, is_scalar = self.process_value(value)\n+        self.autoscale_None(value)\n+        if self.vmin <= 0:\n+            minpos = np.min(value[value > 0]) if hasattr(value, 'size') else value\n+            self.vmin = minpos if np.isfinite(minpos) else 1e-300\n+        if self.vmax <= 0:\n+            self.vmax = 1.0\n+        return super().__call__(value, clip)\n+", "normalized_occurrence": 1}
