{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..2168734 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2091,6 +2091,9 @@ def uniq(seq, result=None):\n     parameter ``result``  is used internally; it is not necessary to pass\n     anything for this.\n \n+    Raises a RuntimeError if the input sequence size changes during iteration,\n+    similar to Python's behavior with dictionaries and sets.\n+\n     Examples\n     ========\n \n@@ -2109,7 +2112,10 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        initial_size = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            if initial_size is not None and len(seq) != initial_size:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..6d88be1 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -733,7 +733,10 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        initial_size = len(seq) if hasattr(seq, '__len__') else None\n         for i, s in enumerate(seq):\n+            if initial_size is not None and len(seq) != initial_size:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 10}
