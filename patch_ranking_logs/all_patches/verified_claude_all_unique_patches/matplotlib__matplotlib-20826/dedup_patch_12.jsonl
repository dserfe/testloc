{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..58fa4e9 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1303,11 +1303,28 @@ class _AxesBase(martist.Artist):\n         self._shared_axes[\"x\"].clean()\n         self._shared_axes[\"y\"].clean()\n         if self._sharex is not None:\n+            # Restore full xaxis state for shared axes\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Get primary shared axes\n+            shared_ax = self._shared_axes[\"x\"].get_siblings(self)[0]\n+            if shared_ax is not self:\n+                # Copy tick/label visibility states from shared axes\n+                for name in ['top', 'bottom', 'labeltop', 'labelbottom']:\n+                    self.tick_params(axis='x', which='both',\n+                                   **{name: getattr(shared_ax.xaxis, f'get_{name}')()})\n+\n         if self._sharey is not None:\n+            # Restore full yaxis state for shared axes  \n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            # Get primary shared axes\n+            shared_ax = self._shared_axes[\"y\"].get_siblings(self)[0]\n+            if shared_ax is not self:\n+                # Copy tick/label visibility states from shared axes\n+                for name in ['left', 'right', 'labelleft', 'labelright']:\n+                    self.tick_params(axis='y', which='both',\n+                                   **{name: getattr(shared_ax.yaxis, f'get_{name}')()})\n \n         self.stale = True\n \n@@ -4717,4 +4734,4 @@ class _AxesBase(martist.Artist):\n \n     def get_shared_y_axes(self):\n         \"\"\"Return a reference to the shared axes Grouper object for y axes.\"\"\"\n-        return self._shared_axes[\"y\"]\n+        return self._shared_axes[\"y\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 33a6de3..8b4ca25 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -578,9 +578,17 @@ class _AxesBase(martist.Artist):\n         if self._sharex is not None:\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            shared_ax = self._shared_axes['x'].get_siblings(self)[0]\n+            if shared_ax is not self:\n+                for name in ['top', 'bottom', 'labeltop', 'labelbottom']:\n+                    self.tick_params(axis='x', which='both', **{name: getattr(shared_ax.xaxis, f'get_{name}')()})\n         if self._sharey is not None:\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n+            shared_ax = self._shared_axes['y'].get_siblings(self)[0]\n+            if shared_ax is not self:\n+                for name in ['left', 'right', 'labelleft', 'labelright']:\n+                    self.tick_params(axis='y', which='both', **{name: getattr(shared_ax.yaxis, f'get_{name}')()})\n         self.stale = True\n     class ArtistList(MutableSequence):\n         def __init__(self, axes, prop_name, add_name, valid_types=None, invalid_types=None):\n", "normalized_occurrence": 1}
