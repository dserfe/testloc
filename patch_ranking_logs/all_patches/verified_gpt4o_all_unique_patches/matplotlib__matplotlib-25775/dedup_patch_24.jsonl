{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..ae92f05 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -276,6 +276,24 @@ class Text(Artist):\n         std_x = x - bb.x0\n         return (np.abs(size_accum - std_x)).argmin()\n \n+    def get_antialiased(self):\n+        \"\"\"Return the antialiased state.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiasing for the text.\n+\n+        Parameters\n+        ----------\n+        b : bool or None\n+        \"\"\"\n+        if b is None:\n+            self._antialiased = mpl.rcParams[\"text.antialiased\"]\n+        else:\n+            self._antialiased = bool(b)\n+        self.stale = True\n+\n     def get_rotation(self):\n         \"\"\"Return the text angle in degrees between 0 and 360.\"\"\"\n         if self.get_transform_rotates_text():\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        if b is None:\n+            self._antialiased = mpl.rcParams['text.antialiased']\n+        else:\n+            self._antialiased = bool(b)\n+        self.stale = True", "normalized_occurrence": 1}
