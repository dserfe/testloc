{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..71d3394 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -443,6 +443,10 @@ def trigsimp(expr, **opts):\n     collection of trigonometric transformations described by Fu, et al.\n     (see the `fu` docstring).\n \n+    The function will attempt to identify and simplify common patterns like:\n+    sin(x)*sin(y) + cos(x)*cos(y) -> cos(x-y)\n+    sin(x)*cos(y) - cos(x)*sin(y) -> sin(x-y)\n+\n \n     Examples\n     ========\n@@ -501,12 +505,26 @@ def trigsimp(expr, **opts):\n             return new\n         return trigsimp_groebner(new, **opts)\n \n+    def _basic_patterns(expr):\n+        \"\"\"Apply basic trigonometric patterns and identities\"\"\"\n+        from sympy import Wild\n+        a, b = Wild('a'), Wild('b')\n+        pattern = sin(a)*sin(b) + cos(a)*cos(b)\n+        match = expr.match(pattern)\n+        if match is not None and None not in (match[a], match[b]):\n+            return cos(match[a] - match[b])\n+        pattern = sin(a)*cos(b) - cos(a)*sin(b)\n+        match = expr.match(pattern)\n+        if match is not None and None not in (match[a], match[b]):\n+            return sin(match[a] - match[b])\n+        return expr\n+\n     trigsimpfunc = {\n         'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n+        'matching': (lambda x: _basic_patterns(futrig(x))),\n         'groebner': (lambda x: groebnersimp(x, **opts)),\n-        'combined': (lambda x: futrig(groebnersimp(x,\n-                               polynomial=True, hints=[2, tan]))),\n+        'combined': (lambda x: _basic_patterns(futrig(groebnersimp(x,\n+                               polynomial=True, hints=[2, tan])))),\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..3f79ac5 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -170,7 +170,19 @@ def trigsimp(expr, **opts):\n         if not isinstance(new, Expr):\n             return new\n         return trigsimp_groebner(new, **opts)\n-    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n+    def _basic_patterns(expr):\n+        from sympy import Wild\n+        a, b = (Wild('a'), Wild('b'))\n+        pattern = sin(a) * sin(b) + cos(a) * cos(b)\n+        match = expr.match(pattern)\n+        if match is not None and None not in (match[a], match[b]):\n+            return cos(match[a] - match[b])\n+        pattern = sin(a) * cos(b) - cos(a) * sin(b)\n+        match = expr.match(pattern)\n+        if match is not None and None not in (match[a], match[b]):\n+            return sin(match[a] - match[b])\n+        return expr\n+    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: _basic_patterns(futrig(x)), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: _basic_patterns(futrig(groebnersimp(x, polynomial=True, hints=[2, tan]))), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n     return trigsimpfunc(expr)\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n", "normalized_occurrence": 1}
