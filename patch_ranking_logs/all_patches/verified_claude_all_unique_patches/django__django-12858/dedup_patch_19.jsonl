{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..058abaa 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -8,6 +8,41 @@ from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n \n \n+def _check_ordering_field(field_name, model):\n+    \"\"\"\n+    Check if field_name is a valid ordering for model, handling related fields\n+    and transforms/lookups.\n+    \"\"\"\n+    # Separate field path and any transforms/lookups\n+    field_parts = field_name.lstrip('-').split(LOOKUP_SEP)\n+    field_path, *lookups = field_parts\n+\n+    # Try to resolve field path\n+    try:\n+        field = model._meta.get_field(field_path)\n+        path = field_path\n+        opts = field.model._meta\n+        for part in field_parts[1:]:\n+            # Handle transforms and lookups\n+            if hasattr(field, 'get_transform') and field.get_transform(part):\n+                continue\n+            if hasattr(field, 'get_lookup') and field.get_lookup(part):\n+                continue\n+            # Try to resolve as a field\n+            field = opts.get_field(part)\n+            path = f\"{path}__{part}\"\n+            opts = field.model._meta\n+        return []\n+    except (FieldDoesNotExist, NotImplementedError):\n+        return [\n+            Error(\n+                \"'ordering' refers to the nonexistent field, related field, \"\n+                \"or lookup '%s'.\" % field_name.lstrip('-'),\n+                obj=model,\n+                id='models.E015',\n+            )\n+        ]\n+\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n", "occurrence": 1, "normalized_patch": "--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n+def _check_ordering_field(field_name, model):\n+    field_parts = field_name.lstrip('-').split(LOOKUP_SEP)\n+    field_path, *lookups = field_parts\n+    try:\n+        field = model._meta.get_field(field_path)\n+        path = field_path\n+        opts = field.model._meta\n+        for part in field_parts[1:]:\n+            if hasattr(field, 'get_transform') and field.get_transform(part):\n+                continue\n+            if hasattr(field, 'get_lookup') and field.get_lookup(part):\n+                continue\n+            field = opts.get_field(part)\n+            path = f'{path}__{part}'\n+            opts = field.model._meta\n+        return []\n+    except (FieldDoesNotExist, NotImplementedError):\n+        return [Error(\"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field_name.lstrip('-'), obj=model, id='models.E015')]", "normalized_occurrence": 1}
