{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..af8dc12 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -85,7 +85,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(r'\\s*\\(\\s*|\\s*\\)\\s*', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n@@ -93,12 +93,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = parts[1]\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[0]\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -136,18 +136,18 @@ def augment_descriptions_with_types(\n     has_type = set()  # type: Set[str]\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split(r'\\s*\\(\\s*|\\s*\\)\\s*', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 # :param xxx:\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = parts[1]\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[0]\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..ca88d1c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -57,18 +57,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split('\\\\s*\\\\(\\\\s*|\\\\s*\\\\)\\\\s*', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 arg = arguments.setdefault(parts[1], {})\n                 arg['param'] = True\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = parts[1]\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[0]\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -98,16 +98,16 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     has_type = set()\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n+        parts = re.split('\\\\s*\\\\(\\\\s*|\\\\s*\\\\)\\\\s*', field_name)\n         if parts[0] == 'param':\n             if len(parts) == 2:\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = parts[1]\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[0]\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n", "normalized_occurrence": 1}
