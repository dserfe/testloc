{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex dad7142..ad3d2df 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -146,6 +146,8 @@ class ForwardManyToOneDescriptor:\n         else:\n             query = {\"%s__in\" % self.field.related_query_name(): instances}\n         queryset = queryset.filter(**query)\n+        if queryset.query.low_mark != 0 or queryset.query.high_mark is not None:\n+            raise AssertionError(\"Cannot filter a query once a slice has been taken.\")\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 4910c4e..58996db 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -34,6 +34,8 @@ class ForwardManyToOneDescriptor:\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n         queryset = queryset.filter(**query)\n+        if queryset.query.low_mark != 0 or queryset.query.high_mark is not None:\n+            raise AssertionError('Cannot filter a query once a slice has been taken.')\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n", "normalized_occurrence": 1}
