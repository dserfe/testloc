{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..3e00585 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -194,36 +194,36 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n             if (not unconverged and (K > 0)) or (it == max_iter):\n-                if verbose:\n-                    print(\"Converged after %d iterations.\" % it)\n-                break\n-    else:\n+                if K > 0:\n+                    if verbose:\n+                        print(\"Converged after %d iterations.\" % it)\n+                    break\n+    if K == 0:\n         if verbose:\n             print(\"Did not converge\")\n-\n-    I = np.flatnonzero(E)\n-    K = I.size  # Identify exemplars\n-\n-    if K > 0:\n-        c = np.argmax(S[:, I], axis=1)\n-        c[I] = np.arange(K)  # Identify clusters\n-        # Refine the final set of exemplars and clusters and return results\n-        for k in range(K):\n-            ii = np.where(c == k)[0]\n-            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n-            I[k] = ii[j]\n-\n-        c = np.argmax(S[:, I], axis=1)\n-        c[I] = np.arange(K)\n-        labels = I[c]\n-        # Reduce labels to a sorted, gapless, list\n-        cluster_centers_indices = np.unique(labels)\n-        labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n         warnings.warn(\"Affinity propagation did not converge, this model \"\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n+    else:\n+        I = np.flatnonzero(E)\n+        K = I.size  # Identify exemplars\n+\n+        if K > 0:\n+            c = np.argmax(S[:, I], axis=1)\n+            c[I] = np.arange(K)  # Identify clusters\n+            # Refine the final set of exemplars and clusters and return results\n+            for k in range(K):\n+                ii = np.where(c == k)[0]\n+                j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n+                I[k] = ii[j]\n+\n+            c = np.argmax(S[:, I], axis=1)\n+            c[I] = np.arange(K)\n+            labels = I[c]\n+            # Reduce labels to a sorted, gapless, list\n+            cluster_centers_indices = np.unique(labels)\n+            labels = np.searchsorted(cluster_centers_indices, labels)\n \n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..ea98f2a 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -65,30 +65,31 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = np.sum((se == convergence_iter) + (se == 0)) != n_samples\n             if not unconverged and K > 0 or it == max_iter:\n-                if verbose:\n-                    print('Converged after %d iterations.' % it)\n-                break\n-    else:\n+                if K > 0:\n+                    if verbose:\n+                        print('Converged after %d iterations.' % it)\n+                    break\n+    if K == 0:\n         if verbose:\n             print('Did not converge')\n-    I = np.flatnonzero(E)\n-    K = I.size\n-    if K > 0:\n-        c = np.argmax(S[:, I], axis=1)\n-        c[I] = np.arange(K)\n-        for k in range(K):\n-            ii = np.where(c == k)[0]\n-            j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n-            I[k] = ii[j]\n-        c = np.argmax(S[:, I], axis=1)\n-        c[I] = np.arange(K)\n-        labels = I[c]\n-        cluster_centers_indices = np.unique(labels)\n-        labels = np.searchsorted(cluster_centers_indices, labels)\n-    else:\n         warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n         cluster_centers_indices = []\n+    else:\n+        I = np.flatnonzero(E)\n+        K = I.size\n+        if K > 0:\n+            c = np.argmax(S[:, I], axis=1)\n+            c[I] = np.arange(K)\n+            for k in range(K):\n+                ii = np.where(c == k)[0]\n+                j = np.argmax(np.sum(S[ii[:, np.newaxis], ii], axis=0))\n+                I[k] = ii[j]\n+            c = np.argmax(S[:, I], axis=1)\n+            c[I] = np.arange(K)\n+            labels = I[c]\n+            cluster_centers_indices = np.unique(labels)\n+            labels = np.searchsorted(cluster_centers_indices, labels)\n     if return_n_iter:\n         return (cluster_centers_indices, labels, it + 1)\n     else:\n", "normalized_occurrence": 1}
