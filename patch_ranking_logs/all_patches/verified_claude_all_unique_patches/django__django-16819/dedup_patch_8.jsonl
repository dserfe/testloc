{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..cbf652f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1235,10 +1235,16 @@ class MigrationAutodetector:\n             for new_index in added_indexes:\n                 new_index_dec = new_index.deconstruct()\n                 new_index_name = new_index_dec[2].pop(\"name\")\n+                # Sort fields if present to normalize field order\n+                if \"fields\" in new_index_dec[2]:\n+                    new_index_dec[2][\"fields\"] = sorted(new_index_dec[2][\"fields\"])\n                 for old_index in removed_indexes:\n                     old_index_dec = old_index.deconstruct()\n                     old_index_name = old_index_dec[2].pop(\"name\")\n-                    # Indexes are the same except for the names.\n+                    # Sort fields if present to normalize field order\n+                    if \"fields\" in old_index_dec[2]:\n+                        old_index_dec[2][\"fields\"] = sorted(old_index_dec[2][\"fields\"])\n+                    # Indexes are the same except for the names or field order.\n                     if (\n                         new_index_dec == old_index_dec\n                         and new_index_name != old_index_name\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..03a0bd3 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -505,9 +505,13 @@ class MigrationAutodetector:\n             for new_index in added_indexes:\n                 new_index_dec = new_index.deconstruct()\n                 new_index_name = new_index_dec[2].pop('name')\n+                if 'fields' in new_index_dec[2]:\n+                    new_index_dec[2]['fields'] = sorted(new_index_dec[2]['fields'])\n                 for old_index in removed_indexes:\n                     old_index_dec = old_index.deconstruct()\n                     old_index_name = old_index_dec[2].pop('name')\n+                    if 'fields' in old_index_dec[2]:\n+                        old_index_dec[2]['fields'] = sorted(old_index_dec[2]['fields'])\n                     if new_index_dec == old_index_dec and new_index_name != old_index_name:\n                         renamed_indexes.append((old_index_name, new_index_name, None))\n                         remove_from_added.append(new_index)\n", "normalized_occurrence": 1}
