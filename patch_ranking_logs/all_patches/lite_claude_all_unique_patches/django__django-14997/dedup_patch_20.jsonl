{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..fb0e664 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -419,13 +419,16 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.delete_model(old_field.remote_field.through)\n \n     def add_constraint(self, model, constraint):\n-        if isinstance(constraint, UniqueConstraint) and (\n-            constraint.condition or\n-            constraint.contains_expressions or\n-            constraint.include or\n-            constraint.deferrable\n-        ):\n-            super().add_constraint(model, constraint)\n+        if isinstance(constraint, UniqueConstraint):\n+            if constraint.contains_expressions:\n+                # For unique constraints with expressions (like F()), use the field names directly\n+                constraint.contains_expressions = False\n+                self._remake_table(model)\n+                constraint.contains_expressions = True\n+            elif (constraint.condition or constraint.include or constraint.deferrable):\n+                super().add_constraint(model, constraint)\n+            else:\n+                self._remake_table(model)\n         else:\n             self._remake_table(model)\n \n@@ -441,4 +444,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..906200c 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -201,8 +201,15 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.execute('INSERT INTO %s (%s) SELECT %s FROM %s' % (self.quote_name(new_field.remote_field.through._meta.db_table), ', '.join(['id', new_field.m2m_column_name(), new_field.m2m_reverse_name()]), ', '.join(['id', old_field.m2m_column_name(), old_field.m2m_reverse_name()]), self.quote_name(old_field.remote_field.through._meta.db_table)))\n         self.delete_model(old_field.remote_field.through)\n     def add_constraint(self, model, constraint):\n-        if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n-            super().add_constraint(model, constraint)\n+        if isinstance(constraint, UniqueConstraint):\n+            if constraint.contains_expressions:\n+                constraint.contains_expressions = False\n+                self._remake_table(model)\n+                constraint.contains_expressions = True\n+            elif constraint.condition or constraint.include or constraint.deferrable:\n+                super().add_constraint(model, constraint)\n+            else:\n+                self._remake_table(model)\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n", "normalized_occurrence": 1}
