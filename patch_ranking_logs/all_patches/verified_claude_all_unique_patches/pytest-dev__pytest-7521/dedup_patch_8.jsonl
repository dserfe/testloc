{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7521", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex f40cad0..f1f0783 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -192,11 +192,18 @@ class EncodedFile(io.TextIOWrapper):\n \n class CaptureIO(io.TextIOWrapper):\n     def __init__(self) -> None:\n-        super().__init__(io.BytesIO(), encoding=\"UTF-8\", newline=\"\", write_through=True)\n+        super().__init__(\n+            io.BytesIO(),\n+            encoding=\"UTF-8\",\n+            newline=\"\",  # Preserve all line endings\n+            line_buffering=False,  # Disable line buffering to prevent auto-conversion\n+            write_through=True,\n+        )\n \n     def getvalue(self) -> str:\n         assert isinstance(self.buffer, io.BytesIO)\n-        return self.buffer.getvalue().decode(\"UTF-8\")\n+        # Decode without any newline translation\n+        return self.buffer.getvalue().decode(\"UTF-8\", errors=\"replace\")\n \n \n class TeeCaptureIO(CaptureIO):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 230e591..5c85a5b 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -82,10 +82,10 @@ class EncodedFile(io.TextIOWrapper):\n         return self.buffer.mode.replace('b', '')\n class CaptureIO(io.TextIOWrapper):\n     def __init__(self) -> None:\n-        super().__init__(io.BytesIO(), encoding='UTF-8', newline='', write_through=True)\n+        super().__init__(io.BytesIO(), encoding='UTF-8', newline='', line_buffering=False, write_through=True)\n     def getvalue(self) -> str:\n         assert isinstance(self.buffer, io.BytesIO)\n-        return self.buffer.getvalue().decode('UTF-8')\n+        return self.buffer.getvalue().decode('UTF-8', errors='replace')\n class TeeCaptureIO(CaptureIO):\n     def __init__(self, other: TextIO) -> None:\n         self._other = other\n", "normalized_occurrence": 1}
