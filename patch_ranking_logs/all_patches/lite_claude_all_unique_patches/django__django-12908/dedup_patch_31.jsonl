{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..c73d297 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,11 +475,19 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n-        return result, params\n+            \n+        # Wrap in subquery if distinct is used to allow DISTINCT ON to work properly\n+        if self.query.distinct:\n+            combined_sql = '(SELECT * FROM ({}) AS {})'.format(\n+                combined_sql,\n+                self.connection.ops.quote_name('subquery')\n+            )\n+            \n+        return [combined_sql], params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..0d160d6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,11 +267,13 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n-        return (result, params)\n+        if self.query.distinct:\n+            combined_sql = '(SELECT * FROM ({}) AS {})'.format(combined_sql, self.connection.ops.quote_name('subquery'))\n+        return ([combined_sql], params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n         try:\n", "normalized_occurrence": 1}
