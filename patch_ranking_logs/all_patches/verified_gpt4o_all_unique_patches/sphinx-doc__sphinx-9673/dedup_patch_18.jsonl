{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..dd8bc1a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -64,7 +64,14 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             if app.config.autodoc_typehints_description_target == \"all\":\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n-                augment_descriptions_with_types(field_list, annotations[fullname])\n+                if app.config.autodoc_typehints_description_target == \"documented\":\n+                    documented_return = any(field[0].astext() == 'Returns' for field in field_list)\n+                    if documented_return:\n+                        for field in field_list:\n+                            if field[0].astext() == 'Returns' and 'return' in annotations[fullname]:\n+                                field[1] += nodes.Text(f\" ({annotations[fullname]['return']})\")\n+                else:\n+                    augment_descriptions_with_types(field_list, annotations[fullname])\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..6cc28f9 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -41,6 +41,12 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         for field_list in field_lists:\n             if app.config.autodoc_typehints_description_target == 'all':\n                 modify_field_list(field_list, annotations[fullname])\n+            elif app.config.autodoc_typehints_description_target == 'documented':\n+                documented_return = any((field[0].astext() == 'Returns' for field in field_list))\n+                if documented_return:\n+                    for field in field_list:\n+                        if field[0].astext() == 'Returns' and 'return' in annotations[fullname]:\n+                            field[1] += nodes.Text(f\" ({annotations[fullname]['return']})\")\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n def insert_field_list(node: Element) -> nodes.field_list:\n", "normalized_occurrence": 1}
