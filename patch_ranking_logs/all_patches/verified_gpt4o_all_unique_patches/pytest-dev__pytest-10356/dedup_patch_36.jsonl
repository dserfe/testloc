{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 72e064c..1f55742 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -224,7 +224,7 @@ class Node(metaclass=NodeMeta):\n         self.keywords: MutableMapping[str, Any] = NodeKeywords(self)\n \n         #: The marker objects belonging to this node.\n-        self.own_markers: List[Mark] = []\n+        self.own_markers: List[Mark] = self._collect_own_markers()\n \n         #: Allow adding of extra keywords to use for matching.\n         self.extra_keyword_matches: Set[str] = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex f0747c3..75d4edb 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -141,7 +141,7 @@ class Node(metaclass=NodeMeta):\n             path = getattr(parent, 'path', None)\n         self.path: Path = _imply_path(type(self), path, fspath=fspath)\n         self.keywords: MutableMapping[str, Any] = NodeKeywords(self)\n-        self.own_markers: List[Mark] = []\n+        self.own_markers: List[Mark] = self._collect_own_markers()\n         self.extra_keyword_matches: Set[str] = set()\n         if nodeid is not None:\n             assert '::()' not in nodeid\n", "normalized_occurrence": 1}
