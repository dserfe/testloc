{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..97dc646 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -778,7 +778,8 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         subs = [translate(sub) for sub in subs]\n \n         mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        # Ensure the entire symbol name is preserved\n+        mname.appendChild(self.dom.createTextNode(sym.name if sym.name.isalnum() else name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n                 x.appendChild(self.dom.createTextNode(name))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..36ef7f5 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -545,7 +545,7 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n         mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n+        mname.appendChild(self.dom.createTextNode(sym.name if sym.name.isalnum() else name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n                 x.appendChild(self.dom.createTextNode(name))\n", "normalized_occurrence": 1}
