{"model_name_or_path": "agentless", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..47c2309 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,11 +368,17 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n+        if connection.vendor in ['sqlite', 'oracle']:\n+            sql, params = super().as_sql(compiler, connection)\n+            return f\"NOT EXISTS (SELECT 1 FROM json_each({self.lhs.lhs.output_field.column}) WHERE json_each.key = %s)\", [self.lhs.key_name]\n         return super().as_sql(compiler, connection)\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n+        if connection.vendor in ['sqlite', 'oracle']:\n+            sql, params = super().as_sql(compiler, connection)\n+            return f\"NOT EXISTS (SELECT 1 FROM json_each({self.lhs.lhs.output_field.column}) WHERE json_each.key = %s)\", [self.lhs.key_name]\n         return super().as_sql(compiler, connection)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..c503b96 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -241,10 +241,16 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n+        if connection.vendor in ['sqlite', 'oracle']:\n+            sql, params = super().as_sql(compiler, connection)\n+            return (f'NOT EXISTS (SELECT 1 FROM json_each({self.lhs.lhs.output_field.column}) WHERE json_each.key = %s)', [self.lhs.key_name])\n         return super().as_sql(compiler, connection)\n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n+        if connection.vendor in ['sqlite', 'oracle']:\n+            sql, params = super().as_sql(compiler, connection)\n+            return (f'NOT EXISTS (SELECT 1 FROM json_each({self.lhs.lhs.output_field.column}) WHERE json_each.key = %s)', [self.lhs.key_name])\n         return super().as_sql(compiler, connection)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n", "normalized_occurrence": 1}
