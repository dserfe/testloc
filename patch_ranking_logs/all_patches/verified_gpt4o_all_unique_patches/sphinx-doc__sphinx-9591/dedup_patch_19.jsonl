{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..331e33b 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -20,8 +20,17 @@ from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n \n \n+from sphinx.ext.autodoc import PropertyDocumenter\n+\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    if isinstance(obj, property):\n+        if obj.fget:\n+            obj = obj.fget\n+        elif obj.func:\n+            obj = obj.func\n+\n+    PropertyDocumenter.record_property_typehint(app, name, obj)\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..5802d4e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -6,7 +6,14 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.ext.autodoc import PropertyDocumenter\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    if isinstance(obj, property):\n+        if obj.fget:\n+            obj = obj.fget\n+        elif obj.func:\n+            obj = obj.func\n+    PropertyDocumenter.record_property_typehint(app, name, obj)\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n", "normalized_occurrence": 1}
