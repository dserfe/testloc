{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-5414", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex b6afac6..e7e1913 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -350,11 +350,12 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     @staticmethod\n     def _get_idna_encoded_host(host):\n         import idna\n+        from requests.exceptions import InvalidUrl\n \n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidUrl(\"URL has an invalid label.\")\n         return host\n \n     def prepare_url(self, url, params):\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 0a92d68..fab77e4 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -170,10 +170,11 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     @staticmethod\n     def _get_idna_encoded_host(host):\n         import idna\n+        from requests.exceptions import InvalidUrl\n         try:\n             host = idna.encode(host, uts46=True).decode('utf-8')\n         except idna.IDNAError:\n-            raise UnicodeError\n+            raise InvalidUrl('URL has an invalid label.')\n         return host\n     def prepare_url(self, url, params):\n         if isinstance(url, bytes):\n", "normalized_occurrence": 1}
