{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20859", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex f63ebf0..f02f6f7 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -430,13 +430,9 @@ class Legend(Artist):\n         # method.\n         self._legend_box = None\n \n-        if isinstance(parent, Axes):\n-            self.isaxes = True\n-            self.axes = parent\n-            self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n-            self.isaxes = False\n-            self.set_figure(parent)\n+        if isinstance(parent, FigureBase):\n+            self.isaxes = isinstance(parent, Axes)\n+            self.set_figure(parent.figure if self.isaxes else parent)\n         else:\n             raise TypeError(\"Legend needs either Axes or Figure as parent\")\n         self.parent = parent\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 8dea438..92e79f5 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -90,13 +90,9 @@ class Legend(Artist):\n         reps = self.scatterpoints // len(self._scatteryoffsets) + 1\n         self._scatteryoffsets = np.tile(self._scatteryoffsets, reps)[:self.scatterpoints]\n         self._legend_box = None\n-        if isinstance(parent, Axes):\n-            self.isaxes = True\n-            self.axes = parent\n-            self.set_figure(parent.figure)\n-        elif isinstance(parent, Figure):\n-            self.isaxes = False\n-            self.set_figure(parent)\n+        if isinstance(parent, FigureBase):\n+            self.isaxes = isinstance(parent, Axes)\n+            self.set_figure(parent.figure if self.isaxes else parent)\n         else:\n             raise TypeError('Legend needs either Axes or Figure as parent')\n         self.parent = parent\n", "normalized_occurrence": 1}
