{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..9552606 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1196,24 +1196,22 @@ class MigrationAutodetector:\n             new_model_state = self.to_state.models[app_label, model_name]\n             if (old_model_state.options.get(\"order_with_respect_to\") !=\n                     new_model_state.options.get(\"order_with_respect_to\")):\n-                # Make sure it comes second if we're adding\n-                # (removal dependency is part of RemoveField)\n-                dependencies = []\n-                if new_model_state.options.get(\"order_with_respect_to\"):\n-                    dependencies.append((\n-                        app_label,\n-                        model_name,\n-                        new_model_state.options[\"order_with_respect_to\"],\n-                        True,\n-                    ))\n-                # Actually generate the operation\n+                # Generate the operation\n                 self.add_operation(\n                     app_label,\n                     operations.AlterOrderWithRespectTo(\n                         name=model_name,\n                         order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n-                    ),\n-                    dependencies=dependencies,\n+                    )\n+                )\n+                # Ensure it precedes any AddIndex operations\n+                self.add_operation(\n+                    app_label,\n+                    operations.AddField(\n+                        model_name=model_name,\n+                        name='_order',\n+                        field=models.IntegerField(default=0)\n+                    )\n                 )\n \n     def generate_altered_managers(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..7854063 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -579,10 +579,8 @@ class MigrationAutodetector:\n             old_model_state = self.from_state.models[app_label, old_model_name]\n             new_model_state = self.to_state.models[app_label, model_name]\n             if old_model_state.options.get('order_with_respect_to') != new_model_state.options.get('order_with_respect_to'):\n-                dependencies = []\n-                if new_model_state.options.get('order_with_respect_to'):\n-                    dependencies.append((app_label, model_name, new_model_state.options['order_with_respect_to'], True))\n-                self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to')), dependencies=dependencies)\n+                self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to')))\n+                self.add_operation(app_label, operations.AddField(model_name=model_name, name='_order', field=models.IntegerField(default=0)))\n     def generate_altered_managers(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n", "normalized_occurrence": 1}
