{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..6564e5a 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -171,6 +171,7 @@ class Text(Artist):\n         self.set_text(text)\n         self.set_color(\n             color if color is not None else mpl.rcParams[\"text.color\"])\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self.set_fontproperties(fontproperties)\n         self.set_usetex(usetex)\n         self.set_parse_math(parse_math if parse_math is not None else\n@@ -571,6 +572,10 @@ class Text(Artist):\n         \"\"\"Return whether the text can be wrapped.\"\"\"\n         return self._wrap\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text should be antialiased.\"\"\"\n+        return self._antialiased\n+\n     def set_wrap(self, wrap):\n         \"\"\"\n         Set whether the text can be wrapped.\n@@ -589,6 +594,17 @@ class Text(Artist):\n         \"\"\"\n         self._wrap = wrap\n \n+    def set_antialiased(self, antialiased):\n+        \"\"\"\n+        Set whether to use antialiased rendering.\n+\n+        Parameters\n+        ----------\n+        antialiased : bool\n+        \"\"\"\n+        self._antialiased = antialiased\n+        self.stale = True\n+\n     def _get_wrap_line_width(self):\n         \"\"\"\n         Return the maximum line width for wrapping text based on the current\n@@ -737,6 +753,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n \n             angle = self.get_rotation()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..f95fae6 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -50,6 +50,7 @@ class Text(Artist):\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.set_fontproperties(fontproperties)\n         self.set_usetex(usetex)\n         self.set_parse_math(parse_math if parse_math is not None else mpl.rcParams['text.parse_math'])\n@@ -281,8 +282,13 @@ class Text(Artist):\n         self._update_clip_properties()\n     def get_wrap(self):\n         return self._wrap\n+    def get_antialiased(self):\n+        return self._antialiased\n     def set_wrap(self, wrap):\n         self._wrap = wrap\n+    def set_antialiased(self, antialiased):\n+        self._antialiased = antialiased\n+        self.stale = True\n     def _get_wrap_line_width(self):\n         x0, y0 = self.get_transform().transform(self.get_position())\n         figure_box = self.get_figure().get_window_extent()\n@@ -370,6 +376,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n             angle = self.get_rotation()\n             for line, wh, x, y in info:\n", "normalized_occurrence": 1}
