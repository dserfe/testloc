{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..8e4a6e3 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -361,20 +361,32 @@ class Node(metaclass=NodeMeta):\n         else:\n             truncate_locals = True\n \n+        # Ensure paths are always relative to the original directory\n+        original_dir = self.config.invocation_params.dir\n+\n         try:\n             os.getcwd()\n-            abspath = False\n         except OSError:\n             abspath = True\n+        else:\n+            abspath = False\n \n-        return excinfo.getrepr(\n-            funcargs=True,\n-            abspath=abspath,\n-            showlocals=self.config.getoption(\"showlocals\", False),\n-            style=style,\n-            tbfilter=False,  # pruned already, or in --fulltrace mode.\n-            truncate_locals=truncate_locals,\n-        )\n+        # Temporarily change back to the original directory to get the correct traceback\n+        os.chdir(original_dir)\n+        try:\n+            repr_result = excinfo.getrepr(\n+                funcargs=True,\n+                abspath=abspath,\n+                showlocals=self.config.getoption(\"showlocals\", False),\n+                style=style,\n+                tbfilter=False,  # pruned already, or in --fulltrace mode.\n+                truncate_locals=truncate_locals,\n+            )\n+        finally:\n+            # Change back to the current working directory\n+            os.chdir(self.fspath)\n+\n+        return repr_result\n \n     def repr_failure(\n         self, excinfo, style=None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..2e4cf49 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -289,12 +289,19 @@ class Node(metaclass=NodeMeta):\n             truncate_locals = False\n         else:\n             truncate_locals = True\n+        original_dir = self.config.invocation_params.dir\n         try:\n             os.getcwd()\n-            abspath = False\n         except OSError:\n             abspath = True\n-        return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        else:\n+            abspath = False\n+        os.chdir(original_dir)\n+        try:\n+            repr_result = excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        finally:\n+            os.chdir(self.fspath)\n+        return repr_result\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n         \"\"\"\n", "normalized_occurrence": 1}
