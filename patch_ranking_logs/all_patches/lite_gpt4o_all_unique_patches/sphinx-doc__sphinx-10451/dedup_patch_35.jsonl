{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..f680853 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -123,7 +123,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            param_prefix = '*' if name.startswith('*') else '**' if name.startswith('**') else ''\n+            field += nodes.field_name('', f'{param_prefix}param {name}')\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n@@ -149,15 +150,11 @@ def augment_descriptions_with_types(\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                # :param xxx:\n-                has_description.add(parts[1])\n-            elif len(parts) > 2:\n-                # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n-                has_description.add(name)\n-                has_type.add(name)\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n+            param_name = parts[1] if len(parts) == 2 else ' '.join(parts[2:])\n+            has_description.add(param_name)\n+            if len(parts) > 2 or parts[0] in ('*param', '**param'):\n+                has_type.add(param_name)\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..8e322a6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,7 +93,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            param_prefix = '*' if name.startswith('*') else '**' if name.startswith('**') else ''\n+            field += nodes.field_name('', f'{param_prefix}param {name}')\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n@@ -111,13 +112,11 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n     for field in fields:\n         field_name = field[0].astext()\n         parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                has_description.add(parts[1])\n-            elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n-                has_description.add(name)\n-                has_type.add(name)\n+        if parts[0] == 'param' or parts[0] == '*param' or parts[0] == '**param':\n+            param_name = parts[1] if len(parts) == 2 else ' '.join(parts[2:])\n+            has_description.add(param_name)\n+            if len(parts) > 2 or parts[0] in ('*param', '**param'):\n+                has_type.add(param_name)\n         elif parts[0] == 'type':\n             name = ' '.join(parts[1:])\n             has_type.add(name)\n", "normalized_occurrence": 1}
