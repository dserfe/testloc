{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..4bf7fa2 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -89,6 +89,22 @@ class DotBase(Mark):\n     ) -> Artist:\n \n         key = {v: value for v in variables}\n+        \n+        # Get formatter and its offset if using ScalarFormatter\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], \"_label_params\"):\n+                formatter = scales[var]._get_formatter(\n+                    None,\n+                    scales[var]._label_params.get(\"formatter\"),\n+                    scales[var]._label_params.get(\"like\"),\n+                    scales[var]._label_params.get(\"base\"),\n+                    scales[var]._label_params.get(\"unit\")\n+                )\n+                if isinstance(formatter, ScalarFormatter):\n+                    # Apply offset to the value if it exists\n+                    if hasattr(formatter, 'offset'):\n+                        value = value / (10 ** formatter.orderOfMagnitude)\n+                        key[var] = value\n         res = self._resolve_properties(key, scales)\n \n         return mpl.collections.PathCollection(\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..13b4901 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -40,6 +40,13 @@ class DotBase(Mark):\n             ax.add_collection(points)\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], '_label_params'):\n+                formatter = scales[var]._get_formatter(None, scales[var]._label_params.get('formatter'), scales[var]._label_params.get('like'), scales[var]._label_params.get('base'), scales[var]._label_params.get('unit'))\n+                if isinstance(formatter, ScalarFormatter):\n+                    if hasattr(formatter, 'offset'):\n+                        value = value / 10 ** formatter.orderOfMagnitude\n+                        key[var] = value\n         res = self._resolve_properties(key, scales)\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n", "normalized_occurrence": 1}
