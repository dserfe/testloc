{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..816470a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,10 +356,39 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        \n+        # Handle negative powers and fractions more consistently with pretty printer\n+        if expr.is_commutative:\n+            a = []  # items in the numerator\n+            b = []  # items that are in the denominator (if any)\n+            \n+            if self.order not in ('old', 'none'):\n+                args = expr.as_ordered_factors()\n+            else:\n+                args = expr.args\n+\n+            # Split factors into numerator/denominator similar to pretty printer\n+            for item in args:\n+                if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n+                    if item.exp != -1:\n+                        b.append(Pow(item.base, -item.exp, evaluate=False))\n+                    else:\n+                        b.append(Pow(item.base, -item.exp))\n+                elif item.is_Rational and item is not S.Infinity:\n+                    if item.p != 1:\n+                        a.append(Rational(item.p))\n+                    if item.q != 1:\n+                        b.append(Rational(item.q))\n+                else:\n+                    a.append(item)\n+                    \n+            numer = Mul(*a) if a else S.One\n+            denom = Mul(*b) if b else S.One\n+        else:\n+            from sympy.simplify import fraction\n+            numer, denom = fraction(expr, exact=True)\n \n         def convert(expr):\n             if not expr.is_Mul:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..238000c 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,10 +165,33 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        if expr.is_commutative:\n+            a = []\n+            b = []\n+            if self.order not in ('old', 'none'):\n+                args = expr.as_ordered_factors()\n+            else:\n+                args = expr.args\n+            for item in args:\n+                if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:\n+                    if item.exp != -1:\n+                        b.append(Pow(item.base, -item.exp, evaluate=False))\n+                    else:\n+                        b.append(Pow(item.base, -item.exp))\n+                elif item.is_Rational and item is not S.Infinity:\n+                    if item.p != 1:\n+                        a.append(Rational(item.p))\n+                    if item.q != 1:\n+                        b.append(Rational(item.q))\n+                else:\n+                    a.append(item)\n+            numer = Mul(*a) if a else S.One\n+            denom = Mul(*b) if b else S.One\n+        else:\n+            from sympy.simplify import fraction\n+            numer, denom = fraction(expr, exact=True)\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n", "normalized_occurrence": 1}
