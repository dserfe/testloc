{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..4f71d17 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -329,13 +329,13 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         \"\"\"\n-        Creates an HDU header from a byte string containing the entire header\n-        data.\n+        Creates an HDU header from a byte string or unicode string containing\n+        the entire header data.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : bytes or str\n+           Byte string or unicode string containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -361,6 +361,9 @@ class Header:\n         idx = 0\n         image = []\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n+\n         while idx < len(data):\n             if require_full_cardlength:\n                 end_idx = idx + Card.length\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex a818589..b874bf4 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -165,6 +165,8 @@ class Header:\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n         idx = 0\n         image = []\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         while idx < len(data):\n             if require_full_cardlength:\n                 end_idx = idx + Card.length\n", "normalized_occurrence": 3}
