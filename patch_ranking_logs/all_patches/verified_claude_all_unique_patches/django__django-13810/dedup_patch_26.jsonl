{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13810", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2cbbab1..d5e4799 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -50,19 +50,29 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n+                # Store the original handler state\n+                original_handler = handler\n+                original_handler_is_async = handler_is_async\n+                \n                 # Adapt handler, if needed.\n-                handler = self.adapt_method_mode(\n+                adapted_handler = self.adapt_method_mode(\n                     middleware_is_async, handler, handler_is_async,\n                     debug=settings.DEBUG, name='middleware %s' % middleware_path,\n                 )\n-                mw_instance = middleware(handler)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                # Restore original handler state\n+                handler = original_handler\n+                handler_is_async = original_handler_is_async\n                 continue\n+                \n+            # If middleware is used, update the handler\n+            handler = adapted_handler\n \n             if mw_instance is None:\n                 raise ImproperlyConfigured(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex db9e015..ff1fe57 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -34,15 +34,20 @@ class BaseHandler:\n             else:\n                 middleware_is_async = middleware_can_async\n             try:\n-                handler = self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)\n-                mw_instance = middleware(handler)\n+                original_handler = handler\n+                original_handler_is_async = handler_is_async\n+                adapted_handler = self.adapt_method_mode(middleware_is_async, handler, handler_is_async, debug=settings.DEBUG, name='middleware %s' % middleware_path)\n+                mw_instance = middleware(adapted_handler)\n             except MiddlewareNotUsed as exc:\n                 if settings.DEBUG:\n                     if str(exc):\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                handler = original_handler\n+                handler_is_async = original_handler_is_async\n                 continue\n+            handler = adapted_handler\n             if mw_instance is None:\n                 raise ImproperlyConfigured('Middleware factory %s returned None.' % middleware_path)\n             if hasattr(mw_instance, 'process_view'):\n", "normalized_occurrence": 1}
