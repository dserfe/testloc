{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..96e3dbd 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -289,6 +289,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         \"\"\"\n         self._validate_params()\n         X = self._validate_data(X, accept_sparse=[\"csc\"], dtype=tree_dtype)\n+        self.feature_names_in_ = getattr(X, \"columns\", None)\n         if issparse(X):\n             # Pre-sort indices to avoid that each individual tree of the\n             # ensemble sorts the indices.\n@@ -345,7 +346,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        # Pass the proper feature names when calling score_samples\n+        self.offset_ = np.percentile(self.score_samples(X, feature_names_in=self.feature_names_in_), 100.0 * self.contamination)\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..fd8c67f 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -24,6 +24,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n     def fit(self, X, y=None, sample_weight=None):\n         self._validate_params()\n         X = self._validate_data(X, accept_sparse=['csc'], dtype=tree_dtype)\n+        self.feature_names_in_ = getattr(X, 'columns', None)\n         if issparse(X):\n             X.sort_indices()\n         rnd = check_random_state(self.random_state)\n@@ -46,7 +47,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        self.offset_ = np.percentile(self.score_samples(X, feature_names_in=self.feature_names_in_), 100.0 * self.contamination)\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
