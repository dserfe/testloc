{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..eaf2ebd 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -249,6 +249,25 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     xfailed = item._store.get(xfailed_key, None)\n     if xfailed is None:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    \n+    if xfailed and not item.config.option.runxfail:\n+        if not xfailed.run:\n+            xfail(\"[NOTRUN] \" + xfailed.reason)\n+        else:\n+            try:\n+                yield\n+            except Exception:\n+                if xfailed.raises is None or isinstance(sys.exc_info()[1], xfailed.raises):\n+                    xfail(xfailed.reason)\n+                else:\n+                    raise\n+            else:\n+                if xfailed.strict:\n+                    unexpectedsuccess = xfailed.reason or \"reason not given\"\n+                    item._store[unexpectedsuccess_key] = unexpectedsuccess\n+                    pytest.fail(\"[XPASS(strict)] \" + unexpectedsuccess)\n+            return\n+    yield\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..748ca68 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -132,6 +132,24 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     xfailed = item._store.get(xfailed_key, None)\n     if xfailed is None:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n+    if xfailed and (not item.config.option.runxfail):\n+        if not xfailed.run:\n+            xfail('[NOTRUN] ' + xfailed.reason)\n+        else:\n+            try:\n+                yield\n+            except Exception:\n+                if xfailed.raises is None or isinstance(sys.exc_info()[1], xfailed.raises):\n+                    xfail(xfailed.reason)\n+                else:\n+                    raise\n+            else:\n+                if xfailed.strict:\n+                    unexpectedsuccess = xfailed.reason or 'reason not given'\n+                    item._store[unexpectedsuccess_key] = unexpectedsuccess\n+                    pytest.fail('[XPASS(strict)] ' + unexpectedsuccess)\n+            return\n+    yield\n     if not item.config.option.runxfail:\n         if xfailed and (not xfailed.run):\n             xfail('[NOTRUN] ' + xfailed.reason)\n", "normalized_occurrence": 1}
