{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18532", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 97eb81a..0bea386 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -504,10 +504,12 @@ class Basic(metaclass=ManagedProperties):\n             types = tuple(\n                 [t if isinstance(t, type) else type(t) for t in types])\n         else:\n-            types = (Atom,)\n+            types = ()\n         result = set()\n         for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n+            if not types and not expr.args:\n+                result.add(expr)\n+            elif isinstance(expr, types):\n                 result.add(expr)\n         return result\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex eec7295..3ad90d3 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -187,10 +187,12 @@ class Basic(metaclass=ManagedProperties):\n         if types:\n             types = tuple([t if isinstance(t, type) else type(t) for t in types])\n         else:\n-            types = (Atom,)\n+            types = ()\n         result = set()\n         for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n+            if not types and (not expr.args):\n+                result.add(expr)\n+            elif isinstance(expr, types):\n                 result.add(expr)\n         return result\n     @property\n", "normalized_occurrence": 1}
