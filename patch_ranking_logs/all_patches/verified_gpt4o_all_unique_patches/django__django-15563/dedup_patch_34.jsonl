{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..f93830f 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,7 +988,21 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        # Ensure we are updating the correct model in case of multi-table inheritance\n+        update_values = {}\n+        for k, v in kwargs.items():\n+            field = self.model._meta.get_field(k)\n+            if not field.concrete or field.many_to_many:\n+                continue\n+            # Add the update value to the appropriate model table\n+            model = field.model\n+            if model not in update_values:\n+                update_values[model] = {}\n+            update_values[model][k] = v\n+        \n+        # Now add update values to the query\n+        for model, values in update_values.items():\n+            query.add_update_values(values, model=model)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..f56af28 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,7 +533,17 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n+        update_values = {}\n+        for k, v in kwargs.items():\n+            field = self.model._meta.get_field(k)\n+            if not field.concrete or field.many_to_many:\n+                continue\n+            model = field.model\n+            if model not in update_values:\n+                update_values[model] = {}\n+            update_values[model][k] = v\n+        for model, values in update_values.items():\n+            query.add_update_values(values, model=model)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n             rows = query.get_compiler(self.db).execute_sql(CURSOR)\n", "normalized_occurrence": 1}
