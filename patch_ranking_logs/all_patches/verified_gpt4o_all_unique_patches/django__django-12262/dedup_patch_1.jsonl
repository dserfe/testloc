{"model_name_or_path": "agentless", "instance_id": "django__django-12262", "model_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex e9453ed..1a24070 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -251,10 +251,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n     args = []\n     kwargs = {}\n     unhandled_params = list(params)\n-    unhandled_kwargs = [\n-        kwarg for kwarg in kwonly\n-        if not kwonly_defaults or kwarg not in kwonly_defaults\n-    ]\n+    unhandled_kwargs = list(kwonly)\n     for bit in bits:\n         # First we try to extract a potential kwarg from the bit\n         kwarg = token_kwargs([bit], parser)\n@@ -302,10 +299,17 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,\n         # number of defaults.\n         unhandled_params = unhandled_params[:-len(defaults)]\n     if unhandled_params or unhandled_kwargs:\n-        # Some positional arguments were not supplied\n-        raise TemplateSyntaxError(\n-            \"'%s' did not receive value(s) for the argument(s): %s\" %\n-            (name, \", \".join(\"'%s'\" % p for p in unhandled_params + unhandled_kwargs)))\n+        # Some positional or keyword-only arguments were not supplied\n+        # Provide default values for keyword-only arguments where applicable\n+        if kwonly_defaults:\n+            for kwarg in unhandled_kwargs[:]:\n+                if kwarg in kwonly_defaults:\n+                    kwargs[kwarg] = parser.compile_filter(kwonly_defaults[kwarg])\n+                    unhandled_kwargs.remove(kwarg)\n+        if unhandled_params or unhandled_kwargs:\n+            raise TemplateSyntaxError(\n+                \"'%s' did not receive value(s) for the argument(s): %s\" %\n+                (name, \", \".join(\"'%s'\" % p for p in unhandled_params + unhandled_kwargs)))\n     return args, kwargs\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/library.py b/django/template/library.py\nindex fb58a77..703098e 100644\n--- a/django/template/library.py\n+++ b/django/template/library.py\n@@ -146,7 +146,7 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_de\n     args = []\n     kwargs = {}\n     unhandled_params = list(params)\n-    unhandled_kwargs = [kwarg for kwarg in kwonly if not kwonly_defaults or kwarg not in kwonly_defaults]\n+    unhandled_kwargs = list(kwonly)\n     for bit in bits:\n         kwarg = token_kwargs([bit], parser)\n         if kwarg:\n@@ -173,7 +173,13 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults, kwonly, kwonly_de\n     if defaults is not None:\n         unhandled_params = unhandled_params[:-len(defaults)]\n     if unhandled_params or unhandled_kwargs:\n-        raise TemplateSyntaxError(\"'%s' did not receive value(s) for the argument(s): %s\" % (name, ', '.join((\"'%s'\" % p for p in unhandled_params + unhandled_kwargs))))\n+        if kwonly_defaults:\n+            for kwarg in unhandled_kwargs[:]:\n+                if kwarg in kwonly_defaults:\n+                    kwargs[kwarg] = parser.compile_filter(kwonly_defaults[kwarg])\n+                    unhandled_kwargs.remove(kwarg)\n+        if unhandled_params or unhandled_kwargs:\n+            raise TemplateSyntaxError(\"'%s' did not receive value(s) for the argument(s): %s\" % (name, ', '.join((\"'%s'\" % p for p in unhandled_params + unhandled_kwargs))))\n     return (args, kwargs)\n def import_library(name):\n     try:\n", "normalized_occurrence": 1}
