{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..8d223c4 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -812,6 +812,49 @@ class AssertionRewriter(ast.NodeVisitor):\n         return res, self.explanation_param(self.display(res))\n \n     def visit_Assert(self, assert_):\n+        def _rewrite_all_any(self, call):\n+            func_name = call.func.id\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, [])\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+\n+            # Unroll the iterable for detailed failure messages\n+            iterable = call.args[0]\n+            if isinstance(iterable, ast.GeneratorExp):\n+                iterable = ast.ListComp(elt=iterable.elt, generators=iterable.generators)\n+            elif isinstance(iterable, ast.Call) and isinstance(iterable.func, ast.Name) and iterable.func.id == \"iter\":\n+                iterable = iterable.args[0]\n+\n+            loop_var = ast.Name(id=\"item\", ctx=ast.Store())\n+            loop_body = [\n+                ast.If(\n+                    test=ast.UnaryOp(op=ast.Not(), operand=iterable.elt),\n+                    body=[\n+                        ast.Raise(\n+                            exc=ast.Call(\n+                                func=ast.Name(id=\"AssertionError\", ctx=ast.Load()),\n+                                args=[ast.Str(s=\"{}({}) failed for item: {}\".format(func_name, expl, self.display(loop_var)))],\n+                                keywords=[]\n+                            ),\n+                            cause=None\n+                        )\n+                    ],\n+                    orelse=[]\n+                )\n+            ]\n+            loop = ast.For(target=loop_var, iter=iterable, body=loop_body, orelse=[])\n+            self.statements.append(loop)\n+\n+            return res, outer_expl\n         \"\"\"Return the AST statements to replace the ast.Assert instance.\n \n         This rewrites the test of an assertion to provide\n@@ -965,6 +1008,8 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            return self._rewrite_all_any(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -998,6 +1043,8 @@ warn_explicit(\n         return new_starred, \"*\" + expl\n \n     def visit_Call_legacy(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            return self._rewrite_all_any(call)\n         \"\"\"\n         visit `ast.Call nodes on 3.4 and below`\n         \"\"\"\n@@ -1081,4 +1128,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..387c6ff 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -448,6 +448,31 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(node)\n         return (res, self.explanation_param(self.display(res)))\n     def visit_Assert(self, assert_):\n+        def _rewrite_all_any(self, call):\n+            func_name = call.func.id\n+            new_func, func_expl = self.visit(call.func)\n+            arg_expls = []\n+            new_args = []\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, [])\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            iterable = call.args[0]\n+            if isinstance(iterable, ast.GeneratorExp):\n+                iterable = ast.ListComp(elt=iterable.elt, generators=iterable.generators)\n+            elif isinstance(iterable, ast.Call) and isinstance(iterable.func, ast.Name) and (iterable.func.id == 'iter'):\n+                iterable = iterable.args[0]\n+            loop_var = ast.Name(id='item', ctx=ast.Store())\n+            loop_body = [ast.If(test=ast.UnaryOp(op=ast.Not(), operand=iterable.elt), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.Str(s='{}({}) failed for item: {}'.format(func_name, expl, self.display(loop_var)))], keywords=[]), cause=None)], orelse=[])]\n+            loop = ast.For(target=loop_var, iter=iterable, body=loop_body, orelse=[])\n+            self.statements.append(loop)\n+            return (res, outer_expl)\n+        'Return the AST statements to replace the ast.Assert instance.\\n\\n        This rewrites the test of an assertion to provide\\n        intermediate values and replace it with an if statement which\\n        raises an assertion error with a detailed explanation in case\\n        the expression is false.\\n\\n        '\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n@@ -544,6 +569,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            return self._rewrite_all_any(call)\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -570,6 +598,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_starred = ast.Starred(res, starred.ctx)\n         return (new_starred, '*' + expl)\n     def visit_Call_legacy(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            return self._rewrite_all_any(call)\n+        '\\n        visit `ast.Call nodes on 3.4 and below`\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
