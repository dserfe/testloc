{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..2aafac8 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,10 +403,12 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(\n-            model, columns, exclude=meta_constraint_names | meta_index_names,\n-            **constraint_kwargs\n-        )\n+        constraint_names = [\n+            name for name in self._constraint_names(\n+                model, columns, exclude=meta_constraint_names | meta_index_names,\n+                **constraint_kwargs\n+            ) if not self._is_unique_constraint(model, name)\n+        ]\n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n@@ -415,7 +417,12 @@ class BaseDatabaseSchemaEditor:\n             ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n-    def alter_db_table(self, model, old_db_table, new_db_table):\n+    def _is_unique_constraint(self, model, constraint_name):\n+        \"\"\"Check if the constraint name represents a unique constraint.\"\"\"\n+        for constraint in model._meta.constraints:\n+            if constraint.name == constraint_name and isinstance(constraint, models.UniqueConstraint):\n+                return True\n+        return False\n         \"\"\"Rename the table a model points to.\"\"\"\n         if (old_db_table == new_db_table or\n             (self.connection.features.ignores_table_name_case and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..7f8898a 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,11 +229,15 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        constraint_names = [name for name in self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs) if not self._is_unique_constraint(model, name)]\n         if len(constraint_names) != 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n-    def alter_db_table(self, model, old_db_table, new_db_table):\n+    def _is_unique_constraint(self, model, constraint_name):\n+        for constraint in model._meta.constraints:\n+            if constraint.name == constraint_name and isinstance(constraint, models.UniqueConstraint):\n+                return True\n+        return False\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n         self.execute(self.sql_rename_table % {'old_table': self.quote_name(old_db_table), 'new_table': self.quote_name(new_db_table)})\n", "normalized_occurrence": 1}
