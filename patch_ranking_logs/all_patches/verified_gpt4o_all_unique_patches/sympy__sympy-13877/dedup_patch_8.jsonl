{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..633bb94 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -213,7 +213,11 @@ class MatrixDeterminant(MatrixCommon):\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n \n-        return cancel(bareiss(self))\n+        # Check if the matrix contains symbolic entries\n+        if self.has(Symbol):\n+            return self._eval_det_berkowitz()\n+        else:\n+            return cancel(bareiss(self))\n \n     def _eval_det_berkowitz(self):\n         \"\"\" Use the Berkowitz algorithm to compute the determinant.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..7deeefe 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -86,7 +86,10 @@ class MatrixDeterminant(MatrixCommon):\n                     cancel(ret)\n                 return ret\n             return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n-        return cancel(bareiss(self))\n+        if self.has(Symbol):\n+            return self._eval_det_berkowitz()\n+        else:\n+            return cancel(bareiss(self))\n     def _eval_det_berkowitz(self):\n         berk_vector = self._eval_berkowitz_vector()\n         return (-1) ** (len(berk_vector) - 1) * berk_vector[-1]\n", "normalized_occurrence": 1}
