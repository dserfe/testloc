{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..83e93f9 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -112,6 +112,9 @@ def unique_labels(*ys):\n         return xp.unique_values(unique_ys)\n \n     ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    \n+    # Handle pandas nullable dtypes\n+    ys_labels = set(label for label in ys_labels if not pd.isna(label))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n@@ -280,6 +283,10 @@ def type_of_target(y, input_name=\"\"):\n     'multilabel-indicator'\n     \"\"\"\n     xp, is_array_api = get_namespace(y)\n+    \n+    # Handle pandas nullable dtypes\n+    if hasattr(y, \"dtype\") and str(y.dtype) in [\"Int64\", \"Float64\", \"boolean\"]:\n+        y = y.astype(y.dtype.name.lower())\n     valid = (\n         (isinstance(y, Sequence) or issparse(y) or hasattr(y, \"__array__\"))\n         and not isinstance(y, str)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..3cdda07 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -35,6 +35,7 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n     ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y)) for y in ys)))\n+    ys_labels = set((label for label in ys_labels if not pd.isna(label)))\n     if len(set((isinstance(label, str) for label in ys_labels))) > 1:\n         raise ValueError('Mix of label input types (string and number)')\n     return xp.asarray(sorted(ys_labels))\n@@ -65,6 +66,8 @@ def check_classification_targets(y):\n         raise ValueError('Unknown label type: %r' % y_type)\n def type_of_target(y, input_name=''):\n     xp, is_array_api = get_namespace(y)\n+    if hasattr(y, 'dtype') and str(y.dtype) in ['Int64', 'Float64', 'boolean']:\n+        y = y.astype(y.dtype.name.lower())\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n", "normalized_occurrence": 1}
