{"model_name_or_path": "agentless", "instance_id": "django__django-14170", "model_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 5eaf345..f9ba0b6 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -538,6 +538,19 @@ class IRegex(Regex):\n \n \n class YearLookup(Lookup):\n+    def as_sql(self, compiler, connection):\n+        # Avoid the extract operation if the rhs is a direct value to allow\n+        # indexes to be used, except for iso_year lookup.\n+        if self.rhs_is_direct_value() and self.lookup_name != 'iso_year':\n+            # Skip the extract part by directly using the originating field,\n+            # that is self.lhs.lhs.\n+            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n+            rhs_sql, _ = self.process_rhs(compiler, connection)\n+            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n+            start, finish = self.year_lookup_bounds(connection, self.rhs)\n+            params.extend(self.get_bound_params(start, finish))\n+            return '%s %s' % (lhs_sql, rhs_sql), params\n+        return super().as_sql(compiler, connection)\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 2be54b3..dba2a0a 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -360,6 +360,15 @@ class Regex(BuiltinLookup):\n class IRegex(Regex):\n     lookup_name = 'iregex'\n class YearLookup(Lookup):\n+    def as_sql(self, compiler, connection):\n+        if self.rhs_is_direct_value() and self.lookup_name != 'iso_year':\n+            lhs_sql, params = self.process_lhs(compiler, connection, self.lhs.lhs)\n+            rhs_sql, _ = self.process_rhs(compiler, connection)\n+            rhs_sql = self.get_direct_rhs_sql(connection, rhs_sql)\n+            start, finish = self.year_lookup_bounds(connection, self.rhs)\n+            params.extend(self.get_bound_params(start, finish))\n+            return ('%s %s' % (lhs_sql, rhs_sql), params)\n+        return super().as_sql(compiler, connection)\n     def year_lookup_bounds(self, connection, year):\n         output_field = self.lhs.lhs.output_field\n         if isinstance(output_field, DateTimeField):\n", "normalized_occurrence": 1}
