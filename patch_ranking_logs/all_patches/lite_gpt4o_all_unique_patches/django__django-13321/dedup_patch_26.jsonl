{"model_name_or_path": "agentless", "instance_id": "django__django-13321", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 3174ba6..e2c0364 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -132,21 +132,24 @@ class SessionBase:\n \n     def _legacy_decode(self, session_data):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n-            # could produce ValueError if there is no ':'\n-            hash, serialized = encoded_data.split(b':', 1)\n-            expected_hash = self._hash(serialized)\n-            if not constant_time_compare(hash.decode(), expected_hash):\n-                raise SuspiciousSession(\"Session data corrupted\")\n-            else:\n-                return self.serializer().loads(serialized)\n-        except Exception as e:\n-            # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n-            # these happen, just return an empty dictionary (an empty session).\n-            if isinstance(e, SuspiciousOperation):\n-                logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n-                logger.warning(str(e))\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n+            try:\n+                # could produce ValueError if there is no ':'\n+                hash, serialized = encoded_data.split(b':', 1)\n+                expected_hash = self._hash(serialized)\n+                if not constant_time_compare(hash.decode(), expected_hash):\n+                    raise SuspiciousSession(\"Session data corrupted\")\n+                else:\n+                    return self.serializer().loads(serialized)\n+            except Exception as e:\n+                # ValueError, SuspiciousOperation, unpickling exceptions. If any of\n+                # these happen, just return an empty dictionary (an empty session).\n+                if isinstance(e, SuspiciousOperation):\n+                    logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n+                    logger.warning(str(e))\n+                return {}\n+        except binascii.Error:\n             return {}\n \n     def update(self, dict_):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex cfa6de2..617a58c 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -77,18 +77,21 @@ class SessionBase:\n         hash = self._hash(serialized)\n         return base64.b64encode(hash.encode() + b':' + serialized).decode('ascii')\n     def _legacy_decode(self, session_data):\n-        encoded_data = base64.b64decode(session_data.encode('ascii'))\n         try:\n-            hash, serialized = encoded_data.split(b':', 1)\n-            expected_hash = self._hash(serialized)\n-            if not constant_time_compare(hash.decode(), expected_hash):\n-                raise SuspiciousSession('Session data corrupted')\n-            else:\n-                return self.serializer().loads(serialized)\n-        except Exception as e:\n-            if isinstance(e, SuspiciousOperation):\n-                logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n-                logger.warning(str(e))\n+            encoded_data = base64.b64decode(session_data.encode('ascii'))\n+            try:\n+                hash, serialized = encoded_data.split(b':', 1)\n+                expected_hash = self._hash(serialized)\n+                if not constant_time_compare(hash.decode(), expected_hash):\n+                    raise SuspiciousSession('Session data corrupted')\n+                else:\n+                    return self.serializer().loads(serialized)\n+            except Exception as e:\n+                if isinstance(e, SuspiciousOperation):\n+                    logger = logging.getLogger('django.security.%s' % e.__class__.__name__)\n+                    logger.warning(str(e))\n+                return {}\n+        except binascii.Error:\n             return {}\n     def update(self, dict_):\n         self._session.update(dict_)\n", "normalized_occurrence": 4}
