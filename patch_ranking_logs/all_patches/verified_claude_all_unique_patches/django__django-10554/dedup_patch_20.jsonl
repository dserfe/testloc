{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..a76a6e3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -460,6 +460,19 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        \n+        if self.query.order_by and features.supports_slicing_ordering_in_compound:\n+            if not isinstance(result[0], str):\n+                result[0] = result[0][0]\n+            ordering_sqls = []\n+            ordering_params = []\n+            for field in self.get_order_by():\n+                sql, params = self.compile(field)\n+                ordering_sqls.append(sql)\n+                ordering_params.extend(params)\n+            if ordering_sqls:\n+                result[0] = '%s ORDER BY %s' % (result[0], ', '.join(ordering_sqls))\n+                params.extend(ordering_params)\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..b6f5ab6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,6 +265,18 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        if self.query.order_by and features.supports_slicing_ordering_in_compound:\n+            if not isinstance(result[0], str):\n+                result[0] = result[0][0]\n+            ordering_sqls = []\n+            ordering_params = []\n+            for field in self.get_order_by():\n+                sql, params = self.compile(field)\n+                ordering_sqls.append(sql)\n+                ordering_params.extend(params)\n+            if ordering_sqls:\n+                result[0] = '%s ORDER BY %s' % (result[0], ', '.join(ordering_sqls))\n+                params.extend(ordering_params)\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
