{"model_name_or_path": "agentless", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..0f79374 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -108,6 +108,12 @@ class SessionBase:\n \n     def encode(self, session_dict):\n         \"Return the given session dictionary serialized and encoded as a string.\"\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            # Use legacy encoding format\n+            return base64.b64encode(\n+                self._hash(pickle.dumps(session_dict, pickle.HIGHEST_PROTOCOL)).encode() + b':' + \n+                pickle.dumps(session_dict, pickle.HIGHEST_PROTOCOL)\n+            ).decode('ascii')\n         return signing.dumps(\n             session_dict, salt=self.key_salt, serializer=self.serializer,\n             compress=True,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 25789fc..96fcd98 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -64,6 +64,8 @@ class SessionBase:\n         key_salt = 'django.contrib.sessions' + self.__class__.__name__\n         return salted_hmac(key_salt, value).hexdigest()\n     def encode(self, session_dict):\n+        if settings.DEFAULT_HASHING_ALGORITHM == 'sha1':\n+            return base64.b64encode(self._hash(pickle.dumps(session_dict, pickle.HIGHEST_PROTOCOL)).encode() + b':' + pickle.dumps(session_dict, pickle.HIGHEST_PROTOCOL)).decode('ascii')\n         return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n     def decode(self, session_data):\n         try:\n", "normalized_occurrence": 1}
