{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..177e965 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -124,29 +124,45 @@ class Media:\n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n+\n+        The merge algorithm tries to preserve the relative orders of both lists\n+        while resolving conflicts based on dependencies (e.g., a file must come\n+        after its dependencies).\n         \"\"\"\n-        # Start with a copy of list_1.\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n+        # Create a new list for the merged result\n+        combined = []\n+        # Keep track of what we've seen\n+        seen = set()\n+        \n+        # First, add all items from list_1 that aren't in list_2\n+        # This preserves their relative order\n+        for item in list_1:\n+            if item not in list_2:\n+                combined.append(item)\n+                seen.add(item)\n+        \n+        # Now walk through list_2, adding new items and checking conflicts\n+        for i, item in enumerate(list_2):\n+            if item in seen:\n+                # Item exists in list_1, check for conflicts\n+                list1_pos = list_1.index(item) if item in list_1 else -1\n+                \n+                # Check items before this one in list_2 for dependency conflicts\n+                for prev_item in list_2[:i]:\n+                    if prev_item in list_1:\n+                        prev_list1_pos = list_1.index(prev_item)\n+                        if prev_list1_pos > list1_pos:\n+                            warnings.warn(\n+                                'Detected duplicate Media files in an opposite order:\\n'\n+                                '%s\\n%s' % (item, prev_item),\n+                                MediaOrderConflictWarning,\n+                            )\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n+                # New item, add it to the result\n+                combined.append(item)\n+                seen.add(item)\n+        \n+        return combined\n         return combined_list\n \n     def __add__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..f3675b3 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -63,17 +63,24 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n     def merge(list_1, list_2):\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        for path in reversed(list_2):\n-            try:\n-                index = combined_list.index(path)\n-            except ValueError:\n-                combined_list.insert(last_insert_index, path)\n+        combined = []\n+        seen = set()\n+        for item in list_1:\n+            if item not in list_2:\n+                combined.append(item)\n+                seen.add(item)\n+        for i, item in enumerate(list_2):\n+            if item in seen:\n+                list1_pos = list_1.index(item) if item in list_1 else -1\n+                for prev_item in list_2[:i]:\n+                    if prev_item in list_1:\n+                        prev_list1_pos = list_1.index(prev_item)\n+                        if prev_list1_pos > list1_pos:\n+                            warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (item, prev_item), MediaOrderConflictWarning)\n             else:\n-                if index > last_insert_index:\n-                    warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (combined_list[last_insert_index], combined_list[index]), MediaOrderConflictWarning)\n-                last_insert_index = index\n+                combined.append(item)\n+                seen.add(item)\n+        return combined\n         return combined_list\n     def __add__(self, other):\n         combined = Media()\n", "normalized_occurrence": 1}
