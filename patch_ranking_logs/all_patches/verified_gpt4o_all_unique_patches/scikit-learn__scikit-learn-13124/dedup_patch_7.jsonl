{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13124", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex 1bd5697..28d20e1 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -629,21 +629,12 @@ class StratifiedKFold(_BaseKFold):\n                 'Supported target types are: {}. Got {!r} instead.'.format(\n                     allowed_target_types, type_of_target_y))\n \n-        y = column_or_1d(y)\n-        n_samples = y.shape[0]\n-        unique_y, y_inversed = np.unique(y, return_inverse=True)\n-        y_counts = np.bincount(y_inversed)\n-        min_groups = np.min(y_counts)\n-        if np.all(self.n_splits > y_counts):\n-            raise ValueError(\"n_splits=%d cannot be greater than the\"\n-                             \" number of members in each class.\"\n-                             % (self.n_splits))\n-        if self.n_splits > min_groups:\n-            warnings.warn((\"The least populated class in y has only %d\"\n-                           \" members, which is too few. The minimum\"\n-                           \" number of members in any class cannot\"\n-                           \" be less than n_splits=%d.\"\n-                           % (min_groups, self.n_splits)), Warning)\n+        if self.shuffle:\n+            rng = check_random_state(self.random_state)\n+            for cls in np.unique(y):\n+                cls_idx = np.where(y == cls)[0]\n+                rng.shuffle(cls_idx)\n+                y[cls_idx] = np.sort(y[cls_idx])\n \n         # pre-assign each sample to a test fold index using individual KFold\n         # splitting strategies for each class so as to respect the balance of\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex a142d27..c65c0d4 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -553,15 +553,12 @@ class StratifiedKFold(_BaseKFold):\n         allowed_target_types = ('binary', 'multiclass')\n         if type_of_target_y not in allowed_target_types:\n             raise ValueError('Supported target types are: {}. Got {!r} instead.'.format(allowed_target_types, type_of_target_y))\n-        y = column_or_1d(y)\n-        n_samples = y.shape[0]\n-        unique_y, y_inversed = np.unique(y, return_inverse=True)\n-        y_counts = np.bincount(y_inversed)\n-        min_groups = np.min(y_counts)\n-        if np.all(self.n_splits > y_counts):\n-            raise ValueError('n_splits=%d cannot be greater than the number of members in each class.' % self.n_splits)\n-        if self.n_splits > min_groups:\n-            warnings.warn('The least populated class in y has only %d members, which is too few. The minimum number of members in any class cannot be less than n_splits=%d.' % (min_groups, self.n_splits), Warning)\n+        if self.shuffle:\n+            rng = check_random_state(self.random_state)\n+            for cls in np.unique(y):\n+                cls_idx = np.where(y == cls)[0]\n+                rng.shuffle(cls_idx)\n+                y[cls_idx] = np.sort(y[cls_idx])\n         per_cls_cvs = [KFold(self.n_splits, shuffle=self.shuffle, random_state=rng).split(np.zeros(max(count, self.n_splits))) for count in y_counts]\n         test_folds = np.zeros(n_samples, dtype=np.int)\n         for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):\n", "normalized_occurrence": 1}
