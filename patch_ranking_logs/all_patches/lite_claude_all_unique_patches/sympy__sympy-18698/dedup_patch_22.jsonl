{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..cb6e5c3 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -317,21 +317,29 @@ def dup_sqf_list(f, K, all=False):\n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n \n+    factors = {}\n     while True:\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n \n         if not h:\n-            result.append((p, i))\n+            if i not in factors:\n+                factors[i] = p\n+            else:\n+                factors[i] = dup_mul(factors[i], p, K)\n             break\n \n         g, p, q = dup_inner_gcd(p, h, K)\n \n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if i not in factors:\n+                factors[i] = g\n+            else:\n+                factors[i] = dup_mul(factors[i], g, K)\n \n         i += 1\n \n+    result = [(f, k) for k, f in sorted(factors.items())]\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..08c85f0 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -107,16 +107,24 @@ def dup_sqf_list(f, K, all=False):\n     result, i = ([], 1)\n     h = dup_diff(f, 1, K)\n     g, p, q = dup_inner_gcd(f, h, K)\n+    factors = {}\n     while True:\n         d = dup_diff(p, 1, K)\n         h = dup_sub(q, d, K)\n         if not h:\n-            result.append((p, i))\n+            if i not in factors:\n+                factors[i] = p\n+            else:\n+                factors[i] = dup_mul(factors[i], p, K)\n             break\n         g, p, q = dup_inner_gcd(p, h, K)\n         if all or dup_degree(g) > 0:\n-            result.append((g, i))\n+            if i not in factors:\n+                factors[i] = g\n+            else:\n+                factors[i] = dup_mul(factors[i], g, K)\n         i += 1\n+    result = [(f, k) for k, f in sorted(factors.items())]\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n", "normalized_occurrence": 1}
