{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..36536e9 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -197,6 +198,18 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         new_db_params,\n         strict=False,\n     ):\n+        # Drop any unique constraint that overlaps with the primary key or unique field\n+        # to avoid multiple unique constraints on the same column\n+        if old_field.unique or old_field.primary_key:\n+            for constraint in self._constraint_names(\n+                model, [old_field.column], unique=True, primary_key=False\n+            ):\n+                self.execute(\n+                    self._delete_constraint_sql(\n+                        self.sql_delete_unique, model, constraint\n+                    )\n+                )\n+\n         # Drop indexes on varchar/text/citext columns that are changing to a\n         # different type.\n         if (old_field.db_index or old_field.unique) and (\n@@ -296,4 +309,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex d911e18..f41d05b 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -72,6 +72,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             return super()._alter_column_type_sql(model, old_field, new_field, new_type)\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n+        if old_field.unique or old_field.primary_key:\n+            for constraint in self._constraint_names(model, [old_field.column], unique=True, primary_key=False):\n+                self.execute(self._delete_constraint_sql(self.sql_delete_unique, model, constraint))\n         if (old_field.db_index or old_field.unique) and (old_type.startswith('varchar') and (not new_type.startswith('varchar')) or (old_type.startswith('text') and (not new_type.startswith('text'))) or (old_type.startswith('citext') and (not new_type.startswith('citext')))):\n             index_name = self._create_index_name(model._meta.db_table, [old_field.column], suffix='_like')\n             self.execute(self._delete_index_sql(model, index_name))\n", "normalized_occurrence": 1}
