{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..ac04cf1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints, _GenericAlias\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -22,6 +22,18 @@ from sphinx.util import inspect, typing\n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    \"\"\"Record type hints and docstrings to env object.\"\"\"\n+    try:\n+        if isinstance(obj, _GenericAlias):\n+            annotations = app.env.temp_data.setdefault('annotations', {})\n+            annotation = annotations.setdefault(name, OrderedDict())\n+            type_hints = get_type_hints(obj)\n+            for param, param_type in type_hints.items():\n+                annotation[param] = typing.stringify(param_type)\n+            if obj.__doc__:\n+                annotation['doc'] = obj.__doc__\n+    except (TypeError, ValueError):\n+        pass\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n@@ -66,6 +78,39 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n \n+        # Insert type alias docstring if present\n+        if 'doc' in annotations[fullname]:\n+            doc_node = nodes.paragraph()\n+            doc_node += nodes.Text(annotations[fullname]['doc'])\n+            contentnode.append(doc_node)\n+    if domain != 'py':\n+        return\n+    if app.config.autodoc_typehints not in ('both', 'description'):\n+        return\n+\n+    try:\n+        signature = cast(addnodes.desc_signature, contentnode.parent[0])\n+        if signature['module']:\n+            fullname = '.'.join([signature['module'], signature['fullname']])\n+        else:\n+            fullname = signature['fullname']\n+    except KeyError:\n+        # signature node does not have valid context info for the target object\n+        return\n+\n+    annotations = app.env.temp_data.get('annotations', {})\n+    if annotations.get(fullname, {}):\n+        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+        if field_lists == []:\n+            field_list = insert_field_list(contentnode)\n+            field_lists.append(field_list)\n+\n+        for field_list in field_lists:\n+            if app.config.autodoc_typehints_description_target == \"all\":\n+                modify_field_list(field_list, annotations[fullname])\n+            else:\n+                augment_descriptions_with_types(field_list, annotations[fullname])\n+\n \n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..6f758f1 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,12 +1,24 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints, _GenericAlias\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    try:\n+        if isinstance(obj, _GenericAlias):\n+            annotations = app.env.temp_data.setdefault('annotations', {})\n+            annotation = annotations.setdefault(name, OrderedDict())\n+            type_hints = get_type_hints(obj)\n+            for param, param_type in type_hints.items():\n+                annotation[param] = typing.stringify(param_type)\n+            if obj.__doc__:\n+                annotation['doc'] = obj.__doc__\n+    except (TypeError, ValueError):\n+        pass\n+    'Record type hints to env object.'\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n@@ -33,6 +45,33 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     except KeyError:\n         return\n     annotations = app.env.temp_data.get('annotations', {})\n+    if annotations.get(fullname, {}):\n+        field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+        if field_lists == []:\n+            field_list = insert_field_list(contentnode)\n+            field_lists.append(field_list)\n+        for field_list in field_lists:\n+            if app.config.autodoc_typehints_description_target == 'all':\n+                modify_field_list(field_list, annotations[fullname])\n+            else:\n+                augment_descriptions_with_types(field_list, annotations[fullname])\n+        if 'doc' in annotations[fullname]:\n+            doc_node = nodes.paragraph()\n+            doc_node += nodes.Text(annotations[fullname]['doc'])\n+            contentnode.append(doc_node)\n+    if domain != 'py':\n+        return\n+    if app.config.autodoc_typehints not in ('both', 'description'):\n+        return\n+    try:\n+        signature = cast(addnodes.desc_signature, contentnode.parent[0])\n+        if signature['module']:\n+            fullname = '.'.join([signature['module'], signature['fullname']])\n+        else:\n+            fullname = signature['fullname']\n+    except KeyError:\n+        return\n+    annotations = app.env.temp_data.get('annotations', {})\n     if annotations.get(fullname, {}):\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n         if field_lists == []:\n", "normalized_occurrence": 1}
