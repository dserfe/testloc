{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 400ae0b..28d0a91 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -613,6 +613,7 @@ class TerminalReporter(object):\n             config=self.config, startdir=self.startdir, items=session.items\n         )\n         self._write_report_lines_from_hooks(lines)\n+        self._print_fixture_scopes()\n \n         if self.config.getoption(\"collectonly\"):\n             if self.stats.get(\"failed\"):\n@@ -655,6 +656,20 @@ class TerminalReporter(object):\n                         for line in col._obj.__doc__.strip().splitlines():\n                             self._tw.line(\"%s%s\" % (indent + \"  \", line.strip()))\n \n+    def _print_fixture_scopes(self):\n+        from _pytest.fixtures import scopes\n+        fixtures = self.config.pluginmanager.get_plugin(\"fixtures\")\n+        if not fixtures:\n+            return\n+        fixture_defs = fixtures._fixturemanager._arg2fixturedefs\n+        if not fixture_defs:\n+            return\n+        \n+        self._tw.sep(\"=\", \"fixtures and their scopes\")\n+        for fixture_name, fixture_list in sorted(fixture_defs.items()):\n+            for fixture_def in fixture_list:\n+                self._tw.line(f\"{fixture_name} -- scope: {scopes[fixture_def.scope]}\")\n+\n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n         outcome = yield\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 17fce8c..a654185 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -391,6 +391,7 @@ class TerminalReporter(object):\n             self._printcollecteditems(session.items)\n         lines = self.config.hook.pytest_report_collectionfinish(config=self.config, startdir=self.startdir, items=session.items)\n         self._write_report_lines_from_hooks(lines)\n+        self._print_fixture_scopes()\n         if self.config.getoption('collectonly'):\n             if self.stats.get('failed'):\n                 self._tw.sep('!', 'collection failures')\n@@ -427,6 +428,18 @@ class TerminalReporter(object):\n                     if hasattr(col, '_obj') and col._obj.__doc__:\n                         for line in col._obj.__doc__.strip().splitlines():\n                             self._tw.line('%s%s' % (indent + '  ', line.strip()))\n+    def _print_fixture_scopes(self):\n+        from _pytest.fixtures import scopes\n+        fixtures = self.config.pluginmanager.get_plugin('fixtures')\n+        if not fixtures:\n+            return\n+        fixture_defs = fixtures._fixturemanager._arg2fixturedefs\n+        if not fixture_defs:\n+            return\n+        self._tw.sep('=', 'fixtures and their scopes')\n+        for fixture_name, fixture_list in sorted(fixture_defs.items()):\n+            for fixture_def in fixture_list:\n+                self._tw.line(f'{fixture_name} -- scope: {scopes[fixture_def.scope]}')\n     @pytest.hookimpl(hookwrapper=True)\n     def pytest_sessionfinish(self, exitstatus):\n         outcome = (yield)\n", "normalized_occurrence": 1}
