{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..e6fa5ef 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,7 +987,24 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        query = self.query.chain(sql.UpdateQuery, using=self.db)\n+        model = self.model\n+        related_fields = {\n+            f.name: f\n+            for f in model._meta.get_fields()\n+            if (f.is_relation and f.many_to_one and not f.concrete)\n+        }\n+        for field_name, field in related_fields.items():\n+            if field_name in kwargs:\n+                rel_model = field.related_model\n+                base_qs = rel_model._base_manager.using(self.db).filter(\n+                    **{\n+                        rel_model._meta.pk.name + \"__in\": self.values_list(\n+                            field.attname, flat=True\n+                        )\n+                    }\n+                )\n+                base_qs.update(**{field.related_query_name(): kwargs.pop(field_name)})\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..22aa77c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,7 +532,14 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        query = self.query.chain(sql.UpdateQuery, using=self.db)\n+        model = self.model\n+        related_fields = {f.name: f for f in model._meta.get_fields() if f.is_relation and f.many_to_one and (not f.concrete)}\n+        for field_name, field in related_fields.items():\n+            if field_name in kwargs:\n+                rel_model = field.related_model\n+                base_qs = rel_model._base_manager.using(self.db).filter(**{rel_model._meta.pk.name + '__in': self.values_list(field.attname, flat=True)})\n+                base_qs.update(**{field.related_query_name(): kwargs.pop(field_name)})\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "normalized_occurrence": 1}
