{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c5f3683..2a81c76 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -147,7 +147,7 @@ class Options:\n         return self.app_config is not None\n \n     def contribute_to_class(self, cls, name):\n-        from django.db import connection\n+        from django.db import connection, models\n         from django.db.backends.utils import truncate_name\n \n         cls._meta = self\n@@ -204,8 +204,18 @@ class Options:\n \n         # If the db_table wasn't provided, use the app_label + model_name.\n         if not self.db_table:\n-            self.db_table = \"%s_%s\" % (self.app_label, self.model_name)\n-            self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            proposed_db_table = \"%s_%s\" % (self.app_label, self.model_name)\n+            proposed_db_table = truncate_name(proposed_db_table, connection.ops.max_name_length())\n+            \n+            # Check if the proposed db_table name conflicts with any existing model's table name\n+            for app_config in self.apps.get_app_configs():\n+                for model in app_config.get_models():\n+                    if model._meta.db_table == proposed_db_table:\n+                        raise ValueError(\n+                            f\"db_table '{proposed_db_table}' is already used by model '{model._meta.app_label}.{model._meta.object_name}'.\"\n+                        )\n+\n+            self.db_table = proposed_db_table\n \n     def _format_names_with_class(self, cls, objs):\n         \"\"\"App label/class name interpolation for object names.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbc5560..b2bef47 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -91,7 +91,7 @@ class Options:\n     def installed(self):\n         return self.app_config is not None\n     def contribute_to_class(self, cls, name):\n-        from django.db import connection\n+        from django.db import connection, models\n         from django.db.backends.utils import truncate_name\n         cls._meta = self\n         self.model = cls\n@@ -126,8 +126,13 @@ class Options:\n             self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n         del self.meta\n         if not self.db_table:\n-            self.db_table = '%s_%s' % (self.app_label, self.model_name)\n-            self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            proposed_db_table = '%s_%s' % (self.app_label, self.model_name)\n+            proposed_db_table = truncate_name(proposed_db_table, connection.ops.max_name_length())\n+            for app_config in self.apps.get_app_configs():\n+                for model in app_config.get_models():\n+                    if model._meta.db_table == proposed_db_table:\n+                        raise ValueError(f\"db_table '{proposed_db_table}' is already used by model '{model._meta.app_label}.{model._meta.object_name}'.\")\n+            self.db_table = proposed_db_table\n     def _format_names_with_class(self, cls, objs):\n         new_objs = []\n         for obj in objs:\n", "normalized_occurrence": 1}
