{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 73bbc98..1be790d 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -353,6 +353,8 @@ def trigsimp_groebner(expr, hints=[], quick=False, order=\"grlex\",\n     try:\n         (pnum, pdenom), opt = parallel_poly_from_expr([num, denom])\n     except PolificationFailed:\n+        from sympy import Abs\n+        expr = expr.replace(lambda x: isinstance(x, sqrt) and x.args[0].is_Pow and x.args[0].exp == 2 and isinstance(x.args[0].base, sin), lambda x: Abs(x.args[0].base))\n         return expr\n     debug('initial gens:', opt.gens)\n     ideal, freegens, gens = analyse_gens(opt.gens, hints)\n@@ -362,6 +364,8 @@ def trigsimp_groebner(expr, hints=[], quick=False, order=\"grlex\",\n     # NOTE we force the domain to be ZZ to stop polys from injecting generators\n     #      (which is usually a sign of a bug in the way we build the ideal)\n     if not gens:\n+        from sympy import Abs\n+        expr = expr.replace(lambda x: isinstance(x, sqrt) and x.args[0].is_Pow and x.args[0].exp == 2 and isinstance(x.args[0].base, sin), lambda x: Abs(x.args[0].base))\n         return expr\n     G = groebner(ideal, order=order, gens=gens, domain=ZZ)\n     debug('groebner basis:', list(G), \" -- len\", len(G))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex fb82ea6..eafac1a 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -111,6 +111,8 @@ def trigsimp_groebner(expr, hints=[], quick=False, order='grlex', polynomial=Fal\n     try:\n         (pnum, pdenom), opt = parallel_poly_from_expr([num, denom])\n     except PolificationFailed:\n+        from sympy import Abs\n+        expr = expr.replace(lambda x: isinstance(x, sqrt) and x.args[0].is_Pow and (x.args[0].exp == 2) and isinstance(x.args[0].base, sin), lambda x: Abs(x.args[0].base))\n         return expr\n     debug('initial gens:', opt.gens)\n     ideal, freegens, gens = analyse_gens(opt.gens, hints)\n@@ -118,6 +120,8 @@ def trigsimp_groebner(expr, hints=[], quick=False, order='grlex', polynomial=Fal\n     debug('new gens:', gens, ' -- len', len(gens))\n     debug('free gens:', freegens, ' -- len', len(gens))\n     if not gens:\n+        from sympy import Abs\n+        expr = expr.replace(lambda x: isinstance(x, sqrt) and x.args[0].is_Pow and (x.args[0].exp == 2) and isinstance(x.args[0].base, sin), lambda x: Abs(x.args[0].base))\n         return expr\n     G = groebner(ideal, order=order, gens=gens, domain=ZZ)\n     debug('groebner basis:', list(G), ' -- len', len(G))\n", "normalized_occurrence": 1}
