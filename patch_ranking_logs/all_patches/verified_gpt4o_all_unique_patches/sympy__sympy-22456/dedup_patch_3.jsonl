{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..1c585fc 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -898,11 +898,15 @@ class String(Token):\n     not_in_args = ['text']\n     is_Atom = True\n \n-    @classmethod\n-    def _construct_text(cls, text):\n+    def __new__(cls, text, **kwargs):\n         if not isinstance(text, str):\n             raise TypeError(\"Argument text is not a string type.\")\n-        return text\n+        obj = Token.__new__(cls, **kwargs)\n+        obj.text = text\n+        return obj\n+\n+    def __getnewargs__(self):\n+        return (self.text,)\n \n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..2d9bdbe 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -777,11 +777,15 @@ class String(Token):\n     not_in_args = ['text']\n     is_Atom = True\n \n-    @classmethod\n-    def _construct_text(cls, text):\n+    def __new__(cls, text, **kwargs):\n         if not isinstance(text, str):\n             raise TypeError('Argument text is not a string type.')\n-        return text\n+        obj = Token.__new__(cls, **kwargs)\n+        obj.text = text\n+        return obj\n+\n+    def __getnewargs__(self):\n+        return (self.text,)\n \n     def _sympystr(self, printer, *args, **kwargs):\n         return self.text\n", "normalized_occurrence": 1}
