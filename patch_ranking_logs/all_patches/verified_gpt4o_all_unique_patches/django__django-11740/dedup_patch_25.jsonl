{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..ae4a4c3 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -95,7 +95,7 @@ class MigrationAutodetector:\n         fields_def = []\n         for name, field in sorted(fields):\n             deconstruction = self.deep_deconstruct(field)\n-            if field.remote_field and field.remote_field.model:\n+            if field.remote_field and field.remote_field.model and not isinstance(field, models.ForeignKey):\n                 del deconstruction[2]['to']\n             fields_def.append(deconstruction)\n         return fields_def\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..48fe5a6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -47,7 +47,7 @@ class MigrationAutodetector:\n         fields_def = []\n         for name, field in sorted(fields):\n             deconstruction = self.deep_deconstruct(field)\n-            if field.remote_field and field.remote_field.model:\n+            if field.remote_field and field.remote_field.model and (not isinstance(field, models.ForeignKey)):\n                 del deconstruction[2]['to']\n             fields_def.append(deconstruction)\n         return fields_def\n", "normalized_occurrence": 1}
