{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ef71d2c..a6cc0c1 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -665,9 +665,14 @@ class Quantity(np.ndarray):\n \n         # Same for inputs, but here also convert if necessary.\n         arrays = []\n-        for input_, converter in zip(inputs, converters):\n-            input_ = getattr(input_, \"value\", input_)\n-            arrays.append(converter(input_) if converter else input_)\n+        try:\n+            for input_, converter in zip(inputs, converters):\n+                input_ = getattr(input_, \"value\", input_)\n+                arrays.append(converter(input_) if converter else input_)\n+        except ValueError:\n+            # If we can't convert an input, return NotImplemented to allow\n+            # other operands to handle the operation\n+            return NotImplemented\n \n         # Call our superclass's __array_ufunc__\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 9a6c1e2..f1e2d41 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -205,9 +205,12 @@ class Quantity(np.ndarray):\n         if method == 'reduce' and 'initial' in kwargs and (unit is not None):\n             kwargs['initial'] = self._to_own_unit(kwargs['initial'], check_precision=False, unit=unit)\n         arrays = []\n-        for input_, converter in zip(inputs, converters):\n-            input_ = getattr(input_, 'value', input_)\n-            arrays.append(converter(input_) if converter else input_)\n+        try:\n+            for input_, converter in zip(inputs, converters):\n+                input_ = getattr(input_, 'value', input_)\n+                arrays.append(converter(input_) if converter else input_)\n+        except ValueError:\n+            return NotImplemented\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n         if unit is None or result is None or result is NotImplemented:\n             return result\n", "normalized_occurrence": 6}
