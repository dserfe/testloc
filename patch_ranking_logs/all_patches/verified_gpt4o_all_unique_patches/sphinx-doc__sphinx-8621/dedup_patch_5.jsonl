{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..2f3c714 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': addnodes.literal_kbd,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -132,7 +132,8 @@ class XRefRole(ReferenceRole):\n \n     def create_non_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n         text = utils.unescape(self.text[1:])\n-        if self.fix_parens:\n+        if self.fix_parens and 'kbd' in self.rawtext:\n+            text = process_kbd_role(text)\n             self.has_explicit_title = False  # treat as implicit\n             text, target = self.update_title_and_target(text, \"\")\n \n@@ -144,7 +145,8 @@ class XRefRole(ReferenceRole):\n         title = self.title\n         if self.lowercase:\n             target = target.lower()\n-        if self.fix_parens:\n+        if self.fix_parens and 'kbd' in self.rawtext:\n+            text = process_kbd_role(text)\n             title, target = self.update_title_and_target(title, target)\n \n         # create the reference node\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex ef483a8..977e04b 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -15,7 +15,7 @@ if False:\n     from typing import Type\n     from sphinx.application import Sphinx\n     from sphinx.environment import BuildEnvironment\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': addnodes.literal_kbd, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n class XRefRole(ReferenceRole):\n     nodeclass = addnodes.pending_xref\n     innernodeclass = nodes.literal\n@@ -60,7 +60,8 @@ class XRefRole(ReferenceRole):\n             return self.create_xref_node()\n     def create_non_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n         text = utils.unescape(self.text[1:])\n-        if self.fix_parens:\n+        if self.fix_parens and 'kbd' in self.rawtext:\n+            text = process_kbd_role(text)\n             self.has_explicit_title = False\n             text, target = self.update_title_and_target(text, '')\n         node = self.innernodeclass(self.rawtext, text, classes=self.classes)\n@@ -70,7 +71,8 @@ class XRefRole(ReferenceRole):\n         title = self.title\n         if self.lowercase:\n             target = target.lower()\n-        if self.fix_parens:\n+        if self.fix_parens and 'kbd' in self.rawtext:\n+            text = process_kbd_role(text)\n             title, target = self.update_title_and_target(title, target)\n         options = {'refdoc': self.env.docname, 'refdomain': self.refdomain, 'reftype': self.reftype, 'refexplicit': self.has_explicit_title, 'refwarn': self.warn_dangling}\n         refnode = self.nodeclass(self.rawtext, **options)\n", "normalized_occurrence": 1}
