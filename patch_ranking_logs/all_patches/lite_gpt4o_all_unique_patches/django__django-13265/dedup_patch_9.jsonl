{"model_name_or_path": "agentless", "instance_id": "django__django-13265", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 8c23741..66bb436 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1196,8 +1196,7 @@ class MigrationAutodetector:\n             new_model_state = self.to_state.models[app_label, model_name]\n             if (old_model_state.options.get(\"order_with_respect_to\") !=\n                     new_model_state.options.get(\"order_with_respect_to\")):\n-                # Make sure it comes second if we're adding\n-                # (removal dependency is part of RemoveField)\n+                # Make sure it comes first if we're adding\n                 dependencies = []\n                 if new_model_state.options.get(\"order_with_respect_to\"):\n                     dependencies.append((\n@@ -1207,13 +1206,15 @@ class MigrationAutodetector:\n                         True,\n                     ))\n                 # Actually generate the operation\n-                self.add_operation(\n-                    app_label,\n-                    operations.AlterOrderWithRespectTo(\n-                        name=model_name,\n-                        order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n-                    ),\n-                    dependencies=dependencies,\n+                operation = operations.AlterOrderWithRespectTo(\n+                    name=model_name,\n+                    order_with_respect_to=new_model_state.options.get('order_with_respect_to'),\n+                )\n+                self.add_operation(app_label, operation, dependencies=dependencies)\n+                # Ensure this operation comes before any AddIndex operations\n+                self.generated_operations[app_label].insert(\n+                    max(0, self.generated_operations[app_label].index(operation) - 2),\n+                    self.generated_operations[app_label].pop()\n                 )\n \n     def generate_altered_managers(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 48a2b0b..110323b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -582,7 +582,9 @@ class MigrationAutodetector:\n                 dependencies = []\n                 if new_model_state.options.get('order_with_respect_to'):\n                     dependencies.append((app_label, model_name, new_model_state.options['order_with_respect_to'], True))\n-                self.add_operation(app_label, operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to')), dependencies=dependencies)\n+                operation = operations.AlterOrderWithRespectTo(name=model_name, order_with_respect_to=new_model_state.options.get('order_with_respect_to'))\n+                self.add_operation(app_label, operation, dependencies=dependencies)\n+                self.generated_operations[app_label].insert(max(0, self.generated_operations[app_label].index(operation) - 2), self.generated_operations[app_label].pop())\n     def generate_altered_managers(self):\n         for app_label, model_name in sorted(self.kept_model_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n", "normalized_occurrence": 1}
