{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..bc82655 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -409,6 +409,12 @@ class DimensionSystem(Basic, _QuantityMapper):\n                         return {}\n                     else:\n                         raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n+                elif dimension.name.func == exp:\n+                    # exp() always returns a dimensionless quantity\n+                    # but we still need to verify its argument will be dimensionless after evaluation\n+                    if not all(item == {} for item in dicts):\n+                        raise TypeError(\"The input argument for the exponential function must be dimensionless.\")\n+                    return {}\n                 else:\n                     if all(item == {} for item in dicts):\n                         return {}\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..00853be 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -236,6 +236,10 @@ class DimensionSystem(Basic, _QuantityMapper):\n                         return {}\n                     else:\n                         raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n+                elif dimension.name.func == exp:\n+                    if not all((item == {} for item in dicts)):\n+                        raise TypeError('The input argument for the exponential function must be dimensionless.')\n+                    return {}\n                 elif all((item == {} for item in dicts)):\n                     return {}\n                 else:\n", "normalized_occurrence": 2}
