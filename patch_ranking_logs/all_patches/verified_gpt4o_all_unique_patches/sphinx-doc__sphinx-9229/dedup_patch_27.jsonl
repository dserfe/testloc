{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..46d2b74 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -54,9 +54,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         return\n \n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if fullname in annotations:\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n \n@@ -65,6 +65,21 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n+    else:\n+        obj = app.env.domains['py'].objects.get(fullname)\n+        if obj:\n+            type_hints = get_type_hints(obj)\n+            if type_hints:\n+                field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+                if not field_lists:\n+                    field_list = insert_field_list(contentnode)\n+                    field_lists.append(field_list)\n+\n+                for field_list in field_lists:\n+                    if app.config.autodoc_typehints_description_target == \"all\":\n+                        modify_field_list(field_list, type_hints)\n+                    else:\n+                        augment_descriptions_with_types(field_list, type_hints)\n \n \n def insert_field_list(node: Element) -> nodes.field_list:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..8a70edd 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,6 +1,6 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, Set, cast\n+from typing import Any, Dict, Iterable, Set, cast, get_type_hints\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -33,9 +33,9 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     except KeyError:\n         return\n     annotations = app.env.temp_data.get('annotations', {})\n-    if annotations.get(fullname, {}):\n+    if fullname in annotations:\n         field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n-        if field_lists == []:\n+        if not field_lists:\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n@@ -43,6 +43,20 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n+    else:\n+        obj = app.env.domains['py'].objects.get(fullname)\n+        if obj:\n+            type_hints = get_type_hints(obj)\n+            if type_hints:\n+                field_lists = [n for n in contentnode if isinstance(n, nodes.field_list)]\n+                if not field_lists:\n+                    field_list = insert_field_list(contentnode)\n+                    field_lists.append(field_list)\n+                for field_list in field_lists:\n+                    if app.config.autodoc_typehints_description_target == 'all':\n+                        modify_field_list(field_list, type_hints)\n+                    else:\n+                        augment_descriptions_with_types(field_list, type_hints)\n def insert_field_list(node: Element) -> nodes.field_list:\n     field_list = nodes.field_list()\n     desc = [n for n in node if isinstance(n, addnodes.desc)]\n", "normalized_occurrence": 1}
