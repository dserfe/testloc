{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..61b59b0 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -101,6 +101,10 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n \n+    # Check if the dimensions of the expression and target units match\n+    if not unit_system.are_dimensions_compatible(expr, target_units):\n+        return expr\n+\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..4f9a2f1 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -38,6 +38,8 @@ def convert_to(expr, target_units, unit_system='SI'):\n         elif isinstance(expr, Quantity):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n+    if not unit_system.are_dimensions_compatible(expr, target_units):\n+        return expr\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n", "normalized_occurrence": 1}
