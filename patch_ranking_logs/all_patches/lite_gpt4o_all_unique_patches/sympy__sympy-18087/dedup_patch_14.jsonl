{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..51c3509 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -336,10 +336,12 @@ class sin(TrigonometricFunction):\n                     return cls(pi_coeff*S.Pi)\n                 return None\n \n-        if arg.is_Add:\n+        if arg.is_Add and arg.has(S.ImaginaryUnit):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m)*cos(x) + cos(m)*sin(x)\n+        elif arg.is_Add:\n+            return Add(*[sin(a) for a in arg.args])\n \n         if arg.is_zero:\n             return S.Zero\n@@ -653,10 +655,12 @@ class cos(TrigonometricFunction):\n                     return sign_cos*sqrt( (1 + nval)/2 )\n             return None\n \n-        if arg.is_Add:\n+        if arg.is_Add and arg.has(S.ImaginaryUnit):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m)*cos(x) - sin(m)*sin(x)\n+        elif arg.is_Add:\n+            return Add(*[cos(a) for a in arg.args])\n \n         if arg.is_zero:\n             return S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..1379638 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -187,10 +187,12 @@ class sin(TrigonometricFunction):\n                 if pi_coeff * S.Pi != arg:\n                     return cls(pi_coeff * S.Pi)\n                 return None\n-        if arg.is_Add:\n+        if arg.is_Add and arg.has(S.ImaginaryUnit):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n+        elif arg.is_Add:\n+            return Add(*[sin(a) for a in arg.args])\n         if arg.is_zero:\n             return S.Zero\n         if isinstance(arg, asin):\n@@ -379,10 +381,12 @@ class cos(TrigonometricFunction):\n                     sign_cos = (-1) ** ((-1 if x < 0 else 1) * int(abs(x)))\n                     return sign_cos * sqrt((1 + nval) / 2)\n             return None\n-        if arg.is_Add:\n+        if arg.is_Add and arg.has(S.ImaginaryUnit):\n             x, m = _peeloff_pi(arg)\n             if m:\n                 return cos(m) * cos(x) - sin(m) * sin(x)\n+        elif arg.is_Add:\n+            return Add(*[cos(a) for a in arg.args])\n         if arg.is_zero:\n             return S.One\n         if isinstance(arg, acos):\n", "normalized_occurrence": 1}
