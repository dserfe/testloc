{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..8e78f48 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1212,6 +1212,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n         \"\"\"\n \n         def _return_list_of_arrays(axes, origin):\n+            if any(len(axis) == 0 for axis in axes):\n+                return [np.array([]) for _ in axes]\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -1231,7 +1233,9 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n-            if xy.shape[-1] != self.naxis:\n+            if xy.size == 0:\n+                return np.array([])\n+            elif xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..295464a 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -594,6 +594,8 @@ class WCS(WCSBase):\n             return out\n     def _array_converter(self, func, sky, *args, ra_dec_order=False):\n         def _return_list_of_arrays(axes, origin):\n+            if any((len(axis) == 0 for axis in axes)):\n+                return [np.array([]) for _ in axes]\n             try:\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n@@ -607,7 +609,9 @@ class WCS(WCSBase):\n                 return (output[:, 0].reshape(axes[0].shape), output[:, 1].reshape(axes[0].shape))\n             return [output[:, i].reshape(axes[0].shape) for i in range(output.shape[1])]\n         def _return_single_array(xy, origin):\n-            if xy.shape[-1] != self.naxis:\n+            if xy.size == 0:\n+                return np.array([])\n+            elif xy.shape[-1] != self.naxis:\n                 raise ValueError('When providing two arguments, the array must be of shape (N, {0})'.format(self.naxis))\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n", "normalized_occurrence": 1}
