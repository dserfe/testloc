{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2931", "model_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 7aa8a2f..6a15a5c 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -683,23 +683,28 @@ def get_auth_from_url(url):\n     return auth\n \n \n-def to_native_string(string, encoding='ascii'):\n+def to_native_string(string, encoding='utf-8'):\n     \"\"\"\n     Given a string object, regardless of type, returns a representation of that\n     string in the native string type, encoding and decoding where necessary.\n-    This assumes ASCII unless told otherwise.\n+    This assumes UTF-8 unless told otherwise.\n     \"\"\"\n-    out = None\n-\n+    # Note: On Python 2, we return unicode strings where possible\n     if isinstance(string, builtin_str):\n-        out = string\n+        return string\n+\n+    if is_py2:\n+        # If it's already bytes, leave it alone\n+        if isinstance(string, str):\n+            return string\n+        else:\n+            return string.encode(encoding)\n     else:\n-        if is_py2:\n-            out = string.encode(encoding)\n+        # We're on Python 3 - if it's bytes, decode it, otherwise leave it\n+        if isinstance(string, bytes):\n+            return string.decode(encoding)\n         else:\n-            out = string.decode(encoding)\n-\n-    return out\n+            return string\n \n \n def urldefragauth(url):\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 69197df..d903703 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -315,15 +315,18 @@ def get_auth_from_url(url):\n     except (AttributeError, TypeError):\n         auth = ('', '')\n     return auth\n-def to_native_string(string, encoding='ascii'):\n-    out = None\n+def to_native_string(string, encoding='utf-8'):\n     if isinstance(string, builtin_str):\n-        out = string\n-    elif is_py2:\n-        out = string.encode(encoding)\n+        return string\n+    if is_py2:\n+        if isinstance(string, str):\n+            return string\n+        else:\n+            return string.encode(encoding)\n+    elif isinstance(string, bytes):\n+        return string.decode(encoding)\n     else:\n-        out = string.decode(encoding)\n-    return out\n+        return string\n def urldefragauth(url):\n     scheme, netloc, path, params, query, fragment = urlparse(url)\n     if not netloc:\n", "normalized_occurrence": 1}
