{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..630755f 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -34,6 +34,8 @@ def _unique_indicator(y):\n     )\n \n \n+import pandas as pd\n+\n _FN_UNIQUE_LABELS = {\n     \"binary\": _unique_multiclass,\n     \"multiclass\": _unique_multiclass,\n@@ -341,6 +343,14 @@ def type_of_target(y, input_name=\"\"):\n         # 2-D empty array: [[]]\n         return \"unknown\"\n     if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n+        # Handle nullable pandas dtypes (\"Int64\", \"Float64\", \"boolean\")\n+        if isinstance(y, pd.Series) and pd.api.types.is_extension_array_dtype(y.dtype):\n+            if pd.api.types.is_integer_dtype(y):\n+                return \"binary\" if len(np.unique(y.dropna())) <= 2 else \"multiclass\"\n+            elif pd.api.types.is_float_dtype(y):\n+                return \"continuous\" + suffix\n+            elif pd.api.types.is_bool_dtype(y):\n+                return \"binary\"\n         # [obj_1] and not [\"label_1\"]\n         return \"unknown\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..e72a295 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -15,6 +15,7 @@ def _unique_multiclass(y):\n         return set(y)\n def _unique_indicator(y):\n     return np.arange(check_array(y, input_name='y', accept_sparse=['csr', 'csc', 'coo']).shape[1])\n+import pandas as pd\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n@@ -92,6 +93,13 @@ def type_of_target(y, input_name=''):\n             return 'binary'\n         return 'unknown'\n     if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n+        if isinstance(y, pd.Series) and pd.api.types.is_extension_array_dtype(y.dtype):\n+            if pd.api.types.is_integer_dtype(y):\n+                return 'binary' if len(np.unique(y.dropna())) <= 2 else 'multiclass'\n+            elif pd.api.types.is_float_dtype(y):\n+                return 'continuous' + suffix\n+            elif pd.api.types.is_bool_dtype(y):\n+                return 'binary'\n         return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n", "normalized_occurrence": 1}
