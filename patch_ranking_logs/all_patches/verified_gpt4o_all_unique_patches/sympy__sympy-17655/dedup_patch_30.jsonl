{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..d269800 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -29,6 +29,7 @@ from sympy.geometry.exceptions import GeometryError\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.complexes import im\n from sympy.matrices import Matrix\n+from sympy.core.mul import Mul\n from sympy.core.numbers import Float\n from sympy.core.evaluate import global_evaluate\n from sympy.core.add import Add\n@@ -274,8 +275,13 @@ class Point(GeometryEntity):\n \n         sympy.geometry.point.Point.scale\n         \"\"\"\n-        factor = sympify(factor)\n-        coords = [simplify(x*factor) for x in self.args]\n+        if isinstance(factor, Point):\n+            factor, point = self, factor\n+        else:\n+            factor, point = sympify(factor), self\n+        if isinstance(factor, Mul):\n+            factor = factor.as_coeff_Mul()[0]\n+        coords = [simplify(x * factor) for x in point.args]\n         return Point(coords, evaluate=False)\n \n     def __neg__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..84ff8e4 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -8,6 +8,7 @@ from sympy.geometry.exceptions import GeometryError\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.complexes import im\n from sympy.matrices import Matrix\n+from sympy.core.mul import Mul\n from sympy.core.numbers import Float\n from sympy.core.evaluate import global_evaluate\n from sympy.core.add import Add\n@@ -87,8 +88,13 @@ class Point(GeometryEntity):\n     def __len__(self):\n         return len(self.args)\n     def __mul__(self, factor):\n-        factor = sympify(factor)\n-        coords = [simplify(x * factor) for x in self.args]\n+        if isinstance(factor, Point):\n+            factor, point = (self, factor)\n+        else:\n+            factor, point = (sympify(factor), self)\n+        if isinstance(factor, Mul):\n+            factor = factor.as_coeff_Mul()[0]\n+        coords = [simplify(x * factor) for x in point.args]\n         return Point(coords, evaluate=False)\n     def __neg__(self):\n         coords = [-x for x in self.args]\n", "normalized_occurrence": 1}
