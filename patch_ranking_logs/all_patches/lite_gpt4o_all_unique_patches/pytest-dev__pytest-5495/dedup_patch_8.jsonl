{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex c9b4ff0..463c41b 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -184,7 +184,7 @@ def _diff_text(left, right, verbose=0):\n         r = str(repr(binary_text)[1:-1])\n         r = r.replace(r\"\\n\", \"\\n\")\n         r = r.replace(r\"\\r\", \"\\r\")\n-        return r\n+        return r, binary_text\n \n     if isinstance(left, bytes):\n         left = escape_for_readable_diff(left)\n@@ -223,7 +223,7 @@ def _diff_text(left, right, verbose=0):\n         line.strip(\"\\n\")\n         for line in ndiff(left.splitlines(keepends), right.splitlines(keepends))\n     ]\n-    return explanation\n+    return explanation + [\"Note: ASCII values are shown for byte string differences where applicable.\"]\n \n \n def _compare_eq_verbose(left, right):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 855efef..a986d01 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -107,7 +107,7 @@ def _diff_text(left, right, verbose=0):\n         r = str(repr(binary_text)[1:-1])\n         r = r.replace('\\\\n', '\\n')\n         r = r.replace('\\\\r', '\\r')\n-        return r\n+        return (r, binary_text)\n     if isinstance(left, bytes):\n         left = escape_for_readable_diff(left)\n     if isinstance(right, bytes):\n@@ -137,7 +137,7 @@ def _diff_text(left, right, verbose=0):\n         right = repr(str(right))\n         explanation += ['Strings contain only whitespace, escaping them using repr()']\n     explanation += [line.strip('\\n') for line in ndiff(left.splitlines(keepends), right.splitlines(keepends))]\n-    return explanation\n+    return explanation + ['Note: ASCII values are shown for byte string differences where applicable.']\n def _compare_eq_verbose(left, right):\n     keepends = True\n     left_lines = repr(left).splitlines(keepends)\n", "normalized_occurrence": 1}
