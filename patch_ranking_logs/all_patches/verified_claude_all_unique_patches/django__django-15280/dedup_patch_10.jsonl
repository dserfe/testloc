{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..5740df8 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -117,36 +117,7 @@ class ForwardManyToOneDescriptor:\n     def get_queryset(self, **hints):\n         return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()\n \n-    def get_prefetch_queryset(self, instances, queryset=None):\n-        if queryset is None:\n-            queryset = self.get_queryset()\n-        queryset._add_hints(instance=instances[0])\n-\n-        rel_obj_attr = self.field.get_foreign_related_value\n-        instance_attr = self.field.get_local_related_value\n-        instances_dict = {instance_attr(inst): inst for inst in instances}\n-        related_field = self.field.foreign_related_fields[0]\n-        remote_field = self.field.remote_field\n \n-        # FIXME: This will need to be revisited when we introduce support for\n-        # composite fields. In the meantime we take this practical approach to\n-        # solve a regression on 1.6 when the reverse manager in hidden\n-        # (related_name ends with a '+'). Refs #21410.\n-        # The check for len(...) == 1 is a special case that allows the query\n-        # to be join-less and smaller. Refs #21760.\n-        if remote_field.is_hidden() or len(self.field.foreign_related_fields) == 1:\n-            query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n-        else:\n-            query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n-\n-        # Since we're going to assign directly in the cache,\n-        # we must manage the reverse relation cache manually.\n-        if not remote_field.multiple:\n-            for rel_obj in queryset:\n-                instance = instances_dict[rel_obj_attr(rel_obj)]\n-                remote_field.set_cached_value(rel_obj, instance)\n-        return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..696591d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -20,25 +20,6 @@ class ForwardManyToOneDescriptor:\n         return self.field.is_cached(instance)\n     def get_queryset(self, **hints):\n         return self.field.remote_field.model._base_manager.db_manager(hints=hints).all()\n-    def get_prefetch_queryset(self, instances, queryset=None):\n-        if queryset is None:\n-            queryset = self.get_queryset()\n-        queryset._add_hints(instance=instances[0])\n-        rel_obj_attr = self.field.get_foreign_related_value\n-        instance_attr = self.field.get_local_related_value\n-        instances_dict = {instance_attr(inst): inst for inst in instances}\n-        related_field = self.field.foreign_related_fields[0]\n-        remote_field = self.field.remote_field\n-        if remote_field.is_hidden() or len(self.field.foreign_related_fields) == 1:\n-            query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n-        else:\n-            query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n-        if not remote_field.multiple:\n-            for rel_obj in queryset:\n-                instance = instances_dict[rel_obj_attr(rel_obj)]\n-                remote_field.set_cached_value(rel_obj, instance)\n-        return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n         return qs.get(self.field.get_reverse_related_filter(instance))\n", "normalized_occurrence": 2}
