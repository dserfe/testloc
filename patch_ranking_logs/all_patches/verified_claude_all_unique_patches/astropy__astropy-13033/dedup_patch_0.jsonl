{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-13033", "model_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex 33e697b..15e252c 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -75,10 +75,15 @@ class BaseTimeSeries(QTable):\n                                  .format(self.__class__.__name__, required_columns[0], plural))\n \n             elif self.colnames[:len(required_columns)] != required_columns:\n-\n-                raise ValueError(\"{} object is invalid - expected '{}' \"\n-                                 \"as the first column{} but found '{}'\"\n-                                 .format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = set(required_columns) - set(self.colnames)\n+                if missing_columns:\n+                    raise ValueError(\"{} object is invalid - missing required column{}: {}\"\n+                                   .format(self.__class__.__name__,\n+                                         's' if len(missing_columns) > 1 else '',\n+                                         ', '.join(repr(col) for col in missing_columns)))\n+                else:\n+                    raise ValueError(\"{} object is invalid - columns must be in order: {}\"\n+                                   .format(self.__class__.__name__, ', '.join(repr(col) for col in required_columns)))\n \n             if (self._required_columns_relax\n                     and self._required_columns == self.colnames[:len(self._required_columns)]):\n@@ -89,4 +94,4 @@ class BaseTimeSeries(QTable):\n         self._required_columns_enabled = False\n         yield\n         self._required_columns_enabled = True\n-        self._check_required_columns()\n+        self._check_required_columns()\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/timeseries/core.py b/astropy/timeseries/core.py\nindex 99658fd..4b001c1 100644\n--- a/astropy/timeseries/core.py\n+++ b/astropy/timeseries/core.py\n@@ -33,7 +33,11 @@ class BaseTimeSeries(QTable):\n             if not self._required_columns_relax and len(self.colnames) == 0:\n                 raise ValueError(\"{} object is invalid - expected '{}' as the first column{} but time series has no columns\".format(self.__class__.__name__, required_columns[0], plural))\n             elif self.colnames[:len(required_columns)] != required_columns:\n-                raise ValueError(\"{} object is invalid - expected '{}' as the first column{} but found '{}'\".format(self.__class__.__name__, required_columns[0], plural, self.colnames[0]))\n+                missing_columns = set(required_columns) - set(self.colnames)\n+                if missing_columns:\n+                    raise ValueError('{} object is invalid - missing required column{}: {}'.format(self.__class__.__name__, 's' if len(missing_columns) > 1 else '', ', '.join((repr(col) for col in missing_columns))))\n+                else:\n+                    raise ValueError('{} object is invalid - columns must be in order: {}'.format(self.__class__.__name__, ', '.join((repr(col) for col in required_columns))))\n             if self._required_columns_relax and self._required_columns == self.colnames[:len(self._required_columns)]:\n                 self._required_columns_relax = False\n     @contextmanager\n", "normalized_occurrence": 2}
