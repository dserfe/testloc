{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex da040b3..b951b27 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -106,6 +106,8 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n+import enum\n+\n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n@@ -164,6 +166,17 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n                 elif isinstance(node, ast.NameConstant):\n                     return [nodes.Text(node.value)]\n \n+            # Special handling for Enum values\n+            if hasattr(node, 'value') and isinstance(node.value, ast.Attribute):\n+                try:\n+                    # Try to evaluate the node as an Enum value\n+                    enum_val = eval(unparse(node)[0])\n+                    if isinstance(enum_val, enum.Enum):\n+                        # Return just the enum class and value name\n+                        return [nodes.Text(f\"{enum_val.__class__.__name__}.{enum_val.name}\")]\n+                except:\n+                    pass\n+\n             raise SyntaxError  # unsupported syntax\n \n     if env is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 5b8a917..8026cf2 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -56,6 +56,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         contnodes = [nodes.Text(text)]\n     return pending_xref('', *contnodes, refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+import enum\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -110,6 +111,13 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n                     return [addnodes.desc_sig_punctuation('', '...')]\n                 elif isinstance(node, ast.NameConstant):\n                     return [nodes.Text(node.value)]\n+            if hasattr(node, 'value') and isinstance(node.value, ast.Attribute):\n+                try:\n+                    enum_val = eval(unparse(node)[0])\n+                    if isinstance(enum_val, enum.Enum):\n+                        return [nodes.Text(f'{enum_val.__class__.__name__}.{enum_val.name}')]\n+                except:\n+                    pass\n             raise SyntaxError\n     if env is None:\n         warnings.warn('The env parameter for _parse_annotation becomes required now.', RemovedInSphinx50Warning, stacklevel=2)\n", "normalized_occurrence": 1}
