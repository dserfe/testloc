{"model_name_or_path": "agentless", "instance_id": "django__django-11292", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex c0cee4d..0e3cf29 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -286,6 +286,10 @@ class BaseCommand:\n             '--force-color', action='store_true',\n             help='Force colorization of the command output.',\n         )\n+        parser.add_argument(\n+            '--skip-checks', action='store_true',\n+            help='Skip system checks.',\n+        )\n         self.add_arguments(parser)\n         return parser\n \n@@ -357,6 +361,8 @@ class BaseCommand:\n         if options.get('stderr'):\n             self.stderr = OutputWrapper(options['stderr'])\n \n+        if self.requires_system_checks and not options.get('skip_checks'):\n+            self.check()\n         if self.requires_system_checks and not options.get('skip_checks'):\n             self.check()\n         if self.requires_migrations_checks:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 29eeeba..e4bb1a2 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -103,6 +103,7 @@ class BaseCommand:\n         parser.add_argument('--traceback', action='store_true', help='Raise on CommandError exceptions')\n         parser.add_argument('--no-color', action='store_true', help=\"Don't colorize the command output.\")\n         parser.add_argument('--force-color', action='store_true', help='Force colorization of the command output.')\n+        parser.add_argument('--skip-checks', action='store_true', help='Skip system checks.')\n         self.add_arguments(parser)\n         return parser\n     def add_arguments(self, parser):\n@@ -146,6 +147,8 @@ class BaseCommand:\n             self.stderr = OutputWrapper(options['stderr'])\n         if self.requires_system_checks and (not options.get('skip_checks')):\n             self.check()\n+        if self.requires_system_checks and (not options.get('skip_checks')):\n+            self.check()\n         if self.requires_migrations_checks:\n             self.check_migrations()\n         output = self.handle(*args, **options)\n", "normalized_occurrence": 1}
