{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7373", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 74f45dd..83ca8cc 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -19,16 +19,10 @@ evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n+    import _pytest._code\n \n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n@@ -98,7 +92,10 @@ class MarkEvaluator:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        import _pytest._code\n+\n+                        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+                        result = eval(exprcode, d)\n                     else:\n                         if \"reason\" not in mark.kwargs:\n                             # XXX better be checked at collection time\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 678113f..01bc759 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -14,15 +14,9 @@ from _pytest.nodes import Item\n from _pytest.store import StoreKey\n evalcache_key = StoreKey[Dict[str, Any]]()\n def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-        exprcode = _pytest._code.compile(expr, mode='eval')\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+    import _pytest._code\n+    exprcode = _pytest._code.compile(expr, mode='eval')\n+    return eval(exprcode, d)\n class MarkEvaluator:\n     def __init__(self, item: Item, name: str) -> None:\n         self.item = item\n@@ -74,7 +68,9 @@ class MarkEvaluator:\n                     self.expr = expr\n                     if isinstance(expr, str):\n                         d = self._getglobals()\n-                        result = cached_eval(self.item.config, expr, d)\n+                        import _pytest._code\n+                        exprcode = _pytest._code.compile(expr, mode='eval')\n+                        result = eval(exprcode, d)\n                     else:\n                         if 'reason' not in mark.kwargs:\n                             msg = 'you need to specify reason=STRING when using booleans as conditions.'\n", "normalized_occurrence": 1}
