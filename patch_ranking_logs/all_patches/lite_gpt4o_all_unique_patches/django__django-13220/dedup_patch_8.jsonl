{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..364680e 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,7 +174,25 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n-    def __str__(self):\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._compare_error_dicts(self.error_dict, other.error_dict)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return self._compare_error_lists(self.error_list, other.error_list)\n+        return self.message == other.message\n+    \n+    def _compare_error_dicts(self, dict1, dict2):\n+        if dict1.keys() != dict2.keys():\n+            return False\n+        for key in dict1:\n+            if not self._compare_error_lists(dict1[key], dict2[key]):\n+                return False\n+        return True\n+    \n+    def _compare_error_lists(self, list1, list2):\n+        return sorted(list1, key=str) == sorted(list2, key=str)\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n         return repr(list(self))\n@@ -190,4 +208,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7691d44..635c545 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -147,7 +147,25 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n-    def __str__(self):\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._compare_error_dicts(self.error_dict, other.error_dict)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return self._compare_error_lists(self.error_list, other.error_list)\n+        return self.message == other.message\n+\n+    def _compare_error_dicts(self, dict1, dict2):\n+        if dict1.keys() != dict2.keys():\n+            return False\n+        for key in dict1:\n+            if not self._compare_error_lists(dict1[key], dict2[key]):\n+                return False\n+        return True\n+\n+    def _compare_error_lists(self, list1, list2):\n+        return sorted(list1, key=str) == sorted(list2, key=str)\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n         return repr(list(self))\n", "normalized_occurrence": 1}
