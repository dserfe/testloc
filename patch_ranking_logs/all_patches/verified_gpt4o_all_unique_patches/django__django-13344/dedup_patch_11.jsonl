{"model_name_or_path": "agentless", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex ed8f4af..90f93e9 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -69,7 +69,11 @@ class BaseHandler:\n                     'Middleware factory %s returned None.' % middleware_path\n                 )\n \n-            if hasattr(mw_instance, 'process_view'):\n+            if hasattr(mw_instance, 'process_response'):\n+                self._template_response_middleware.insert(\n+                    0,\n+                    self.adapt_method_mode(is_async, mw_instance.process_response),\n+                )\n                 self._view_middleware.insert(\n                     0,\n                     self.adapt_method_mode(is_async, mw_instance.process_view),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex a097649..268db93 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -45,7 +45,8 @@ class BaseHandler:\n                 continue\n             if mw_instance is None:\n                 raise ImproperlyConfigured('Middleware factory %s returned None.' % middleware_path)\n-            if hasattr(mw_instance, 'process_view'):\n+            if hasattr(mw_instance, 'process_response'):\n+                self._template_response_middleware.insert(0, self.adapt_method_mode(is_async, mw_instance.process_response))\n                 self._view_middleware.insert(0, self.adapt_method_mode(is_async, mw_instance.process_view))\n             if hasattr(mw_instance, 'process_template_response'):\n                 self._template_response_middleware.append(self.adapt_method_mode(is_async, mw_instance.process_template_response))\n", "normalized_occurrence": 1}
