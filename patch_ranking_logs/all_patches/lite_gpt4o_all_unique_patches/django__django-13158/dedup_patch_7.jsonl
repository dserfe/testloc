{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..c7876cb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -991,6 +991,8 @@ class QuerySet:\n         # Clear limits and ordering so they can be reapplied\n         clone.query.clear_ordering(True)\n         clone.query.clear_limits()\n+        if any(isinstance(qs, EmptyQuerySet) for qs in [self] + list(other_qs)):\n+            return self.none()\n         clone.query.combined_queries = (self.query,) + tuple(qs.query for qs in other_qs)\n         clone.query.combinator = combinator\n         clone.query.combinator_all = all\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..a907520 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -582,6 +582,8 @@ class QuerySet:\n         clone = self._chain()\n         clone.query.clear_ordering(True)\n         clone.query.clear_limits()\n+        if any((isinstance(qs, EmptyQuerySet) for qs in [self] + list(other_qs))):\n+            return self.none()\n         clone.query.combined_queries = (self.query,) + tuple((qs.query for qs in other_qs))\n         clone.query.combinator = combinator\n         clone.query.combinator_all = all\n", "normalized_occurrence": 1}
