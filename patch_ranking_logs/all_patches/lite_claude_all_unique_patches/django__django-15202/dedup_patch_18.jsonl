{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..7af547b 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -102,14 +102,15 @@ class URLValidator(RegexValidator):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n-        # Check if the scheme is valid.\n-        scheme = value.split('://')[0].lower()\n-        if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code, params={'value': value})\n-\n         # Then check full URL\n         try:\n+            # Check if the scheme is valid.\n+            scheme, netloc, path, query, fragment = urlsplit(value)\n+            if scheme.lower() not in self.schemes:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             super().__call__(value)\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         except ValidationError as e:\n             # Trivial case failed. Try for possible IDN domain\n             if value:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..044f638 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -59,11 +59,13 @@ class URLValidator(RegexValidator):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n-        scheme = value.split('://')[0].lower()\n-        if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n+            scheme, netloc, path, query, fragment = urlsplit(value)\n+            if scheme.lower() not in self.schemes:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n             super().__call__(value)\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         except ValidationError as e:\n             if value:\n                 try:\n", "normalized_occurrence": 1}
