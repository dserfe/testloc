{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..cfd812c 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1318,6 +1318,8 @@ class PairGrid(Grid):\n         self.tight_layout(pad=layout_pad)\n \n     def map(self, func, **kwargs):\n+        if \"hue\" in kwargs and isinstance(kwargs[\"hue\"], pd.Series):\n+            kwargs[\"hue\"] = kwargs[\"hue\"].values\n         \"\"\"Plot with the same function in every subplot.\n \n         Parameters\n@@ -1565,10 +1567,11 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n+        # Ensure that \"hue\" is in kwargs even if provided directly\n+        if \"hue\" not in kwargs and hue is not None:\n+            if isinstance(hue, pd.Series):\n+                hue = hue.values\n+            kwargs.update({\"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette})\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..9ecc8e5 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -605,6 +605,9 @@ class PairGrid(Grid):\n             utils.despine(fig=fig)\n         self.tight_layout(pad=layout_pad)\n     def map(self, func, **kwargs):\n+        if 'hue' in kwargs and isinstance(kwargs['hue'], pd.Series):\n+            kwargs['hue'] = kwargs['hue'].values\n+        'Plot with the same function in every subplot.\\n\\n        Parameters\\n        ----------\\n        func : callable plotting function\\n            Must take x, y arrays as positional arguments and draw onto the\\n            \"currently active\" matplotlib Axes. Also needs to accept kwargs\\n            called ``color`` and  ``label``.\\n\\n        '\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n         self._map_bivariate(func, indices, **kwargs)\n@@ -747,7 +750,9 @@ class PairGrid(Grid):\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n+        if 'hue' not in kwargs and hue is not None:\n+            if isinstance(hue, pd.Series):\n+                hue = hue.values\n             kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n", "normalized_occurrence": 1}
