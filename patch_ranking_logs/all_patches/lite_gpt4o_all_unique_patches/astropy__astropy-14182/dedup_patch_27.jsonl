{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..adae935 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,21 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+\n+    def _get_header_lines(self, table):\n+        if not self.header_rows:\n+            return super()._get_header_lines(table)\n+        headers = {key: [] for key in self.header_rows}\n+        for key in self.header_rows:\n+            for col in table.columns.values():\n+                headers[key].append(str(getattr(col, key, '')))\n+        lines = [' '.join(headers[key]) for key in self.header_rows]\n+        return lines\n \n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..9067853 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,8 +18,18 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n+    def _get_header_lines(self, table):\n+        if not self.header_rows:\n+            return super()._get_header_lines(table)\n+        headers = {key: [] for key in self.header_rows}\n+        for key in self.header_rows:\n+            for col in table.columns.values():\n+                headers[key].append(str(getattr(col, key, '')))\n+        lines = [' '.join(headers[key]) for key in self.header_rows]\n+        return lines\n     def write(self, lines):\n         lines = super().write(lines)\n         lines = [lines[1]] + lines + [lines[1]]\n", "normalized_occurrence": 1}
