{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 5b43615..c7ec0c5 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1638,12 +1638,15 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    # Add padding for both string and nominal scales\n+                    if isinstance(a, str) or (hasattr(ax, f'get_{axis}scale') and \n+                            isinstance(getattr(ax, f'get_{axis}scale')(), Nominal)):\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(b, str) or (hasattr(ax, f'get_{axis}scale') and \n+                            isinstance(getattr(ax, f'get_{axis}scale')(), Nominal)):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f\"{axis}lim\": (lo, hi)})\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n-        set_layout_engine(self._figure, layout_engine)\n+        set_layout_engine(self._figure, layout_engine)\ndiff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..67fbc96 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -194,6 +194,14 @@ class Nominal(Scale):\n \n         new._matplotlib_scale = mpl_scale\n \n+        # Set padding behavior for nominal scales\n+        if axis is not None:\n+            # Disable grid for nominal scales\n+            axis.grid(False)\n+            # Invert y-axis if this is a y-axis nominal scale\n+            if isinstance(axis, mpl.axis.YAxis):\n+                axis.set_inverted(True)\n+\n         # TODO array cast necessary to handle float/int mixture, which we need\n         # to solve in a more systematic way probably\n         # (i.e. if we have [1, 2.5], do we want [1.0, 2.5]? Unclear)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..d212945 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -96,6 +96,10 @@ class Nominal(Scale):\n             axis = PseudoAxis(mpl_scale)\n             axis.set_view_interval(0, len(units_seed) - 1)\n         new._matplotlib_scale = mpl_scale\n+        if axis is not None:\n+            axis.grid(False)\n+            if isinstance(axis, mpl.axis.YAxis):\n+                axis.set_inverted(True)\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n             keep = np.array([x_ in units_seed for x_ in x], bool)\ndiff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 860ca1c..71159dd 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -754,9 +754,9 @@ class Plotter:\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n-                    if isinstance(a, str):\n+                    if isinstance(a, str) or (hasattr(ax, f'get_{axis}scale') and isinstance(getattr(ax, f'get_{axis}scale')(), Nominal)):\n                         lo = cast(float, lo) - 0.5\n-                    if isinstance(b, str):\n+                    if isinstance(b, str) or (hasattr(ax, f'get_{axis}scale') and isinstance(getattr(ax, f'get_{axis}scale')(), Nominal)):\n                         hi = cast(float, hi) + 0.5\n                     ax.set(**{f'{axis}lim': (lo, hi)})\n         engine_default = None if p._target is not None else 'tight'\n", "normalized_occurrence": 1}
