{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..91555d4 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,19 +408,37 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple):\n+        return longrepr\n+    elif hasattr(longrepr, \"tojson\"):\n+        return longrepr.tojson()\n+    return repr(longrepr)\n+\n+def deserialize_longrepr(data):\n+    if isinstance(data, tuple):\n+        return data\n+    elif isinstance(data, str) and data.startswith(\"{\"):\n+        import json\n+        return json.loads(data)\n+    return data\n+\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n+        data[\"longrepr\"] = serialize_longrepr(report.longrepr)\n         return data\n \n-\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n         elif data[\"_report_type\"] == \"CollectReport\":\n-            return CollectReport._from_json(data)\n-        assert False, \"Unknown report_type unserialize data: {}\".format(\n-            data[\"_report_type\"]\n-        )\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, \"Unknown report_type unserialize data: {}\".format(\n+                data[\"_report_type\"]\n+            )\n+        report.longrepr = deserialize_longrepr(data[\"longrepr\"])\n+        return report\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..2140eee 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,15 +205,32 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple):\n+        return longrepr\n+    elif hasattr(longrepr, 'tojson'):\n+        return longrepr.tojson()\n+    return repr(longrepr)\n+def deserialize_longrepr(data):\n+    if isinstance(data, tuple):\n+        return data\n+    elif isinstance(data, str) and data.startswith('{'):\n+        import json\n+        return json.loads(data)\n+    return data\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n+        data['longrepr'] = serialize_longrepr(report.longrepr)\n         return data\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n         elif data['_report_type'] == 'CollectReport':\n-            return CollectReport._from_json(data)\n-        assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n+            report = CollectReport._from_json(data)\n+        else:\n+            assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n+        report.longrepr = deserialize_longrepr(data['longrepr'])\n+        return report\n\\ No newline at end of file\n", "normalized_occurrence": 1}
