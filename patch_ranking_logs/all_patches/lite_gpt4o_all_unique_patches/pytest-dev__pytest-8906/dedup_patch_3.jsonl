{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..1263e0e 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -133,6 +133,8 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         of the module. Defaults to False.\n \n     .. note::\n+        If you need to skip a whole module based on certain conditions,\n+        use the :func:`skip_module` function.\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n@@ -145,6 +147,20 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n \n \n @_with_exception(Failed)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at the module level to skip the entire\n+    module during collection. This is useful when the module uses syntax or\n+    features not available in the current Python version.\n+\n+    :param str msg:\n+        The message to show the user as the reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n+\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..df80746 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -91,6 +91,8 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n         of the module. Defaults to False.\n \n     .. note::\n+        If you need to skip a whole module based on certain conditions,\n+        use the :func:`skip_module` function.\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n@@ -102,6 +104,19 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n @_with_exception(Failed)\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at the module level to skip the entire\n+    module during collection. This is useful when the module uses syntax or\n+    features not available in the current Python version.\n+\n+    :param str msg:\n+        The message to show the user as the reason for skipping the module.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n \n", "normalized_occurrence": 1}
