{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..9dee0bb 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -438,6 +438,15 @@ class exp(ExpBase):\n             return S.One\n         return exp(arg)\n \n+    def _eval_expand_trig(self, **hints):\n+        \"\"\"Identify and convert exponential patterns to trigonometric functions.\"\"\"\n+        from sympy import expand\n+        expr = expand(self)\n+        if isinstance(expr, exp):\n+            return expr\n+        result = self._exp_to_trig(expr)\n+        return result if result is not None else expr\n+\n     def _eval_rewrite_as_sin(self, arg):\n         from sympy import sin\n         I = S.ImaginaryUnit\n@@ -452,6 +461,28 @@ class exp(ExpBase):\n         from sympy import tanh\n         return (1 + tanh(arg/2))/(1 - tanh(arg/2))\n \n+    @staticmethod\n+    def _exp_to_trig(expr):\n+        \"\"\"Helper method to convert exponential combinations to trigonometric functions.\"\"\"\n+        from sympy import I, sin, cos, Add, Mul, Wild\n+        if not isinstance(expr, Add):\n+            return None\n+        \n+        # Pattern match for sin: -I*exp(I*x) + I*exp(-I*x) = 2*sin(x)\n+        a, b = Wild('a'), Wild('b')\n+        pattern_sin = I*exp(-I*a) - I*exp(I*a)\n+        match = expr.match(pattern_sin)\n+        if match and len(match) == 1:\n+            return 2*sin(match[a])\n+            \n+        # Pattern match for cos: exp(I*x) + exp(-I*x) = 2*cos(x)\n+        pattern_cos = exp(I*b) + exp(-I*b)\n+        match = expr.match(pattern_cos)\n+        if match and len(match) == 1:\n+            return 2*cos(match[b])\n+            \n+        return None\n+\n \n class log(Function):\n     r\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n+    def _eval_expand_trig(self, **hints):\n+        from sympy import expand\n+        expr = expand(self)\n+        if isinstance(expr, exp):\n+            return expr\n+        result = self._exp_to_trig(expr)\n+        return result if result is not None else expr\n+    @staticmethod\n+    def _exp_to_trig(expr):\n+        from sympy import I, sin, cos, Add, Mul, Wild\n+        if not isinstance(expr, Add):\n+            return None\n+        a, b = (Wild('a'), Wild('b'))\n+        pattern_sin = I * exp(-I * a) - I * exp(I * a)\n+        match = expr.match(pattern_sin)\n+        if match and len(match) == 1:\n+            return 2 * sin(match[a])\n+        pattern_cos = exp(I * b) + exp(-I * b)\n+        match = expr.match(pattern_cos)\n+        if match and len(match) == 1:\n+            return 2 * cos(match[b])\n+        return None", "normalized_occurrence": 1}
