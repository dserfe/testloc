{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..c7b7205 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -126,7 +126,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         node += field\n \n \n", "occurrence": 2, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..b3b7335 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -96,7 +96,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n         node += field\n def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[str, str], force_rtype: bool) -> None:\n     fields = cast(Iterable[nodes.field], node)\n", "normalized_occurrence": 2}
