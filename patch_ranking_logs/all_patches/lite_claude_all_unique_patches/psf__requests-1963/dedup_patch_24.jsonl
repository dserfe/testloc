{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..c1db955 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,9 +86,11 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = req.copy()\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            # Copy the previous prepared request to handle any redirects\n+            new_prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -118,7 +120,7 @@ class SessionRedirectMixin(object):\n             else:\n                 url = requote_uri(url)\n \n-            prepared_request.url = to_native_string(url)\n+            new_prepared_request.url = to_native_string(url)\n \n             # http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.3.4\n             if (resp.status_code == codes.see_other and\n@@ -135,16 +137,16 @@ class SessionRedirectMixin(object):\n             if resp.status_code == codes.moved and method == 'POST':\n                 method = 'GET'\n \n-            prepared_request.method = method\n+            new_prepared_request.method = method\n \n             # https://github.com/kennethreitz/requests/issues/1084\n             if resp.status_code not in (codes.temporary, codes.resume):\n-                if 'Content-Length' in prepared_request.headers:\n-                    del prepared_request.headers['Content-Length']\n+                if 'Content-Length' in new_prepared_request.headers:\n+                    del new_prepared_request.headers['Content-Length']\n \n-                prepared_request.body = None\n+                new_prepared_request.body = None\n \n-            headers = prepared_request.headers\n+            headers = new_prepared_request.headers\n             try:\n                 del headers['Cookie']\n             except KeyError:\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..5bcc12a 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -35,8 +35,9 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n+        prepared_request = req.copy()\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            new_prepared_request = prepared_request.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n@@ -52,19 +53,19 @@ class SessionRedirectMixin(object):\n                 url = urljoin(resp.url, requote_uri(url))\n             else:\n                 url = requote_uri(url)\n-            prepared_request.url = to_native_string(url)\n+            new_prepared_request.url = to_native_string(url)\n             if resp.status_code == codes.see_other and method != 'HEAD':\n                 method = 'GET'\n             if resp.status_code == codes.found and method != 'HEAD':\n                 method = 'GET'\n             if resp.status_code == codes.moved and method == 'POST':\n                 method = 'GET'\n-            prepared_request.method = method\n+            new_prepared_request.method = method\n             if resp.status_code not in (codes.temporary, codes.resume):\n-                if 'Content-Length' in prepared_request.headers:\n-                    del prepared_request.headers['Content-Length']\n-                prepared_request.body = None\n-            headers = prepared_request.headers\n+                if 'Content-Length' in new_prepared_request.headers:\n+                    del new_prepared_request.headers['Content-Length']\n+                new_prepared_request.body = None\n+            headers = new_prepared_request.headers\n             try:\n                 del headers['Cookie']\n             except KeyError:\n", "normalized_occurrence": 1}
