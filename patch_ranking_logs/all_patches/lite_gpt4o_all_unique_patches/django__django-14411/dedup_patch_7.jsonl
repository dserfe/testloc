{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..2b9a960 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -361,6 +361,12 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         label = pretty_name(name)\n         attr = name\n \n+    # Check if the field is ReadOnlyPasswordHashWidget and avoid setting 'for' attribute\n+    if form and name in form.fields:\n+        field_widget = form.fields[name].widget\n+        if isinstance(field_widget, ReadOnlyPasswordHashWidget):\n+            return (label, None) if return_attr else label\n+\n     if return_attr:\n         return (label, attr)\n     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..f313b91 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -220,6 +220,10 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     except FieldIsAForeignKeyColumnName:\n         label = pretty_name(name)\n         attr = name\n+    if form and name in form.fields:\n+        field_widget = form.fields[name].widget\n+        if isinstance(field_widget, ReadOnlyPasswordHashWidget):\n+            return (label, None) if return_attr else label\n     if return_attr:\n         return (label, attr)\n     else:\n", "normalized_occurrence": 1}
