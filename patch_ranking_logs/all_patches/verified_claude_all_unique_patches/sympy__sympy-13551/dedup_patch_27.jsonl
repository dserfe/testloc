{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..a940c20 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -275,18 +275,11 @@ class Product(ExprWithIntLimits):\n             return poly.LC()**(n - a + 1) * A * B\n \n         elif term.is_Add:\n-            p, q = term.as_numer_denom()\n-            q = self._eval_product(q, (k, a, n))\n-            if q.is_Number:\n-\n-                # There is expression, which couldn't change by\n-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n-                # We have to catch this case.\n-\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n-            else:\n-                p = self._eval_product(p, (k, a, n))\n-            return p / q\n+            # Handle sum directly to preserve relationships between terms\n+            dif = n - a\n+            if dif.is_Integer:\n+                return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+            return None\n \n         elif term.is_Mul:\n             exclude, include = [], []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..95c5625 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -75,13 +75,10 @@ class Product(ExprWithIntLimits):\n                 B = self.func(arg, (k, a, n)).doit()\n             return poly.LC() ** (n - a + 1) * A * B\n         elif term.is_Add:\n-            p, q = term.as_numer_denom()\n-            q = self._eval_product(q, (k, a, n))\n-            if q.is_Number:\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n-            else:\n-                p = self._eval_product(p, (k, a, n))\n-            return p / q\n+            dif = n - a\n+            if dif.is_Integer:\n+                return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+            return None\n         elif term.is_Mul:\n             exclude, include = ([], [])\n             for t in term.args:\n", "normalized_occurrence": 1}
