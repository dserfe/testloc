{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\nindex c052c27..6a15a8a 100644\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -659,6 +659,25 @@ class StandaloneHTMLBuilder(Builder):\n         # the total count of lines for each index letter, used to distribute\n         # the entries into two columns\n         genindex = IndexEntries(self.env).create_index(self)\n+        \n+        # Normalize the index to combine all symbol entries\n+        normalized_genindex = []\n+        symbol_entries = []\n+        \n+        for key, entries in genindex:\n+            # If this is a symbol section (not a letter), collect entries\n+            if not key.isalpha():\n+                symbol_entries.extend(entries)\n+            else:\n+                normalized_genindex.append((key, entries))\n+        \n+        # If we found any symbol entries, add them as one section at the start\n+        if symbol_entries:\n+            normalized_genindex.insert(0, ('Symbols', sorted(symbol_entries)))\n+        \n+        # Replace original genindex with normalized version\n+        genindex = normalized_genindex\n+        \n         indexcounts = []\n         for _k, entries in genindex:\n             indexcounts.append(sum(1 + len(subitems)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/html/__init__.py b/sphinx/builders/html/__init__.py\nindex e212f45..ed34283 100644\n--- a/sphinx/builders/html/__init__.py\n+++ b/sphinx/builders/html/__init__.py\n@@ -405,6 +405,16 @@ class StandaloneHTMLBuilder(Builder):\n             self.handle_page('opensearch', {}, 'opensearch.xml', outfilename=fn)\n     def write_genindex(self) -> None:\n         genindex = IndexEntries(self.env).create_index(self)\n+        normalized_genindex = []\n+        symbol_entries = []\n+        for key, entries in genindex:\n+            if not key.isalpha():\n+                symbol_entries.extend(entries)\n+            else:\n+                normalized_genindex.append((key, entries))\n+        if symbol_entries:\n+            normalized_genindex.insert(0, ('Symbols', sorted(symbol_entries)))\n+        genindex = normalized_genindex\n         indexcounts = []\n         for _k, entries in genindex:\n             indexcounts.append(sum((1 + len(subitems) for _, (_, subitems, _) in entries)))\n", "normalized_occurrence": 1}
