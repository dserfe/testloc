{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 1220930..b7be2c9 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -430,14 +430,28 @@ class HTML(core.BaseReader):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n \n-                                    new_col_iter_str_vals = self.fill_values(\n-                                        col, new_col.info.iter_str_vals())\n+                                    if col.info.name in self.formats:\n+                                        # Apply the format if specified\n+                                        formatter = self.formats[col.info.name]\n+                                        formatted_iter = (formatter(x) for x in new_col)\n+                                        new_col_iter_str_vals = self.fill_values(col, formatted_iter)\n+                                    else:\n+                                        # Use default string conversion if no format specified\n+                                        new_col_iter_str_vals = self.fill_values(\n+                                            col, new_col.info.iter_str_vals())\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                if col.info.name in self.formats:\n+                                    # Apply the format if specified\n+                                    formatter = self.formats[col.info.name]\n+                                    formatted_iter = (formatter(x) for x in col)\n+                                    col_iter_str_vals = self.fill_values(col, formatted_iter)\n+                                else:\n+                                    # Use default string conversion if no format specified\n+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 45fa153..172eb44 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -212,12 +212,22 @@ class HTML(core.BaseReader):\n                                 span = col.shape[1]\n                                 for i in range(span):\n                                     new_col = Column([el[i] for el in col])\n-                                    new_col_iter_str_vals = self.fill_values(col, new_col.info.iter_str_vals())\n+                                    if col.info.name in self.formats:\n+                                        formatter = self.formats[col.info.name]\n+                                        formatted_iter = (formatter(x) for x in new_col)\n+                                        new_col_iter_str_vals = self.fill_values(col, formatted_iter)\n+                                    else:\n+                                        new_col_iter_str_vals = self.fill_values(col, new_col.info.iter_str_vals())\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                if col.info.name in self.formats:\n+                                    formatter = self.formats[col.info.name]\n+                                    formatted_iter = (formatter(x) for x in col)\n+                                    col_iter_str_vals = self.fill_values(col, formatted_iter)\n+                                else:\n+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n                                 new_cols_escaped.append(col_escaped)\n                     for row in zip(*col_str_iters):\n", "normalized_occurrence": 1}
