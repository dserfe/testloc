{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1724", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 2a182e9..15e02bd 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -307,7 +307,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n         if self.method is not None:\n-            self.method = self.method.upper()\n+            self.method = str(self.method.upper() if hasattr(method, 'upper') else method)\n \n     def prepare_url(self, url, params):\n         \"\"\"Prepares the given HTTP URL.\"\"\"\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex e1a79e6..3304913 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -311,7 +311,7 @@ class Session(SessionRedirectMixin):\n         \"\"\"\n         # Create the Request.\n         req = Request(\n-            method = method.upper(),\n+            method = method,\n             url = url,\n             headers = headers,\n             files = files,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 69b69af..aa5abff 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -151,7 +151,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_method(self, method):\n         self.method = method\n         if self.method is not None:\n-            self.method = self.method.upper()\n+            self.method = str(self.method.upper() if hasattr(method, 'upper') else method)\n     def prepare_url(self, url, params):\n         try:\n             url = unicode(url)\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex 2ecfd84..8d94f24 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -102,7 +102,7 @@ class Session(SessionRedirectMixin):\n         p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_setting(request.hooks, self.hooks))\n         return p\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):\n-        req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n+        req = Request(method=method, url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n         prep = self.prepare_request(req)\n         self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n         proxies = proxies or {}\n", "normalized_occurrence": 1}
