{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..ea1c3fd 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -124,6 +124,33 @@ def exit(msg: str, returncode: Optional[int] = None) -> \"NoReturn\":\n def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     \"\"\"Skip an executing test with the given message.\n \n+    This function should be called only during testing (setup, call or teardown) or\n+    during collection by using the ``allow_module_level`` flag. This function can\n+    be called in doctests as well.\n+\n+    :param bool allow_module_level:\n+        Allows this function to be called at module level, skipping the rest\n+        of the module. Defaults to False.\n+\n+    .. note::\n+        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n+        possible to declare a test to be skipped under certain conditions\n+        like mismatching platforms or dependencies.\n+        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n+        to skip a doctest statically.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This is a convenience function to skip at the module level.\n+    \"\"\"\n+    skip(msg=msg, allow_module_level=True)\n+    \"\"\"Skip an executing test with the given message.\n+\n     This function should be called only during testing (setup, call or teardown) or\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..7105db2 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -83,7 +83,7 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     \"\"\"Skip an executing test with the given message.\n \n     This function should be called only during testing (setup, call or teardown) or\n-    during collection by using the ``allow_module_level`` flag.  This function can\n+    during collection by using the ``allow_module_level`` flag. This function can\n     be called in doctests as well.\n \n     :param bool allow_module_level:\n@@ -101,6 +101,16 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the entire module with the given message.\n+\n+    This is a convenience function to skip at the module level.\n+    \"\"\"\n+    skip(msg=msg, allow_module_level=True)\n+    'Skip an executing test with the given message.\\n\\n    This function should be called only during testing (setup, call or teardown) or\\n    during collection by using the ``allow_module_level`` flag.  This function can\\n    be called in doctests as well.\\n\\n    :param bool allow_module_level:\\n        Allows this function to be called at module level, skipping the rest\\n        of the module. Defaults to False.\\n\\n    .. note::\\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\\n        possible to declare a test to be skipped under certain conditions\\n        like mismatching platforms or dependencies.\\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\\n        to skip a doctest statically.\\n    '\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n @_with_exception(Failed)\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n", "normalized_occurrence": 1}
