{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..6edbc17 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -66,6 +66,9 @@ class _MockObject:\n         return call\n \n     def __repr__(self) -> str:\n+        name = getattr(self, '__name__', '')\n+        if name:\n+            return self.__display_name__ + '.' + name\n         return self.__display_name__\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..1a01f21 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -37,6 +37,9 @@ class _MockObject:\n         call.__sphinx_decorator_args__ = args\n         return call\n     def __repr__(self) -> str:\n+        name = getattr(self, '__name__', '')\n+        if name:\n+            return self.__display_name__ + '.' + name\n         return self.__display_name__\n def _make_subclass(name: str, module: str, superclass: Any=_MockObject, attributes: Any=None, decorator_args: Tuple=()) -> Any:\n     attrs = {'__module__': module, '__display_name__': module + '.' + name, '__sphinx_decorator_args__': decorator_args}\n", "normalized_occurrence": 2}
