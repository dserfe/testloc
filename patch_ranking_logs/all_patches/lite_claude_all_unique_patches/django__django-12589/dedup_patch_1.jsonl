{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..01ed0f1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -133,7 +133,11 @@ class SQLCompiler:\n         expressions = self.collapse_group_by(expressions, having_group_by)\n \n         for expr in expressions:\n-            sql, params = self.compile(expr)\n+            # For subquery expressions in GROUP BY, use the original expression\n+            if hasattr(expr, 'contains_aggregate') and expr.contains_aggregate:\n+                sql, params = expr.as_sql(self, self.connection)\n+            else:\n+                sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..d698892 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -64,7 +64,10 @@ class SQLCompiler:\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n         for expr in expressions:\n-            sql, params = self.compile(expr)\n+            if hasattr(expr, 'contains_aggregate') and expr.contains_aggregate:\n+                sql, params = expr.as_sql(self, self.connection)\n+            else:\n+                sql, params = self.compile(expr)\n             params_hash = make_hashable(params)\n             if (sql, params_hash) not in seen:\n                 result.append((sql, params))\n", "normalized_occurrence": 2}
