{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..d7be2a9 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,13 +3174,25 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove draggable legends from the state to make it picklable.\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend.get_draggable():\n+                    legend.set_draggable(False)\n+                    if '_draggable_state' not in state:\n+                        state['_draggable_state'] = []\n+                    state['_draggable_state'].append((ax, legend))\n+\n         return state\n \n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n \n-        if version != mpl.__version__:\n+        if '_draggable_state' in state:\n+            draggable_state = state.pop('_draggable_state')\n+        else:\n+            draggable_state = []\n             _api.warn_external(\n                 f\"This figure was saved with matplotlib version {version} and \"\n                 f\"is unlikely to function correctly.\")\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..8a0d5d9 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,11 +951,21 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend.get_draggable():\n+                    legend.set_draggable(False)\n+                    if '_draggable_state' not in state:\n+                        state['_draggable_state'] = []\n+                    state['_draggable_state'].append((ax, legend))\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n-        if version != mpl.__version__:\n+        if '_draggable_state' in state:\n+            draggable_state = state.pop('_draggable_state')\n+        else:\n+            draggable_state = []\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n         FigureCanvasBase(self)\n", "normalized_occurrence": 1}
