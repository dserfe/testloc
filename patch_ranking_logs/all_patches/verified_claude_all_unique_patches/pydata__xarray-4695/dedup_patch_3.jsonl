{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..0bcf167 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -111,10 +111,12 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n     dimension. If `index` is a pandas.MultiIndex and depending on `label`,\n     return a new pandas.Index or pandas.MultiIndex (otherwise return None).\n     \"\"\"\n+    # Rename method parameter internally to avoid conflicts with dimension names\n+    loc_method = method\n     new_index = None\n \n     if isinstance(label, slice):\n-        if method is not None or tolerance is not None:\n+        if loc_method is not None or tolerance is not None:\n             raise NotImplementedError(\n                 \"cannot use ``method`` argument if any indexers are slice objects\"\n             )\n@@ -178,7 +180,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n             if isinstance(index, pd.MultiIndex):\n                 indexer, new_index = index.get_loc_level(label_value, level=0)\n             elif isinstance(index, pd.CategoricalIndex):\n-                if method is not None:\n+                if loc_method is not None:\n                     raise ValueError(\n                         \"'method' is not a valid kwarg when indexing using a CategoricalIndex.\"\n                     )\n@@ -188,7 +190,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     )\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=loc_method, tolerance=tolerance)\n         elif label.dtype.kind == \"b\":\n             indexer = label\n         else:\n@@ -197,7 +199,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     \"Vectorized selection is not available along \"\n                     \"MultiIndex variable: \" + index_name\n                 )\n-            indexer = get_indexer_nd(index, label, method, tolerance)\n+            indexer = get_indexer_nd(index, label, loc_method, tolerance)\n             if np.any(indexer < 0):\n                 raise KeyError(f\"not all values found in index {index_name!r}\")\n     return indexer, new_index\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..9143ddc 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -58,9 +58,10 @@ def get_indexer_nd(index, labels, method=None, tolerance=None):\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n def convert_label_indexer(index, label, index_name='', method=None, tolerance=None):\n+    loc_method = method\n     new_index = None\n     if isinstance(label, slice):\n-        if method is not None or tolerance is not None:\n+        if loc_method is not None or tolerance is not None:\n             raise NotImplementedError('cannot use ``method`` argument if any indexers are slice objects')\n         indexer = index.slice_indexer(_sanitize_slice_element(label.start), _sanitize_slice_element(label.stop), _sanitize_slice_element(label.step))\n         if not isinstance(indexer, slice):\n@@ -92,19 +93,19 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n             if isinstance(index, pd.MultiIndex):\n                 indexer, new_index = index.get_loc_level(label_value, level=0)\n             elif isinstance(index, pd.CategoricalIndex):\n-                if method is not None:\n+                if loc_method is not None:\n                     raise ValueError(\"'method' is not a valid kwarg when indexing using a CategoricalIndex.\")\n                 if tolerance is not None:\n                     raise ValueError(\"'tolerance' is not a valid kwarg when indexing using a CategoricalIndex.\")\n                 indexer = index.get_loc(label_value)\n             else:\n-                indexer = index.get_loc(label_value, method=method, tolerance=tolerance)\n+                indexer = index.get_loc(label_value, method=loc_method, tolerance=tolerance)\n         elif label.dtype.kind == 'b':\n             indexer = label\n         else:\n             if isinstance(index, pd.MultiIndex) and label.ndim > 1:\n                 raise ValueError('Vectorized selection is not available along MultiIndex variable: ' + index_name)\n-            indexer = get_indexer_nd(index, label, method, tolerance)\n+            indexer = get_indexer_nd(index, label, loc_method, tolerance)\n             if np.any(indexer < 0):\n                 raise KeyError(f'not all values found in index {index_name!r}')\n     return (indexer, new_index)\n", "normalized_occurrence": 1}
