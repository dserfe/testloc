{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..e63e1f2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2513,20 +2513,18 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n         return None\n \n     def get_doc(self, encoding: str = None, ignore: int = None) -> Optional[List[List[str]]]:\n-        # Check the attribute has a docstring-comment\n-        comment = self.get_attribute_comment(self.parent, self.objpath[-1])\n-        if comment:\n-            return [comment]\n+        # Check the attribute has a docstring-comment in any class in the MRO\n+        if self.parent:\n+            for cls in inspect.getmro(self.parent):\n+                comment = self.get_attribute_comment(cls, self.objpath[-1])\n+                if comment:\n+                    return [comment]\n \n         try:\n-            # Disable `autodoc_inherit_docstring` temporarily to avoid to obtain\n-            # a docstring from the value which descriptor returns unexpectedly.\n-            # ref: https://github.com/sphinx-doc/sphinx/issues/7805\n-            orig = self.config.autodoc_inherit_docstrings\n-            self.config.autodoc_inherit_docstrings = False  # type: ignore\n+            # Check for regular docstring\n             return super().get_doc(encoding, ignore)\n-        finally:\n-            self.config.autodoc_inherit_docstrings = orig  # type: ignore\n+        except ValueError:\n+            return None\n \n     def add_content(self, more_content: Optional[StringList], no_docstring: bool = False\n                     ) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..f96a63d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1485,15 +1485,15 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin, TypeVarMi\n                 pass\n         return None\n     def get_doc(self, encoding: str=None, ignore: int=None) -> Optional[List[List[str]]]:\n-        comment = self.get_attribute_comment(self.parent, self.objpath[-1])\n-        if comment:\n-            return [comment]\n+        if self.parent:\n+            for cls in inspect.getmro(self.parent):\n+                comment = self.get_attribute_comment(cls, self.objpath[-1])\n+                if comment:\n+                    return [comment]\n         try:\n-            orig = self.config.autodoc_inherit_docstrings\n-            self.config.autodoc_inherit_docstrings = False\n             return super().get_doc(encoding, ignore)\n-        finally:\n-            self.config.autodoc_inherit_docstrings = orig\n+        except ValueError:\n+            return None\n     def add_content(self, more_content: Optional[StringList], no_docstring: bool=False) -> None:\n         self.analyzer = None\n         if more_content is None:\n", "normalized_occurrence": 1}
