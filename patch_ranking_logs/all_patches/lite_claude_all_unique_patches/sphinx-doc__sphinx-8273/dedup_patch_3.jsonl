{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8273", "model_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex cf59c0a..112481a 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -35,6 +35,7 @@ class ManualPageBuilder(Builder):\n     \"\"\"\n     Builds groff output in manual page format.\n     \"\"\"\n+    import os\n     name = 'man'\n     format = 'man'\n     epilog = __('The manual pages are in %(outdir)s.')\n@@ -82,8 +83,12 @@ class ManualPageBuilder(Builder):\n \n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n+            # Create section-specific subdirectory\n+            section_dir = path.join(self.outdir, 'man%d' % section)\n+            if not path.exists(section_dir):\n+                os.makedirs(section_dir)\n             destination = FileOutput(\n-                destination_path=path.join(self.outdir, targetname),\n+                destination_path=path.join(section_dir, targetname),\n                 encoding='utf-8')\n \n             tree = self.env.get_doctree(docname)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/manpage.py b/sphinx/builders/manpage.py\nindex c2eb81a..2f3089d 100644\n--- a/sphinx/builders/manpage.py\n+++ b/sphinx/builders/manpage.py\n@@ -16,6 +16,7 @@ from sphinx.util.osutil import make_filename_from_project\n from sphinx.writers.manpage import ManualPageWriter, ManualPageTranslator\n logger = logging.getLogger(__name__)\n class ManualPageBuilder(Builder):\n+    import os\n     name = 'man'\n     format = 'man'\n     epilog = __('The manual pages are in %(outdir)s.')\n@@ -50,7 +51,10 @@ class ManualPageBuilder(Builder):\n             docsettings.section = section\n             targetname = '%s.%s' % (name, section)\n             logger.info(darkgreen(targetname) + ' { ', nonl=True)\n-            destination = FileOutput(destination_path=path.join(self.outdir, targetname), encoding='utf-8')\n+            section_dir = path.join(self.outdir, 'man%d' % section)\n+            if not path.exists(section_dir):\n+                os.makedirs(section_dir)\n+            destination = FileOutput(destination_path=path.join(section_dir, targetname), encoding='utf-8')\n             tree = self.env.get_doctree(docname)\n             docnames = set()\n             largetree = inline_all_toctrees(self, docnames, docname, tree, darkgreen, [docname])\n", "normalized_occurrence": 2}
