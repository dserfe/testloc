{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 7f3e359..51232fd 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -437,22 +437,23 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\n                 # float64's ability to represent changes.  Applying\n                 # a norm first would be good, but ruins the interpolation\n                 # of over numbers.\n-                self.norm.autoscale_None(A)\n-                dv = np.float64(self.norm.vmax) - np.float64(self.norm.vmin)\n-                vmid = np.float64(self.norm.vmin) + dv / 2\n-                fact = 1e7 if scaled_dtype == np.float64 else 1e4\n-                newmin = vmid - dv * fact\n-                if newmin < a_min:\n-                    newmin = None\n-                else:\n-                    a_min = np.float64(newmin)\n-                newmax = vmid + dv * fact\n-                if newmax > a_max:\n-                    newmax = None\n-                else:\n-                    a_max = np.float64(newmax)\n-                if newmax is not None or newmin is not None:\n-                    np.clip(A_scaled, newmin, newmax, out=A_scaled)\n+                with np.errstate(invalid='ignore'):\n+                    self.norm.autoscale_None(A)\n+                    dv = np.float64(self.norm.vmax) - np.float64(self.norm.vmin)\n+                    vmid = np.float64(self.norm.vmin) + dv / 2\n+                    fact = 1e7 if scaled_dtype == np.float64 else 1e4\n+                    newmin = vmid - dv * fact\n+                    if newmin < a_min or not np.isfinite(newmin):\n+                        newmin = None\n+                    else:\n+                        a_min = np.float64(newmin)\n+                    newmax = vmid + dv * fact\n+                    if newmax > a_max or not np.isfinite(newmax):\n+                        newmax = None\n+                    else:\n+                        a_max = np.float64(newmax)\n+                    if newmax is not None or newmin is not None:\n+                        np.clip(A_scaled, newmin, newmax, out=A_scaled)\n \n                 # used to rescale the raw data to [offset, 1-offset]\n                 # so that the resampling code will run cleanly.  Using\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/image.py b/lib/matplotlib/image.py\nindex 21afb66..668e5f7 100644\n--- a/lib/matplotlib/image.py\n+++ b/lib/matplotlib/image.py\n@@ -169,22 +169,23 @@ class _ImageBase(martist.Artist, cm.ScalarMappable):\n                     da = a_max.astype(np.float64) - a_min.astype(np.float64)\n                     scaled_dtype = np.float64 if da > 100000000.0 else np.float32\n                 A_scaled = np.array(A, dtype=scaled_dtype)\n-                self.norm.autoscale_None(A)\n-                dv = np.float64(self.norm.vmax) - np.float64(self.norm.vmin)\n-                vmid = np.float64(self.norm.vmin) + dv / 2\n-                fact = 10000000.0 if scaled_dtype == np.float64 else 10000.0\n-                newmin = vmid - dv * fact\n-                if newmin < a_min:\n-                    newmin = None\n-                else:\n-                    a_min = np.float64(newmin)\n-                newmax = vmid + dv * fact\n-                if newmax > a_max:\n-                    newmax = None\n-                else:\n-                    a_max = np.float64(newmax)\n-                if newmax is not None or newmin is not None:\n-                    np.clip(A_scaled, newmin, newmax, out=A_scaled)\n+                with np.errstate(invalid='ignore'):\n+                    self.norm.autoscale_None(A)\n+                    dv = np.float64(self.norm.vmax) - np.float64(self.norm.vmin)\n+                    vmid = np.float64(self.norm.vmin) + dv / 2\n+                    fact = 10000000.0 if scaled_dtype == np.float64 else 10000.0\n+                    newmin = vmid - dv * fact\n+                    if newmin < a_min or not np.isfinite(newmin):\n+                        newmin = None\n+                    else:\n+                        a_min = np.float64(newmin)\n+                    newmax = vmid + dv * fact\n+                    if newmax > a_max or not np.isfinite(newmax):\n+                        newmax = None\n+                    else:\n+                        a_max = np.float64(newmax)\n+                    if newmax is not None or newmin is not None:\n+                        np.clip(A_scaled, newmin, newmax, out=A_scaled)\n                 offset = 0.1\n                 frac = 0.8\n                 vmin, vmax = (self.norm.vmin, self.norm.vmax)\n", "normalized_occurrence": 1}
