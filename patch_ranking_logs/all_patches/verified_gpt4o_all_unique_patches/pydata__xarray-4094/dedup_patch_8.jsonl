{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..77b4b8f 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3482,7 +3482,9 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         new_idx = idx.set_levels(levels)\n         data_array[new_dim] = IndexVariable(new_dim, new_idx)\n \n-        if name is not None:\n+        # Ensure correct dtype for single-dimensional variables\n+        if len(idx.levels) == 2 and all(len(level) == 1 for level in idx.levels[1:]):\n+            levels = [levels[0]]\n             data_array.name = name\n \n         return data_array\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..997120f 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1160,7 +1160,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         levels = [idx.levels[0]] + [level.astype(self[level.name].dtype) for level in idx.levels[1:]]\n         new_idx = idx.set_levels(levels)\n         data_array[new_dim] = IndexVariable(new_dim, new_idx)\n-        if name is not None:\n+        if len(idx.levels) == 2 and all((len(level) == 1 for level in idx.levels[1:])):\n+            levels = [levels[0]]\n             data_array.name = name\n         return data_array\n     def _unstack_once(self, dim: Hashable, fill_value, sparse) -> 'Dataset':\n", "normalized_occurrence": 1}
