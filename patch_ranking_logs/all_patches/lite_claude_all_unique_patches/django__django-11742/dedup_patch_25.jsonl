{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..b205692 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -955,8 +955,25 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_max_length_for_choices(**kwargs),\n         ]\n \n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        \n+        longest_choice = max(len(str(choice[0])) for choice in self.choices)\n+        if longest_choice > self.max_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' is too small to fit the longest choice value. \"\n+                    f\"Got max_length={self.max_length} but longest choice is {longest_choice} chars.\",\n+                    obj=self,\n+                    id='fields.E122',\n+                )\n+            ]\n+        return []\n+\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..16433b6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -461,7 +461,14 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs), *self._check_max_length_for_choices(**kwargs)]\n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        longest_choice = max((len(str(choice[0])) for choice in self.choices))\n+        if longest_choice > self.max_length:\n+            return [checks.Error(f\"'max_length' is too small to fit the longest choice value. Got max_length={self.max_length} but longest choice is {longest_choice} chars.\", obj=self, id='fields.E122')]\n+        return []\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n", "normalized_occurrence": 1}
