{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..6903873 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,12 +90,21 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        # Handle django.db.models specially\n+        if path.startswith(\"django.db.models.\"):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n+            name = \"models.\" + path[len(\"django.db.models.\"):]\n+            return name, imports\n+            \n+        # Split on the first occurrence after the module\n+        parts = path.split('.')\n+        # The module is everything up to the model class\n+        module = '.'.join(parts[:2])  # e.g. 'test1.models'\n+        # The name is everything after, preserving inner class hierarchy\n+        name = '.'.join(parts[2:])    # e.g. 'Outer.Inner'\n+        imports = {\"import %s\" % module}\n+        # Only use full path if it's a nested class\n+        if '.' in name:\n             name = path\n         return name, imports\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..aa96360 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,12 +68,15 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n+            name = 'models.' + path[len('django.db.models.'):]\n+            return (name, imports)\n+        parts = path.split('.')\n+        module = '.'.join(parts[:2])\n+        name = '.'.join(parts[2:])\n+        imports = {'import %s' % module}\n+        if '.' in name:\n             name = path\n         return (name, imports)\n     def serialize(self):\n", "normalized_occurrence": 1}
