{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex 5801e03..911dbfb 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -668,8 +668,30 @@ class BaseDatabaseOperations:\n         can vary between backends (e.g., Oracle with %% and &) and between\n         subexpression types (e.g., date expressions).\n         \"\"\"\n-        conn = \" %s \" % connector\n-        return conn.join(sub_expressions)\n+        if connector == '^':\n+            # Handle multiple XOR operations to ensure odd number of true values\n+            if len(sub_expressions) <= 2:\n+                conn = \" %s \" % connector\n+                return conn.join(sub_expressions)\n+            else:\n+                # For 3 or more expressions, use combination of AND, OR, NOT\n+                # to implement proper XOR behavior for multiple terms\n+                parts = []\n+                for i in range(1, len(sub_expressions) + 1, 2):\n+                    if i == len(sub_expressions):\n+                        # Handle last term if odd number of expressions\n+                        parts.append(\"(%s)\" % sub_expressions[i-1])\n+                    else:\n+                        # Combine pairs with XOR\n+                        parts.append(\"((%s) # (%s))\" % (\n+                            sub_expressions[i-1],\n+                            sub_expressions[i]\n+                        ))\n+                # Combine the pairs with XOR\n+                return \" # \".join(parts).replace(\"#\", \"^\")\n+        else:\n+            conn = \" %s \" % connector\n+            return conn.join(sub_expressions)\n \n     def combine_duration_expression(self, connector, sub_expressions):\n         return self.combine_expression(connector, sub_expressions)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py\nindex ba948a6..660a239 100644\n--- a/django/db/backends/base/operations.py\n+++ b/django/db/backends/base/operations.py\n@@ -215,8 +215,21 @@ class BaseDatabaseOperations:\n     def conditional_expression_supported_in_where_clause(self, expression):\n         return True\n     def combine_expression(self, connector, sub_expressions):\n-        conn = ' %s ' % connector\n-        return conn.join(sub_expressions)\n+        if connector == '^':\n+            if len(sub_expressions) <= 2:\n+                conn = ' %s ' % connector\n+                return conn.join(sub_expressions)\n+            else:\n+                parts = []\n+                for i in range(1, len(sub_expressions) + 1, 2):\n+                    if i == len(sub_expressions):\n+                        parts.append('(%s)' % sub_expressions[i - 1])\n+                    else:\n+                        parts.append('((%s) # (%s))' % (sub_expressions[i - 1], sub_expressions[i]))\n+                return ' # '.join(parts).replace('#', '^')\n+        else:\n+            conn = ' %s ' % connector\n+            return conn.join(sub_expressions)\n     def combine_duration_expression(self, connector, sub_expressions):\n         return self.combine_expression(connector, sub_expressions)\n     def binary_placeholder_sql(self, value):\n", "normalized_occurrence": 1}
