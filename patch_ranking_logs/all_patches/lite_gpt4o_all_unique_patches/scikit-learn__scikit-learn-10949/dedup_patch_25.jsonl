{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..c120859 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -556,6 +556,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             _assert_all_finite(array,\n                                allow_nan=force_all_finite == 'allow-nan')\n \n+    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+        msg = (\"Data with input dtype %s was converted to %s%s.\"\n+               % (dtype_orig, array.dtype, context))\n+        warnings.warn(msg, DataConversionWarning)\n+\n     shape_repr = _shape_repr(array.shape)\n     if ensure_min_samples > 0:\n         n_samples = _num_samples(array)\n@@ -573,11 +578,6 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                              % (n_features, shape_repr, ensure_min_features,\n                                 context))\n \n-    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n-        msg = (\"Data with input dtype %s was converted to %s%s.\"\n-               % (dtype_orig, array.dtype, context))\n-        warnings.warn(msg, DataConversionWarning)\n-\n     if copy and np.may_share_memory(array, array_orig):\n         array = np.array(array, dtype=dtype, order=order)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..074f8a0 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -172,6 +172,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n         if force_all_finite:\n             _assert_all_finite(array, allow_nan=force_all_finite == 'allow-nan')\n+    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+        msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+        warnings.warn(msg, DataConversionWarning)\n     shape_repr = _shape_repr(array.shape)\n     if ensure_min_samples > 0:\n         n_samples = _num_samples(array)\n@@ -181,9 +184,6 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         n_features = array.shape[1]\n         if n_features < ensure_min_features:\n             raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, shape_repr, ensure_min_features, context))\n-    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n-        msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n-        warnings.warn(msg, DataConversionWarning)\n     if copy and np.may_share_memory(array, array_orig):\n         array = np.array(array, dtype=dtype, order=order)\n     return array\n", "normalized_occurrence": 1}
