{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ec70dcc..04f4a38 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -824,6 +824,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         the expression is false.\n \n         \"\"\"\n+        # Don't rewrite assertions containing boolean literals to avoid compile.c issues\n+        if isinstance(assert_.test, ast.Name) and assert_.test.id in (\"True\", \"False\", \"None\"):\n+            return [assert_]\n+\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 824bf26..3fe6a6e 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -422,6 +422,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(node)\n         return (res, self.explanation_param(self.display(res)))\n     def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n+        if isinstance(assert_.test, ast.Name) and assert_.test.id in ('True', 'False', 'None'):\n+            return [assert_]\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n", "normalized_occurrence": 1}
