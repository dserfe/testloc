{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8506", "model_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex 2b9692e..a7889a3 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -106,7 +106,27 @@ class ListTable(tables.ListTable):\n         return title, message\n \n \n-class Code(SphinxDirective):\n+class OptionDirective(SphinxDirective):\n+    \"\"\"Parse and mark up content of an option directive.\n+    \n+    This now accepts any string for the option description.\"\"\"\n+    required_arguments = 1\n+    optional_arguments = 0\n+    final_argument_whitespace = True\n+    option_spec = {}\n+    has_content = True\n+\n+    def run(self) -> List[Node]:\n+        self.assert_has_content()\n+\n+        option_text = self.arguments[0]\n+        description = '\\n'.join(self.content)\n+        node = nodes.option(option_text, option_text)\n+        node += nodes.paragraph(description, description)\n+        self.add_name(node)\n+        set_source_info(self, node)\n+\n+        return [node]\n     \"\"\"Parse and mark up content of a code block.\n \n     This is compatible with docutils' :rst:dir:`code` directive.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/patches.py b/sphinx/directives/patches.py\nindex d675290..f1e0f2c 100644\n--- a/sphinx/directives/patches.py\n+++ b/sphinx/directives/patches.py\n@@ -54,7 +54,22 @@ class ListTable(tables.ListTable):\n         if title:\n             set_source_info(self, title)\n         return (title, message)\n-class Code(SphinxDirective):\n+class OptionDirective(SphinxDirective):\n+    required_arguments = 1\n+    optional_arguments = 0\n+    final_argument_whitespace = True\n+    option_spec = {}\n+    has_content = True\n+    def run(self) -> List[Node]:\n+        self.assert_has_content()\n+        option_text = self.arguments[0]\n+        description = '\\n'.join(self.content)\n+        node = nodes.option(option_text, option_text)\n+        node += nodes.paragraph(description, description)\n+        self.add_name(node)\n+        set_source_info(self, node)\n+        return [node]\n+    \"Parse and mark up content of a code block.\\n\\n    This is compatible with docutils' :rst:dir:`code` directive.\\n    \"\n     optional_arguments = 1\n     option_spec = {'class': directives.class_option, 'force': directives.flag, 'name': directives.unchanged, 'number-lines': optional_int}\n     has_content = True\n", "normalized_occurrence": 1}
