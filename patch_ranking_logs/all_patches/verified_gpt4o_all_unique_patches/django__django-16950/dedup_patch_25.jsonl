{"model_name_or_path": "agentless", "instance_id": "django__django-16950", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex f9e6a6e..bba38d6 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -217,12 +217,13 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n \n             return formfield\n \n-        # If we've got overrides for the formfield defined, use 'em. **kwargs\n-        # passed to formfield_for_dbfield override the defaults.\n-        for klass in db_field.__class__.mro():\n-            if klass in self.formfield_overrides:\n-                kwargs = {**copy.deepcopy(self.formfield_overrides[klass]), **kwargs}\n-                return db_field.formfield(**kwargs)\n+        # Handle UUIDField to ensure default value is set\n+        if isinstance(db_field, models.UUIDField) and db_field.default is not None:\n+            kwargs['initial'] = db_field.default\n+\n+        # Handle UUIDField to ensure default value is set\n+        if isinstance(db_field, models.UUIDField) and db_field.default is not None:\n+            kwargs['initial'] = db_field.default\n \n         # For any other type of field, just call its formfield() method.\n         return db_field.formfield(**kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 7be1ef7..ad95034 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -96,10 +96,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                     wrapper_kwargs = {'can_add_related': related_modeladmin.has_add_permission(request), 'can_change_related': related_modeladmin.has_change_permission(request), 'can_delete_related': related_modeladmin.has_delete_permission(request), 'can_view_related': related_modeladmin.has_view_permission(request)}\n                 formfield.widget = widgets.RelatedFieldWidgetWrapper(formfield.widget, db_field.remote_field, self.admin_site, **wrapper_kwargs)\n             return formfield\n-        for klass in db_field.__class__.mro():\n-            if klass in self.formfield_overrides:\n-                kwargs = {**copy.deepcopy(self.formfield_overrides[klass]), **kwargs}\n-                return db_field.formfield(**kwargs)\n+        if isinstance(db_field, models.UUIDField) and db_field.default is not None:\n+            kwargs['initial'] = db_field.default\n+        if isinstance(db_field, models.UUIDField) and db_field.default is not None:\n+            kwargs['initial'] = db_field.default\n         return db_field.formfield(**kwargs)\n     def formfield_for_choice_field(self, db_field, request, **kwargs):\n         if db_field.name in self.radio_fields:\n", "normalized_occurrence": 1}
