{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..e92a26d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -707,7 +707,9 @@ class Documenter:\n             # if isattr is True, the member is documented as an attribute\n             if member is INSTANCEATTR:\n                 isattr = True\n-            else:\n+            elif not has_doc:\n+                has_doc = any(getattr(base, '__annotations__', {}).get(membername) is not None\n+                              for base in self.object.__mro__[1:])\n                 isattr = False\n \n             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings,\n@@ -737,7 +739,9 @@ class Documenter:\n             elif 'public' in metadata:\n                 # consider a member public if docstring has \"public\" metadata\n                 isprivate = False\n-            else:\n+            elif not has_doc:\n+                has_doc = any(getattr(base, '__annotations__', {}).get(membername) is not None\n+                              for base in self.object.__mro__[1:])\n                 isprivate = membername.startswith('_')\n \n             keep = False\n@@ -778,7 +782,9 @@ class Documenter:\n                         keep = membername in self.options.private_members\n                 else:\n                     keep = False\n-            else:\n+            elif not has_doc:\n+                has_doc = any(getattr(base, '__annotations__', {}).get(membername) is not None\n+                              for base in self.object.__mro__[1:])\n                 if (self.options.members is ALL and\n                         is_filtered_inherited_member(membername, obj)):\n                     keep = False\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..850b1ab 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -367,7 +367,8 @@ class Documenter:\n             membername, member = obj\n             if member is INSTANCEATTR:\n                 isattr = True\n-            else:\n+            elif not has_doc:\n+                has_doc = any((getattr(base, '__annotations__', {}).get(membername) is not None for base in self.object.__mro__[1:]))\n                 isattr = False\n             doc = getdoc(member, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n             if not isinstance(doc, str):\n@@ -385,7 +386,8 @@ class Documenter:\n                 isprivate = True\n             elif 'public' in metadata:\n                 isprivate = False\n-            else:\n+            elif not has_doc:\n+                has_doc = any((getattr(base, '__annotations__', {}).get(membername) is not None for base in self.object.__mro__[1:]))\n                 isprivate = membername.startswith('_')\n             keep = False\n             if ismock(member):\n@@ -421,10 +423,12 @@ class Documenter:\n                         keep = membername in self.options.private_members\n                 else:\n                     keep = False\n-            elif self.options.members is ALL and is_filtered_inherited_member(membername, obj):\n-                keep = False\n-            else:\n-                keep = has_doc or self.options.undoc_members\n+            elif not has_doc:\n+                has_doc = any((getattr(base, '__annotations__', {}).get(membername) is not None for base in self.object.__mro__[1:]))\n+                if self.options.members is ALL and is_filtered_inherited_member(membername, obj):\n+                    keep = False\n+                else:\n+                    keep = has_doc or self.options.undoc_members\n             if isinstance(obj, ObjectMember) and obj.skipped:\n                 keep = False\n             if self.env.app:\n", "normalized_occurrence": 1}
