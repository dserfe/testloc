{"model_name_or_path": "agentless", "instance_id": "django__django-15400", "model_patch": "diff --git a/django/utils/functional.py b/django/utils/functional.py\nindex 8bdf0cb..d2345ae 100644\n--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n@@ -374,6 +374,8 @@ class LazyObject:\n     __contains__ = new_method_proxy(operator.contains)\n \n \n+import operator\n+\n def unpickle_lazyobject(wrapped):\n     \"\"\"\n     Used to unpickle lazy objects. Just return its argument, which will be the\n@@ -423,6 +425,11 @@ class SimpleLazyObject(LazyObject):\n             # If initialized, return a copy of the wrapped object.\n             return copy.copy(self._wrapped)\n \n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped\n+\n     def __deepcopy__(self, memo):\n         if self._wrapped is empty:\n             # We have to use SimpleLazyObject, not self.__class__, because the\n", "occurrence": 1, "normalized_patch": "--- a/django/utils/functional.py\n+++ b/django/utils/functional.py\n+import operator\n+    def __radd__(self, other):\n+        if self._wrapped is empty:\n+            self._setup()\n+        return other + self._wrapped", "normalized_occurrence": 2}
