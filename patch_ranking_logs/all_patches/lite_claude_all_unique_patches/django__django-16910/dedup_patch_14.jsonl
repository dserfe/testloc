{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9d8d506..16e855f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -772,22 +772,7 @@ class Query(BaseExpression):\n             )\n         return select_mask\n \n-    def _get_only_select_mask(self, opts, mask, select_mask=None):\n-        if select_mask is None:\n-            select_mask = {}\n-        select_mask[opts.pk] = {}\n-        # Only include fields mentioned in the mask.\n-        for field_name, field_mask in mask.items():\n-            field = opts.get_field(field_name)\n-            field_select_mask = select_mask.setdefault(field, {})\n-            if field_mask:\n-                if not field.is_relation:\n-                    raise FieldError(next(iter(field_mask)))\n-                related_model = field.remote_field.model._meta.concrete_model\n-                self._get_only_select_mask(\n-                    related_model._meta, field_mask, field_select_mask\n-                )\n-        return select_mask\n+\n \n     def get_select_mask(self):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f8d5b2d..a3298c8 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -408,19 +408,6 @@ class Query(BaseExpression):\n             related_model = field.model._meta.concrete_model\n             self._get_defer_select_mask(related_model._meta, field_mask, field_select_mask)\n         return select_mask\n-    def _get_only_select_mask(self, opts, mask, select_mask=None):\n-        if select_mask is None:\n-            select_mask = {}\n-        select_mask[opts.pk] = {}\n-        for field_name, field_mask in mask.items():\n-            field = opts.get_field(field_name)\n-            field_select_mask = select_mask.setdefault(field, {})\n-            if field_mask:\n-                if not field.is_relation:\n-                    raise FieldError(next(iter(field_mask)))\n-                related_model = field.remote_field.model._meta.concrete_model\n-                self._get_only_select_mask(related_model._meta, field_mask, field_select_mask)\n-        return select_mask\n     def get_select_mask(self):\n         field_names, defer = self.deferred_loading\n         if not field_names:\n", "normalized_occurrence": 1}
