{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..5ea9e4d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -786,7 +786,10 @@ class Field(RegisterLookupMixin):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n", "occurrence": 3, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..5a6c330 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -354,7 +354,10 @@ class Field(RegisterLookupMixin):\n     def get_internal_type(self):\n         return self.__class__.__name__\n     def pre_save(self, model_instance, add):\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n+        return value\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n", "normalized_occurrence": 3}
