{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7393", "model_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex d49b2c1..f7a94bd 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -708,10 +708,10 @@ class PandasMultiIndex(PandasIndex):\n \n         split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n         labels_mesh = np.meshgrid(*split_labels, indexing=\"ij\")\n-        labels = [x.ravel() for x in labels_mesh]\n+        labels = [x.ravel().astype(var.dtype) for x, var in zip(labels_mesh, variables.values())]\n \n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n-        level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n+        level_coords_dtype = {k: np.result_type(*[var.dtype for var in variables.values()])}\n \n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py\nindex 6be2e3c..613d2db 100644\n--- a/xarray/core/indexes.py\n+++ b/xarray/core/indexes.py\n@@ -373,9 +373,9 @@ class PandasMultiIndex(PandasIndex):\n                 raise ValueError(f'cannot create a multi-index along stacked dimension {dim!r} from variable {name!r} that wraps a multi-index')\n         split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])\n         labels_mesh = np.meshgrid(*split_labels, indexing='ij')\n-        labels = [x.ravel() for x in labels_mesh]\n+        labels = [x.ravel().astype(var.dtype) for x, var in zip(labels_mesh, variables.values())]\n         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())\n-        level_coords_dtype = {k: var.dtype for k, var in variables.items()}\n+        level_coords_dtype = {k: np.result_type(*[var.dtype for var in variables.values()])}\n         return cls(index, dim, level_coords_dtype=level_coords_dtype)\n     def unstack(self) -> tuple[dict[Hashable, Index], pd.MultiIndex]:\n         clean_index = remove_unused_levels_categories(self.index)\n", "normalized_occurrence": 1}
