{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..928f386 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1074,6 +1074,16 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n \n+    # Handle relationals separately if evaluate is False\n+    if not evaluate and 'Rel' in code:\n+        from sympy import Rel\n+        node = ast.parse(code, mode='eval')\n+        if isinstance(node.body, ast.Compare):\n+            left = eval_expr(compile(ast.Expression(node.body.left), '<string>', 'eval'), local_dict, global_dict)\n+            comparators = [eval_expr(compile(ast.Expression(comp), '<string>', 'eval'), local_dict, global_dict) for comp in node.body.comparators]\n+            operator = node.body.ops[0]\n+            return Rel(left, comparators[0], rel_op=type(operator).__name__.lower())\n+\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         # restore neutral definitions for names\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..01e44ad 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -512,6 +512,14 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n     code = stringify_expr(s, local_dict, global_dict, _transformations)\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n+    if not evaluate and 'Rel' in code:\n+        from sympy import Rel\n+        node = ast.parse(code, mode='eval')\n+        if isinstance(node.body, ast.Compare):\n+            left = eval_expr(compile(ast.Expression(node.body.left), '<string>', 'eval'), local_dict, global_dict)\n+            comparators = [eval_expr(compile(ast.Expression(comp), '<string>', 'eval'), local_dict, global_dict) for comp in node.body.comparators]\n+            operator = node.body.ops[0]\n+            return Rel(left, comparators[0], rel_op=type(operator).__name__.lower())\n     try:\n         rv = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(null, ()):\n", "normalized_occurrence": 1}
