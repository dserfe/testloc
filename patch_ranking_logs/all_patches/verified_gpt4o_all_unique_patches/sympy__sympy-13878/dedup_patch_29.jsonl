{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13878", "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex e880705..d6f6c3c 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -152,6 +152,9 @@ class ArcsinDistribution(SingleContinuousDistribution):\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 2/pi*asin(sqrt((x - a) / (b - a)))\n \n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n@@ -670,6 +673,9 @@ class DagumDistribution(SingleContinuousDistribution):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n \n+    def _cdf(self, x):\n+        p, a, b = self.p, self.a, self.b\n+        return 1 - (1 + (x / b)**(-a))**(-p)\n \n def Dagum(name, p, a, b):\n     r\"\"\"\n@@ -1041,6 +1047,9 @@ class FrechetDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+    def _cdf(self, x):\n+        a, s, m = self.a, self.s, self.m\n+        return exp(-((x - m) / s) ** (-a))\n \n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n@@ -1111,6 +1120,9 @@ class GammaDistribution(SingleContinuousDistribution):\n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n \n+    def _cdf(self, x):\n+        k, theta = self.k, self.theta\n+        return uppergamma(k, x/theta) / gamma(k)\n \n def Gamma(name, k, theta):\n     r\"\"\"\n@@ -1199,6 +1211,9 @@ class GammaInverseDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return uppergamma(a, b/x) / gamma(a)\n \n def GammaInverse(name, a, b):\n     r\"\"\"\n@@ -1384,6 +1399,9 @@ class KumaraswamyDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n+    def _cdf(self, x):\n+        a, b = self.a, self.b\n+        return 1 - (1 - x**a)**b\n \n def Kumaraswamy(name, a, b):\n     r\"\"\"\n@@ -1445,6 +1463,12 @@ class LaplaceDistribution(SingleContinuousDistribution):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n \n+    def _cdf(self, x):\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (S(1)/2 * exp((x - mu) / b), x < mu),\n+            (1 - S(1)/2 * exp(-(x - mu) / b), x >= mu)\n+        )\n \n def Laplace(name, mu, b):\n     r\"\"\"\n@@ -1501,6 +1525,9 @@ class LogisticDistribution(SingleContinuousDistribution):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n \n+    def _cdf(self, x):\n+        mu, s = self.mu, self.s\n+        return 1 / (1 + exp(-(x - mu) / s))\n \n def Logistic(name, mu, s):\n     r\"\"\"\n@@ -1711,6 +1738,9 @@ class NakagamiDistribution(SingleContinuousDistribution):\n         mu, omega = self.mu, self.omega\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n \n+    def _cdf(self, x):\n+        mu, omega = self.mu, self.omega\n+        return gamma(mu, mu / omega * x**2) / gamma(mu)\n \n def Nakagami(name, mu, omega):\n     r\"\"\"\n@@ -2227,6 +2257,9 @@ class StudentTDistribution(SingleContinuousDistribution):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n \n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S(1)/2 + x * hyper((S(1)/2, (nu + 1) / 2), (S(3)/2,), -x**2 / nu) / (sqrt(pi * nu) * beta_fn(S(1)/2, nu / 2))\n \n def StudentT(name, nu):\n     r\"\"\"\n@@ -2555,6 +2588,12 @@ class UniformSumDistribution(SingleContinuousDistribution):\n             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))\n \n \n+    def _cdf(self, x):\n+        n = self.n\n+        return Piecewise(\n+            (Sum(binomial(n, k) * (-1)**k * (x - k)**n / factorial(n), (k, 0, floor(x))) / gamma(n), x <= n),\n+            (1, True)\n+        )\n \n def UniformSum(name, n):\n     r\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 2 / pi * asin(sqrt((x - a) / (b - a)))\n+    def _cdf(self, x):\n+        p, a, b = (self.p, self.a, self.b)\n+        return 1 - (1 + (x / b) ** (-a)) ** (-p)\n+    def _cdf(self, x):\n+        a, s, m = (self.a, self.s, self.m)\n+        return exp(-((x - m) / s) ** (-a))\n+    def _cdf(self, x):\n+        k, theta = (self.k, self.theta)\n+        return uppergamma(k, x / theta) / gamma(k)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return uppergamma(a, b / x) / gamma(a)\n+    def _cdf(self, x):\n+        a, b = (self.a, self.b)\n+        return 1 - (1 - x ** a) ** b\n+    def _cdf(self, x):\n+        mu, b = (self.mu, self.b)\n+        return Piecewise((S(1) / 2 * exp((x - mu) / b), x < mu), (1 - S(1) / 2 * exp(-(x - mu) / b), x >= mu))\n+    def _cdf(self, x):\n+        mu, s = (self.mu, self.s)\n+        return 1 / (1 + exp(-(x - mu) / s))\n+    def _cdf(self, x):\n+        mu, omega = (self.mu, self.omega)\n+        return gamma(mu, mu / omega * x ** 2) / gamma(mu)\n+    def _cdf(self, x):\n+        nu = self.nu\n+        return S(1) / 2 + x * hyper((S(1) / 2, (nu + 1) / 2), (S(3) / 2,), -x ** 2 / nu) / (sqrt(pi * nu) * beta_fn(S(1) / 2, nu / 2))\n+    def _cdf(self, x):\n+        n = self.n\n+        return Piecewise((Sum(binomial(n, k) * (-1) ** k * (x - k) ** n / factorial(n), (k, 0, floor(x))) / gamma(n), x <= n), (1, True))", "normalized_occurrence": 1}
