{"model_name_or_path": "agentless", "instance_id": "django__django-11477", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 58da200..65218c5 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -635,7 +635,7 @@ class URLResolver:\n                 # Then, if we have a match, redo the substitution with quoted\n                 # arguments in order to return a properly encoded URL.\n                 candidate_pat = _prefix.replace('%', '%%') + result\n-                if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs):\n+                if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs, re.VERBOSE):\n                     # safe characters from `pchar` definition of RFC 3986\n                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')\n                     # Don't allow construction of scheme relative urls.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex e10e0e8..846a94f 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -415,7 +415,7 @@ class URLResolver:\n                     else:\n                         text_candidate_subs[k] = str(v)\n                 candidate_pat = _prefix.replace('%', '%%') + result\n-                if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs):\n+                if re.search('^%s%s' % (re.escape(_prefix), pattern), candidate_pat % text_candidate_subs, re.VERBOSE):\n                     url = quote(candidate_pat % text_candidate_subs, safe=RFC3986_SUBDELIMS + '/~:@')\n                     return escape_leading_slashes(url)\n         m = getattr(lookup_view, '__module__', None)\n", "normalized_occurrence": 1}
