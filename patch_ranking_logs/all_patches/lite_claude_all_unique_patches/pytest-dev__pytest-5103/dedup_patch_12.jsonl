{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..628f4d7 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,32 +964,7 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n-        \"\"\"\n-        visit `ast.Call` nodes on Python3.5 and after\n-        \"\"\"\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + \"=\" + expl)\n-            else:  # **args have `arg` keywords with an .arg of None\n-                arg_expls.append(\"**\" + expl)\n-\n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -997,35 +972,7 @@ warn_explicit(\n         new_starred = ast.Starred(res, starred.ctx)\n         return new_starred, \"*\" + expl\n \n-    def visit_Call_legacy(self, call):\n-        \"\"\"\n-        visit `ast.Call nodes on 3.4 and below`\n-        \"\"\"\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        new_star = new_kwarg = None\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            new_args.append(res)\n-            arg_expls.append(expl)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            arg_expls.append(keyword.arg + \"=\" + expl)\n-        if call.starargs:\n-            new_star, expl = self.visit(call.starargs)\n-            arg_expls.append(\"*\" + expl)\n-        if call.kwargs:\n-            new_kwarg, expl = self.visit(call.kwargs)\n-            arg_expls.append(\"**\" + expl)\n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+\n \n     # ast.Call signature changed on 3.5,\n     # conditionally change  which methods is named\n", "occurrence": 3, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..0959662 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,58 +543,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + '=' + expl)\n-            else:\n-                arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n         return (new_starred, '*' + expl)\n-    def visit_Call_legacy(self, call):\n-        new_func, func_expl = self.visit(call.func)\n-        arg_expls = []\n-        new_args = []\n-        new_kwargs = []\n-        new_star = new_kwarg = None\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            new_args.append(res)\n-            arg_expls.append(expl)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            arg_expls.append(keyword.arg + '=' + expl)\n-        if call.starargs:\n-            new_star, expl = self.visit(call.starargs)\n-            arg_expls.append('*' + expl)\n-        if call.kwargs:\n-            new_kwarg, expl = self.visit(call.kwargs)\n-            arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n     if sys.version_info >= (3, 5):\n         visit_Call = visit_Call_35\n     else:\n", "normalized_occurrence": 3}
