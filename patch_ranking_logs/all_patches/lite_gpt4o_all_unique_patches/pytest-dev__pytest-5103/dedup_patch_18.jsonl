{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7b9ba06 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,6 +984,41 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n+        if func_expl in [\"all\", \"any\"]:\n+            iterable = call.args[0]\n+            new_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(new_var, ast.Store())], iterable))\n+            element_var = self.variable()\n+            loop = ast.For(\n+                target=ast.Name(element_var, ast.Store()),\n+                iter=ast.Name(new_var, ast.Load()),\n+                body=[\n+                    ast.If(\n+                        test=ast.UnaryOp(\n+                            op=ast.Not() if func_expl == \"all\" else ast.Is(),\n+                            operand=ast.Call(\n+                                func=new_func,\n+                                args=[ast.Name(element_var, ast.Load())],\n+                                keywords=[]\n+                            )\n+                        ),\n+                        body=[\n+                            ast.Expr(value=ast.Call(\n+                                func=ast.Name(id='print', ctx=ast.Load()),\n+                                args=[ast.Str(s=f\"Failed element: %({element_var})s\")],\n+                                keywords=[]\n+                            ))\n+                        ],\n+                        orelse=[]\n+                    )\n+                ],\n+                orelse=[]\n+            )\n+            self.statements.append(loop)\n+            expl = f\"{func_expl}({new_var})\"\n+            res = self.assign(call)\n+            return res, expl\n+\n         expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n@@ -1081,4 +1116,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..d75a969 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,6 +559,16 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n+        if func_expl in ['all', 'any']:\n+            iterable = call.args[0]\n+            new_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(new_var, ast.Store())], iterable))\n+            element_var = self.variable()\n+            loop = ast.For(target=ast.Name(element_var, ast.Store()), iter=ast.Name(new_var, ast.Load()), body=[ast.If(test=ast.UnaryOp(op=ast.Not() if func_expl == 'all' else ast.Is(), operand=ast.Call(func=new_func, args=[ast.Name(element_var, ast.Load())], keywords=[])), body=[ast.Expr(value=ast.Call(func=ast.Name(id='print', ctx=ast.Load()), args=[ast.Str(s=f'Failed element: %({element_var})s')], keywords=[]))], orelse=[])], orelse=[])\n+            self.statements.append(loop)\n+            expl = f'{func_expl}({new_var})'\n+            res = self.assign(call)\n+            return (res, expl)\n         expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n", "normalized_occurrence": 1}
