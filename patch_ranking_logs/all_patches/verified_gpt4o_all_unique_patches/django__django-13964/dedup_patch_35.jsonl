{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..f9dedb3 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -254,7 +254,17 @@ class ForwardManyToOneDescriptor:\n         # Set the values of the related field.\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                related_value = getattr(value, rh_field.attname)\n+                setattr(instance, lh_field.attname, related_value)\n+                # Ensure the primary key is propagated correctly\n+                if related_value is None:\n+                    def update_fk(instance, value, lh_field, rh_field):\n+                        def signal_handler(sender, **kwargs):\n+                            if getattr(value, rh_field.attname) is not None:\n+                                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                                post_save.disconnect(signal_handler, sender=sender)\n+                        post_save.connect(signal_handler, sender=type(value))\n+                    update_fk(instance, value, lh_field, rh_field)\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..193c6a1 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -84,7 +84,16 @@ class ForwardManyToOneDescriptor:\n                 setattr(instance, lh_field.attname, None)\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                related_value = getattr(value, rh_field.attname)\n+                setattr(instance, lh_field.attname, related_value)\n+                if related_value is None:\n+                    def update_fk(instance, value, lh_field, rh_field):\n+                        def signal_handler(sender, **kwargs):\n+                            if getattr(value, rh_field.attname) is not None:\n+                                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                                post_save.disconnect(signal_handler, sender=sender)\n+                        post_save.connect(signal_handler, sender=type(value))\n+                    update_fk(instance, value, lh_field, rh_field)\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
