{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15561", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 86692c3..b81936e 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -447,6 +447,19 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                     model._meta.db_table, old_field, new_field, new_type\n                 )\n             )\n+        # Skip table rebuild if only db-transparent changes are being made\n+        if (\n+            old_type == new_type\n+            and old_db_params == new_db_params\n+            and old_field.column == new_field.column\n+            and old_field.db_index == new_field.db_index\n+            and old_field.unique == new_field.unique\n+            and old_field.primary_key == new_field.primary_key\n+            and (not old_field.remote_field or not old_field.db_constraint)\n+            == (not new_field.remote_field or not new_field.db_constraint)\n+        ):\n+            return\n+\n         # Alter by remaking table\n         self._remake_table(model, alter_field=(old_field, new_field))\n         # Rebuild tables with FKs pointing to this field.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 9a783c9..6c4eada 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -179,6 +179,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n         if self.connection.features.can_alter_table_rename_column and old_field.column != new_field.column and (self.column_sql(model, old_field) == self.column_sql(model, new_field)) and (not (old_field.remote_field and old_field.db_constraint or (new_field.remote_field and new_field.db_constraint))):\n             return self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))\n+        if old_type == new_type and old_db_params == new_db_params and (old_field.column == new_field.column) and (old_field.db_index == new_field.db_index) and (old_field.unique == new_field.unique) and (old_field.primary_key == new_field.primary_key) and ((not old_field.remote_field or not old_field.db_constraint) == (not new_field.remote_field or not new_field.db_constraint)):\n+            return\n         self._remake_table(model, alter_field=(old_field, new_field))\n         if new_field.unique and old_type != new_type:\n             related_models = set()\n", "normalized_occurrence": 1}
