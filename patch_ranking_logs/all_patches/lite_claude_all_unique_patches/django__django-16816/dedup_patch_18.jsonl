{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..9ba1b77 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -895,11 +895,29 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         elif hasattr(obj, item):\n             return []\n+\n+        # First try as a model field\n         try:\n             field = obj.model._meta.get_field(item)\n+            # Validate that the field can be used for display\n+            try:\n+                from django.contrib.admin.utils import _get_non_gfk_field\n+                _get_non_gfk_field(obj.model._meta, item)\n+            except (FieldDoesNotExist, AttributeError):\n+                return [\n+                    checks.Error(\n+                        f\"The value of '{label}' refers to '{item}', which cannot be used \"\n+                        f\"for display (it may be a reverse relation or invalid field reference).\",\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n+            return []\n         except FieldDoesNotExist:\n+            # Then try as a model attribute/method\n             try:\n                 field = getattr(obj.model, item)\n+                return []\n             except AttributeError:\n                 return [\n                     checks.Error(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..2f40752 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -339,9 +339,16 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         try:\n             field = obj.model._meta.get_field(item)\n+            try:\n+                from django.contrib.admin.utils import _get_non_gfk_field\n+                _get_non_gfk_field(obj.model._meta, item)\n+            except (FieldDoesNotExist, AttributeError):\n+                return [checks.Error(f\"The value of '{label}' refers to '{item}', which cannot be used for display (it may be a reverse relation or invalid field reference).\", obj=obj.__class__, id='admin.E108')]\n+            return []\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n+                return []\n             except AttributeError:\n                 return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n         if isinstance(field, models.ManyToManyField) or (getattr(field, 'rel', None) and field.rel.field.many_to_one):\n", "normalized_occurrence": 1}
