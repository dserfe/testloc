{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7168", "model_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex adc421d..7661195 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -1,3 +1,4 @@\n+\n import pprint\n import reprlib\n from typing import Any\n@@ -9,7 +10,10 @@ def _try_repr_or_str(obj):\n     except (KeyboardInterrupt, SystemExit):\n         raise\n     except BaseException:\n-        return '{}(\"{}\")'.format(type(obj).__name__, obj)\n+        try:\n+            return '{}(\"{}\")'.format(type(obj).__name__, str(obj))\n+        except BaseException:\n+            return '<unpresentable %s object>' % type(obj).__name__\n \n \n def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 789deb9..7e6849d 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -7,7 +7,10 @@ def _try_repr_or_str(obj):\n     except (KeyboardInterrupt, SystemExit):\n         raise\n     except BaseException:\n-        return '{}(\"{}\")'.format(type(obj).__name__, obj)\n+        try:\n+            return '{}(\"{}\")'.format(type(obj).__name__, str(obj))\n+        except BaseException:\n+            return '<unpresentable %s object>' % type(obj).__name__\n def _format_repr_exception(exc: BaseException, obj: Any) -> str:\n     try:\n         exc_info = _try_repr_or_str(exc)\n", "normalized_occurrence": 2}
