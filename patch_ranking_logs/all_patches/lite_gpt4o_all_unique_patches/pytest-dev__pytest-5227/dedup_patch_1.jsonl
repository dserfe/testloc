{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5227", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 1ebe9d0..4eab1d0 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n@@ -393,10 +393,9 @@ class LoggingPlugin(object):\n             config.option.verbose = 1\n \n         self.print_logs = get_option_ini(config, \"log_print\")\n-        self.formatter = logging.Formatter(\n-            get_option_ini(config, \"log_format\"),\n-            get_option_ini(config, \"log_date_format\"),\n-        )\n+        log_format = get_option_ini(config, \"log_format\", default=DEFAULT_LOG_FORMAT)\n+        log_date_format = get_option_ini(config, \"log_date_format\", default=DEFAULT_LOG_DATE_FORMAT)\n+        self.formatter = logging.Formatter(log_format, log_date_format)\n         self.log_level = get_actual_log_level(config, \"log_level\")\n \n         self.log_file_level = get_actual_log_level(config, \"log_file_level\")\n@@ -437,10 +436,8 @@ class LoggingPlugin(object):\n         capture_manager = config.pluginmanager.get_plugin(\"capturemanager\")\n         # if capturemanager plugin is disabled, live logging still works.\n         log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n-        log_cli_format = get_option_ini(config, \"log_cli_format\", \"log_format\")\n-        log_cli_date_format = get_option_ini(\n-            config, \"log_cli_date_format\", \"log_date_format\"\n-        )\n+        log_cli_format = get_option_ini(config, \"log_cli_format\", default=DEFAULT_LOG_FORMAT)\n+        log_cli_date_format = get_option_ini(config, \"log_cli_date_format\", default=DEFAULT_LOG_DATE_FORMAT)\n         if (\n             config.option.color != \"no\"\n             and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex a432c57..65dde1f 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -10,7 +10,7 @@ import pytest\n from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n-DEFAULT_LOG_FORMAT = '%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s'\n+DEFAULT_LOG_FORMAT = '%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s'\n DEFAULT_LOG_DATE_FORMAT = '%H:%M:%S'\n class ColoredLevelFormatter(logging.Formatter):\n     LOGLEVEL_COLOROPTS = {logging.CRITICAL: {'red'}, logging.ERROR: {'red', 'bold'}, logging.WARNING: {'yellow'}, logging.WARN: {'yellow'}, logging.INFO: {'green'}, logging.DEBUG: {'purple'}, logging.NOTSET: set()}\n@@ -166,7 +166,9 @@ class LoggingPlugin(object):\n         if self._log_cli_enabled() and config.getoption('verbose') < 1:\n             config.option.verbose = 1\n         self.print_logs = get_option_ini(config, 'log_print')\n-        self.formatter = logging.Formatter(get_option_ini(config, 'log_format'), get_option_ini(config, 'log_date_format'))\n+        log_format = get_option_ini(config, 'log_format', default=DEFAULT_LOG_FORMAT)\n+        log_date_format = get_option_ini(config, 'log_date_format', default=DEFAULT_LOG_DATE_FORMAT)\n+        self.formatter = logging.Formatter(log_format, log_date_format)\n         self.log_level = get_actual_log_level(config, 'log_level')\n         self.log_file_level = get_actual_log_level(config, 'log_file_level')\n         self.log_file_format = get_option_ini(config, 'log_file_format', 'log_format')\n@@ -189,8 +191,8 @@ class LoggingPlugin(object):\n             return\n         capture_manager = config.pluginmanager.get_plugin('capturemanager')\n         log_cli_handler = _LiveLoggingStreamHandler(terminal_reporter, capture_manager)\n-        log_cli_format = get_option_ini(config, 'log_cli_format', 'log_format')\n-        log_cli_date_format = get_option_ini(config, 'log_cli_date_format', 'log_date_format')\n+        log_cli_format = get_option_ini(config, 'log_cli_format', default=DEFAULT_LOG_FORMAT)\n+        log_cli_date_format = get_option_ini(config, 'log_cli_date_format', default=DEFAULT_LOG_DATE_FORMAT)\n         if config.option.color != 'no' and ColoredLevelFormatter.LEVELNAME_FMT_REGEX.search(log_cli_format):\n             log_cli_formatter = ColoredLevelFormatter(create_terminal_writer(config), log_cli_format, datefmt=log_cli_date_format)\n         else:\n", "normalized_occurrence": 1}
