{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..0d71056 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1725,6 +1725,11 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n+        if isinstance(A, FiniteSet):\n+            # Handle the case of FiniteSet complements explicitly\n+            # Keep elements that are either symbolic or not contained in B\n+            return FiniteSet(*(el for el in A.args if not B.contains(el).is_true))\n+\n         result = B._complement(A)\n         if result != None:\n             return result\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..0f7432f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -752,6 +752,8 @@ class Complement(Set, EvalfMixin):\n             return EmptySet()\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n+        if isinstance(A, FiniteSet):\n+            return FiniteSet(*(el for el in A.args if not B.contains(el).is_true))\n         result = B._complement(A)\n         if result != None:\n             return result\n", "normalized_occurrence": 1}
