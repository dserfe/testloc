{"model_name_or_path": "agentless", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex ed8f4af..2d950d3 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -34,7 +34,10 @@ class BaseHandler:\n         self._exception_middleware = []\n \n         get_response = self._get_response_async if is_async else self._get_response\n-        handler = convert_exception_to_response(get_response)\n+        if is_async:\n+            handler = convert_exception_to_response(self.adapt_method_mode(is_async, get_response, method_is_async=True))\n+        else:\n+            handler = convert_exception_to_response(get_response)\n         handler_is_async = is_async\n         for middleware_path in reversed(settings.MIDDLEWARE):\n             middleware = import_string(middleware_path)\n@@ -90,6 +93,8 @@ class BaseHandler:\n \n         # Adapt the top of the stack, if needed.\n         handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n+        # Ensure the top of the stack is correctly adapted to the async mode.\n+        handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n         # We only assign to this when initialization is complete as it is used\n         # as a flag for initialization being complete.\n         self._middleware_chain = handler\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex a097649..72973ae 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -21,7 +21,10 @@ class BaseHandler:\n         self._template_response_middleware = []\n         self._exception_middleware = []\n         get_response = self._get_response_async if is_async else self._get_response\n-        handler = convert_exception_to_response(get_response)\n+        if is_async:\n+            handler = convert_exception_to_response(self.adapt_method_mode(is_async, get_response, method_is_async=True))\n+        else:\n+            handler = convert_exception_to_response(get_response)\n         handler_is_async = is_async\n         for middleware_path in reversed(settings.MIDDLEWARE):\n             middleware = import_string(middleware_path)\n@@ -54,6 +57,7 @@ class BaseHandler:\n             handler = convert_exception_to_response(mw_instance)\n             handler_is_async = middleware_is_async\n         handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n+        handler = self.adapt_method_mode(is_async, handler, handler_is_async)\n         self._middleware_chain = handler\n     def adapt_method_mode(self, is_async, method, method_is_async=None, debug=False, name=None):\n         if method_is_async is None:\n", "normalized_occurrence": 1}
