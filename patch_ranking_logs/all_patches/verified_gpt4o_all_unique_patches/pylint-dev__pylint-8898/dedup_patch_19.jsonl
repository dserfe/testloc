{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..8987fec 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,10 +112,25 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma-separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current_pattern = []\n+    in_braces = 0\n+\n+    for char in value:\n+        if char == ',' and in_braces == 0:\n+            patterns.append(_regex_transformer(''.join(current_pattern).strip()))\n+            current_pattern = []\n+        else:\n+            if char == '{':\n+                in_braces += 1\n+            elif char == '}':\n+                in_braces -= 1\n+            current_pattern.append(char)\n+\n+    if current_pattern:\n+        patterns.append(_regex_transformer(''.join(current_pattern).strip()))\n+\n     return patterns\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..914d20b 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,8 +55,20 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current_pattern = []\n+    in_braces = 0\n+    for char in value:\n+        if char == ',' and in_braces == 0:\n+            patterns.append(_regex_transformer(''.join(current_pattern).strip()))\n+            current_pattern = []\n+        else:\n+            if char == '{':\n+                in_braces += 1\n+            elif char == '}':\n+                in_braces -= 1\n+            current_pattern.append(char)\n+    if current_pattern:\n+        patterns.append(_regex_transformer(''.join(current_pattern).strip()))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n", "normalized_occurrence": 1}
