{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..ea7eff4 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -564,7 +564,45 @@ class PyLinter(\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n \n-    @staticmethod\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n+        \"\"\"Discover python modules and packages in sub-directory.\n+\n+        Returns iterator of paths to discovered modules and packages.\n+        Respects ignore settings when discovering files.\n+        \"\"\"\n+        for something in files_or_modules:\n+            if os.path.isdir(something) and not os.path.isfile(\n+                os.path.join(something, \"__init__.py\")\n+            ):\n+                skip_subtrees: list[str] = []\n+                for root, _, files in os.walk(something):\n+                    # Apply ignore settings to the directory\n+                    basename = os.path.basename(root)\n+                    if (basename in self.config.ignore\n+                        or any(pattern.match(basename) for pattern in self.config.ignore_patterns_re)\n+                        or any(pattern.match(root) for pattern in self.config.ignore_paths_re)):\n+                        continue\n+\n+                    if any(root.startswith(s) for s in skip_subtrees):\n+                        # Skip subtree of already discovered package.\n+                        continue\n+                    if \"__init__.py\" in files:\n+                        skip_subtrees.append(root)\n+                        yield root\n+                    else:\n+                        for file in files:\n+                            if not file.endswith(\".py\"):\n+                                continue\n+                            filepath = os.path.join(root, file)\n+                            # Apply ignore settings to each file\n+                            basename = os.path.basename(filepath)\n+                            if (basename in self.config.ignore\n+                                or any(pattern.match(basename) for pattern in self.config.ignore_patterns_re)\n+                                or any(pattern.match(filepath) for pattern in self.config.ignore_paths_re)):\n+                                continue\n+                            yield filepath\n+            else:\n+                yield something\n     def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n         \"\"\"Discover python modules and packages in sub-directory.\n \n", "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..dc29412 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -220,7 +220,30 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n         for msg in self.msgs_store.messages:\n             if not msg.may_be_emitted():\n                 self._msgs_state[msg.msgid] = False\n-    @staticmethod\n+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n+        for something in files_or_modules:\n+            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n+                skip_subtrees: list[str] = []\n+                for root, _, files in os.walk(something):\n+                    basename = os.path.basename(root)\n+                    if basename in self.config.ignore or any((pattern.match(basename) for pattern in self.config.ignore_patterns_re)) or any((pattern.match(root) for pattern in self.config.ignore_paths_re)):\n+                        continue\n+                    if any((root.startswith(s) for s in skip_subtrees)):\n+                        continue\n+                    if '__init__.py' in files:\n+                        skip_subtrees.append(root)\n+                        yield root\n+                    else:\n+                        for file in files:\n+                            if not file.endswith('.py'):\n+                                continue\n+                            filepath = os.path.join(root, file)\n+                            basename = os.path.basename(filepath)\n+                            if basename in self.config.ignore or any((pattern.match(basename) for pattern in self.config.ignore_patterns_re)) or any((pattern.match(filepath) for pattern in self.config.ignore_paths_re)):\n+                                continue\n+                            yield filepath\n+            else:\n+                yield something\n     def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n             if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n", "normalized_occurrence": 1}
