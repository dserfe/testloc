{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-2905", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex d82c4a0..8b2a8d8 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -854,7 +854,7 @@ class Variable(\n         \"\"\"\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n \n-        if not isinstance(value, Variable):\n+        if not isinstance(value, Variable) and not hasattr(value, 'values'):\n             value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError(\n", "occurrence": 2, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex de67650..c0d8125 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -621,7 +621,7 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         See __getitem__ for more details.\n         \"\"\"\n         dims, index_tuple, new_order = self._broadcast_indexes(key)\n-        if not isinstance(value, Variable):\n+        if not isinstance(value, Variable) and (not hasattr(value, 'values')):\n             value = as_compatible_data(value)\n             if value.ndim > len(dims):\n                 raise ValueError('shape mismatch: value array of shape %s could not be broadcast to indexing result with %s dimensions' % (value.shape, len(dims)))\n", "normalized_occurrence": 2}
