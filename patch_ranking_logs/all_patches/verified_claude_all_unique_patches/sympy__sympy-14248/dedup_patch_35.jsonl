{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14248", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex d02494c..ee96cbf 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1477,9 +1477,16 @@ class LatexPrinter(Printer):\n             return r\"%s^\\dagger\" % self._print(mat)\n \n     def _print_MatAdd(self, expr):\n-        terms = list(expr.args)\n-        tex = \" + \".join(map(self._print, terms))\n-        return tex\n+        terms = []\n+        for term in expr.args:\n+            term_str = self._print(term)\n+            if term_str.startswith('-'):\n+                terms.append(term_str)\n+            else:\n+                terms.append('+' + term_str)\n+        if terms[0].startswith('+'):\n+            terms[0] = terms[0][1:]\n+        return ' '.join(terms)\n \n     def _print_MatMul(self, expr):\n         from sympy import Add, MatAdd, HadamardProduct\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 41521ad..d435b79 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -819,7 +819,17 @@ class PrettyPrinter(Printer):\n         return self._print(B.blocks)\n \n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        terms = []\n+        for term in expr.args:\n+            t = self._print(term)\n+            s = str(t)  # Get string representation to check for minus sign\n+            if s.startswith('-'):\n+                terms.append(t)\n+            else:\n+                terms.append(prettyForm('+', 'break') + t)\n+        if terms[0].startswith('+'):\n+            terms[0] = terms[0][1:]\n+        return prettyForm(*terms)\n \n     def _print_MatMul(self, expr):\n         args = list(expr.args)\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 29d16bd..a84b083 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -312,8 +312,23 @@ class StrPrinter(Printer):\n             for arg in expr.args])\n \n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr))\n-            for arg in expr.args])\n+        PREC = precedence(expr)\n+        l = []\n+        for term in expr.args:\n+            t = self._print(term)\n+            if t.startswith('-'):\n+                sign = \"-\"\n+                t = t[1:]\n+            else:\n+                sign = \"+\"\n+            if precedence(term) < PREC:\n+                l.extend([sign, \"(%s)\" % t])\n+            else:\n+                l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = \"\"\n+        return sign + ' '.join(l)\n \n     def _print_NaN(self, expr):\n         return 'nan'\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex a98e2a9..037801b 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -224,7 +224,23 @@ class StrPrinter(Printer):\n     def _print_HadamardProduct(self, expr):\n         return '.*'.join([self.parenthesize(arg, precedence(expr)) for arg in expr.args])\n     def _print_MatAdd(self, expr):\n-        return ' + '.join([self.parenthesize(arg, precedence(expr)) for arg in expr.args])\n+        PREC = precedence(expr)\n+        l = []\n+        for term in expr.args:\n+            t = self._print(term)\n+            if t.startswith('-'):\n+                sign = '-'\n+                t = t[1:]\n+            else:\n+                sign = '+'\n+            if precedence(term) < PREC:\n+                l.extend([sign, '(%s)' % t])\n+            else:\n+                l.extend([sign, t])\n+        sign = l.pop(0)\n+        if sign == '+':\n+            sign = ''\n+        return sign + ' '.join(l)\n     def _print_NaN(self, expr):\n         return 'nan'\n     def _print_NegativeInfinity(self, expr):\ndiff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 928334c..b110f45 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -586,7 +586,17 @@ class PrettyPrinter(Printer):\n             return self._print(B.blocks[0, 0])\n         return self._print(B.blocks)\n     def _print_MatAdd(self, expr):\n-        return self._print_seq(expr.args, None, None, ' + ')\n+        terms = []\n+        for term in expr.args:\n+            t = self._print(term)\n+            s = str(t)\n+            if s.startswith('-'):\n+                terms.append(t)\n+            else:\n+                terms.append(prettyForm('+', 'break') + t)\n+        if terms[0].startswith('+'):\n+            terms[0] = terms[0][1:]\n+        return prettyForm(*terms)\n     def _print_MatMul(self, expr):\n         args = list(expr.args)\n         from sympy import Add, MatAdd, HadamardProduct\ndiff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5c88620..31685d0 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -964,9 +964,16 @@ class LatexPrinter(Printer):\n         else:\n             return '%s^\\\\dagger' % self._print(mat)\n     def _print_MatAdd(self, expr):\n-        terms = list(expr.args)\n-        tex = ' + '.join(map(self._print, terms))\n-        return tex\n+        terms = []\n+        for term in expr.args:\n+            term_str = self._print(term)\n+            if term_str.startswith('-'):\n+                terms.append(term_str)\n+            else:\n+                terms.append('+' + term_str)\n+        if terms[0].startswith('+'):\n+            terms[0] = terms[0][1:]\n+        return ' '.join(terms)\n     def _print_MatMul(self, expr):\n         from sympy import Add, MatAdd, HadamardProduct\n         def parens(x):\n", "normalized_occurrence": 1}
