{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 8f934b7..7dec9a0 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -8,6 +8,8 @@ from django.conf import settings\n from django.core.checks import Error, Tags, Warning, register\n \n \n+VALID_LOOKUPS = {'isnull'}  # Add other valid lookups here as needed\n+\n @register(Tags.models)\n def check_all_models(app_configs=None, **kwargs):\n     db_table_models = defaultdict(list)\n@@ -86,6 +88,16 @@ def check_all_models(app_configs=None, **kwargs):\n     return errors\n \n \n+def _is_valid_order_by(field_name):\n+    \"\"\"\n+    Check if the field_name is a valid order_by field.\n+    Allows for related fields traversal and valid lookups like '__isnull'.\n+    \"\"\"\n+    parts = field_name.lstrip('-').split('__')\n+    if parts[-1] in VALID_LOOKUPS:\n+        return True\n+    return True  # Let regular field validation handle other cases\n+\n def _check_lazy_references(apps, ignore=None):\n     \"\"\"\n     Ensure all lazy (i.e. string) model references have been resolved.\n", "occurrence": 1, "normalized_patch": "--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n+VALID_LOOKUPS = {'isnull'}\n+def _is_valid_order_by(field_name):\n+    parts = field_name.lstrip('-').split('__')\n+    if parts[-1] in VALID_LOOKUPS:\n+        return True\n+    return True", "normalized_occurrence": 1}
