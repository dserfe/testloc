{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..cb26443 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,23 +1933,20 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n-                intervals = []  # Build up a list of intervals between the elements\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))  # both open\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False),\n-                            FiniteSet(*syms), evaluate=False)\n+            syms = [m for m in self.args if m.is_Symbol]\n+            others = [m for m in self.args if not (m.is_number or m.is_Symbol)]\n+            \n+            # Handle numbers\n+            remaining_nums = [n for n in nums if not other.contains(n)]\n+            \n+            # If we have any symbols or other expressions, we need a complement\n+            if syms or others:\n+                if remaining_nums:\n+                    return Complement(FiniteSet(*(syms + others + remaining_nums)), other, evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    return Complement(FiniteSet(*(syms + others)), other, evaluate=False)\n+            else:\n+                return FiniteSet(*remaining_nums)\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..4ebf22b 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,19 +842,16 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                intervals = []\n-                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n-                for a, b in zip(nums[:-1], nums[1:]):\n-                    intervals.append(Interval(a, b, True, True))\n-                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n-                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+            syms = [m for m in self.args if m.is_Symbol]\n+            others = [m for m in self.args if not (m.is_number or m.is_Symbol)]\n+            remaining_nums = [n for n in nums if not other.contains(n)]\n+            if syms or others:\n+                if remaining_nums:\n+                    return Complement(FiniteSet(*syms + others + remaining_nums), other, evaluate=False)\n                 else:\n-                    return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+                    return Complement(FiniteSet(*syms + others), other, evaluate=False)\n+            else:\n+                return FiniteSet(*remaining_nums)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
