{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4c02278..f617794 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1101,13 +1101,11 @@ class QuerySet:\n             else:\n                 clone.query.add_annotation(annotation, alias, is_summary=False)\n \n-        for alias, annotation in clone.query.annotations.items():\n-            if alias in annotations and annotation.contains_aggregate:\n-                if clone._fields is None:\n-                    clone.query.group_by = True\n-                else:\n-                    clone.query.set_group_by()\n-                break\n+        if any(annotation.contains_aggregate for annotation in annotations.values()):\n+            if clone._fields is None:\n+                clone.query.group_by = True\n+            else:\n+                clone.query.set_group_by()\n \n         return clone\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex b74b4ff..f454f1e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -661,13 +661,11 @@ class QuerySet:\n                 clone.query.add_filtered_relation(annotation, alias)\n             else:\n                 clone.query.add_annotation(annotation, alias, is_summary=False)\n-        for alias, annotation in clone.query.annotations.items():\n-            if alias in annotations and annotation.contains_aggregate:\n-                if clone._fields is None:\n-                    clone.query.group_by = True\n-                else:\n-                    clone.query.set_group_by()\n-                break\n+        if any((annotation.contains_aggregate for annotation in annotations.values())):\n+            if clone._fields is None:\n+                clone.query.group_by = True\n+            else:\n+                clone.query.set_group_by()\n         return clone\n     def order_by(self, *field_names):\n         assert not self.query.is_sliced, 'Cannot reorder a query once a slice has been taken.'\n", "normalized_occurrence": 1}
