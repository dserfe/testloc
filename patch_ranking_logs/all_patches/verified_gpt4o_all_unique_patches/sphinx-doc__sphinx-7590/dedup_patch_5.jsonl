{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..35f14f2 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,14 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # user-defined literal\n+        if self.skip_string('\"\"'):\n+            self.skip_ws()\n+            if not self.match(identifier_re):\n+                self.fail(\"Expected user-defined literal suffix.\")\n+            identifier = ASTIdentifier(self.matched_text)\n+            return ASTUserDefinedLiteral(identifier)\n+\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n@@ -5280,13 +5287,13 @@ class DefinitionParser(BaseParser):\n                 op += '[]'\n             return ASTOperatorBuildIn(op)\n \n-        # user-defined literal?\n+        # user-defined literal operator\n         if self.skip_string('\"\"'):\n             self.skip_ws()\n             if not self.match(identifier_re):\n                 self.fail(\"Expected user-defined literal suffix.\")\n             identifier = ASTIdentifier(self.matched_text)\n-            return ASTOperatorLiteral(identifier)\n+            return ASTUserDefinedLiteralOperator(identifier)\n \n         # oh well, looks like a cast operator definition.\n         # In that case, eat another type.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..9373568 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,12 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.skip_string('\"\"'):\n+            self.skip_ws()\n+            if not self.match(identifier_re):\n+                self.fail('Expected user-defined literal suffix.')\n+            identifier = ASTIdentifier(self.matched_text)\n+            return ASTUserDefinedLiteral(identifier)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n@@ -3514,7 +3520,7 @@ class DefinitionParser(BaseParser):\n             if not self.match(identifier_re):\n                 self.fail('Expected user-defined literal suffix.')\n             identifier = ASTIdentifier(self.matched_text)\n-            return ASTOperatorLiteral(identifier)\n+            return ASTUserDefinedLiteralOperator(identifier)\n         type = self._parse_type(named=False, outer='operatorCast')\n         return ASTOperatorType(type)\n     def _parse_template_argument_list(self) -> ASTTemplateArgs:\n", "normalized_occurrence": 1}
