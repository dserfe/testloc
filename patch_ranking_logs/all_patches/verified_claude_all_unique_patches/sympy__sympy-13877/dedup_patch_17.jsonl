{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..a871dc3 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -400,6 +400,13 @@ class MatrixDeterminant(MatrixCommon):\n             method = \"lu\"\n         if method not in (\"bareiss\", \"berkowitz\", \"lu\"):\n             raise ValueError(\"Determinant method '%s' unrecognized\" % method)\n+            \n+        # Check if matrix contains symbolic entries when using bareiss\n+        if method == \"bareiss\":\n+            for entry in self:\n+                if entry.free_symbols:\n+                    method = \"berkowitz\"  # Fall back to berkowitz for symbolic matrices\n+                    break\n \n         # if methods were made internal and all determinant calculations\n         # passed through here, then these lines could be factored out of\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..f7e5a84 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -126,6 +126,11 @@ class MatrixDeterminant(MatrixCommon):\n             method = 'lu'\n         if method not in ('bareiss', 'berkowitz', 'lu'):\n             raise ValueError(\"Determinant method '%s' unrecognized\" % method)\n+        if method == 'bareiss':\n+            for entry in self:\n+                if entry.free_symbols:\n+                    method = 'berkowitz'\n+                    break\n         if self.rows != self.cols:\n             raise NonSquareMatrixError()\n         n = self.rows\n", "normalized_occurrence": 1}
