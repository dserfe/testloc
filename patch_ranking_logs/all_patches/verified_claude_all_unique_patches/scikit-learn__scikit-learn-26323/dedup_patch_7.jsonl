{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..500f1a5 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -293,14 +293,20 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             Estimator instance.\n         \"\"\"\n         super().set_output(transform=transform)\n-        transformers = (\n-            trans\n+        def _get_transformers():\n+            # Get regular transformers\n             for _, trans, _ in chain(\n                 self.transformers, getattr(self, \"transformers_\", [])\n-            )\n-            if trans not in {\"passthrough\", \"drop\"}\n-        )\n-        for trans in transformers:\n+            ):\n+                if trans not in {\"passthrough\", \"drop\"}:\n+                    yield trans\n+            \n+            # Include remainder if it's an estimator\n+            remainder = getattr(self, \"remainder\", \"drop\")\n+            if remainder not in {\"passthrough\", \"drop\"}:\n+                yield remainder\n+\n+        for trans in _get_transformers():\n             _safe_set_output(trans, transform=transform)\n \n         return self\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..4220b62 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -44,8 +44,14 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             self.transformers = value\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n-        transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n-        for trans in transformers:\n+        def _get_transformers():\n+            for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])):\n+                if trans not in {'passthrough', 'drop'}:\n+                    yield trans\n+            remainder = getattr(self, 'remainder', 'drop')\n+            if remainder not in {'passthrough', 'drop'}:\n+                yield remainder\n+        for trans in _get_transformers():\n             _safe_set_output(trans, transform=transform)\n         return self\n     def get_params(self, deep=True):\n", "normalized_occurrence": 1}
