{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 6a4748c..1293505 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -309,9 +309,11 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable,\n \n     if analyzer:\n         # append instance attributes (cf. self.attr1) if analyzer knows\n-        namespace = '.'.join(objpath)\n+        namespaces = ['.'.join(objpath)] + [\n+            '.'.join([cls.__module__, cls.__name__]) for cls in getmro(subject) if cls is not object\n+        ]\n         for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n+            if ns in namespaces and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR,\n                                                '\\n'.join(docstring))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 65a9a3c..bc87ca9 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -203,9 +203,9 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable, an\n         except AttributeError:\n             pass\n     if analyzer:\n-        namespace = '.'.join(objpath)\n+        namespaces = ['.'.join(objpath)] + ['.'.join([cls.__module__, cls.__name__]) for cls in getmro(subject) if cls is not object]\n         for (ns, name), docstring in analyzer.attr_docs.items():\n-            if namespace == ns and name not in members:\n+            if ns in namespaces and name not in members:\n                 members[name] = ClassAttribute(subject, name, INSTANCEATTR, '\\n'.join(docstring))\n     return members\n from sphinx.ext.autodoc.mock import MockFinder, MockLoader, _MockModule, _MockObject, mock\n", "normalized_occurrence": 1}
