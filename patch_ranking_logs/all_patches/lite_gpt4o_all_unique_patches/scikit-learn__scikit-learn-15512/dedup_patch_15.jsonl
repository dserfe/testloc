{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..7485d24 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -193,7 +193,15 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             se = np.sum(e, axis=1)\n             unconverged = (np.sum((se == convergence_iter) + (se == 0))\n                            != n_samples)\n-            if (not unconverged and (K > 0)) or (it == max_iter):\n+            if not unconverged and (K > 0):\n+                if verbose:\n+                    print(\"Converged after %d iterations.\" % it)\n+                break\n+            elif it == max_iter:\n+                if verbose:\n+                    print(\"Did not converge\")\n+                E[:] = False  # Force non-convergence case\n+                break\n                 if verbose:\n                     print(\"Converged after %d iterations.\" % it)\n                 break\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..a259b44 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -64,7 +64,15 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         if it >= convergence_iter:\n             se = np.sum(e, axis=1)\n             unconverged = np.sum((se == convergence_iter) + (se == 0)) != n_samples\n-            if not unconverged and K > 0 or it == max_iter:\n+            if not unconverged and K > 0:\n+                if verbose:\n+                    print('Converged after %d iterations.' % it)\n+                break\n+            elif it == max_iter:\n+                if verbose:\n+                    print('Did not converge')\n+                E[:] = False\n+                break\n                 if verbose:\n                     print('Converged after %d iterations.' % it)\n                 break\n", "normalized_occurrence": 1}
