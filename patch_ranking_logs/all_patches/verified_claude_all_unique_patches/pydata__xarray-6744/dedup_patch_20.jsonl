{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..a39a351 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,15 +270,23 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n-        for (label, start, stop) in zip(self.window_labels, starts, stops):\n+        \n+        window_size = int(self.window[0])\n+        offset = (window_size - 1) // 2 if self.center else 0\n+        \n+        for i, label in enumerate(self.window_labels):\n+            if self.center:\n+                start = max(0, i - offset)\n+                stop = min(len(self.window_labels), i + window_size - offset)\n+            else:\n+                stop = i + 1\n+                start = max(0, stop - window_size)\n+            \n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n-\n+            \n             counts = window.count(dim=self.dim[0])\n             window = window.where(counts >= self.min_periods)\n-\n+            \n             yield (label, window)\n \n     def construct(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 870b974..9347c2b 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -106,10 +106,15 @@ class DataArrayRolling(Rolling['DataArray']):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError('__iter__ is only supported for 1d-rolling')\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[:int(self.window[0])] = 0\n-        for label, start, stop in zip(self.window_labels, starts, stops):\n+        window_size = int(self.window[0])\n+        offset = (window_size - 1) // 2 if self.center else 0\n+        for i, label in enumerate(self.window_labels):\n+            if self.center:\n+                start = max(0, i - offset)\n+                stop = min(len(self.window_labels), i + window_size - offset)\n+            else:\n+                stop = i + 1\n+                start = max(0, stop - window_size)\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n             counts = window.count(dim=self.dim[0])\n             window = window.where(counts >= self.min_periods)\n", "normalized_occurrence": 1}
