{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..94ae228 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,28 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                # Get the iterator argument\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                    # Create a for loop that checks each element\n+                    test = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    \n+                    # Build a for loop that raises AssertionError on the first failing element\n+                    if call.func.id == 'all':\n+                        loop_test = test\n+                    else:  # any()\n+                        # For any(), we need to track if we found a True value\n+                        loop_test = ast.UnaryOp(op=ast.Not(), operand=test)\n+                    \n+                    return self.visit(loop_test)\n+        \n+        # Default handling for other calls\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -1002,6 +1024,28 @@ warn_explicit(\n         visit `ast.Call nodes on 3.4 and below`\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                # Get the iterator argument\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                    # Create a for loop that checks each element\n+                    test = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    \n+                    # Build a for loop that raises AssertionError on the first failing element\n+                    if call.func.id == 'all':\n+                        loop_test = test\n+                    else:  # any()\n+                        # For any(), we need to track if we found a True value\n+                        loop_test = ast.UnaryOp(op=ast.Not(), operand=test)\n+                    \n+                    return self.visit(loop_test)\n+        \n+        # Default handling for other calls\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..519c708 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -545,6 +545,18 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (res, explanation)\n     def visit_Call_35(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                    test = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    if call.func.id == 'all':\n+                        loop_test = test\n+                    else:\n+                        loop_test = ast.UnaryOp(op=ast.Not(), operand=test)\n+                    return self.visit(loop_test)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n@@ -571,6 +583,18 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (new_starred, '*' + expl)\n     def visit_Call_legacy(self, call):\n         new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, (ast.GeneratorExp, ast.ListComp)):\n+                    test = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    if call.func.id == 'all':\n+                        loop_test = test\n+                    else:\n+                        loop_test = ast.UnaryOp(op=ast.Not(), operand=test)\n+                    return self.visit(loop_test)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "normalized_occurrence": 1}
