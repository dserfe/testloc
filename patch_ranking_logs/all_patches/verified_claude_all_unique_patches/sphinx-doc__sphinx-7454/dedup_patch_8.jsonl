{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c0a03a8..8d9a4c8 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -92,6 +92,10 @@ def _parse_annotation(annotation: str) -> List[Node]:\n         elif isinstance(node, ast.Module):\n             return sum((unparse(e) for e in node.body), [])\n         elif isinstance(node, ast.Name):\n+            if node.id == 'None':\n+                # Handle None specially as an object rather than a class\n+                return [pending_xref('', nodes.Text(node.id),\n+                                  refdomain='py', reftype='obj', reftarget=node.id)]\n             return [nodes.Text(node.id)]\n         elif isinstance(node, ast.Subscript):\n             result = unparse(node.value)\n", "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 1eef662..3f03493 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -52,6 +52,8 @@ def _parse_annotation(annotation: str) -> List[Node]:\n         elif isinstance(node, ast.Module):\n             return sum((unparse(e) for e in node.body), [])\n         elif isinstance(node, ast.Name):\n+            if node.id == 'None':\n+                return [pending_xref('', nodes.Text(node.id), refdomain='py', reftype='obj', reftarget=node.id)]\n             return [nodes.Text(node.id)]\n         elif isinstance(node, ast.Subscript):\n             result = unparse(node.value)\n", "normalized_occurrence": 1}
