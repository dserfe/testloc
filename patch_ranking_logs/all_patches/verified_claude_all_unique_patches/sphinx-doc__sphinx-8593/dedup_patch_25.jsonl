{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..9281871 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1886,6 +1886,14 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n         if self.parent:\n             self.update_annotations(self.parent)\n \n+        # Handle :meta public: directive for private variables\n+        if ret and self.object and self.get_doc():\n+            # Check if :meta public: is in the docstring\n+            for docstring in self.get_doc():\n+                for line in docstring:\n+                    if ':meta public:' in line:\n+                        return True\n+\n         return ret\n \n     def add_directive_header(self, sig: str) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f71844a..8933b1d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1063,6 +1063,11 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin, Uninitialize\n         ret = super().import_object(raiseerror)\n         if self.parent:\n             self.update_annotations(self.parent)\n+        if ret and self.object and self.get_doc():\n+            for docstring in self.get_doc():\n+                for line in docstring:\n+                    if ':meta public:' in line:\n+                        return True\n         return ret\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n", "normalized_occurrence": 1}
