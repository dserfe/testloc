{"model_name_or_path": "agentless", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..a24fc9b 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -368,29 +368,11 @@ class HTTPAdapter(BaseAdapter):\n         :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n         :param kwargs: The keyword arguments from the call to send().\n         \"\"\"\n-        pass\n-\n-    def proxy_headers(self, proxy):\n-        \"\"\"Returns a dictionary of the headers to add to any request sent\n-        through a proxy. This works with urllib3 magic to ensure that they are\n-        correctly sent to the proxy, rather than in a tunnelled request if\n-        CONNECT is being used.\n-\n-        This should not be called from user code, and is only exposed for use\n-        when subclassing the\n-        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n-\n-        :param proxy: The url of the proxy being used for this request.\n-        :rtype: dict\n-        \"\"\"\n-        headers = {}\n-        username, password = get_auth_from_url(proxy)\n-\n-        if username:\n-            headers['Proxy-Authorization'] = _basic_auth_str(username,\n-                                                             password)\n-\n-        return headers\n+        if proxies is not None:\n+            proxy = proxies.get(request.url.split(':')[0])\n+            if proxy:\n+                headers = self.proxy_headers(proxy)\n+                request.headers.update(headers)\n \n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..61c30e3 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -152,13 +152,11 @@ class HTTPAdapter(BaseAdapter):\n             url = urldefragauth(request.url)\n         return url\n     def add_headers(self, request, **kwargs):\n-        pass\n-    def proxy_headers(self, proxy):\n-        headers = {}\n-        username, password = get_auth_from_url(proxy)\n-        if username:\n-            headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n-        return headers\n+        if proxies is not None:\n+            proxy = proxies.get(request.url.split(':')[0])\n+            if proxy:\n+                headers = self.proxy_headers(proxy)\n+                request.headers.update(headers)\n     def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         try:\n             conn = self.get_connection(request.url, proxies)\n", "normalized_occurrence": 1}
