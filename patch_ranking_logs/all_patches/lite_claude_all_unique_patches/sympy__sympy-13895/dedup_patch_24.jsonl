{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..cb3b9ff 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -197,13 +197,13 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n-            # Only perform autosimplification if exponent or base is a Symbol or number\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n-                e.is_integer and _coeff_isneg(b):\n+            # Only perform autosimplification if exponent is integer and base is negative\n+            elif e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+                # If exponent is not even/odd but is integer, don't transform\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n             elif b is S.One:\n@@ -1581,4 +1581,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..755528c 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -72,7 +72,7 @@ class Pow(Expr):\n                 return S.One\n             elif e is S.One:\n                 return b\n-            elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n+            elif e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n                 elif e.is_odd:\n", "normalized_occurrence": 1}
