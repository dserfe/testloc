{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex a94a471..b45ce4d 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -242,6 +242,11 @@ class _RelationalPlotter(VectorPlotter):\n                 locator = mpl.ticker.LogLocator(numticks=brief_ticks)\n             else:\n                 locator = mpl.ticker.MaxNLocator(nbins=brief_ticks)\n+                formatter = mpl.ticker.ScalarFormatter(useOffset=True)\n+                formatter.set_axis(ax.xaxis)\n+                offset_value = formatter.get_offset()\n+                if offset_value:\n+                    size_formatted_levels = [f\"{level} ({offset_value})\" for level in size_formatted_levels]\n             limits = min(self._hue_map.levels), max(self._hue_map.levels)\n             hue_levels, hue_formatted_levels = locator_to_legend_entries(\n                 locator, limits, self.plot_data[\"hue\"].infer_objects().dtype\n@@ -273,6 +278,11 @@ class _RelationalPlotter(VectorPlotter):\n                 locator = mpl.ticker.LogLocator(numticks=brief_ticks)\n             else:\n                 locator = mpl.ticker.MaxNLocator(nbins=brief_ticks)\n+                formatter = mpl.ticker.ScalarFormatter(useOffset=True)\n+                formatter.set_axis(ax.xaxis)\n+                offset_value = formatter.get_offset()\n+                if offset_value:\n+                    size_formatted_levels = [f\"{level} ({offset_value})\" for level in size_formatted_levels]\n             # Define the min/max data values\n             limits = min(self._size_map.levels), max(self._size_map.levels)\n             size_levels, size_formatted_levels = locator_to_legend_entries(\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/relational.py b/seaborn/relational.py\nindex 1613149..80e7711 100644\n--- a/seaborn/relational.py\n+++ b/seaborn/relational.py\n@@ -44,6 +44,11 @@ class _RelationalPlotter(VectorPlotter):\n                 locator = mpl.ticker.LogLocator(numticks=brief_ticks)\n             else:\n                 locator = mpl.ticker.MaxNLocator(nbins=brief_ticks)\n+                formatter = mpl.ticker.ScalarFormatter(useOffset=True)\n+                formatter.set_axis(ax.xaxis)\n+                offset_value = formatter.get_offset()\n+                if offset_value:\n+                    size_formatted_levels = [f'{level} ({offset_value})' for level in size_formatted_levels]\n             limits = (min(self._hue_map.levels), max(self._hue_map.levels))\n             hue_levels, hue_formatted_levels = locator_to_legend_entries(locator, limits, self.plot_data['hue'].infer_objects().dtype)\n         elif self._hue_map.levels is None:\n@@ -62,6 +67,11 @@ class _RelationalPlotter(VectorPlotter):\n                 locator = mpl.ticker.LogLocator(numticks=brief_ticks)\n             else:\n                 locator = mpl.ticker.MaxNLocator(nbins=brief_ticks)\n+                formatter = mpl.ticker.ScalarFormatter(useOffset=True)\n+                formatter.set_axis(ax.xaxis)\n+                offset_value = formatter.get_offset()\n+                if offset_value:\n+                    size_formatted_levels = [f'{level} ({offset_value})' for level in size_formatted_levels]\n             limits = (min(self._size_map.levels), max(self._size_map.levels))\n             size_levels, size_formatted_levels = locator_to_legend_entries(locator, limits, self.plot_data['size'].infer_objects().dtype)\n         elif self._size_map.levels is None:\n", "normalized_occurrence": 1}
