{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..652ae6d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -576,6 +576,30 @@ class Query(BaseExpression):\n         change_map = {}\n         conjunction = (connector == AND)\n \n+        # Determine which existing joins can be reused. When combining the\n+        # query with AND we must recreate all joins for m2m filters. When\n+        # combining with OR we can reuse joins. The reason is that in AND\n+        # case a single row can't fulfill a condition like:\n+        #     revrel__col=1 & revrel__col=2\n+        # But, there might be two different related rows matching this\n+        # condition. In OR case a single True is enough, so single row is\n+        # enough, too.\n+        #\n+        # Note that we will be creating duplicate joins for non-m2m joins in\n+        # the AND case. The results will be correct but this creates too many\n+        # joins. This is something that could be fixed later on.\n+        reuse = set() if conjunction else set(self.alias_map)\n+        # Base table must be present in the query - this is the same\n+        # table on both sides.\n+        self.get_initial_alias()\n+        joinpromoter = JoinPromoter(connector, 2, False)\n+        joinpromoter.add_votes(\n+            j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n+        rhs_votes = set()\n+        # Work out how to relabel the rhs aliases, if necessary.\n+        change_map = {}\n+        conjunction = (connector == AND)\n+\n         # Determine which existing joins can be reused. When combining the\n         # query with AND we must recreate all joins for m2m filters. When\n         # combining with OR we can reuse joins. The reason is that in AND\n@@ -597,6 +621,31 @@ class Query(BaseExpression):\n             j for j in self.alias_map if self.alias_map[j].join_type == INNER)\n         rhs_votes = set()\n         # Now, add the joins from rhs query into the new query (skipping base\n+        rhs_tables = list(rhs.alias_map)[1:]\n+        for alias in rhs_tables:\n+            join = rhs.alias_map[alias]\n+            # If the left side of the join was already relabeled, use the\n+            # updated alias.\n+            join = join.relabeled_clone(change_map)\n+            new_alias = self.join(join, reuse=reuse)\n+            if join.join_type == INNER:\n+                rhs_votes.add(new_alias)\n+            # We can't reuse the same join again in the query. If we have two\n+            # distinct joins for the same connection in rhs query, then the\n+            # combined query must have two joins, too.\n+            reuse.discard(new_alias)\n+            if alias != new_alias:\n+                while new_alias in change_map:\n+                    new_alias = self.join(join, reuse=reuse)\n+                change_map[alias] = new_alias\n+            if not rhs.alias_refcount[alias]:\n+                # The alias was unused in the rhs query. Unref it so that it\n+                # will be unused in the new query, too. We have to add and\n+                # unref the alias so that join promotion has information of\n+                # the join type for the unused alias.\n+                self.unref_alias(new_alias)\n+        joinpromoter.add_votes(rhs_votes)\n+        joinpromoter.update_join_types(self)\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n@@ -846,7 +895,7 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), \"Change map keys and values intersect, which means an alias might be changed twice.\"\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..7fd8c4d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -332,6 +332,29 @@ class Query(BaseExpression):\n         joinpromoter = JoinPromoter(connector, 2, False)\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n+        change_map = {}\n+        conjunction = connector == AND\n+        reuse = set() if conjunction else set(self.alias_map)\n+        self.get_initial_alias()\n+        joinpromoter = JoinPromoter(connector, 2, False)\n+        joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n+        rhs_votes = set()\n+        rhs_tables = list(rhs.alias_map)[1:]\n+        for alias in rhs_tables:\n+            join = rhs.alias_map[alias]\n+            join = join.relabeled_clone(change_map)\n+            new_alias = self.join(join, reuse=reuse)\n+            if join.join_type == INNER:\n+                rhs_votes.add(new_alias)\n+            reuse.discard(new_alias)\n+            if alias != new_alias:\n+                while new_alias in change_map:\n+                    new_alias = self.join(join, reuse=reuse)\n+                change_map[alias] = new_alias\n+            if not rhs.alias_refcount[alias]:\n+                self.unref_alias(new_alias)\n+        joinpromoter.add_votes(rhs_votes)\n+        joinpromoter.update_join_types(self)\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n@@ -467,7 +490,7 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), 'Change map keys and values intersect, which means an alias might be changed twice.'\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n", "normalized_occurrence": 1}
