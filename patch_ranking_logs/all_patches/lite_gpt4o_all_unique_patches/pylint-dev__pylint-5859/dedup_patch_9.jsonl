{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-5859", "model_patch": "diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\nindex 030ec92..3c55e8c 100644\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -275,7 +275,30 @@ def get_global_option(\n     return default\n \n \n+import re\n+\n def _splitstrip(string, sep=\",\"):\n+    \"\"\"Return a list of stripped string by splitting the string given as\n+    argument on `sep` (',' by default). Empty string and punctuation-only strings\n+    are discarded.\n+\n+    >>> _splitstrip('a, b, c   ,  4,,')\n+    ['a', 'b', 'c', '4']\n+    >>> _splitstrip('a')\n+    ['a']\n+    >>> _splitstrip('a,\\nb,\\nc,')\n+    ['a', 'b', 'c']\n+\n+    :type string: str or unicode\n+    :param string: a csv line\n+\n+    :type sep: str or unicode\n+    :param sep: field separator, default to the comma (',')\n+\n+    :rtype: str or unicode\n+    :return: the unquoted string (or the input string if it wasn't quoted)\n+    \"\"\"\n+    return [word.strip() for word in string.split(sep) if word.strip() and not re.fullmatch(r'\\W+', word.strip())]\n     \"\"\"Return a list of stripped string by splitting the string given as\n     argument on `sep` (',' by default). Empty string are discarded.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/utils/utils.py b/pylint/utils/utils.py\nindex 0221700..8f12f04 100644\n--- a/pylint/utils/utils.py\n+++ b/pylint/utils/utils.py\n@@ -126,7 +126,9 @@ def get_global_option(checker: 'BaseChecker', option: GLOBAL_OPTION_NAMES, defau\n             if options[0] == option:\n                 return getattr(provider.config, option.replace('-', '_'))\n     return default\n+import re\n def _splitstrip(string, sep=','):\n+    return [word.strip() for word in string.split(sep) if word.strip() and (not re.fullmatch('\\\\W+', word.strip()))]\n     return [word.strip() for word in string.split(sep) if word.strip()]\n def _unquote(string):\n     if not string:\n", "normalized_occurrence": 1}
