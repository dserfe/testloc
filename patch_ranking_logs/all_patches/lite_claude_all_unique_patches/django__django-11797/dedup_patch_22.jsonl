{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..aec6d8d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -90,23 +90,7 @@ class SQLCompiler:\n         # The query.group_by is either None (no GROUP BY at all), True\n         # (group by select fields), or a list of expressions to be added\n         # to the group by.\n-        if self.query.group_by is None:\n-            return []\n-        expressions = []\n-        if self.query.group_by is not True:\n-            # If the group by is set to a list (by .values() call most likely),\n-            # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n-            for expr in self.query.group_by:\n-                if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n-        # set to group by. So, we need to add cols in select, order_by, and\n-        # having into the select in any case.\n+\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..1127c43 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -36,15 +36,6 @@ class SQLCompiler:\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n         return (extra_select, order_by, group_by)\n     def get_group_by(self, select, order_by):\n-        if self.query.group_by is None:\n-            return []\n-        expressions = []\n-        if self.query.group_by is not True:\n-            for expr in self.query.group_by:\n-                if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 1}
