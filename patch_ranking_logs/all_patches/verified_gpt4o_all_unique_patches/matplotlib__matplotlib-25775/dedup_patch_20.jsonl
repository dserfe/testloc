{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..7b6cb56 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -180,6 +180,7 @@ class Text(Artist):\n         self.set_horizontalalignment(horizontalalignment)\n         self._multialignment = multialignment\n         self.set_rotation(rotation)\n+        self.set_antialiased(mpl.rcParams[\"text.antialiased\"])\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None  # a FancyBboxPatch instance\n         self._renderer = None\n@@ -927,7 +928,20 @@ class Text(Artist):\n             bbox = bbox.translated(x, y)\n             return bbox\n \n-    def set_backgroundcolor(self, color):\n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether the text is antialiased.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n         \"\"\"\n         Set the background color of the text by updating the bbox.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..449201e 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -58,6 +58,7 @@ class Text(Artist):\n         self.set_horizontalalignment(horizontalalignment)\n         self._multialignment = multialignment\n         self.set_rotation(rotation)\n+        self.set_antialiased(mpl.rcParams['text.antialiased'])\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None\n         self._renderer = None\n@@ -442,7 +443,11 @@ class Text(Artist):\n             x, y = self.get_transform().transform((x, y))\n             bbox = bbox.translated(x, y)\n             return bbox\n-    def set_backgroundcolor(self, color):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         if self._bbox_patch is None:\n             self.set_bbox(dict(facecolor=color, edgecolor=color))\n         else:\n", "normalized_occurrence": 1}
