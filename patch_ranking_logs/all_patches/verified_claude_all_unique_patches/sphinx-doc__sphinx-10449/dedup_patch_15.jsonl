{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d42883b..e34866d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1538,6 +1538,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+            kwargs.setdefault('show_return_annotation', False)\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n@@ -1552,7 +1553,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n", "occurrence": 2, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2c8c52a..96eeb5c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -860,6 +860,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+            kwargs.setdefault('show_return_annotation', False)\n         if self.config.autodoc_typehints_format == 'short':\n             kwargs.setdefault('unqualified_typehints', True)\n         try:\n@@ -869,7 +870,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             return None\n         if sig is None:\n             return None\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, **kwargs)\n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n         if result is not None:\n", "normalized_occurrence": 2}
