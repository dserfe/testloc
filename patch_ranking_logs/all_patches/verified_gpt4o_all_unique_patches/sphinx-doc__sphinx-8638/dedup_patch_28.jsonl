{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex f9408ce..a7da30a 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -185,13 +185,13 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n     if isenumclass(subject):\n         for name, value in subject.__members__.items():\n             if name not in members:\n-                members[name] = Attribute(name, True, value)\n+                members[name] = Attribute(f\"{subject.__module__}.{subject.__qualname__}.{name}\", True, value)\n \n         superclass = subject.__mro__[1]\n         for name in obj_dict:\n             if name not in superclass.__dict__:\n                 value = safe_getattr(subject, name)\n-                members[name] = Attribute(name, True, value)\n+                members[name] = Attribute(f\"{subject.__module__}.{subject.__qualname__}.{name}\", True, value)\n \n     # members in __slots__\n     try:\n@@ -276,9 +276,9 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n             unmangled = unmangle(subject, name)\n             if unmangled and unmangled not in members:\n                 if name in obj_dict:\n-                    members[unmangled] = ObjectMember(unmangled, value, class_=subject)\n+                    members[unmangled] = ObjectMember(unmangled, value, class_=subject, full_name=f\"{subject.__module__}.{subject.__qualname__}.{unmangled}\")\n                 else:\n-                    members[unmangled] = ObjectMember(unmangled, value)\n+                    members[unmangled] = ObjectMember(unmangled, value, full_name=f\"{subject.__module__}.{subject.__qualname__}.{unmangled}\")\n         except AttributeError:\n             continue\n \n@@ -308,4 +308,4 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n     except AttributeError:\n         pass\n \n-    return members\n+    return members\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex bf1ee33..5d1dd38 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -118,12 +118,12 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n     if isenumclass(subject):\n         for name, value in subject.__members__.items():\n             if name not in members:\n-                members[name] = Attribute(name, True, value)\n+                members[name] = Attribute(f'{subject.__module__}.{subject.__qualname__}.{name}', True, value)\n         superclass = subject.__mro__[1]\n         for name in obj_dict:\n             if name not in superclass.__dict__:\n                 value = safe_getattr(subject, name)\n-                members[name] = Attribute(name, True, value)\n+                members[name] = Attribute(f'{subject.__module__}.{subject.__qualname__}.{name}', True, value)\n     try:\n         __slots__ = getslots(subject)\n         if __slots__:\n@@ -182,9 +182,9 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n             unmangled = unmangle(subject, name)\n             if unmangled and unmangled not in members:\n                 if name in obj_dict:\n-                    members[unmangled] = ObjectMember(unmangled, value, class_=subject)\n+                    members[unmangled] = ObjectMember(unmangled, value, class_=subject, full_name=f'{subject.__module__}.{subject.__qualname__}.{unmangled}')\n                 else:\n-                    members[unmangled] = ObjectMember(unmangled, value)\n+                    members[unmangled] = ObjectMember(unmangled, value, full_name=f'{subject.__module__}.{subject.__qualname__}.{unmangled}')\n         except AttributeError:\n             continue\n     try:\n", "normalized_occurrence": 1}
