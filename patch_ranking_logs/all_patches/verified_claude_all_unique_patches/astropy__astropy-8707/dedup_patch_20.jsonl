{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 2e9a9bd..cbff4ee 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -547,11 +547,18 @@ class Card(_Verify):\n     @classmethod\n     def fromstring(cls, image):\n         \"\"\"\n-        Construct a `Card` object from a (raw) string. It will pad the string\n+        Construct a `Card` object from a (raw) string or bytes. It will pad the string\n         if it is not the length of a card image (80 columns).  If the card\n         image is longer than 80 columns, assume it contains ``CONTINUE``\n         card(s).\n+\n+        Parameters\n+        ----------\n+        image : str or bytes\n+            String or bytes object containing the card image.\n         \"\"\"\n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n \n         card = cls()\n         card._image = _pad(image)\ndiff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..20c7e12 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -329,13 +329,13 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         \"\"\"\n-        Creates an HDU header from a byte string containing the entire header\n+        Creates an HDU header from a string containing the entire header\n         data.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes object containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -347,6 +347,8 @@ class Header:\n         header\n             A new `Header` instance.\n         \"\"\"\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n \n         cards = []\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex a818589..f1893ca 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -161,6 +161,8 @@ class Header:\n         self.__dict__['_modified'] = val\n     @classmethod\n     def fromstring(cls, data, sep=''):\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         cards = []\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n         idx = 0\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 5d6440c..a4b8f33 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -267,6 +267,8 @@ class Card(_Verify):\n         return not self.keyword and (isinstance(self.value, str) and (not self.value)) and (not self.comment)\n     @classmethod\n     def fromstring(cls, image):\n+        if isinstance(image, bytes):\n+            image = image.decode('ascii')\n         card = cls()\n         card._image = _pad(image)\n         card._verified = False\n", "normalized_occurrence": 40}
