{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..88ad061 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -434,6 +434,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n \n         # Check data\n         X = self._validate_data(X, accept_sparse=\"csr\", dtype=np.float32, reset=False)\n+        self.feature_names_in_ = getattr(X, \"columns\", None)\n \n         # Take the opposite of the scores as bigger is better (here less\n         # abnormal)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..c85cdf0 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -59,6 +59,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n     def score_samples(self, X):\n         check_is_fitted(self)\n         X = self._validate_data(X, accept_sparse='csr', dtype=np.float32, reset=False)\n+        self.feature_names_in_ = getattr(X, 'columns', None)\n         return -self._compute_chunked_score_samples(X)\n     def _compute_chunked_score_samples(self, X):\n         n_samples = _num_samples(X)\n", "normalized_occurrence": 1}
