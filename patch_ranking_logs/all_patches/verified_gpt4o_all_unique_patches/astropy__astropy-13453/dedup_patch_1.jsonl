{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 1220930..05f4ca1 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -430,14 +430,15 @@ class HTML(core.BaseReader):\n                                     # Split up multicolumns into separate columns\n                                     new_col = Column([el[i] for el in col])\n \n-                                    new_col_iter_str_vals = self.fill_values(\n-                                        col, new_col.info.iter_str_vals())\n+                                    new_col_iter_str_vals = self.format_column(\n+                                        new_col, self.fill_values(col, new_col.info.iter_str_vals()))\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self.format_column(\n+                                    col, self.fill_values(col, col.info.iter_str_vals()))\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n@@ -455,7 +456,14 @@ class HTML(core.BaseReader):\n         # Fixes XMLWriter's insertion of unwanted line breaks\n         return [''.join(lines)]\n \n-    def fill_values(self, col, col_str_iters):\n+    def format_column(self, col, col_str_iters):\n+        \"\"\"\n+        Apply format functions to column values if specified in formats.\n+        \"\"\"\n+        if col.info.name in self.data.formats:\n+            format_func = self.data.formats[col.info.name]\n+            return (format_func(val) for val in col_str_iters)\n+        return col_str_iters\n         \"\"\"\n         Return an iterator of the values with replacements based on fill_values\n         \"\"\"\n@@ -474,4 +482,4 @@ class HTML(core.BaseReader):\n                     yield col.fill_values[col_str]\n                     continue\n \n-            yield col_str\n+            yield col_str\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 45fa153..f97608d 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -212,12 +212,12 @@ class HTML(core.BaseReader):\n                                 span = col.shape[1]\n                                 for i in range(span):\n                                     new_col = Column([el[i] for el in col])\n-                                    new_col_iter_str_vals = self.fill_values(col, new_col.info.iter_str_vals())\n+                                    new_col_iter_str_vals = self.format_column(new_col, self.fill_values(col, new_col.info.iter_str_vals()))\n                                     col_str_iters.append(new_col_iter_str_vals)\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                col_iter_str_vals = self.format_column(col, self.fill_values(col, col.info.iter_str_vals()))\n                                 col_str_iters.append(col_iter_str_vals)\n                                 new_cols_escaped.append(col_escaped)\n                     for row in zip(*col_str_iters):\n@@ -229,7 +229,11 @@ class HTML(core.BaseReader):\n                                     w.data(el.strip())\n                                     w.end(indent=False)\n         return [''.join(lines)]\n-    def fill_values(self, col, col_str_iters):\n+    def format_column(self, col, col_str_iters):\n+        if col.info.name in self.data.formats:\n+            format_func = self.data.formats[col.info.name]\n+            return (format_func(val) for val in col_str_iters)\n+        return col_str_iters\n         is_masked_column = hasattr(col, 'mask')\n         has_fill_values = hasattr(col, 'fill_values')\n         for idx, col_str in enumerate(col_str_iters):\n", "normalized_occurrence": 1}
