{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..8441230 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,8 +4682,47 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # handle user-defined literals\n+        # match number/string literal followed by identifier\n+        pos = self.pos\n+        skip_ws = self.skip_ws\n+        literal = None\n+        \n+        # try to parse as a number first\n+        number = self.try_parse_number()\n+        if number is not None:\n+            literal = number\n+        \n+        # if not a number, try as a string/char literal\n+        if literal is None:\n+            self.pos = pos\n+            self.skip_ws = skip_ws\n+            string = self.try_parse_string()\n+            if string is not None:\n+                literal = string\n+        \n+        if literal is None:\n+            return None\n+            \n+        # check for UDL suffix\n+        self.skip_ws = False  # don't skip whitespace for UDL suffix\n+        pos = self.pos\n+        try:\n+            self.skip_string('_')  # UDL must start with underscore\n+            ident = self._parse_nested_name()\n+            if ident is not None:\n+                suffix = '_' + str(ident)\n+                if isinstance(literal, ASTNumberLiteral):\n+                    return ASTUserDefinedLiteral(literal.data, suffix)\n+                else:\n+                    return ASTUserDefinedLiteral(literal._stringify(None), suffix)\n+        except Exception:\n+            pass\n+        \n+        # if no valid UDL suffix found, restore position and return original literal\n+        self.pos = pos\n+        self.skip_ws = skip_ws\n+        return literal\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..ff01f23 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,7 +3074,36 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n-        return None\n+        pos = self.pos\n+        skip_ws = self.skip_ws\n+        literal = None\n+        number = self.try_parse_number()\n+        if number is not None:\n+            literal = number\n+        if literal is None:\n+            self.pos = pos\n+            self.skip_ws = skip_ws\n+            string = self.try_parse_string()\n+            if string is not None:\n+                literal = string\n+        if literal is None:\n+            return None\n+        self.skip_ws = False\n+        pos = self.pos\n+        try:\n+            self.skip_string('_')\n+            ident = self._parse_nested_name()\n+            if ident is not None:\n+                suffix = '_' + str(ident)\n+                if isinstance(literal, ASTNumberLiteral):\n+                    return ASTUserDefinedLiteral(literal.data, suffix)\n+                else:\n+                    return ASTUserDefinedLiteral(literal._stringify(None), suffix)\n+        except Exception:\n+            pass\n+        self.pos = pos\n+        self.skip_ws = skip_ws\n+        return literal\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
