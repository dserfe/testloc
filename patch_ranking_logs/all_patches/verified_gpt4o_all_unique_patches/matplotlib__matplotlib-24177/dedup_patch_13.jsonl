{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..c9ca2f7 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6755,7 +6755,11 @@ such objects\n             # If a stacked density plot, normalize so the area of all the\n             # stacked histograms together is 1\n             if density:\n-                tops = (tops / np.diff(bins)) / tops[-1].sum()\n+                if histtype in ['step', 'stepfilled']:\n+                    tops = (tops / np.diff(bins))\n+                    tops /= np.sum(tops) * np.diff(bins)\n+                else:\n+                    tops = (tops / np.diff(bins)) / tops[-1].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n@@ -6876,13 +6880,16 @@ such objects\n             # items lower in the stack are plotted on top of\n             # items higher in the stack\n             for x, y, c in reversed(list(zip(xvals, yvals, color))):\n-                patches.append(self.fill(\n+                p = self.fill(\n                     x[:split], y[:split],\n                     closed=True if fill else None,\n                     facecolor=c,\n                     edgecolor=None if fill else c,\n                     fill=fill if fill else None,\n-                    zorder=None if fill else mlines.Line2D.zorder))\n+                    zorder=None if fill else mlines.Line2D.zorder)\n+                # Update the data limits to ensure proper autoscaling\n+                self.update_datalim(np.column_stack([x, y]))\n+                patches.append(p)\n             for patch_list in patches:\n                 for patch in patch_list:\n                     if orientation == 'vertical':\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..0e0496e 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1954,7 +1954,11 @@ class Axes(_AxesBase):\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n-                tops = tops / np.diff(bins) / tops[-1].sum()\n+                if histtype in ['step', 'stepfilled']:\n+                    tops = tops / np.diff(bins)\n+                    tops /= np.sum(tops) * np.diff(bins)\n+                else:\n+                    tops = tops / np.diff(bins) / tops[-1].sum()\n         if cumulative:\n             slc = slice(None)\n             if isinstance(cumulative, Number) and cumulative < 0:\n@@ -2037,7 +2041,9 @@ class Axes(_AxesBase):\n                     yvals.append(y.copy())\n             split = -1 if fill else 2 * len(bins)\n             for x, y, c in reversed(list(zip(xvals, yvals, color))):\n-                patches.append(self.fill(x[:split], y[:split], closed=True if fill else None, facecolor=c, edgecolor=None if fill else c, fill=fill if fill else None, zorder=None if fill else mlines.Line2D.zorder))\n+                p = self.fill(x[:split], y[:split], closed=True if fill else None, facecolor=c, edgecolor=None if fill else c, fill=fill if fill else None, zorder=None if fill else mlines.Line2D.zorder)\n+                self.update_datalim(np.column_stack([x, y]))\n+                patches.append(p)\n             for patch_list in patches:\n                 for patch in patch_list:\n                     if orientation == 'vertical':\n", "normalized_occurrence": 1}
