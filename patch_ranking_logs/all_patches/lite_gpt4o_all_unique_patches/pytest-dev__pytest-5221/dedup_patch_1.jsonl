{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/fixtures.py b/src/_pytest/fixtures.py\nindex 8772615..3b4f22b 100644\n--- a/src/_pytest/fixtures.py\n+++ b/src/_pytest/fixtures.py\n@@ -895,7 +895,7 @@ class FixtureDef(object):\n         return hook.pytest_fixture_setup(fixturedef=self, request=request)\n \n     def __repr__(self):\n-        return \"<FixtureDef argname=%r scope=%r baseid=%r>\" % (\n+        return \"<FixtureDef argname=%r scope=%r baseid=%r location=%r>\" % (\n             self.argname,\n             self.scope,\n             self.baseid,\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/fixtures.py b/src/_pytest/fixtures.py\nindex f3fbe6f..7316882 100644\n--- a/src/_pytest/fixtures.py\n+++ b/src/_pytest/fixtures.py\n@@ -550,7 +550,7 @@ class FixtureDef(object):\n         hook = self._fixturemanager.session.gethookproxy(request.node.fspath)\n         return hook.pytest_fixture_setup(fixturedef=self, request=request)\n     def __repr__(self):\n-        return '<FixtureDef argname=%r scope=%r baseid=%r>' % (self.argname, self.scope, self.baseid)\n+        return '<FixtureDef argname=%r scope=%r baseid=%r location=%r>' % (self.argname, self.scope, self.baseid)\n def resolve_fixture_function(fixturedef, request):\n     fixturefunc = fixturedef.func\n     if fixturedef.unittest:\n", "normalized_occurrence": 1}
