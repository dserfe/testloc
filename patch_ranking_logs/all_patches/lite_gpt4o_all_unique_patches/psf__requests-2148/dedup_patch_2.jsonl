{"model_name_or_path": "agentless", "instance_id": "psf__requests-2148", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex c835f24..40bb937 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -636,8 +636,11 @@ class Response(object):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n-                except IncompleteRead as e:\n-                    raise ChunkedEncodingError(e)\n+                except (IncompleteRead, socket.error) as e:\n+                    if isinstance(e, IncompleteRead):\n+                        raise ChunkedEncodingError(e)\n+                    else:\n+                        raise ConnectionError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n             except AttributeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 08abf42..6120a0e 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -324,8 +324,11 @@ class Response(object):\n                 try:\n                     for chunk in self.raw.stream(chunk_size, decode_content=True):\n                         yield chunk\n-                except IncompleteRead as e:\n-                    raise ChunkedEncodingError(e)\n+                except (IncompleteRead, socket.error) as e:\n+                    if isinstance(e, IncompleteRead):\n+                        raise ChunkedEncodingError(e)\n+                    else:\n+                        raise ConnectionError(e)\n                 except DecodeError as e:\n                     raise ContentDecodingError(e)\n             except AttributeError:\n", "normalized_occurrence": 1}
