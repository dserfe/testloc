{"model_name_or_path": "agentless", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..6677da7 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -104,36 +104,46 @@ class URLValidator(RegexValidator):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         # Check if the scheme is valid.\n         scheme = value.split('://')[0].lower()\n-        if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code, params={'value': value})\n-\n-        # Then check full URL\n         try:\n-            super().__call__(value)\n-        except ValidationError as e:\n-            # Trivial case failed. Try for possible IDN domain\n-            if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n-                try:\n-                    netloc = punycode(netloc)  # IDN -> ACE\n-                except UnicodeError:  # invalid domain part\n-                    raise e\n-                url = urlunsplit((scheme, netloc, path, query, fragment))\n-                super().__call__(url)\n+            if scheme not in self.schemes:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+            # Then check full URL\n+            try:\n+                super().__call__(value)\n+            except ValidationError as e:\n+                # Trivial case failed. Try for possible IDN domain\n+                if value:\n+                    try:\n+                        scheme, netloc, path, query, fragment = urlsplit(value)\n+                    except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+                    try:\n+                        netloc = punycode(netloc)  # IDN -> ACE\n+                    except UnicodeError:  # invalid domain part\n+                        raise e\n+                    url = urlunsplit((scheme, netloc, path, query, fragment))\n+                    super().__call__(url)\n+                else:\n+                    raise\n             else:\n-                raise\n-        else:\n-            # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n-                    validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                # Now verify IPv6 in the netloc part\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n+                    try:\n+                        validate_ipv6_address(potential_ip)\n+                    except ValidationError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+\n+            # The maximum length of a full host name is 253 characters per RFC 1034\n+            # section 3.1. It's defined to be 255 bytes or less, but this includes\n+            # one byte for the length of the name and one byte for the trailing dot\n+            # that's used to indicate absolute names in DNS.\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..5d09552 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -60,32 +60,37 @@ class URLValidator(RegexValidator):\n         if self.unsafe_chars.intersection(value):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         scheme = value.split('://')[0].lower()\n-        if scheme not in self.schemes:\n-            raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n-            super().__call__(value)\n-        except ValidationError as e:\n-            if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n-                try:\n-                    netloc = punycode(netloc)\n-                except UnicodeError:\n-                    raise e\n-                url = urlunsplit((scheme, netloc, path, query, fragment))\n-                super().__call__(url)\n+            if scheme not in self.schemes:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                super().__call__(value)\n+            except ValidationError as e:\n+                if value:\n+                    try:\n+                        scheme, netloc, path, query, fragment = urlsplit(value)\n+                    except ValueError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+                    try:\n+                        netloc = punycode(netloc)\n+                    except UnicodeError:\n+                        raise e\n+                    url = urlunsplit((scheme, netloc, path, query, fragment))\n+                    super().__call__(url)\n+                else:\n+                    raise\n             else:\n-                raise\n-        else:\n-            host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n-                    validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+                host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n+                    try:\n+                        validate_ipv6_address(potential_ip)\n+                    except ValidationError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         if len(urlsplit(value).hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n", "normalized_occurrence": 1}
