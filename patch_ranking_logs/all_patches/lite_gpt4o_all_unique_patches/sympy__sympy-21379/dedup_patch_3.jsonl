{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 333d2a2..b3af334 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -1121,15 +1121,20 @@ class Expr(Basic, EvalfMixin):\n         \"\"\"\n         from sympy.polys import Poly, PolynomialError\n \n-        try:\n-            poly = Poly(self, *gens, **args)\n+        from sympy.functions.elementary.piecewise import Piecewise\n \n-            if not poly.is_Poly:\n-                return None\n-            else:\n-                return poly\n-        except PolynomialError:\n+        if isinstance(self, Piecewise):\n             return None\n+        else:\n+            try:\n+                poly = Poly(self, *gens, **args)\n+\n+                if not poly.is_Poly:\n+                    return None\n+                else:\n+                    return poly\n+            except PolynomialError:\n+                return None\n \n     def as_ordered_terms(self, order=None, data=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex a5fb1f0..87dfb07 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -593,14 +593,18 @@ class Expr(Basic, EvalfMixin):\n         return [self]\n     def as_poly(self, *gens, **args):\n         from sympy.polys import Poly, PolynomialError\n-        try:\n-            poly = Poly(self, *gens, **args)\n-            if not poly.is_Poly:\n-                return None\n-            else:\n-                return poly\n-        except PolynomialError:\n+        from sympy.functions.elementary.piecewise import Piecewise\n+        if isinstance(self, Piecewise):\n             return None\n+        else:\n+            try:\n+                poly = Poly(self, *gens, **args)\n+                if not poly.is_Poly:\n+                    return None\n+                else:\n+                    return poly\n+            except PolynomialError:\n+                return None\n     def as_ordered_terms(self, order=None, data=False):\n         from .numbers import Number, NumberSymbol\n         if order is None and self.is_Add:\n", "normalized_occurrence": 1}
