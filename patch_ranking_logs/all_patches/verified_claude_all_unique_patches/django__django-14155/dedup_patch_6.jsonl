{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..2a589fd 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,6 +31,17 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        # Handle functools.partial\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            # Store partial info\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords if func.keywords else {}\n+            # Unwrap the original function\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n+\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -59,8 +70,19 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_repr = self._func_path\n+        if self.partial_args or self.partial_keywords:\n+            partial_args = ', '.join([repr(arg) for arg in self.partial_args])\n+            partial_kwargs = ', '.join([f'{k}={repr(v)}' for k, v in self.partial_keywords.items()])\n+            partial_params = []\n+            if partial_args:\n+                partial_params.append(partial_args)\n+            if partial_kwargs:\n+                partial_params.append(partial_kwargs)\n+            func_repr = f\"functools.partial({self._func_path}, {', '.join(partial_params)})\"\n+        \n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..e3e1dff 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,13 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if hasattr(func, 'func') and hasattr(func, 'args') and hasattr(func, 'keywords'):\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords if func.keywords else {}\n+            func = func.func\n+        else:\n+            self.partial_args = ()\n+            self.partial_keywords = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -38,7 +45,17 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_repr = self._func_path\n+        if self.partial_args or self.partial_keywords:\n+            partial_args = ', '.join([repr(arg) for arg in self.partial_args])\n+            partial_kwargs = ', '.join([f'{k}={repr(v)}' for k, v in self.partial_keywords.items()])\n+            partial_params = []\n+            if partial_args:\n+                partial_params.append(partial_args)\n+            if partial_kwargs:\n+                partial_params.append(partial_kwargs)\n+            func_repr = f\"functools.partial({self._func_path}, {', '.join(partial_params)})\"\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
