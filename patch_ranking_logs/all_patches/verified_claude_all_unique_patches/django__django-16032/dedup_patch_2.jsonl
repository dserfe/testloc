{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5314293..4920f7e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1306,6 +1306,12 @@ class QuerySet:\n         fields += tuple(expressions)\n         clone = self._values(*fields, **expressions)\n         clone._iterable_class = ValuesIterable\n+        # Clear alias annotations when used in subquery\n+        if getattr(clone, '_has_filters', False):\n+            clone.query.annotation_select = {\n+                k: v for k, v in clone.query.annotation_select.items()\n+                if not isinstance(v, Value) or k not in clone.query.annotations\n+            }\n         return clone\n \n     def values_list(self, *fields, flat=False, named=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex cb06696..34935b0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -702,6 +702,8 @@ class QuerySet:\n         fields += tuple(expressions)\n         clone = self._values(*fields, **expressions)\n         clone._iterable_class = ValuesIterable\n+        if getattr(clone, '_has_filters', False):\n+            clone.query.annotation_select = {k: v for k, v in clone.query.annotation_select.items() if not isinstance(v, Value) or k not in clone.query.annotations}\n         return clone\n     def values_list(self, *fields, flat=False, named=False):\n         if flat and named:\n", "normalized_occurrence": 1}
