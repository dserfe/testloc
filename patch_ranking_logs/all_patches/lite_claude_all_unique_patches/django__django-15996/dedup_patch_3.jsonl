{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15996", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex cdbac1f..1cfc2cc 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -125,10 +125,22 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        try:\n+            # Try normal enum serialization first\n+            return (\n+                \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                {\"import %s\" % module},\n+            )\n+        except AttributeError:\n+            # Handle flag combinations\n+            if hasattr(enum_class, \"_decompose\"):\n+                names = []\n+                for flag in enum_class._decompose(self.value):\n+                    names.append(\"%s.%s.%s\" % (module, enum_class.__qualname__, flag.name))\n+                return (\n+                    \" | \".join(names),\n+                    {\"import %s\" % module},\n+                )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 08e9db0..135d99b 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,7 +92,14 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        try:\n+            return ('%s.%s[%r]' % (module, enum_class.__qualname__, self.value.name), {'import %s' % module})\n+        except AttributeError:\n+            if hasattr(enum_class, '_decompose'):\n+                names = []\n+                for flag in enum_class._decompose(self.value):\n+                    names.append('%s.%s.%s' % (module, enum_class.__qualname__, flag.name))\n+                return (' | '.join(names), {'import %s' % module})\n class FloatSerializer(BaseSimpleSerializer):\n     def serialize(self):\n         if math.isnan(self.value) or math.isinf(self.value):\n", "normalized_occurrence": 2}
