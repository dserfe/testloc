{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..c843734 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -75,9 +75,9 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n     return parser.found\n \n \n-class CheckExternalLinksBuilder(Builder):\n+class CheckLinksBuilder(Builder):\n     \"\"\"\n-    Checks for broken external links.\n+    Checks for broken links.\n     \"\"\"\n     name = 'linkcheck'\n     epilog = __('Look for any errors in the above output or in '\n@@ -131,7 +131,13 @@ class CheckExternalLinksBuilder(Builder):\n \n             return {}\n \n-        def check_uri() -> Tuple[str, str, int]:\n+        def check_uri(uri: str, docname: str) -> Tuple[str, str, int]:\n+            if uri.startswith(('http:', 'https:')):\n+                return check_external_uri(uri)\n+            else:\n+                return check_internal_uri(uri, docname)\n+\n+        def check_external_uri(uri: str) -> Tuple[str, str, int]:\n             # split off anchor\n             if '#' in uri:\n                 req_url, anchor = uri.split('#', 1)\n@@ -208,6 +214,13 @@ class CheckExternalLinksBuilder(Builder):\n                 else:\n                     return 'redirected', new_url, 0\n \n+        def check_internal_uri(uri: str, docname: str) -> Tuple[str, str, int]:\n+            # Resolve the document name to an actual file path\n+            if not path.exists(path.join(self.srcdir, uri)):\n+                return 'broken', 'File not found', 0\n+            else:\n+                return 'working', '', 0\n+\n         def check() -> Tuple[str, str, int]:\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..7758934 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -39,7 +39,7 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n             break\n     parser.close()\n     return parser.found\n-class CheckExternalLinksBuilder(Builder):\n+class CheckLinksBuilder(Builder):\n     name = 'linkcheck'\n     epilog = __('Look for any errors in the above output or in %(outdir)s/output.txt')\n     def init(self) -> None:\n@@ -73,7 +73,12 @@ class CheckExternalLinksBuilder(Builder):\n                     headers.update(self.config.linkcheck_request_headers[u])\n                     return headers\n             return {}\n-        def check_uri() -> Tuple[str, str, int]:\n+        def check_uri(uri: str, docname: str) -> Tuple[str, str, int]:\n+            if uri.startswith(('http:', 'https:')):\n+                return check_external_uri(uri)\n+            else:\n+                return check_internal_uri(uri, docname)\n+        def check_external_uri(uri: str) -> Tuple[str, str, int]:\n             if '#' in uri:\n                 req_url, anchor = uri.split('#', 1)\n                 for rex in self.anchors_ignore:\n@@ -129,6 +134,11 @@ class CheckExternalLinksBuilder(Builder):\n                     return ('redirected', new_url, code)\n                 else:\n                     return ('redirected', new_url, 0)\n+        def check_internal_uri(uri: str, docname: str) -> Tuple[str, str, int]:\n+            if not path.exists(path.join(self.srcdir, uri)):\n+                return ('broken', 'File not found', 0)\n+            else:\n+                return ('working', '', 0)\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n", "normalized_occurrence": 1}
