{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..9462666 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -190,7 +190,10 @@ class Options:\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n \n-            # order_with_respect_and ordering are mutually exclusive.\n+            # Resolve ordering fields for validation\n+            self.ordering = self._resolve_ordering(self.ordering)\n+            \n+            # order_with_respect_to and ordering are mutually exclusive.\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n             # Any leftover attributes must be invalid.\n@@ -217,7 +220,17 @@ class Options:\n             new_objs.append(obj)\n         return new_objs\n \n-    def _prepare(self, model):\n+    def _resolve_ordering(self, ordering):\n+        \"\"\"\n+        Ensure the ordering fields are valid, including lookups.\n+        \"\"\"\n+        resolved_ordering = []\n+        for field in ordering:\n+            if isinstance(field, str):\n+                if '__' in field and not field.startswith('-'):\n+                    field = F(field)\n+            resolved_ordering.append(field)\n+        return resolved_ordering\n         if self.order_with_respect_to:\n             # The app registry will not be ready at this point, so we cannot\n             # use get_field().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..a7921a2 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -117,6 +117,7 @@ class Options:\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            self.ordering = self._resolve_ordering(self.ordering)\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n@@ -133,7 +134,14 @@ class Options:\n             obj.name = obj.name % {'app_label': cls._meta.app_label.lower(), 'class': cls.__name__.lower()}\n             new_objs.append(obj)\n         return new_objs\n-    def _prepare(self, model):\n+    def _resolve_ordering(self, ordering):\n+        resolved_ordering = []\n+        for field in ordering:\n+            if isinstance(field, str):\n+                if '__' in field and (not field.startswith('-')):\n+                    field = F(field)\n+            resolved_ordering.append(field)\n+        return resolved_ordering\n         if self.order_with_respect_to:\n             query = self.order_with_respect_to\n             try:\n", "normalized_occurrence": 1}
