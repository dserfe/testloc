{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..bd3bcdd 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -898,9 +898,7 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n+            if not hasattr(obj.model, item):\n                 return [\n                     checks.Error(\n                         \"The value of '%s' refers to '%s', which is not a \"\n@@ -916,6 +914,7 @@ class ModelAdminChecks(BaseModelAdminChecks):\n                         id=\"admin.E108\",\n                     )\n                 ]\n+            field = getattr(obj.model, item)\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..d6cceba 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -340,10 +340,9 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         try:\n             field = obj.model._meta.get_field(item)\n         except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n+            if not hasattr(obj.model, item):\n                 return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n+            field = getattr(obj.model, item)\n         if isinstance(field, models.ManyToManyField) or (getattr(field, 'rel', None) and field.rel.field.many_to_one):\n             return [checks.Error(f\"The value of '{label}' must not be a many-to-many field or a reverse foreign key.\", obj=obj.__class__, id='admin.E109')]\n         return []\n", "normalized_occurrence": 1}
