{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..71c451b 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,35 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise\n+        if not (isinstance(i, (int, Integer)) and isinstance(j, (int, Integer))):\n+            # For symbolic indices, return a Piecewise expression\n+            expr = None\n+            row_offset = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                col_offset = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    block_expr = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                    cond = And(i >= row_offset, i < row_offset + numrows,\n+                             j >= col_offset, j < col_offset + numcols)\n+                    expr = block_expr if expr is None else Piecewise(\n+                        (block_expr, cond), (expr, True))\n+                    col_offset += numcols\n+                row_offset += numrows\n+            return expr\n+        else:\n+            # For concrete indices, use the original logic\n+            row_offset = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < row_offset + numrows:\n+                    break\n+                row_offset += numrows\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < col_offset + numcols:\n+                    break\n+                col_offset += numcols\n+            return self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..5438ccb 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,31 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise\n+        if not (isinstance(i, (int, Integer)) and isinstance(j, (int, Integer))):\n+            expr = None\n+            row_offset = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                col_offset = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    block_expr = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                    cond = And(i >= row_offset, i < row_offset + numrows, j >= col_offset, j < col_offset + numcols)\n+                    expr = block_expr if expr is None else Piecewise((block_expr, cond), (expr, True))\n+                    col_offset += numcols\n+                row_offset += numrows\n+            return expr\n+        else:\n+            row_offset = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < row_offset + numrows:\n+                    break\n+                row_offset += numrows\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < col_offset + numcols:\n+                    break\n+                col_offset += numcols\n+            return self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
