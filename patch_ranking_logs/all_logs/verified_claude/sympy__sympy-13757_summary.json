{
  "instance_id": "sympy__sympy-13757",
  "container_id": "b97f34c131b2cdd8b3ac0b3cf7ac55f836851bc445ce8fb884554cb5c51f4153",
  "regression": {
    "results": [
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_0.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_1.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_10.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_11.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_12.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_13.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_14.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_15.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_16.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_17.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_2.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_4.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_5.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_6.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_7.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_8.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 10,
        "failed": 0
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_9.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 9,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-13757/dedup_patch_3.jsonl",
        "inst": "sympy__sympy-13757",
        "passed": 0,
        "failed": 10
      }
    ],
    "top_passed": 10,
    "top_subset_size": 16
  },
  "reproduction": {
    "sympy/polys/tests/test_polytools.py::test_Poly_mul#1": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_sub#2": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_sub#3": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_mul#4": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_sub#5": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_sub#6": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "none": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "planner": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "full": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "regression": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "patchLoc": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "testLoc": {
      "repro_fails_on_clean": true,
      "outcomes": []
    }
  }
}