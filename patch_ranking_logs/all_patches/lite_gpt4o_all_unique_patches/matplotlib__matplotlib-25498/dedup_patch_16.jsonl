{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25498", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 6151185..bcc30f8 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -1104,10 +1104,13 @@ class Colorbar:\n         if not self.norm.scaled():\n             self.norm.vmin = 0\n             self.norm.vmax = 1\n-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n-            self.norm.vmin, self.norm.vmax, expander=0.1)\n+        if not self.norm.scaled():\n+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n+                self.norm.vmin, self.norm.vmax, expander=0.1)\n+        else:\n+            self.norm.vmin, self.norm.vmax = self.norm.vmin, self.norm.vmax\n         if (not isinstance(self.norm, colors.BoundaryNorm) and\n-                (self.boundaries is None)):\n+                (self.boundaries is None) and self.norm.vmin != self.norm.vmax):\n             b = self.norm.inverse(b)\n \n         self._boundaries = np.asarray(b, dtype=float)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 45aa167..bd2b9c7 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -493,8 +493,11 @@ class Colorbar:\n         if not self.norm.scaled():\n             self.norm.vmin = 0\n             self.norm.vmax = 1\n-        self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n-        if not isinstance(self.norm, colors.BoundaryNorm) and self.boundaries is None:\n+        if not self.norm.scaled():\n+            self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n+        else:\n+            self.norm.vmin, self.norm.vmax = (self.norm.vmin, self.norm.vmax)\n+        if not isinstance(self.norm, colors.BoundaryNorm) and self.boundaries is None and (self.norm.vmin != self.norm.vmax):\n             b = self.norm.inverse(b)\n         self._boundaries = np.asarray(b, dtype=float)\n         self._values = 0.5 * (self._boundaries[:-1] + self._boundaries[1:])\n", "normalized_occurrence": 1}
