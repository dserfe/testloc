{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..92c5a9c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,7 +1389,18 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        # First check basic containment\n+        if not And(*[set.contains(other) for set in self.args]):\n+            return False\n+        # For intersection with Reals, ensure the element is real\n+        if any(arg == S.Reals for arg in self.args):\n+            try:\n+                # Check if imaginary part is zero\n+                if other.is_complex and other.is_number:\n+                    return other.as_real_imag()[1] == 0\n+            except AttributeError:\n+                pass\n+        return True\n \n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..67463fd 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,7 +530,15 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        if not And(*[set.contains(other) for set in self.args]):\n+            return False\n+        if any((arg == S.Reals for arg in self.args)):\n+            try:\n+                if other.is_complex and other.is_number:\n+                    return other.as_real_imag()[1] == 0\n+            except AttributeError:\n+                pass\n+        return True\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n         completed = False\n", "normalized_occurrence": 1}
