{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..cb67d38 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,10 +112,36 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n-    \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    If a pattern is wrapped in quotes or parentheses, it is treated as a single pattern.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current = \"\"\n+    in_quotes = False\n+    paren_level = 0\n+    \n+    for char in value:\n+        if char == '\"' and not in_quotes:\n+            in_quotes = True\n+            current += char\n+        elif char == '\"' and in_quotes:\n+            in_quotes = False\n+            current += char\n+        elif char == '(' and not in_quotes:\n+            paren_level += 1\n+            current += char\n+        elif char == ')' and not in_quotes:\n+            paren_level -= 1\n+            current += char\n+        elif char == ',' and not in_quotes and paren_level == 0:\n+            if current.strip():\n+                patterns.append(_regex_transformer(current.strip()))\n+            current = \"\"\n+        else:\n+            current += char\n+    \n+    if current.strip():\n+        patterns.append(_regex_transformer(current.strip()))\n+    \n     return patterns\n \n \n", "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..2cfb8c6 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,8 +55,30 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n-        patterns.append(_regex_transformer(pattern))\n+    current = ''\n+    in_quotes = False\n+    paren_level = 0\n+    for char in value:\n+        if char == '\"' and (not in_quotes):\n+            in_quotes = True\n+            current += char\n+        elif char == '\"' and in_quotes:\n+            in_quotes = False\n+            current += char\n+        elif char == '(' and (not in_quotes):\n+            paren_level += 1\n+            current += char\n+        elif char == ')' and (not in_quotes):\n+            paren_level -= 1\n+            current += char\n+        elif char == ',' and (not in_quotes) and (paren_level == 0):\n+            if current.strip():\n+                patterns.append(_regex_transformer(current.strip()))\n+            current = ''\n+        else:\n+            current += char\n+    if current.strip():\n+        patterns.append(_regex_transformer(current.strip()))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n", "normalized_occurrence": 1}
