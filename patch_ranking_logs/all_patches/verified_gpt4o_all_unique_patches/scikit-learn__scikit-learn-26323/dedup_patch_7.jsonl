{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..2d5ae08 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -300,6 +300,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             )\n             if trans not in {\"passthrough\", \"drop\"}\n         )\n+        # Also consider the transformer in the remainder if it's not 'passthrough' or 'drop'\n+        if self.remainder not in {\"passthrough\", \"drop\"}:\n+            transformers = chain(transformers, [self.remainder])\n+        \n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..85613a1 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -45,6 +45,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n+        if self.remainder not in {'passthrough', 'drop'}:\n+            transformers = chain(transformers, [self.remainder])\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n         return self\n", "normalized_occurrence": 2}
