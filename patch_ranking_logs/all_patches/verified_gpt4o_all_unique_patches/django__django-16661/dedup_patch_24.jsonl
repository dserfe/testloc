{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..ca43150 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -440,12 +440,17 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n         from django.contrib.admin.filters import SimpleListFilter\n \n         model = self.model\n-        # Check FKey lookups that are allowed, so that popups produced by\n-        # ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to,\n-        # are allowed to work.\n-        for fk_lookup in model._meta.related_fkey_lookups:\n-            # As ``limit_choices_to`` can be a callable, invoke it here.\n-            if callable(fk_lookup):\n+        # Handle the case where a ForeignKey is also the primary key\n+        # or part of a composite key.\n+        for field in model._meta.fields:\n+            if field.primary_key or field.unique:\n+                valid_lookups.add(field.name)\n+        # Check FKey lookups that are allowed, so that popups produced by \n+        # ForeignKeyRawIdWidget, on the basis of ForeignKey.limit_choices_to, \n+        # are allowed to work. \n+        for fk_lookup in model._meta.related_fkey_lookups: \n+            # As ``limit_choices_to`` can be a callable, invoke it here. \n+            if callable(fk_lookup): \n                 fk_lookup = fk_lookup()\n             if (lookup, value) in widgets.url_params_from_lookup_dict(\n                 fk_lookup\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 061e1b9..d6df534 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -193,6 +193,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n     def lookup_allowed(self, lookup, value):\n         from django.contrib.admin.filters import SimpleListFilter\n         model = self.model\n+        for field in model._meta.fields:\n+            if field.primary_key or field.unique:\n+                valid_lookups.add(field.name)\n         for fk_lookup in model._meta.related_fkey_lookups:\n             if callable(fk_lookup):\n                 fk_lookup = fk_lookup()\n", "normalized_occurrence": 1}
