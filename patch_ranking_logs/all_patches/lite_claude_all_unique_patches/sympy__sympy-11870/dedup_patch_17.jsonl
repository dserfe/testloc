{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..a67837a 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -439,9 +439,19 @@ class exp(ExpBase):\n         return exp(arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n+        \"\"\"Rewrite exp in terms of sin.\n+        This is based on the complex exponential formula:\n+            sin(x) = (exp(I*x) - exp(-I*x))/(2*I)\n+        \"\"\"\n         from sympy import sin\n         I = S.ImaginaryUnit\n-        return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n+        if arg.has(I):\n+            # Try to identify if this is already part of a sin pattern\n+            if arg.is_Mul and I in arg.args:\n+                x = arg.as_coefficient(I)\n+                if x is not None:\n+                    return -I*sin(x)\n+        return self\n \n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..0e55eca 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -273,7 +273,12 @@ class exp(ExpBase):\n     def _eval_rewrite_as_sin(self, arg):\n         from sympy import sin\n         I = S.ImaginaryUnit\n-        return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n+        if arg.has(I):\n+            if arg.is_Mul and I in arg.args:\n+                x = arg.as_coefficient(I)\n+                if x is not None:\n+                    return -I * sin(x)\n+        return self\n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n         I = S.ImaginaryUnit\n", "normalized_occurrence": 1}
