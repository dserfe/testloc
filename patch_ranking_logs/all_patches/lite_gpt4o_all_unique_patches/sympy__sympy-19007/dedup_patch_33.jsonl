{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..ea43c44 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,16 +234,21 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        # Handling for symbolic row index\n+        row_sum = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_sum += numrows\n+            if i < row_sum:\n+                i = i - (row_sum - numrows)\n                 break\n-            else:\n-                i -= numrows\n+\n+        # Handling for symbolic column index\n+        col_sum = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_sum += numcols\n+            if j < col_sum:\n+                j = j - (col_sum - numcols)\n                 break\n-            else:\n-                j -= numcols\n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..7583010 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,18 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        row_sum = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_sum += numrows\n+            if i < row_sum:\n+                i = i - (row_sum - numrows)\n                 break\n-            else:\n-                i -= numrows\n+        col_sum = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_sum += numcols\n+            if j < col_sum:\n+                j = j - (col_sum - numcols)\n                 break\n-            else:\n-                j -= numcols\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
