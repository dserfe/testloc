{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15902", "model_patch": "diff --git a/django/forms/renderers.py b/django/forms/renderers.py\nindex f215e38..c872106 100644\n--- a/django/forms/renderers.py\n+++ b/django/forms/renderers.py\n@@ -6,6 +6,7 @@ from django.template.backends.django import DjangoTemplates\n from django.template.loader import get_template\n from django.utils.functional import cached_property\n from django.utils.module_loading import import_string\n+from django.forms.formsets import ManagementForm\n \n \n @functools.lru_cache\n@@ -25,6 +26,15 @@ class BaseRenderer:\n         raise NotImplementedError(\"subclasses must implement get_template()\")\n \n     def render(self, template_name, context, request=None):\n+        # Special case for ManagementForm which only needs hidden inputs\n+        if isinstance(context.get('form'), ManagementForm):\n+            return context['form']._html_output(\n+                normal_row='%(field)s',\n+                error_row='%s',\n+                row_ender='',\n+                help_text_html='',\n+                errors_on_separate_row=True,\n+            )\n         template = self.get_template(template_name)\n         return template.render(context, request=request).strip()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/renderers.py b/django/forms/renderers.py\nindex 6842533..8b2f81a 100644\n--- a/django/forms/renderers.py\n+++ b/django/forms/renderers.py\n@@ -5,6 +5,7 @@ from django.template.backends.django import DjangoTemplates\n from django.template.loader import get_template\n from django.utils.functional import cached_property\n from django.utils.module_loading import import_string\n+from django.forms.formsets import ManagementForm\n @functools.lru_cache\n def get_default_renderer():\n     renderer_class = import_string(settings.FORM_RENDERER)\n@@ -15,6 +16,8 @@ class BaseRenderer:\n     def get_template(self, template_name):\n         raise NotImplementedError('subclasses must implement get_template()')\n     def render(self, template_name, context, request=None):\n+        if isinstance(context.get('form'), ManagementForm):\n+            return context['form']._html_output(normal_row='%(field)s', error_row='%s', row_ender='', help_text_html='', errors_on_separate_row=True)\n         template = self.get_template(template_name)\n         return template.render(context, request=request).strip()\n class EngineMixin:\n", "normalized_occurrence": 1}
