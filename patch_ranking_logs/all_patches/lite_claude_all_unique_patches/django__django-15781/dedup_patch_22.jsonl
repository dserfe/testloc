{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..9b68d3d 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -129,6 +129,26 @@ class DjangoHelpFormatter(HelpFormatter):\n \n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n+        \n+    def _format_text(self, text):\n+        \"\"\"\n+        Format help text to preserve newlines and indentation.\n+        \"\"\"\n+        text = self._whitespace_matcher.sub(' ', text)\n+        # Preserve newlines and indentation in help text\n+        lines = text.splitlines()\n+        if len(lines) <= 1:\n+            return text\n+        # Remove common leading whitespace from every line\n+        margin = None\n+        for line in lines[1:]:\n+            content = line.lstrip()\n+            if content:\n+                indent = len(line) - len(content)\n+                margin = min(margin or indent, indent)\n+        if margin is not None:\n+            lines = [lines[0]] + [line[margin:] for line in lines[1:]]\n+        return '\\n'.join(lines)\n \n \n class OutputWrapper(TextIOBase):\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def _format_text(self, text):\n+        text = self._whitespace_matcher.sub(' ', text)\n+        lines = text.splitlines()\n+        if len(lines) <= 1:\n+            return text\n+        margin = None\n+        for line in lines[1:]:\n+            content = line.lstrip()\n+            if content:\n+                indent = len(line) - len(content)\n+                margin = min(margin or indent, indent)\n+        if margin is not None:\n+            lines = [lines[0]] + [line[margin:] for line in lines[1:]]\n+        return '\\n'.join(lines)", "normalized_occurrence": 1}
