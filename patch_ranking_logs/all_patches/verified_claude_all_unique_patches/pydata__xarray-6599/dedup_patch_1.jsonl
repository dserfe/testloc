{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..1db04e7 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -422,16 +422,17 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     \"\"\"\n     # TODO: make this function dask-compatible?\n     # Set offset to minimum if not given\n-    if offset is None:\n-        if array.dtype.kind in \"Mm\":\n-            offset = _datetime_nanmin(array)\n-        else:\n-            offset = min(array)\n+    if offset is None and array.dtype.kind == \"M\":\n+        offset = _datetime_nanmin(array)\n+    elif offset is None and array.dtype.kind != \"m\":\n+        offset = min(array)\n \n     # Compute timedelta object.\n     # For np.datetime64, this can silently yield garbage due to overflow.\n     # One option is to enforce 1970-01-01 as the universal offset.\n-    array = array - offset\n+    # Don't subtract offset for timedelta64 (kind='m') as they're already relative values\n+    if array.dtype.kind != \"m\":\n+        array = array - offset\n \n     # Scalar is converted to 0d-array\n     if not hasattr(array, \"dtype\"):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..ce29d64 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -226,12 +226,12 @@ def _datetime_nanmin(array):\n         array = np.array(array)\n     return array.astype(dtype)\n def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n-    if offset is None:\n-        if array.dtype.kind in 'Mm':\n-            offset = _datetime_nanmin(array)\n-        else:\n-            offset = min(array)\n-    array = array - offset\n+    if offset is None and array.dtype.kind == 'M':\n+        offset = _datetime_nanmin(array)\n+    elif offset is None and array.dtype.kind != 'm':\n+        offset = min(array)\n+    if array.dtype.kind != 'm':\n+        array = array - offset\n     if not hasattr(array, 'dtype'):\n         array = np.array(array)\n     if array.dtype.kind in 'O':\n", "normalized_occurrence": 1}
