{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..3e97550 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import S\n from sympy.core.relational import Eq, Ne\n from sympy.logic.boolalg import BooleanFunction\n@@ -45,4 +46,13 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        from sympy.sets import EmptySet, FiniteSet\n+        result = self.eval(*self.args)\n+        if result is S.true:\n+            return FiniteSet(self.args[0])\n+        elif result is S.false:\n+            return EmptySet\n+        else:\n+            # If we can't evaluate to a concrete boolean,\n+            # return an empty set to be consistent with other boolean expressions\n+            return EmptySet\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..4aa18e7 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,11 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        from sympy.sets import EmptySet, FiniteSet\n+        result = self.eval(*self.args)\n+        if result is S.true:\n+            return FiniteSet(self.args[0])\n+        elif result is S.false:\n+            return EmptySet\n+        else:\n+            return EmptySet\n\\ No newline at end of file\n", "normalized_occurrence": 1}
