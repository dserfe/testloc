{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..08a7257 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,7 +408,40 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple) and len(longrepr) == 3:\n+        # This is a tuple with (path, lineno, message)\n+        return {\"type\": \"tuple\", \"data\": longrepr}\n+    elif hasattr(longrepr, 'tojson'):\n+        return {\"type\": \"tojson\", \"data\": longrepr.tojson()}\n+    else:\n+        return {\"type\": \"str\", \"data\": str(longrepr)}\n+\n+def deserialize_longrepr(data):\n+    if data[\"type\"] == \"tuple\":\n+        return tuple(data[\"data\"])\n+    elif data[\"type\"] == \"tojson\":\n+        return ExceptionInfo.from_json(data[\"data\"])\n+    else:\n+        return data[\"data\"]\n+\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        if 'longrepr' in data:\n+            data['longrepr'] = serialize_longrepr(data['longrepr'])\n+        return data\n+\n+def pytest_report_from_serializable(data):\n+    if \"_report_type\" in data:\n+        if 'longrepr' in data:\n+            data['longrepr'] = deserialize_longrepr(data['longrepr'])\n+        if data[\"_report_type\"] == \"TestReport\":\n+            return TestReport._from_json(data)\n+        elif data[\"_report_type\"] == \"CollectReport\":\n+            return CollectReport._from_json(data)\n+        assert False, \"Unknown report_type unserialize data: {}\".format(data[\"_report_type\"])\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..6aa638e 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,7 +205,36 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, tuple) and len(longrepr) == 3:\n+        return {'type': 'tuple', 'data': longrepr}\n+    elif hasattr(longrepr, 'tojson'):\n+        return {'type': 'tojson', 'data': longrepr.tojson()}\n+    else:\n+        return {'type': 'str', 'data': str(longrepr)}\n+def deserialize_longrepr(data):\n+    if data['type'] == 'tuple':\n+        return tuple(data['data'])\n+    elif data['type'] == 'tojson':\n+        return ExceptionInfo.from_json(data['data'])\n+    else:\n+        return data['data']\n def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        if 'longrepr' in data:\n+            data['longrepr'] = serialize_longrepr(data['longrepr'])\n+        return data\n+def pytest_report_from_serializable(data):\n+    if '_report_type' in data:\n+        if 'longrepr' in data:\n+            data['longrepr'] = deserialize_longrepr(data['longrepr'])\n+        if data['_report_type'] == 'TestReport':\n+            return TestReport._from_json(data)\n+        elif data['_report_type'] == 'CollectReport':\n+            return CollectReport._from_json(data)\n+        assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n", "normalized_occurrence": 1}
