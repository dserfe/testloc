{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..9615a92 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,27 +162,43 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            def serialize_traceback(exc_info):\n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+            # Handle main exception\n+            result = serialize_traceback(rep.longrepr)\n+            result[\"sections\"] = rep.longrepr.sections\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+            # Handle chained exceptions\n+            chain = []\n+            current = rep.longrepr\n+            while hasattr(current, 'chain'):\n+                for item in current.chain:\n+                    chain.append(serialize_traceback(item))\n+                current = item\n+\n+            if chain:\n+                result[\"chain\"] = chain\n+\n+            return result\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n@@ -250,10 +266,23 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+                def deserialize_traceback(tb_dict):\n+                    return ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**tb_dict[\"reprtraceback\"]),\n+                        reprcrash=ReprFileLocation(**tb_dict[\"reprcrash\"]),\n+                    )\n+\n+                exception_info = deserialize_traceback({\n+                    \"reprtraceback\": reprtraceback,\n+                    \"reprcrash\": reprcrash,\n+                })\n+\n+                # Handle chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for item in reportdict[\"longrepr\"][\"chain\"]:\n+                        chain.append(deserialize_traceback(item))\n+                    exception_info.chain = chain\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..bf59cfa 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,29 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def serialize_traceback(exc_info):\n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback['reprentries'] = new_entries\n+                return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback}\n+            result = serialize_traceback(rep.longrepr)\n+            result['sections'] = rep.longrepr.sections\n+            chain = []\n+            current = rep.longrepr\n+            while hasattr(current, 'chain'):\n+                for item in current.chain:\n+                    chain.append(serialize_traceback(item))\n+                current = item\n+            if chain:\n+                result['chain'] = chain\n+            return result\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -130,7 +142,14 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                def deserialize_traceback(tb_dict):\n+                    return ReprExceptionInfo(reprtraceback=ReprTraceback(**tb_dict['reprtraceback']), reprcrash=ReprFileLocation(**tb_dict['reprcrash']))\n+                exception_info = deserialize_traceback({'reprtraceback': reprtraceback, 'reprcrash': reprcrash})\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for item in reportdict['longrepr']['chain']:\n+                        chain.append(deserialize_traceback(item))\n+                    exception_info.chain = chain\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 1}
