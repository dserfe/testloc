{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10466", "model_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex c138802..74512a6 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -30,10 +30,9 @@ logger = logging.getLogger(__name__)\n \n class Message:\n     \"\"\"An entry of translatable message.\"\"\"\n-    def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n-        self.text = text\n-        self.locations = locations\n-        self.uuids = uuids\n+    def unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        \"\"\"Remove duplicate locations.\"\"\"\n+        return list(set(locations))\n \n \n class Catalog:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex 906ebf1..76257b6 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -22,10 +22,8 @@ from sphinx.util.tags import Tags\n from sphinx.util.template import SphinxRenderer\n logger = logging.getLogger(__name__)\n class Message:\n-    def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n-        self.text = text\n-        self.locations = locations\n-        self.uuids = uuids\n+    def unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        return list(set(locations))\n class Catalog:\n     def __init__(self) -> None:\n         self.messages: List[str] = []\n", "normalized_occurrence": 1}
