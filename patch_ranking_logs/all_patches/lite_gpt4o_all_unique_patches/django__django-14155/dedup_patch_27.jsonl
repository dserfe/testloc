{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..b39f8ed 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -31,6 +32,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if isinstance(func, functools.partial):\n+            self.orig_func = func.func\n+            self.orig_args = func.args\n+            self.orig_kwargs = func.keywords\n+        else:\n+            self.orig_func = func\n+            self.orig_args = ()\n+            self.orig_kwargs = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -50,7 +59,7 @@ class ResolverMatch:\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self.orig_func.__module__ + '.' + self.orig_func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,9 +68,14 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if isinstance(self.func, functools.partial):\n+            func_repr = \"functools.partial(%s, *%s, **%s)\" % (\n+                self._func_path, self.orig_args, self.orig_kwargs,\n+            )\n+        else:\n+            func_repr = self._func_path\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n-            self.app_names, self.namespaces, self.route,\n+            func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route,\n         )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..772d8b4 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -19,6 +20,14 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n+        if isinstance(func, functools.partial):\n+            self.orig_func = func.func\n+            self.orig_args = func.args\n+            self.orig_kwargs = func.keywords\n+        else:\n+            self.orig_func = func\n+            self.orig_args = ()\n+            self.orig_kwargs = {}\n         self.func = func\n         self.args = args\n         self.kwargs = kwargs\n@@ -32,13 +41,17 @@ class ResolverMatch:\n         if not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._func_path = self.orig_func.__module__ + '.' + self.orig_func.__name__\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        if isinstance(self.func, functools.partial):\n+            func_repr = 'functools.partial(%s, *%s, **%s)' % (self._func_path, self.orig_args, self.orig_kwargs)\n+        else:\n+            func_repr = self._func_path\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
