{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..4853f2e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -970,11 +970,27 @@ class RenameIndex(IndexOperation):\n             # Backward operation with unnamed index is a no-op.\n             return\n \n-        self.new_name_lower, self.old_name_lower = (\n-            self.old_name_lower,\n-            self.new_name_lower,\n-        )\n-        self.new_name, self.old_name = self.old_name, self.new_name\n+        if self.old_name.lower() == self.old_name:\n+            # Handle auto-generated index names\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            index = None\n+            for idx in model._meta.indexes:\n+                if idx.name.lower() == self.new_name_lower:\n+                    index = idx\n+                    break\n+            if index is None:\n+                raise ValueError(\"No index named '{}' found.\".format(self.new_name_lower))\n+            \n+            index_name = index.name\n+            schema_editor.rename_index(model, index_name, self.old_name)\n+        else:\n+            self.new_name_lower, self.old_name_lower = (\n+                self.old_name_lower,\n+                self.new_name_lower,\n+            )\n+            self.new_name, self.old_name = self.old_name, self.new_name\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            schema_editor.rename_index(model, self.new_name, self.old_name)\n \n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..8268dba 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -437,8 +437,22 @@ class RenameIndex(IndexOperation):\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             return\n-        self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n-        self.new_name, self.old_name = (self.old_name, self.new_name)\n+        if self.old_name.lower() == self.old_name:\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            index = None\n+            for idx in model._meta.indexes:\n+                if idx.name.lower() == self.new_name_lower:\n+                    index = idx\n+                    break\n+            if index is None:\n+                raise ValueError(\"No index named '{}' found.\".format(self.new_name_lower))\n+            index_name = index.name\n+            schema_editor.rename_index(model, index_name, self.old_name)\n+        else:\n+            self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n+            self.new_name, self.old_name = (self.old_name, self.new_name)\n+            model = to_state.apps.get_model(app_label, self.model_name)\n+            schema_editor.rename_index(model, self.new_name, self.old_name)\n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n", "normalized_occurrence": 1}
