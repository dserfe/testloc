{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10673", "model_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 52ac0d3..958b35f 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -169,11 +169,13 @@ class TocTree:\n                         message = __('toctree contains reference to excluded document %r')\n                     elif not included(self.env.doc2path(ref, False)):\n                         message = __('toctree contains reference to non-included document %r')\n+                    elif ref in ('genindex', 'modindex', 'search'):\n+                        # special handling for genindex, modindex, and search\n+                        item = nodes.list_item('', nodes.reference('', '', internal=True, refuri=ref, *[nodes.Text(ref)]))\n+                        toc = nodes.bullet_list('', item)\n                     else:\n                         message = __('toctree contains reference to nonexisting document %r')\n-\n-                    logger.warning(message, ref, location=toctreenode)\n-                else:\n+                        logger.warning(message, ref, location=toctreenode)\n                     # if titles_only is given, only keep the main title and\n                     # sub-toctrees\n                     if titles_only:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py\nindex 07fcee3..fd5544a 100644\n--- a/sphinx/environment/adapters/toctree.py\n+++ b/sphinx/environment/adapters/toctree.py\n@@ -90,10 +90,12 @@ class TocTree:\n                         message = __('toctree contains reference to excluded document %r')\n                     elif not included(self.env.doc2path(ref, False)):\n                         message = __('toctree contains reference to non-included document %r')\n+                    elif ref in ('genindex', 'modindex', 'search'):\n+                        item = nodes.list_item('', nodes.reference('', '', *[nodes.Text(ref)], internal=True, refuri=ref))\n+                        toc = nodes.bullet_list('', item)\n                     else:\n                         message = __('toctree contains reference to nonexisting document %r')\n-                    logger.warning(message, ref, location=toctreenode)\n-                else:\n+                        logger.warning(message, ref, location=toctreenode)\n                     if titles_only:\n                         children = cast(Iterable[nodes.Element], toc)\n                         for toplevel in children:\n", "normalized_occurrence": 1}
