{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7a50c86 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -972,23 +972,61 @@ warn_explicit(\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + \"=\" + expl)\n-            else:  # **args have `arg` keywords with an .arg of None\n-                arg_expls.append(\"**\" + expl)\n-\n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        \n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            if len(call.args) != 1:\n+                raise TypeError(f\"{call.func.id}() takes exactly one argument ({len(call.args)} given)\")\n+            iterable = call.args[0]\n+            \n+            # Create loop to unroll the iterable\n+            loop_var = self.variable()\n+            item_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(loop_var, ast.Store())], iterable))\n+            loop_body = []\n+            loop_expl = []\n+\n+            for_stmt = ast.For(\n+                target=ast.Name(id=item_var, ctx=ast.Store()),\n+                iter=ast.Name(id=loop_var, ctx=ast.Load()),\n+                body=loop_body,\n+                orelse=[]\n+            )\n+            self.statements.append(for_stmt)\n+            \n+            # Visit the predicate test for each item in the iterable\n+            self.statements = loop_body\n+            res, expl = self.visit(ast.Call(\n+                func=call.args[0].elts[0], \n+                args=[ast.Name(id=item_var, ctx=ast.Load())], \n+                keywords=[]\n+            ))\n+            loop_expl.append(expl)\n+            self.statements = self.statements[:-1]  # Remove the last If() statement\n+\n+            # Generate the explanation for the unrolled iterable\n+            expl = f\"{call.func.id}({iterable}[{item_var}] for {item_var} in {loop_var})\"\n+            explanation = f\"{call.func.id}({', '.join(loop_expl)})\"\n+            res = ast_Call(ast.Name(id=\"list\", ctx=ast.Load()), [ast.Name(id=loop_var, ctx=ast.Load())], [])\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = f\"{res_expl}\\n{{{res_expl} = {explanation}\\n}}\"\n+        else:\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + \"=\" + expl)\n+                else:  # **args have `arg` keywords with an .arg of None\n+                    arg_expls.append(\"**\" + expl)\n+\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n     def visit_Starred(self, starred):\n@@ -1081,4 +1119,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..d2157e8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -548,22 +548,43 @@ class AssertionRewriter(ast.NodeVisitor):\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n-        for arg in call.args:\n-            res, expl = self.visit(arg)\n-            arg_expls.append(expl)\n-            new_args.append(res)\n-        for keyword in call.keywords:\n-            res, expl = self.visit(keyword.value)\n-            new_kwargs.append(ast.keyword(keyword.arg, res))\n-            if keyword.arg:\n-                arg_expls.append(keyword.arg + '=' + expl)\n-            else:\n-                arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            if len(call.args) != 1:\n+                raise TypeError(f'{call.func.id}() takes exactly one argument ({len(call.args)} given)')\n+            iterable = call.args[0]\n+            loop_var = self.variable()\n+            item_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(loop_var, ast.Store())], iterable))\n+            loop_body = []\n+            loop_expl = []\n+            for_stmt = ast.For(target=ast.Name(id=item_var, ctx=ast.Store()), iter=ast.Name(id=loop_var, ctx=ast.Load()), body=loop_body, orelse=[])\n+            self.statements.append(for_stmt)\n+            self.statements = loop_body\n+            res, expl = self.visit(ast.Call(func=call.args[0].elts[0], args=[ast.Name(id=item_var, ctx=ast.Load())], keywords=[]))\n+            loop_expl.append(expl)\n+            self.statements = self.statements[:-1]\n+            expl = f'{call.func.id}({iterable}[{item_var}] for {item_var} in {loop_var})'\n+            explanation = f\"{call.func.id}({', '.join(loop_expl)})\"\n+            res = ast_Call(ast.Name(id='list', ctx=ast.Load()), [ast.Name(id=loop_var, ctx=ast.Load())], [])\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = f'{res_expl}\\n{{{res_expl} = {explanation}\\n}}'\n+        else:\n+            for arg in call.args:\n+                res, expl = self.visit(arg)\n+                arg_expls.append(expl)\n+                new_args.append(res)\n+            for keyword in call.keywords:\n+                res, expl = self.visit(keyword.value)\n+                new_kwargs.append(ast.keyword(keyword.arg, res))\n+                if keyword.arg:\n+                    arg_expls.append(keyword.arg + '=' + expl)\n+                else:\n+                    arg_expls.append('**' + expl)\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n         return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n", "normalized_occurrence": 1}
