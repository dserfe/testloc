{"model_name_or_path": "agentless", "instance_id": "django__django-15347", "model_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 8744ce5..6e9e453 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n@@ -35,7 +35,10 @@ class MessageDecoder(json.JSONDecoder):\n             if obj[0] == MessageEncoder.message_key:\n                 if obj[1]:\n                     obj[3] = mark_safe(obj[3])\n-                return Message(*obj[2:])\n+                # Ensure extra_tags is correctly set even if it's an empty string\n+                level, message, message_text, *extra = obj[2:]\n+                extra_tags = extra[0] if extra else ''\n+                return Message(level, message_text, extra_tags=extra_tags)\n             return [self.process_messages(item) for item in obj]\n         if isinstance(obj, dict):\n             return {key: self.process_messages(value)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 20c9f68..5fa08a1 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -11,7 +11,7 @@ class MessageEncoder(json.JSONEncoder):\n         if isinstance(obj, Message):\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n@@ -21,7 +21,9 @@ class MessageDecoder(json.JSONDecoder):\n             if obj[0] == MessageEncoder.message_key:\n                 if obj[1]:\n                     obj[3] = mark_safe(obj[3])\n-                return Message(*obj[2:])\n+                level, message, message_text, *extra = obj[2:]\n+                extra_tags = extra[0] if extra else ''\n+                return Message(level, message_text, extra_tags=extra_tags)\n             return [self.process_messages(item) for item in obj]\n         if isinstance(obj, dict):\n             return {key: self.process_messages(value) for key, value in obj.items()}\n", "normalized_occurrence": 1}
