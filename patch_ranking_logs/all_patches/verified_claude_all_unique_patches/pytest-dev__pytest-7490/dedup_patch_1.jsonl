{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 1ea0522..3447548 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -281,6 +281,11 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+            \n+        # Reset xfail evaluation state when adding markers\n+        if hasattr(self, \"stash\"):\n+            from _pytest.skipping import xfailed_key\n+            self.stash[xfailed_key] = None\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 8a79019..22a72cd 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -213,6 +213,9 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        if hasattr(self, 'stash'):\n+            from _pytest.skipping import xfailed_key\n+            self.stash[xfailed_key] = None\n \n     def iter_markers(self, name: Optional[str]=None) -> Iterator[Mark]:\n         \"\"\"\n", "normalized_occurrence": 1}
