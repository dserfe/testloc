{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..eaa2018 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -294,6 +294,8 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, (list, tuple)):\n+            return 'JSON_EXTRACT(%s, %%s) IN (%s)' % (lhs, ', '.join(['%s'] * len(self.rhs))), tuple(params) + (json_path,) + tuple(self.rhs)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n@@ -317,6 +319,8 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, (list, tuple)):\n+            return 'JSON_EXTRACT(%s, %%s) IN (%s)' % (lhs, ', '.join(['%s'] * len(self.rhs))), tuple(params) + (json_path,) + tuple(self.rhs)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..63b7915 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -202,6 +202,8 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, (list, tuple)):\n+            return ('JSON_EXTRACT(%s, %%s) IN (%s)' % (lhs, ', '.join(['%s'] * len(self.rhs))), tuple(params) + (json_path,) + tuple(self.rhs))\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n@@ -219,6 +221,8 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if isinstance(self.rhs, (list, tuple)):\n+            return ('JSON_EXTRACT(%s, %%s) IN (%s)' % (lhs, ', '.join(['%s'] * len(self.rhs))), tuple(params) + (json_path,) + tuple(self.rhs))\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n", "normalized_occurrence": 1}
