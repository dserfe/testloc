{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..f651c59 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -255,6 +255,20 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n+        # Handle terms of form c + b**k where c is independent of k\n+        if term.is_Add and len(term.args) == 2:\n+            args = list(term.args)\n+            if any(not arg.has(k) for arg in args):\n+                # Find which term has k and which doesn't\n+                k_term = next(arg for arg in args if arg.has(k))\n+                c = next(arg for arg in args if not arg.has(k))\n+                # Check if k_term is of form b**k\n+                if k_term.is_Pow and k_term.args[1] == k:\n+                    b = k_term.args[0]\n+                    # For product(c + b**k, (k, a, n)) where c is independent of k\n+                    # Use direct computation\n+                    return Mul(*[c + b**i for i in range(a, n + 1)])\n+\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..b00c80d 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,6 +61,14 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        if term.is_Add and len(term.args) == 2:\n+            args = list(term.args)\n+            if any((not arg.has(k) for arg in args)):\n+                k_term = next((arg for arg in args if arg.has(k)))\n+                c = next((arg for arg in args if not arg.has(k)))\n+                if k_term.is_Pow and k_term.args[1] == k:\n+                    b = k_term.args[0]\n+                    return Mul(*[c + b ** i for i in range(a, n + 1)])\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n", "normalized_occurrence": 1}
