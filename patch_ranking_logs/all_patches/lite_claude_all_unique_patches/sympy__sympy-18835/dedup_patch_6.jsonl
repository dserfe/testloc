{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18835", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 57371bf..3ffd3bc 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2091,6 +2091,9 @@ def uniq(seq, result=None):\n     parameter ``result``  is used internally; it is not necessary to pass\n     anything for this.\n \n+    Raises a RuntimeError if the input sequence size changes during iteration,\n+    similar to Python's behavior with dictionaries and sets.\n+\n     Examples\n     ========\n \n@@ -2109,7 +2112,18 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        # Record initial sequence length if possible\n+        try:\n+            initial_len = len(seq)\n+            check_len = True\n+        except (TypeError, AttributeError):\n+            check_len = False\n+            \n         for i, s in enumerate(seq):\n+            # Check if sequence length changed\n+            if check_len and len(seq) != initial_len:\n+                raise RuntimeError('sequence changed size during iteration')\n+                \n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex 032766e..53da498 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -733,7 +733,14 @@ def uniq(seq, result=None):\n     try:\n         seen = set()\n         result = result or []\n+        try:\n+            initial_len = len(seq)\n+            check_len = True\n+        except (TypeError, AttributeError):\n+            check_len = False\n         for i, s in enumerate(seq):\n+            if check_len and len(seq) != initial_len:\n+                raise RuntimeError('sequence changed size during iteration')\n             if not (s in seen or seen.add(s)):\n                 yield s\n     except TypeError:\n", "normalized_occurrence": 2}
