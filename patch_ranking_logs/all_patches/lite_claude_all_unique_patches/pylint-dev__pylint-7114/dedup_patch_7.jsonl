{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..45361e0 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -24,21 +24,24 @@ def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> li\n \n \n def get_python_path(filepath: str) -> str:\n-    \"\"\"TODO This get the python path with the (bad) assumption that there is always\n-    an __init__.py.\n-\n-    This is not true since python 3.3 and is causing problem.\n+    \"\"\"Get the Python path to use for a file/directory.\n+    \n+    This handles both traditional packages with __init__.py and namespace packages\n+    without __init__.py (PEP 420).\n     \"\"\"\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n     if not os.path.isdir(dirname):\n         dirname = os.path.dirname(dirname)\n-    while True:\n-        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n-            return dirname\n-        old_dirname = dirname\n-        dirname = os.path.dirname(dirname)\n-        if old_dirname == dirname:\n-            return os.getcwd()\n+    # For namespace packages or single module directories, return the parent directory\n+    if os.path.isdir(dirname) and not os.path.isfile(os.path.join(dirname, \"__init__.py\")):\n+        return os.path.dirname(dirname)\n+    # For regular packages with __init__.py, find the package root\n+    while dirname != os.path.dirname(dirname):  # Stop at filesystem root\n+        parent = os.path.dirname(dirname)\n+        if not os.path.isfile(os.path.join(parent, \"__init__.py\")):\n+            return parent\n+        dirname = parent\n+    return os.getcwd()\n \n \n def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..112990b 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -13,13 +13,14 @@ def get_python_path(filepath: str) -> str:\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n     if not os.path.isdir(dirname):\n         dirname = os.path.dirname(dirname)\n-    while True:\n-        if not os.path.exists(os.path.join(dirname, '__init__.py')):\n-            return dirname\n-        old_dirname = dirname\n-        dirname = os.path.dirname(dirname)\n-        if old_dirname == dirname:\n-            return os.getcwd()\n+    if os.path.isdir(dirname) and (not os.path.isfile(os.path.join(dirname, '__init__.py'))):\n+        return os.path.dirname(dirname)\n+    while dirname != os.path.dirname(dirname):\n+        parent = os.path.dirname(dirname)\n+        if not os.path.isfile(os.path.join(parent, '__init__.py')):\n+            return parent\n+        dirname = parent\n+    return os.getcwd()\n def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n     return any((file_pattern.match(element) for file_pattern in ignore_list_re))\n def _is_ignored_file(element: str, ignore_list: list[str], ignore_list_re: list[Pattern[str]], ignore_list_paths_re: list[Pattern[str]]) -> bool:\n", "normalized_occurrence": 1}
