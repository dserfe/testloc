{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..07cd373 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -112,6 +112,29 @@ def _regex_transformer(value: str) -> Pattern[str]:\n \n \n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    \"\"\"Transforms a comma separated list of regular expressions.\n+    \n+    This function now handles escaped commas within the regular expressions.\n+    \"\"\"\n+    patterns: list[Pattern[str]] = []\n+    regex_parts = []\n+    escape = False\n+    \n+    for char in value:\n+        if char == '\\\\' and not escape:\n+            escape = True\n+            regex_parts.append(char)\n+        elif char == ',' and not escape:\n+            patterns.append(_regex_transformer(''.join(regex_parts)))\n+            regex_parts = []\n+        else:\n+            escape = False\n+            regex_parts.append(char)\n+    \n+    if regex_parts:\n+        patterns.append(_regex_transformer(''.join(regex_parts)))\n+        \n+    return patterns\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..43926b3 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -54,6 +54,22 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         msg = f'Error in provided regular expression: {value} beginning at index {e.pos}: {e.msg}'\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n+    patterns: list[Pattern[str]] = []\n+    regex_parts = []\n+    escape = False\n+    for char in value:\n+        if char == '\\\\' and (not escape):\n+            escape = True\n+            regex_parts.append(char)\n+        elif char == ',' and (not escape):\n+            patterns.append(_regex_transformer(''.join(regex_parts)))\n+            regex_parts = []\n+        else:\n+            escape = False\n+            regex_parts.append(char)\n+    if regex_parts:\n+        patterns.append(_regex_transformer(''.join(regex_parts)))\n+    return patterns\n     patterns: list[Pattern[str]] = []\n     for pattern in _csv_transformer(value):\n         patterns.append(_regex_transformer(pattern))\n", "normalized_occurrence": 1}
