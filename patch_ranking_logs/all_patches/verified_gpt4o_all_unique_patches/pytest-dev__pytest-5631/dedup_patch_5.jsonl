{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5631", "model_patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex c84507d..516d5d0 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -67,8 +67,10 @@ def num_mock_patch_args(function):\n     mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n+        import numpy as np\n         return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n+            [p for p in patchings if not p.attribute_name and\n+             (p.new in sentinels or (isinstance(p.new, np.ndarray) and p.new.tolist() in [s.tolist() for s in sentinels if isinstance(s, np.ndarray)]))]\n         )\n     return len(patchings)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex cdde629..d607ae6 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -36,7 +36,8 @@ def num_mock_patch_args(function):\n     mock_modules = [sys.modules.get('mock'), sys.modules.get('unittest.mock')]\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n-        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])\n+        import numpy as np\n+        return len([p for p in patchings if not p.attribute_name and (p.new in sentinels or (isinstance(p.new, np.ndarray) and p.new.tolist() in [s.tolist() for s in sentinels if isinstance(s, np.ndarray)]))])\n     return len(patchings)\n def getfuncargnames(function, is_method=False, cls=None):\n     try:\n", "normalized_occurrence": 1}
