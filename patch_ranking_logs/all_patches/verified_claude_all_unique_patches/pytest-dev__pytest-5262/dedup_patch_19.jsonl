{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..aaa6b5f 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -432,12 +432,13 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, \"replace\")\n-        elif _PY3:\n-            raise TypeError(\n-                \"write() argument must be str, not {}\".format(type(obj).__name__)\n-            )\n         self.buffer.write(obj)\n \n+    @property\n+    def mode(self):\n+        \"\"\"Return the mode without the binary flag.\"\"\"\n+        return self.buffer.mode.replace('b', '')\n+\n     def writelines(self, linelist):\n         data = \"\".join(linelist)\n         self.write(data)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..ce170ec 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -253,9 +253,10 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n-        elif _PY3:\n-            raise TypeError('write() argument must be str, not {}'.format(type(obj).__name__))\n         self.buffer.write(obj)\n+    @property\n+    def mode(self):\n+        return self.buffer.mode.replace('b', '')\n     def writelines(self, linelist):\n         data = ''.join(linelist)\n         self.write(data)\n", "normalized_occurrence": 1}
