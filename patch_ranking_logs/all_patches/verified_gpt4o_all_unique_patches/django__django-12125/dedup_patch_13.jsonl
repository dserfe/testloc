{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..46b3bd0 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -91,12 +91,24 @@ class DeconstructableSerializer(BaseSerializer):\n     @staticmethod\n     def _serialize_path(path):\n         module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n-            imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n-        else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+        try:\n+            cls = getattr(import_module(module), name)\n+            if isinstance(cls, type) and cls.__module__ == module:\n+                return \"%s.%s\" % (module, name), {\"import %s\" % module}\n+        except (ImportError, AttributeError):\n+            pass\n+\n+        # Fallback if the above fails\n+        parts = path.split(\".\")\n+        for i in range(len(parts) - 1, 0, -1):\n+            try:\n+                cls = getattr(import_module(\".\".join(parts[:i])), parts[i])\n+                if isinstance(cls, type):\n+                    return \"%s.%s\" % (\".\".join(parts[:i]), \".\".join(parts[i:])), {\"import %s\" % \".\".join(parts[:i])}\n+            except (ImportError, AttributeError):\n+                continue\n+                \n+        return path, {\"import %s\" % module}\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..6e35f4c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -69,12 +69,21 @@ class DeconstructableSerializer(BaseSerializer):\n     @staticmethod\n     def _serialize_path(path):\n         module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n-            imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n-        else:\n-            imports = {'import %s' % module}\n-            name = path\n+        try:\n+            cls = getattr(import_module(module), name)\n+            if isinstance(cls, type) and cls.__module__ == module:\n+                return ('%s.%s' % (module, name), {'import %s' % module})\n+        except (ImportError, AttributeError):\n+            pass\n+        parts = path.split('.')\n+        for i in range(len(parts) - 1, 0, -1):\n+            try:\n+                cls = getattr(import_module('.'.join(parts[:i])), parts[i])\n+                if isinstance(cls, type):\n+                    return ('%s.%s' % ('.'.join(parts[:i]), '.'.join(parts[i:])), {'import %s' % '.'.join(parts[:i])})\n+            except (ImportError, AttributeError):\n+                continue\n+        return (path, {'import %s' % module})\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
