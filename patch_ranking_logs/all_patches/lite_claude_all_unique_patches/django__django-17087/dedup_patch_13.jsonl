{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..64b1636 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -105,8 +105,19 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n+            # Handle nested classes by preserving the full path after the module\n+            module_parts = path.split('.')\n+            for i in range(len(module_parts) - 1):\n+                potential_module = '.'.join(module_parts[:i + 1])\n+                try:\n+                    __import__(potential_module)\n+                    module = potential_module\n+                    name = '.'.join(module_parts[i + 1:])\n+                    break\n+                except ImportError:\n+                    continue\n             imports = {\"import %s\" % module}\n-            name = path\n+            name = path if '.' not in name else name\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..cbd9cdf 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -75,8 +75,18 @@ class DeconstructableSerializer(BaseSerializer):\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n+            module_parts = path.split('.')\n+            for i in range(len(module_parts) - 1):\n+                potential_module = '.'.join(module_parts[:i + 1])\n+                try:\n+                    __import__(potential_module)\n+                    module = potential_module\n+                    name = '.'.join(module_parts[i + 1:])\n+                    break\n+                except ImportError:\n+                    continue\n             imports = {'import %s' % module}\n-            name = path\n+            name = path if '.' not in name else name\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
