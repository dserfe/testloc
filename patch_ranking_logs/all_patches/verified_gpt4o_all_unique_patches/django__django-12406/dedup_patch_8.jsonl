{"model_name_or_path": "agentless", "instance_id": "django__django-12406", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 3670478..ddf57ec 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1187,8 +1187,10 @@ class ModelChoiceField(ChoiceField):\n                  **kwargs):\n         if required and (initial is not None):\n             self.empty_label = None\n-        else:\n+        elif widget is None or not issubclass(widget.__class__, RadioSelect):\n             self.empty_label = empty_label\n+        else:\n+            self.empty_label = None\n \n         # Call Field instead of ChoiceField __init__() because we don't need\n         # ChoiceField.__init__().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7c6133f..25fc119 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -615,8 +615,10 @@ class ModelChoiceField(ChoiceField):\n     def __init__(self, queryset, *, empty_label='---------', required=True, widget=None, label=None, initial=None, help_text='', to_field_name=None, limit_choices_to=None, **kwargs):\n         if required and initial is not None:\n             self.empty_label = None\n-        else:\n+        elif widget is None or not issubclass(widget.__class__, RadioSelect):\n             self.empty_label = empty_label\n+        else:\n+            self.empty_label = None\n         Field.__init__(self, required=required, widget=widget, label=label, initial=initial, help_text=help_text, **kwargs)\n         self.queryset = queryset\n         self.limit_choices_to = limit_choices_to\n", "normalized_occurrence": 1}
