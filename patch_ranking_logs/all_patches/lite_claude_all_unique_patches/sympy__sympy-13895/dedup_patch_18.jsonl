{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..a5c6ab7 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -298,6 +298,9 @@ class Pow(Expr):\n                             return S.NegativeOne**other*Pow(-b, e*other)\n                         if b.is_real is False:\n                             return Pow(b.conjugate()/Abs(b)**2, other)\n+                # handle negative base special case\n+                if b.is_negative and not e.is_integer:\n+                    return None  # Let the expression remain unsimplified\n                 elif e.is_even:\n                     if b.is_real:\n                         b = abs(b)\n@@ -1581,4 +1584,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..29d7c4f 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -151,6 +151,8 @@ class Pow(Expr):\n                             return S.NegativeOne ** other * Pow(-b, e * other)\n                         if b.is_real is False:\n                             return Pow(b.conjugate() / Abs(b) ** 2, other)\n+                if b.is_negative and (not e.is_integer):\n+                    return None\n                 elif e.is_even:\n                     if b.is_real:\n                         b = abs(b)\n", "normalized_occurrence": 1}
