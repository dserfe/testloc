{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..9c094a9 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -68,6 +68,9 @@ pairindextypes = {\n     'builtin':   _('built-in function'),\n }\n \n+import sys\n+import importlib\n+\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str),\n                                          ('node_id', str),\n                                          ('objtype', str)])\n@@ -1377,6 +1380,18 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n \n         return s in typing.__all__  # type: ignore\n \n+    def is_stdlib_type(name: str) -> bool:\n+        \"\"\"Check if the type is from Python's standard library.\"\"\"\n+        if '.' not in name:\n+            return False\n+        \n+        module_name = name.split('.')[0]\n+        try:\n+            module = importlib.import_module(module_name)\n+            return getattr(module, '__file__', '').startswith(sys.prefix)\n+        except ImportError:\n+            return False\n+\n     if node.get('refdomain') != 'py':\n         return None\n     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':\n@@ -1389,6 +1404,9 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         elif istyping(reftarget):\n             # typing class\n             return contnode\n+        elif is_stdlib_type(reftarget):\n+            # standard library type\n+            return contnode\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..a66ab9b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -32,6 +32,8 @@ if False:\n logger = logging.getLogger(__name__)\n py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\\w+)  \\\\s*             # thing name\\n          (?: \\\\(\\\\s*(.*)\\\\s*\\\\)     # optional: arguments\\n           (?:\\\\s* -> \\\\s* (.*))?  #           return annotation\\n          )? $                   # and nothing more\\n          ', re.VERBOSE)\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n+import sys\n+import importlib\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n@@ -837,6 +839,15 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n         return s in typing.__all__\n+    def is_stdlib_type(name: str) -> bool:\n+        if '.' not in name:\n+            return False\n+        module_name = name.split('.')[0]\n+        try:\n+            module = importlib.import_module(module_name)\n+            return getattr(module, '__file__', '').startswith(sys.prefix)\n+        except ImportError:\n+            return False\n     if node.get('refdomain') != 'py':\n         return None\n     elif node.get('reftype') in ('class', 'obj') and node.get('reftarget') == 'None':\n@@ -847,6 +858,8 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        elif is_stdlib_type(reftarget):\n+            return contnode\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
