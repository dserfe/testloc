{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..dbd4ca7 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -919,12 +919,7 @@ class Model(metaclass=ModelBase):\n                 obj = getattr(self, field.name, None)\n                 if not obj:\n                     continue\n-                # A pk may have been assigned manually to a model instance not\n-                # saved to the database (or auto-generated in a case like\n-                # UUIDField), but we allow the save to proceed and rely on the\n-                # database to raise an IntegrityError if applicable. If\n-                # constraints aren't supported by the database, there's the\n-                # unavoidable risk of data corruption.\n+                # If the primary key is not set, raise an error to prevent data loss.\n                 if obj.pk is None:\n                     # Remove the object from a related instance cache.\n                     if not field.remote_field.multiple:\n@@ -933,12 +928,10 @@ class Model(metaclass=ModelBase):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n+                # Ensure the related object's primary key is used in the ForeignKey field.\n+                elif getattr(self, field.attname) is None or getattr(self, field.attname) != obj.pk:\n                     setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n+                # If the relationship's pk/to_field was changed, clear the cached relationship.\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..ebc67ce 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -493,7 +493,7 @@ class Model(metaclass=ModelBase):\n                     if not field.remote_field.multiple:\n                         field.remote_field.delete_cached_value(obj)\n                     raise ValueError(\"%s() prohibited to prevent data loss due to unsaved related object '%s'.\" % (operation_name, field.name))\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) is None or getattr(self, field.attname) != obj.pk:\n                     setattr(self, field.attname, obj.pk)\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n", "normalized_occurrence": 2}
