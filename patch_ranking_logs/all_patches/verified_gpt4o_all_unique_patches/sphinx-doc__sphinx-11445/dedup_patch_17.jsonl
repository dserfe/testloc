{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11445", "model_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 83e696f..71fe5b0 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -90,11 +90,21 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n-\n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+        # insert prolog (after docinfo if exists and ensure not to disrupt directives)\n+        prolog_lines = prolog.splitlines()\n+        insert_pos = pos\n+        # Check for domain directives or similar at the start\n+        if content and content[0].startswith(':'):\n+            # Find the first blank line after the directive\n+            for idx, line in enumerate(content):\n+                if line.strip() == '':\n+                    insert_pos = idx + 1\n+                    break\n+\n+        for lineno, line in enumerate(prolog_lines):\n+            content.insert(insert_pos + lineno, line, '<rst_prolog>', lineno)\n+\n+        content.insert(insert_pos + len(prolog_lines), '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 911aea2..48fb911 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -60,9 +60,16 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n         if pos > 0:\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+        prolog_lines = prolog.splitlines()\n+        insert_pos = pos\n+        if content and content[0].startswith(':'):\n+            for idx, line in enumerate(content):\n+                if line.strip() == '':\n+                    insert_pos = idx + 1\n+                    break\n+        for lineno, line in enumerate(prolog_lines):\n+            content.insert(insert_pos + lineno, line, '<rst_prolog>', lineno)\n+        content.insert(insert_pos + len(prolog_lines), '', '<generated>', 0)\n def append_epilog(content: StringList, epilog: str) -> None:\n     if epilog:\n         if len(content) > 0:\n", "normalized_occurrence": 1}
