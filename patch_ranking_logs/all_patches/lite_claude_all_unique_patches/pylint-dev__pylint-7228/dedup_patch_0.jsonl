{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7228", "model_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex 515b944..012c122 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -11,6 +11,7 @@ import re\n import warnings\n from re import Pattern\n \n+import re\n from pylint import utils\n \n \n@@ -23,7 +24,17 @@ def _csv_validator(_, name, value):\n def _regexp_validator(_, name, value):\n     if hasattr(value, \"pattern\"):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value, re.UNICODE)\n+    except re.error as exc:\n+        # If the pattern contains \\p{} Unicode properties, suggest using regex module\n+        if r'\\p{' in value:\n+            raise ValueError(\n+                f\"The pattern '{value}' contains Unicode properties (\\\\p{{}}), which are not \"\n+                \"supported by Python's re module. Consider using simpler Unicode ranges or \"\n+                \"installing the 'regex' module which supports Unicode properties.\"\n+            ) from exc\n+        raise\n \n \n # pylint: disable=unused-argument\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/option.py b/pylint/config/option.py\nindex bdedcd7..bba2211 100644\n--- a/pylint/config/option.py\n+++ b/pylint/config/option.py\n@@ -5,13 +5,19 @@ import pathlib\n import re\n import warnings\n from re import Pattern\n+import re\n from pylint import utils\n def _csv_validator(_, name, value):\n     return utils._check_csv(value)\n def _regexp_validator(_, name, value):\n     if hasattr(value, 'pattern'):\n         return value\n-    return re.compile(value)\n+    try:\n+        return re.compile(value, re.UNICODE)\n+    except re.error as exc:\n+        if '\\\\p{' in value:\n+            raise ValueError(f\"The pattern '{value}' contains Unicode properties (\\\\p{{}}), which are not supported by Python's re module. Consider using simpler Unicode ranges or installing the 'regex' module which supports Unicode properties.\") from exc\n+        raise\n def _regexp_csv_validator(_, name, value):\n     return [_regexp_validator(_, name, val) for val in _csv_validator(_, name, value)]\n def _regexp_paths_csv_validator(_, name: str, value: str | list[Pattern[str]]) -> list[Pattern[str]]:\n", "normalized_occurrence": 1}
