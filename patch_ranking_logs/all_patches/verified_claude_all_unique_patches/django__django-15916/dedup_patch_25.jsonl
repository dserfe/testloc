{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..be6da0b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -257,13 +257,20 @@ class ModelFormOptions:\n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n+        # Check for formfield_callback in current class Meta first\n+        current_meta = attrs.get('Meta')\n+        formfield_callback = getattr(current_meta, 'formfield_callback', None) if current_meta else None\n \n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # If not found in current Meta, check base classes\n+        if formfield_callback is None:\n+            for b in bases:\n+                if hasattr(b, \"Meta\") and hasattr(b.Meta, \"formfield_callback\"):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n+        \n+        # Finally check class-level attribute\n+        if formfield_callback is None:\n+            formfield_callback = attrs.pop(\"formfield_callback\", None)\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n@@ -636,7 +643,11 @@ def modelform_factory(\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n+    \n+    # Only set formfield_callback as class attribute if it's not already in Meta\n+    if formfield_callback and not hasattr(Meta, 'formfield_callback'):\n+        form_class_attrs[\"formfield_callback\"] = formfield_callback\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..c8c3665 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -109,12 +109,15 @@ class ModelFormOptions:\n         self.field_classes = getattr(options, 'field_classes', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n-        base_formfield_callback = None\n-        for b in bases:\n-            if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n-                base_formfield_callback = b.Meta.formfield_callback\n-                break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        current_meta = attrs.get('Meta')\n+        formfield_callback = getattr(current_meta, 'formfield_callback', None) if current_meta else None\n+        if formfield_callback is None:\n+            for b in bases:\n+                if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n+                    formfield_callback = b.Meta.formfield_callback\n+                    break\n+        if formfield_callback is None:\n+            formfield_callback = attrs.pop('formfield_callback', None)\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n@@ -267,7 +270,9 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     class_name = model.__name__ + 'Form'\n-    form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}\n+    form_class_attrs = {'Meta': Meta}\n+    if formfield_callback and (not hasattr(Meta, 'formfield_callback')):\n+        form_class_attrs['formfield_callback'] = formfield_callback\n     if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:\n         raise ImproperlyConfigured(\"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     return type(form)(class_name, (form,), form_class_attrs)\n", "normalized_occurrence": 1}
