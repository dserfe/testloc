{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex eeb18de..4de3128 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1586,10 +1586,25 @@ default: %(va)s\n                       width_ratios=width_ratios,\n                       height_ratios=height_ratios)\n \n+        # Create subfigures array\n         sfarr = np.empty((nrows, ncols), dtype=object)\n+        \n+        # Get the figure-relative positions from gridspec\n+        cell_positions = []\n+        for j in range(nrows):\n+            for i in range(ncols):\n+                cell = gs[j, i]\n+                bbox = cell.get_position(self)\n+                cell_positions.append(bbox)\n+        \n+        # Create subfigures using the gridspec positions\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                pos = cell_positions[j * ncols + i]\n+                sfarr[j, i] = self.add_subfigure(\n+                    gs[j, i],\n+                    bbox=pos,\n+                    **kwargs)\n \n         if squeeze:\n             # Discarding unneeded dimensions that equal 1.  If we only have one\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 19ec421..f050d2b 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -412,9 +412,16 @@ class FigureBase(Artist):\n     def subfigures(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)\n         sfarr = np.empty((nrows, ncols), dtype=object)\n+        cell_positions = []\n+        for j in range(nrows):\n+            for i in range(ncols):\n+                cell = gs[j, i]\n+                bbox = cell.get_position(self)\n+                cell_positions.append(bbox)\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                pos = cell_positions[j * ncols + i]\n+                sfarr[j, i] = self.add_subfigure(gs[j, i], bbox=pos, **kwargs)\n         if squeeze:\n             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n         else:\n", "normalized_occurrence": 1}
