{"model_name_or_path": "agentless", "instance_id": "django__django-15503", "model_patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex d5dff6f..b22b05d 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -291,7 +291,10 @@ class DatabaseOperations(BaseDatabaseOperations):\n         if timezone.is_aware(value):\n             raise ValueError(\"SQLite backend does not support timezone-aware times.\")\n \n-        return str(value)\n+        if isinstance(value, dict):\n+            # Ensure numerical keys are correctly interpreted as strings\n+            value = {str(k): v for k, v in value.items()}\n+        return json.dumps(value) if isinstance(value, (dict, list)) else str(value)\n \n     def get_db_converters(self, expression):\n         converters = super().get_db_converters(expression)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py\nindex 042ffd6..f8f05a0 100644\n--- a/django/db/backends/sqlite3/operations.py\n+++ b/django/db/backends/sqlite3/operations.py\n@@ -134,7 +134,9 @@ class DatabaseOperations(BaseDatabaseOperations):\n             return value\n         if timezone.is_aware(value):\n             raise ValueError('SQLite backend does not support timezone-aware times.')\n-        return str(value)\n+        if isinstance(value, dict):\n+            value = {str(k): v for k, v in value.items()}\n+        return json.dumps(value) if isinstance(value, (dict, list)) else str(value)\n     def get_db_converters(self, expression):\n         converters = super().get_db_converters(expression)\n         internal_type = expression.output_field.get_internal_type()\n", "normalized_occurrence": 1}
