{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..9119ad4 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -221,8 +221,26 @@ class Point(GeometryEntity):\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n \n-    def __contains__(self, item):\n-        return item in self.args\n+    def __rmul__(self, other):\n+        \"\"\"Multiply other with self by scaling self's coordinates by the scalar other.\n+\n+        Notes\n+        =====\n+\n+        >>> from sympy.geometry.point import Point\n+\n+        >>> Point(1, 2) * 2\n+        Point2D(2, 4)\n+\n+        >>> 2 * Point(1, 2)\n+        Point2D(2, 4)\n+\n+        \"\"\"\n+        other = sympify(other)\n+        if not other.is_number:\n+            raise TypeError('Cannot multiply Point by non-scalar')\n+        coords = [simplify(other * x) for x in self.args]\n+        return Point(coords, evaluate=False)\n \n     def __div__(self, divisor):\n         \"\"\"Divide point's coordinates by a factor.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..96646d6 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -68,8 +68,12 @@ class Point(GeometryEntity):\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n-    def __contains__(self, item):\n-        return item in self.args\n+    def __rmul__(self, other):\n+        other = sympify(other)\n+        if not other.is_number:\n+            raise TypeError('Cannot multiply Point by non-scalar')\n+        coords = [simplify(other * x) for x in self.args]\n+        return Point(coords, evaluate=False)\n     def __div__(self, divisor):\n         divisor = sympify(divisor)\n         coords = [simplify(x / divisor) for x in self.args]\n", "normalized_occurrence": 1}
