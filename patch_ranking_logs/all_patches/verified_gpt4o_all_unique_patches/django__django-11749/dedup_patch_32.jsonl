{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..c5d7012 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,7 +130,19 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n+    # Include required arguments from mutually exclusive groups in parse_args.\n+    def get_required_args_from_groups(parser):\n+        required_args = []\n+        for group in parser._mutually_exclusive_groups:\n+            if group.required:\n+                for action in group._group_actions:\n+                    if action.dest in options:\n+                        required_args.append('{}={}'.format(min(action.option_strings), arg_options[action.dest]))\n+                        break\n+        return required_args\n+\n+    parse_args += get_required_args_from_groups(parser)\n+    # Any required arguments which are passed in via **options must also be passed\n     # to parse_args().\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..ce4adb3 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,6 +53,16 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n+    def get_required_args_from_groups(parser):\n+        required_args = []\n+        for group in parser._mutually_exclusive_groups:\n+            if group.required:\n+                for action in group._group_actions:\n+                    if action.dest in options:\n+                        required_args.append('{}={}'.format(min(action.option_strings), arg_options[action.dest]))\n+                        break\n+        return required_args\n+    parse_args += get_required_args_from_groups(parser)\n     parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "normalized_occurrence": 1}
