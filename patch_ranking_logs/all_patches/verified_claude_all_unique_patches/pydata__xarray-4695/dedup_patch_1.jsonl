{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/coordinates.py b/xarray/core/coordinates.py\nindex 2f85617..40a1af1 100644\n--- a/xarray/core/coordinates.py\n+++ b/xarray/core/coordinates.py\n@@ -388,11 +388,20 @@ def remap_label_indexers(\n     from .dataarray import DataArray\n \n     indexers = either_dict_or_kwargs(indexers, indexers_kwargs, \"remap_label_indexers\")\n+    \n+    # Separate 'method' from dimension indexers if it's actually a dimension name\n+    method_dim_value = None\n+    if 'method' in indexers and method is None:\n+        method_dim_value = indexers['method']\n \n     v_indexers = {\n         k: v.variable.data if isinstance(v, DataArray) else v\n         for k, v in indexers.items()\n     }\n+    \n+    # Restore 'method' dimension value if it was present\n+    if method_dim_value is not None:\n+        v_indexers['method'] = method_dim_value\n \n     pos_indexers, new_indexes = indexing.remap_label_indexers(\n         obj, v_indexers, method=method, tolerance=tolerance\n@@ -406,4 +415,4 @@ def remap_label_indexers(\n             # ensures alignments\n             coords = {k: var for k, var in v._coords.items() if k not in indexers}\n             pos_indexers[k] = DataArray(pos_indexers[k], coords=coords, dims=v.dims)\n-    return pos_indexers, new_indexes\n+    return pos_indexers, new_indexes\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/coordinates.py b/xarray/core/coordinates.py\nindex 2a217ed..9138622 100644\n--- a/xarray/core/coordinates.py\n+++ b/xarray/core/coordinates.py\n@@ -185,7 +185,12 @@ def assert_coordinate_consistent(obj: Union['DataArray', 'Dataset'], coords: Map\n def remap_label_indexers(obj: Union['DataArray', 'Dataset'], indexers: Mapping[Hashable, Any]=None, method: str=None, tolerance=None, **indexers_kwargs: Any) -> Tuple[dict, dict]:\n     from .dataarray import DataArray\n     indexers = either_dict_or_kwargs(indexers, indexers_kwargs, 'remap_label_indexers')\n+    method_dim_value = None\n+    if 'method' in indexers and method is None:\n+        method_dim_value = indexers['method']\n     v_indexers = {k: v.variable.data if isinstance(v, DataArray) else v for k, v in indexers.items()}\n+    if method_dim_value is not None:\n+        v_indexers['method'] = method_dim_value\n     pos_indexers, new_indexes = indexing.remap_label_indexers(obj, v_indexers, method=method, tolerance=tolerance)\n     for k, v in indexers.items():\n         if isinstance(v, Variable):\n", "normalized_occurrence": 1}
