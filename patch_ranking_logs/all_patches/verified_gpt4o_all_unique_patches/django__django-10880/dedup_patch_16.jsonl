{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..8edd40a 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -107,6 +107,20 @@ class Count(Aggregate):\n     output_field = IntegerField()\n     allow_distinct = True\n \n+    def __init__(self, expression, distinct=False, filter=None, **extra):\n+        if expression == '*':\n+            expression = Star()\n+        if isinstance(expression, Star) and filter is not None:\n+            raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        super().__init__(expression, distinct=distinct, filter=filter, **extra)\n+\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT %s)' % self.source_expressions[0]\n+        else:\n+            self.function = 'COUNT(%s)' % self.source_expressions[0]\n+        return super().as_sql(compiler, connection)\n+\n     def __init__(self, expression, filter=None, **extra):\n         if expression == '*':\n             expression = Star()\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n+    def __init__(self, expression, distinct=False, filter=None, **extra):\n+        if expression == '*':\n+            expression = Star()\n+        if isinstance(expression, Star) and filter is not None:\n+            raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        super().__init__(expression, distinct=distinct, filter=filter, **extra)\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT %s)' % self.source_expressions[0]\n+        else:\n+            self.function = 'COUNT(%s)' % self.source_expressions[0]\n+        return super().as_sql(compiler, connection)", "normalized_occurrence": 1}
