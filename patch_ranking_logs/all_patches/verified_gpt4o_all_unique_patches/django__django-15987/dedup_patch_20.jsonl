{"model_name_or_path": "agentless", "instance_id": "django__django-15987", "model_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex c98b0b6..e84ba8f 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -325,6 +325,7 @@ class Command(BaseCommand):\n         targets = self.get_targets(fixture_name, ser_fmt, cmp_fmt)\n         fixture_files = []\n         for fixture_dir in fixture_dirs:\n+            fixture_dir = str(fixture_dir)\n             if self.verbosity >= 2:\n                 self.stdout.write(\"Checking %s for fixtures...\" % humanize(fixture_dir))\n             fixture_files_in_dir = self.find_fixture_files_in_dir(\n@@ -361,12 +362,12 @@ class Command(BaseCommand):\n         current directory.\n         \"\"\"\n         dirs = []\n-        fixture_dirs = settings.FIXTURE_DIRS\n+        fixture_dirs = list(map(str, settings.FIXTURE_DIRS))\n         if len(fixture_dirs) != len(set(fixture_dirs)):\n             raise ImproperlyConfigured(\"settings.FIXTURE_DIRS contains duplicates.\")\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n-            app_dir = os.path.join(app_config.path, \"fixtures\")\n+            app_dir = str(os.path.join(app_config.path, \"fixtures\"))\n             if app_dir in fixture_dirs:\n                 raise ImproperlyConfigured(\n                     \"'%s' is a default fixture directory for the '%s' app \"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py\nindex 1c3856a..60e2945 100644\n--- a/django/core/management/commands/loaddata.py\n+++ b/django/core/management/commands/loaddata.py\n@@ -173,6 +173,7 @@ class Command(BaseCommand):\n         targets = self.get_targets(fixture_name, ser_fmt, cmp_fmt)\n         fixture_files = []\n         for fixture_dir in fixture_dirs:\n+            fixture_dir = str(fixture_dir)\n             if self.verbosity >= 2:\n                 self.stdout.write('Checking %s for fixtures...' % humanize(fixture_dir))\n             fixture_files_in_dir = self.find_fixture_files_in_dir(fixture_dir, fixture_name, targets)\n@@ -187,12 +188,12 @@ class Command(BaseCommand):\n     @cached_property\n     def fixture_dirs(self):\n         dirs = []\n-        fixture_dirs = settings.FIXTURE_DIRS\n+        fixture_dirs = list(map(str, settings.FIXTURE_DIRS))\n         if len(fixture_dirs) != len(set(fixture_dirs)):\n             raise ImproperlyConfigured('settings.FIXTURE_DIRS contains duplicates.')\n         for app_config in apps.get_app_configs():\n             app_label = app_config.label\n-            app_dir = os.path.join(app_config.path, 'fixtures')\n+            app_dir = str(os.path.join(app_config.path, 'fixtures'))\n             if app_dir in fixture_dirs:\n                 raise ImproperlyConfigured(\"'%s' is a default fixture directory for the '%s' app and cannot be listed in settings.FIXTURE_DIRS.\" % (app_dir, app_label))\n             if self.app_label and app_label != self.app_label:\n", "normalized_occurrence": 1}
