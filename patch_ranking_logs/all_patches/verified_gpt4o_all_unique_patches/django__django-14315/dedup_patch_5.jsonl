{"model_name_or_path": "agentless", "instance_id": "django__django-14315", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 8b69ea1..832c489 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -1,3 +1,4 @@\n+\n import signal\n \n from django.db.backends.base.client import BaseDatabaseClient\n@@ -58,7 +59,9 @@ class DatabaseClient(BaseDatabaseClient):\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            super().runshell(parameters)\n+            args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n+            env = {**os.environ, **env}\n+            self.subprocess_run(args, env=env)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 21cffbe..74d8416 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -48,6 +48,8 @@ class DatabaseClient(BaseDatabaseClient):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n         try:\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n-            super().runshell(parameters)\n+            args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)\n+            env = {**os.environ, **env}\n+            self.subprocess_run(args, env=env)\n         finally:\n             signal.signal(signal.SIGINT, sigint_handler)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
