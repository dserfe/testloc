{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..0c2b8d0 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -971,13 +971,15 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     ValueError\n         If the parameter's value violates the given bounds.\n     \"\"\"\n-\n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n+    # Try to convert to the target type if needed\n+    try:\n+        x = target_type(x)\n+    except (TypeError, ValueError):\n+        raise TypeError('`{}` must be convertible to {}, but got type {}.'\n                         .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..2e4f5f7 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,8 +281,10 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    try:\n+        x = target_type(x)\n+    except (TypeError, ValueError):\n+        raise TypeError('`{}` must be convertible to {}, but got type {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n     if max_val is not None and x > max_val:\n", "normalized_occurrence": 1}
