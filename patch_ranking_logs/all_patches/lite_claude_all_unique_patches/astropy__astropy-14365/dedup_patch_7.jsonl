{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 92431f5..c7dd610 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -62,13 +62,16 @@ def _line_type(line, delimiter=None):\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n     _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n \n+    # Compile command regex with case-insensitive flag\n+    _command_pattern = re.compile(_command_re, re.IGNORECASE)\n+\n     sep = delimiter\n     if delimiter is None:\n         sep = r\"\\s+\"\n     _new_re = rf\"NO({sep}NO)+\"\n     _data_re = rf\"({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)\"\n-    _type_re = rf\"^\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n-    _line_type_re = re.compile(_type_re)\n+    _type_re = rf\"^\\s*((?P<command>{_command_pattern.pattern})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\s*(\\!(?P<comment>.*))?\\s*$\"\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return \"comment\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 78a945e..95a5a19 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -9,13 +9,14 @@ from . import basic, core\n def _line_type(line, delimiter=None):\n     _decimal_re = '[+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?'\n     _command_re = 'READ [TS]ERR(\\\\s+[0-9]+)+'\n+    _command_pattern = re.compile(_command_re, re.IGNORECASE)\n     sep = delimiter\n     if delimiter is None:\n         sep = '\\\\s+'\n     _new_re = f'NO({sep}NO)+'\n     _data_re = f'({_decimal_re}|NO|[-+]?nan)({sep}({_decimal_re}|NO|[-+]?nan))*)'\n-    _type_re = f'^\\\\s*((?P<command>{_command_re})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\\\s*(\\\\!(?P<comment>.*))?\\\\s*$'\n-    _line_type_re = re.compile(_type_re)\n+    _type_re = f'^\\\\s*((?P<command>{_command_pattern.pattern})|(?P<new>{_new_re})|(?P<data>{_data_re})?\\\\s*(\\\\!(?P<comment>.*))?\\\\s*$'\n+    _line_type_re = re.compile(_type_re, re.IGNORECASE)\n     line = line.strip()\n     if not line:\n         return 'comment'\n", "normalized_occurrence": 1}
