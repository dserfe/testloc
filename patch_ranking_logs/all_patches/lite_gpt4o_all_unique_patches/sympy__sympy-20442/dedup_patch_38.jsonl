{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..ea18f91 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -105,6 +105,15 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     if depmat is None:\n         return expr\n \n+    from sympy.physics.units.dimensions import Dimension\n+    expr_dim = Dimension(expr)\n+    target_dim = Dimension(1)\n+    for unit in target_units:\n+        target_dim *= Dimension(unit)\n+\n+    if expr_dim != target_dim:\n+        raise ValueError(f\"Cannot convert {expr} to {target_units} due to incompatible dimensions\")\n+\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..f5cf831 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -41,6 +41,13 @@ def convert_to(expr, target_units, unit_system='SI'):\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n+    from sympy.physics.units.dimensions import Dimension\n+    expr_dim = Dimension(expr)\n+    target_dim = Dimension(1)\n+    for unit in target_units:\n+        target_dim *= Dimension(unit)\n+    if expr_dim != target_dim:\n+        raise ValueError(f'Cannot convert {expr} to {target_units} due to incompatible dimensions')\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n def quantity_simplify(expr):\n", "normalized_occurrence": 1}
