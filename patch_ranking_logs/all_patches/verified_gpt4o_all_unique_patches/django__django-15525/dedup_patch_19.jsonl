{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..d6c28c1 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -343,7 +343,19 @@ def build_instance(Model, data, db):\n             )\n         except Model.DoesNotExist:\n             pass\n-    return Model(**data)\n+    instance = Model(**data)\n+    for field in Model._meta.fields:\n+        if field.remote_field and isinstance(field.remote_field, models.ManyToOneRel):\n+            value = getattr(instance, field.attname)\n+            if value is not None:\n+                related_model = field.remote_field.model\n+                if hasattr(related_model._default_manager, \"get_by_natural_key\"):\n+                    try:\n+                        related_instance = related_model._default_manager.db_manager(db).get_by_natural_key(*value)\n+                        setattr(instance, field.attname, related_instance.pk)\n+                    except related_model.DoesNotExist:\n+                        pass\n+    return instance\n \n \n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..013c4b5 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -149,7 +149,19 @@ def build_instance(Model, data, db):\n             data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n         except Model.DoesNotExist:\n             pass\n-    return Model(**data)\n+    instance = Model(**data)\n+    for field in Model._meta.fields:\n+        if field.remote_field and isinstance(field.remote_field, models.ManyToOneRel):\n+            value = getattr(instance, field.attname)\n+            if value is not None:\n+                related_model = field.remote_field.model\n+                if hasattr(related_model._default_manager, 'get_by_natural_key'):\n+                    try:\n+                        related_instance = related_model._default_manager.db_manager(db).get_by_natural_key(*value)\n+                        setattr(instance, field.attname, related_instance.pk)\n+                    except related_model.DoesNotExist:\n+                        pass\n+    return instance\n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n     model = field.remote_field.model\n     if hasattr(model._default_manager, 'get_by_natural_key'):\n", "normalized_occurrence": 1}
