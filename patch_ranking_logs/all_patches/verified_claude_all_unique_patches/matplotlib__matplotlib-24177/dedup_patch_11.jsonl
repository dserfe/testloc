{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..a1826b8 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,7 +6737,7 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n-        if density and not stacked:\n+        if density and not stacked and histtype.startswith('bar'):\n             hist_kwargs['density'] = density\n \n         # List to store all the top coordinates of the histograms\n@@ -6747,7 +6747,9 @@ such objects\n             # this will automatically overwrite bins,\n             # so that each histogram uses the same bins\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n-            tops.append(m)\n+            if density and not stacked and histtype.startswith('step'):\n+                db = np.diff(bins)\n+                m = m / (m.sum() * db)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n         if stacked:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..4c50ea4 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1943,12 +1943,14 @@ class Axes(_AxesBase):\n         else:\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n-        if density and (not stacked):\n+        if density and (not stacked) and histtype.startswith('bar'):\n             hist_kwargs['density'] = density\n         tops = []\n         for i in range(nx):\n             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)\n-            tops.append(m)\n+            if density and (not stacked) and histtype.startswith('step'):\n+                db = np.diff(bins)\n+                m = m / (m.sum() * db)\n         tops = np.array(tops, float)\n         bins = np.array(bins, float)\n         if stacked:\n", "normalized_occurrence": 1}
