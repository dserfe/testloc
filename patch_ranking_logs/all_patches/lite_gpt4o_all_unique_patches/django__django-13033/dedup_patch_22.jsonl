{"model_name_or_path": "agentless", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 13e70df..8a2e34a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -736,15 +736,16 @@ class SQLCompiler:\n             already_seen.add(join_tuple)\n \n             results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias,\n-                                                       order, already_seen))\n-            return results\n+            if field.model != opts.model:\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and not isinstance(item, OrderBy):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias,\n+                                                           order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex d98aa67..76121ce 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -422,14 +422,15 @@ class SQLCompiler:\n                 raise FieldError('Infinite loop caused by ordering.')\n             already_seen.add(join_tuple)\n             results = []\n-            for item in opts.ordering:\n-                if hasattr(item, 'resolve_expression') and (not isinstance(item, OrderBy)):\n-                    item = item.desc() if descending else item.asc()\n-                if isinstance(item, OrderBy):\n-                    results.append((item, False))\n-                    continue\n-                results.extend(self.find_ordering_name(item, opts, alias, order, already_seen))\n-            return results\n+            if field.model != opts.model:\n+                for item in opts.ordering:\n+                    if hasattr(item, 'resolve_expression') and (not isinstance(item, OrderBy)):\n+                        item = item.desc() if descending else item.asc()\n+                    if isinstance(item, OrderBy):\n+                        results.append((item, False))\n+                        continue\n+                    results.extend(self.find_ordering_name(item, opts, alias, order, already_seen))\n+                return results\n         targets, alias, _ = self.query.trim_joins(targets, joins, path)\n         return [(OrderBy(transform_function(t, alias), descending=descending), False) for t in targets]\n     def _setup_joins(self, pieces, opts, alias):\n", "normalized_occurrence": 1}
