{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex f9408ce..37600b5 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -169,6 +169,7 @@ class Attribute(NamedTuple):\n     name: str\n     directly_defined: bool\n     value: Any\n+    context: str\n \n \n def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n@@ -185,13 +186,15 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n     if isenumclass(subject):\n         for name, value in subject.__members__.items():\n             if name not in members:\n-                members[name] = Attribute(name, True, value)\n+                context = f\"{subject.__module__}.{subject.__name__}\"\n+                members[name] = Attribute(name, True, value, context)\n \n         superclass = subject.__mro__[1]\n         for name in obj_dict:\n             if name not in superclass.__dict__:\n                 value = safe_getattr(subject, name)\n-                members[name] = Attribute(name, True, value)\n+                context = f\"{subject.__module__}.{subject.__name__}\"\n+                members[name] = Attribute(name, True, value, context)\n \n     # members in __slots__\n     try:\n@@ -200,7 +203,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             from sphinx.ext.autodoc import SLOTSATTR\n \n             for name in __slots__:\n-                members[name] = Attribute(name, True, SLOTSATTR)\n+                context = f\"{subject.__module__}.{subject.__name__}\"\n+                members[name] = Attribute(name, True, SLOTSATTR, context)\n     except (AttributeError, TypeError, ValueError):\n         pass\n \n@@ -211,7 +215,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                context = f\"{subject.__module__}.{subject.__name__}\"\n+                members[name] = Attribute(name, directly_defined, value, context)\n         except AttributeError:\n             continue\n \n@@ -221,7 +226,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n                 if name and name not in members:\n-                    members[name] = Attribute(name, i == 0, INSTANCEATTR)\n+                    context = f\"{cls.__module__}.{cls.__name__}\"\n+                    members[name] = Attribute(name, i == 0, INSTANCEATTR, context)\n         except AttributeError:\n             pass\n \n@@ -230,7 +236,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         namespace = '.'.join(objpath)\n         for (ns, name) in analyzer.find_attr_docs():\n             if namespace == ns and name not in members:\n-                members[name] = Attribute(name, True, INSTANCEATTR)\n+                context = f\"{subject.__module__}.{subject.__name__}\"\n+                members[name] = Attribute(name, True, INSTANCEATTR, context)\n \n     return members\n \n@@ -301,11 +308,12 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n                 analyzer.analyze()\n                 for (ns, name), docstring in analyzer.attr_docs.items():\n                     if ns == qualname and name not in members:\n+                        context = f\"{cls.__module__}.{cls.__name__}\"\n                         members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n-                                                     docstring='\\n'.join(docstring))\n+                                                     docstring='\\n'.join(docstring), context=context)\n             except (AttributeError, PycodeError):\n                 pass\n     except AttributeError:\n         pass\n \n-    return members\n+    return members\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex bf1ee33..5f16fd0 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -111,6 +111,7 @@ class Attribute(NamedTuple):\n     name: str\n     directly_defined: bool\n     value: Any\n+    context: str\n def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, analyzer: ModuleAnalyzer=None) -> Dict[str, Attribute]:\n     from sphinx.ext.autodoc import INSTANCEATTR\n     obj_dict = attrgetter(subject, '__dict__', {})\n@@ -118,18 +119,21 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n     if isenumclass(subject):\n         for name, value in subject.__members__.items():\n             if name not in members:\n-                members[name] = Attribute(name, True, value)\n+                context = f'{subject.__module__}.{subject.__name__}'\n+                members[name] = Attribute(name, True, value, context)\n         superclass = subject.__mro__[1]\n         for name in obj_dict:\n             if name not in superclass.__dict__:\n                 value = safe_getattr(subject, name)\n-                members[name] = Attribute(name, True, value)\n+                context = f'{subject.__module__}.{subject.__name__}'\n+                members[name] = Attribute(name, True, value, context)\n     try:\n         __slots__ = getslots(subject)\n         if __slots__:\n             from sphinx.ext.autodoc import SLOTSATTR\n             for name in __slots__:\n-                members[name] = Attribute(name, True, SLOTSATTR)\n+                context = f'{subject.__module__}.{subject.__name__}'\n+                members[name] = Attribute(name, True, SLOTSATTR, context)\n     except (AttributeError, TypeError, ValueError):\n         pass\n     for name in dir(subject):\n@@ -138,7 +142,8 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                context = f'{subject.__module__}.{subject.__name__}'\n+                members[name] = Attribute(name, directly_defined, value, context)\n         except AttributeError:\n             continue\n     for i, cls in enumerate(getmro(subject)):\n@@ -146,14 +151,16 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n                 if name and name not in members:\n-                    members[name] = Attribute(name, i == 0, INSTANCEATTR)\n+                    context = f'{cls.__module__}.{cls.__name__}'\n+                    members[name] = Attribute(name, i == 0, INSTANCEATTR, context)\n         except AttributeError:\n             pass\n     if analyzer:\n         namespace = '.'.join(objpath)\n         for ns, name in analyzer.find_attr_docs():\n             if namespace == ns and name not in members:\n-                members[name] = Attribute(name, True, INSTANCEATTR)\n+                context = f'{subject.__module__}.{subject.__name__}'\n+                members[name] = Attribute(name, True, INSTANCEATTR, context)\n     return members\n def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) -> Dict[str, 'ObjectMember']:\n     from sphinx.ext.autodoc import INSTANCEATTR, ObjectMember\n@@ -203,7 +210,8 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n                 analyzer.analyze()\n                 for (ns, name), docstring in analyzer.attr_docs.items():\n                     if ns == qualname and name not in members:\n-                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring))\n+                        context = f'{cls.__module__}.{cls.__name__}'\n+                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring), context=context)\n             except (AttributeError, PycodeError):\n                 pass\n     except AttributeError:\n", "normalized_occurrence": 1}
