{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..6efacac 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -96,17 +96,17 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n+            # These expressions should take precedence over other grouping.\n+            group_by_expressions = []\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n+                    group_by_expressions.append(self.query.resolve_ref(expr))\n                 else:\n-                    expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n-        # set to group by. So, we need to add cols in select, order_by, and\n-        # having into the select in any case.\n+                    group_by_expressions.append(expr)\n+            # Add the explicit group by expressions first to ensure they take precedence\n+            expressions.extend(group_by_expressions)\n+        # Note that even if the group_by is set, we might need additional columns\n+        # for aggregation to work properly\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..0aaebff 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -40,11 +40,13 @@ class SQLCompiler:\n             return []\n         expressions = []\n         if self.query.group_by is not True:\n+            group_by_expressions = []\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n+                    group_by_expressions.append(self.query.resolve_ref(expr))\n                 else:\n-                    expressions.append(expr)\n+                    group_by_expressions.append(expr)\n+            expressions.extend(group_by_expressions)\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 1}
