{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..f9cc81b 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -32,10 +32,52 @@ if False:\n     from sphinx.environment import BuildEnvironment\n \n \n+class KbdRole(SphinxRole):\n+    \"\"\"Role for keyboard shortcuts.\"\"\"\n+\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        # Check if it's a compound keystroke by looking for separators not preceded by a backslash\n+        text = self.text.replace('\\\\-', '\\u200b-').replace('\\\\+', '\\u200b+').replace('\\\\^', '\\u200b^')\n+        \n+        if not any(sep in text for sep in ['-', '+', '^']):\n+            # Single key - create a simple literal node\n+            node = nodes.literal(self.rawtext, self.text, role=self.name.lower(), classes=[self.name])\n+            return [node], []\n+\n+        # For compound keystrokes, split on actual separators and create nested structure\n+        parts = []\n+        current = ''\n+        for char in text:\n+            if char in ['-', '+', '^'] and current and current[-1] != '\\u200b':\n+                if current:\n+                    parts.append(current)\n+                parts.append(char)\n+                current = ''\n+            else:\n+                if char == '\\u200b':\n+                    continue\n+                current += char\n+        if current:\n+            parts.append(current)\n+\n+        # Create the outer kbd node\n+        node = nodes.literal(self.rawtext, '', role=self.name.lower(), classes=[self.name])\n+        \n+        # Add each part as a nested node or separator\n+        for i, part in enumerate(parts):\n+            if part in ['-', '+', '^']:\n+                node += nodes.Text(part, part)\n+            else:\n+                subnode = nodes.literal('', part, role=self.name.lower(), classes=[self.name])\n+                node += subnode\n+\n+        return [node], []\n+\n+\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': KbdRole,  # Changed to use the new KbdRole class\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+class KbdRole(SphinxRole):\n+    def run(self) -> Tuple[List[Node], List[system_message]]:\n+        text = self.text.replace('\\\\-', '\\u200b-').replace('\\\\+', '\\u200b+').replace('\\\\^', '\\u200b^')\n+        if not any((sep in text for sep in ['-', '+', '^'])):\n+            node = nodes.literal(self.rawtext, self.text, role=self.name.lower(), classes=[self.name])\n+            return ([node], [])\n+        parts = []\n+        current = ''\n+        for char in text:\n+            if char in ['-', '+', '^'] and current and (current[-1] != '\\u200b'):\n+                if current:\n+                    parts.append(current)\n+                parts.append(char)\n+                current = ''\n+            else:\n+                if char == '\\u200b':\n+                    continue\n+                current += char\n+        if current:\n+            parts.append(current)\n+        node = nodes.literal(self.rawtext, '', role=self.name.lower(), classes=[self.name])\n+        for i, part in enumerate(parts):\n+            if part in ['-', '+', '^']:\n+                node += nodes.Text(part, part)\n+            else:\n+                subnode = nodes.literal('', part, role=self.name.lower(), classes=[self.name])\n+                node += subnode\n+        return ([node], [])\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': KbdRole, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}", "normalized_occurrence": 1}
