{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..34672d0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -111,19 +111,25 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n+    starred_args = ['*args', '**kwargs']\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n \n         arg = arguments.get(name, {})\n+        display_name = name\n+        if name in starred_args:\n+            # Handle *args and **kwargs correctly\n+            display_name = name.replace('*', '')\n+\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n@@ -167,12 +173,19 @@ def augment_descriptions_with_types(\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n+    starred_args = ['*args', '**kwargs']\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+\n+        display_name = name\n+        if name in starred_args:\n+            # Handle *args and **kwargs correctly\n+            display_name = name.replace('*', '')\n+\n+        if display_name in has_description and display_name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..8ff9dd3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -82,18 +82,22 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n+    starred_args = ['*args', '**kwargs']\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n+        display_name = name\n+        if name in starred_args:\n+            display_name = name.replace('*', '')\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_name('', 'param ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n@@ -125,12 +129,16 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             has_description.add('return')\n         elif parts[0] == 'rtype':\n             has_type.add('return')\n+    starred_args = ['*args', '**kwargs']\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+        display_name = name\n+        if name in starred_args:\n+            display_name = name.replace('*', '')\n+        if display_name in has_description and display_name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + display_name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n     if 'return' in annotations:\n", "normalized_occurrence": 1}
