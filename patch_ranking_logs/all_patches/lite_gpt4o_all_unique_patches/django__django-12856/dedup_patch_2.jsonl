{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 714e891..0bdd297 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -90,7 +90,19 @@ class UniqueConstraint(BaseConstraint):\n             raise ValueError(\n                 'UniqueConstraint.deferrable must be a Deferrable instance.'\n             )\n+        from django.db.models.fields import FieldDoesNotExist\n+\n+        model_meta = None\n+        if 'model' in kwargs:\n+            model_meta = kwargs['model']._meta\n+\n         self.fields = tuple(fields)\n+        if model_meta:\n+            for field_name in self.fields:\n+                try:\n+                    model_meta.get_field(field_name)\n+                except FieldDoesNotExist:\n+                    raise ValueError(f\"Field '{field_name}' does not exist in the model.\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n@@ -150,4 +162,4 @@ class UniqueConstraint(BaseConstraint):\n             kwargs['condition'] = self.condition\n         if self.deferrable:\n             kwargs['deferrable'] = self.deferrable\n-        return path, args, kwargs\n+        return path, args, kwargs\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 76d46f4..cfff604 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -61,7 +61,17 @@ class UniqueConstraint(BaseConstraint):\n             raise ValueError('UniqueConstraint with conditions cannot be deferred.')\n         if not isinstance(deferrable, (type(None), Deferrable)):\n             raise ValueError('UniqueConstraint.deferrable must be a Deferrable instance.')\n+        from django.db.models.fields import FieldDoesNotExist\n+        model_meta = None\n+        if 'model' in kwargs:\n+            model_meta = kwargs['model']._meta\n         self.fields = tuple(fields)\n+        if model_meta:\n+            for field_name in self.fields:\n+                try:\n+                    model_meta.get_field(field_name)\n+                except FieldDoesNotExist:\n+                    raise ValueError(f\"Field '{field_name}' does not exist in the model.\")\n         self.condition = condition\n         self.deferrable = deferrable\n         super().__init__(name)\n", "normalized_occurrence": 1}
