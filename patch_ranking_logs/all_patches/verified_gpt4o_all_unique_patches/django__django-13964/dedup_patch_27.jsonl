{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..5338b3a 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -251,10 +251,19 @@ class ForwardManyToOneDescriptor:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n \n+        # Ensure that the primary key of the related object is set before assigning it.\n+        if value.pk is None:\n+            raise ValueError(\n+                'Cannot assign \"%r\": \"%s.%s\" must be a saved instance.' % (\n+                    value,\n+                    instance._meta.object_name,\n+                    self.field.name,\n+                )\n+            )\n+\n         # Set the values of the related field.\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        for lh_field, rh_field in self.field.related_fields:\n+            setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..d5bbf65 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -82,9 +82,10 @@ class ForwardManyToOneDescriptor:\n                 remote_field.set_cached_value(related, None)\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n-        else:\n-            for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        if value.pk is None:\n+            raise ValueError('Cannot assign \"%r\": \"%s.%s\" must be a saved instance.' % (value, instance._meta.object_name, self.field.name))\n+        for lh_field, rh_field in self.field.related_fields:\n+            setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
