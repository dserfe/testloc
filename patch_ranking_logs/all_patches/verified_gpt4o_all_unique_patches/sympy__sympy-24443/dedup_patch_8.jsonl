{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24443", "model_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex 0a601d4..6e81524 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -328,19 +328,21 @@ def _check_homomorphism(domain, codomain, images):\n             # where sym is the generator symbol\n             # and p is the power to which it is\n             # raised while r[i] is a generator\n-            # (not just its symbol) or the inverse of\n-            # a generator - hence the need for\n-            # both indices\n+            # (not just its symbol) - hence the need for\n+            # both indices. Also need to check for inverted generators.\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    if r[i] in gens:\n+                        s = domain.generators[gens.index(r[i])]\n+                    elif r[i]**-1 in gens:\n+                        s = domain.generators[gens.index(r[i]**-1)]**-1\n+                    else:\n+                        s = r[i]\n                 else:\n                     s = r[i]\n                 if s in images:\n                     w = w*images[s]**power\n-                elif s**-1 in images:\n-                    w = w*images[s**-1]**power\n                 i += abs(power)\n                 j += 1\n             return w\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex c2fbe44..7a57c7f 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -202,14 +202,17 @@ def _check_homomorphism(domain, codomain, images):\n             j = 0\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    if r[i] in gens:\n+                        s = domain.generators[gens.index(r[i])]\n+                    elif r[i] ** (-1) in gens:\n+                        s = domain.generators[gens.index(r[i] ** (-1))] ** (-1)\n+                    else:\n+                        s = r[i]\n                 else:\n                     s = r[i]\n                 if s in images:\n                     w = w * images[s] ** power\n-                elif s ** (-1) in images:\n-                    w = w * images[s ** (-1)] ** power\n                 i += abs(power)\n                 j += 1\n             return w\n", "normalized_occurrence": 6}
