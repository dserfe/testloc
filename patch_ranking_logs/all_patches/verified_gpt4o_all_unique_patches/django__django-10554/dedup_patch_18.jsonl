{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..7dbacdd 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,14 +347,14 @@ class SQLCompiler:\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n-                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n-                        break\n+                # Ensure the column is part of the select clause for union queries\n+                if self.query.combinator and self.query.combinator == 'union':\n+                    for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                        if col_alias == src.refs:\n+                            src = src.source\n+                        if src == sel_expr:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..a3b0dc5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -183,14 +183,13 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n-                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n-                        break\n+                if self.query.combinator and self.query.combinator == 'union':\n+                    for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                        if col_alias == src.refs:\n+                            src = src.source\n+                        if src == sel_expr:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n", "normalized_occurrence": 1}
