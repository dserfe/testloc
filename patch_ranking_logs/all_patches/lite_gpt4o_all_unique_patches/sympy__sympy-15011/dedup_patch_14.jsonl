{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..8638826 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -392,8 +392,9 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n         #Try if you can extract symbols from the expression.\n         #Move on if expr.atoms in not implemented.\n         syms = expr.atoms(Symbol)\n-        for term in syms:\n-            namespace.update({str(term): term})\n+        for term in syms.union(set(flatten(args))):\n+            if isinstance(term, Symbol):\n+                namespace.update({str(term): term})\n \n     if printer is None:\n         if _module_present('mpmath', namespaces):\n@@ -620,7 +621,7 @@ def lambdastr(args, expr, printer=None, dummify=False):\n         if isinstance(expr, str):\n             pass\n         else:\n-            expr = sub_expr(expr, dummies_dict)\n+            expr = self._subexpr(expr, dummies_dict)\n     expr = lambdarepr(expr)\n     return \"lambda %s: (%s)\" % (args, expr)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..25a4fa8 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -83,8 +83,9 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n         namespace.update(buf)\n     if hasattr(expr, 'atoms'):\n         syms = expr.atoms(Symbol)\n-        for term in syms:\n-            namespace.update({str(term): term})\n+        for term in syms.union(set(flatten(args))):\n+            if isinstance(term, Symbol):\n+                namespace.update({str(term): term})\n     if printer is None:\n         if _module_present('mpmath', namespaces):\n             from sympy.printing.pycode import MpmathPrinter as Printer\n@@ -231,7 +232,7 @@ def lambdastr(args, expr, printer=None, dummify=False):\n         if isinstance(expr, str):\n             pass\n         else:\n-            expr = sub_expr(expr, dummies_dict)\n+            expr = self._subexpr(expr, dummies_dict)\n     expr = lambdarepr(expr)\n     return 'lambda %s: (%s)' % (args, expr)\n class _EvaluatorPrinter(object):\n", "normalized_occurrence": 1}
