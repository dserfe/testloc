{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..0f26acc 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -407,14 +407,24 @@ class GoogleDocstring:\n         _desc = self._strip_empty(_desc)\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n-        if _name:\n+        \n+        # Split multiple parameter names\n+        names = [n.strip() for n in _name.split(',')] if _name else []\n+        \n+        if names:\n+            # Format multiple names with bold\n+            formatted_names = '**' + '**, **'.join(names) + '**'\n+            \n             if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+                # Handle type information, including optional modifier\n+                type_parts = [t.strip() for t in _type.split(',')]\n+                type_str = ', '.join(type_parts)\n+                if '`' in type_str:\n+                    field = '%s (%s)%s' % (formatted_names, type_str, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s (*%s*)%s' % (formatted_names, type_str, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                field = '%s%s' % (formatted_names, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..8d12766 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -217,14 +217,18 @@ class GoogleDocstring:\n         _desc = self._strip_empty(_desc)\n         has_desc = any(_desc)\n         separator = ' -- ' if has_desc else ''\n-        if _name:\n+        names = [n.strip() for n in _name.split(',')] if _name else []\n+        if names:\n+            formatted_names = '**' + '**, **'.join(names) + '**'\n             if _type:\n-                if '`' in _type:\n-                    field = '**%s** (%s)%s' % (_name, _type, separator)\n+                type_parts = [t.strip() for t in _type.split(',')]\n+                type_str = ', '.join(type_parts)\n+                if '`' in type_str:\n+                    field = '%s (%s)%s' % (formatted_names, type_str, separator)\n                 else:\n-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)\n+                    field = '%s (*%s*)%s' % (formatted_names, type_str, separator)\n             else:\n-                field = '**%s**%s' % (_name, separator)\n+                field = '%s%s' % (formatted_names, separator)\n         elif _type:\n             if '`' in _type:\n                 field = '%s%s' % (_type, separator)\n", "normalized_occurrence": 1}
