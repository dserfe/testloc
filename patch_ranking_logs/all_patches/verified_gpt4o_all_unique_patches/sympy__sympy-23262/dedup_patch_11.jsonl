{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 103a398..3637d6b 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -1,3 +1,4 @@\n+\n import keyword as kw\n import sympy\n from .repr import ReprPrinter\n@@ -40,6 +41,11 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n         raise ValueError('Modules in the expression are unacceptable')\n \n \n+def _print_Tuple(self, expr):\n+    if len(expr) == 1:\n+        return f\"({self._print(expr[0])},)\"\n+    return f\"({', '.join(self._print(arg) for arg in expr)})\"\n+\n def python(expr, **settings):\n     \"\"\"Return Python interpretation of passed expression\n     (can be passed to the exec() function without any modifications)\"\"\"\n@@ -47,6 +53,13 @@ def python(expr, **settings):\n     printer = PythonPrinter(settings)\n     exprp = printer.doprint(expr)\n \n+    result = ''\n+    \"\"\"Return Python interpretation of passed expression\n+    (can be passed to the exec() function without any modifications)\"\"\"\n+\n+    printer = PythonPrinter(settings)\n+    exprp = printer.doprint(expr)\n+\n     result = ''\n     # Returning found symbols and functions\n     renamings = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 79cdace..400c433 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -24,7 +24,14 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n         return StrPrinter._print_Symbol(self, expr)\n     def _print_module(self, expr):\n         raise ValueError('Modules in the expression are unacceptable')\n+def _print_Tuple(self, expr):\n+    if len(expr) == 1:\n+        return f'({self._print(expr[0])},)'\n+    return f\"({', '.join((self._print(arg) for arg in expr))})\"\n def python(expr, **settings):\n+    printer = PythonPrinter(settings)\n+    exprp = printer.doprint(expr)\n+    result = ''\n     printer = PythonPrinter(settings)\n     exprp = printer.doprint(expr)\n     result = ''\n", "normalized_occurrence": 1}
