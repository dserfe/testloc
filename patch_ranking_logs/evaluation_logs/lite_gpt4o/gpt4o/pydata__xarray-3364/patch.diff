diff --git a/xarray/core/concat.py b/xarray/core/concat.py
index 1ac1b8e..04d2d4b 100644
--- a/xarray/core/concat.py
+++ b/xarray/core/concat.py
@@ -1,3 +1,4 @@
+
 import pandas as pd
 
 from . import dtypes, utils
@@ -313,11 +314,8 @@ def _dataset_concat(
 
         for ds in datasets:
             absent_merge_vars = variables_to_merge - set(ds.variables)
-            if absent_merge_vars:
-                raise ValueError(
-                    "variables %r are present in some datasets but not others. "
-                    % absent_merge_vars
-                )
+            for var in absent_merge_vars:
+                to_merge[var].append(Variable((), fill_value))
 
             for var in variables_to_merge:
                 to_merge[var].append(ds.variables[var])
@@ -356,15 +354,17 @@ def _dataset_concat(
 
     # stack up each variable to fill-out the dataset (in order)
     # n.b. this loop preserves variable order, needed for groupby.
-    for k in datasets[0].variables:
-        if k in concat_over:
-            try:
-                vars = ensure_common_dims([ds.variables[k] for ds in datasets])
-            except KeyError:
-                raise ValueError("%r is not present in all datasets." % k)
-            combined = concat_vars(vars, dim, positions)
-            assert isinstance(combined, Variable)
-            result_vars[k] = combined
+    for k in concat_over:
+        vars = []
+        for ds in datasets:
+            if k in ds.variables:
+                vars.append(ds.variables[k])
+            else:
+                vars.append(Variable((), fill_value))
+        vars = ensure_common_dims(vars)
+        combined = concat_vars(vars, dim, positions)
+        assert isinstance(combined, Variable)
+        result_vars[k] = combined
 
     result = Dataset(result_vars, attrs=result_attrs)
     absent_coord_names = coord_names - set(result.variables)
