{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex c64bdfe..8db2c4b 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -3234,7 +3234,7 @@ class Poly(Basic):\n         else:  # pragma: no cover\n             raise OperationNotSupported(f, 'sqf_list')\n \n-        return f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors]\n+        return f.rep.dom.to_sympy(coeff), sorted([(f.per(g), k) for g, k in factors], key=lambda x: x[0])\n \n     def sqf_list_include(f, all=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py\nindex e5130ba..b44d2bc 100644\n--- a/sympy/polys/polytools.py\n+++ b/sympy/polys/polytools.py\n@@ -1017,7 +1017,7 @@ class Poly(Basic):\n             coeff, factors = f.rep.sqf_list(all)\n         else:\n             raise OperationNotSupported(f, 'sqf_list')\n-        return (f.rep.dom.to_sympy(coeff), [(f.per(g), k) for g, k in factors])\n+        return (f.rep.dom.to_sympy(coeff), sorted([(f.per(g), k) for g, k in factors], key=lambda x: x[0]))\n     def sqf_list_include(f, all=False):\n         if hasattr(f.rep, 'sqf_list_include'):\n             factors = f.rep.sqf_list_include(all)\n", "normalized_occurrence": 1}
