{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..4701ab1 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,25 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n+        # Split the path into module and class parts\n+        module_parts = path.split('.')\n+        # Find the module boundary by looking for the models component\n+        for i, part in enumerate(module_parts):\n+            if part == 'models':\n+                module = '.'.join(module_parts[:i+1])\n+                name = '.'.join(module_parts[i+1:])\n+                break\n+        else:\n+            # If no models component found, use last part as name\n+            module = '.'.join(module_parts[:-1])\n+            name = module_parts[-1]\n+        \n         if module == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n             imports = {\"import %s\" % module}\n-            name = path\n+            name = '.'.join([module, name])\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..1464335 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,21 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n+        module_parts = path.split('.')\n+        for i, part in enumerate(module_parts):\n+            if part == 'models':\n+                module = '.'.join(module_parts[:i + 1])\n+                name = '.'.join(module_parts[i + 1:])\n+                break\n+        else:\n+            module = '.'.join(module_parts[:-1])\n+            name = module_parts[-1]\n         if module == 'django.db.models':\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n             imports = {'import %s' % module}\n-            name = path\n+            name = '.'.join([module, name])\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
