{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c0a03a8..0b20be6 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -71,8 +71,10 @@ pairindextypes = {\n def _parse_annotation(annotation: str) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def make_xref(text: str) -> addnodes.pending_xref:\n+        # Use 'obj' role for None since it's not a type but a singleton\n+        reftype = 'obj' if text == 'None' else 'class'\n         return pending_xref('', nodes.Text(text),\n-                            refdomain='py', reftype='class', reftarget=text)\n+                            refdomain='py', reftype=reftype, reftarget=text)\n \n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n", "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 1eef662..b3ef1ac 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -33,7 +33,8 @@ py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n def _parse_annotation(annotation: str) -> List[Node]:\n     def make_xref(text: str) -> addnodes.pending_xref:\n-        return pending_xref('', nodes.Text(text), refdomain='py', reftype='class', reftarget=text)\n+        reftype = 'obj' if text == 'None' else 'class'\n+        return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text)\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n", "normalized_occurrence": 1}
