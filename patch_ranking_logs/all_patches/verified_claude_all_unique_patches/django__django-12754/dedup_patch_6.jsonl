{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12754", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 12ebcde..2e0444b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -563,6 +563,12 @@ class MigrationAutodetector:\n                 if isinstance(base, str) and \".\" in base:\n                     base_app_label, base_name = base.split(\".\", 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    # Check if any fields are being moved from the base class\n+                    base_model = self.from_state.models.get((base_app_label, base_name))\n+                    if base_model:\n+                        for name, field in model_state.fields.items():\n+                            if name in base_model.fields:\n+                                dependencies.append((base_app_label, base_name, name, False))\n             # Depend on the other end of the primary key if it's a relation\n             if primary_key_rel:\n                 dependencies.append((\n@@ -1326,4 +1332,4 @@ class MigrationAutodetector:\n         match = re.match(r'^\\d+', name)\n         if match:\n             return int(match[0])\n-        return None\n+        return None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex f799cd9..3c68fa6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -300,6 +300,11 @@ class MigrationAutodetector:\n                 if isinstance(base, str) and '.' in base:\n                     base_app_label, base_name = base.split('.', 1)\n                     dependencies.append((base_app_label, base_name, None, True))\n+                    base_model = self.from_state.models.get((base_app_label, base_name))\n+                    if base_model:\n+                        for name, field in model_state.fields.items():\n+                            if name in base_model.fields:\n+                                dependencies.append((base_app_label, base_name, name, False))\n             if primary_key_rel:\n                 dependencies.append((primary_key_rel._meta.app_label, primary_key_rel._meta.object_name, None, True))\n             self.add_operation(app_label, operations.CreateModel(name=model_state.name, fields=[d for d in model_state.fields.items() if d[0] not in related_fields], options=model_state.options, bases=model_state.bases, managers=model_state.managers), dependencies=dependencies, beginning=True)\n", "normalized_occurrence": 1}
