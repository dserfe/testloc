{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..1954bfb 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -221,7 +221,11 @@ class Point(GeometryEntity):\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n \n-    def __contains__(self, item):\n+    def __rmul__(self, other):\n+        \"\"\"Multiply the Point by a scalar.\"\"\"\n+        other = sympify(other)\n+        coords = [simplify(other * x) for x in self.args]\n+        return Point(coords, evaluate=False)\n         return item in self.args\n \n     def __div__(self, divisor):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..d2c04bc 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -68,7 +68,10 @@ class Point(GeometryEntity):\n             raise GeometryError(\"Don't know how to add {} and a Point object\".format(other))\n         coords = [simplify(a + b) for a, b in zip(s, o)]\n         return Point(coords, evaluate=False)\n-    def __contains__(self, item):\n+    def __rmul__(self, other):\n+        other = sympify(other)\n+        coords = [simplify(other * x) for x in self.args]\n+        return Point(coords, evaluate=False)\n         return item in self.args\n     def __div__(self, divisor):\n         divisor = sympify(divisor)\n", "normalized_occurrence": 1}
