{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..1a7d809 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -496,6 +496,35 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Special handling for kbd content\n+            text = node.astext()\n+            if text in ['-', '+', '^']:\n+                # Single separator character - treat as literal\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            \n+            # Handle compound keystrokes\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ['-', '+', '^'] and current:\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n+            \n+            # Filter out empty parts and generate nested kbd tags\n+            parts = [p for p in parts if p]\n+            for i, part in enumerate(parts):\n+                if part in ['-', '+', '^']:\n+                    self.body.append(part)\n+                else:\n+                    self.body.append('<kbd class=\"kbd docutils literal notranslate\">%s</kbd>' % part)\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..16a9085 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -447,6 +447,35 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Special handling for kbd content\n+            text = node.astext()\n+            if text in ['-', '+', '^']:\n+                # Single separator character - treat as literal\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            \n+            # Handle compound keystrokes\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ['-', '+', '^'] and current:\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n+            \n+            # Filter out empty parts and generate nested kbd tags\n+            parts = [p for p in parts if p]\n+            for i, part in enumerate(parts):\n+                if part in ['-', '+', '^']:\n+                    self.body.append(part)\n+                else:\n+                    self.body.append('<kbd class=\"kbd docutils literal notranslate\">%s</kbd>' % part)\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..ee6683c 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,28 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if text in ['-', '+', '^']:\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ['-', '+', '^'] and current:\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n+            parts = [p for p in parts if p]\n+            for i, part in enumerate(parts):\n+                if part in ['-', '+', '^']:\n+                    self.body.append(part)\n+                else:\n+                    self.body.append('<kbd class=\"kbd docutils literal notranslate\">%s</kbd>' % part)\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..4426696 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,28 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if text in ['-', '+', '^']:\n+                self.body.append(text)\n+                raise nodes.SkipNode\n+            parts = []\n+            current = []\n+            for char in text:\n+                if char in ['-', '+', '^'] and current:\n+                    parts.append(''.join(current))\n+                    parts.append(char)\n+                    current = []\n+                else:\n+                    current.append(char)\n+            if current:\n+                parts.append(''.join(current))\n+            parts = [p for p in parts if p]\n+            for i, part in enumerate(parts):\n+                if part in ['-', '+', '^']:\n+                    self.body.append(part)\n+                else:\n+                    self.body.append('<kbd class=\"kbd docutils literal notranslate\">%s</kbd>' % part)\n+            raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
