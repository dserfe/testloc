{"model_name_or_path": "agentless", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..ee66ef7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,7 +979,13 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        sql, params = compiler.compile(self.expression)\n+        # Handle special case where the expression is a negated Q object with an empty list\n+        if isinstance(self.expression, Q) and self.expression.negated and len(self.expression.children) == 1:\n+            child = self.expression.children[0]\n+            if isinstance(child, tuple) and child[1] == []:\n+                return \"(1=1)\", []\n+        return sql, params\n \n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 7926e3e..d5e780f 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -590,7 +590,12 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n             return expression.get_group_by_cols(alias=alias)\n         return super().get_group_by_cols()\n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        sql, params = compiler.compile(self.expression)\n+        if isinstance(self.expression, Q) and self.expression.negated and (len(self.expression.children) == 1):\n+            child = self.expression.children[0]\n+            if isinstance(child, tuple) and child[1] == []:\n+                return ('(1=1)', [])\n+        return (sql, params)\n     def __repr__(self):\n         return '{}({})'.format(self.__class__.__name__, self.expression)\n class When(Expression):\n", "normalized_occurrence": 1}
