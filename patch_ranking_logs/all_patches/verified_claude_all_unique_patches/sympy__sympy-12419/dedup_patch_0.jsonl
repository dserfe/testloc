{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 9239abf..4e3f71a 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from __future__ import print_function, division\n \n from sympy.core import S, Add, Expr, Basic\n@@ -22,9 +23,24 @@ def refine(expr, assumptions=True):\n         >>> refine(sqrt(x**2), Q.positive(x))\n         x\n \n+    For matrix expressions, properly handles summation of identity matrices\n+    resulting from orthogonal matrix operations.\n     \"\"\"\n     if not isinstance(expr, Basic):\n         return expr\n+        \n+    # Special handling for matrix summations\n+    from sympy import Sum, MatrixExpr, Identity\n+    if isinstance(expr, Sum) and isinstance(expr.function, MatrixExpr):\n+        matrix = expr.function\n+        if isinstance(matrix, Identity) or (hasattr(matrix, 'is_Identity') and matrix.is_Identity):\n+            # For identity matrix, sum of all elements is n (matrix size)\n+            if len(expr.limits) == 2:  # Double sum over all elements\n+                i, j = expr.variables\n+                n = matrix.shape[0]\n+                if expr.limits[0][1:] == (0, n-1) and expr.limits[1][1:] == (0, n-1):\n+                    return n\n+                \n     if not expr.is_Atom:\n         args = [refine(arg, assumptions) for arg in expr.args]\n         # TODO: this will probably not work with Integral or Polynomial\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex fd84337..a992fbe 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -4,6 +4,15 @@ from sympy.assumptions import Q, ask\n def refine(expr, assumptions=True):\n     if not isinstance(expr, Basic):\n         return expr\n+    from sympy import Sum, MatrixExpr, Identity\n+    if isinstance(expr, Sum) and isinstance(expr.function, MatrixExpr):\n+        matrix = expr.function\n+        if isinstance(matrix, Identity) or (hasattr(matrix, 'is_Identity') and matrix.is_Identity):\n+            if len(expr.limits) == 2:\n+                i, j = expr.variables\n+                n = matrix.shape[0]\n+                if expr.limits[0][1:] == (0, n - 1) and expr.limits[1][1:] == (0, n - 1):\n+                    return n\n     if not expr.is_Atom:\n         args = [refine(arg, assumptions) for arg in expr.args]\n         expr = expr.func(*args)\n", "normalized_occurrence": 1}
