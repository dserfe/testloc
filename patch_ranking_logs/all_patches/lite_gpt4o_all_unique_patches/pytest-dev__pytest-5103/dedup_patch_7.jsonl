{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..3d90334 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -805,7 +805,52 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n         return ast.Name(name, ast.Load())\n \n-    def generic_visit(self, node):\n+    def visit_all_any_call(self, call):\n+        func_name = call.func.id\n+        args = call.args[0]\n+        if isinstance(args, ast.GeneratorExp):\n+            iter_var = args.elt\n+            iter_expr = args.generators[0].iter\n+            target = args.generators[0].target\n+        elif isinstance(args, ast.ListComp):\n+            iter_var = args.elt\n+            iter_expr = args.generators[0].iter\n+            target = args.generators[0].target\n+        else:\n+            return self.generic_visit(call)\n+\n+        test_var = self.assign(ast.Name(func_name, ast.Load()))\n+        iter_var_name = self.variables[-1]\n+\n+        self.push_format_context()\n+        res, expl = self.visit(iter_var)\n+        formatted_expl = self.pop_format_context(ast.Str(expl))\n+\n+        temp_var = self.variable()\n+        temp_var_name = self.variables[-1]\n+\n+        for_node = ast.For(\n+            target=target,\n+            iter=iter_expr,\n+            body=[\n+                ast.Assign([ast.Name(temp_var_name, ast.Store())], res),\n+                ast.If(\n+                    test=ast.UnaryOp(ast.Not(), ast.Name(temp_var_name, ast.Load())),\n+                    body=self.on_failure + [ast.Break()],\n+                    orelse=[],\n+                ),\n+            ],\n+            orelse=[],\n+        )\n+\n+        res = self.assign(ast.Call(\n+            func=ast.Name(func_name, ast.Load()),\n+            args=[ast.List([ast.Name(temp_var_name, ast.Load())], ast.Load())],\n+            keywords=[]\n+        ))\n+\n+        self.statements.append(for_node)\n+        return res, self.explanation_param(formatted_expl)\n         \"\"\"Handle expressions we don't have custom code for.\"\"\"\n         assert isinstance(node, ast.expr)\n         res = self.assign(node)\n@@ -863,11 +908,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         fmt = self.helper(\"_format_explanation\", msg)\n         err_name = ast.Name(\"AssertionError\", ast.Load())\n         exc = ast_Call(err_name, [fmt], [])\n-        if sys.version_info[0] >= 3:\n-            raise_ = ast.Raise(exc, None)\n-        else:\n-            raise_ = ast.Raise(exc, None, None)\n-        body.append(raise_)\n+        for name in self.variables:\n+            body.append(ast.If(ast.UnaryOp(ast.Not(), ast.Name(name, ast.Load())), [raise_], []))\n         # Clear temporary variables by setting them to None.\n         if self.variables:\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n@@ -964,7 +1006,9 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n+    def visit_Call(self, call):\n+        if self.is_builtin_call(call, 'all') or self.is_builtin_call(call, 'any'):\n+            return self.visit_all_any_call(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1125,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..ca3d421 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -443,7 +443,30 @@ class AssertionRewriter(ast.NodeVisitor):\n         name = '@py_format' + str(next(self.variable_counter))\n         self.on_failure.append(ast.Assign([ast.Name(name, ast.Store())], form))\n         return ast.Name(name, ast.Load())\n-    def generic_visit(self, node):\n+    def visit_all_any_call(self, call):\n+        func_name = call.func.id\n+        args = call.args[0]\n+        if isinstance(args, ast.GeneratorExp):\n+            iter_var = args.elt\n+            iter_expr = args.generators[0].iter\n+            target = args.generators[0].target\n+        elif isinstance(args, ast.ListComp):\n+            iter_var = args.elt\n+            iter_expr = args.generators[0].iter\n+            target = args.generators[0].target\n+        else:\n+            return self.generic_visit(call)\n+        test_var = self.assign(ast.Name(func_name, ast.Load()))\n+        iter_var_name = self.variables[-1]\n+        self.push_format_context()\n+        res, expl = self.visit(iter_var)\n+        formatted_expl = self.pop_format_context(ast.Str(expl))\n+        temp_var = self.variable()\n+        temp_var_name = self.variables[-1]\n+        for_node = ast.For(target=target, iter=iter_expr, body=[ast.Assign([ast.Name(temp_var_name, ast.Store())], res), ast.If(test=ast.UnaryOp(ast.Not(), ast.Name(temp_var_name, ast.Load())), body=self.on_failure + [ast.Break()], orelse=[])], orelse=[])\n+        res = self.assign(ast.Call(func=ast.Name(func_name, ast.Load()), args=[ast.List([ast.Name(temp_var_name, ast.Load())], ast.Load())], keywords=[]))\n+        self.statements.append(for_node)\n+        return (res, self.explanation_param(formatted_expl))\n         assert isinstance(node, ast.expr)\n         res = self.assign(node)\n         return (res, self.explanation_param(self.display(res)))\n@@ -475,11 +498,8 @@ class AssertionRewriter(ast.NodeVisitor):\n         fmt = self.helper('_format_explanation', msg)\n         err_name = ast.Name('AssertionError', ast.Load())\n         exc = ast_Call(err_name, [fmt], [])\n-        if sys.version_info[0] >= 3:\n-            raise_ = ast.Raise(exc, None)\n-        else:\n-            raise_ = ast.Raise(exc, None, None)\n-        body.append(raise_)\n+        for name in self.variables:\n+            body.append(ast.If(ast.UnaryOp(ast.Not(), ast.Name(name, ast.Load())), [raise_], []))\n         if self.variables:\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, _NameConstant(None))\n@@ -543,7 +563,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n+    def visit_Call(self, call):\n+        if self.is_builtin_call(call, 'all') or self.is_builtin_call(call, 'any'):\n+            return self.visit_all_any_call(call)\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
