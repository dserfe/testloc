{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..df6e021 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -101,13 +101,16 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n \n-    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    try:\n+        depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n+        if depmat is None:\n+            return expr\n+\n+        expr_scale_factor = get_total_scale_factor(expr)\n+        return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n+    except (ValueError, TypeError):\n         return expr\n \n-    expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n-\n \n def quantity_simplify(expr):\n     \"\"\"Return an equivalent expression in which prefixes are replaced\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..83a8bc6 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -38,11 +38,14 @@ def convert_to(expr, target_units, unit_system='SI'):\n         elif isinstance(expr, Quantity):\n             return unit_system.get_quantity_scale_factor(expr)\n         return expr\n-    depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n-    if depmat is None:\n+    try:\n+        depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n+        if depmat is None:\n+            return expr\n+        expr_scale_factor = get_total_scale_factor(expr)\n+        return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n+    except (ValueError, TypeError):\n         return expr\n-    expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n def quantity_simplify(expr):\n     if expr.is_Atom or not expr.has(Prefix, Quantity):\n         return expr\n", "normalized_occurrence": 2}
