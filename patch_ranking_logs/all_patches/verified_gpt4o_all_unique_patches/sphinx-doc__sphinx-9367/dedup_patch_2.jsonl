{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9367", "model_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 5db5a4a..7ccc1c3 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -214,7 +214,11 @@ class _UnparseVisitor(ast.NodeVisitor):\n \n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n+            # Check for single element tuple and add trailing comma if necessary\n+            if len(node.elts) == 1:\n+                return \"(\" + self.visit(node.elts[0]) + \",)\"\n+            else:\n+                return \"(\" + \", \".join(self.visit(e) for e in node.elts) + \")\"\n         else:\n             return \"()\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/pycode/ast.py b/sphinx/pycode/ast.py\nindex 3caea72..fcdaf68 100644\n--- a/sphinx/pycode/ast.py\n+++ b/sphinx/pycode/ast.py\n@@ -126,7 +126,10 @@ class _UnparseVisitor(ast.NodeVisitor):\n         return '%s %s' % (self.visit(node.op), self.visit(node.operand))\n     def visit_Tuple(self, node: ast.Tuple) -> str:\n         if node.elts:\n-            return '(' + ', '.join((self.visit(e) for e in node.elts)) + ')'\n+            if len(node.elts) == 1:\n+                return '(' + self.visit(node.elts[0]) + ',)'\n+            else:\n+                return '(' + ', '.join((self.visit(e) for e in node.elts)) + ')'\n         else:\n             return '()'\n     if sys.version_info < (3, 8):\n", "normalized_occurrence": 20}
