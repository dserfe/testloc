{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py\nindex 5325bda..4440bdc 100644\n--- a/django/template/loaders/filesystem.py\n+++ b/django/template/loaders/filesystem.py\n@@ -13,7 +13,8 @@ class Loader(BaseLoader):\n \n     def __init__(self, engine, dirs=None):\n         super().__init__(engine)\n-        self.dirs = dirs\n+        # Normalize directory paths at initialization\n+        self.dirs = [os.path.normpath(os.path.abspath(dir)) for dir in dirs] if dirs is not None else dirs\n \n     def get_dirs(self):\n         return self.dirs if self.dirs is not None else self.engine.dirs\n@@ -43,4 +44,4 @@ class Loader(BaseLoader):\n                 name=name,\n                 template_name=template_name,\n                 loader=self,\n-            )\n+            )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/template/loaders/filesystem.py b/django/template/loaders/filesystem.py\nindex f84d4ea..b10aafd 100644\n--- a/django/template/loaders/filesystem.py\n+++ b/django/template/loaders/filesystem.py\n@@ -5,7 +5,7 @@ from .base import Loader as BaseLoader\n class Loader(BaseLoader):\n     def __init__(self, engine, dirs=None):\n         super().__init__(engine)\n-        self.dirs = dirs\n+        self.dirs = [os.path.normpath(os.path.abspath(dir)) for dir in dirs] if dirs is not None else dirs\n     def get_dirs(self):\n         return self.dirs if self.dirs is not None else self.engine.dirs\n     def get_contents(self, origin):\n", "normalized_occurrence": 1}
