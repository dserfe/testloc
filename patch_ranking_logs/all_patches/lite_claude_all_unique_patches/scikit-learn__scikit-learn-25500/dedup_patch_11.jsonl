{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..b5f96f0 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -652,6 +652,21 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     return predictions\n \n \n+def _wrap_calibrator_to_numpy(calibrator):\n+    \"\"\"Wraps a calibrator to ensure numpy output regardless of config.\"\"\"\n+    predict = calibrator.predict\n+\n+    def wrapped_predict(*args, **kwargs):\n+        result = predict(*args, **kwargs)\n+        # Convert to numpy array if it's a pandas DataFrame\n+        if hasattr(result, \"to_numpy\"):\n+            result = result.to_numpy().reshape(-1)\n+        return result\n+\n+    calibrator.predict = wrapped_predict\n+    return calibrator\n+\n+\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     \"\"\"Fit calibrator(s) and return a `_CalibratedClassifier`\n     instance.\n@@ -694,6 +709,8 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n         else:  # \"sigmoid\"\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n+        # Wrap calibrator to ensure numpy output regardless of config\n+        calibrator = _wrap_calibrator_to_numpy(calibrator)\n         calibrators.append(calibrator)\n \n     pipeline = _CalibratedClassifier(clf, calibrators, method=method, classes=classes)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..635f54d 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -140,6 +140,15 @@ def _compute_predictions(pred_method, method_name, X, n_classes):\n     else:\n         raise ValueError(f'Invalid prediction method: {method_name}')\n     return predictions\n+def _wrap_calibrator_to_numpy(calibrator):\n+    predict = calibrator.predict\n+    def wrapped_predict(*args, **kwargs):\n+        result = predict(*args, **kwargs)\n+        if hasattr(result, 'to_numpy'):\n+            result = result.to_numpy().reshape(-1)\n+        return result\n+    calibrator.predict = wrapped_predict\n+    return calibrator\n def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n     Y = label_binarize(y, classes=classes)\n     label_encoder = LabelEncoder().fit(classes)\n@@ -151,6 +160,7 @@ def _fit_calibrator(clf, predictions, y, classes, method, sample_weight=None):\n         else:\n             calibrator = _SigmoidCalibration()\n         calibrator.fit(this_pred, Y[:, class_idx], sample_weight)\n+        calibrator = _wrap_calibrator_to_numpy(calibrator)\n         calibrators.append(calibrator)\n     pipeline = _CalibratedClassifier(clf, calibrators, method=method, classes=classes)\n     return pipeline\n", "normalized_occurrence": 1}
