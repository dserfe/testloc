{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14053", "model_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex 8644d61..244869d 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -876,6 +876,12 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n                          \"%d elements, got %d\" % (tree_.n_features,\n                                                   len(feature_names)))\n \n+    if feature_names is not None:\n+        max_feature_idx = max(tree_.feature[tree_.feature != _tree.TREE_UNDEFINED])\n+        if max_feature_idx >= len(feature_names):\n+            raise ValueError(\"All features indices must be less than the length of \"\n+                           \"feature_names (got %d >= %d)\" % (max_feature_idx, len(feature_names)))\n+\n     if spacing <= 0:\n         raise ValueError(\"spacing must be > 0, given %d\" % spacing)\n \n@@ -954,4 +960,4 @@ def export_text(decision_tree, feature_names=None, max_depth=10,\n                                                             trunc_report)\n \n     print_tree_recurse(0, 1)\n-    return export_text.report\n+    return export_text.report\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/tree/export.py b/sklearn/tree/export.py\nindex bcf8cf4..1abe26a 100644\n--- a/sklearn/tree/export.py\n+++ b/sklearn/tree/export.py\n@@ -335,6 +335,10 @@ def export_text(decision_tree, feature_names=None, max_depth=10, spacing=3, deci\n         raise ValueError('max_depth bust be >= 0, given %d' % max_depth)\n     if feature_names is not None and len(feature_names) != tree_.n_features:\n         raise ValueError('feature_names must contain %d elements, got %d' % (tree_.n_features, len(feature_names)))\n+    if feature_names is not None:\n+        max_feature_idx = max(tree_.feature[tree_.feature != _tree.TREE_UNDEFINED])\n+        if max_feature_idx >= len(feature_names):\n+            raise ValueError('All features indices must be less than the length of feature_names (got %d >= %d)' % (max_feature_idx, len(feature_names)))\n     if spacing <= 0:\n         raise ValueError('spacing must be > 0, given %d' % spacing)\n     if decimals < 0:\n", "normalized_occurrence": 1}
