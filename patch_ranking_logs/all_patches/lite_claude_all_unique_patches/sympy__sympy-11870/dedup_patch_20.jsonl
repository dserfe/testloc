{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..d4cbabc 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -439,8 +439,13 @@ class exp(ExpBase):\n         return exp(arg)\n \n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n+        if I in arg.free_symbols:\n+            # Handle exp(I*x) -> cos(x) + I*sin(x) case\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I*sin(x)\n         return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n \n     def _eval_rewrite_as_cos(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..a985eda 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -271,8 +271,12 @@ class exp(ExpBase):\n             return S.One\n         return exp(arg)\n     def _eval_rewrite_as_sin(self, arg):\n-        from sympy import sin\n+        from sympy import sin, cos\n         I = S.ImaginaryUnit\n+        if I in arg.free_symbols:\n+            x = arg.as_coefficient(I)\n+            if x is not None:\n+                return cos(x) + I * sin(x)\n         return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n", "normalized_occurrence": 1}
