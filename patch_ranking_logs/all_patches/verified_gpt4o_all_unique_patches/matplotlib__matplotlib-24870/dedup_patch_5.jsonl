{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..1f0405e 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -767,7 +767,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n                 mpl.rcParams['contour.negative_linestyle']\n \n         kwargs = self._process_args(*args, **kwargs)\n-        self._process_levels()\n+        if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+            if levels is None:\n+                levels = [0.5]\n+        self._process_levels(levels)\n \n         self._extend_min = self.extend in ['min', 'both']\n         self._extend_max = self.extend in ['max', 'both']\n@@ -1117,11 +1120,12 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n \n         return lev[i0:i1]\n \n-    def _process_contour_level_args(self, args):\n+    def _process_contour_level_args(self, args, levels=None):\n         \"\"\"\n         Determine the contour levels and store in self.levels.\n         \"\"\"\n-        if self.levels is None:\n+        if levels is not None:\n+            levels_arg = levels\n             if len(args) == 0:\n                 levels_arg = 7  # Default, hard-wired.\n             else:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..2440920 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -297,7 +297,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         if self.negative_linestyles is None:\n             self.negative_linestyles = mpl.rcParams['contour.negative_linestyle']\n         kwargs = self._process_args(*args, **kwargs)\n-        self._process_levels()\n+        if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+            if levels is None:\n+                levels = [0.5]\n+        self._process_levels(levels)\n         self._extend_min = self.extend in ['min', 'both']\n         self._extend_max = self.extend in ['max', 'both']\n         if self.colors is not None:\n@@ -480,8 +483,9 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n         if i1 - i0 < 3:\n             i0, i1 = (0, len(lev))\n         return lev[i0:i1]\n-    def _process_contour_level_args(self, args):\n-        if self.levels is None:\n+    def _process_contour_level_args(self, args, levels=None):\n+        if levels is not None:\n+            levels_arg = levels\n             if len(args) == 0:\n                 levels_arg = 7\n             else:\n", "normalized_occurrence": 1}
