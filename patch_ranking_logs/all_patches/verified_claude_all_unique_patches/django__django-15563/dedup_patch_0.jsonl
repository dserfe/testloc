{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex a80d8e1..27a283e 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -300,6 +300,9 @@ class ModelBase(type):\n                     # e.g. migrations will already have it specified\n                     if not hasattr(new_class, attr_name):\n                         new_class.add_to_class(attr_name, field)\n+                        # For multiple inheritance, ensure the parent link is properly set\n+                        if len([p for p in parents if not p._meta.abstract]) > 1:\n+                            field.primary_key = False\n                 else:\n                     field = None\n                 new_class._meta.parents[base] = field\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0a3bff1..23ea82c 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -131,6 +131,8 @@ class ModelBase(type):\n                         raise FieldError(\"Auto-generated field '%s' in class %r for parent_link to base class %r clashes with declared field of the same name.\" % (attr_name, name, base.__name__))\n                     if not hasattr(new_class, attr_name):\n                         new_class.add_to_class(attr_name, field)\n+                        if len([p for p in parents if not p._meta.abstract]) > 1:\n+                            field.primary_key = False\n                 else:\n                     field = None\n                 new_class._meta.parents[base] = field\n", "normalized_occurrence": 1}
