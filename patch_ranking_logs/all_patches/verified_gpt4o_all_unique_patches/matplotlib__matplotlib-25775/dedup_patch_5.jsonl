{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..126dd74 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -93,6 +93,26 @@ def _get_text_metrics_with_cache_impl(\n     \"fontweight\": [\"weight\"],\n })\n class Text(Artist):\n+    def __init__(self, *args, antialiased=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        if antialiased is None:\n+            antialiased = mpl.rcParams[\"text.antialiased\"]\n+        self._antialiased = antialiased\n+\n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether the text is antialiased.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n     \"\"\"Handle storing and drawing of text in window or data coordinates.\"\"\"\n \n     zorder = 3\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n+    def __init__(self, *args, antialiased=None, **kwargs):\n+        super().__init__(*args, **kwargs)\n+        if antialiased is None:\n+            antialiased = mpl.rcParams['text.antialiased']\n+        self._antialiased = antialiased\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n+    'Handle storing and drawing of text in window or data coordinates.'", "normalized_occurrence": 1}
