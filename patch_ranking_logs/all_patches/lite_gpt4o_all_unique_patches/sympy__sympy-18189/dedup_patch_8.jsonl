{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..51b67c7 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,15 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+                solutions = diophantine(eq, param)\n+                mapped_solutions = set()\n+                for sol in solutions:\n+                    mapped_sol = [None] * len(syms)\n+                    for var, val in zip(sorted(var, key=default_sort_key), sol):\n+                        mapped_sol[dict_sym_index[var]] = val\n+                    mapped_solutions.add(tuple(mapped_sol))\n+                return mapped_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..a31eaf8 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,15 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = {sym: i for i, sym in enumerate(syms)}\n+                solutions = diophantine(eq, param)\n+                mapped_solutions = set()\n+                for sol in solutions:\n+                    mapped_sol = [None] * len(syms)\n+                    for var, val in zip(sorted(var, key=default_sort_key), sol):\n+                        mapped_sol[dict_sym_index[var]] = val\n+                    mapped_solutions.add(tuple(mapped_sol))\n+                return mapped_solutions\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
