{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..5cdd0fc 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -200,10 +200,23 @@ class ModelBase(type):\n             # Skip concrete parent classes.\n             if base != new_class and not base._meta.abstract:\n                 continue\n-            # Locate OneToOneField instances.\n+            # Locate OneToOneField instances, prioritizing parent_link=True fields\n+            parent_link_fields = []\n+            other_onetoone_fields = []\n             for field in base._meta.local_fields:\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n+                    if getattr(field, 'parent_link', False):\n+                        parent_link_fields.append((related, field))\n+                    else:\n+                        other_onetoone_fields.append((related, field))\n+            \n+            # First add fields with parent_link=True\n+            for related, field in parent_link_fields:\n+                parent_links[make_model_tuple(related)] = field\n+            # Then add other OneToOneFields only if no parent link exists for that model\n+            for related, field in other_onetoone_fields:\n+                if make_model_tuple(related) not in parent_links:\n                     parent_links[make_model_tuple(related)] = field\n \n         # Track fields inherited from base models.\n", "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..61f2903 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -104,9 +104,19 @@ class ModelBase(type):\n                 continue\n             if base != new_class and (not base._meta.abstract):\n                 continue\n+            parent_link_fields = []\n+            other_onetoone_fields = []\n             for field in base._meta.local_fields:\n                 if isinstance(field, OneToOneField):\n                     related = resolve_relation(new_class, field.remote_field.model)\n+                    if getattr(field, 'parent_link', False):\n+                        parent_link_fields.append((related, field))\n+                    else:\n+                        other_onetoone_fields.append((related, field))\n+            for related, field in parent_link_fields:\n+                parent_links[make_model_tuple(related)] = field\n+            for related, field in other_onetoone_fields:\n+                if make_model_tuple(related) not in parent_links:\n                     parent_links[make_model_tuple(related)] = field\n         inherited_attributes = set()\n         for base in new_class.mro():\n", "normalized_occurrence": 1}
