{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex ca33049..5ac36bb 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -137,21 +137,10 @@ class Mod(Function):\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n \n-            if mod_l and all(inner.args[1] == q for inner in mod_l):\n-                # finding distributive term\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n-                mod = []\n-                non_mod = []\n-                for j in non_mod_l:\n-                    if isinstance(j, cls):\n-                        mod.append(j.args[0])\n-                    else:\n-                        non_mod.append(j)\n-                prod_mod = Mul(*mod)\n-                prod_non_mod = Mul(*non_mod)\n+            # Only distribute if there are no external multipliers\n+            if mod_l and not non_mod_l and all(inner.args[1] == q for inner in mod_l):\n                 prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n-                net = prod_mod1*prod_mod\n-                return prod_non_mod*cls(net, q)\n+                return cls(prod_mod1, q)\n \n             if q.is_Integer and q is not S.One:\n                 _ = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/mod.py b/sympy/core/mod.py\nindex 57d2396..7ca0eae 100644\n--- a/sympy/core/mod.py\n+++ b/sympy/core/mod.py\n@@ -84,20 +84,9 @@ class Mod(Function):\n             both_l = non_mod_l, mod_l = ([], [])\n             for arg in p.args:\n                 both_l[isinstance(arg, cls)].append(arg)\n-            if mod_l and all((inner.args[1] == q for inner in mod_l)):\n-                non_mod_l = [cls(x, q) for x in non_mod_l]\n-                mod = []\n-                non_mod = []\n-                for j in non_mod_l:\n-                    if isinstance(j, cls):\n-                        mod.append(j.args[0])\n-                    else:\n-                        non_mod.append(j)\n-                prod_mod = Mul(*mod)\n-                prod_non_mod = Mul(*non_mod)\n+            if mod_l and (not non_mod_l) and all((inner.args[1] == q for inner in mod_l)):\n                 prod_mod1 = Mul(*[i.args[0] for i in mod_l])\n-                net = prod_mod1 * prod_mod\n-                return prod_non_mod * cls(net, q)\n+                return cls(prod_mod1, q)\n             if q.is_Integer and q is not S.One:\n                 _ = []\n                 for i in non_mod_l:\n", "normalized_occurrence": 1}
