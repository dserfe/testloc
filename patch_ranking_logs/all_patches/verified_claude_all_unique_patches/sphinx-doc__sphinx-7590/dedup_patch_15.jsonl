{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..9227bfb 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,7 +4682,20 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        # Handle user-defined literals\n+        if self.current_char == '_' or (self.current_char.isalpha() and self.last_match is not None):\n+            # We either have an underscore or a letter following our last match (which should be a number/string)\n+            # Get the UDL suffix\n+            startPos = self.pos\n+            self.pos += 1\n+            while self.pos < len(self.definition) and (\n+                    self.current_char.isalnum() or self.current_char == '_'):\n+                self.pos += 1\n+            suffix = self.definition[startPos:self.pos]\n+            # Create a new literal with the suffix\n+            if self.last_match is not None:\n+                data = self.last_match.group(0) + suffix\n+                return ASTNumberLiteral(data)\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..0cb024b 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,6 +3074,15 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        if self.current_char == '_' or (self.current_char.isalpha() and self.last_match is not None):\n+            startPos = self.pos\n+            self.pos += 1\n+            while self.pos < len(self.definition) and (self.current_char.isalnum() or self.current_char == '_'):\n+                self.pos += 1\n+            suffix = self.definition[startPos:self.pos]\n+            if self.last_match is not None:\n+                data = self.last_match.group(0) + suffix\n+                return ASTNumberLiteral(data)\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
