{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..d3e1359 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -773,6 +773,23 @@ class ASTNestedName(ASTBase):\n # Expressions\n ################################################################################\n \n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str, suffix: str) -> None:\n+        self.value = value\n+        self.suffix = suffix\n+\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f\"{self.value}{self.suffix}\"\n+\n+    def get_id(self, version: int) -> str:\n+        return f\"Li{self.value}E{self.suffix}\"\n+\n+    def describe_signature(self, signode: TextElement, mode: str,\n+                           env: \"BuildEnvironment\", symbol: \"Symbol\") -> None:\n+        signode += addnodes.desc_sig_keyword(self.value, self.value)\n+        signode += addnodes.desc_sig_space()\n+        signode += addnodes.desc_sig_keyword(self.suffix, self.suffix)\n+\n class ASTExpression(ASTBase):\n     def get_id(self, version: int) -> str:\n         raise NotImplementedError(repr(self))\n@@ -4643,6 +4660,18 @@ class DefinitionParser(BaseParser):\n             self.pos += 1\n         return self.definition[startPos:self.pos]\n \n+    def _parse_user_defined_literal(self) -> Optional[ASTUserDefinedLiteral]:\n+        # Match user-defined literals like 6.62607015e-34q_J or 1q_s\n+        udl_regex = re.compile(r'([0-9.]+)([a-zA-Z_]\\w*)')\n+        self.skip_ws()\n+        pos = self.pos\n+        if self.match(udl_regex):\n+            value = self.last_match.group(1)\n+            suffix = self.last_match.group(2)\n+            return ASTUserDefinedLiteral(value, suffix)\n+        self.pos = pos\n+        return None\n+\n     def _parse_literal(self) -> ASTLiteral:\n         # -> integer-literal\n         #  | character-literal\n@@ -4682,7 +4711,9 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n+        res = self._parse_user_defined_literal()\n+        if res is not None:\n+            return res\n         return None\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..25717ce 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -214,6 +214,18 @@ class ASTNestedName(ASTBase):\n                 self.names[-1].describe_signature(signode, mode, env, '', symbol)\n         else:\n             raise Exception('Unknown description mode: %s' % mode)\n+class ASTUserDefinedLiteral(ASTLiteral):\n+    def __init__(self, value: str, suffix: str) -> None:\n+        self.value = value\n+        self.suffix = suffix\n+    def _stringify(self, transform: StringifyTransform) -> str:\n+        return f'{self.value}{self.suffix}'\n+    def get_id(self, version: int) -> str:\n+        return f'Li{self.value}E{self.suffix}'\n+    def describe_signature(self, signode: TextElement, mode: str, env: 'BuildEnvironment', symbol: 'Symbol') -> None:\n+        signode += addnodes.desc_sig_keyword(self.value, self.value)\n+        signode += addnodes.desc_sig_space()\n+        signode += addnodes.desc_sig_keyword(self.suffix, self.suffix)\n class ASTExpression(ASTBase):\n     def get_id(self, version: int) -> str:\n         raise NotImplementedError(repr(self))\n@@ -3048,6 +3060,16 @@ class DefinitionParser(BaseParser):\n                 escape = False\n             self.pos += 1\n         return self.definition[startPos:self.pos]\n+    def _parse_user_defined_literal(self) -> Optional[ASTUserDefinedLiteral]:\n+        udl_regex = re.compile('([0-9.]+)([a-zA-Z_]\\\\w*)')\n+        self.skip_ws()\n+        pos = self.pos\n+        if self.match(udl_regex):\n+            value = self.last_match.group(1)\n+            suffix = self.last_match.group(2)\n+            return ASTUserDefinedLiteral(value, suffix)\n+        self.pos = pos\n+        return None\n     def _parse_literal(self) -> ASTLiteral:\n         self.skip_ws()\n         if self.skip_word('nullptr'):\n@@ -3074,6 +3096,9 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n+        res = self._parse_user_defined_literal()\n+        if res is not None:\n+            return res\n         return None\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n", "normalized_occurrence": 1}
