{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14317", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 408ff45..4ea7ffd 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1854,7 +1854,23 @@ class LatexPrinter(Printer):\n \n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in poly.rep.to_list():\n+            if coeff == 0:\n+                continue\n+            # Print term\n+            s = self._print(coeff)\n+            for x, p in zip(poly.gens, monom):\n+                if p == 0:\n+                    continue\n+                elif p == 1:\n+                    s += self._print(x)\n+                else:\n+                    s += \"%s^{%d}\" % (self._print(x), p)\n+            terms.append(s)\n+        if not terms:\n+            terms = [\"0\"]\n+        expr = \" + \".join(terms)\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 5a18831..65191e7 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1241,7 +1241,22 @@ class LatexPrinter(Printer):\n         return '%s%s\\\\left[%s\\\\right]' % (inv, domain, symbols)\n     def _print_Poly(self, poly):\n         cls = poly.__class__.__name__\n-        expr = self._print(poly.as_expr())\n+        terms = []\n+        for monom, coeff in poly.rep.to_list():\n+            if coeff == 0:\n+                continue\n+            s = self._print(coeff)\n+            for x, p in zip(poly.gens, monom):\n+                if p == 0:\n+                    continue\n+                elif p == 1:\n+                    s += self._print(x)\n+                else:\n+                    s += '%s^{%d}' % (self._print(x), p)\n+            terms.append(s)\n+        if not terms:\n+            terms = ['0']\n+        expr = ' + '.join(terms)\n         gens = list(map(self._print, poly.gens))\n         domain = 'domain=%s' % self._print(poly.get_domain())\n         args = ', '.join([expr] + gens + [domain])\n", "normalized_occurrence": 1}
