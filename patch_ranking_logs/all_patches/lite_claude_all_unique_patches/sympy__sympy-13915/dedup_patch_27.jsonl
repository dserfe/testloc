{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 30870a1..c67e2c0 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1862,8 +1862,18 @@ class Subs(Expr):\n     def _eval_subs(self, old, new):\n         if old in self.variables:\n             if old in self.point:\n-                newpoint = tuple(new if i == old else i for i in self.point)\n-                return self.func(self.expr, self.variables, newpoint)\n+                try:\n+                    # First attempt direct substitution\n+                    newpoint = tuple(new if i == old else i for i in self.point)\n+                    result = self.func(self.expr, self.variables, newpoint)\n+                    # Check if result is undefined\n+                    if result.has(S.NaN) or result.has(S.ComplexInfinity):\n+                        # If undefined, try to evaluate the limit\n+                        return self.expr.limit(old, new)\n+                    return result\n+                except:\n+                    # If substitution fails, try limit evaluation\n+                    return self.expr.limit(old, new)\n             return self\n \n     def _eval_derivative(self, s):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 209c1c6..77d983d 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -768,8 +768,14 @@ class Subs(Expr):\n     def _eval_subs(self, old, new):\n         if old in self.variables:\n             if old in self.point:\n-                newpoint = tuple((new if i == old else i for i in self.point))\n-                return self.func(self.expr, self.variables, newpoint)\n+                try:\n+                    newpoint = tuple((new if i == old else i for i in self.point))\n+                    result = self.func(self.expr, self.variables, newpoint)\n+                    if result.has(S.NaN) or result.has(S.ComplexInfinity):\n+                        return self.expr.limit(old, new)\n+                    return result\n+                except:\n+                    return self.expr.limit(old, new)\n             return self\n     def _eval_derivative(self, s):\n         val = Add.fromiter((p.diff(s) * Subs(self.expr.diff(v), self.variables, self.point).doit() for v, p in zip(self.variables, self.point)))\n", "normalized_occurrence": 1}
