{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..dbe4aa0 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -191,7 +191,7 @@ class NDimArray(Printable):\n     @classmethod\n     def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n-            if not isinstance(pointer, Iterable):\n+            if not isinstance(pointer, Iterable) or not pointer:\n                 return [pointer], ()\n \n             result = []\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..604826f 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -68,7 +68,7 @@ class NDimArray(Printable):\n     @classmethod\n     def _scan_iterable_shape(cls, iterable):\n         def f(pointer):\n-            if not isinstance(pointer, Iterable):\n+            if not isinstance(pointer, Iterable) or not pointer:\n                 return ([pointer], ())\n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n", "normalized_occurrence": 2}
