{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..6351c93 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,7 +1389,19 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        # If any of the sets is empty, return False\n+        if any(s is S.EmptySet for s in self.args):\n+            return False\n+        # Check if element is contained in all sets\n+        ret = And(*[set.contains(other) for set in self.args])\n+        if ret is not None:\n+            return ret\n+        # Fall back to computing the actual intersection\n+        # This is needed for complex set interactions\n+        intersection = Intersection(*self.args, evaluate=True)\n+        if intersection.is_FiniteSet:\n+            return intersection.contains(other)\n+        return None\n \n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..6d97cc2 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,7 +530,15 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n-        return And(*[set.contains(other) for set in self.args])\n+        if any((s is S.EmptySet for s in self.args)):\n+            return False\n+        ret = And(*[set.contains(other) for set in self.args])\n+        if ret is not None:\n+            return ret\n+        intersection = Intersection(*self.args, evaluate=True)\n+        if intersection.is_FiniteSet:\n+            return intersection.contains(other)\n+        return None\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n         completed = False\n", "normalized_occurrence": 1}
