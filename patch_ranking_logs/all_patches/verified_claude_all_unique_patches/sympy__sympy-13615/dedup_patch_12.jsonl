{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..635385c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1713,23 +1713,7 @@ class Complement(Set, EvalfMixin):\n \n         return Basic.__new__(cls, a, b)\n \n-    @staticmethod\n-    def reduce(A, B):\n-        \"\"\"\n-        Simplify a :class:`Complement`.\n \n-        \"\"\"\n-        if B == S.UniversalSet or A.is_subset(B):\n-            return EmptySet()\n-\n-        if isinstance(B, Union):\n-            return Intersection(s.complement(A) for s in B.args)\n-\n-        result = B._complement(A)\n-        if result != None:\n-            return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n \n     def _contains(self, other):\n         A = self.args[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..af45bbb 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -746,17 +746,6 @@ class Complement(Set, EvalfMixin):\n         if evaluate:\n             return Complement.reduce(a, b)\n         return Basic.__new__(cls, a, b)\n-    @staticmethod\n-    def reduce(A, B):\n-        if B == S.UniversalSet or A.is_subset(B):\n-            return EmptySet()\n-        if isinstance(B, Union):\n-            return Intersection((s.complement(A) for s in B.args))\n-        result = B._complement(A)\n-        if result != None:\n-            return result\n-        else:\n-            return Complement(A, B, evaluate=False)\n     def _contains(self, other):\n         A = self.args[0]\n         B = self.args[1]\n", "normalized_occurrence": 1}
