{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7220", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 585fb01..6626022 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -362,10 +362,23 @@ class Node(metaclass=NodeMeta):\n             truncate_locals = True\n \n         try:\n-            os.getcwd()\n+            # Store the original working directory\n+            original_dir = self.config.invocation_dir\n+            # Change back to the original directory context for the report\n+            os.chdir(original_dir)\n             abspath = False\n-        except OSError:\n-            abspath = True\n+            # Ensure we return to the current working directory after generating the report\n+            return excinfo.getrepr(\n+                funcargs=True,\n+                abspath=abspath,\n+                showlocals=self.config.getoption(\"showlocals\", False),\n+                style=style,\n+                tbfilter=False,  # pruned already, or in --fulltrace mode.\n+                truncate_locals=truncate_locals,\n+            )\n+        finally:\n+            # Restore the changed directory\n+            os.chdir(self.config.rootdir)\n \n         return excinfo.getrepr(\n             funcargs=True,\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex e228031..431b12b 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -290,10 +290,12 @@ class Node(metaclass=NodeMeta):\n         else:\n             truncate_locals = True\n         try:\n-            os.getcwd()\n+            original_dir = self.config.invocation_dir\n+            os.chdir(original_dir)\n             abspath = False\n-        except OSError:\n-            abspath = True\n+            return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n+        finally:\n+            os.chdir(self.config.rootdir)\n         return excinfo.getrepr(funcargs=True, abspath=abspath, showlocals=self.config.getoption('showlocals', False), style=style, tbfilter=False, truncate_locals=truncate_locals)\n \n     def repr_failure(self, excinfo, style=None) -> Union[str, ReprExceptionInfo, ExceptionChainRepr, FixtureLookupErrorRepr]:\n", "normalized_occurrence": 1}
