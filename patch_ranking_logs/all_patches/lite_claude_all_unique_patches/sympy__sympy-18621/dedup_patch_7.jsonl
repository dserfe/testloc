{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18621", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex cc9a4f7..58044fe 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -343,6 +343,19 @@ class BlockDiagMatrix(BlockMatrix):\n         else:\n             return BlockMatrix._blockadd(self, other)\n \n+    def _entry(self, i, j):\n+        # Handle single matrix case directly\n+        if len(self.args) == 1:\n+            return self.args[0][i, j]\n+        \n+        # For multiple matrices, find the appropriate block\n+        for k, block in enumerate(self.args):\n+            r, c = block.shape\n+            if i < r and j < c:\n+                return block[i, j]\n+            i, j = i - r, j - c\n+        return S.Zero\n+\n \n def block_collapse(expr):\n     \"\"\"Evaluates a block matrix expression\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n+    def _entry(self, i, j):\n+        if len(self.args) == 1:\n+            return self.args[0][i, j]\n+        for k, block in enumerate(self.args):\n+            r, c = block.shape\n+            if i < r and j < c:\n+                return block[i, j]\n+            i, j = (i - r, j - c)\n+        return S.Zero", "normalized_occurrence": 1}
