{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..12ef5d6 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -278,12 +278,8 @@ class Product(ExprWithIntLimits):\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n-\n-                # There is expression, which couldn't change by\n-                # as_numer_denom(). E.g. n**(2/3) + 1 --> (n**(2/3) + 1, 1).\n-                # We have to catch this case.\n-\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                # Evaluate the product of each term in the sum separately\n+                p = Add(*[self._eval_product(i, (k, a, n)) for i in p.args])\n             else:\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..c74fc8d 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -78,7 +78,7 @@ class Product(ExprWithIntLimits):\n             p, q = term.as_numer_denom()\n             q = self._eval_product(q, (k, a, n))\n             if q.is_Number:\n-                p = sum([self._eval_product(i, (k, a, n)) for i in p.as_coeff_Add()])\n+                p = Add(*[self._eval_product(i, (k, a, n)) for i in p.args])\n             else:\n                 p = self._eval_product(p, (k, a, n))\n             return p / q\n", "normalized_occurrence": 1}
