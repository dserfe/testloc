{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 9d386da..dd0fdc3 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -375,6 +375,8 @@ class sin(TrigonometricFunction):\n         if isinstance(arg, TrigonometricFunction) or isinstance(arg, HyperbolicFunction):\n             arg = arg.func(arg.args[0]).rewrite(exp)\n         return (exp(arg*I) - exp(-arg*I)) / (2*I)\n+        if not arg.has(I):\n+            return sin(arg)\n \n     def _eval_rewrite_as_Pow(self, arg):\n         if isinstance(arg, log):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 3e82fe7..1358a00 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -222,6 +222,8 @@ class sin(TrigonometricFunction):\n         if isinstance(arg, TrigonometricFunction) or isinstance(arg, HyperbolicFunction):\n             arg = arg.func(arg.args[0]).rewrite(exp)\n         return (exp(arg * I) - exp(-arg * I)) / (2 * I)\n+        if not arg.has(I):\n+            return sin(arg)\n     def _eval_rewrite_as_Pow(self, arg):\n         if isinstance(arg, log):\n             I = S.ImaginaryUnit\n", "normalized_occurrence": 1}
