{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7192ab0..5f56c72 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1291,7 +1291,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n-            args = stringify_signature(sig, **kwargs)\n+            args = self._stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n@@ -1548,22 +1548,22 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         # with __init__ in C and no `__text_signature__`.\n         return None, None, None\n \n-    def format_args(self, **kwargs: Any) -> str:\n-        if self.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n-\n-        try:\n-            self._signature_class, self._signature_method_name, sig = self._get_signature()\n-        except TypeError as exc:\n-            # __signature__ attribute contained junk\n-            logger.warning(__(\"Failed to get a constructor signature for %s: %s\"),\n-                           self.fullname, exc)\n-            return None\n-\n-        if sig is None:\n-            return None\n-\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+    def _stringify_signature(self, sig: inspect.Signature, **kwargs: Any) -> str:\n+        \"\"\"Converts function signature into a string, handling Enums gracefully.\"\"\"\n+        def format_default(v):\n+            if isinstance(v, Enum):\n+                return f\"{v.__class__.__name__}.{v.name}\"\n+            return repr(v)\n+\n+        params = []\n+        for name, param in sig.parameters.items():\n+            formatted = str(param)\n+            if param.default is not param.empty:\n+                formatted = formatted.replace(repr(param.default), format_default(param.default))\n+            params.append(formatted)\n+        \n+        params_str = ', '.join(params)\n+        return f\"({params_str})\"\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2bf2bdb..2e60367 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -707,7 +707,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n-            args = stringify_signature(sig, **kwargs)\n+            args = self._stringify_signature(sig, **kwargs)\n         except TypeError as exc:\n             logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n             return None\n@@ -864,17 +864,19 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         except ValueError:\n             pass\n         return (None, None, None)\n-    def format_args(self, **kwargs: Any) -> str:\n-        if self.config.autodoc_typehints in ('none', 'description'):\n-            kwargs.setdefault('show_annotation', False)\n-        try:\n-            self._signature_class, self._signature_method_name, sig = self._get_signature()\n-        except TypeError as exc:\n-            logger.warning(__('Failed to get a constructor signature for %s: %s'), self.fullname, exc)\n-            return None\n-        if sig is None:\n-            return None\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+    def _stringify_signature(self, sig: inspect.Signature, **kwargs: Any) -> str:\n+        def format_default(v):\n+            if isinstance(v, Enum):\n+                return f'{v.__class__.__name__}.{v.name}'\n+            return repr(v)\n+        params = []\n+        for name, param in sig.parameters.items():\n+            formatted = str(param)\n+            if param.default is not param.empty:\n+                formatted = formatted.replace(repr(param.default), format_default(param.default))\n+            params.append(formatted)\n+        params_str = ', '.join(params)\n+        return f'({params_str})'\n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n             return ''\n", "normalized_occurrence": 1}
