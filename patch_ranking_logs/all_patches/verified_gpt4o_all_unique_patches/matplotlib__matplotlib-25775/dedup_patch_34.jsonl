{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..ea57b94 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -93,6 +93,25 @@ def _get_text_metrics_with_cache_impl(\n     \"fontweight\": [\"weight\"],\n })\n class Text(Artist):\n+    _antialiased = mpl.rcParams[\"text.antialiased\"]\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"\n+        Set whether the text should be drawn with antialiasing.\n+\n+        Parameters\n+        ----------\n+        aa : bool\n+            Whether to use antialiasing.\n+        \"\"\"\n+        self._antialiased = aa\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"\n+        Return whether the text is drawn with antialiasing.\n+        \"\"\"\n+        return self._antialiased\n     \"\"\"Handle storing and drawing of text in window or data coordinates.\"\"\"\n \n     zorder = 3\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n+    _antialiased = mpl.rcParams['text.antialiased']\n+    def set_antialiased(self, aa):\n+        self._antialiased = aa\n+        self.stale = True\n+    def get_antialiased(self):\n+        return self._antialiased\n+    'Handle storing and drawing of text in window or data coordinates.'", "normalized_occurrence": 1}
