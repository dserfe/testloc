{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-14623", "model_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex ebf1196..32a1836 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -2819,10 +2819,14 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n     if (not np.isfinite(vmin)) or (not np.isfinite(vmax)):\n         return -expander, expander\n \n-    swapped = False\n+    # Only swap if we want an increasing interval\n+    if increasing and vmax < vmin:\n+        vmin, vmax = vmax, vmin\n+\n+    # Work with the unswapped interval to avoid signed zeros and other precision issues\n+    original_vmin, original_vmax = vmin, vmax\n     if vmax < vmin:\n         vmin, vmax = vmax, vmin\n-        swapped = True\n \n     maxabsvalue = max(abs(vmin), abs(vmax))\n     if maxabsvalue < (1e6 / tiny) * np.finfo(float).tiny:\n@@ -2837,8 +2841,10 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n             vmin -= expander*abs(vmin)\n             vmax += expander*abs(vmax)\n \n-    if swapped and not increasing:\n-        vmin, vmax = vmax, vmin\n+    # Return the correctly ordered values\n+    if not increasing and original_vmax < original_vmin:\n+        return vmax, vmin\n+    return vmin, vmax\n     return vmin, vmax\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/transforms.py b/lib/matplotlib/transforms.py\nindex 6dcd40d..f025adb 100644\n--- a/lib/matplotlib/transforms.py\n+++ b/lib/matplotlib/transforms.py\n@@ -1155,10 +1155,11 @@ class TransformedPatchPath(TransformedPath):\n def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n     if not np.isfinite(vmin) or not np.isfinite(vmax):\n         return (-expander, expander)\n-    swapped = False\n+    if increasing and vmax < vmin:\n+        vmin, vmax = (vmax, vmin)\n+    original_vmin, original_vmax = (vmin, vmax)\n     if vmax < vmin:\n         vmin, vmax = (vmax, vmin)\n-        swapped = True\n     maxabsvalue = max(abs(vmin), abs(vmax))\n     if maxabsvalue < 1000000.0 / tiny * np.finfo(float).tiny:\n         vmin = -expander\n@@ -1170,8 +1171,9 @@ def nonsingular(vmin, vmax, expander=0.001, tiny=1e-15, increasing=True):\n         else:\n             vmin -= expander * abs(vmin)\n             vmax += expander * abs(vmax)\n-    if swapped and (not increasing):\n-        vmin, vmax = (vmax, vmin)\n+    if not increasing and original_vmax < original_vmin:\n+        return (vmax, vmin)\n+    return (vmin, vmax)\n     return (vmin, vmax)\n def interval_contains(interval, val):\n     a, b = interval\n", "normalized_occurrence": 1}
