{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..206afa1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -460,6 +460,20 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+\n+        # Handle ordering for the compound query\n+        if self.query.order_by:\n+            ordering_params = []\n+            ordering_sql = []\n+            for ord_item in self.get_order_by():\n+                # Only include ordering on columns that are in the select list\n+                if isinstance(ord_item[0], (int, str)) or ord_item[0].output_field:\n+                    ordering_sql.append(ord_item[1])\n+                    ordering_params.extend(ord_item[2])\n+            if ordering_sql:\n+                result.append(' ORDER BY ' + ', '.join(ordering_sql))\n+                params.extend(ordering_params)\n+\n         return result, params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..341f89d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,6 +265,16 @@ class SQLCompiler:\n         params = []\n         for part in args_parts:\n             params.extend(part)\n+        if self.query.order_by:\n+            ordering_params = []\n+            ordering_sql = []\n+            for ord_item in self.get_order_by():\n+                if isinstance(ord_item[0], (int, str)) or ord_item[0].output_field:\n+                    ordering_sql.append(ord_item[1])\n+                    ordering_params.extend(ord_item[2])\n+            if ordering_sql:\n+                result.append(' ORDER BY ' + ', '.join(ordering_sql))\n+                params.extend(ordering_params)\n         return (result, params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n", "normalized_occurrence": 1}
