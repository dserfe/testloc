{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4356", "model_patch": "diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex 74e25c7..b5bdf35 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -27,12 +27,9 @@ def _maybe_null_out(result, axis, mask, min_count=1):\n     xarray version of pandas.core.nanops._maybe_null_out\n     \"\"\"\n     if hasattr(axis, \"__len__\"):  # if tuple or list\n-        raise ValueError(\n-            \"min_count is not available for reduction with more than one dimensions.\"\n-        )\n-\n-    if axis is not None and getattr(result, \"ndim\", False):\n-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0\n+        # Calculate the number of valid elements across all dimensions specified in axis\n+        valid_count = np.prod([mask.shape[ax] for ax in axis]) - np.sum(mask, axis=tuple(axis))\n+        null_mask = (valid_count - min_count) < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py\nindex ba6f235..36b1ca1 100644\n--- a/xarray/core/nanops.py\n+++ b/xarray/core/nanops.py\n@@ -13,9 +13,8 @@ def _replace_nan(a, val):\n     return (where_method(val, mask, a), mask)\n def _maybe_null_out(result, axis, mask, min_count=1):\n     if hasattr(axis, '__len__'):\n-        raise ValueError('min_count is not available for reduction with more than one dimensions.')\n-    if axis is not None and getattr(result, 'ndim', False):\n-        null_mask = mask.shape[axis] - mask.sum(axis) - min_count < 0\n+        valid_count = np.prod([mask.shape[ax] for ax in axis]) - np.sum(mask, axis=tuple(axis))\n+        null_mask = valid_count - min_count < 0\n         if null_mask.any():\n             dtype, fill_value = dtypes.maybe_promote(result.dtype)\n             result = result.astype(dtype)\n", "normalized_occurrence": 1}
