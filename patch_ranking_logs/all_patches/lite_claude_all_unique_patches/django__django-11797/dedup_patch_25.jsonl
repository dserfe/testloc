{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..e28e0a7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -60,6 +60,9 @@ class SQLCompiler:\n         The logic of what exactly the GROUP BY clause contains is hard\n         to describe in other words than \"if it passes the test suite,\n         then it is correct\".\n+\n+        When a query with GROUP BY is used as a subquery, we need to ensure\n+        the GROUP BY columns are preserved from the original query.\n         \"\"\"\n         # Some examples:\n         #     SomeModel.objects.annotate(Count('somecol'))\n@@ -96,14 +99,16 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n+            # These explicitly set grouping columns should be preserved even\n+            # when the query is used as a subquery.\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n+            # When group_by is explicitly set, we should not allow it to be\n+            # overridden by primary key grouping\n+            return [(self.compile(expr)) for expr in expressions]\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..2f14dbc 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,6 +45,7 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n+            return [self.compile(expr) for expr in expressions]\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 3}
