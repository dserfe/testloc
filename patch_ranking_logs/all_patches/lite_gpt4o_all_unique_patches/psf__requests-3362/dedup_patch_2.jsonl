{"model_name_or_path": "agentless", "instance_id": "psf__requests-3362", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 58593f5..03b1d06 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -687,12 +687,10 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError(\"chunk_size must be an int, it is instead a %s.\" % type(chunk_size))\n-        # simulate reading small chunks of the content\n-        reused_chunks = iter_slices(self._content, chunk_size)\n-\n-        stream_chunks = generate()\n-\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n+        if self._content_consumed:\n+            chunks = iter_slices(self._content, chunk_size)\n+        else:\n+            chunks = generate()\n \n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d66e2b7..d6db380 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -356,9 +356,10 @@ class Response(object):\n             raise StreamConsumedError()\n         elif not isinstance(chunk_size, int):\n             raise TypeError('chunk_size must be an int, it is instead a %s.' % type(chunk_size))\n-        reused_chunks = iter_slices(self._content, chunk_size)\n-        stream_chunks = generate()\n-        chunks = reused_chunks if self._content_consumed else stream_chunks\n+        if self._content_consumed:\n+            chunks = iter_slices(self._content, chunk_size)\n+        else:\n+            chunks = generate()\n         if decode_unicode:\n             chunks = stream_decode_response_unicode(chunks, self)\n         return chunks\n", "normalized_occurrence": 4}
