{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1e94c70..c504195 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,27 +270,26 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n-        assert call.excinfo.value.msg is not None\n-        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n-        rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and not isinstance(call.excinfo.value, raises):\n-                rep.outcome = \"failed\"\n-            else:\n-                rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n-        elif call.when == \"call\":\n-            if xfailed.strict:\n-                rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n-            else:\n-                rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n+    elif not item.config.option.runxfail:\n+        if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+            assert call.excinfo.value.msg is not None\n+            rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n+            rep.outcome = \"skipped\"\n+        elif not rep.skipped and xfailed:\n+            if call.excinfo:\n+                raises = xfailed.raises\n+                if raises is not None and not isinstance(call.excinfo.value, raises):\n+                    rep.outcome = \"failed\"\n+                else:\n+                    rep.outcome = \"skipped\"\n+                    rep.wasxfail = xfailed.reason\n+            elif call.when == \"call\":\n+                if xfailed.strict:\n+                    rep.outcome = \"failed\"\n+                    rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+                else:\n+                    rep.outcome = \"passed\"\n+                    rep.wasxfail = xfailed.reason\n     elif (\n         item._store.get(skipped_by_mark_key, True)\n         and rep.skipped\n@@ -311,4 +310,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 6, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 5f70c26..c68bc09 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -148,27 +148,26 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = 'Unexpected success'\n         rep.outcome = 'failed'\n-    elif item.config.option.runxfail:\n-        pass\n-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n-        assert call.excinfo.value.msg is not None\n-        rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n-        rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and (not isinstance(call.excinfo.value, raises)):\n-                rep.outcome = 'failed'\n-            else:\n-                rep.outcome = 'skipped'\n-                rep.wasxfail = xfailed.reason\n-        elif call.when == 'call':\n-            if xfailed.strict:\n-                rep.outcome = 'failed'\n-                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n-            else:\n-                rep.outcome = 'passed'\n-                rep.wasxfail = xfailed.reason\n+    elif not item.config.option.runxfail:\n+        if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+            assert call.excinfo.value.msg is not None\n+            rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n+            rep.outcome = 'skipped'\n+        elif not rep.skipped and xfailed:\n+            if call.excinfo:\n+                raises = xfailed.raises\n+                if raises is not None and (not isinstance(call.excinfo.value, raises)):\n+                    rep.outcome = 'failed'\n+                else:\n+                    rep.outcome = 'skipped'\n+                    rep.wasxfail = xfailed.reason\n+            elif call.when == 'call':\n+                if xfailed.strict:\n+                    rep.outcome = 'failed'\n+                    rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n+                else:\n+                    rep.outcome = 'passed'\n+                    rep.wasxfail = xfailed.reason\n     elif item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n         _, _, reason = rep.longrepr\n         filename, line = item.reportinfo()[:2]\n", "normalized_occurrence": 6}
