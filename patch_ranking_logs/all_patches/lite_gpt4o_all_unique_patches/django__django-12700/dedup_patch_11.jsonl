{"model_name_or_path": "agentless", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7fd21f6..e0aef14 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,9 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                # Handle other iterable types\n+                cleansed = type(value)(self.cleanse_setting(key, v) for v in value)\n             else:\n                 cleansed = value\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex b98e7c2..85ca068 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,6 +47,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                cleansed = type(value)((self.cleanse_setting(key, v) for v in value))\n             else:\n                 cleansed = value\n         except TypeError:\n", "normalized_occurrence": 7}
