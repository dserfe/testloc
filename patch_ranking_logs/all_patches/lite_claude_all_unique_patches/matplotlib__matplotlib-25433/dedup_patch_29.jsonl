{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..df6ddf8 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -952,6 +952,11 @@ class RangeSlider(SliderBase):\n         # Reset value to allow _value_in_bounds() to work.\n         self.val = (self.valmin, self.valmax)\n         vmin, vmax = self._value_in_bounds(val)\n+        \n+        # Store current event state\n+        current_eventson = self.eventson\n+        self.eventson = False  # Temporarily disable events\n+        \n         self._update_selection_poly(vmin, vmax)\n         if self.orientation == \"vertical\":\n             self._handles[0].set_ydata([vmin])\n@@ -961,10 +966,13 @@ class RangeSlider(SliderBase):\n             self._handles[1].set_xdata([vmax])\n \n         self.valtext.set_text(self._format((vmin, vmax)))\n+        self.val = (vmin, vmax)\n \n+        # Restore event state and draw\n+        self.eventson = current_eventson\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n-        self.val = (vmin, vmax)\n+        \n         if self.eventson:\n             self._observers.process(\"changed\", (vmin, vmax))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..073f1e2 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -766,6 +766,8 @@ class RangeSlider(SliderBase):\n         _api.check_shape((2,), val=val)\n         self.val = (self.valmin, self.valmax)\n         vmin, vmax = self._value_in_bounds(val)\n+        current_eventson = self.eventson\n+        self.eventson = False\n         self._update_selection_poly(vmin, vmax)\n         if self.orientation == 'vertical':\n             self._handles[0].set_ydata([vmin])\n@@ -774,9 +776,10 @@ class RangeSlider(SliderBase):\n             self._handles[0].set_xdata([vmin])\n             self._handles[1].set_xdata([vmax])\n         self.valtext.set_text(self._format((vmin, vmax)))\n+        self.val = (vmin, vmax)\n+        self.eventson = current_eventson\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n-        self.val = (vmin, vmax)\n         if self.eventson:\n             self._observers.process('changed', (vmin, vmax))\n \n", "normalized_occurrence": 1}
