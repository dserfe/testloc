{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..1f6f36d 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1474,6 +1474,10 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n+                if isinstance(self, LogNorm):\n+                    # Set a default valid range for LogNorm\n+                    t_vmin = max(t_vmin, np.finfo(np.float64).eps)\n+                    t_vmax = max(t_vmax, np.finfo(np.float64).eps)\n                 raise ValueError(\"Invalid vmin or vmax\")\n             t_value -= t_vmin\n             t_value /= (t_vmax - t_vmin)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..610a1aa 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1270,6 +1270,9 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n+                if isinstance(self, LogNorm):\n+                    t_vmin = max(t_vmin, np.finfo(np.float64).eps)\n+                    t_vmax = max(t_vmax, np.finfo(np.float64).eps)\n                 raise ValueError('Invalid vmin or vmax')\n             t_value -= t_vmin\n             t_value /= t_vmax - t_vmin\n", "normalized_occurrence": 1}
