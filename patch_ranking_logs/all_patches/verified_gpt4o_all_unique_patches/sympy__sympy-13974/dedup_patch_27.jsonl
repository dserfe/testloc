{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..e7de90e 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -238,6 +238,19 @@ class TensorProduct(Expr):\n     def doit(self, **hints):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n \n+    def _eval_power(self, exp):\n+        if exp == 1:\n+            return self\n+        elif exp.is_integer and exp > 1:\n+            result = self\n+            for _ in range(1, exp):\n+                result = TensorProduct(result, self)\n+            return result\n+        elif exp.is_integer and exp < 0:\n+            raise ValueError(\"Negative powers are not supported for TensorProduct.\")\n+        else:\n+            raise ValueError(\"Non-integer powers are not supported for TensorProduct.\")\n+            \n     def _eval_expand_tensorproduct(self, **hints):\n         \"\"\"Distribute TensorProducts across addition.\"\"\"\n         args = self.args\n", "occurrence": 1, "normalized_patch": "--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n+    def _eval_power(self, exp):\n+        if exp == 1:\n+            return self\n+        elif exp.is_integer and exp > 1:\n+            result = self\n+            for _ in range(1, exp):\n+                result = TensorProduct(result, self)\n+            return result\n+        elif exp.is_integer and exp < 0:\n+            raise ValueError('Negative powers are not supported for TensorProduct.')\n+        else:\n+            raise ValueError('Non-integer powers are not supported for TensorProduct.')", "normalized_occurrence": 1}
