{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8721", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex 27202ee..8c52ffb 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -194,7 +194,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n             app.verbosity, lambda x: x[0]):\n         if not entry:\n             continue\n-        if not should_generate_module_page(app, modname):\n+        if not should_generate_module_page(app, modname) or \\\n+           (app.builder.name == 'epub' and not app.config.viewcode_enable_epub):\n             continue\n \n         code, tags, used, refname = entry\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex 5db007b..324e48e 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -128,7 +128,7 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     for modname, entry in status_iterator(sorted(env._viewcode_modules.items()), __('highlighting module code... '), 'blue', len(env._viewcode_modules), app.verbosity, lambda x: x[0]):\n         if not entry:\n             continue\n-        if not should_generate_module_page(app, modname):\n+        if not should_generate_module_page(app, modname) or (app.builder.name == 'epub' and (not app.config.viewcode_enable_epub)):\n             continue\n         code, tags, used, refname = entry\n         pagename = posixpath.join(OUTPUT_DIRNAME, modname.replace('.', '/'))\n", "normalized_occurrence": 2}
