{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..282c855 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -74,6 +74,11 @@ def unique_labels(*ys):\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n     xp, is_array_api = get_namespace(*ys)\n+    \n+    # Convert nullable pandas dtypes to their numpy equivalents\n+    ys = [y.astype('float64') if y.dtype.name == \"Float64\" else y for y in ys]\n+    ys = [y.astype('int64') if y.dtype.name == \"Int64\" else y for y in ys]\n+    ys = [y.astype('bool') if y.dtype.name == \"boolean\" else y for y in ys]\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n@@ -280,6 +285,15 @@ def type_of_target(y, input_name=\"\"):\n     'multilabel-indicator'\n     \"\"\"\n     xp, is_array_api = get_namespace(y)\n+    \n+    # Convert nullable pandas dtypes to their numpy equivalents\n+    if hasattr(y, \"dtype\"):\n+        if y.dtype.name == \"Float64\":\n+            y = y.astype('float64')\n+        elif y.dtype.name == \"Int64\":\n+            y = y.astype('int64')\n+        elif y.dtype.name == \"boolean\":\n+            y = y.astype('bool')\n     valid = (\n         (isinstance(y, Sequence) or issparse(y) or hasattr(y, \"__array__\"))\n         and not isinstance(y, str)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..d1e81dd 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -18,6 +18,9 @@ def _unique_indicator(y):\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n+    ys = [y.astype('float64') if y.dtype.name == 'Float64' else y for y in ys]\n+    ys = [y.astype('int64') if y.dtype.name == 'Int64' else y for y in ys]\n+    ys = [y.astype('bool') if y.dtype.name == 'boolean' else y for y in ys]\n     if not ys:\n         raise ValueError('No argument has been passed.')\n     ys_types = set((type_of_target(x) for x in ys))\n@@ -65,6 +68,13 @@ def check_classification_targets(y):\n         raise ValueError('Unknown label type: %r' % y_type)\n def type_of_target(y, input_name=''):\n     xp, is_array_api = get_namespace(y)\n+    if hasattr(y, 'dtype'):\n+        if y.dtype.name == 'Float64':\n+            y = y.astype('float64')\n+        elif y.dtype.name == 'Int64':\n+            y = y.astype('int64')\n+        elif y.dtype.name == 'boolean':\n+            y = y.astype('bool')\n     valid = (isinstance(y, Sequence) or issparse(y) or hasattr(y, '__array__')) and (not isinstance(y, str)) or is_array_api\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n", "normalized_occurrence": 1}
