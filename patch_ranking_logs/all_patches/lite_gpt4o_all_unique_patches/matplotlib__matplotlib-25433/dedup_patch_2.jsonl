{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..1e1a878 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -600,7 +600,9 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.draw_idle()  # Ensure the canvas is updated after connecting the observer\n+        return result\n \n \n class RangeSlider(SliderBase):\n@@ -983,7 +985,9 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.draw_idle()  # Ensure the canvas is updated after connecting the observer\n+        return result\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..e1e81d9 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -519,7 +519,9 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.draw_idle()\n+        return result\n \n class RangeSlider(SliderBase):\n     \"\"\"\n@@ -795,7 +797,9 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.draw_idle()\n+        return result\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
