{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..a0c17df 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,13 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            pred = calibrator.predict(this_pred)\n+            # Handle case where predict returns a DataFrame\n+            if hasattr(pred, 'to_numpy'):\n+                pred = pred.to_numpy()\n+            if pred.ndim == 2:\n+                pred = pred.ravel()\n+            proba[:, class_idx] = pred\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..2e02cc0 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -170,7 +170,12 @@ class _CalibratedClassifier:\n         for class_idx, this_pred, calibrator in zip(pos_class_indices, predictions.T, self.calibrators):\n             if n_classes == 2:\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            pred = calibrator.predict(this_pred)\n+            if hasattr(pred, 'to_numpy'):\n+                pred = pred.to_numpy()\n+            if pred.ndim == 2:\n+                pred = pred.ravel()\n+            proba[:, class_idx] = pred\n         if n_classes == 2:\n             proba[:, 0] = 1.0 - proba[:, 1]\n         else:\n", "normalized_occurrence": 1}
