{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d42883b..2281c56 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1541,6 +1541,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if self.config.autodoc_typehints_format == \"short\":\n             kwargs.setdefault('unqualified_typehints', True)\n \n+        # Always hide return annotations for classes\n+        kwargs['show_return_annotation'] = False\n+\n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n         except TypeError as exc:\n@@ -1552,7 +1555,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, **kwargs)\n \n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2c8c52a..5461a47 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -862,6 +862,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             kwargs.setdefault('show_annotation', False)\n         if self.config.autodoc_typehints_format == 'short':\n             kwargs.setdefault('unqualified_typehints', True)\n+        kwargs['show_return_annotation'] = False\n         try:\n             self._signature_class, self._signature_method_name, sig = self._get_signature()\n         except TypeError as exc:\n@@ -869,7 +870,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             return None\n         if sig is None:\n             return None\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return stringify_signature(sig, **kwargs)\n     def _find_signature(self) -> Tuple[str, str]:\n         result = super()._find_signature()\n         if result is not None:\n", "normalized_occurrence": 1}
