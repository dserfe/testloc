{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10466", "model_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex c138802..cff59bc 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -29,10 +29,13 @@ logger = logging.getLogger(__name__)\n \n \n class Message:\n+    ...\n+    def unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        return list(set(locations))\n     \"\"\"An entry of translatable message.\"\"\"\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = self.unique_locations(locations)\n         self.uuids = uuids\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex 906ebf1..363341c 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -22,9 +22,13 @@ from sphinx.util.tags import Tags\n from sphinx.util.template import SphinxRenderer\n logger = logging.getLogger(__name__)\n class Message:\n+    ...\n+    def unique_locations(self, locations: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n+        return list(set(locations))\n+    'An entry of translatable message.'\n     def __init__(self, text: str, locations: List[Tuple[str, int]], uuids: List[str]):\n         self.text = text\n-        self.locations = locations\n+        self.locations = self.unique_locations(locations)\n         self.uuids = uuids\n class Catalog:\n     def __init__(self) -> None:\n", "normalized_occurrence": 1}
