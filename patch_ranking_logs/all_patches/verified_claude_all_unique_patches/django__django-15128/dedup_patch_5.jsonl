{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..33bce42 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -761,7 +761,19 @@ class Query(BaseExpression):\n \n         # Create a new alias for this table.\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Find the next available number that won't conflict with existing aliases\n+            # or pending alias changes\n+            counter = len(self.alias_map) + 1\n+            while True:\n+                alias = '%s%d' % (self.alias_prefix, counter)\n+                # Check if this alias would conflict with existing aliases or pending changes\n+                if alias not in self.alias_map and not any(\n+                    alias == existing_alias or alias == new_alias\n+                    for existing_alias, join in self.alias_map.items()\n+                    for new_alias in (getattr(join, '_change_map', {}) or {}).values()\n+                ):\n+                    break\n+                counter += 1\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n@@ -846,6 +858,9 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        # This assertion ensures that no alias is both a source and target of renaming,\n+        # which would cause an alias to be changed multiple times (e.g., T4->T5 followed by T5->T6)\n+        # and potentially lead to incorrect alias resolution\n         assert set(change_map).isdisjoint(change_map.values())\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..0009633 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -429,7 +429,12 @@ class Query(BaseExpression):\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n         if alias_list:\n-            alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            counter = len(self.alias_map) + 1\n+            while True:\n+                alias = '%s%d' % (self.alias_prefix, counter)\n+                if alias not in self.alias_map and (not any((alias == existing_alias or alias == new_alias for existing_alias, join in self.alias_map.items() for new_alias in (getattr(join, '_change_map', {}) or {}).values()))):\n+                    break\n+                counter += 1\n             alias_list.append(alias)\n         else:\n             alias = filtered_relation.alias if filtered_relation is not None else table_name\n", "normalized_occurrence": 1}
