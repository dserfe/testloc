{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..f901b9b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -355,7 +355,13 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n-        # if initial was provided, it should override the values from instance\n+        \n+        # Ensure we correctly propagate callable defaults\n+        for field in opts.model._meta.fields:\n+            if callable(field.default):\n+                object_data[field.name] = field.default()\n+\n+        # if initial was provided, it should override the values from instance and callables\n         if initial is not None:\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..c6ff59b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,9 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        for field in opts.model._meta.fields:\n+            if callable(field.default):\n+                object_data[field.name] = field.default()\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
