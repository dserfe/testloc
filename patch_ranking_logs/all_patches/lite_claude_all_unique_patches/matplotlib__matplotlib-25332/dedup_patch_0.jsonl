{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex f79f174..206e4db 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -218,6 +218,16 @@ class Artist:\n         # remove the unpicklable remove method, this will get re-added on load\n         # (by the Axes) if the artist lives on an Axes.\n         d['stale_callback'] = None\n+        \n+        # Handle weak references by either dereferencing them or setting to None\n+        for k, v in list(d.items()):\n+            if isinstance(v, type(weakref.ref(object()))):\n+                try:\n+                    # Try to dereference the weakref\n+                    d[k] = v()\n+                except:\n+                    # If the referenced object is gone, set to None\n+                    d[k] = None\n         return d\n \n     def remove(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 7afacef..3730a62 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -117,6 +117,12 @@ class Artist:\n     def __getstate__(self):\n         d = self.__dict__.copy()\n         d['stale_callback'] = None\n+        for k, v in list(d.items()):\n+            if isinstance(v, type(weakref.ref(object()))):\n+                try:\n+                    d[k] = v()\n+                except:\n+                    d[k] = None\n         return d\n     def remove(self):\n         if self._remove_method is not None:\n", "normalized_occurrence": 1}
