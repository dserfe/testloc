{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-23476", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex cd28277..d3e81a8 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3030,6 +3030,7 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['dpi'] = self.dpi\n         return state\n \n     def __setstate__(self, state):\n@@ -3044,8 +3045,10 @@ class Figure(FigureBase):\n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n-        FigureCanvasBase(self)  # Set self.canvas.\n+        if not hasattr(self, 'dpi'):  # Ensure dpi is not reset\n+            FigureCanvasBase(self)  # Set self.canvas.\n \n+        self.dpi = state.get('dpi', self.dpi)\n         if restore_to_pylab:\n             # lazy import to avoid circularity\n             import matplotlib.pyplot as plt\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex f6d35a3..750f921 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -954,6 +954,7 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['dpi'] = self.dpi\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n@@ -961,7 +962,9 @@ class Figure(FigureBase):\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n-        FigureCanvasBase(self)\n+        if not hasattr(self, 'dpi'):\n+            FigureCanvasBase(self)\n+        self.dpi = state.get('dpi', self.dpi)\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n             import matplotlib._pylab_helpers as pylab_helpers\n", "normalized_occurrence": 1}
