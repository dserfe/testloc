{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..35fb0d9 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1545,11 +1545,27 @@ class LogNorm(Normalize):\n \n     def autoscale(self, A):\n         # docstring inherited.\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        # Ensure we have valid positive values for log scale\n+        A_valid = np.ma.masked_less_equal(A, 0, copy=False)\n+        A_valid = np.ma.masked_invalid(A_valid)\n+        if A_valid.count() == 0:\n+            # If no valid data, set some valid default\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            super().autoscale(A_valid)\n \n     def autoscale_None(self, A):\n         # docstring inherited.\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        if self.vmin is None or self.vmax is None:\n+            A_valid = np.ma.masked_less_equal(A, 0, copy=False)\n+            A_valid = np.ma.masked_invalid(A_valid)\n+            if A_valid.count() == 0:\n+                # If no valid data, set some valid default\n+                self.vmin = 1 if self.vmin is None else self.vmin\n+                self.vmax = 10 if self.vmax is None else self.vmax\n+            else:\n+                super().autoscale_None(A_valid)\n \n \n @_make_norm_from_scale(\n", "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..9813a67 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1330,10 +1330,23 @@ class LogNorm(Normalize):\n     \"\"\"Normalize a given value to the 0-1 range on a log scale.\"\"\"\n \n     def autoscale(self, A):\n-        super().autoscale(np.ma.masked_less_equal(A, 0, copy=False))\n+        A_valid = np.ma.masked_less_equal(A, 0, copy=False)\n+        A_valid = np.ma.masked_invalid(A_valid)\n+        if A_valid.count() == 0:\n+            self.vmin = 1\n+            self.vmax = 10\n+        else:\n+            super().autoscale(A_valid)\n \n     def autoscale_None(self, A):\n-        super().autoscale_None(np.ma.masked_less_equal(A, 0, copy=False))\n+        if self.vmin is None or self.vmax is None:\n+            A_valid = np.ma.masked_less_equal(A, 0, copy=False)\n+            A_valid = np.ma.masked_invalid(A_valid)\n+            if A_valid.count() == 0:\n+                self.vmin = 1 if self.vmin is None else self.vmin\n+                self.vmax = 10 if self.vmax is None else self.vmax\n+            else:\n+                super().autoscale_None(A_valid)\n \n @_make_norm_from_scale(scale.SymmetricalLogScale, init=lambda linthresh, linscale=1.0, vmin=None, vmax=None, clip=False, *, base=10: None)\n class SymLogNorm(Normalize):\n", "normalized_occurrence": 1}
