{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..9703099 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -955,7 +955,33 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n+            *self._check_max_length_for_choices(**kwargs),\n         ]\n+        \n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+            \n+        max_choice_length = 0\n+        for choice, _ in self.flatchoices:\n+            if choice is not None:  # Skip None values for null=True fields\n+                max_choice_length = max(max_choice_length, len(str(choice)))\n+                \n+        if max_choice_length > self.max_length:\n+            return [\n+                checks.Error(\n+                    'The max_length of %(field)s (%(max_length)s) is too small '\n+                    'to fit the longest choice (%(longest_choice)s characters).',\n+                    obj=self,\n+                    id='fields.E009',\n+                    params={\n+                        'field': self.name,\n+                        'max_length': self.max_length,\n+                        'longest_choice': max_choice_length,\n+                    },\n+                )\n+            ]\n+        return []\n \n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..6c5c1d4 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -461,7 +461,17 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs), *self._check_max_length_for_choices(**kwargs)]\n+    def _check_max_length_for_choices(self, **kwargs):\n+        if not self.choices:\n+            return []\n+        max_choice_length = 0\n+        for choice, _ in self.flatchoices:\n+            if choice is not None:\n+                max_choice_length = max(max_choice_length, len(str(choice)))\n+        if max_choice_length > self.max_length:\n+            return [checks.Error('The max_length of %(field)s (%(max_length)s) is too small to fit the longest choice (%(longest_choice)s characters).', obj=self, id='fields.E009', params={'field': self.name, 'max_length': self.max_length, 'longest_choice': max_choice_length})]\n+        return []\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n", "normalized_occurrence": 1}
