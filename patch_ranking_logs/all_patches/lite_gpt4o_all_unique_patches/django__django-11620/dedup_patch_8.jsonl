{"model_name_or_path": "agentless", "instance_id": "django__django-11620", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 37e3b61..8b2de44 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -546,28 +546,8 @@ class URLResolver:\n                         tried.extend([pattern] + t for t in sub_tried)\n                     else:\n                         tried.append([pattern])\n-                else:\n-                    if sub_match:\n-                        # Merge captured arguments in match with submatch\n-                        sub_match_dict = {**kwargs, **self.default_kwargs}\n-                        # Update the sub_match_dict with the kwargs from the sub_match.\n-                        sub_match_dict.update(sub_match.kwargs)\n-                        # If there are *any* named groups, ignore all non-named groups.\n-                        # Otherwise, pass all non-named arguments as positional arguments.\n-                        sub_match_args = sub_match.args\n-                        if not sub_match_dict:\n-                            sub_match_args = args + sub_match.args\n-                        current_route = '' if isinstance(pattern, URLPattern) else str(pattern.pattern)\n-                        return ResolverMatch(\n-                            sub_match.func,\n-                            sub_match_args,\n-                            sub_match_dict,\n-                            sub_match.url_name,\n-                            [self.app_name] + sub_match.app_names,\n-                            [self.namespace] + sub_match.namespaces,\n-                            self._join_route(current_route, sub_match.route),\n-                        )\n-                    tried.append([pattern])\n+                except Http404:\n+                    raise\n             raise Resolver404({'tried': tried, 'path': new_path})\n         raise Resolver404({'path': path})\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 24bb34e..aa33eea 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -357,16 +357,8 @@ class URLResolver:\n                         tried.extend(([pattern] + t for t in sub_tried))\n                     else:\n                         tried.append([pattern])\n-                else:\n-                    if sub_match:\n-                        sub_match_dict = {**kwargs, **self.default_kwargs}\n-                        sub_match_dict.update(sub_match.kwargs)\n-                        sub_match_args = sub_match.args\n-                        if not sub_match_dict:\n-                            sub_match_args = args + sub_match.args\n-                        current_route = '' if isinstance(pattern, URLPattern) else str(pattern.pattern)\n-                        return ResolverMatch(sub_match.func, sub_match_args, sub_match_dict, sub_match.url_name, [self.app_name] + sub_match.app_names, [self.namespace] + sub_match.namespaces, self._join_route(current_route, sub_match.route))\n-                    tried.append([pattern])\n+                except Http404:\n+                    raise\n             raise Resolver404({'tried': tried, 'path': new_path})\n         raise Resolver404({'path': path})\n     @cached_property\n", "normalized_occurrence": 1}
