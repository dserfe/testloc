{"model_name_or_path": "agentless", "instance_id": "django__django-11179", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 1dfb454..8e1df15 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n@@ -324,4 +325,8 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        result = sum(deleted_counter.values()), dict(deleted_counter)\n+        for model, instances in self.data.items():\n+            for instance in instances:\n+                setattr(instance, model._meta.pk.attname, None)\n+        return result\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 00616df..08cb8e7 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -141,6 +141,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return (count, {model._meta.label: count})\n         with transaction.atomic(using=self.using, savepoint=False):\n             for model, obj in self.instances_with_model():\n@@ -170,4 +171,8 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return (sum(deleted_counter.values()), dict(deleted_counter))\n\\ No newline at end of file\n+        result = (sum(deleted_counter.values()), dict(deleted_counter))\n+        for model, instances in self.data.items():\n+            for instance in instances:\n+                setattr(instance, model._meta.pk.attname, None)\n+        return result\n\\ No newline at end of file\n", "normalized_occurrence": 1}
