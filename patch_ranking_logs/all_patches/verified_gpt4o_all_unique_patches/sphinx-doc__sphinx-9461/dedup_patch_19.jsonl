{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..ca290c1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2663,19 +2663,25 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n                             ) -> bool:\n         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n \n-    def document_members(self, all_members: bool = False) -> None:\n-        pass\n+    def import_object(self, raiseerror: bool = False) -> bool:\n+        ret = super().import_object(raiseerror)\n+        if not ret:\n+            return ret\n \n-    def get_real_modname(self) -> str:\n-        real_modname = self.get_attr(self.parent or self.object, '__module__', None)\n-        return real_modname or self.modname\n+        # Check if the property is a class method property\n+        obj = self.parent.__dict__.get(self.object_name)\n+        if isinstance(obj, (classmethod, staticmethod)):\n+            self.object = obj.__func__\n+        return ret\n \n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n-        if inspect.isabstractmethod(self.object):\n+        obj = self.parent.__dict__.get(self.object_name, self.object)\n+        if inspect.isabstractmethod(obj):\n             self.add_line('   :abstractmethod:', sourcename)\n-\n+        if isinstance(obj, classmethod):\n+            self.add_line('   :classmethod:', sourcename)\n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n                 signature = inspect.signature(self.object.fget,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..27ec820 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1598,16 +1598,22 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n         return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n-    def document_members(self, all_members: bool=False) -> None:\n-        pass\n-    def get_real_modname(self) -> str:\n-        real_modname = self.get_attr(self.parent or self.object, '__module__', None)\n-        return real_modname or self.modname\n+    def import_object(self, raiseerror: bool=False) -> bool:\n+        ret = super().import_object(raiseerror)\n+        if not ret:\n+            return ret\n+        obj = self.parent.__dict__.get(self.object_name)\n+        if isinstance(obj, (classmethod, staticmethod)):\n+            self.object = obj.__func__\n+        return ret\n     def add_directive_header(self, sig: str) -> None:\n         super().add_directive_header(sig)\n         sourcename = self.get_sourcename()\n-        if inspect.isabstractmethod(self.object):\n+        obj = self.parent.__dict__.get(self.object_name, self.object)\n+        if inspect.isabstractmethod(obj):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if isinstance(obj, classmethod):\n+            self.add_line('   :classmethod:', sourcename)\n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n                 signature = inspect.signature(self.object.fget, type_aliases=self.config.autodoc_type_aliases)\n", "normalized_occurrence": 1}
