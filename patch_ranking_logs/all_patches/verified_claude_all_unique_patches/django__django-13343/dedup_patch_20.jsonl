{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13343", "model_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex 4e9ee79..e1d08c3 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -227,14 +227,7 @@ class FileField(Field):\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n \n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n-                raise TypeError(\n-                    \"%s.storage must be a subclass/instance of %s.%s\"\n-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n-                )\n+        self._storage = storage or default_storage\n         self.upload_to = upload_to\n \n         kwargs.setdefault('max_length', 100)\n@@ -273,13 +266,25 @@ class FileField(Field):\n         else:\n             return []\n \n+    @property\n+    def storage(self):\n+        if callable(self._storage):\n+            storage = self._storage()\n+            if not isinstance(storage, Storage):\n+                raise TypeError(\n+                    \"%s.storage must be a subclass/instance of %s.%s\"\n+                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)\n+                )\n+            return storage\n+        return self._storage\n+\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return name, path, args, kwargs\n \n     def get_internal_type(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py\nindex fc9a6b0..048ce0a 100644\n--- a/django/db/models/fields/files.py\n+++ b/django/db/models/fields/files.py\n@@ -119,11 +119,7 @@ class FileField(Field):\n     description = _('File')\n     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):\n         self._primary_key_set_explicitly = 'primary_key' in kwargs\n-        self.storage = storage or default_storage\n-        if callable(self.storage):\n-            self.storage = self.storage()\n-            if not isinstance(self.storage, Storage):\n-                raise TypeError('%s.storage must be a subclass/instance of %s.%s' % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__))\n+        self._storage = storage or default_storage\n         self.upload_to = upload_to\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -139,13 +135,21 @@ class FileField(Field):\n             return [checks.Error(\"%s's 'upload_to' argument must be a relative path, not an absolute path.\" % self.__class__.__name__, obj=self, id='fields.E202', hint='Remove the leading slash.')]\n         else:\n             return []\n+    @property\n+    def storage(self):\n+        if callable(self._storage):\n+            storage = self._storage()\n+            if not isinstance(storage, Storage):\n+                raise TypeError('%s.storage must be a subclass/instance of %s.%s' % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__))\n+            return storage\n+        return self._storage\n     def deconstruct(self):\n         name, path, args, kwargs = super().deconstruct()\n         if kwargs.get('max_length') == 100:\n             del kwargs['max_length']\n         kwargs['upload_to'] = self.upload_to\n-        if self.storage is not default_storage:\n-            kwargs['storage'] = self.storage\n+        if self._storage is not default_storage:\n+            kwargs['storage'] = self._storage\n         return (name, path, args, kwargs)\n     def get_internal_type(self):\n         return 'FileField'\n", "normalized_occurrence": 1}
