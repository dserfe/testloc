{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..3c4fb0d 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -397,39 +397,8 @@ class LatexPrinter(Printer):\n         else:\n             snumer = convert(numer)\n             sdenom = convert(denom)\n-            ldenom = len(sdenom.split())\n-            ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n-                # handle short fractions\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n-                else:\n-                    tex += r\"%s / %s\" % (snumer, sdenom)\n-            elif len(snumer.split()) > ratio*ldenom:\n-                # handle long fractions\n-                if self._needs_mul_brackets(numer, last=True):\n-                    tex += r\"\\frac{1}{%s}%s\\left(%s\\right)\" \\\n-                        % (sdenom, separator, snumer)\n-                elif numer.is_Mul:\n-                    # split a long numerator\n-                    a = S.One\n-                    b = S.One\n-                    for x in numer.args:\n-                        if self._needs_mul_brackets(x, last=False) or \\\n-                                len(convert(a*x).split()) > ratio*ldenom or \\\n-                                (b.is_commutative is x.is_commutative is False):\n-                            b *= x\n-                        else:\n-                            a *= x\n-                    if self._needs_mul_brackets(b, last=True):\n-                        tex += r\"\\frac{%s}{%s}%s\\left(%s\\right)\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                    else:\n-                        tex += r\"\\frac{%s}{%s}%s%s\" \\\n-                            % (convert(a), sdenom, separator, convert(b))\n-                else:\n-                    tex += r\"\\frac{1}{%s}%s%s\" % (sdenom, separator, snumer)\n+            if numer == 1 and not self._needs_mul_brackets(denom, last=True):\n+                tex += r\"\\frac{1}{%s}\" % sdenom\n             else:\n                 tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..b246d5a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -194,30 +194,8 @@ class LatexPrinter(Printer):\n         else:\n             snumer = convert(numer)\n             sdenom = convert(denom)\n-            ldenom = len(sdenom.split())\n-            ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n-                else:\n-                    tex += '%s / %s' % (snumer, sdenom)\n-            elif len(snumer.split()) > ratio * ldenom:\n-                if self._needs_mul_brackets(numer, last=True):\n-                    tex += '\\\\frac{1}{%s}%s\\\\left(%s\\\\right)' % (sdenom, separator, snumer)\n-                elif numer.is_Mul:\n-                    a = S.One\n-                    b = S.One\n-                    for x in numer.args:\n-                        if self._needs_mul_brackets(x, last=False) or len(convert(a * x).split()) > ratio * ldenom or b.is_commutative is x.is_commutative is False:\n-                            b *= x\n-                        else:\n-                            a *= x\n-                    if self._needs_mul_brackets(b, last=True):\n-                        tex += '\\\\frac{%s}{%s}%s\\\\left(%s\\\\right)' % (convert(a), sdenom, separator, convert(b))\n-                    else:\n-                        tex += '\\\\frac{%s}{%s}%s%s' % (convert(a), sdenom, separator, convert(b))\n-                else:\n-                    tex += '\\\\frac{1}{%s}%s%s' % (sdenom, separator, snumer)\n+            if numer == 1 and (not self._needs_mul_brackets(denom, last=True)):\n+                tex += '\\\\frac{1}{%s}' % sdenom\n             else:\n                 tex += '\\\\frac{%s}{%s}' % (snumer, sdenom)\n         if include_parens:\n", "normalized_occurrence": 1}
