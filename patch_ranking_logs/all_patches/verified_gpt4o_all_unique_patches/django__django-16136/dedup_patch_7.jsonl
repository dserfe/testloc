{"model_name_or_path": "agentless", "instance_id": "django__django-16136", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 940d12d..b086451 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -162,11 +162,19 @@ class BaseHandler:\n         response = await self._middleware_chain(request)\n         response._resource_closers.append(request.close)\n         if response.status_code >= 400:\n-            await sync_to_async(log_response, thread_sensitive=False)(\n-                \"%s: %s\",\n-                response.reason_phrase,\n-                request.path,\n-                response=response,\n+            if isinstance(response, HttpResponseNotAllowed):\n+                log_response(\n+                    \"%s: %s\",\n+                    response.reason_phrase,\n+                    request.path,\n+                    response=response,\n+                )\n+            else:\n+                await sync_to_async(log_response, thread_sensitive=False)(\n+                    \"%s: %s\",\n+                    response.reason_phrase,\n+                    request.path,\n+                    response=response,\n                 request=request,\n             )\n         return response\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 5df17b3..8089036 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -84,7 +84,10 @@ class BaseHandler:\n         response = await self._middleware_chain(request)\n         response._resource_closers.append(request.close)\n         if response.status_code >= 400:\n-            await sync_to_async(log_response, thread_sensitive=False)('%s: %s', response.reason_phrase, request.path, response=response, request=request)\n+            if isinstance(response, HttpResponseNotAllowed):\n+                log_response('%s: %s', response.reason_phrase, request.path, response=response)\n+            else:\n+                await sync_to_async(log_response, thread_sensitive=False)('%s: %s', response.reason_phrase, request.path, response=response, request=request)\n         return response\n     def _get_response(self, request):\n         response = None\n", "normalized_occurrence": 1}
