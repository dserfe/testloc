{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..2491bff 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1220,6 +1220,12 @@ class QuerySet:\n         clone = self._chain()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n+        elif clone.query.deferred_loading[1]:\n+            # If there are any deferred fields, remove them from the immediate loading set\n+            existing_deferred_fields, _ = clone.query.deferred_loading\n+            fields_to_load = set(fields).difference(existing_deferred_fields)\n+            clone.query.add_immediate_loading(fields_to_load)\n+            clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n         return clone\n@@ -1234,6 +1240,12 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call only() after .values() or .values_list()\")\n         if fields == (None,):\n+            clone.query.clear_deferred_loading()\n+        elif clone.query.deferred_loading[1]:\n+            # If there are any deferred fields, remove them from the immediate loading set\n+            existing_deferred_fields, _ = clone.query.deferred_loading\n+            fields_to_load = set(fields).difference(existing_deferred_fields)\n+            clone.query.add_immediate_loading(fields_to_load)\n             # Can only pass None to defer(), not only(), as the rest option.\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..7c1eead 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -740,6 +740,11 @@ class QuerySet:\n         clone = self._chain()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n+        elif clone.query.deferred_loading[1]:\n+            existing_deferred_fields, _ = clone.query.deferred_loading\n+            fields_to_load = set(fields).difference(existing_deferred_fields)\n+            clone.query.add_immediate_loading(fields_to_load)\n+            clone.query.clear_deferred_loading()\n         else:\n             clone.query.add_deferred_loading(fields)\n         return clone\n@@ -748,6 +753,11 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError('Cannot call only() after .values() or .values_list()')\n         if fields == (None,):\n+            clone.query.clear_deferred_loading()\n+        elif clone.query.deferred_loading[1]:\n+            existing_deferred_fields, _ = clone.query.deferred_loading\n+            fields_to_load = set(fields).difference(existing_deferred_fields)\n+            clone.query.add_immediate_loading(fields_to_load)\n             raise TypeError('Cannot pass None as an argument to only().')\n         for field in fields:\n             field = field.split(LOOKUP_SEP, 1)[0]\n", "normalized_occurrence": 1}
