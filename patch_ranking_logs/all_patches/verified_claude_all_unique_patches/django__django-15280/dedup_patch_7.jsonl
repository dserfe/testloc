{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..2a3475f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -190,7 +190,11 @@ class ForwardManyToOneDescriptor:\n                 # cache on the related object to the current instance to avoid\n                 # an extra SQL query if it's accessed later on.\n                 if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n+                    # Preserve the deferred fields state from the prefetched queryset\n+                    if hasattr(instance, '_prefetched_objects_cache') and self.field.name in instance._prefetched_objects_cache:\n+                        remote_field.set_cached_value(rel_obj, instance._prefetched_objects_cache[self.field.name])\n+                    else:\n+                        remote_field.set_cached_value(rel_obj, instance)\n             self.field.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None and not self.field.null:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..96e8ec5 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -59,7 +59,10 @@ class ForwardManyToOneDescriptor:\n                 rel_obj = self.get_object(instance)\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n+                    if hasattr(instance, '_prefetched_objects_cache') and self.field.name in instance._prefetched_objects_cache:\n+                        remote_field.set_cached_value(rel_obj, instance._prefetched_objects_cache[self.field.name])\n+                    else:\n+                        remote_field.set_cached_value(rel_obj, instance)\n             self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n", "normalized_occurrence": 1}
