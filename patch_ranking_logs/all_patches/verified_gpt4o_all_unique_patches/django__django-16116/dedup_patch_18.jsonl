{"model_name_or_path": "agentless", "instance_id": "django__django-16116", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex f0e76b4..9c5fde1 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -234,6 +234,21 @@ class Command(BaseCommand):\n             migration_name=self.migration_name,\n         )\n \n+        if check_changes:\n+            # Skip making migrations and exit if --check is provided\n+            if changes:\n+                sys.exit(1)\n+            else:\n+                if self.verbosity >= 1:\n+                    if app_labels:\n+                        if len(app_labels) == 1:\n+                            self.log(\"No changes detected in app '%s'\" % app_labels.pop())\n+                        else:\n+                            self.log(\"No changes detected in apps '%s'\" % (\"', '\".join(app_labels)))\n+                    else:\n+                        self.log(\"No changes detected\")\n+                sys.exit(0)\n+\n         if not changes:\n             # No changes? Tell them.\n             if self.verbosity >= 1:\n@@ -241,10 +256,7 @@ class Command(BaseCommand):\n                     if len(app_labels) == 1:\n                         self.log(\"No changes detected in app '%s'\" % app_labels.pop())\n                     else:\n-                        self.log(\n-                            \"No changes detected in apps '%s'\"\n-                            % (\"', '\".join(app_labels))\n-                        )\n+                        self.log(\"No changes detected in apps '%s'\" % (\"', '\".join(app_labels)))\n                 else:\n                     self.log(\"No changes detected\")\n         else:\n@@ -252,8 +264,6 @@ class Command(BaseCommand):\n                 self.write_to_last_migration_files(changes)\n             else:\n                 self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex be2b711..f675177 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -95,6 +95,19 @@ class Command(BaseCommand):\n             self.write_migration_files(changes)\n             return\n         changes = autodetector.changes(graph=loader.graph, trim_to_apps=app_labels or None, convert_apps=app_labels or None, migration_name=self.migration_name)\n+        if check_changes:\n+            if changes:\n+                sys.exit(1)\n+            else:\n+                if self.verbosity >= 1:\n+                    if app_labels:\n+                        if len(app_labels) == 1:\n+                            self.log(\"No changes detected in app '%s'\" % app_labels.pop())\n+                        else:\n+                            self.log(\"No changes detected in apps '%s'\" % \"', '\".join(app_labels))\n+                    else:\n+                        self.log('No changes detected')\n+                sys.exit(0)\n         if not changes:\n             if self.verbosity >= 1:\n                 if app_labels:\n@@ -104,13 +117,10 @@ class Command(BaseCommand):\n                         self.log(\"No changes detected in apps '%s'\" % \"', '\".join(app_labels))\n                 else:\n                     self.log('No changes detected')\n+        elif self.update:\n+            self.write_to_last_migration_files(changes)\n         else:\n-            if self.update:\n-                self.write_to_last_migration_files(changes)\n-            else:\n-                self.write_migration_files(changes)\n-            if check_changes:\n-                sys.exit(1)\n+            self.write_migration_files(changes)\n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n         new_changes = {}\n", "normalized_occurrence": 1}
