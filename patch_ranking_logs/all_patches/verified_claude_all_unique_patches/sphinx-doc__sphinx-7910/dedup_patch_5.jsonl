{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 87c3fb8..cbfec91 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1312,7 +1312,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             attr = self.get_attr(obj, attr, None)\n             if not (inspect.ismethod(attr) or inspect.isfunction(attr)):\n                 return None\n-            return attr\n+            # Fully unwrap the method to handle decorated functions\n+            from sphinx.util.inspect import unwrap_all\n+            return unwrap_all(attr)\n \n         # This sequence is copied from inspect._signature_from_callable.\n         # ValueError means that no signature could be found, so we keep going.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 69b2ccc..6bc2e84 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -960,7 +960,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             attr = self.get_attr(obj, attr, None)\n             if not (inspect.ismethod(attr) or inspect.isfunction(attr)):\n                 return None\n-            return attr\n+            from sphinx.util.inspect import unwrap_all\n+            return unwrap_all(attr)\n         call = get_user_defined_function_or_method(type(self.object), '__call__')\n         if call is not None:\n             if '{0.__module__}.{0.__qualname__}'.format(call) in _METACLASS_CALL_BLACKLIST:\n", "normalized_occurrence": 1}
