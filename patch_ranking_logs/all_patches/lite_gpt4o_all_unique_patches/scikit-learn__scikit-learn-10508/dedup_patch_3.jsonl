{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10508", "model_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 8d1b39c..50765c5 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -127,11 +127,14 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n         check_is_fitted(self, 'classes_')\n         y = column_or_1d(y, warn=True)\n \n-        classes = np.unique(y)\n-        if len(np.intersect1d(classes, self.classes_)) < len(classes):\n-            diff = np.setdiff1d(classes, self.classes_)\n-            raise ValueError(\n-                    \"y contains previously unseen labels: %s\" % str(diff))\n+        if y.size == 0:\n+            return np.array([], dtype=self.classes_.dtype)\n+        else:\n+            classes = np.unique(y)\n+            if len(np.intersect1d(classes, self.classes_)) < len(classes):\n+                diff = np.setdiff1d(classes, self.classes_)\n+                raise ValueError(\n+                        \"y contains previously unseen labels: %s\" % str(diff))\n         return np.searchsorted(self.classes_, y)\n \n     def inverse_transform(self, y):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/label.py b/sklearn/preprocessing/label.py\nindex 7e12a65..2237ddb 100644\n--- a/sklearn/preprocessing/label.py\n+++ b/sklearn/preprocessing/label.py\n@@ -27,10 +27,13 @@ class LabelEncoder(BaseEstimator, TransformerMixin):\n     def transform(self, y):\n         check_is_fitted(self, 'classes_')\n         y = column_or_1d(y, warn=True)\n-        classes = np.unique(y)\n-        if len(np.intersect1d(classes, self.classes_)) < len(classes):\n-            diff = np.setdiff1d(classes, self.classes_)\n-            raise ValueError('y contains previously unseen labels: %s' % str(diff))\n+        if y.size == 0:\n+            return np.array([], dtype=self.classes_.dtype)\n+        else:\n+            classes = np.unique(y)\n+            if len(np.intersect1d(classes, self.classes_)) < len(classes):\n+                diff = np.setdiff1d(classes, self.classes_)\n+                raise ValueError('y contains previously unseen labels: %s' % str(diff))\n         return np.searchsorted(self.classes_, y)\n     def inverse_transform(self, y):\n         check_is_fitted(self, 'classes_')\n", "normalized_occurrence": 1}
