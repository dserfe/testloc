{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..6208534 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -258,6 +258,9 @@ class QuerySet:\n                 stacklevel=2,\n             )\n         self.__dict__.update(state)\n+        # Restore values() behavior if this was a values query\n+        if getattr(self.query, 'is_values_query', False):\n+            self._iterable_class = ValuesIterable\n \n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\ndiff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..2068466 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2181,6 +2181,7 @@ class Query(BaseExpression):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        self.is_values_query = True\n \n         if fields:\n             field_names = []\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..32a1475 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1173,6 +1173,7 @@ class Query(BaseExpression):\n         self.select_related = False\n         self.clear_deferred_loading()\n         self.clear_select_fields()\n+        self.is_values_query = True\n         if fields:\n             field_names = []\n             extra_names = []\ndiff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..4b37396 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -152,6 +152,8 @@ class QuerySet:\n         else:\n             warnings.warn(\"Pickled queryset instance's Django version is not specified.\", RuntimeWarning, stacklevel=2)\n         self.__dict__.update(state)\n+        if getattr(self.query, 'is_values_query', False):\n+            self._iterable_class = ValuesIterable\n     def __repr__(self):\n         data = list(self[:REPR_OUTPUT_SIZE + 1])\n         if len(data) > REPR_OUTPUT_SIZE:\n", "normalized_occurrence": 1}
