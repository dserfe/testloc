{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..5478011 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -697,8 +697,12 @@ class _EvaluatorPrinter(object):\n \n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) \\\n-                and not (keyword.iskeyword(ident) or ident == 'None')\n+            # First check if it's a string and not a keyword/None\n+            if not isinstance(ident, str) or keyword.iskeyword(ident) or ident == 'None':\n+                return False\n+            # Then check if it contains any special characters (including {})\n+            # by using the regex pattern\n+            return bool(cls._safe_ident_re.match(ident))\n \n \n     def _preprocess(self, args, expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..7ae675e 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -280,7 +280,9 @@ class _EvaluatorPrinter(object):\n         _safe_ident_re = re.compile('^[a-zA-Z_][a-zA-Z0-9_]*$')\n         @classmethod\n         def _is_safe_ident(cls, ident):\n-            return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n+            if not isinstance(ident, str) or keyword.iskeyword(ident) or ident == 'None':\n+                return False\n+            return bool(cls._safe_ident_re.match(ident))\n     def _preprocess(self, args, expr):\n         from sympy import Dummy, Symbol, Function, flatten\n         from sympy.matrices import DeferredVector\n", "normalized_occurrence": 1}
