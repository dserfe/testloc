{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7b7b907 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -1027,9 +1027,47 @@ warn_explicit(\n         outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n         return res, outer_expl\n \n-    # ast.Call signature changed on 3.5,\n-    # conditionally change  which methods is named\n-    # visit_Call depending on Python version\n+    def visit_Call(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+\n+        # Special handling for `all` and `any` to unroll iterables\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            var_name = self.variable()\n+            new_body = [\n+                ast.Assign(targets=[ast.Name(id=var_name, ctx=ast.Store())], value=new_args[0])\n+            ]\n+            new_args = [ast.Name(id=var_name, ctx=ast.Load())]\n+            for idx, item in enumerate(ast.iter_child_nodes(new_args[0])):\n+                new_body.append(\n+                    ast.If(\n+                        test=ast.UnaryOp(ast.Not(), ast.Call(func=call.func, args=[item], keywords=[])),\n+                        body=[\n+                            ast.Raise(\n+                                exc=ast.Call(\n+                                    func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                                    args=[ast.Str(s=f\"{call.func.id} failed at index {idx}, value: {ast.dump(item)}\")],\n+                                    keywords=[]\n+                                ),\n+                                cause=None\n+                            )\n+                        ],\n+                        orelse=[]\n+                    )\n+                )\n+            self.statements.extend(new_body)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, call.keywords)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n     if sys.version_info >= (3, 5):\n         visit_Call = visit_Call_35\n     else:\n@@ -1081,4 +1119,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n+    def visit_Call(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            var_name = self.variable()\n+            new_body = [ast.Assign(targets=[ast.Name(id=var_name, ctx=ast.Store())], value=new_args[0])]\n+            new_args = [ast.Name(id=var_name, ctx=ast.Load())]\n+            for idx, item in enumerate(ast.iter_child_nodes(new_args[0])):\n+                new_body.append(ast.If(test=ast.UnaryOp(ast.Not(), ast.Call(func=call.func, args=[item], keywords=[])), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.Str(s=f'{call.func.id} failed at index {idx}, value: {ast.dump(item)}')], keywords=[]), cause=None)], orelse=[]))\n+            self.statements.extend(new_body)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, call.keywords)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)", "normalized_occurrence": 1}
