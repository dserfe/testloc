{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..b5953de 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -599,14 +599,26 @@ class Query(BaseExpression):\n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n+        def get_next_available_alias(current_alias):\n+            base_alias = current_alias.rstrip('0123456789')\n+            suffix = 1\n+            while f\"{base_alias}{suffix}\" in self.alias_map or f\"{base_alias}{suffix}\" in change_map.values():\n+                suffix += 1\n+            return f\"{base_alias}{suffix}\"\n+\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            \n+            # Ensure new_alias does not conflict with change_map's values\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n+            while new_alias in change_map.values():\n+                new_alias = get_next_available_alias(new_alias)\n+                \n             # We can't reuse the same join again in the query. If we have two\n             # distinct joins for the same connection in rhs query, then the\n             # combined query must have two joins, too.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..62fedcd 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -333,12 +333,20 @@ class Query(BaseExpression):\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n         rhs_tables = list(rhs.alias_map)[1:]\n+        def get_next_available_alias(current_alias):\n+            base_alias = current_alias.rstrip('0123456789')\n+            suffix = 1\n+            while f'{base_alias}{suffix}' in self.alias_map or f'{base_alias}{suffix}' in change_map.values():\n+                suffix += 1\n+            return f'{base_alias}{suffix}'\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n+            while new_alias in change_map.values():\n+                new_alias = get_next_available_alias(new_alias)\n             reuse.discard(new_alias)\n             if alias != new_alias:\n                 change_map[alias] = new_alias\n", "normalized_occurrence": 1}
