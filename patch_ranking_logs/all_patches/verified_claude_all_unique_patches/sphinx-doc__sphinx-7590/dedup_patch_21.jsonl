{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7590", "model_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 71a23bd..be5a7ca 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -4682,8 +4682,22 @@ class DefinitionParser(BaseParser):\n                 self.fail(\"Can not handle character literal\"\n                           \" resulting in multiple decoded characters.\")\n \n-        # TODO: user-defined lit\n-        return None\n+        # handle user-defined literals\n+        if self.current_char in '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n+            # scan the UDL suffix\n+            pos = self.pos\n+            self.pos += 1\n+            while self.pos < len(self.definition):\n+                c = self.definition[self.pos]\n+                if not (c in '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' or\n+                       c in '0123456789'):\n+                    break\n+                self.pos += 1\n+            # extract the suffix\n+            suffix = self.definition[pos:self.pos]\n+            self.last_match = None\n+            return ASTNumberLiteral(prev.data + suffix)\n+        return prev\n \n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         # \"(\" expression \")\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/cpp.py b/sphinx/domains/cpp.py\nindex 4396875..8f2971c 100644\n--- a/sphinx/domains/cpp.py\n+++ b/sphinx/domains/cpp.py\n@@ -3074,7 +3074,18 @@ class DefinitionParser(BaseParser):\n                 self.fail('Can not handle character literal. Internal error was: %s' % e)\n             except UnsupportedMultiCharacterCharLiteral:\n                 self.fail('Can not handle character literal resulting in multiple decoded characters.')\n-        return None\n+        if self.current_char in '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n+            pos = self.pos\n+            self.pos += 1\n+            while self.pos < len(self.definition):\n+                c = self.definition[self.pos]\n+                if not (c in '_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' or c in '0123456789'):\n+                    break\n+                self.pos += 1\n+            suffix = self.definition[pos:self.pos]\n+            self.last_match = None\n+            return ASTNumberLiteral(prev.data + suffix)\n+        return prev\n     def _parse_fold_or_paren_expression(self) -> ASTExpression:\n         if self.current_char != '(':\n             return None\n", "normalized_occurrence": 1}
