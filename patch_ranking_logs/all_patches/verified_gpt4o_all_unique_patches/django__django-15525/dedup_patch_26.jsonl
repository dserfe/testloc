{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex 07a02ab..1b47ecc 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -152,7 +152,7 @@ def Deserializer(\n             ):\n                 try:\n                     value = base.deserialize_fk_value(\n-                        field, field_value, using, handle_forward_references\n+                        field, field_value, using=using, handle_forward_references=handle_forward_references\n                     )\n                 except Exception as e:\n                     raise base.DeserializationError.WithData(\n@@ -182,4 +182,4 @@ def _get_model(model_identifier):\n     except (LookupError, TypeError):\n         raise base.DeserializationError(\n             \"Invalid model identifier: '%s'\" % model_identifier\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py\nindex e208b62..43ebe3a 100644\n--- a/django/core/serializers/python.py\n+++ b/django/core/serializers/python.py\n@@ -84,7 +84,7 @@ def Deserializer(object_list, *, using=DEFAULT_DB_ALIAS, ignorenonexistent=False\n                     m2m_data[field.name] = values\n             elif field.remote_field and isinstance(field.remote_field, models.ManyToOneRel):\n                 try:\n-                    value = base.deserialize_fk_value(field, field_value, using, handle_forward_references)\n+                    value = base.deserialize_fk_value(field, field_value, using=using, handle_forward_references=handle_forward_references)\n                 except Exception as e:\n                     raise base.DeserializationError.WithData(e, d['model'], d.get('pk'), field_value)\n                 if value == base.DEFER_FIELD:\n", "normalized_occurrence": 1}
