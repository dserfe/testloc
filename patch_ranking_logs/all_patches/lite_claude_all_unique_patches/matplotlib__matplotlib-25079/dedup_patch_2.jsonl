{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..c36797c 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -611,11 +611,17 @@ class ScalarMappable:\n \n         in_init = self.norm is None\n         # Remove the current callback and connect to the new one\n-        if not in_init:\n-            self.norm.callbacks.disconnect(self._id_norm)\n+        old_norm = getattr(self, '_norm', None)\n+        if not in_init and old_norm is not None:\n+            old_norm.callbacks.disconnect(self._id_norm)\n+            # Transfer vmin/vmax from old norm if new norm limits not set\n+            if norm is not None and (norm.vmin is None or norm.vmax is None):\n+                norm.vmin = old_norm.vmin\n+                norm.vmax = old_norm.vmax\n         self._norm = norm\n-        self._id_norm = self.norm.callbacks.connect('changed',\n-                                                    self.changed)\n+        if norm is not None:\n+            self._id_norm = self.norm.callbacks.connect('changed',\n+                                                      self.changed)\n         if not in_init:\n             self.changed()\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..32dad49 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -188,10 +188,15 @@ class ScalarMappable:\n         if norm is self.norm:\n             return\n         in_init = self.norm is None\n-        if not in_init:\n-            self.norm.callbacks.disconnect(self._id_norm)\n+        old_norm = getattr(self, '_norm', None)\n+        if not in_init and old_norm is not None:\n+            old_norm.callbacks.disconnect(self._id_norm)\n+            if norm is not None and (norm.vmin is None or norm.vmax is None):\n+                norm.vmin = old_norm.vmin\n+                norm.vmax = old_norm.vmax\n         self._norm = norm\n-        self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n+        if norm is not None:\n+            self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n             self.changed()\n     def set_norm(self, norm):\n", "normalized_occurrence": 1}
