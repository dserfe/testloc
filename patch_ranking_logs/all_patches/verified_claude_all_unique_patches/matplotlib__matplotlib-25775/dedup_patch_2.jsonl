{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..102e8dd 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -135,6 +135,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = x, y\n         self._text = ''\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self._reset_visual_defaults(\n             text=text,\n             color=color,\n@@ -737,6 +738,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n \n             angle = self.get_rotation()\n@@ -1317,6 +1319,23 @@ class Text(Artist):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether text should be antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, antialiased):\n+        \"\"\"\n+        Set whether to use antialiased text rendering.\n+\n+        Parameters\n+        ----------\n+        antialiased : bool\n+            If True, text will be antialiased. If False, text will not be\n+            antialiased.\n+        \"\"\"\n+        self._antialiased = antialiased\n+        self.stale = True\n+\n     def set_fontname(self, fontname):\n         \"\"\"\n         Alias for `set_family`.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..8cc937a 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -45,6 +45,7 @@ class Text(Artist):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n@@ -370,6 +371,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n             angle = self.get_rotation()\n             for line, wh, x, y in info:\n@@ -546,6 +548,11 @@ class Text(Artist):\n         self._parse_math = bool(parse_math)\n     def get_parse_math(self):\n         return self._parse_math\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, antialiased):\n+        self._antialiased = antialiased\n+        self.stale = True\n     def set_fontname(self, fontname):\n         return self.set_family(fontname)\n class OffsetFrom:\n", "normalized_occurrence": 1}
