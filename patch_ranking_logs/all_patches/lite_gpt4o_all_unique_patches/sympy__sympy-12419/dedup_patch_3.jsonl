{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..1893561 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -433,6 +433,57 @@ class MatrixSymbol(MatrixExpr):\n         else:\n             return self\n \n+class Identity(MatrixExpr):\n+    \"\"\"The Matrix Identity I - multiplicative identity\n+\n+    >>> from sympy.matrices import Identity, MatrixSymbol\n+    >>> A = MatrixSymbol('A', 3, 5)\n+    >>> I = Identity(3)\n+    >>> I*A\n+    A\n+    \"\"\"\n+\n+    is_Identity = True\n+\n+    def __new__(cls, n):\n+        return super(Identity, cls).__new__(cls, sympify(n))\n+\n+    @property\n+    def rows(self):\n+        return self.args[0]\n+\n+    @property\n+    def cols(self):\n+        return self.args[0]\n+\n+    @property\n+    def shape(self):\n+        return (self.args[0], self.args[0])\n+\n+    def _eval_transpose(self):\n+        return self\n+\n+    def _eval_trace(self):\n+        return self.rows\n+\n+    def _eval_inverse(self):\n+        return self\n+\n+    def conjugate(self):\n+        return self\n+\n+    def _entry(self, i, j):\n+        if i == j:\n+            return S.One\n+        else:\n+            return S.Zero\n+\n+    def _eval_determinant(self):\n+        return S.One\n+\n+    def doit(self, **hints):\n+        return self\n+\n     def _eval_simplify(self, **kwargs):\n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 9ec3ea5..2195ad0 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -257,6 +257,36 @@ class MatrixSymbol(MatrixExpr):\n             return type(self)(self.name, self.args[1].doit(**hints), self.args[2].doit(**hints))\n         else:\n             return self\n+class Identity(MatrixExpr):\n+    is_Identity = True\n+    def __new__(cls, n):\n+        return super(Identity, cls).__new__(cls, sympify(n))\n+    @property\n+    def rows(self):\n+        return self.args[0]\n+    @property\n+    def cols(self):\n+        return self.args[0]\n+    @property\n+    def shape(self):\n+        return (self.args[0], self.args[0])\n+    def _eval_transpose(self):\n+        return self\n+    def _eval_trace(self):\n+        return self.rows\n+    def _eval_inverse(self):\n+        return self\n+    def conjugate(self):\n+        return self\n+    def _entry(self, i, j):\n+        if i == j:\n+            return S.One\n+        else:\n+            return S.Zero\n+    def _eval_determinant(self):\n+        return S.One\n+    def doit(self, **hints):\n+        return self\n     def _eval_simplify(self, **kwargs):\n         return self\n class Identity(MatrixExpr):\n", "normalized_occurrence": 1}
