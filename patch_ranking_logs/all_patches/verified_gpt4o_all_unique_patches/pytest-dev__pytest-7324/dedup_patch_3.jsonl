{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..06fd86c 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -267,7 +267,8 @@ class pytestPDB:\n         \"\"\"Invoke debugging via ``Pdb.set_trace``, dropping any IO capturing.\"\"\"\n         frame = sys._getframe().f_back\n         _pdb = cls._init_pdb(\"set_trace\", *args, **kwargs)\n-        _pdb.set_trace(frame)\n+        # Ensure no problematic keywords are used in debug builds of Python 3.8+\n+        _pdb.set_trace(frame, skip=[\"None\", \"True\", \"False\"])\n \n \n class PdbInvoke:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..255fe30 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -161,7 +161,7 @@ class pytestPDB:\n     def set_trace(cls, *args, **kwargs) -> None:\n         frame = sys._getframe().f_back\n         _pdb = cls._init_pdb('set_trace', *args, **kwargs)\n-        _pdb.set_trace(frame)\n+        _pdb.set_trace(frame, skip=['None', 'True', 'False'])\n class PdbInvoke:\n     def pytest_exception_interact(self, node: Node, call: 'CallInfo', report: BaseReport) -> None:\n         capman = node.config.pluginmanager.getplugin('capturemanager')\n", "normalized_occurrence": 1}
