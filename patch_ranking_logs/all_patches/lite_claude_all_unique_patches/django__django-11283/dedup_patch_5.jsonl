{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11283", "model_patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\nindex e1e636f..3b3dd9b 100644\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -1,3 +1,4 @@\n+\n from django.db import migrations\n from django.db.models import Q\n \n@@ -9,6 +10,43 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n     \"\"\"\n     Permission = apps.get_model('auth', 'Permission')\n     ContentType = apps.get_model('contenttypes', 'ContentType')\n+    for Model in apps.get_models():\n+        opts = Model._meta\n+        if not opts.proxy:\n+            continue\n+        proxy_default_permissions_codenames = [\n+            '%s_%s' % (action, opts.model_name)\n+            for action in opts.default_permissions\n+        ]\n+        permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n+        for codename, name in opts.permissions:\n+            permissions_query = permissions_query | Q(codename=codename, name=name)\n+        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n+        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n+        old_content_type = proxy_content_type if reverse else concrete_content_type\n+        new_content_type = concrete_content_type if reverse else proxy_content_type\n+\n+        # Get all affected permissions\n+        permissions = Permission.objects.filter(\n+            permissions_query,\n+            content_type=old_content_type,\n+        )\n+        \n+        # For each permission, check if it can be safely updated\n+        for perm in permissions:\n+            # Check if a permission with same codename already exists for the new content type\n+            if not Permission.objects.filter(\n+                codename=perm.codename,\n+                content_type=new_content_type\n+            ).exists():\n+                perm.content_type = new_content_type\n+                perm.save()\n+    \"\"\"\n+    Update the content_type of proxy model permissions to use the ContentType\n+    of the proxy model.\n+    \"\"\"\n+    Permission = apps.get_model('auth', 'Permission')\n+    ContentType = apps.get_model('contenttypes', 'ContentType')\n     for Model in apps.get_models():\n         opts = Model._meta\n         if not opts.proxy:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\nindex 15a57c8..b70c891 100644\n--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py\n@@ -1,6 +1,26 @@\n from django.db import migrations\n from django.db.models import Q\n def update_proxy_model_permissions(apps, schema_editor, reverse=False):\n+    Permission = apps.get_model('auth', 'Permission')\n+    ContentType = apps.get_model('contenttypes', 'ContentType')\n+    for Model in apps.get_models():\n+        opts = Model._meta\n+        if not opts.proxy:\n+            continue\n+        proxy_default_permissions_codenames = ['%s_%s' % (action, opts.model_name) for action in opts.default_permissions]\n+        permissions_query = Q(codename__in=proxy_default_permissions_codenames)\n+        for codename, name in opts.permissions:\n+            permissions_query = permissions_query | Q(codename=codename, name=name)\n+        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)\n+        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)\n+        old_content_type = proxy_content_type if reverse else concrete_content_type\n+        new_content_type = concrete_content_type if reverse else proxy_content_type\n+        permissions = Permission.objects.filter(permissions_query, content_type=old_content_type)\n+        for perm in permissions:\n+            if not Permission.objects.filter(codename=perm.codename, content_type=new_content_type).exists():\n+                perm.content_type = new_content_type\n+                perm.save()\n+    '\\n    Update the content_type of proxy model permissions to use the ContentType\\n    of the proxy model.\\n    '\n     Permission = apps.get_model('auth', 'Permission')\n     ContentType = apps.get_model('contenttypes', 'ContentType')\n     for Model in apps.get_models():\n", "normalized_occurrence": 1}
