{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 0831e79..b1b782d 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -233,6 +233,8 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return self._print_NaN(expr)\n \n     def _print_Mod(self, expr):\n+        if self._settings.get('modules') == []:\n+            return 'Mod({}, {})'.format(self._print(expr.args[0]), self._print(expr.args[1]))\n         PREC = precedence(expr)\n         return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex f217d9a..a8146c4 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -108,6 +108,8 @@ class AbstractPythonCodePrinter(CodePrinter):\n     def _print_ComplexInfinity(self, expr):\n         return self._print_NaN(expr)\n     def _print_Mod(self, expr):\n+        if self._settings.get('modules') == []:\n+            return 'Mod({}, {})'.format(self._print(expr.args[0]), self._print(expr.args[1]))\n         PREC = precedence(expr)\n         return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n     def _print_Piecewise(self, expr):\n", "normalized_occurrence": 1}
