{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex ed8f4af..2dc2007 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -293,27 +293,31 @@ class BaseHandler:\n         \"\"\"\n         Raise an error if the view returned None or an uncalled coroutine.\n         \"\"\"\n-        if not(response is None or asyncio.iscoroutine(response)):\n-            return\n-        if not name:\n-            if isinstance(callback, types.FunctionType):  # FBV\n-                name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n-            else:  # CBV\n-                name = 'The view %s.%s.__call__' % (\n-                    callback.__module__,\n-                    callback.__class__.__name__,\n+        if response is None or asyncio.iscoroutine(response):\n+            if not name:\n+                if isinstance(callback, types.FunctionType):  # FBV\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:  # CBV\n+                    name = 'The view %s.%s.__call__' % (\n+                        callback.__module__,\n+                        callback.__class__.__name__,\n+                    )\n+            if response is None:\n+                raise ValueError(\n+                    \"%s didn't return an HttpResponse object. It returned None \"\n+                    \"instead.\" % name\n                 )\n-        if response is None:\n-            raise ValueError(\n-                \"%s didn't return an HttpResponse object. It returned None \"\n-                \"instead.\" % name\n-            )\n-        elif asyncio.iscoroutine(response):\n-            raise ValueError(\n-                \"%s didn't return an HttpResponse object. It returned an \"\n-                \"unawaited coroutine instead. You may need to add an 'await' \"\n-                \"into your view.\" % name\n-            )\n+            elif asyncio.iscoroutine(response):\n+                # Await the coroutine to get the actual response\n+                try:\n+                    response = await response\n+                except RuntimeError:\n+                    raise ValueError(\n+                        \"%s didn't return an HttpResponse object. It returned an \"\n+                        \"unawaited coroutine instead. You may need to add an 'await' \"\n+                        \"into your view.\" % name\n+                    )\n+        return response\n \n     # Other utility methods.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex a097649..f098bfd 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -158,17 +158,20 @@ class BaseHandler:\n         request.resolver_match = resolver_match\n         return resolver_match\n     def check_response(self, response, callback, name=None):\n-        if not (response is None or asyncio.iscoroutine(response)):\n-            return\n-        if not name:\n-            if isinstance(callback, types.FunctionType):\n-                name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n-            else:\n-                name = 'The view %s.%s.__call__' % (callback.__module__, callback.__class__.__name__)\n-        if response is None:\n-            raise ValueError(\"%s didn't return an HttpResponse object. It returned None instead.\" % name)\n-        elif asyncio.iscoroutine(response):\n-            raise ValueError(\"%s didn't return an HttpResponse object. It returned an unawaited coroutine instead. You may need to add an 'await' into your view.\" % name)\n+        if response is None or asyncio.iscoroutine(response):\n+            if not name:\n+                if isinstance(callback, types.FunctionType):\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:\n+                    name = 'The view %s.%s.__call__' % (callback.__module__, callback.__class__.__name__)\n+            if response is None:\n+                raise ValueError(\"%s didn't return an HttpResponse object. It returned None instead.\" % name)\n+            elif asyncio.iscoroutine(response):\n+                try:\n+                    response = await response\n+                except RuntimeError:\n+                    raise ValueError(\"%s didn't return an HttpResponse object. It returned an unawaited coroutine instead. You may need to add an 'await' into your view.\" % name)\n+        return response\n     def make_view_atomic(self, view):\n         non_atomic_requests = getattr(view, '_non_atomic_requests', set())\n         for db in connections.all():\n", "normalized_occurrence": 1}
