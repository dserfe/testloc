{"model_name_or_path": "agentless", "instance_id": "django__django-12325", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..3a2f630 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -191,25 +191,12 @@ class ModelBase(type):\n         else:\n             new_class._meta.concrete_model = new_class\n \n-        # Collect the parent links for multi-table inheritance.\n-        parent_links = {}\n-        for base in reversed([new_class] + parents):\n-            # Conceptually equivalent to `if base is Model`.\n-            if not hasattr(base, '_meta'):\n-                continue\n-            # Skip concrete parent classes.\n-            if base != new_class and not base._meta.abstract:\n-                continue\n-            # Locate OneToOneField instances.\n-            for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n-\n         # Track fields inherited from base models.\n         inherited_attributes = set()\n-        # Do the appropriate setup for any model parents.\n+        # Collect the parent links for multi-table inheritance.\n+        parent_links = {}\n         for base in new_class.mro():\n+            # Conceptually equivalent to `if base is Model`.\n             if base not in parents or not hasattr(base, '_meta'):\n                 # Things without _meta aren't functional models, so they're\n                 # uninteresting parents.\n@@ -309,10 +296,18 @@ class ModelBase(type):\n         # abstract model.\n         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]\n \n+        # Ensure parent_link fields are processed correctly regardless of order.\n+        if not new_class._meta.abstract:\n+            for field in new_class._meta.local_fields:\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n+                    parent_model = field.remote_field.model\n+                    if parent_model not in new_class._meta.parents:\n+                        new_class._meta.parents[parent_model] = field\n+\n         if abstract:\n-            # Abstract base models can't be instantiated and don't appear in\n-            # the list of models for an app. We do the final setup for them a\n-            # little differently from normal models.\n+            # Abstract base models can't be instantiated and don't appear in the\n+            # list of models for an app. We do the final setup for them a little\n+            # differently from normal models.\n             attr_meta.abstract = False\n             new_class.Meta = attr_meta\n             return new_class\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..d85f102 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -98,17 +98,8 @@ class ModelBase(type):\n             new_class._meta.concrete_model = base._meta.concrete_model\n         else:\n             new_class._meta.concrete_model = new_class\n-        parent_links = {}\n-        for base in reversed([new_class] + parents):\n-            if not hasattr(base, '_meta'):\n-                continue\n-            if base != new_class and (not base._meta.abstract):\n-                continue\n-            for field in base._meta.local_fields:\n-                if isinstance(field, OneToOneField):\n-                    related = resolve_relation(new_class, field.remote_field.model)\n-                    parent_links[make_model_tuple(related)] = field\n         inherited_attributes = set()\n+        parent_links = {}\n         for base in new_class.mro():\n             if base not in parents or not hasattr(base, '_meta'):\n                 inherited_attributes.update(base.__dict__)\n@@ -155,6 +146,12 @@ class ModelBase(type):\n                         field.mti_inherited = True\n                     new_class.add_to_class(field.name, field)\n         new_class._meta.indexes = [copy.deepcopy(idx) for idx in new_class._meta.indexes]\n+        if not new_class._meta.abstract:\n+            for field in new_class._meta.local_fields:\n+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:\n+                    parent_model = field.remote_field.model\n+                    if parent_model not in new_class._meta.parents:\n+                        new_class._meta.parents[parent_model] = field\n         if abstract:\n             attr_meta.abstract = False\n             new_class.Meta = attr_meta\n", "normalized_occurrence": 1}
