{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..630cddb 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -634,9 +634,9 @@ class GaussianMixture(BaseMixture):\n             X, resp, self.reg_covar, self.covariance_type)\n         weights /= n_samples\n \n-        self.weights_ = (weights if self.weights_init is None\n-                         else self.weights_init)\n+        self.weights_ = weights if self.weights_init is None else self.weights_init\n         self.means_ = means if self.means_init is None else self.means_init\n+        self.labels_ = np.argmax(resp, axis=1)\n \n         if self.precisions_init is None:\n             self.covariances_ = covariances\n@@ -675,7 +675,20 @@ class GaussianMixture(BaseMixture):\n         return _estimate_log_gaussian_prob(\n             X, self.means_, self.precisions_cholesky_, self.covariance_type)\n \n-    def _estimate_log_weights(self):\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and predict the cluster labels for X.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Component labels.\n+        \"\"\"\n+        self.fit(X)\n+        return self.labels_\n         return np.log(self.weights_)\n \n     def _compute_lower_bound(self, _, log_prob_norm):\n@@ -747,4 +760,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..5709cbc 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -138,6 +138,7 @@ class GaussianMixture(BaseMixture):\n         weights /= n_samples\n         self.weights_ = weights if self.weights_init is None else self.weights_init\n         self.means_ = means if self.means_init is None else self.means_init\n+        self.labels_ = np.argmax(resp, axis=1)\n         if self.precisions_init is None:\n             self.covariances_ = covariances\n             self.precisions_cholesky_ = _compute_precision_cholesky(covariances, self.covariance_type)\n@@ -154,7 +155,9 @@ class GaussianMixture(BaseMixture):\n         self.precisions_cholesky_ = _compute_precision_cholesky(self.covariances_, self.covariance_type)\n     def _estimate_log_prob(self, X):\n         return _estimate_log_gaussian_prob(X, self.means_, self.precisions_cholesky_, self.covariance_type)\n-    def _estimate_log_weights(self):\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.labels_\n         return np.log(self.weights_)\n     def _compute_lower_bound(self, _, log_prob_norm):\n         return log_prob_norm\n", "normalized_occurrence": 1}
