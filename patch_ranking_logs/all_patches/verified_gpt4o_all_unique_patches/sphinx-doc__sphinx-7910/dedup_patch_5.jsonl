{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 87c3fb8..68dfb82 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1456,25 +1456,30 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         # config value; the default is only the class docstring\n         if content in ('both', 'init'):\n             __init__ = self.get_attr(self.object, '__init__', None)\n-            initdocstring = getdoc(__init__, self.get_attr,\n-                                   self.env.config.autodoc_inherit_docstrings,\n-                                   self.parent, self.object_name)\n-            # for new-style classes, no __init__ means default __init__\n-            if (initdocstring is not None and\n-                (initdocstring == object.__init__.__doc__ or  # for pypy\n-                 initdocstring.strip() == object.__init__.__doc__)):  # for !pypy\n-                initdocstring = None\n-            if not initdocstring:\n-                # try __new__\n-                __new__ = self.get_attr(self.object, '__new__', None)\n-                initdocstring = getdoc(__new__, self.get_attr,\n+            if __init__:\n+                if hasattr(__init__, '__wrapped__'):\n+                    __init__ = __init__.__wrapped__\n+                initdocstring = getdoc(__init__, self.get_attr,\n                                        self.env.config.autodoc_inherit_docstrings,\n                                        self.parent, self.object_name)\n-                # for new-style classes, no __new__ means default __new__\n+                # for new-style classes, no __init__ means default __init__\n                 if (initdocstring is not None and\n-                    (initdocstring == object.__new__.__doc__ or  # for pypy\n-                     initdocstring.strip() == object.__new__.__doc__)):  # for !pypy\n+                    (initdocstring == object.__init__.__doc__ or  # for pypy\n+                     initdocstring.strip() == object.__init__.__doc__)):  # for !pypy\n                     initdocstring = None\n+                if not initdocstring:\n+                    # try __new__\n+                    __new__ = self.get_attr(self.object, '__new__', None)\n+                    if __new__ and hasattr(__new__, '__wrapped__'):\n+                        __new__ = __new__.__wrapped__\n+                    initdocstring = getdoc(__new__, self.get_attr,\n+                                           self.env.config.autodoc_inherit_docstrings,\n+                                           self.parent, self.object_name)\n+                    # for new-style classes, no __new__ means default __new__\n+                    if (initdocstring is not None and\n+                        (initdocstring == object.__new__.__doc__ or  # for pypy\n+                         initdocstring.strip() == object.__new__.__doc__)):  # for !pypy\n+                        initdocstring = None\n             if initdocstring:\n                 if content == 'init':\n                     docstrings = [initdocstring]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 69b2ccc..c1e8f5b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1056,14 +1056,19 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             docstrings.append(attrdocstring)\n         if content in ('both', 'init'):\n             __init__ = self.get_attr(self.object, '__init__', None)\n-            initdocstring = getdoc(__init__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n-            if initdocstring is not None and (initdocstring == object.__init__.__doc__ or initdocstring.strip() == object.__init__.__doc__):\n-                initdocstring = None\n-            if not initdocstring:\n-                __new__ = self.get_attr(self.object, '__new__', None)\n-                initdocstring = getdoc(__new__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n-                if initdocstring is not None and (initdocstring == object.__new__.__doc__ or initdocstring.strip() == object.__new__.__doc__):\n+            if __init__:\n+                if hasattr(__init__, '__wrapped__'):\n+                    __init__ = __init__.__wrapped__\n+                initdocstring = getdoc(__init__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+                if initdocstring is not None and (initdocstring == object.__init__.__doc__ or initdocstring.strip() == object.__init__.__doc__):\n                     initdocstring = None\n+                if not initdocstring:\n+                    __new__ = self.get_attr(self.object, '__new__', None)\n+                    if __new__ and hasattr(__new__, '__wrapped__'):\n+                        __new__ = __new__.__wrapped__\n+                    initdocstring = getdoc(__new__, self.get_attr, self.env.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n+                    if initdocstring is not None and (initdocstring == object.__new__.__doc__ or initdocstring.strip() == object.__new__.__doc__):\n+                        initdocstring = None\n             if initdocstring:\n                 if content == 'init':\n                     docstrings = [initdocstring]\n", "normalized_occurrence": 1}
