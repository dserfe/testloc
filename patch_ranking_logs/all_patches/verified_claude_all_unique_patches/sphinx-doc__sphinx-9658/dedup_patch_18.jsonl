{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..894f001 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -66,6 +66,12 @@ class _MockObject:\n         return call\n \n     def __repr__(self) -> str:\n+        # For module-level mocks, return the full display name\n+        if '.' in self.__display_name__ and not self.__display_name__.endswith('.'):\n+            return self.__display_name__\n+        # For class-level mocks, include the class name from decorator args if available\n+        if self.__sphinx_decorator_args__ and len(self.__sphinx_decorator_args__) > 0:\n+            return self.__display_name__ + str(self.__sphinx_decorator_args__[0])\n         return self.__display_name__\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..9c92fe4 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -37,6 +37,10 @@ class _MockObject:\n         call.__sphinx_decorator_args__ = args\n         return call\n     def __repr__(self) -> str:\n+        if '.' in self.__display_name__ and (not self.__display_name__.endswith('.')):\n+            return self.__display_name__\n+        if self.__sphinx_decorator_args__ and len(self.__sphinx_decorator_args__) > 0:\n+            return self.__display_name__ + str(self.__sphinx_decorator_args__[0])\n         return self.__display_name__\n def _make_subclass(name: str, module: str, superclass: Any=_MockObject, attributes: Any=None, decorator_args: Tuple=()) -> Any:\n     attrs = {'__module__': module, '__display_name__': module + '.' + name, '__sphinx_decorator_args__': decorator_args}\n", "normalized_occurrence": 1}
