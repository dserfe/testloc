{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..db1ce32 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, _GenericAlias\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -18,6 +18,9 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util import logging\n+from sphinx.util.inspect import safe_getattr\n+from sphinx.util.typing import restify\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -28,6 +31,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            for param in sig.parameters.values():\n+                param.annotation = restify(param.annotation, \"py\")\n+            if sig.return_annotation is not sig.empty:\n+                sig = sig.replace(return_annotation=restify(sig.return_annotation, \"py\"))\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..cc8871f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,17 +1,24 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, _GenericAlias\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util import logging\n+from sphinx.util.inspect import safe_getattr\n+from sphinx.util.typing import restify\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            for param in sig.parameters.values():\n+                param.annotation = restify(param.annotation, 'py')\n+            if sig.return_annotation is not sig.empty:\n+                sig = sig.replace(return_annotation=restify(sig.return_annotation, 'py'))\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "normalized_occurrence": 1}
