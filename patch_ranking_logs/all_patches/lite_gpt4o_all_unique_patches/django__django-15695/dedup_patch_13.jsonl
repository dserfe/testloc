{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..600740c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -976,8 +976,28 @@ class RenameIndex(IndexOperation):\n         )\n         self.new_name, self.old_name = self.old_name, self.new_name\n \n+        # Restore old auto-generated name for unnamed indexes\n+        if not self.old_name:\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            old_index = from_model_state.get_index_by_name(self.new_name)\n+            schema_editor.delete_model_indexes(from_model_state)\n+            from_model_state.indexes.remove(old_index)\n+            from_model_state.indexes.append(\n+                from_model_state._meta.get_default_index()\n+            )\n+\n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n \n+        # Re-apply new name for unnamed indexes\n+        if not self.old_name:\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.old_name)\n+            schema_editor.delete_model_indexes(to_model_state)\n+            to_model_state.indexes.remove(new_index)\n+            to_model_state.indexes.append(\n+                to_model_state._meta.get_default_index()\n+            )\n+\n         self.new_name_lower, self.old_name_lower = (\n             self.old_name_lower,\n             self.new_name_lower,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..c17c7c0 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -439,7 +439,19 @@ class RenameIndex(IndexOperation):\n             return\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n+        if not self.old_name:\n+            from_model_state = from_state.models[app_label, self.model_name_lower]\n+            old_index = from_model_state.get_index_by_name(self.new_name)\n+            schema_editor.delete_model_indexes(from_model_state)\n+            from_model_state.indexes.remove(old_index)\n+            from_model_state.indexes.append(from_model_state._meta.get_default_index())\n         self.database_forwards(app_label, schema_editor, from_state, to_state)\n+        if not self.old_name:\n+            to_model_state = to_state.models[app_label, self.model_name_lower]\n+            new_index = to_model_state.get_index_by_name(self.old_name)\n+            schema_editor.delete_model_indexes(to_model_state)\n+            to_model_state.indexes.remove(new_index)\n+            to_model_state.indexes.append(to_model_state._meta.get_default_index())\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n     def describe(self):\n", "normalized_occurrence": 1}
