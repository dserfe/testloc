{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..ffb04e0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2661,7 +2661,9 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return (inspect.isproperty(member) or\n+                (hasattr(member, '__get__') and isinstance(member.__get__(None, type), property))) \\\n+               and isinstance(parent, ClassDocumenter)\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n@@ -2675,6 +2677,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         sourcename = self.get_sourcename()\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if inspect.isclassmethod(self.object.__get__(None, type)):\n+            self.add_line('   :classmethod:', sourcename)\n \n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..e4ff0c6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1597,7 +1597,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return (inspect.isproperty(member) or (hasattr(member, '__get__') and isinstance(member.__get__(None, type), property))) and isinstance(parent, ClassDocumenter)\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n@@ -1608,6 +1608,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if inspect.isclassmethod(self.object.__get__(None, type)):\n+            self.add_line('   :classmethod:', sourcename)\n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n                 signature = inspect.signature(self.object.fget, type_aliases=self.config.autodoc_type_aliases)\n", "normalized_occurrence": 1}
