{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..d6d587a 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,11 +1,24 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n from sympy.logic.boolalg import Boolean\n \n from sympy.assumptions import ask, Q  # type: ignore\n+from sympy import arg\n \n \n+handlers_dict = {\n+    'Abs': refine_abs,\n+    'Pow': refine_Pow,\n+    'atan2': refine_atan2,\n+    're': refine_re,\n+    'im': refine_im,\n+    'sign': refine_sign,\n+    'arg': refine_arg,\n+    'MatrixElement': refine_matrixelement,\n+}\n+\n def refine(expr, assumptions=True):\n     \"\"\"\n     Simplify an expression using assumptions.\n@@ -350,6 +363,27 @@ def refine_sign(expr, assumptions):\n     return expr\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the argument of a complex number.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import I, arg, Q\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> refine_arg(arg(I), Q.positive(I))\n+    pi/2\n+    >>> refine_arg(arg(-I), Q.negative(I))\n+    -pi/2\n+    \"\"\"\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg_expr), assumptions):\n+        return S.Pi\n+    return expr\n+\n def refine_matrixelement(expr, assumptions):\n     \"\"\"\n     Handler for symmetric part.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n+from sympy import arg\n+handlers_dict = {'Abs': refine_abs, 'Pow': refine_Pow, 'atan2': refine_atan2, 're': refine_re, 'im': refine_im, 'sign': refine_sign, 'arg': refine_arg, 'MatrixElement': refine_matrixelement}\n+def refine_arg(expr, assumptions):\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg_expr), assumptions):\n+        return S.Pi\n+    return expr", "normalized_occurrence": 1}
