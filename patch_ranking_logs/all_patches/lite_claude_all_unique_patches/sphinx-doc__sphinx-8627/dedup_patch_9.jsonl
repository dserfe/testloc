{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b1d3c04..63aa226 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -68,6 +68,9 @@ pairindextypes = {\n     'builtin':   _('built-in function'),\n }\n \n+import sys\n+import importlib\n+\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str),\n                                          ('node_id', str),\n                                          ('objtype', str)])\n@@ -1370,7 +1373,7 @@ class PythonDomain(Domain):\n \n def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n                      node: pending_xref, contnode: Element) -> Element:\n-    \"\"\"Do not emit nitpicky warnings for built-in types.\"\"\"\n+    \"\"\"Do not emit nitpicky warnings for built-in types and standard library types.\"\"\"\n     def istyping(s: str) -> bool:\n         if s.startswith('typing.'):\n             s = s.split('.', 1)[1]\n@@ -1383,12 +1386,22 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment,\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n+        \n+        # Check built-in class\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n-            # built-in class\n             return contnode\n+        # Check typing class\n         elif istyping(reftarget):\n-            # typing class\n             return contnode\n+        # Check standard library types\n+        elif modname and modname in sys.stdlib_module_names:\n+            try:\n+                mod = importlib.import_module(modname)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n \n     return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c7788cd..4c04812 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -32,6 +32,8 @@ if False:\n logger = logging.getLogger(__name__)\n py_sig_re = re.compile('^ ([\\\\w.]*\\\\.)?            # class name(s)\\n          (\\\\w+)  \\\\s*             # thing name\\n          (?: \\\\(\\\\s*(.*)\\\\s*\\\\)     # optional: arguments\\n           (?:\\\\s* -> \\\\s* (.*))?  #           return annotation\\n          )? $                   # and nothing more\\n          ', re.VERBOSE)\n pairindextypes = {'module': _('module'), 'keyword': _('keyword'), 'operator': _('operator'), 'object': _('object'), 'exception': _('exception'), 'statement': _('statement'), 'builtin': _('built-in function')}\n+import sys\n+import importlib\n ObjectEntry = NamedTuple('ObjectEntry', [('docname', str), ('node_id', str), ('objtype', str)])\n ModuleEntry = NamedTuple('ModuleEntry', [('docname', str), ('node_id', str), ('synopsis', str), ('platform', str), ('deprecated', bool)])\n def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref:\n@@ -843,10 +845,18 @@ def builtin_resolver(app: Sphinx, env: BuildEnvironment, node: pending_xref, con\n         return contnode\n     elif node.get('reftype') in ('class', 'exc'):\n         reftarget = node.get('reftarget')\n+        modname = node.get('py:module')\n         if inspect.isclass(getattr(builtins, reftarget, None)):\n             return contnode\n         elif istyping(reftarget):\n             return contnode\n+        elif modname and modname in sys.stdlib_module_names:\n+            try:\n+                mod = importlib.import_module(modname)\n+                if inspect.isclass(getattr(mod, reftarget, None)):\n+                    return contnode\n+            except ImportError:\n+                pass\n     return None\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.setup_extension('sphinx.directives')\n", "normalized_occurrence": 1}
