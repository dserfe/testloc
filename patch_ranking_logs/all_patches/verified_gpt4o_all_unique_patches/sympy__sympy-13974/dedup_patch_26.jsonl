{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..e4c11f2 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -257,6 +257,19 @@ class TensorProduct(Expr):\n         else:\n             return self\n \n+    def _eval_power(self, exp):\n+        if exp == 1:\n+            return self\n+        elif exp == 0:\n+            return TensorProduct(*[1 for _ in self.args])\n+        elif exp > 1:\n+            result = self\n+            for _ in range(exp - 1):\n+                result *= self\n+            return result\n+        else:\n+            raise ValueError(\"TensorProduct exponent must be a non-negative integer\")\n+\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n", "occurrence": 1, "normalized_patch": "--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n+    def _eval_power(self, exp):\n+        if exp == 1:\n+            return self\n+        elif exp == 0:\n+            return TensorProduct(*[1 for _ in self.args])\n+        elif exp > 1:\n+            result = self\n+            for _ in range(exp - 1):\n+                result *= self\n+            return result\n+        else:\n+            raise ValueError('TensorProduct exponent must be a non-negative integer')", "normalized_occurrence": 1}
