{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..69062b2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -704,7 +704,9 @@ class Model(metaclass=ModelBase):\n                     field.delete_cached_value(self)\n \n         using = using or router.db_for_write(self.__class__, instance=self)\n-        if force_insert and (force_update or update_fields):\n+        if self.pk is None:\n+            force_insert = True\n+        elif force_insert and (force_update or update_fields):\n             raise ValueError(\"Cannot force both insert and updating in model saving.\")\n \n         deferred_fields = self.get_deferred_fields()\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9dcf0cd..95506f9 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -379,7 +379,9 @@ class Model(metaclass=ModelBase):\n                 if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     field.delete_cached_value(self)\n         using = using or router.db_for_write(self.__class__, instance=self)\n-        if force_insert and (force_update or update_fields):\n+        if self.pk is None:\n+            force_insert = True\n+        elif force_insert and (force_update or update_fields):\n             raise ValueError('Cannot force both insert and updating in model saving.')\n         deferred_fields = self.get_deferred_fields()\n         if update_fields is not None:\n", "normalized_occurrence": 2}
