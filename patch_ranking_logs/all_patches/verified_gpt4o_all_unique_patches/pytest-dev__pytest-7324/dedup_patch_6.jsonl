{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..21fb07d 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -15,6 +15,7 @@ from _pytest.config import PytestPluginManager\n from _pytest.config.argparsing import Parser\n from _pytest.config.exceptions import UsageError\n from _pytest.nodes import Node\n+import _PyUnicode_EqualToASCIIString\n from _pytest.reports import BaseReport\n \n if TYPE_CHECKING:\n@@ -22,7 +23,12 @@ if TYPE_CHECKING:\n     from _pytest.runner import CallInfo\n \n \n+import ast\n+\n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    # Check if the value is trying to compile a built-in constant\n+    if value in (\"None\", \"True\", \"False\"):\n+        raise ValueError(f\"Cannot compile built-in constant: {value}\")\n     \"\"\"Validate syntax of --pdbcls option.\"\"\"\n     try:\n         modname, classname = value.split(\":\")\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..4390504 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -13,11 +13,16 @@ from _pytest.config import PytestPluginManager\n from _pytest.config.argparsing import Parser\n from _pytest.config.exceptions import UsageError\n from _pytest.nodes import Node\n+import _PyUnicode_EqualToASCIIString\n from _pytest.reports import BaseReport\n if TYPE_CHECKING:\n     from _pytest.capture import CaptureManager\n     from _pytest.runner import CallInfo\n+import ast\n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    if value in ('None', 'True', 'False'):\n+        raise ValueError(f'Cannot compile built-in constant: {value}')\n+    'Validate syntax of --pdbcls option.'\n     try:\n         modname, classname = value.split(':')\n     except ValueError:\n", "normalized_occurrence": 1}
