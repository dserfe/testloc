{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..74703f6 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -905,7 +905,61 @@ warn_explicit(\n         ).body\n         return ast.If(val_is_none, send_warning, [])\n \n-    def visit_Name(self, name):\n+    def visit_All(self, call):\n+        res_var = self.variable()\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n+        app = ast.Attribute(expl_list, \"append\", ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+\n+        for i, arg in enumerate(call.args[0].elts):\n+            self.push_format_context()\n+            res, expl = self.visit(arg)\n+            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+            cond = res\n+            inner = []\n+            self.statements.append(ast.If(ast.UnaryOp(ast.Not(), cond), inner, []))\n+            self.statements = body = inner\n+\n+        self.statements = save\n+        self.on_failure = fail_save\n+        expl_template = self.helper(\"_format_all\", expl_list)\n+        expl = self.pop_format_context(expl_template)\n+        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n+\n+    def visit_Any(self, call):\n+        res_var = self.variable()\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n+        app = ast.Attribute(expl_list, \"append\", ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+\n+        for i, arg in enumerate(call.args[0].elts):\n+            self.push_format_context()\n+            res, expl = self.visit(arg)\n+            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+            cond = res\n+            inner = []\n+            self.statements.append(ast.If(cond, inner, []))\n+            self.statements = body = inner\n+\n+        self.statements = save\n+        self.on_failure = fail_save\n+        expl_template = self.helper(\"_format_any\", expl_list)\n+        expl = self.pop_format_context(expl_template)\n+        return ast.Name(res_var, ast.Load()), self.explanation_param(expl)\n         # Display the repr of the name if it's a local variable or\n         # _should_repr_global_name() thinks it's acceptable.\n         locs = ast_Call(self.builtin(\"locals\"), [], [])\n@@ -917,7 +971,10 @@ warn_explicit(\n \n     def visit_BoolOp(self, boolop):\n         res_var = self.variable()\n-        expl_list = self.assign(ast.List([], ast.Load()))\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n         app = ast.Attribute(expl_list, \"append\", ast.Load())\n         is_or = int(isinstance(boolop.op, ast.Or))\n         body = save = self.statements\n@@ -964,7 +1021,12 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n+    def visit_Call(self, call):\n+        if isinstance(call.func, ast.Name):\n+            if call.func.id == 'all':\n+                return self.visit_All(call)\n+            elif call.func.id == 'any':\n+                return self.visit_Any(call)\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1143,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..9fe203f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -492,7 +492,56 @@ class AssertionRewriter(ast.NodeVisitor):\n         val_is_none = ast.Compare(node, [ast.Is()], [AST_NONE])\n         send_warning = ast.parse('\\nfrom _pytest.warning_types import PytestAssertRewriteWarning\\nfrom warnings import warn_explicit\\nwarn_explicit(\\n    PytestAssertRewriteWarning(\\'asserting the value None, please use \"assert is None\"\\'),\\n    category=None,\\n    filename={filename!r},\\n    lineno={lineno},\\n)\\n            '.format(filename=module_path.strpath, lineno=lineno)).body\n         return ast.If(val_is_none, send_warning, [])\n-    def visit_Name(self, name):\n+    def visit_All(self, call):\n+        res_var = self.variable()\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n+        app = ast.Attribute(expl_list, 'append', ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+        for i, arg in enumerate(call.args[0].elts):\n+            self.push_format_context()\n+            res, expl = self.visit(arg)\n+            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+            cond = res\n+            inner = []\n+            self.statements.append(ast.If(ast.UnaryOp(ast.Not(), cond), inner, []))\n+            self.statements = body = inner\n+        self.statements = save\n+        self.on_failure = fail_save\n+        expl_template = self.helper('_format_all', expl_list)\n+        expl = self.pop_format_context(expl_template)\n+        return (ast.Name(res_var, ast.Load()), self.explanation_param(expl))\n+    def visit_Any(self, call):\n+        res_var = self.variable()\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n+        app = ast.Attribute(expl_list, 'append', ast.Load())\n+        body = save = self.statements\n+        fail_save = self.on_failure\n+        for i, arg in enumerate(call.args[0].elts):\n+            self.push_format_context()\n+            res, expl = self.visit(arg)\n+            body.append(ast.Assign([ast.Name(res_var, ast.Store())], res))\n+            expl_format = self.pop_format_context(ast.Str(expl))\n+            call = ast.Call(app, [expl_format], [])\n+            self.on_failure.append(ast.Expr(call))\n+            cond = res\n+            inner = []\n+            self.statements.append(ast.If(cond, inner, []))\n+            self.statements = body = inner\n+        self.statements = save\n+        self.on_failure = fail_save\n+        expl_template = self.helper('_format_any', expl_list)\n+        expl = self.pop_format_context(expl_template)\n+        return (ast.Name(res_var, ast.Load()), self.explanation_param(expl))\n         locs = ast_Call(self.builtin('locals'), [], [])\n         inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n         dorepr = self.helper('_should_repr_global_name', name)\n@@ -501,7 +550,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         return (name, self.explanation_param(expr))\n     def visit_BoolOp(self, boolop):\n         res_var = self.variable()\n-        expl_list = self.assign(ast.List([], ast.Load()))\n+        if isinstance(boolop.op, ast.And):\n+            expl_list = self.assign(ast.List([], ast.Load()))\n+        else:\n+            expl_list = None\n         app = ast.Attribute(expl_list, 'append', ast.Load())\n         is_or = int(isinstance(boolop.op, ast.Or))\n         body = save = self.statements\n@@ -543,7 +595,13 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n+    def visit_Call(self, call):\n+        if isinstance(call.func, ast.Name):\n+            if call.func.id == 'all':\n+                return self.visit_All(call)\n+            elif call.func.id == 'any':\n+                return self.visit_Any(call)\n+        '\\n        visit `ast.Call` nodes on Python3.5 and after\\n        '\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
