{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-7233", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex d923cdb..4440dd7 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -1109,16 +1109,17 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n \n             coords = {}\n             for c, v in self.obj.coords.items():\n-                # variable.coarsen returns variables not containing the window dims\n-                # unchanged (maybe removes attrs)\n-                coords[c] = v.variable.coarsen(\n-                    self.windows,\n-                    self.coord_func[c],\n-                    self.boundary,\n-                    self.side,\n-                    keep_attrs=keep_attrs,\n-                    **kwargs,\n-                )\n+                if c in self.obj.dims:  # Keep dimensional coordinates as is\n+                    coords[c] = v.variable\n+                else:\n+                    coords[c] = v.variable.coarsen(\n+                        self.windows,\n+                        self.coord_func[c],\n+                        self.boundary,\n+                        self.side,\n+                        keep_attrs=keep_attrs,\n+                        **kwargs,\n+                    )\n \n             return Dataset(reduced, coords=coords, attrs=attrs)\n \n@@ -1148,4 +1149,4 @@ class DatasetCoarsen(Coarsen[\"Dataset\"]):\n             Arrays with summarized data.\n         \"\"\"\n         wrapped_func = self._reduce_method(func)\n-        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n+        return wrapped_func(self, keep_attrs=keep_attrs, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 988b7e6..2a2442e 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -354,7 +354,10 @@ class DatasetCoarsen(Coarsen['Dataset']):\n                 reduced[key] = da.variable.coarsen(self.windows, func, self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n             coords = {}\n             for c, v in self.obj.coords.items():\n-                coords[c] = v.variable.coarsen(self.windows, self.coord_func[c], self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n+                if c in self.obj.dims:\n+                    coords[c] = v.variable\n+                else:\n+                    coords[c] = v.variable.coarsen(self.windows, self.coord_func[c], self.boundary, self.side, keep_attrs=keep_attrs, **kwargs)\n             return Dataset(reduced, coords=coords, attrs=attrs)\n         return wrapped_func\n     def reduce(self, func: Callable, keep_attrs=None, **kwargs) -> Dataset:\n", "normalized_occurrence": 1}
