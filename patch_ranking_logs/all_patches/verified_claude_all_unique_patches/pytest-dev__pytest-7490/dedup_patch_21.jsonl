{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..7ed2beb 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -280,7 +280,12 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n-                rep.outcome = \"failed\"\n+                # Only fail if strict raises matching is in effect\n+                if xfailed.strict_raises:\n+                    rep.outcome = \"failed\"\n+                else:\n+                    rep.outcome = \"skipped\"\n+                    rep.wasxfail = xfailed.reason\n             else:\n                 rep.outcome = \"skipped\"\n                 rep.wasxfail = xfailed.reason\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..73db9e1 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -158,7 +158,11 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n-                rep.outcome = 'failed'\n+                if xfailed.strict_raises:\n+                    rep.outcome = 'failed'\n+                else:\n+                    rep.outcome = 'skipped'\n+                    rep.wasxfail = xfailed.reason\n             else:\n                 rep.outcome = 'skipped'\n                 rep.wasxfail = xfailed.reason\n", "normalized_occurrence": 1}
