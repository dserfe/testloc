{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..fe9ad3e 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1565,10 +1565,17 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n+        # Always ensure hue data is properly structured\n+        if \"hue\" in kwargs:\n+            if isinstance(kwargs[\"hue\"], (pd.Series, np.ndarray)):\n+                # If hue is passed as a series/array, use it directly\n+                hue = kwargs.pop(\"hue\")\n+            # Keep other hue parameters if specified\n+            if \"hue_order\" not in kwargs:\n+                kwargs[\"hue_order\"] = self._hue_order\n+            if \"palette\" not in kwargs:\n+                kwargs[\"palette\"] = self._orig_palette\n+        kwargs[\"hue\"] = hue\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..b3d0e45 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -747,8 +747,14 @@ class PairGrid(Grid):\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n-            kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n+        if 'hue' in kwargs:\n+            if isinstance(kwargs['hue'], (pd.Series, np.ndarray)):\n+                hue = kwargs.pop('hue')\n+            if 'hue_order' not in kwargs:\n+                kwargs['hue_order'] = self._hue_order\n+            if 'palette' not in kwargs:\n+                kwargs['palette'] = self._orig_palette\n+        kwargs['hue'] = hue\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n", "normalized_occurrence": 1}
