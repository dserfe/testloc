{"model_name_or_path": "agentless", "instance_id": "django__django-17084", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex a6c5dd7..2351d3e 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -65,7 +65,11 @@ class Aggregate(Func):\n         c.filter = c.filter and c.filter.resolve_expression(\n             query, allow_joins, reuse, summarize\n         )\n-        if summarize:\n+        if any(expr.contains_over_clause for expr in c.get_source_expressions()):\n+            raise FieldError(\n+                f\"Cannot compute {c.name}: aggregate function calls cannot contain window function calls.\"\n+            )\n+        elif summarize:\n             # Summarized aggregates cannot refer to summarized aggregates.\n             for ref in c.get_refs():\n                 if query.annotations[ref].is_summary:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex e18ccd1..4386d0b 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -34,7 +34,9 @@ class Aggregate(Func):\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         c = super().resolve_expression(query, allow_joins, reuse, summarize)\n         c.filter = c.filter and c.filter.resolve_expression(query, allow_joins, reuse, summarize)\n-        if summarize:\n+        if any((expr.contains_over_clause for expr in c.get_source_expressions())):\n+            raise FieldError(f'Cannot compute {c.name}: aggregate function calls cannot contain window function calls.')\n+        elif summarize:\n             for ref in c.get_refs():\n                 if query.annotations[ref].is_summary:\n                     raise FieldError(f\"Cannot compute {c.name}('{ref}'): '{ref}' is an aggregate\")\n", "normalized_occurrence": 1}
