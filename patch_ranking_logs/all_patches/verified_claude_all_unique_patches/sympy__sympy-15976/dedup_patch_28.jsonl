{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..e7363ef 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -761,9 +761,22 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                     mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n+                # Handle case where the item contains both letters and numbers\n+                item = items[0]\n+                import re\n+                parts = re.split('([0-9]+)', item)\n+                if len(parts) > 1:\n+                    mrow = self.dom.createElement('mrow')\n+                    for part in parts:\n+                        if part:  # Skip empty strings from split\n+                            mi = self.dom.createElement('mi')\n+                            mi.appendChild(self.dom.createTextNode(part))\n+                            mrow.appendChild(mi)\n+                    return mrow\n+                else:\n+                    mi = self.dom.createElement('mi')\n+                    mi.appendChild(self.dom.createTextNode(item))\n+                    return mi\n \n         # translate name, supers and subs to unicode characters\n         def translate(s):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..f46cbef 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -532,9 +532,21 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                     mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mi')\n-                mi.appendChild(self.dom.createTextNode(items[0]))\n-                return mi\n+                item = items[0]\n+                import re\n+                parts = re.split('([0-9]+)', item)\n+                if len(parts) > 1:\n+                    mrow = self.dom.createElement('mrow')\n+                    for part in parts:\n+                        if part:\n+                            mi = self.dom.createElement('mi')\n+                            mi.appendChild(self.dom.createTextNode(part))\n+                            mrow.appendChild(mi)\n+                    return mrow\n+                else:\n+                    mi = self.dom.createElement('mi')\n+                    mi.appendChild(self.dom.createTextNode(item))\n+                    return mi\n         def translate(s):\n             if s in greek_unicode:\n                 return greek_unicode.get(s)\n", "normalized_occurrence": 1}
