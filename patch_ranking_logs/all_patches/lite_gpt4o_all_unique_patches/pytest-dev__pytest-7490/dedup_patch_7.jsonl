{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..3a3d02b 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -246,11 +246,8 @@ def pytest_runtest_setup(item: Item) -> None:\n \n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n-\n     if not item.config.option.runxfail:\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n         if xfailed and not xfailed.run:\n             xfail(\"[NOTRUN] \" + xfailed.reason)\n \n@@ -272,25 +269,26 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         rep.outcome = \"failed\"\n     elif item.config.option.runxfail:\n         pass  # don't interfere\n-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n-        assert call.excinfo.value.msg is not None\n+    if xfailed is None:\n+        xfailed = evaluate_xfail_marks(item)\n+\n+    if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and not isinstance(call.excinfo.value, raises):\n-                rep.outcome = \"failed\"\n-            else:\n-                rep.outcome = \"skipped\"\n-                rep.wasxfail = xfailed.reason\n-        elif call.when == \"call\":\n-            if xfailed.strict:\n-                rep.outcome = \"failed\"\n-                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n-            else:\n-                rep.outcome = \"passed\"\n-                rep.wasxfail = xfailed.reason\n+    elif call.excinfo:\n+        raises = xfailed.raises if xfailed else None\n+        if raises is not None and not isinstance(call.excinfo.value, raises):\n+            rep.outcome = \"failed\"\n+        else:\n+            rep.outcome = \"skipped\"\n+            rep.wasxfail = xfailed.reason if xfailed else None\n+    elif call.when == \"call\":\n+        if xfailed and xfailed.strict:\n+            rep.outcome = \"failed\"\n+            rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+        elif xfailed:\n+            rep.outcome = \"passed\"\n+            rep.wasxfail = xfailed.reason\n \n     if (\n         item._store.get(skipped_by_mark_key, True)\n@@ -312,4 +310,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..1320af4 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -129,10 +129,8 @@ def pytest_runtest_setup(item: Item) -> None:\n             xfail('[NOTRUN] ' + xfailed.reason)\n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n-    xfailed = item._store.get(xfailed_key, None)\n-    if xfailed is None:\n-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n     if not item.config.option.runxfail:\n+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n         if xfailed and (not xfailed.run):\n             xfail('[NOTRUN] ' + xfailed.reason)\n     yield\n@@ -150,25 +148,25 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         rep.outcome = 'failed'\n     elif item.config.option.runxfail:\n         pass\n-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n-        assert call.excinfo.value.msg is not None\n+    if xfailed is None:\n+        xfailed = evaluate_xfail_marks(item)\n+    if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n-            raises = xfailed.raises\n-            if raises is not None and (not isinstance(call.excinfo.value, raises)):\n-                rep.outcome = 'failed'\n-            else:\n-                rep.outcome = 'skipped'\n-                rep.wasxfail = xfailed.reason\n-        elif call.when == 'call':\n-            if xfailed.strict:\n-                rep.outcome = 'failed'\n-                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n-            else:\n-                rep.outcome = 'passed'\n-                rep.wasxfail = xfailed.reason\n+    elif call.excinfo:\n+        raises = xfailed.raises if xfailed else None\n+        if raises is not None and (not isinstance(call.excinfo.value, raises)):\n+            rep.outcome = 'failed'\n+        else:\n+            rep.outcome = 'skipped'\n+            rep.wasxfail = xfailed.reason if xfailed else None\n+    elif call.when == 'call':\n+        if xfailed and xfailed.strict:\n+            rep.outcome = 'failed'\n+            rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n+        elif xfailed:\n+            rep.outcome = 'passed'\n+            rep.wasxfail = xfailed.reason\n     if item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n         _, _, reason = rep.longrepr\n         filename, line = item.reportinfo()[:2]\n", "normalized_occurrence": 1}
