{"model_name_or_path": "agentless", "instance_id": "django__django-16082", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c783b41..85eeb00 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -527,6 +527,9 @@ _connector_combinations = [\n             (fields.DecimalField, fields.IntegerField, fields.DecimalField),\n             (fields.IntegerField, fields.FloatField, fields.FloatField),\n             (fields.FloatField, fields.IntegerField, fields.FloatField),\n+            (fields.IntegerField, fields.IntegerField, fields.IntegerField),\n+            (fields.DecimalField, fields.DecimalField, fields.DecimalField),\n+            (fields.FloatField, fields.FloatField, fields.FloatField),\n         ]\n         for connector in (\n             Combinable.ADD,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 559ba9a..3d37225 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -249,7 +249,7 @@ class Expression(BaseExpression, Combinable):\n     def __hash__(self):\n         return hash(self.identity)\n NoneType = type(None)\n-_connector_combinations = [{connector: [(fields.IntegerField, fields.IntegerField, fields.IntegerField), (fields.FloatField, fields.FloatField, fields.FloatField), (fields.DecimalField, fields.DecimalField, fields.DecimalField)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD, Combinable.POW)}, {connector: [(fields.IntegerField, fields.DecimalField, fields.DecimalField), (fields.DecimalField, fields.IntegerField, fields.DecimalField), (fields.IntegerField, fields.FloatField, fields.FloatField), (fields.FloatField, fields.IntegerField, fields.FloatField)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV)}, {connector: [(fields.IntegerField, fields.IntegerField, fields.IntegerField)] for connector in (Combinable.BITAND, Combinable.BITOR, Combinable.BITLEFTSHIFT, Combinable.BITRIGHTSHIFT, Combinable.BITXOR)}, {connector: [(field_type, NoneType, field_type), (NoneType, field_type, field_type)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD, Combinable.POW) for field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)}, {Combinable.ADD: [(fields.DateField, fields.DurationField, fields.DateTimeField), (fields.DateTimeField, fields.DurationField, fields.DateTimeField), (fields.DurationField, fields.DateField, fields.DateTimeField), (fields.DurationField, fields.DateTimeField, fields.DateTimeField), (fields.DurationField, fields.DurationField, fields.DurationField), (fields.TimeField, fields.DurationField, fields.TimeField), (fields.DurationField, fields.TimeField, fields.TimeField)]}, {Combinable.SUB: [(fields.DateField, fields.DurationField, fields.DateTimeField), (fields.DateTimeField, fields.DurationField, fields.DateTimeField), (fields.DateField, fields.DateField, fields.DurationField), (fields.DateField, fields.DateTimeField, fields.DurationField), (fields.DateTimeField, fields.DateField, fields.DurationField), (fields.DateTimeField, fields.DateTimeField, fields.DurationField), (fields.DurationField, fields.DurationField, fields.DurationField), (fields.TimeField, fields.DurationField, fields.TimeField), (fields.TimeField, fields.TimeField, fields.DurationField)]}]\n+_connector_combinations = [{connector: [(fields.IntegerField, fields.IntegerField, fields.IntegerField), (fields.FloatField, fields.FloatField, fields.FloatField), (fields.DecimalField, fields.DecimalField, fields.DecimalField)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD, Combinable.POW)}, {connector: [(fields.IntegerField, fields.DecimalField, fields.DecimalField), (fields.DecimalField, fields.IntegerField, fields.DecimalField), (fields.IntegerField, fields.FloatField, fields.FloatField), (fields.FloatField, fields.IntegerField, fields.FloatField), (fields.IntegerField, fields.IntegerField, fields.IntegerField), (fields.DecimalField, fields.DecimalField, fields.DecimalField), (fields.FloatField, fields.FloatField, fields.FloatField)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV)}, {connector: [(fields.IntegerField, fields.IntegerField, fields.IntegerField)] for connector in (Combinable.BITAND, Combinable.BITOR, Combinable.BITLEFTSHIFT, Combinable.BITRIGHTSHIFT, Combinable.BITXOR)}, {connector: [(field_type, NoneType, field_type), (NoneType, field_type, field_type)] for connector in (Combinable.ADD, Combinable.SUB, Combinable.MUL, Combinable.DIV, Combinable.MOD, Combinable.POW) for field_type in (fields.IntegerField, fields.DecimalField, fields.FloatField)}, {Combinable.ADD: [(fields.DateField, fields.DurationField, fields.DateTimeField), (fields.DateTimeField, fields.DurationField, fields.DateTimeField), (fields.DurationField, fields.DateField, fields.DateTimeField), (fields.DurationField, fields.DateTimeField, fields.DateTimeField), (fields.DurationField, fields.DurationField, fields.DurationField), (fields.TimeField, fields.DurationField, fields.TimeField), (fields.DurationField, fields.TimeField, fields.TimeField)]}, {Combinable.SUB: [(fields.DateField, fields.DurationField, fields.DateTimeField), (fields.DateTimeField, fields.DurationField, fields.DateTimeField), (fields.DateField, fields.DateField, fields.DurationField), (fields.DateField, fields.DateTimeField, fields.DurationField), (fields.DateTimeField, fields.DateField, fields.DurationField), (fields.DateTimeField, fields.DateTimeField, fields.DurationField), (fields.DurationField, fields.DurationField, fields.DurationField), (fields.TimeField, fields.DurationField, fields.TimeField), (fields.TimeField, fields.TimeField, fields.DurationField)]}]\n _connector_combinators = defaultdict(list)\n def register_combinable_fields(lhs, connector, rhs, result):\n     _connector_combinators[connector].append((lhs, rhs, result))\n", "normalized_occurrence": 1}
