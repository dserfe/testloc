{"model_name_or_path": "agentless", "instance_id": "django__django-12273", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 07c5013..ade16f5 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -673,35 +673,38 @@ class Model(metaclass=ModelBase):\n         # Ensure that a model instance without a PK hasn't been assigned to\n         # a ForeignKey or OneToOneField on this model. If the field is\n         # nullable, allowing the save() would result in silent data loss.\n-        for field in self._meta.concrete_fields:\n-            # If the related field isn't cached, then an instance hasn't\n-            # been assigned and there's no need to worry about this check.\n-            if field.is_relation and field.is_cached(self):\n-                obj = getattr(self, field.name, None)\n-                if not obj:\n-                    continue\n-                # A pk may have been assigned manually to a model instance not\n-                # saved to the database (or auto-generated in a case like\n-                # UUIDField), but we allow the save to proceed and rely on the\n-                # database to raise an IntegrityError if applicable. If\n-                # constraints aren't supported by the database, there's the\n-                # unavoidable risk of data corruption.\n-                if obj.pk is None:\n-                    # Remove the object from a related instance cache.\n-                    if not field.remote_field.multiple:\n-                        field.remote_field.delete_cached_value(obj)\n-                    raise ValueError(\n-                        \"save() prohibited to prevent data loss due to \"\n-                        \"unsaved related object '%s'.\" % field.name\n-                    )\n-                elif getattr(self, field.attname) is None:\n-                    # Use pk from related object if it has been saved after\n-                    # an assignment.\n-                    setattr(self, field.attname, obj.pk)\n-                # If the relationship's pk/to_field was changed, clear the\n-                # cached relationship.\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+        if self.pk is None:\n+            force_insert = True\n+        else:\n+            for field in self._meta.concrete_fields:\n+                # If the related field isn't cached, then an instance hasn't\n+                # been assigned and there's no need to worry about this check.\n+                if field.is_relation and field.is_cached(self):\n+                    obj = getattr(self, field.name, None)\n+                    if not obj:\n+                        continue\n+                    # A pk may have been assigned manually to a model instance not\n+                    # saved to the database (or auto-generated in a case like\n+                    # UUIDField), but we allow the save to proceed and rely on the\n+                    # database to raise an IntegrityError if applicable. If\n+                    # constraints aren't supported by the database, there's the\n+                    # unavoidable risk of data corruption.\n+                    if obj.pk is None:\n+                        # Remove the object from a related instance cache.\n+                        if not field.remote_field.multiple:\n+                            field.remote_field.delete_cached_value(obj)\n+                        raise ValueError(\n+                            \"save() prohibited to prevent data loss due to \"\n+                            \"unsaved related object '%s'.\" % field.name\n+                        )\n+                    elif getattr(self, field.attname) is None:\n+                        # Use pk from related object if it has been saved after\n+                        # an assignment.\n+                        setattr(self, field.attname, obj.pk)\n+                    # If the relationship's pk/to_field was changed, clear the\n+                    # cached relationship.\n+                    if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n+                        field.delete_cached_value(self)\n \n         using = using or router.db_for_write(self.__class__, instance=self)\n         if force_insert and (force_update or update_fields):\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 9dcf0cd..9fac473 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -365,19 +365,22 @@ class Model(metaclass=ModelBase):\n             return getattr(self, field_name)\n         return getattr(self, field.attname)\n     def save(self, force_insert=False, force_update=False, using=None, update_fields=None):\n-        for field in self._meta.concrete_fields:\n-            if field.is_relation and field.is_cached(self):\n-                obj = getattr(self, field.name, None)\n-                if not obj:\n-                    continue\n-                if obj.pk is None:\n-                    if not field.remote_field.multiple:\n-                        field.remote_field.delete_cached_value(obj)\n-                    raise ValueError(\"save() prohibited to prevent data loss due to unsaved related object '%s'.\" % field.name)\n-                elif getattr(self, field.attname) is None:\n-                    setattr(self, field.attname, obj.pk)\n-                if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n-                    field.delete_cached_value(self)\n+        if self.pk is None:\n+            force_insert = True\n+        else:\n+            for field in self._meta.concrete_fields:\n+                if field.is_relation and field.is_cached(self):\n+                    obj = getattr(self, field.name, None)\n+                    if not obj:\n+                        continue\n+                    if obj.pk is None:\n+                        if not field.remote_field.multiple:\n+                            field.remote_field.delete_cached_value(obj)\n+                        raise ValueError(\"save() prohibited to prevent data loss due to unsaved related object '%s'.\" % field.name)\n+                    elif getattr(self, field.attname) is None:\n+                        setattr(self, field.attname, obj.pk)\n+                    if getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n+                        field.delete_cached_value(self)\n         using = using or router.db_for_write(self.__class__, instance=self)\n         if force_insert and (force_update or update_fields):\n             raise ValueError('Cannot force both insert and updating in model saving.')\n", "normalized_occurrence": 2}
