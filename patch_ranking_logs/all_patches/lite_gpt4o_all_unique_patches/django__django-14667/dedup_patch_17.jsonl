{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5d0565e..864e004 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1215,12 +1215,19 @@ class QuerySet:\n         parameter, in which case removal all deferrals.\n         \"\"\"\n         self._not_support_combined_queries('defer')\n+        if self._fields is not None:\n+            raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n         if self._fields is not None:\n             raise TypeError(\"Cannot call defer() after .values() or .values_list()\")\n         clone = self._chain()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n+            existing, defer = clone.query.deferred_loading\n+            if not defer and existing:\n+                # If there are existing fields marked for immediate loading, defer everything except those.\n+                new_deferred = set(clone.query.get_loaded_field_names()) - set(existing)\n+                clone.query.deferred_loading = new_deferred, True\n             clone.query.add_deferred_loading(fields)\n         return clone\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 0052c9e..a73c930 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -735,12 +735,18 @@ class QuerySet:\n         return clone\n     def defer(self, *fields):\n         self._not_support_combined_queries('defer')\n+        if self._fields is not None:\n+            raise TypeError('Cannot call defer() after .values() or .values_list()')\n         if self._fields is not None:\n             raise TypeError('Cannot call defer() after .values() or .values_list()')\n         clone = self._chain()\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n+            existing, defer = clone.query.deferred_loading\n+            if not defer and existing:\n+                new_deferred = set(clone.query.get_loaded_field_names()) - set(existing)\n+                clone.query.deferred_loading = (new_deferred, True)\n             clone.query.add_deferred_loading(fields)\n         return clone\n     def only(self, *fields):\n", "normalized_occurrence": 1}
