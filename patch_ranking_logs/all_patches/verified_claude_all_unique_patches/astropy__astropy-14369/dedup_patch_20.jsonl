{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 761c4b8..91c7e73 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -185,9 +185,17 @@ class CDS(Base):\n                               | unit_expression DIVISION combined_units\n             \"\"\"\n             if len(p) == 3:\n+                # Case: /unit_expression\n                 p[0] = p[2] ** -1\n             else:\n-                p[0] = p[1] / p[3]\n+                # Case: unit_expression/combined_units\n+                # For sequences like a/b/c, ensure each division is applied left-to-right\n+                if hasattr(p[3], '_numerator'):\n+                    # If p[3] has divisions, multiply by reciprocal of all its components\n+                    p[0] = p[1] * (p[3] ** -1)\n+                else:\n+                    # Simple division case\n+                    p[0] = p[1] / p[3]\n \n         def p_unit_expression(p):\n             \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 829c8ad..6c3c5db 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -81,6 +81,8 @@ class CDS(Base):\n         def p_division_of_units(p):\n             if len(p) == 3:\n                 p[0] = p[2] ** (-1)\n+            elif hasattr(p[3], '_numerator'):\n+                p[0] = p[1] * p[3] ** (-1)\n             else:\n                 p[0] = p[1] / p[3]\n         def p_unit_expression(p):\n", "normalized_occurrence": 1}
