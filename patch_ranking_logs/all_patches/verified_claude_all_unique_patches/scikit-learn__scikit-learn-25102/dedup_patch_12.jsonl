{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25102", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..458cb2b 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -12,6 +13,7 @@ def _wrap_in_pandas_container(\n     *,\n     columns,\n     index=None,\n+    dtypes=None,\n ):\n     \"\"\"Create a Pandas DataFrame.\n \n@@ -35,6 +37,10 @@ def _wrap_in_pandas_container(\n \n     index : array-like, default=None\n         Index for data.\n+        \n+    dtypes : Series or dict, default=None\n+        Data types to use for the resulting DataFrame columns. If provided,\n+        these types will be applied to preserve the original dtypes.\n \n     Returns\n     -------\n@@ -59,7 +65,13 @@ def _wrap_in_pandas_container(\n             data_to_wrap.index = index\n         return data_to_wrap\n \n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        # Only set dtypes for columns that exist in both the DataFrame and dtypes\n+        common_cols = df.columns.intersection(dtypes.index if hasattr(dtypes, 'index') else dtypes.keys())\n+        if len(common_cols) > 0:\n+            df[common_cols] = df[common_cols].astype(dtypes[common_cols])\n+    return df\n \n \n def _get_output_config(method, estimator=None):\n@@ -131,6 +143,7 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n         data_to_wrap=data_to_wrap,\n         index=getattr(original_input, \"index\", None),\n         columns=estimator.get_feature_names_out,\n+        dtypes=getattr(original_input, \"dtypes\", None),\n     )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..6d0a5d6 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -3,7 +3,7 @@ from scipy.sparse import issparse\n from . import check_pandas_support\n from .._config import get_config\n from ._available_if import available_if\n-def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n+def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None, dtypes=None):\n     if issparse(data_to_wrap):\n         raise ValueError('Pandas output does not support sparse data.')\n     if callable(columns):\n@@ -18,7 +18,12 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n         if index is not None:\n             data_to_wrap.index = index\n         return data_to_wrap\n-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)\n+    if dtypes is not None:\n+        common_cols = df.columns.intersection(dtypes.index if hasattr(dtypes, 'index') else dtypes.keys())\n+        if len(common_cols) > 0:\n+            df[common_cols] = df[common_cols].astype(dtypes[common_cols])\n+    return df\n def _get_output_config(method, estimator=None):\n     est_sklearn_output_config = getattr(estimator, '_sklearn_output_config', {})\n     if method in est_sklearn_output_config:\n@@ -32,7 +37,7 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):\n     output_config = _get_output_config(method, estimator)\n     if output_config['dense'] == 'default' or not _auto_wrap_is_configured(estimator):\n         return data_to_wrap\n-    return _wrap_in_pandas_container(data_to_wrap=data_to_wrap, index=getattr(original_input, 'index', None), columns=estimator.get_feature_names_out)\n+    return _wrap_in_pandas_container(data_to_wrap=data_to_wrap, index=getattr(original_input, 'index', None), columns=estimator.get_feature_names_out, dtypes=getattr(original_input, 'dtypes', None))\n def _wrap_method_output(f, method):\n     @wraps(f)\n     def wrapped(self, X, *args, **kwargs):\n", "normalized_occurrence": 4}
