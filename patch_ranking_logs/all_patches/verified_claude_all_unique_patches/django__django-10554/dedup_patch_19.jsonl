{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..a12b987 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -350,13 +350,18 @@ class SQLCompiler:\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n+                    # Check if the source matches either the expression or alias\n+                    if src == sel_expr or (col_alias and src.refs == col_alias):\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+                    # Special case for values() where the select expression might be wrapped\n+                    if hasattr(sel_expr, 'source') and src == sel_expr.source:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Add the ordering expression to the select list if it's not present\n+                    self.select.append((src, None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..1a17c43 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -186,13 +186,15 @@ class SQLCompiler:\n                 for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n                     if is_ref and col_alias == src.refs:\n                         src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n+                    if src == sel_expr or (col_alias and src.refs == col_alias):\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+                    if hasattr(sel_expr, 'source') and src == sel_expr.source:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    self.select.append((src, None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
