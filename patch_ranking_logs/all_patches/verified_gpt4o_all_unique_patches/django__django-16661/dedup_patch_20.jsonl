{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..b8d8c75 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -490,7 +490,12 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             else:\n                 valid_lookups.add(filter_item)\n \n-        # Is it a valid relational lookup?\n+        # Check for foreign key or one-to-one relation as primary key\n+        for related_name, related_field in model._meta.get_fields_with_model():\n+            if related_field.primary_key and isinstance(related_field, (models.ForeignKey, models.OneToOneField)):\n+                primary_key_relations.add(related_name)\n+\n+        # Is it a valid lookup, including relational lookups?\n         return not {\n             LOOKUP_SEP.join(relation_parts),\n             LOOKUP_SEP.join(relation_parts + [part]),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 061e1b9..86da4c4 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -221,6 +221,9 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 valid_lookups.add(filter_item[0])\n             else:\n                 valid_lookups.add(filter_item)\n+        for related_name, related_field in model._meta.get_fields_with_model():\n+            if related_field.primary_key and isinstance(related_field, (models.ForeignKey, models.OneToOneField)):\n+                primary_key_relations.add(related_name)\n         return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)\n     def to_field_allowed(self, request, to_field):\n         try:\n", "normalized_occurrence": 1}
