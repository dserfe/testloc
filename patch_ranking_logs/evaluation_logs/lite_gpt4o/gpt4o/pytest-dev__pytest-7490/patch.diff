diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py
index 1316da9..3a3d02b 100644
--- a/src/_pytest/skipping.py
+++ b/src/_pytest/skipping.py
@@ -246,11 +246,8 @@ def pytest_runtest_setup(item: Item) -> None:
 
 @hookimpl(hookwrapper=True)
 def pytest_runtest_call(item: Item) -> Generator[None, None, None]:
-    xfailed = item._store.get(xfailed_key, None)
-    if xfailed is None:
-        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
-
     if not item.config.option.runxfail:
+        item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)
         if xfailed and not xfailed.run:
             xfail("[NOTRUN] " + xfailed.reason)
 
@@ -272,25 +269,26 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):
         rep.outcome = "failed"
     elif item.config.option.runxfail:
         pass  # don't interfere
-    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
-        assert call.excinfo.value.msg is not None
+    if xfailed is None:
+        xfailed = evaluate_xfail_marks(item)
+
+    if call.excinfo and isinstance(call.excinfo.value, xfail.Exception):
         rep.wasxfail = "reason: " + call.excinfo.value.msg
         rep.outcome = "skipped"
-    elif not rep.skipped and xfailed:
-        if call.excinfo:
-            raises = xfailed.raises
-            if raises is not None and not isinstance(call.excinfo.value, raises):
-                rep.outcome = "failed"
-            else:
-                rep.outcome = "skipped"
-                rep.wasxfail = xfailed.reason
-        elif call.when == "call":
-            if xfailed.strict:
-                rep.outcome = "failed"
-                rep.longrepr = "[XPASS(strict)] " + xfailed.reason
-            else:
-                rep.outcome = "passed"
-                rep.wasxfail = xfailed.reason
+    elif call.excinfo:
+        raises = xfailed.raises if xfailed else None
+        if raises is not None and not isinstance(call.excinfo.value, raises):
+            rep.outcome = "failed"
+        else:
+            rep.outcome = "skipped"
+            rep.wasxfail = xfailed.reason if xfailed else None
+    elif call.when == "call":
+        if xfailed and xfailed.strict:
+            rep.outcome = "failed"
+            rep.longrepr = "[XPASS(strict)] " + xfailed.reason
+        elif xfailed:
+            rep.outcome = "passed"
+            rep.wasxfail = xfailed.reason
 
     if (
         item._store.get(skipped_by_mark_key, True)
@@ -312,4 +310,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str
             return "xfailed", "x", "XFAIL"
         elif report.passed:
             return "xpassed", "X", "XPASS"
-    return None
+    return None
