{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..a3cd2ef 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -96,12 +96,13 @@ class PrettyPrinter(Printer):\n         vec1 = e._expr1\n         vec2 = e._expr2\n         pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        if not isinstance(vec2, Symbol):\n+            pform = prettyForm(*pform.parens())\n+        pform = prettyForm(*self._print(U('MULTIPLICATION SIGN')).left(pform))\n+        v1form = self._print(vec1)\n+        if not isinstance(vec1, Symbol):\n+            v1form = prettyForm(*v1form.parens())\n+        pform = prettyForm(*v1form.right(pform))\n         return pform\n \n     def _print_Curl(self, e):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..85540c1 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -61,12 +61,13 @@ class PrettyPrinter(Printer):\n         vec1 = e._expr1\n         vec2 = e._expr2\n         pform = self._print(vec2)\n-        pform = prettyForm(*pform.left('('))\n-        pform = prettyForm(*pform.right(')'))\n-        pform = prettyForm(*pform.left(self._print(U('MULTIPLICATION SIGN'))))\n-        pform = prettyForm(*pform.left(')'))\n-        pform = prettyForm(*pform.left(self._print(vec1)))\n-        pform = prettyForm(*pform.left('('))\n+        if not isinstance(vec2, Symbol):\n+            pform = prettyForm(*pform.parens())\n+        pform = prettyForm(*self._print(U('MULTIPLICATION SIGN')).left(pform))\n+        v1form = self._print(vec1)\n+        if not isinstance(vec1, Symbol):\n+            v1form = prettyForm(*v1form.parens())\n+        pform = prettyForm(*v1form.right(pform))\n         return pform\n     def _print_Curl(self, e):\n         vec = e._expr\n", "normalized_occurrence": 1}
