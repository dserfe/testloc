{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..a4d67d0 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -412,13 +412,35 @@ def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n+        if isinstance(report.longrepr, ExceptionInfo):\n+            data[\"longrepr\"] = {\n+                \"reprcrash\": report.longrepr._getreprcrash().__dict__,\n+                \"chain\": [\n+                    {\n+                        \"reprcrash\": chain._getreprcrash().__dict__,\n+                        \"reprtraceback\": chain._getreprtraceback().__dict__,\n+                    }\n+                    for chain in report.longrepr.chain\n+                ],\n+            }\n         return data\n \n \n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if \"longrepr\" in data and isinstance(data[\"longrepr\"], dict):\n+                from _pytest._code.code import ExceptionInfo\n+\n+                excinfo = ExceptionInfo()\n+                excinfo._reprcrash = data[\"longrepr\"][\"reprcrash\"]\n+                excinfo.chain = [\n+                    ExceptionInfo(reprcrash=chain[\"reprcrash\"], reprtraceback=chain[\"reprtraceback\"])\n+                    for chain in data[\"longrepr\"][\"chain\"]\n+                ]\n+                report.longrepr = excinfo\n+            return report\n         elif data[\"_report_type\"] == \"CollectReport\":\n             return CollectReport._from_json(data)\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..fb63f8e 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -209,11 +209,20 @@ def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n+        if isinstance(report.longrepr, ExceptionInfo):\n+            data['longrepr'] = {'reprcrash': report.longrepr._getreprcrash().__dict__, 'chain': [{'reprcrash': chain._getreprcrash().__dict__, 'reprtraceback': chain._getreprtraceback().__dict__} for chain in report.longrepr.chain]}\n         return data\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if 'longrepr' in data and isinstance(data['longrepr'], dict):\n+                from _pytest._code.code import ExceptionInfo\n+                excinfo = ExceptionInfo()\n+                excinfo._reprcrash = data['longrepr']['reprcrash']\n+                excinfo.chain = [ExceptionInfo(reprcrash=chain['reprcrash'], reprtraceback=chain['reprtraceback']) for chain in data['longrepr']['chain']]\n+                report.longrepr = excinfo\n+            return report\n         elif data['_report_type'] == 'CollectReport':\n             return CollectReport._from_json(data)\n         assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
