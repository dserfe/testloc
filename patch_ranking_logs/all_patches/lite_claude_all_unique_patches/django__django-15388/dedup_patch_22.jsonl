{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..866fde1 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -297,7 +297,13 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    # Only watch template-like files in template directories\n+                    if any(str(directory).endswith(d) for d in self.get_dirs()):\n+                        template_patterns = ['*.html', '*.htm', '*.django', '*.jinja', '*.xml']\n+                        for template_pattern in template_patterns:\n+                            yield from directory.glob(template_pattern)\n+                    else:\n+                        yield from directory.glob(pattern)\n \n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..2ea4da1 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -185,7 +185,12 @@ class BaseReloader:\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n-                    yield from directory.glob(pattern)\n+                    if any((str(directory).endswith(d) for d in self.get_dirs())):\n+                        template_patterns = ['*.html', '*.htm', '*.django', '*.jinja', '*.xml']\n+                        for template_pattern in template_patterns:\n+                            yield from directory.glob(template_pattern)\n+                    else:\n+                        yield from directory.glob(pattern)\n     def wait_for_apps_ready(self, app_reg, django_main_thread):\n         while django_main_thread.is_alive():\n             if app_reg.ready_event.wait(timeout=0.1):\n", "normalized_occurrence": 1}
