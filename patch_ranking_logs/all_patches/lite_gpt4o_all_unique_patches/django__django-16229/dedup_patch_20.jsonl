{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..3662314 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -362,6 +362,11 @@ class BaseModelForm(BaseForm, AltersData):\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n         self._validate_unique = False\n+        # Initialize hidden fields based on initial values\n+        for name, field in self.fields.items():\n+            initial_value = self.get_initial_for_field(field, name)\n+            self.initial[name] = initial_value\n+\n         super().__init__(\n             data,\n             files,\n@@ -374,7 +379,11 @@ class BaseModelForm(BaseForm, AltersData):\n             use_required_attribute=use_required_attribute,\n             renderer=renderer,\n         )\n-        for formfield in self.fields.values():\n+        for name, formfield in self.fields.items():\n+            hidden_initial_name = self.add_initial_prefix(name)\n+            if hidden_initial_name in self.data:\n+                initial_value = self.data[hidden_initial_name]\n+                formfield.initial = formfield.to_python(initial_value)\n             apply_limit_choices_to_to_formfield(formfield)\n \n     def _get_validation_exclusions(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..d650089 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -151,8 +151,15 @@ class BaseModelForm(BaseForm, AltersData):\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n+        for name, field in self.fields.items():\n+            initial_value = self.get_initial_for_field(field, name)\n+            self.initial[name] = initial_value\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n-        for formfield in self.fields.values():\n+        for name, formfield in self.fields.items():\n+            hidden_initial_name = self.add_initial_prefix(name)\n+            if hidden_initial_name in self.data:\n+                initial_value = self.data[hidden_initial_name]\n+                formfield.initial = formfield.to_python(initial_value)\n             apply_limit_choices_to_to_formfield(formfield)\n     def _get_validation_exclusions(self):\n         exclude = set()\n", "normalized_occurrence": 1}
