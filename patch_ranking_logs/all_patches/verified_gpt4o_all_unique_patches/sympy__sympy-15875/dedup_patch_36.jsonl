{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..f43f9fa 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -522,7 +522,7 @@ class Add(Expr, AssocOp):\n             elif (S.ImaginaryUnit*a).is_real:\n                 im_I.append(a*S.ImaginaryUnit)\n             else:\n-                return\n+                return None  # Indeterminate case\n         b = self.func(*nz)\n         if b.is_zero:\n             return fuzzy_not(self.func(*im_I).is_zero)\n@@ -533,7 +533,7 @@ class Add(Expr, AssocOp):\n         if self.is_commutative is False:\n             # issue 10528: there is no way to know if a nc symbol\n             # is zero or not\n-            return\n+            return None  # Indeterminate case\n         nz = []\n         z = 0\n         im_or_z = False\n@@ -545,17 +545,17 @@ class Add(Expr, AssocOp):\n                 elif a.is_zero is False:\n                     nz.append(a)\n                 else:\n-                    return\n+                    return None  # Indeterminate case\n             elif a.is_imaginary:\n                 im = True\n             elif (S.ImaginaryUnit*a).is_real:\n                 im_or_z = True\n             else:\n-                return\n+                return None  # Indeterminate case\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n-            return None\n+            return None  # Indeterminate case\n         b = self.func(*nz)\n         if b.is_zero:\n             if not im_or_z and not im:\n@@ -564,6 +564,7 @@ class Add(Expr, AssocOp):\n                 return False\n         if b.is_zero is False:\n             return False\n+        return None  # Indeterminate case\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..0d8f42a 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -279,7 +279,7 @@ class Add(Expr, AssocOp):\n             elif (S.ImaginaryUnit * a).is_real:\n                 im_I.append(a * S.ImaginaryUnit)\n             else:\n-                return\n+                return None\n         b = self.func(*nz)\n         if b.is_zero:\n             return fuzzy_not(self.func(*im_I).is_zero)\n@@ -287,7 +287,7 @@ class Add(Expr, AssocOp):\n             return False\n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n-            return\n+            return None\n         nz = []\n         z = 0\n         im_or_z = False\n@@ -299,13 +299,13 @@ class Add(Expr, AssocOp):\n                 elif a.is_zero is False:\n                     nz.append(a)\n                 else:\n-                    return\n+                    return None\n             elif a.is_imaginary:\n                 im = True\n             elif (S.ImaginaryUnit * a).is_real:\n                 im_or_z = True\n             else:\n-                return\n+                return None\n         if z == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n@@ -318,6 +318,7 @@ class Add(Expr, AssocOp):\n                 return False\n         if b.is_zero is False:\n             return False\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
