{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13448", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex d751f3a..d46836e 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -58,7 +58,9 @@ class BaseDatabaseCreation:\n         settings.DATABASES[self.connection.alias][\"NAME\"] = test_database_name\n         self.connection.settings_dict[\"NAME\"] = test_database_name\n \n-        if self.connection.settings_dict['TEST']['MIGRATE']:\n+        # We only serialize the data if migrations are enabled since otherwise\n+        # there won't be any tables or data to serialize\n+        if self.connection.settings_dict['TEST'].get('MIGRATE', True):\n             # We report migrate messages at one level lower than that\n             # requested. This ensures we don't get flooded with messages during\n             # testing (unless you really ask to be flooded).\n@@ -70,12 +72,12 @@ class BaseDatabaseCreation:\n                 run_syncdb=True,\n             )\n \n-        # We then serialize the current state of the database into a string\n-        # and store it on the connection. This slightly horrific process is so people\n-        # who are testing on databases without transactions or who are using\n-        # a TransactionTestCase still get a clean database on every test run.\n-        if serialize:\n-            self.connection._test_serialized_contents = self.serialize_db_to_string()\n+            # We then serialize the current state of the database into a string\n+            # and store it on the connection. This slightly horrific process is so people\n+            # who are testing on databases without transactions or who are using\n+            # a TransactionTestCase still get a clean database on every test run.\n+            if serialize:\n+                self.connection._test_serialized_contents = self.serialize_db_to_string()\n \n         call_command('createcachetable', database=self.connection.alias)\n \n", "occurrence": 3, "normalized_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 4f2d479..85d082f 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -26,10 +26,10 @@ class BaseDatabaseCreation:\n         self.connection.close()\n         settings.DATABASES[self.connection.alias]['NAME'] = test_database_name\n         self.connection.settings_dict['NAME'] = test_database_name\n-        if self.connection.settings_dict['TEST']['MIGRATE']:\n+        if self.connection.settings_dict['TEST'].get('MIGRATE', True):\n             call_command('migrate', verbosity=max(verbosity - 1, 0), interactive=False, database=self.connection.alias, run_syncdb=True)\n-        if serialize:\n-            self.connection._test_serialized_contents = self.serialize_db_to_string()\n+            if serialize:\n+                self.connection._test_serialized_contents = self.serialize_db_to_string()\n         call_command('createcachetable', database=self.connection.alias)\n         self.connection.ensure_connection()\n         return test_database_name\n", "normalized_occurrence": 3}
