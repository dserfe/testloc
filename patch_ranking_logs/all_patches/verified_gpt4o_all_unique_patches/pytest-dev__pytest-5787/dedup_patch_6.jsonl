{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..1e6b9fa 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -358,12 +358,26 @@ class TestReport(BaseReport):\n                 longrepr = (str(r.path), r.lineno, r.message)\n             else:\n                 outcome = \"failed\"\n+                from _pytest._code.code import ExceptionInfo\n+\n+                def serialize_excinfo(excinfo):\n+                    if not isinstance(excinfo, ExceptionInfo):\n+                        return str(excinfo)\n+                    chain = []\n+                    while excinfo is not None:\n+                        reprcrash = excinfo._getreprcrash()\n+                        chain.append((reprcrash.path, reprcrash.lineno, reprcrash.message))\n+                        excinfo = excinfo.__cause__ if excinfo.__cause__ else excinfo.__context__\n+                    return chain\n+\n                 if call.when == \"call\":\n                     longrepr = item.repr_failure(excinfo)\n+                    longrepr.chain = serialize_excinfo(excinfo)\n                 else:  # exception in setup or teardown\n                     longrepr = item._repr_failure_py(\n                         excinfo, style=item.config.getoption(\"tbstyle\", \"auto\")\n                     )\n+                    longrepr.chain = serialize_excinfo(excinfo)\n         for rwhen, key, content in item._report_sections:\n             sections.append((\"Captured {} {}\".format(key, rwhen), content))\n         return cls(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..d9361a3 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -179,10 +179,22 @@ class TestReport(BaseReport):\n             longrepr = (str(r.path), r.lineno, r.message)\n         else:\n             outcome = 'failed'\n+            from _pytest._code.code import ExceptionInfo\n+            def serialize_excinfo(excinfo):\n+                if not isinstance(excinfo, ExceptionInfo):\n+                    return str(excinfo)\n+                chain = []\n+                while excinfo is not None:\n+                    reprcrash = excinfo._getreprcrash()\n+                    chain.append((reprcrash.path, reprcrash.lineno, reprcrash.message))\n+                    excinfo = excinfo.__cause__ if excinfo.__cause__ else excinfo.__context__\n+                return chain\n             if call.when == 'call':\n                 longrepr = item.repr_failure(excinfo)\n+                longrepr.chain = serialize_excinfo(excinfo)\n             else:\n                 longrepr = item._repr_failure_py(excinfo, style=item.config.getoption('tbstyle', 'auto'))\n+                longrepr.chain = serialize_excinfo(excinfo)\n         for rwhen, key, content in item._report_sections:\n             sections.append(('Captured {} {}'.format(key, rwhen), content))\n         return cls(item.nodeid, item.location, keywords, outcome, longrepr, when, sections, duration, user_properties=item.user_properties)\n", "normalized_occurrence": 1}
