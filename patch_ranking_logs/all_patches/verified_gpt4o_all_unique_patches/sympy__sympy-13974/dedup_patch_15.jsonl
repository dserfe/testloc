{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..887bebd 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -254,8 +254,9 @@ class TensorProduct(Expr):\n \n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        elif isinstance(args[i], Pow):\n+            base, exp = args[i].as_base_exp()\n+            return TensorProduct(*args[:i], base**exp, *args[i+1:])._eval_expand_tensorproduct()\n \n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n@@ -382,7 +383,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +395,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..c456c0a 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -122,8 +122,9 @@ class TensorProduct(Expr):\n                 break\n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        elif isinstance(args[i], Pow):\n+            base, exp = args[i].as_base_exp()\n+            return TensorProduct(*args[:i], base ** exp, *args[i + 1:])._eval_expand_tensorproduct()\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n@@ -161,7 +162,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
