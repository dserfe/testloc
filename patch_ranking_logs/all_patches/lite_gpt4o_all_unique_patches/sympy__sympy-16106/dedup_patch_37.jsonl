{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16106", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 59074b8..f9925d4 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -443,6 +443,16 @@ class MathMLContentPrinter(MathMLPrinterBase):\n             x.appendChild(self._print(arg))\n         return x\n \n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('apply')\n+        subscript = self.dom.createElement('subscript')\n+        base = self._print(e.base)\n+        subscript.appendChild(base)\n+        for index in e.indices:\n+            subscript.appendChild(self._print(index))\n+        x.appendChild(subscript)\n+        return x\n+\n     def _print_Basic(self, e):\n         x = self.dom.createElement(self.mathml_tag(e))\n         for arg in e.args:\n@@ -1006,6 +1016,16 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         mrow.appendChild(brac)\n         return mrow\n \n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('apply')\n+        subscript = self.dom.createElement('subscript')\n+        base = self._print(e.base)\n+        subscript.appendChild(base)\n+        for index in e.indices:\n+            subscript.appendChild(self._print(index))\n+        x.appendChild(subscript)\n+        return x\n+\n     def _print_Basic(self, e):\n         mrow = self.dom.createElement('mrow')\n         mi = self.dom.createElement('mi')\n", "occurrence": 1, "normalized_patch": "--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('apply')\n+        subscript = self.dom.createElement('subscript')\n+        base = self._print(e.base)\n+        subscript.appendChild(base)\n+        for index in e.indices:\n+            subscript.appendChild(self._print(index))\n+        x.appendChild(subscript)\n+        return x\n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement('apply')\n+        subscript = self.dom.createElement('subscript')\n+        base = self._print(e.base)\n+        subscript.appendChild(base)\n+        for index in e.indices:\n+            subscript.appendChild(self._print(index))\n+        x.appendChild(subscript)\n+        return x", "normalized_occurrence": 1}
