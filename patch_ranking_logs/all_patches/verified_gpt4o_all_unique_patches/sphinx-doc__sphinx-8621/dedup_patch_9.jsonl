{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..4d9433f 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -136,7 +136,24 @@ class XRefRole(ReferenceRole):\n             self.has_explicit_title = False  # treat as implicit\n             text, target = self.update_title_and_target(text, \"\")\n \n+        if self.reftype == 'kbd':\n+            text = self.process_kbd_text(text)\n         node = self.innernodeclass(self.rawtext, text, classes=self.classes)\n+\n+    def process_kbd_text(self, text: str) -> str:\n+        # Handle standalone keystrokes and compound keystrokes\n+        parts = re.split(r'([-+^])', text)\n+        result = []\n+        is_separator = False\n+        for part in parts:\n+            if part in '-+^':\n+                is_separator = True\n+            elif is_separator:\n+                result.append(f'<kbd>{part}</kbd>')\n+                is_separator = False\n+            else:\n+                result.append(f'<kbd>{part}</kbd>')\n+        return ''.join(result)\n         return self.result_nodes(self.inliner.document, self.env, node, is_ref=False)\n \n     def create_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex ef483a8..3959af6 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -63,7 +63,22 @@ class XRefRole(ReferenceRole):\n         if self.fix_parens:\n             self.has_explicit_title = False\n             text, target = self.update_title_and_target(text, '')\n+        if self.reftype == 'kbd':\n+            text = self.process_kbd_text(text)\n         node = self.innernodeclass(self.rawtext, text, classes=self.classes)\n+    def process_kbd_text(self, text: str) -> str:\n+        parts = re.split('([-+^])', text)\n+        result = []\n+        is_separator = False\n+        for part in parts:\n+            if part in '-+^':\n+                is_separator = True\n+            elif is_separator:\n+                result.append(f'<kbd>{part}</kbd>')\n+                is_separator = False\n+            else:\n+                result.append(f'<kbd>{part}</kbd>')\n+        return ''.join(result)\n         return self.result_nodes(self.inliner.document, self.env, node, is_ref=False)\n     def create_xref_node(self) -> Tuple[List[Node], List[system_message]]:\n         target = self.target\n", "normalized_occurrence": 1}
