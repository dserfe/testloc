{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..87d0808 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -16,70 +17,11 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing_vars=True,\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n-    Parameters\n-    ----------\n-    objs : sequence of Dataset and DataArray objects\n-        xarray objects to concatenate together. Each object is expected to\n-        consist of variables and coordinates with matching shapes except for\n-        along the concatenated dimension.\n-    dim : str or DataArray or pandas.Index\n-        Name of the dimension to concatenate along. This can either be a new\n-        dimension name, in which case it is added along axis=0, or an existing\n-        dimension name, in which case the location of the dimension is\n-        unchanged. If dimension is provided as a DataArray or Index, its name\n-        is used as the dimension to concatenate along and the values are added\n-        as a coordinate.\n-    data_vars : {'minimal', 'different', 'all' or list of str}, optional\n-        These data variables will be concatenated together:\n-          * 'minimal': Only data variables in which the dimension already\n-            appears are included.\n-          * 'different': Data variables which are not equal (ignoring\n-            attributes) across all datasets are also concatenated (as well as\n-            all for which dimension already appears). Beware: this option may\n-            load the data payload of data variables into memory if they are not\n-            already loaded.\n-          * 'all': All data variables will be concatenated.\n-          * list of str: The listed data variables will be concatenated, in\n-            addition to the 'minimal' data variables.\n-        If objects are DataArrays, data_vars must be 'all'.\n-    coords : {'minimal', 'different', 'all' or list of str}, optional\n-        These coordinate variables will be concatenated together:\n-          * 'minimal': Only coordinates in which the dimension already appears\n-            are included.\n-          * 'different': Coordinates which are not equal (ignoring attributes)\n-            across all datasets are also concatenated (as well as all for which\n-            dimension already appears). Beware: this option may load the data\n-            payload of coordinate variables into memory if they are not already\n-            loaded.\n-          * 'all': All coordinate variables will be concatenated, except\n-            those corresponding to other dimensions.\n-          * list of str: The listed coordinate variables will be concatenated,\n-            in addition to the 'minimal' coordinates.\n-    compat : {'identical', 'equals', 'broadcast_equals', 'no_conflicts', 'override'}, optional\n-        String indicating how to compare non-concatenated variables of the same name for\n-        potential conflicts. This is passed down to merge.\n-\n-        - 'broadcast_equals': all values must be equal when variables are\n-          broadcast against each other to ensure common dimensions.\n-        - 'equals': all values and dimensions must be the same.\n-        - 'identical': all values, dimensions and attributes must be the\n-          same.\n-        - 'no_conflicts': only values which are not null in both datasets\n-          must be equal. The returned dataset then contains the combination\n-          of all non-null values.\n-        - 'override': skip comparing and pick variable from first dataset\n-    positions : None or list of integer arrays, optional\n-        List of integer arrays which specifies the integer positions to which\n-        to assign each dataset along the concatenated dimension. If not\n-        supplied, objects are concatenated in the provided order.\n-    fill_value : scalar, optional\n-        Value to use for newly missing values\n-    join : {'outer', 'inner', 'left', 'right', 'exact'}, optional\n-        String indicating how to combine differing indexes\n-        (excluding dim) in objects\n+\n \n         - 'outer': use the union of object indexes\n         - 'inner': use the intersection of object indexes\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..5705586 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -4,7 +4,7 @@ from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n from .variable import IndexVariable, Variable, as_variable\n from .variable import concat as concat_vars\n-def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer'):\n+def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer', ignore_missing_vars=True):\n     from .dataset import Dataset\n     from .dataarray import DataArray\n     try:\n", "normalized_occurrence": 2}
