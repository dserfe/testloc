{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..2bc3a24 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -372,17 +372,24 @@ def tensor_product_simp(e, **hints):\n     >>> tensor_product_simp(e)\n     (A*C)x(B*D)\n \n-    This is the core logic of this function, and it works inside, powers, sums,\n+    This is the core logic of this function, and it works inside sums,\n     commutators and anticommutators as well:\n \n-    >>> tensor_product_simp(e**2)\n-    (A*C)x(B*D)**2\n+    >>> e = (TensorProduct(A,B)*TensorProduct(C,D))**2\n+    >>> e\n+    (AxB*CxD)**2\n+    >>> tensor_product_simp(e)\n+    (A*C)**2 x (B*D)**2\n \n     \"\"\"\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simplified = tensor_product_simp(e.base)\n+        if isinstance(base_simplified, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simplified.args])\n+        else:\n+            return base_simplified ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +397,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..0690b68 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -161,7 +161,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simplified = tensor_product_simp(e.base)\n+        if isinstance(base_simplified, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simplified.args])\n+        else:\n+            return base_simplified ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
