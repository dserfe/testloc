{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..6169977 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,10 +588,12 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n-                skip_subtrees: list[str] = []\n+            if os.path.isdir(something):\n+                # Check for both __init__.py and same-named module file\n+                has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n+                has_same_name_module = os.path.isfile(something + \".py\")\n+                if not (has_init or has_same_name_module):\n+                    skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n                         # Skip subtree of already discovered package.\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..8b08b05 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -225,8 +225,11 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 self._msgs_state[msg.msgid] = False\n     def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n-                skip_subtrees: list[str] = []\n+            if os.path.isdir(something):\n+                has_init = os.path.isfile(os.path.join(something, '__init__.py'))\n+                has_same_name_module = os.path.isfile(something + '.py')\n+                if not (has_init or has_same_name_module):\n+                    skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any((root.startswith(s) for s in skip_subtrees)):\n                         continue\n", "normalized_occurrence": 1}
