{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..ae0190e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -244,7 +244,13 @@ class BlockMatrix(MatrixExpr):\n                 break\n             else:\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy.matrices.expressions.matexpr import MatrixElement\n+\n+        block = self.blocks[row_block, col_block]\n+        if i.is_Integer and j.is_Integer:\n+            return block[i, j]\n+        else:\n+            return MatrixElement(block, i, j)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..e3e0ac0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -113,7 +113,12 @@ class BlockMatrix(MatrixExpr):\n                 break\n             else:\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy.matrices.expressions.matexpr import MatrixElement\n+        block = self.blocks[row_block, col_block]\n+        if i.is_Integer and j.is_Integer:\n+            return block[i, j]\n+        else:\n+            return MatrixElement(block, i, j)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
