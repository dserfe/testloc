{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16560", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 8b23275..e4531de 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -62,8 +62,13 @@ class BaseConstraint:\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError(\"This method must be implemented by a subclass.\")\n \n+\n+\n     def get_violation_error_message(self):\n-        return self.violation_error_message % {\"name\": self.name}\n+        return ValidationError(\n+            self.violation_error_message % {\"name\": self.name},\n+            code=self.violation_error_code,\n+        )\n \n     def deconstruct(self):\n         path = \"%s.%s\" % (self.__class__.__module__, self.__class__.__name__)\n@@ -74,6 +79,11 @@ class BaseConstraint:\n             and self.violation_error_message != self.default_violation_error_message\n         ):\n             kwargs[\"violation_error_message\"] = self.violation_error_message\n+        if (\n+            self.violation_error_code is not None\n+            and self.violation_error_code != self.default_violation_error_code\n+        ):\n+            kwargs[\"violation_error_code\"] = self.violation_error_code\n         return (path, (), kwargs)\n \n     def clone(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 50c20cc..787488b 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -40,13 +40,15 @@ class BaseConstraint:\n     def validate(self, model, instance, exclude=None, using=DEFAULT_DB_ALIAS):\n         raise NotImplementedError('This method must be implemented by a subclass.')\n     def get_violation_error_message(self):\n-        return self.violation_error_message % {'name': self.name}\n+        return ValidationError(self.violation_error_message % {'name': self.name}, code=self.violation_error_code)\n     def deconstruct(self):\n         path = '%s.%s' % (self.__class__.__module__, self.__class__.__name__)\n         path = path.replace('django.db.models.constraints', 'django.db.models')\n         kwargs = {'name': self.name}\n         if self.violation_error_message is not None and self.violation_error_message != self.default_violation_error_message:\n             kwargs['violation_error_message'] = self.violation_error_message\n+        if self.violation_error_code is not None and self.violation_error_code != self.default_violation_error_code:\n+            kwargs['violation_error_code'] = self.violation_error_code\n         return (path, (), kwargs)\n     def clone(self):\n         _, args, kwargs = self.deconstruct()\n", "normalized_occurrence": 1}
