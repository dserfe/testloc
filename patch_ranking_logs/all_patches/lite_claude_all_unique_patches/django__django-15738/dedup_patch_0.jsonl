{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 95f06ff..3e6fbeb 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1486,15 +1486,25 @@ class MigrationAutodetector:\n                     if value\n                     not in self.renamed_index_together_values[app_label, model_name]\n                 }\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n+            # If we're removing constraints or the field type is changing\n+            if old_value and not new_value:\n                 self.add_operation(\n                     app_label,\n                     operation(\n-                        name=model_name, **{operation.option_name: removal_value}\n+                        name=model_name, **{operation.option_name: set()}\n                     ),\n                     dependencies=dependencies,\n                 )\n+            else:\n+                removal_value = new_value.intersection(old_value)\n+                if removal_value or old_value:\n+                    self.add_operation(\n+                        app_label,\n+                        operation(\n+                            name=model_name, **{operation.option_name: removal_value}\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n \n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex a7b157c..3031078 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -603,9 +603,12 @@ class MigrationAutodetector:\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n             if operation == operations.AlterIndexTogether:\n                 old_value = {value for value in old_value if value not in self.renamed_index_together_values[app_label, model_name]}\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n-                self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n+            if old_value and (not new_value):\n+                self.add_operation(app_label, operation(name=model_name, **{operation.option_name: set()}), dependencies=dependencies)\n+            else:\n+                removal_value = new_value.intersection(old_value)\n+                if removal_value or old_value:\n+                    self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_removed_altered_index_together(self):\n", "normalized_occurrence": 1}
