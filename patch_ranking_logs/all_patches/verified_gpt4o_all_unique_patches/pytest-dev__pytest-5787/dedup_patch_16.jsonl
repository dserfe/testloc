{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..65e62d3 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -352,6 +352,11 @@ class TestReport(BaseReport):\n             if not isinstance(excinfo, ExceptionInfo):\n                 outcome = \"failed\"\n                 longrepr = excinfo\n+                chain = excinfo.chain\n+                repr_chain = []\n+                for exc in chain:\n+                    repr_chain.append(exc.repr())\n+                longrepr = (excinfo.exconly(), repr_chain)\n             elif excinfo.errisinstance(skip.Exception):\n                 outcome = \"skipped\"\n                 r = excinfo._getreprcrash()\n@@ -418,7 +423,14 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if isinstance(report.longrepr, tuple) and len(report.longrepr) == 2 and isinstance(report.longrepr[1], list):\n+                repr_chain = report.longrepr[1]\n+                exc_chain = []\n+                for repr in repr_chain:\n+                    exc_chain.append(ExceptionInfo.from_exc_repr(repr))\n+                report.longrepr = (report.longrepr[0], exc_chain)\n+            return report\n         elif data[\"_report_type\"] == \"CollectReport\":\n             return CollectReport._from_json(data)\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..c7b42e0 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -173,6 +173,11 @@ class TestReport(BaseReport):\n         elif not isinstance(excinfo, ExceptionInfo):\n             outcome = 'failed'\n             longrepr = excinfo\n+            chain = excinfo.chain\n+            repr_chain = []\n+            for exc in chain:\n+                repr_chain.append(exc.repr())\n+            longrepr = (excinfo.exconly(), repr_chain)\n         elif excinfo.errisinstance(skip.Exception):\n             outcome = 'skipped'\n             r = excinfo._getreprcrash()\n@@ -213,7 +218,14 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            if isinstance(report.longrepr, tuple) and len(report.longrepr) == 2 and isinstance(report.longrepr[1], list):\n+                repr_chain = report.longrepr[1]\n+                exc_chain = []\n+                for repr in repr_chain:\n+                    exc_chain.append(ExceptionInfo.from_exc_repr(repr))\n+                report.longrepr = (report.longrepr[0], exc_chain)\n+            return report\n         elif data['_report_type'] == 'CollectReport':\n             return CollectReport._from_json(data)\n         assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
