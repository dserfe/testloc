{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..80d56a0 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1739,10 +1739,11 @@ class QuerySet(AltersData):\n             # That won't stop people trying to do this, so let's be explicit.\n             raise TypeError(\"Cannot pass None as an argument to only().\")\n         for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+            base_field = field.split(LOOKUP_SEP, 1)[0]\n+            if base_field in self.query._filtered_relations:\n                 raise ValueError(\"only() is not supported with FilteredRelation.\")\n         clone = self._chain()\n+        # Store the entire field path for proper handling of related fields\n         clone.query.add_immediate_loading(fields)\n         return clone\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..7f2c0ac 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -941,8 +941,8 @@ class QuerySet(AltersData):\n         if fields == (None,):\n             raise TypeError('Cannot pass None as an argument to only().')\n         for field in fields:\n-            field = field.split(LOOKUP_SEP, 1)[0]\n-            if field in self.query._filtered_relations:\n+            base_field = field.split(LOOKUP_SEP, 1)[0]\n+            if base_field in self.query._filtered_relations:\n                 raise ValueError('only() is not supported with FilteredRelation.')\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n", "normalized_occurrence": 3}
