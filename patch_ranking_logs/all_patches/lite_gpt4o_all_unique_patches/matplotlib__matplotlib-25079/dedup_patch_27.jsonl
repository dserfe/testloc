{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..937f06a 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -583,7 +583,7 @@ class ScalarMappable:\n         in_init = self.cmap is None\n \n         self.cmap = _ensure_cmap(cmap)\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.changed()  # Things are not set up properly yet.\n \n     @property\n@@ -611,12 +611,12 @@ class ScalarMappable:\n \n         in_init = self.norm is None\n         # Remove the current callback and connect to the new one\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n         self._id_norm = self.norm.callbacks.connect('changed',\n                                                     self.changed)\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.changed()\n \n     def set_norm(self, norm):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..46413b1 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -169,7 +169,7 @@ class ScalarMappable:\n     def set_cmap(self, cmap):\n         in_init = self.cmap is None\n         self.cmap = _ensure_cmap(cmap)\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.changed()\n     @property\n     def norm(self):\n@@ -188,11 +188,11 @@ class ScalarMappable:\n         if norm is self.norm:\n             return\n         in_init = self.norm is None\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.norm.callbacks.disconnect(self._id_norm)\n         self._norm = norm\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n-        if not in_init:\n+        if not in_init and hasattr(self, '_id_norm'):\n             self.changed()\n     def set_norm(self, norm):\n         self.norm = norm\n", "normalized_occurrence": 1}
