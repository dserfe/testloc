{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..243c161 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -572,7 +572,7 @@ class Query(BaseExpression):\n         if self.distinct_fields != rhs.distinct_fields:\n             raise TypeError('Cannot combine queries with different distinct fields.')\n \n-        # Work out how to relabel the rhs aliases, if necessary.\n+        # Work out how to relabel the rhs aliases, if necessary, ensuring no conflict.\n         change_map = {}\n         conjunction = (connector == AND)\n \n@@ -598,18 +598,21 @@ class Query(BaseExpression):\n         rhs_votes = set()\n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n+        existing_aliases = set(self.alias_map)\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n-            # If the left side of the join was already relabeled, use the\n-            # updated alias.\n+            # If the left side of the join was already relabeled, use the updated alias.\n             join = join.relabeled_clone(change_map)\n+            # Ensure the new alias does not conflict with existing aliases.\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join, reuse=False)  # force new alias.\n+            existing_aliases.add(new_alias)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n-            # We can't reuse the same join again in the query. If we have two\n-            # distinct joins for the same connection in rhs query, then the\n-            # combined query must have two joins, too.\n+            # We can't reuse the same join again in the query. If we have two distinct joins \n+            # for the same connection in rhs query, then the combined query must have two joins, too.\n             reuse.discard(new_alias)\n             if alias != new_alias:\n                 change_map[alias] = new_alias\n@@ -846,6 +849,8 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        # Ensure that change_map's keys and values do not intersect.\n+        # This is to prevent an alias from being changed multiple times.\n         assert set(change_map).isdisjoint(change_map.values())\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..89857ad 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -332,11 +332,15 @@ class Query(BaseExpression):\n         joinpromoter = JoinPromoter(connector, 2, False)\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n+        existing_aliases = set(self.alias_map)\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join, reuse=False)\n+            existing_aliases.add(new_alias)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n", "normalized_occurrence": 1}
