{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11618", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c58cbf..c6f8e33 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -247,6 +247,12 @@ class Point(GeometryEntity):\n \n         distance : number or symbolic expression.\n \n+        Raises\n+        ======\n+\n+        ValueError\n+            When the points have different dimensions\n+\n         See Also\n         ========\n \n@@ -266,6 +272,8 @@ class Point(GeometryEntity):\n         sqrt(x**2 + y**2)\n \n         \"\"\"\n+        if isinstance(p, Point) and self.ambient_dimension != p.ambient_dimension:\n+            raise ValueError(\"Points must have the same dimension to compute distance\")\n         return sqrt(sum([(a - b)**2 for a, b in zip(\n             self.args, p.args if isinstance(p, Point) else p)]))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex ecc6940..3c0a040 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -65,6 +65,8 @@ class Point(GeometryEntity):\n     def ambient_dimension(self):\n         return len(self)\n     def distance(self, p):\n+        if isinstance(p, Point) and self.ambient_dimension != p.ambient_dimension:\n+            raise ValueError('Points must have the same dimension to compute distance')\n         return sqrt(sum([(a - b) ** 2 for a, b in zip(self.args, p.args if isinstance(p, Point) else p)]))\n     def taxicab_distance(self, p):\n         p = Point(p)\n", "normalized_occurrence": 1}
