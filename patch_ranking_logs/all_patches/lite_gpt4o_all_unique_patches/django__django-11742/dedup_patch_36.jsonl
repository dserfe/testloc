{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..ea6322f 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -207,7 +207,22 @@ class Field(RegisterLookupMixin):\n             *self._check_backend_specific_checks(**kwargs),\n             *self._check_validators(),\n             *self._check_deprecation_details(),\n-        ]\n+        ] + self._check_max_length_with_choices()\n+\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+\n+        max_choice_length = max(len(str(choice)) for choice, _ in self.choices)\n+        if self.max_length < max_choice_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\",\n+                    obj=self,\n+                    id='fields.E122',\n+                )\n+            ]\n+        return []\n \n     def _check_field_name(self):\n         \"\"\"\n@@ -289,7 +304,22 @@ class Field(RegisterLookupMixin):\n                 obj=self,\n                 id='fields.E005',\n             )\n-        ]\n+        ] + self._check_max_length_with_choices()\n+\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+\n+        max_choice_length = max(len(str(choice)) for choice, _ in self.choices)\n+        if self.max_length < max_choice_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\",\n+                    obj=self,\n+                    id='fields.E122',\n+                )\n+            ]\n+        return []\n \n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n@@ -955,7 +985,22 @@ class CharField(Field):\n         return [\n             *super().check(**kwargs),\n             *self._check_max_length_attribute(**kwargs),\n-        ]\n+        ] + self._check_max_length_with_choices()\n+\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+\n+        max_choice_length = max(len(str(choice)) for choice, _ in self.choices)\n+        if self.max_length < max_choice_length:\n+            return [\n+                checks.Error(\n+                    f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\",\n+                    obj=self,\n+                    id='fields.E122',\n+                )\n+            ]\n+        return []\n \n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..64860d3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -107,7 +107,14 @@ class Field(RegisterLookupMixin):\n             return '<%s: %s>' % (path, name)\n         return '<%s>' % path\n     def check(self, **kwargs):\n-        return [*self._check_field_name(), *self._check_choices(), *self._check_db_index(), *self._check_null_allowed_for_primary_keys(), *self._check_backend_specific_checks(**kwargs), *self._check_validators(), *self._check_deprecation_details()]\n+        return [*self._check_field_name(), *self._check_choices(), *self._check_db_index(), *self._check_null_allowed_for_primary_keys(), *self._check_backend_specific_checks(**kwargs), *self._check_validators(), *self._check_deprecation_details()] + self._check_max_length_with_choices()\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+        max_choice_length = max((len(str(choice)) for choice, _ in self.choices))\n+        if self.max_length < max_choice_length:\n+            return [checks.Error(f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\", obj=self, id='fields.E122')]\n+        return []\n     def _check_field_name(self):\n         if self.name.endswith('_'):\n             return [checks.Error('Field names must not end with an underscore.', obj=self, id='fields.E001')]\n@@ -140,7 +147,14 @@ class Field(RegisterLookupMixin):\n                 break\n         else:\n             return []\n-        return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n+        return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')] + self._check_max_length_with_choices()\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+        max_choice_length = max((len(str(choice)) for choice, _ in self.choices))\n+        if self.max_length < max_choice_length:\n+            return [checks.Error(f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\", obj=self, id='fields.E122')]\n+        return []\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [checks.Error(\"'db_index' must be None, True or False.\", obj=self, id='fields.E006')]\n@@ -461,7 +475,14 @@ class CharField(Field):\n         super().__init__(*args, **kwargs)\n         self.validators.append(validators.MaxLengthValidator(self.max_length))\n     def check(self, **kwargs):\n-        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)]\n+        return [*super().check(**kwargs), *self._check_max_length_attribute(**kwargs)] + self._check_max_length_with_choices()\n+    def _check_max_length_with_choices(self):\n+        if not self.choices:\n+            return []\n+        max_choice_length = max((len(str(choice)) for choice, _ in self.choices))\n+        if self.max_length < max_choice_length:\n+            return [checks.Error(f\"'max_length' must be at least as long as the longest choice ({max_choice_length} characters).\", obj=self, id='fields.E122')]\n+        return []\n     def _check_max_length_attribute(self, **kwargs):\n         if self.max_length is None:\n             return [checks.Error(\"CharFields must define a 'max_length' attribute.\", obj=self, id='fields.E120')]\n", "normalized_occurrence": 1}
