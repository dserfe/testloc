{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13146", "model_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 1ed5a09..90b6514 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -581,6 +581,24 @@ def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n         expr = product_simplify(expr)\n \n     short = shorter(powsimp(expr, combine='exp', deep=True), powsimp(expr), expr)\n+    # Additional step to simplify expressions with fractional powers\n+    if short.is_Add:\n+        terms_dict = {}\n+        for arg in short.args:\n+            base, exp = arg.as_base_exp()\n+            if base not in terms_dict:\n+                terms_dict[base] = []\n+            terms_dict[base].append(exp)\n+        simplified_terms = []\n+        for base, exponents in terms_dict.items():\n+            if len(exponents) > 1:\n+                total_exp = sum(exponents)\n+                if total_exp == 0:\n+                    continue\n+                simplified_terms.append(base**total_exp)\n+            else:\n+                simplified_terms.append(base**exponents[0])\n+        short = Add(*simplified_terms)\n     short = shorter(short, factor_terms(short), expand_power_exp(expand_mul(short)))\n     if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n         short = exptrigsimp(short, simplify=False)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/simplify.py b/sympy/simplify/simplify.py\nindex 6ee9e94..9710299 100644\n--- a/sympy/simplify/simplify.py\n+++ b/sympy/simplify/simplify.py\n@@ -192,6 +192,23 @@ def simplify(expr, ratio=1.7, measure=count_ops, fu=False):\n     if expr.has(Product):\n         expr = product_simplify(expr)\n     short = shorter(powsimp(expr, combine='exp', deep=True), powsimp(expr), expr)\n+    if short.is_Add:\n+        terms_dict = {}\n+        for arg in short.args:\n+            base, exp = arg.as_base_exp()\n+            if base not in terms_dict:\n+                terms_dict[base] = []\n+            terms_dict[base].append(exp)\n+        simplified_terms = []\n+        for base, exponents in terms_dict.items():\n+            if len(exponents) > 1:\n+                total_exp = sum(exponents)\n+                if total_exp == 0:\n+                    continue\n+                simplified_terms.append(base ** total_exp)\n+            else:\n+                simplified_terms.append(base ** exponents[0])\n+        short = Add(*simplified_terms)\n     short = shorter(short, factor_terms(short), expand_power_exp(expand_mul(short)))\n     if short.has(TrigonometricFunction, HyperbolicFunction, ExpBase):\n         short = exptrigsimp(short, simplify=False)\n", "normalized_occurrence": 1}
