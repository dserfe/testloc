{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..2330700 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -259,7 +260,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             if concurrently\n             else self.sql_delete_index\n         )\n-        return super()._delete_index_sql(model, name, sql)\n+        # Use DROP INDEX IF EXISTS to handle cases where multiple unique constraints\n+        # exist on the same column(s)\n+        sql = self.sql_delete_index if sql is None else sql\n+        return sql % {\n+            \"name\": self.quote_name(name),\n+        }\n \n     def _create_index_sql(\n         self,\n@@ -296,4 +302,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex d911e18..99d2386 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -93,7 +93,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.execute(index.remove_sql(model, self, concurrently=concurrently))\n     def _delete_index_sql(self, model, name, sql=None, concurrently=False):\n         sql = self.sql_delete_index_concurrently if concurrently else self.sql_delete_index\n-        return super()._delete_index_sql(model, name, sql)\n+        sql = self.sql_delete_index if sql is None else sql\n+        return sql % {'name': self.quote_name(name)}\n     def _create_index_sql(self, model, *, fields=None, name=None, suffix='', using='', db_tablespace=None, col_suffixes=(), sql=None, opclasses=(), condition=None, concurrently=False, include=None, expressions=None):\n         sql = self.sql_create_index if not concurrently else self.sql_create_index_concurrently\n         return super()._create_index_sql(model, fields=fields, name=name, suffix=suffix, using=using, db_tablespace=db_tablespace, col_suffixes=col_suffixes, sql=sql, opclasses=opclasses, condition=condition, include=include, expressions=expressions)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
