{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex ecd2cce..3b3b0ba 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1347,12 +1347,16 @@ class Float(Number):\n         (-p)**r -> exp(r*log(-p)) -> exp(r*(log(p) + I*Pi)) ->\n                   -> p**r*(sin(Pi*r) + cos(Pi*r)*I)\n         \"\"\"\n-        if self == 0:\n-            if expt.is_positive:\n-                return S.Zero\n-            if expt.is_negative:\n-                return S.Infinity\n-        if isinstance(expt, Number):\n+        if isinstance(other, Boolean):\n+            if other is S.false:\n+                return self.is_zero\n+            return False\n+        if isinstance(other, Number):\n+            if self == 0:\n+                if expt.is_positive:\n+                    return S.Zero\n+                if expt.is_negative:\n+                    return S.Infinity\n             if isinstance(expt, Integer):\n                 prec = self._prec\n                 return Float._new(\n@@ -1390,7 +1394,7 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean) or other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1871,7 +1875,7 @@ class Rational(Number):\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean) or other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c5d42bc..c13c2cb 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1157,12 +1157,16 @@ class Float(Number):\n         (-p)**r -> exp(r*log(-p)) -> exp(r*(log(p) + I*Pi)) ->\n                   -> p**r*(sin(Pi*r) + cos(Pi*r)*I)\n         \"\"\"\n-        if self == 0:\n-            if expt.is_positive:\n-                return S.Zero\n-            if expt.is_negative:\n-                return S.Infinity\n-        if isinstance(expt, Number):\n+        if isinstance(other, Boolean):\n+            if other is S.false:\n+                return self.is_zero\n+            return False\n+        if isinstance(other, Number):\n+            if self == 0:\n+                if expt.is_positive:\n+                    return S.Zero\n+                if expt.is_negative:\n+                    return S.Infinity\n             if isinstance(expt, Integer):\n                 prec = self._prec\n                 return Float._new(mlib.mpf_pow_int(self._mpf_, expt.p, prec, rnd), prec)\n@@ -1195,7 +1199,7 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean) or other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1631,7 +1635,7 @@ class Rational(Number):\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean) or other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n", "normalized_occurrence": 1}
