{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..901e6f6 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -201,7 +201,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n \n     @async_unsafe\n     def get_new_connection(self, conn_params):\n-        conn = Database.connect(**conn_params)\n+        conn = Database.connect(**conn_params, timeout=10)\n         conn.create_function(\"django_date_extract\", 2, _sqlite_datetime_extract)\n         conn.create_function(\"django_date_trunc\", 2, _sqlite_date_trunc)\n         conn.create_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\n@@ -260,6 +260,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     @async_unsafe\n     def close(self):\n         self.validate_thread_sharing()\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         # If database is in memory, closing the connection destroys the\n         # database. To prevent accidental data loss, ignore close requests on\n         # an in-memory db.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..cfc2180 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -71,7 +71,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         return kwargs\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n-        conn = Database.connect(**conn_params)\n+        conn = Database.connect(**conn_params, timeout=10)\n         conn.create_function('django_date_extract', 2, _sqlite_datetime_extract)\n         conn.create_function('django_date_trunc', 2, _sqlite_date_trunc)\n         conn.create_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)\n@@ -127,6 +127,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     @async_unsafe\n     def close(self):\n         self.validate_thread_sharing()\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         if not self.is_in_memory_db():\n             BaseDatabaseWrapper.close(self)\n     def _savepoint_allowed(self):\n", "normalized_occurrence": 1}
