{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..3f5c970 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -419,6 +419,7 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     # Get the names of the args, for creating a docstring\n     if not iterable(args):\n         args = (args,)\n+    from sympy.core.symbol import Str\n     names = []\n     # Grab the callers frame, for getting the names by inspection (if needed)\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..28dc8f3 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -106,6 +106,7 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n         printer = Printer({'fully_qualified_modules': False, 'inline': True, 'user_functions': user_functions})\n     if not iterable(args):\n         args = (args,)\n+    from sympy.core.symbol import Str\n     names = []\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n", "normalized_occurrence": 1}
