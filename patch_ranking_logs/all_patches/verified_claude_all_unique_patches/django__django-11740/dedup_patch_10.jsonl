{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..372c2c5 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -842,6 +842,20 @@ class MigrationAutodetector:\n                             self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))\n                             self.old_field_keys.add((app_label, model_name, field_name))\n                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name\n+                            # Check if the field was changed to a ForeignKey and add dependencies\n+                            old_field = self.from_state.models[app_label, model_name].get_field(rem_field_name)\n+                            new_field = self.to_state.models[app_label, model_name].get_field(field_name)\n+                            if not old_field.remote_field and new_field.remote_field and new_field.remote_field.model:\n+                                dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                                self.add_operation(\n+                                    app_label,\n+                                    operations.AlterField(\n+                                        model_name=model_name,\n+                                        name=field_name,\n+                                        field=new_field,\n+                                    ),\n+                                    dependencies=dependencies,\n+                                )\n                             break\n \n     def generate_added_fields(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..a32f915 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -406,6 +406,11 @@ class MigrationAutodetector:\n                             self.old_field_keys.remove((rem_app_label, rem_model_name, rem_field_name))\n                             self.old_field_keys.add((app_label, model_name, field_name))\n                             self.renamed_fields[app_label, model_name, field_name] = rem_field_name\n+                            old_field = self.from_state.models[app_label, model_name].get_field(rem_field_name)\n+                            new_field = self.to_state.models[app_label, model_name].get_field(field_name)\n+                            if not old_field.remote_field and new_field.remote_field and new_field.remote_field.model:\n+                                dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                                self.add_operation(app_label, operations.AlterField(model_name=model_name, name=field_name, field=new_field), dependencies=dependencies)\n                             break\n     def generate_added_fields(self):\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n", "normalized_occurrence": 1}
