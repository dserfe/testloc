{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..834f5e0 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,17 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Restore the aligned labels (weak references).\n+        align_label_groups = state.pop(\"_align_label_groups\")\n+        for name, align_siblings in align_label_groups.items():\n+            self._align_label_groups[name] = {\n+                ax: weakref.ref(ref) for ax, ref in align_siblings\n+            }\n+        # Handle the pickling of aligned labels (weak references).\n+        state[\"_align_label_groups\"] = {\n+            name: [(ax, ref()) for ax, ref in self._align_label_groups[name].items() if ref() is not None]\n+            for name in self._align_label_groups if self in self._align_label_groups[name]\n+        }\n         return state\n \n     def __setstate__(self, state):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..3152cb7 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,6 +345,10 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        align_label_groups = state.pop('_align_label_groups')\n+        for name, align_siblings in align_label_groups.items():\n+            self._align_label_groups[name] = {ax: weakref.ref(ref) for ax, ref in align_siblings}\n+        state['_align_label_groups'] = {name: [(ax, ref()) for ax, ref in self._align_label_groups[name].items() if ref() is not None] for name in self._align_label_groups if self in self._align_label_groups[name]}\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n", "normalized_occurrence": 1}
