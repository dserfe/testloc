{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22080", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 0831e79..7c49619 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -234,7 +234,10 @@ class AbstractPythonCodePrinter(CodePrinter):\n \n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n-        return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n+        if isinstance(expr.args[0], (Mul, Add, Pow)):\n+            return ('{} % {}'.format(self.parenthesize(expr.args[0], PREC), self.parenthesize(expr.args[1], PREC)))\n+        else:\n+            return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))\n \n     def _print_Piecewise(self, expr):\n         result = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex f217d9a..e9421e6 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -109,7 +109,10 @@ class AbstractPythonCodePrinter(CodePrinter):\n         return self._print_NaN(expr)\n     def _print_Mod(self, expr):\n         PREC = precedence(expr)\n-        return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n+        if isinstance(expr.args[0], (Mul, Add, Pow)):\n+            return '{} % {}'.format(self.parenthesize(expr.args[0], PREC), self.parenthesize(expr.args[1], PREC))\n+        else:\n+            return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))\n     def _print_Piecewise(self, expr):\n         result = []\n         i = 0\n", "normalized_occurrence": 1}
