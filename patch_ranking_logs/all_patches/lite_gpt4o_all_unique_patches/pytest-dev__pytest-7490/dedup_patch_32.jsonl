{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..e2132d8 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -241,7 +241,10 @@ def pytest_runtest_setup(item: Item) -> None:\n     if not item.config.option.runxfail:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n         if xfailed and not xfailed.run:\n-            xfail(\"[NOTRUN] \" + xfailed.reason)\n+            item.add_marker(pytest.mark.xfail(reason=xfailed.reason))\n+            xfailed = item._store[xfailed_key] = evaluate_xfail_marks(item)\n+            if xfailed and not xfailed.run:\n+                xfail(\"[NOTRUN] \" + xfailed.reason)\n \n \n @hookimpl(hookwrapper=True)\n@@ -252,7 +255,10 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n \n     if not item.config.option.runxfail:\n         if xfailed and not xfailed.run:\n-            xfail(\"[NOTRUN] \" + xfailed.reason)\n+            item.add_marker(pytest.mark.xfail(reason=xfailed.reason))\n+            xfailed = item._store[xfailed_key] = evaluate_xfail_marks(item)\n+            if xfailed and not xfailed.run:\n+                xfail(\"[NOTRUN] \" + xfailed.reason)\n \n     yield\n \n@@ -276,7 +282,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and xfailed and call.when == \"call\":\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n@@ -312,4 +318,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..c8fae26 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -126,7 +126,10 @@ def pytest_runtest_setup(item: Item) -> None:\n     if not item.config.option.runxfail:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n         if xfailed and (not xfailed.run):\n-            xfail('[NOTRUN] ' + xfailed.reason)\n+            item.add_marker(pytest.mark.xfail(reason=xfailed.reason))\n+            xfailed = item._store[xfailed_key] = evaluate_xfail_marks(item)\n+            if xfailed and (not xfailed.run):\n+                xfail('[NOTRUN] ' + xfailed.reason)\n @hookimpl(hookwrapper=True)\n def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n     xfailed = item._store.get(xfailed_key, None)\n@@ -134,7 +137,10 @@ def pytest_runtest_call(item: Item) -> Generator[None, None, None]:\n         item._store[xfailed_key] = xfailed = evaluate_xfail_marks(item)\n     if not item.config.option.runxfail:\n         if xfailed and (not xfailed.run):\n-            xfail('[NOTRUN] ' + xfailed.reason)\n+            item.add_marker(pytest.mark.xfail(reason=xfailed.reason))\n+            xfailed = item._store[xfailed_key] = evaluate_xfail_marks(item)\n+            if xfailed and (not xfailed.run):\n+                xfail('[NOTRUN] ' + xfailed.reason)\n     yield\n @hookimpl(hookwrapper=True)\n def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n@@ -154,7 +160,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n+    elif not rep.skipped and xfailed and (call.when == 'call'):\n         if call.excinfo:\n             raises = xfailed.raises\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n", "normalized_occurrence": 1}
