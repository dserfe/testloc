{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..b9f4c73 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -332,6 +332,17 @@ def dup_sqf_list(f, K, all=False):\n \n         i += 1\n \n+    # Group factors by multiplicity\n+    grouped = {}\n+    for factor, mult in result:\n+        if mult in grouped:\n+            grouped[mult] = dup_mul(grouped[mult], factor, K)\n+        else:\n+            grouped[mult] = factor\n+\n+    # Convert back to list format\n+    result = [(factor, mult) for mult, factor in sorted(grouped.items())]\n+\n     return coeff, result\n \n \n@@ -420,6 +431,17 @@ def dmp_sqf_list(f, u, K, all=False):\n \n         i += 1\n \n+    # Group factors by multiplicity\n+    grouped = {}\n+    for factor, mult in result:\n+        if mult in grouped:\n+            grouped[mult] = dmp_mul(grouped[mult], factor, u, K)\n+        else:\n+            grouped[mult] = factor\n+\n+    # Convert back to list format\n+    result = [(factor, mult) for mult, factor in sorted(grouped.items())]\n+\n     return coeff, result\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..118e904 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -117,6 +117,13 @@ def dup_sqf_list(f, K, all=False):\n         if all or dup_degree(g) > 0:\n             result.append((g, i))\n         i += 1\n+    grouped = {}\n+    for factor, mult in result:\n+        if mult in grouped:\n+            grouped[mult] = dup_mul(grouped[mult], factor, K)\n+        else:\n+            grouped[mult] = factor\n+    result = [(factor, mult) for mult, factor in sorted(grouped.items())]\n     return (coeff, result)\n def dup_sqf_list_include(f, K, all=False):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n@@ -154,6 +161,13 @@ def dmp_sqf_list(f, u, K, all=False):\n         if all or dmp_degree(g, u) > 0:\n             result.append((g, i))\n         i += 1\n+    grouped = {}\n+    for factor, mult in result:\n+        if mult in grouped:\n+            grouped[mult] = dmp_mul(grouped[mult], factor, u, K)\n+        else:\n+            grouped[mult] = factor\n+    result = [(factor, mult) for mult, factor in sorted(grouped.items())]\n     return (coeff, result)\n def dmp_sqf_list_include(f, u, K, all=False):\n     if not u:\n", "normalized_occurrence": 1}
