{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..d770c1b 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -115,6 +115,59 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n+    def merge(list_1, list_2):\n+        \"\"\"\n+        Merge two lists while trying to keep the relative order of the elements.\n+        Warn if the lists have elements that explicitly conflict in relative order.\n+\n+        For static assets it can be important to have them included in the DOM\n+        in a certain order. In JavaScript you may not be able to reference a\n+        global or in CSS you might want to override a style.\n+        \"\"\"\n+        # Build a dictionary of all items and their order requirements\n+        order_reqs = {}\n+        for lst in (list_1, list_2):\n+            for i, path in enumerate(lst):\n+                if path not in order_reqs:\n+                    order_reqs[path] = set()\n+                # Add all subsequent items as requirements\n+                order_reqs[path].update(lst[i + 1:])\n+\n+        # Check for circular dependencies\n+        for path, reqs in order_reqs.items():\n+            if path in reqs:\n+                warnings.warn(\n+                    'Detected conflicting Media file order requirements:\\n'\n+                    '%s must come both before and after itself' % path,\n+                    MediaOrderConflictWarning,\n+                )\n+\n+        # Start with a copy of list_1\n+        combined_list = list(list_1)\n+        \n+        # Process list_2 items\n+        for path in list_2:\n+            if path in combined_list:\n+                continue\n+                \n+            # Find the correct insertion point\n+            insert_index = 0\n+            for i, existing in enumerate(combined_list):\n+                if path in order_reqs[existing]:\n+                    # path must come after existing\n+                    insert_index = i + 1\n+                elif existing in order_reqs[path]:\n+                    # Warning if this would violate an existing order requirement\n+                    if i < insert_index:\n+                        warnings.warn(\n+                            'Detected conflicting Media file order requirements:\\n'\n+                            '%s\\n%s' % (path, existing),\n+                            MediaOrderConflictWarning,\n+                        )\n+            \n+            combined_list.insert(insert_index, path)\n+            \n+        return combined_list\n     def merge(list_1, list_2):\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..e0d0270 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -62,6 +62,29 @@ class Media:\n             return Media(**{str(name): getattr(self, '_' + name)})\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n+    def merge(list_1, list_2):\n+        order_reqs = {}\n+        for lst in (list_1, list_2):\n+            for i, path in enumerate(lst):\n+                if path not in order_reqs:\n+                    order_reqs[path] = set()\n+                order_reqs[path].update(lst[i + 1:])\n+        for path, reqs in order_reqs.items():\n+            if path in reqs:\n+                warnings.warn('Detected conflicting Media file order requirements:\\n%s must come both before and after itself' % path, MediaOrderConflictWarning)\n+        combined_list = list(list_1)\n+        for path in list_2:\n+            if path in combined_list:\n+                continue\n+            insert_index = 0\n+            for i, existing in enumerate(combined_list):\n+                if path in order_reqs[existing]:\n+                    insert_index = i + 1\n+                elif existing in order_reqs[path]:\n+                    if i < insert_index:\n+                        warnings.warn('Detected conflicting Media file order requirements:\\n%s\\n%s' % (path, existing), MediaOrderConflictWarning)\n+            combined_list.insert(insert_index, path)\n+        return combined_list\n     def merge(list_1, list_2):\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n", "normalized_occurrence": 1}
