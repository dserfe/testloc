{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..c83c3e1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1645,7 +1645,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, list(members.values())\n+            # Include all members including annotated ones from parent classes\n+            return False, [m for m in members.values() if hasattr(m.object, '__annotations__') or not self.options.undoc_members]\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..19606c9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -929,7 +929,7 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+            return (False, [m for m in members.values() if hasattr(m.object, '__annotations__') or not self.options.undoc_members])\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, encoding: str=None, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
