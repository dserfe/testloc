{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..f9b02c2 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,13 +336,22 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n-        try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n-            )\n-        except Model.DoesNotExist:\n-            pass\n+        if hasattr(Model, 'natural_key') and hasattr(Model, 'get_by_natural_key'):\n+            # If this is a FK natural key, extract it from the data directly\n+            if any(isinstance(v, (list, tuple)) for v in data.values()):\n+                natural_key = next(v for v in data.values() if isinstance(v, (list, tuple)))\n+            else:\n+                # Otherwise try to get it from an instance\n+                try:\n+                    natural_key = Model(**data).natural_key()\n+                except Exception:\n+                    return Model(**data)\n+            try:\n+                data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n+                    default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n+                )\n+            except Model.DoesNotExist:\n+                pass\n     return Model(**data)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..2a245d5 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,11 +144,18 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n-        natural_key = Model(**data).natural_key()\n-        try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n-        except Model.DoesNotExist:\n-            pass\n+        if hasattr(Model, 'natural_key') and hasattr(Model, 'get_by_natural_key'):\n+            if any((isinstance(v, (list, tuple)) for v in data.values())):\n+                natural_key = next((v for v in data.values() if isinstance(v, (list, tuple))))\n+            else:\n+                try:\n+                    natural_key = Model(**data).natural_key()\n+                except Exception:\n+                    return Model(**data)\n+            try:\n+                data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n+            except Model.DoesNotExist:\n+                pass\n     return Model(**data)\n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n     model = field.remote_field.model\n", "normalized_occurrence": 1}
