{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 67a8b07..c30cc84 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -441,11 +441,29 @@ class exp(ExpBase):\n     def _eval_rewrite_as_sin(self, arg):\n         from sympy import sin\n         I = S.ImaginaryUnit\n+        # Handle direct exp(I*x) -> sin conversion based on Euler's formula\n+        if arg.could_extract_minus_sign():\n+            if -arg.could_extract_minus_sign()[1] == I:\n+                x = arg/(-I)\n+                return sin(x) + I*cos(x)\n+        elif arg.could_extract_minus_sign() is None and arg.is_Mul:\n+            if arg.args[0] == I:\n+                x = arg/I\n+                return sin(x) + I*cos(x)\n         return sin(I*arg + S.Pi/2) - I*sin(I*arg)\n \n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n         I = S.ImaginaryUnit\n+        # Handle direct exp(I*x) -> cos conversion based on Euler's formula\n+        if arg.could_extract_minus_sign():\n+            if -arg.could_extract_minus_sign()[1] == I:\n+                x = arg/(-I)\n+                return cos(x) - I*sin(x)\n+        elif arg.could_extract_minus_sign() is None and arg.is_Mul:\n+            if arg.args[0] == I:\n+                x = arg/I\n+                return cos(x) - I*sin(x)\n         return cos(I*arg) + I*cos(I*arg + S.Pi/2)\n \n     def _eval_rewrite_as_tanh(self, arg):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/exponential.py b/sympy/functions/elementary/exponential.py\nindex 21c3765..4718bf3 100644\n--- a/sympy/functions/elementary/exponential.py\n+++ b/sympy/functions/elementary/exponential.py\n@@ -273,10 +273,26 @@ class exp(ExpBase):\n     def _eval_rewrite_as_sin(self, arg):\n         from sympy import sin\n         I = S.ImaginaryUnit\n+        if arg.could_extract_minus_sign():\n+            if -arg.could_extract_minus_sign()[1] == I:\n+                x = arg / -I\n+                return sin(x) + I * cos(x)\n+        elif arg.could_extract_minus_sign() is None and arg.is_Mul:\n+            if arg.args[0] == I:\n+                x = arg / I\n+                return sin(x) + I * cos(x)\n         return sin(I * arg + S.Pi / 2) - I * sin(I * arg)\n     def _eval_rewrite_as_cos(self, arg):\n         from sympy import cos\n         I = S.ImaginaryUnit\n+        if arg.could_extract_minus_sign():\n+            if -arg.could_extract_minus_sign()[1] == I:\n+                x = arg / -I\n+                return cos(x) - I * sin(x)\n+        elif arg.could_extract_minus_sign() is None and arg.is_Mul:\n+            if arg.args[0] == I:\n+                x = arg / I\n+                return cos(x) - I * sin(x)\n         return cos(I * arg) + I * cos(I * arg + S.Pi / 2)\n     def _eval_rewrite_as_tanh(self, arg):\n         from sympy import tanh\n", "normalized_occurrence": 1}
