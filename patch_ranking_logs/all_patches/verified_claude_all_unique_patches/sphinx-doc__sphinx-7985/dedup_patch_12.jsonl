{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..50c2b6f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,25 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if it's a reference to another document or section\n+                if uri.startswith('#'):\n+                    # It's a reference to a section in the current document\n+                    if not any(sect.get('ids', []) == [uri[1:]] for sect in self.env.get_doctree(docname).traverse(nodes.section)):\n+                        return 'broken', 'Section not found: ' + uri, 0\n+                    return 'working', '', 0\n+                else:\n+                    # It's a reference to another document or its section\n+                    doc_uri = uri.split('#')[0] if '#' in uri else uri\n+                    try:\n+                        self.env.get_doctree(doc_uri)\n+                        if '#' in uri:\n+                            # Check section reference\n+                            section_id = uri.split('#')[1]\n+                            if not any(sect.get('ids', []) == [section_id] for sect in self.env.get_doctree(doc_uri).traverse(nodes.section)):\n+                                return 'broken', 'Section not found: #' + section_id, 0\n+                        return 'working', '', 0\n+                    except Exception:\n+                        return 'broken', 'Document not found: ' + doc_uri, 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..7d9fccf 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,21 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    if not any((sect.get('ids', []) == [uri[1:]] for sect in self.env.get_doctree(docname).traverse(nodes.section))):\n+                        return ('broken', 'Section not found: ' + uri, 0)\n+                    return ('working', '', 0)\n+                else:\n+                    doc_uri = uri.split('#')[0] if '#' in uri else uri\n+                    try:\n+                        self.env.get_doctree(doc_uri)\n+                        if '#' in uri:\n+                            section_id = uri.split('#')[1]\n+                            if not any((sect.get('ids', []) == [section_id] for sect in self.env.get_doctree(doc_uri).traverse(nodes.section))):\n+                                return ('broken', 'Section not found: #' + section_id, 0)\n+                        return ('working', '', 0)\n+                    except Exception:\n+                        return ('broken', 'Document not found: ' + doc_uri, 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
