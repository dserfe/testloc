{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23563", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..24a8f14 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,7 +166,22 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+        # Convert inputs to numpy arrays to ensure consistent handling\n+        xs = np.asarray(xs)\n+        ys = np.asarray(ys)\n+        zs = np.asarray(zs)\n+        self._verts3d = (xs, ys, zs)\n+        \n+    @property\n+    def _verts3d_prop(self):\n+        \"\"\"Protected access to _verts3d\"\"\"\n+        if not hasattr(self, '_verts3d'):\n+            self._verts3d = ([], [], [])\n+        return self._verts3d\n+        \n+    @_verts3d_prop.setter\n+    def _verts3d_prop(self, value):\n+        self._verts3d = value\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n@@ -211,7 +226,9 @@ class Line3D(lines.Line2D):\n \n     @artist.allow_rasterization\n     def draw(self, renderer):\n-        xs3d, ys3d, zs3d = self._verts3d\n+        xs3d, ys3d, zs3d = self._verts3d_prop\n+        if not (xs3d is not None and ys3d is not None and zs3d is not None):\n+            return\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..88a60c3 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -64,7 +64,18 @@ def text_2d_to_3d(obj, z=0, zdir='z'):\n class Line3D(lines.Line2D):\n     def __init__(self, xs, ys, zs, *args, **kwargs):\n         super().__init__([], [], *args, **kwargs)\n+        xs = np.asarray(xs)\n+        ys = np.asarray(ys)\n+        zs = np.asarray(zs)\n         self._verts3d = (xs, ys, zs)\n+    @property\n+    def _verts3d_prop(self):\n+        if not hasattr(self, '_verts3d'):\n+            self._verts3d = ([], [], [])\n+        return self._verts3d\n+    @_verts3d_prop.setter\n+    def _verts3d_prop(self, value):\n+        self._verts3d = value\n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n@@ -81,7 +92,9 @@ class Line3D(lines.Line2D):\n         return self._verts3d\n     @artist.allow_rasterization\n     def draw(self, renderer):\n-        xs3d, ys3d, zs3d = self._verts3d\n+        xs3d, ys3d, zs3d = self._verts3d_prop\n+        if not (xs3d is not None and ys3d is not None and (zs3d is not None)):\n+            return\n         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)\n         self.set_data(xs, ys)\n         super().draw(renderer)\n", "normalized_occurrence": 1}
