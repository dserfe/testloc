{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..3569b79 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1092,6 +1092,9 @@ class NumpyDocstring(GoogleDocstring):\n         line = next(self._line_iter)\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n+            if ',' in _name:\n+                _names = [name.strip() for name in _name.split(',')]\n+                _name = ', '.join(_names)\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n@@ -1101,6 +1104,12 @@ class NumpyDocstring(GoogleDocstring):\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n+        if 'optional' in _type:\n+            _type = _type.replace('optional', '').strip()\n+            if _type:\n+                _type += ', optional'\n+            else:\n+                _type = 'optional'\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..21e8beb 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -662,11 +662,20 @@ class NumpyDocstring(GoogleDocstring):\n         line = next(self._line_iter)\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n+            if ',' in _name:\n+                _names = [name.strip() for name in _name.split(',')]\n+                _name = ', '.join(_names)\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        if 'optional' in _type:\n+            _type = _type.replace('optional', '').strip()\n+            if _type:\n+                _type += ', optional'\n+            else:\n+                _type = 'optional'\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n", "normalized_occurrence": 1}
