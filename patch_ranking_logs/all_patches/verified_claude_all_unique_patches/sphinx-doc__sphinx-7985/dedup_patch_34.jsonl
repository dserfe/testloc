{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..d6aab75 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,34 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if local target exists\n+                try:\n+                    # Handle anchors in local files\n+                    if '#' in uri:\n+                        target, anchor = uri.split('#', 1)\n+                    else:\n+                        target, anchor = uri, None\n+\n+                    # Try to find the target in the environment's documents\n+                    doctree = self.env.get_doctree(docname)\n+                    if target:\n+                        # Check if the target document exists\n+                        target_docname = self.env.doc2path(target, None)\n+                        if not path.isfile(target_docname):\n+                            return 'broken', 'document not found: ' + target, 0\n+                        \n+                        # If there's an anchor, check if it exists in the target document\n+                        if anchor:\n+                            target_doctree = self.env.get_doctree(target)\n+                            for node in target_doctree.traverse():\n+                                if 'ids' in node and anchor in node['ids']:\n+                                    break\n+                            else:\n+                                return 'broken', 'anchor not found: ' + anchor, 0\n+                    \n+                    return 'working', '', 0\n+                except Exception as err:\n+                    return 'broken', str(err), 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..ef8c31f 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,26 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                try:\n+                    if '#' in uri:\n+                        target, anchor = uri.split('#', 1)\n+                    else:\n+                        target, anchor = (uri, None)\n+                    doctree = self.env.get_doctree(docname)\n+                    if target:\n+                        target_docname = self.env.doc2path(target, None)\n+                        if not path.isfile(target_docname):\n+                            return ('broken', 'document not found: ' + target, 0)\n+                        if anchor:\n+                            target_doctree = self.env.get_doctree(target)\n+                            for node in target_doctree.traverse():\n+                                if 'ids' in node and anchor in node['ids']:\n+                                    break\n+                            else:\n+                                return ('broken', 'anchor not found: ' + anchor, 0)\n+                    return ('working', '', 0)\n+                except Exception as err:\n+                    return ('broken', str(err), 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
