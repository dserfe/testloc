{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..89c39e8 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,7 +343,13 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Detect leading whitespace of the first line of the included content\n+            leading_whitespace = ''\n+            if lines:\n+                leading_whitespace = re.match(r'\\s*', lines[0]).group(0)\n+            \n+            # Prepend the content with the detected leading whitespace\n+            lines.insert(0, leading_whitespace + prepend + '\\n')\n \n         return lines\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..90394ae 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,7 +226,10 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            leading_whitespace = ''\n+            if lines:\n+                leading_whitespace = re.match('\\\\s*', lines[0]).group(0)\n+            lines.insert(0, leading_whitespace + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 2}
