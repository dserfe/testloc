{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20826", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 07605b5..3ff6cbc 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1191,6 +1191,8 @@ class _AxesBase(martist.Artist):\n \n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        xaxis_ticklabels_visible = [label.get_visible() for label in self.xaxis.get_ticklabels()]\n+        yaxis_ticklabels_visible = [label.get_visible() for label in self.yaxis.get_ticklabels()]\n \n         self.xaxis.clear()\n         self.yaxis.clear()\n@@ -1202,6 +1204,8 @@ class _AxesBase(martist.Artist):\n         self.callbacks = cbook.CallbackRegistry()\n \n         if self._sharex is not None:\n+            for label, visible in zip(self.xaxis.get_ticklabels(), xaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.sharex(self._sharex)\n         else:\n             self.xaxis._set_scale('linear')\n@@ -1210,6 +1214,8 @@ class _AxesBase(martist.Artist):\n             except TypeError:\n                 pass\n         if self._sharey is not None:\n+            for label, visible in zip(self.yaxis.get_ticklabels(), yaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.sharey(self._sharey)\n         else:\n             self.yaxis._set_scale('linear')\n@@ -1303,9 +1309,13 @@ class _AxesBase(martist.Artist):\n         self._shared_axes[\"x\"].clean()\n         self._shared_axes[\"y\"].clean()\n         if self._sharex is not None:\n+            for label, visible in zip(self.xaxis.get_ticklabels(), xaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n         if self._sharey is not None:\n+            for label, visible in zip(self.yaxis.get_ticklabels(), yaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 33a6de3..9964a54 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -503,6 +503,8 @@ class _AxesBase(martist.Artist):\n             patch_visible = True\n         xaxis_visible = self.xaxis.get_visible()\n         yaxis_visible = self.yaxis.get_visible()\n+        xaxis_ticklabels_visible = [label.get_visible() for label in self.xaxis.get_ticklabels()]\n+        yaxis_ticklabels_visible = [label.get_visible() for label in self.yaxis.get_ticklabels()]\n         self.xaxis.clear()\n         self.yaxis.clear()\n         for name, spine in self.spines.items():\n@@ -510,6 +512,8 @@ class _AxesBase(martist.Artist):\n         self.ignore_existing_data_limits = True\n         self.callbacks = cbook.CallbackRegistry()\n         if self._sharex is not None:\n+            for label, visible in zip(self.xaxis.get_ticklabels(), xaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.sharex(self._sharex)\n         else:\n             self.xaxis._set_scale('linear')\n@@ -518,6 +522,8 @@ class _AxesBase(martist.Artist):\n             except TypeError:\n                 pass\n         if self._sharey is not None:\n+            for label, visible in zip(self.yaxis.get_ticklabels(), yaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.sharey(self._sharey)\n         else:\n             self.yaxis._set_scale('linear')\n@@ -576,9 +582,13 @@ class _AxesBase(martist.Artist):\n         self._shared_axes['x'].clean()\n         self._shared_axes['y'].clean()\n         if self._sharex is not None:\n+            for label, visible in zip(self.xaxis.get_ticklabels(), xaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.xaxis.set_visible(xaxis_visible)\n             self.patch.set_visible(patch_visible)\n         if self._sharey is not None:\n+            for label, visible in zip(self.yaxis.get_ticklabels(), yaxis_ticklabels_visible):\n+                label.set_visible(visible)\n             self.yaxis.set_visible(yaxis_visible)\n             self.patch.set_visible(patch_visible)\n         self.stale = True\n", "normalized_occurrence": 1}
