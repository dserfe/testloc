{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..6b77206 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -461,8 +461,18 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n     # store whether originally we wanted numeric dtype\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == \"numeric\"\n \n-    dtype_orig = getattr(array, \"dtype\", None)\n-    if not hasattr(dtype_orig, 'kind'):\n+    # Get dtype for pandas DataFrame or Series\n+    if hasattr(array, 'dtype') and array.dtype is not None:\n+        dtype_orig = array.dtype\n+    elif hasattr(array, 'dtypes') and hasattr(array.dtypes, 'unique'):\n+        # Get the unique dtypes of pandas DataFrame columns\n+        dtype_types = array.dtypes.unique()\n+        # If all the same type, use that dtype\n+        dtype_orig = dtype_types[0] if len(dtype_types) == 1 else None\n+    else:\n+        dtype_orig = None\n+\n+    if dtype_orig is not None and not hasattr(dtype_orig, 'kind'):\n         # not a data type (e.g. a column named dtype in a pandas DataFrame)\n         dtype_orig = None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..703ef36 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -125,8 +125,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         accept_sparse = False\n     array_orig = array\n     dtype_numeric = isinstance(dtype, six.string_types) and dtype == 'numeric'\n-    dtype_orig = getattr(array, 'dtype', None)\n-    if not hasattr(dtype_orig, 'kind'):\n+    if hasattr(array, 'dtype') and array.dtype is not None:\n+        dtype_orig = array.dtype\n+    elif hasattr(array, 'dtypes') and hasattr(array.dtypes, 'unique'):\n+        dtype_types = array.dtypes.unique()\n+        dtype_orig = dtype_types[0] if len(dtype_types) == 1 else None\n+    else:\n+        dtype_orig = None\n+    if dtype_orig is not None and (not hasattr(dtype_orig, 'kind')):\n         dtype_orig = None\n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n", "normalized_occurrence": 1}
