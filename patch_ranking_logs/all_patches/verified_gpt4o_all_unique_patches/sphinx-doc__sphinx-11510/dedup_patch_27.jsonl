{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 96f4a03..db0431d 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -674,10 +674,19 @@ class BuildEnvironment:\n             backup = copy(self.temp_data)\n             self.temp_data['docname'] = docname\n \n+            # Apply transforms and ensure included files are processed\n             transformer = SphinxTransformer(doctree)\n             transformer.set_environment(self)\n             transformer.add_transforms(self.app.registry.get_post_transforms())\n             transformer.apply_transforms()\n+            \n+            # Re-read the source for included files and apply source-read events\n+            for node in doctree.traverse(include):\n+                included_doc_name = node.get('source')\n+                if included_doc_name:\n+                    included_source = self.read_doc(included_doc_name)\n+                    self.events.emit('source-read', included_doc_name, included_source)\n+                    node.replace_self(nodes.raw(included_source[0], included_source[0], format='html'))\n         finally:\n             self.temp_data = backup\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 3c422c4..fcdb68a 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -380,6 +380,12 @@ class BuildEnvironment:\n             transformer.set_environment(self)\n             transformer.add_transforms(self.app.registry.get_post_transforms())\n             transformer.apply_transforms()\n+            for node in doctree.traverse(include):\n+                included_doc_name = node.get('source')\n+                if included_doc_name:\n+                    included_source = self.read_doc(included_doc_name)\n+                    self.events.emit('source-read', included_doc_name, included_source)\n+                    node.replace_self(nodes.raw(included_source[0], included_source[0], format='html'))\n         finally:\n             self.temp_data = backup\n         self.events.emit('doctree-resolved', doctree, docname)\n", "normalized_occurrence": 1}
