{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23913", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex c34b2ad..d7d3f91 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -314,6 +314,7 @@ class Legend(Artist):\n         prop=None,           # properties for the legend texts\n         fontsize=None,       # keyword to set font size directly\n         labelcolor=None,     # keyword to set the text color\n+        draggable=False,     # whether the legend can be dragged with mouse\n \n         # spacing & pad defined as a fraction of the font-size\n         borderpad=None,      # whitespace inside the legend border\n@@ -362,6 +363,9 @@ class Legend(Artist):\n         ----------------\n         %(_legend_kw_doc)s\n \n+        draggable : bool, default: False\n+            If True, the legend can be dragged with the mouse.\n+\n         Notes\n         -----\n         Users can specify any arbitrary location for the legend using the\n@@ -553,6 +557,9 @@ class Legend(Artist):\n                 labelcolor = mpl.rcParams['legend.labelcolor']\n             else:\n                 labelcolor = mpl.rcParams['text.color']\n+                \n+        if draggable:\n+            self.set_draggable(True)\n         if isinstance(labelcolor, str) and labelcolor in color_getters:\n             getter_names = color_getters[labelcolor]\n             for handle, text in zip(self.legendHandles, self.texts):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 2840dfb..f8529c6 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -45,7 +45,7 @@ class Legend(Artist):\n         return 'Legend'\n     @_api.make_keyword_only('3.6', 'loc')\n     @_docstring.dedent_interpd\n-    def __init__(self, parent, handles, labels, loc=None, numpoints=None, markerscale=None, markerfirst=True, scatterpoints=None, scatteryoffsets=None, prop=None, fontsize=None, labelcolor=None, borderpad=None, labelspacing=None, handlelength=None, handleheight=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncols=1, mode=None, fancybox=None, shadow=None, title=None, title_fontsize=None, framealpha=None, edgecolor=None, facecolor=None, bbox_to_anchor=None, bbox_transform=None, frameon=None, handler_map=None, title_fontproperties=None, alignment='center', *, ncol=1):\n+    def __init__(self, parent, handles, labels, loc=None, numpoints=None, markerscale=None, markerfirst=True, scatterpoints=None, scatteryoffsets=None, prop=None, fontsize=None, labelcolor=None, draggable=False, borderpad=None, labelspacing=None, handlelength=None, handleheight=None, handletextpad=None, borderaxespad=None, columnspacing=None, ncols=1, mode=None, fancybox=None, shadow=None, title=None, title_fontsize=None, framealpha=None, edgecolor=None, facecolor=None, bbox_to_anchor=None, bbox_transform=None, frameon=None, handler_map=None, title_fontproperties=None, alignment='center', *, ncol=1):\n         from matplotlib.axes import Axes\n         from matplotlib.figure import FigureBase\n         super().__init__()\n@@ -156,6 +156,8 @@ class Legend(Artist):\n                 labelcolor = mpl.rcParams['legend.labelcolor']\n             else:\n                 labelcolor = mpl.rcParams['text.color']\n+        if draggable:\n+            self.set_draggable(True)\n         if isinstance(labelcolor, str) and labelcolor in color_getters:\n             getter_names = color_getters[labelcolor]\n             for handle, text in zip(self.legendHandles, self.texts):\n", "normalized_occurrence": 1}
