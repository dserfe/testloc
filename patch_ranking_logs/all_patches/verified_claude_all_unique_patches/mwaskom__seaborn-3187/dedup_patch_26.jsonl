{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..355fcd7 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -90,6 +90,18 @@ class DotBase(Mark):\n \n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        \n+        # Handle scale formatting for numeric variables that might have offset\n+        for var in variables:\n+            if var in scales and isinstance(scales[var], Continuous):\n+                scale = scales[var]\n+                if hasattr(scale, \"_label_params\") and scale._label_params.get(\"formatter\"):\n+                    formatter = scale._label_params[\"formatter\"]\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        # Get the offset value and adjust the display value if needed\n+                        formatter.set_locs([value])\n+                        if formatter.get_offset():\n+                            value = value / 10**(formatter.orderOfMagnitude)\n \n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..8994aaf 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,15 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales and isinstance(scales[var], Continuous):\n+                scale = scales[var]\n+                if hasattr(scale, '_label_params') and scale._label_params.get('formatter'):\n+                    formatter = scale._label_params['formatter']\n+                    if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                        formatter.set_locs([value])\n+                        if formatter.get_offset():\n+                            value = value / 10 ** formatter.orderOfMagnitude\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
