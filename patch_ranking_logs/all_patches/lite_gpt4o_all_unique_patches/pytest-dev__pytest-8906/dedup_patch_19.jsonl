{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..a8fee1b 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -136,6 +136,10 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n+        \n+        If you need to skip the entire module conditionally, consider using\n+        `pytest.skip(msg, allow_module_level=True)` or the `skip_module` function\n+        provided in pytest.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n@@ -144,6 +148,18 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at the module level to skip the entire module\n+    when certain conditions are met (e.g., incorrect Python version).\n+\n+    :param str msg: The message to show the user as the reason for skipping.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..e7e2b34 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -94,6 +94,10 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n         It is better to use the :ref:`pytest.mark.skipif ref` marker when\n         possible to declare a test to be skipped under certain conditions\n         like mismatching platforms or dependencies.\n+        \n+        If you need to skip the entire module conditionally, consider using\n+        `pytest.skip(msg, allow_module_level=True)` or the `skip_module` function\n+        provided in pytest.\n         Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n@@ -101,6 +105,17 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the module with the given message.\n+\n+    This function should be called at the module level to skip the entire module\n+    when certain conditions are met (e.g., incorrect Python version).\n+\n+    :param str msg: The message to show the user as the reason for skipping.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    skip(msg=msg, allow_module_level=True)\n+\n @_with_exception(Failed)\n def fail(msg: str='', pytrace: bool=True) -> 'NoReturn':\n     \"\"\"Explicitly fail an executing test with the given message.\n", "normalized_occurrence": 1}
