{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..8c1ae7e 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -45,7 +45,20 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            # Handle partial functions\n+            partial_func = func.func\n+            if not hasattr(partial_func, '__name__'):\n+                # A class-based view\n+                func_path = partial_func.__class__.__module__ + '.' + partial_func.__class__.__name__\n+            else:\n+                # A function-based view\n+                func_path = partial_func.__module__ + '.' + partial_func.__name__\n+            partial_args = [repr(arg) for arg in func.args]\n+            partial_keywords = [f\"{k}={repr(v)}\" for k, v in func.keywords.items()]\n+            partial_info = ', '.join(partial_args + partial_keywords)\n+            self._func_path = f\"{func_path}({partial_info})\"\n+        elif not hasattr(func, '__name__'):\n             # A class-based view\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..5876841 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -29,7 +29,17 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n+        if isinstance(func, functools.partial):\n+            partial_func = func.func\n+            if not hasattr(partial_func, '__name__'):\n+                func_path = partial_func.__class__.__module__ + '.' + partial_func.__class__.__name__\n+            else:\n+                func_path = partial_func.__module__ + '.' + partial_func.__name__\n+            partial_args = [repr(arg) for arg in func.args]\n+            partial_keywords = [f'{k}={repr(v)}' for k, v in func.keywords.items()]\n+            partial_info = ', '.join(partial_args + partial_keywords)\n+            self._func_path = f'{func_path}({partial_info})'\n+        elif not hasattr(func, '__name__'):\n             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n         else:\n             self._func_path = func.__module__ + '.' + func.__name__\n", "normalized_occurrence": 1}
