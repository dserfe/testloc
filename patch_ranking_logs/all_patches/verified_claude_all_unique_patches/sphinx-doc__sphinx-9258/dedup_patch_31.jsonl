{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex b8c505d..d72e4c4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -178,6 +178,18 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n                 result[i] = type_to_xref(str(node), env)\n         return result\n     except SyntaxError:\n+        # Handle union types for Python < 3.10 by splitting on |\n+        if '|' in annotation:\n+            result = []\n+            for type_name in annotation.split('|'):\n+                type_name = type_name.strip()\n+                if type_name:\n+                    if result:  # Add separator between types\n+                        result.append(nodes.Text(' '))\n+                        result.append(addnodes.desc_sig_punctuation('', '|'))\n+                        result.append(nodes.Text(' '))\n+                    result.append(type_to_xref(type_name, env))\n+            return result\n         return [type_to_xref(annotation, env)]\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex c76b6ac..76278b3 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -121,6 +121,17 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n                 result[i] = type_to_xref(str(node), env)\n         return result\n     except SyntaxError:\n+        if '|' in annotation:\n+            result = []\n+            for type_name in annotation.split('|'):\n+                type_name = type_name.strip()\n+                if type_name:\n+                    if result:\n+                        result.append(nodes.Text(' '))\n+                        result.append(addnodes.desc_sig_punctuation('', '|'))\n+                        result.append(nodes.Text(' '))\n+                    result.append(type_to_xref(type_name, env))\n+            return result\n         return [type_to_xref(annotation, env)]\n def _parse_arglist(arglist: str, env: BuildEnvironment=None) -> addnodes.desc_parameterlist:\n     params = addnodes.desc_parameterlist(arglist)\n", "normalized_occurrence": 1}
