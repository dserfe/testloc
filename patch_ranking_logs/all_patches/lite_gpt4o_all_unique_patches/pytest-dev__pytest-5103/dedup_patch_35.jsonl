{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 424b08e..665c689 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -136,6 +136,8 @@ def isiterable(obj):\n \n \n def assertrepr_compare(config, op, left, right):\n+    if op in {\"all\", \"any\"}:\n+        return _assertrepr_iterable(config, op, left, right)\n     \"\"\"Return specialised explanations for some operators/operands\"\"\"\n     width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op\n     left_repr = saferepr(left, maxsize=int(width // 2))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex b5a0422..fde8ad8 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -75,6 +75,9 @@ def isiterable(obj):\n     except TypeError:\n         return False\n def assertrepr_compare(config, op, left, right):\n+    if op in {'all', 'any'}:\n+        return _assertrepr_iterable(config, op, left, right)\n+    'Return specialised explanations for some operators/operands'\n     width = 80 - 15 - len(op) - 2\n     left_repr = saferepr(left, maxsize=int(width // 2))\n     right_repr = saferepr(right, maxsize=width - len(left_repr))\n", "normalized_occurrence": 1}
