{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..c9b075c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -352,11 +352,18 @@ class SQLCompiler:\n                         src = src.source\n                     elif col_alias:\n                         continue\n-                    if src == sel_expr:\n+                    # For combined queries, compare the resolved field with both\n+                    # the select expression and any possible references\n+                    if (src == sel_expr or \n+                        (hasattr(sel_expr, 'refs') and src == sel_expr.refs)):\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # For combined queries with cleared ordering, fallback to first column\n+                    if not self.query.order_by:\n+                        resolved.set_source_expressions([RawSQL('1', ())])\n+                    else:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..2157750 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -188,11 +188,14 @@ class SQLCompiler:\n                         src = src.source\n                     elif col_alias:\n                         continue\n-                    if src == sel_expr:\n+                    if src == sel_expr or (hasattr(sel_expr, 'refs') and src == sel_expr.refs):\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    if not self.query.order_by:\n+                        resolved.set_source_expressions([RawSQL('1', ())])\n+                    else:\n+                        raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
