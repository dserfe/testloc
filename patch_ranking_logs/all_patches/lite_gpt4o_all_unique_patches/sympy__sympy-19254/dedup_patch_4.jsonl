{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19254", "model_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex f363a30..30e23af 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -123,22 +123,26 @@ def dmp_trial_division(f, factors, u, K):\n     return _sort_factors(result)\n \n \n-def dup_zz_mignotte_bound(f, K):\n-    \"\"\"Mignotte bound for univariate polynomials in `K[x]`. \"\"\"\n+def dup_zz_knuth_cohen_bound(f, K):\n+    \"\"\"Knuth-Cohen bound for univariate polynomials in `K[x]`. \"\"\"\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n+    return (2 ** n) * (K.factorial(n) * a / b)\n \n-    return K.sqrt(K(n + 1))*2**n*a*b\n \n-\n-def dmp_zz_mignotte_bound(f, u, K):\n-    \"\"\"Mignotte bound for multivariate polynomials in `K[X]`. \"\"\"\n+def dmp_zz_knuth_cohen_bound(f, u, K):\n+    \"\"\"Knuth-Cohen bound for multivariate polynomials in `K[X]`. \"\"\"\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n-    n = sum(dmp_degree_list(f, u))\n-\n-    return K.sqrt(K(n + 1))*2**n*a*b\n+    n = dmp_degree_list(f, u)\n+    total_degree = sum(n)\n+\n+    multivariate_factorial = K.factorial(n[0])\n+    for degree in n[1:]:\n+        multivariate_factorial *= K.factorial(degree)\n+    \n+    return (2 ** total_degree) * (multivariate_factorial * a / b)\n \n \n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py\nindex 6b3753f..050ce77 100644\n--- a/sympy/polys/factortools.py\n+++ b/sympy/polys/factortools.py\n@@ -35,16 +35,20 @@ def dmp_trial_division(f, factors, u, K):\n                 break\n         result.append((factor, k))\n     return _sort_factors(result)\n-def dup_zz_mignotte_bound(f, K):\n+def dup_zz_knuth_cohen_bound(f, K):\n     a = dup_max_norm(f, K)\n     b = abs(dup_LC(f, K))\n     n = dup_degree(f)\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n-def dmp_zz_mignotte_bound(f, u, K):\n+    return 2 ** n * (K.factorial(n) * a / b)\n+def dmp_zz_knuth_cohen_bound(f, u, K):\n     a = dmp_max_norm(f, u, K)\n     b = abs(dmp_ground_LC(f, u, K))\n-    n = sum(dmp_degree_list(f, u))\n-    return K.sqrt(K(n + 1)) * 2 ** n * a * b\n+    n = dmp_degree_list(f, u)\n+    total_degree = sum(n)\n+    multivariate_factorial = K.factorial(n[0])\n+    for degree in n[1:]:\n+        multivariate_factorial *= K.factorial(degree)\n+    return 2 ** total_degree * (multivariate_factorial * a / b)\n def dup_zz_hensel_step(m, f, g, h, s, t, K):\n     M = m ** 2\n     e = dup_sub_mul(f, g, h, K)\n", "normalized_occurrence": 1}
