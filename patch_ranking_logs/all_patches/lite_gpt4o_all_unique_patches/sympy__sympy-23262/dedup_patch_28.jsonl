{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23262", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 9b53255..ddc13c4 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -528,6 +528,11 @@ class ArrayPrinter:\n \n class PythonCodePrinter(AbstractPythonCodePrinter):\n \n+    def _print_Tuple(self, expr):\n+        if len(expr) == 1:\n+            return '({},)'.format(self._print(expr[0]))\n+        return '({})'.format(', '.join(self._print(arg) for arg in expr))\n+\n     def _print_sign(self, e):\n         return '(0.0 if {e} == 0 else {f}(1, {e}))'.format(\n             f=self._module_format('math.copysign'), e=self._print(e.args[0]))\n@@ -592,6 +597,10 @@ def pycode(expr, **settings):\n     fully_qualified_modules : bool\n         Whether or not to write out full module names of functions\n         (``math.sin`` vs. ``sin``). default: ``True``.\n+    \n+    Notes\n+    =====\n+    This function handles single-element tuples explicitly to ensure correct syntax.\n     standard : str or None, optional\n         Only 'python3' (default) is supported.\n         This parameter may be removed in the future.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n+    def _print_Tuple(self, expr):\n+        if len(expr) == 1:\n+            return '({},)'.format(self._print(expr[0]))\n+        return '({})'.format(', '.join((self._print(arg) for arg in expr)))", "normalized_occurrence": 3}
