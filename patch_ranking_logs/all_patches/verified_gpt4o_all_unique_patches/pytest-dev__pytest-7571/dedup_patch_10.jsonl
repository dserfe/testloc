{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..442ca03 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -341,11 +341,11 @@ class LogCaptureHandler(logging.StreamHandler):\n class LogCaptureFixture:\n     \"\"\"Provides access and control of log capturing.\"\"\"\n \n-    def __init__(self, item: nodes.Node) -> None:\n+    def __init__(self, item: nodes.Node, request) -> None:\n         \"\"\"Creates a new funcarg.\"\"\"\n         self._item = item\n-        # dict of log name -> log level\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n+        request.addfinalizer(self._finalize)\n \n     def _finalize(self) -> None:\n         \"\"\"Finalizes the fixture.\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..d8c0849 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -161,9 +161,10 @@ class LogCaptureHandler(logging.StreamHandler):\n         if logging.raiseExceptions:\n             raise\n class LogCaptureFixture:\n-    def __init__(self, item: nodes.Node) -> None:\n+    def __init__(self, item: nodes.Node, request) -> None:\n         self._item = item\n         self._initial_logger_levels = {}\n+        request.addfinalizer(self._finalize)\n     def _finalize(self) -> None:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n", "normalized_occurrence": 1}
