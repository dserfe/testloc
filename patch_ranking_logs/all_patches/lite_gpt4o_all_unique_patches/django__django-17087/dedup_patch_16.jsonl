{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..b974081 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -72,6 +72,10 @@ class MigrationAutodetector:\n         elif isinstance(obj, type):\n             # If this is a type that implements 'deconstruct' as an instance method,\n             # avoid treating this as being deconstructible itself - see #22951\n+            if hasattr(obj, \"__self__\"):\n+                # Handle nested class methods\n+                cls_path = f\"{obj.__self__.__module__}.{obj.__self__.__qualname__}\"\n+                return f\"{cls_path}.{obj.__name__}\"\n             return obj\n         elif hasattr(obj, \"deconstruct\"):\n             deconstructed = obj.deconstruct()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..32a92da 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -35,6 +35,9 @@ class MigrationAutodetector:\n         elif isinstance(obj, COMPILED_REGEX_TYPE):\n             return RegexObject(obj)\n         elif isinstance(obj, type):\n+            if hasattr(obj, '__self__'):\n+                cls_path = f'{obj.__self__.__module__}.{obj.__self__.__qualname__}'\n+                return f'{cls_path}.{obj.__name__}'\n             return obj\n         elif hasattr(obj, 'deconstruct'):\n             deconstructed = obj.deconstruct()\n", "normalized_occurrence": 1}
