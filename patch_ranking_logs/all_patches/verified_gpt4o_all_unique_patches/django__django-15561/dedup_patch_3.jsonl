{"model_name_or_path": "agentless", "instance_id": "django__django-15561", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 86692c3..1894bda 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -429,6 +429,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         strict=False,\n     ):\n         \"\"\"Perform a \"physical\" (non-ManyToMany) field update.\"\"\"\n+        # Skip if the only change is in the choices.\n+        if old_field.choices != new_field.choices and old_type == new_type:\n+            return\n         # Use \"ALTER TABLE ... RENAME COLUMN\" if only the column name\n         # changed and there aren't any constraints.\n         if (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 9a783c9..fb40264 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -177,6 +177,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 return\n             self._remake_table(model, delete_field=field)\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n+        if old_field.choices != new_field.choices and old_type == new_type:\n+            return\n         if self.connection.features.can_alter_table_rename_column and old_field.column != new_field.column and (self.column_sql(model, old_field) == self.column_sql(model, new_field)) and (not (old_field.remote_field and old_field.db_constraint or (new_field.remote_field and new_field.db_constraint))):\n             return self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))\n         self._remake_table(model, alter_field=(old_field, new_field))\n", "normalized_occurrence": 1}
