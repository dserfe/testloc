{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..e6fca69 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,13 +100,23 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        parts = path.split('.')\n+        # Handle django.db.models specially\n+        if parts[0:3] == ['django', 'db', 'models']:\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % \".\".join(parts[3:])\n         else:\n+            # For other paths, import the module part and keep the rest as is\n+            # Find the last occurrence of 'models' to determine module boundary\n+            try:\n+                models_index = len(parts) - 1 - parts[::-1].index('models')\n+                module = \".\".join(parts[:models_index + 1])\n+                name = path\n+            except ValueError:\n+                # If 'models' not found, fall back to original behavior\n+                module, name = path.rsplit(\".\", 1)\n+                name = path\n             imports = {\"import %s\" % module}\n-            name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..a168b50 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,13 +70,19 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        parts = path.split('.')\n+        if parts[0:3] == ['django', 'db', 'models']:\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.%s' % '.'.join(parts[3:])\n         else:\n+            try:\n+                models_index = len(parts) - 1 - parts[::-1].index('models')\n+                module = '.'.join(parts[:models_index + 1])\n+                name = path\n+            except ValueError:\n+                module, name = path.rsplit('.', 1)\n+                name = path\n             imports = {'import %s' % module}\n-            name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
