{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..abc3081 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -355,8 +355,15 @@ class SQLCompiler:\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    # Handle the case where the order_by term is a direct reference to a column\n+                    elif isinstance(src, Col) and isinstance(sel_expr, Col):\n+                        if src.target == sel_expr.target and src.output_field == sel_expr.output_field:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # If no match is found in the select list, add it\n+                    self.select.append((resolved.get_source_expressions()[0], None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..7c43104 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -191,8 +191,13 @@ class SQLCompiler:\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    elif isinstance(src, Col) and isinstance(sel_expr, Col):\n+                        if src.target == sel_expr.target and src.output_field == sel_expr.output_field:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    self.select.append((resolved.get_source_expressions()[0], None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
