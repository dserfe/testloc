{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..ae7388f 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -665,7 +665,8 @@ class Colorbar:\n             patch = mpatches.PathPatch(mpath.Path(xy),\n                                        facecolor=self.cmap(self.norm(C[i][0])),\n                                        hatch=hatches[i], linewidth=0,\n-                                       antialiased=False, alpha=self.alpha)\n+                                       antialiased=False, alpha=self.alpha,\n+                                       edgecolor='none' if not self.drawedges else None)\n             self.ax.add_patch(patch)\n             patches.append(patch)\n         self.solids_patches = patches\n@@ -730,6 +731,7 @@ class Colorbar:\n                 mpath.Path(xy), facecolor=color, linewidth=0,\n                 antialiased=False, transform=self.ax.transAxes,\n                 hatch=hatches[0], clip_on=False,\n+                edgecolor='none' if not self.drawedges else None,\n                 # Place it right behind the standard patches, which is\n                 # needed if we updated the extends\n                 zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n@@ -751,6 +753,7 @@ class Colorbar:\n                 mpath.Path(xy), facecolor=color,\n                 linewidth=0, antialiased=False,\n                 transform=self.ax.transAxes, hatch=hatches[-1], clip_on=False,\n+                edgecolor='none' if not self.drawedges else None,\n                 # Place it right behind the standard patches, which is\n                 # needed if we updated the extends\n                 zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..2c82d9c 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -268,7 +268,7 @@ class Colorbar:\n         patches = []\n         for i in range(len(X) - 1):\n             xy = np.array([[X[i, 0], Y[i, 0]], [X[i, 1], Y[i, 0]], [X[i + 1, 1], Y[i + 1, 0]], [X[i + 1, 0], Y[i + 1, 1]]])\n-            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=self.cmap(self.norm(C[i][0])), hatch=hatches[i], linewidth=0, antialiased=False, alpha=self.alpha)\n+            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=self.cmap(self.norm(C[i][0])), hatch=hatches[i], linewidth=0, antialiased=False, alpha=self.alpha, edgecolor='none' if not self.drawedges else None)\n             self.ax.add_patch(patch)\n             patches.append(patch)\n         self.solids_patches = patches\n@@ -302,7 +302,7 @@ class Colorbar:\n                 xy = xy[:, ::-1]\n             val = -1 if self._long_axis().get_inverted() else 0\n             color = self.cmap(self.norm(self._values[val]))\n-            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[0], clip_on=False, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n+            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[0], clip_on=False, edgecolor='none' if not self.drawedges else None, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n             self.ax.add_patch(patch)\n             self._extend_patches.append(patch)\n         if self._extend_upper():\n@@ -314,7 +314,7 @@ class Colorbar:\n                 xy = xy[:, ::-1]\n             val = 0 if self._long_axis().get_inverted() else -1\n             color = self.cmap(self.norm(self._values[val]))\n-            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[-1], clip_on=False, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n+            patch = mpatches.PathPatch(mpath.Path(xy), facecolor=color, linewidth=0, antialiased=False, transform=self.ax.transAxes, hatch=hatches[-1], clip_on=False, edgecolor='none' if not self.drawedges else None, zorder=np.nextafter(self.ax.patch.zorder, -np.inf))\n             self.ax.add_patch(patch)\n             self._extend_patches.append(patch)\n         return\n", "normalized_occurrence": 1}
