{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..141ca05 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,15 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        if path.startswith('django.db.models.'):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % path[16:]  # len('django.db.models.') == 16\n         else:\n+            # Split on first dot after module\n+            module_parts = path.split('.')\n+            module = '.'.join(module_parts[:2])  # Get the actual module path (e.g. 'test1.models')\n+            name = '.'.join(module_parts[1:])    # Keep the full path after module (e.g. 'models.Outer.Inner')\n             imports = {\"import %s\" % module}\n-            name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..56e55a2 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,14 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.%s' % path[16:]\n         else:\n+            module_parts = path.split('.')\n+            module = '.'.join(module_parts[:2])\n+            name = '.'.join(module_parts[1:])\n             imports = {'import %s' % module}\n-            name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
