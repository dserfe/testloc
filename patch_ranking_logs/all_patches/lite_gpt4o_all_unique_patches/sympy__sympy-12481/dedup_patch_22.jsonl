{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..b9a886b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,11 +897,18 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # process non-disjoint cycles in left-to-right order\n+                processed = set()\n+                for cycle in args:\n+                    for elem in cycle:\n+                        if elem in processed:\n+                            continue\n+                        processed.add(elem)\n+                temp = processed\n             else:\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+        else:\n+            temp = set(temp)\n \n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..ca16b61 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,10 +196,17 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                processed = set()\n+                for cycle in args:\n+                    for elem in cycle:\n+                        if elem in processed:\n+                            continue\n+                        processed.add(elem)\n+                temp = processed\n             else:\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+        else:\n+            temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n", "normalized_occurrence": 1}
