{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..41a6676 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -150,6 +150,12 @@ class Options:\n \n         cls._meta = self\n         self.model = cls\n+\n+        # Check for ordering inheritance from parent class\n+        if cls._meta.parents:\n+            for parent in cls._meta.parents.keys():\n+                if parent._meta.ordering and not self.ordering:\n+                    self.ordering = parent._meta.ordering\n         # First, construct the default values for these options.\n         self.object_name = cls.__name__\n         self.model_name = self.object_name.lower()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..7f4634a 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -93,6 +93,10 @@ class Options:\n         from django.db.backends.utils import truncate_name\n         cls._meta = self\n         self.model = cls\n+        if cls._meta.parents:\n+            for parent in cls._meta.parents.keys():\n+                if parent._meta.ordering and (not self.ordering):\n+                    self.ordering = parent._meta.ordering\n         self.object_name = cls.__name__\n         self.model_name = self.object_name.lower()\n         self.verbose_name = camel_case_to_spaces(self.object_name)\n", "normalized_occurrence": 1}
