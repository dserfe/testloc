{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..7ed7be4 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2069,7 +2069,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+        return (inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)) or \\\n+               (isinstance(member, property) and inspect.isclass(parent))\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2661,7 +2662,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return (inspect.isproperty(member) and isinstance(parent, ClassDocumenter)) or \\\n+               (inspect.isclassmethod(member) and isinstance(parent, ClassDocumenter))\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..f5c9237 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1200,7 +1200,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n     priority = 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter))\n+        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter)) or (isinstance(member, property) and inspect.isclass(parent))\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n         if not ret:\n@@ -1597,7 +1597,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter) or (inspect.isclassmethod(member) and isinstance(parent, ClassDocumenter))\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n", "normalized_occurrence": 1}
