{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..e420c10 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -67,7 +67,11 @@ class MatMul(MatrixExpr):\n         if not X.cols.is_number:\n             # Don't waste time in result.doit() if the sum bounds are symbolic\n             expand = False\n-        return result.doit() if expand else result\n+        if expand:\n+            result = result.doit()\n+            if X == Y and isinstance(X, MatrixSymbol) and X.shape[0] == X.shape[1]:\n+                return Piecewise((X.shape[0], i==j), (0, True))\n+        return result\n \n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..932e342 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -41,7 +41,11 @@ class MatMul(MatrixExpr):\n         result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n             expand = False\n-        return result.doit() if expand else result\n+        if expand:\n+            result = result.doit()\n+            if X == Y and isinstance(X, MatrixSymbol) and (X.shape[0] == X.shape[1]):\n+                return Piecewise((X.shape[0], i == j), (0, True))\n+        return result\n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n         matrices = [x for x in self.args if x.is_Matrix]\n", "normalized_occurrence": 1}
