{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex be26d08..196e2e8 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -458,8 +458,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             dtype_orig = np.result_type(*array.dtypes)\n \n     if dtype_numeric:\n-        if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n+        if dtype_orig is not None and dtype_orig.kind == \"O\" and not np.issubdtype(array.dtype, np.str_):\n+            # if input is object and not string, convert to float.\n             dtype = np.float64\n         else:\n             dtype = None\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 8ce0584..bb632ab 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -136,7 +136,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         if all((isinstance(dtype, np.dtype) for dtype in dtypes_orig)):\n             dtype_orig = np.result_type(*array.dtypes)\n     if dtype_numeric:\n-        if dtype_orig is not None and dtype_orig.kind == 'O':\n+        if dtype_orig is not None and dtype_orig.kind == 'O' and (not np.issubdtype(array.dtype, np.str_)):\n             dtype = np.float64\n         else:\n             dtype = None\n", "normalized_occurrence": 1}
