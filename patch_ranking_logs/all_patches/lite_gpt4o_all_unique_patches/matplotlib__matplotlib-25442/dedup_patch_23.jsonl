{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db0cc2e..d5ed7eb 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1500,22 +1500,24 @@ class DraggableBase:\n             ref_artist.set_picker(True)\n         self.got_artist = False\n         self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+        self.cids = []\n+        if self.ref_artist.figure is not None:\n+            self.cids = [\n+                self.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n \n     # A property, not an attribute, to maintain picklability.\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n \n     def on_motion(self, evt):\n-        if self._check_still_parented() and self.got_artist:\n+        if self._check_still_parented() and self.got_artist and self.ref_artist.figure is not None:\n             dx = evt.x - self.mouse_x\n             dy = evt.y - self.mouse_y\n             self.update_offset(dx, dy)\n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.canvas.restore_region(self.background)\n                 self.ref_artist.draw(\n                     self.ref_artist.figure._get_renderer())\n@@ -1524,11 +1526,11 @@ class DraggableBase:\n                 self.canvas.draw()\n \n     def on_pick(self, evt):\n-        if self._check_still_parented() and evt.artist == self.ref_artist:\n+        if self._check_still_parented() and evt.artist == self.ref_artist and self.ref_artist.figure is not None:\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.ref_artist.set_animated(True)\n                 self.canvas.draw()\n                 self.background = \\\n@@ -1541,12 +1543,12 @@ class DraggableBase:\n             self.save_offset()\n \n     def on_release(self, event):\n-        if self._check_still_parented() and self.got_artist:\n+        if self._check_still_parented() and self.got_artist and self.ref_artist.figure is not None:\n             self.finalize_offset()\n             self.got_artist = False\n             self.canvas.mpl_disconnect(self._c1)\n \n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.ref_artist.set_animated(False)\n \n     def _check_still_parented(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex f94319f..1622fec 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1263,15 +1263,17 @@ class DraggableBase:\n             ref_artist.set_picker(True)\n         self.got_artist = False\n         self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [self.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n+        self.cids = []\n+        if self.ref_artist.figure is not None:\n+            self.cids = [self.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n \n     def on_motion(self, evt):\n-        if self._check_still_parented() and self.got_artist:\n+        if self._check_still_parented() and self.got_artist and (self.ref_artist.figure is not None):\n             dx = evt.x - self.mouse_x\n             dy = evt.y - self.mouse_y\n             self.update_offset(dx, dy)\n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.canvas.restore_region(self.background)\n                 self.ref_artist.draw(self.ref_artist.figure._get_renderer())\n                 self.canvas.blit()\n@@ -1279,11 +1281,11 @@ class DraggableBase:\n                 self.canvas.draw()\n \n     def on_pick(self, evt):\n-        if self._check_still_parented() and evt.artist == self.ref_artist:\n+        if self._check_still_parented() and evt.artist == self.ref_artist and (self.ref_artist.figure is not None):\n             self.mouse_x = evt.mouseevent.x\n             self.mouse_y = evt.mouseevent.y\n             self.got_artist = True\n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.ref_artist.set_animated(True)\n                 self.canvas.draw()\n                 self.background = self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)\n@@ -1293,11 +1295,11 @@ class DraggableBase:\n             self.save_offset()\n \n     def on_release(self, event):\n-        if self._check_still_parented() and self.got_artist:\n+        if self._check_still_parented() and self.got_artist and (self.ref_artist.figure is not None):\n             self.finalize_offset()\n             self.got_artist = False\n             self.canvas.mpl_disconnect(self._c1)\n-            if self._use_blit:\n+            if self._use_blit and self.ref_artist.figure is not None:\n                 self.ref_artist.set_animated(False)\n \n     def _check_still_parented(self):\n", "normalized_occurrence": 1}
