{"model_name_or_path": "agentless", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7fd21f6..f6c1e27 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,12 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, v) for v in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple(self.cleanse_setting(key, v) for v in value)\n+            elif isinstance(value, set):\n+                cleansed = {self.cleanse_setting(key, v) for v in value}\n             else:\n                 cleansed = value\n         except TypeError:\n", "occurrence": 2, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex b98e7c2..0b83e52 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,6 +47,12 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, v) for v in value]\n+            elif isinstance(value, tuple):\n+                cleansed = tuple((self.cleanse_setting(key, v) for v in value))\n+            elif isinstance(value, set):\n+                cleansed = {self.cleanse_setting(key, v) for v in value}\n             else:\n                 cleansed = value\n         except TypeError:\n", "normalized_occurrence": 2}
