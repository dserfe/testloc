{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7521", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex f40cad0..7e54481 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -301,7 +301,7 @@ class SysCaptureBinary:\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n \n     def done(self) -> None:\n         self._assert_state(\"done\", (\"initialized\", \"started\", \"suspended\", \"done\"))\n@@ -338,7 +338,7 @@ class SysCapture(SysCaptureBinary):\n         res = self.tmpfile.getvalue()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n \n     def writeorg(self, data):\n         self._assert_state(\"writeorg\", (\"started\", \"suspended\"))\n@@ -426,7 +426,7 @@ class FDCaptureBinary:\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n \n     def done(self) -> None:\n         \"\"\" stop capturing, restore streams, return original capture file,\n@@ -481,7 +481,7 @@ class FDCapture(FDCaptureBinary):\n         res = self.tmpfile.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n \n     def writeorg(self, data):\n         \"\"\" write to original file descriptor. \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 230e591..11a9977 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -144,7 +144,7 @@ class SysCaptureBinary:\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n     def done(self) -> None:\n         self._assert_state('done', ('initialized', 'started', 'suspended', 'done'))\n         if self._state == 'done':\n@@ -174,7 +174,7 @@ class SysCapture(SysCaptureBinary):\n         res = self.tmpfile.getvalue()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n     def writeorg(self, data):\n         self._assert_state('writeorg', ('started', 'suspended'))\n         self._old.write(data)\n@@ -216,7 +216,7 @@ class FDCaptureBinary:\n         res = self.tmpfile.buffer.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n     def done(self) -> None:\n         self._assert_state('done', ('initialized', 'started', 'suspended', 'done'))\n         if self._state == 'done':\n@@ -255,7 +255,7 @@ class FDCapture(FDCaptureBinary):\n         res = self.tmpfile.read()\n         self.tmpfile.seek(0)\n         self.tmpfile.truncate()\n-        return res\n+        return res.replace('\\r\\n', '\\r').replace('\\n', '\\r')\n     def writeorg(self, data):\n         super().writeorg(data.encode('utf-8'))\n CaptureResult = collections.namedtuple('CaptureResult', ['out', 'err'])\n", "normalized_occurrence": 1}
