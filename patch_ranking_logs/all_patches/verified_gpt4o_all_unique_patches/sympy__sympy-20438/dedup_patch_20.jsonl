{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..cb7be6c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -388,12 +388,10 @@ class Set(Basic):\n         if ret is not None:\n             return ret\n \n-        # Fall back on computing the intersection\n-        # XXX: We shouldn't do this. A query like this should be handled\n-        # without evaluating new Set objects. It should be the other way round\n-        # so that the intersect method uses is_subset for evaluation.\n-        if self.intersect(other) == self:\n-            return True\n+        # Fall back on _eval_is_subset method if available\n+        ret = self._eval_is_subset(other)\n+        if ret is not None:\n+            return ret\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n@@ -1873,7 +1871,11 @@ class FiniteSet(Set, EvalfMixin):\n                 for e in self.args)\n \n     def _eval_is_subset(self, other):\n-        return fuzzy_and(other._contains(e) for e in self.args)\n+        if isinstance(other, ProductSet):\n+            if len(self.sets) != len(other.sets):\n+                return False\n+            return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(self.sets, other.sets))\n+        return Set._eval_is_subset(self, other)\n \n     @property\n     def _boundary(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..8533563 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,8 +137,9 @@ class Set(Basic):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n-        if self.intersect(other) == self:\n-            return True\n+        ret = self._eval_is_subset(other)\n+        if ret is not None:\n+            return ret\n     def _eval_is_subset(self, other):\n         return None\n     def _eval_is_superset(self, other):\n@@ -780,7 +781,11 @@ class FiniteSet(Set, EvalfMixin):\n         else:\n             return fuzzy_or((fuzzy_bool(Eq(e, other, evaluate=True)) for e in self.args))\n     def _eval_is_subset(self, other):\n-        return fuzzy_and((other._contains(e) for e in self.args))\n+        if isinstance(other, ProductSet):\n+            if len(self.sets) != len(other.sets):\n+                return False\n+            return fuzzy_and((s1.is_subset(s2) for s1, s2 in zip(self.sets, other.sets)))\n+        return Set._eval_is_subset(self, other)\n     @property\n     def _boundary(self):\n         return self\n", "normalized_occurrence": 1}
