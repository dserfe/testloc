{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19954", "model_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex eb05c35..ae3cdcf 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -2195,16 +2195,20 @@ class PermutationGroup(Basic):\n                 # respect to the already discovere ones\n                 minimal = True\n                 to_remove = []\n+                indices_to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n                         # i-th block system is not minimal\n-                        del num_blocks[i], blocks[i]\n+                        indices_to_remove.append(i)\n                         to_remove.append(rep_blocks[i])\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         # the system being checked is not minimal\n                         minimal = False\n                         break\n                 # remove non-minimal representative blocks\n+                for i in sorted(indices_to_remove, reverse=True):\n+                    del num_blocks[i]\n+                    del blocks[i]\n                 rep_blocks = [r for r in rep_blocks if r not in to_remove]\n \n                 if minimal and num_block not in num_blocks:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py\nindex 19182ce..32f4d2e 100644\n--- a/sympy/combinatorics/perm_groups.py\n+++ b/sympy/combinatorics/perm_groups.py\n@@ -838,13 +838,17 @@ class PermutationGroup(Basic):\n                 rep = {j for j in range(self.degree) if num_block[j] == 0}\n                 minimal = True\n                 to_remove = []\n+                indices_to_remove = []\n                 for i, r in enumerate(rep_blocks):\n                     if len(r) > len(rep) and rep.issubset(r):\n-                        del num_blocks[i], blocks[i]\n+                        indices_to_remove.append(i)\n                         to_remove.append(rep_blocks[i])\n                     elif len(r) < len(rep) and r.issubset(rep):\n                         minimal = False\n                         break\n+                for i in sorted(indices_to_remove, reverse=True):\n+                    del num_blocks[i]\n+                    del blocks[i]\n                 rep_blocks = [r for r in rep_blocks if r not in to_remove]\n                 if minimal and num_block not in num_blocks:\n                     blocks.append(block)\n", "normalized_occurrence": 1}
