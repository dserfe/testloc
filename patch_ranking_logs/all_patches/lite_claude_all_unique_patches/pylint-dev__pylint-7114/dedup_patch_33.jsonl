{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..66845b3 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,33 +588,40 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n-                        continue\n-\n-                    if _is_ignored_file(\n-                        root,\n-                        self.config.ignore,\n-                        self.config.ignore_patterns,\n-                        self.config.ignore_paths,\n-                    ):\n-                        skip_subtrees.append(root)\n-                        continue\n-\n-                    if \"__init__.py\" in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n-                    else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+            if os.path.isdir(something):\n+                # Check if there's a module with same name as directory\n+                same_name_module = os.path.join(something, os.path.basename(something) + \".py\")\n+                if os.path.isfile(same_name_module):\n+                    yield something\n+                    continue\n+                \n+                if not os.path.isfile(os.path.join(something, \"__init__.py\")):\n+                    skip_subtrees: list[str] = []\n+                    for root, _, files in os.walk(something):\n+                        if any(root.startswith(s) for s in skip_subtrees):\n+                            # Skip subtree of already discovered package.\n+                            continue\n+\n+                        if _is_ignored_file(\n+                            root,\n+                            self.config.ignore,\n+                            self.config.ignore_patterns,\n+                            self.config.ignore_paths,\n+                        ):\n+                            skip_subtrees.append(root)\n+                            continue\n+\n+                        if \"__init__.py\" in files:\n+                            skip_subtrees.append(root)\n+                            yield root\n+                        else:\n+                            yield from (\n+                                os.path.join(root, file)\n+                                for file in files\n+                                if file.endswith(\".py\")\n+                            )\n+                else:\n+                    yield something\n             else:\n                 yield something\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..d0bd79a 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -225,19 +225,26 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 self._msgs_state[msg.msgid] = False\n     def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n-                skip_subtrees: list[str] = []\n-                for root, _, files in os.walk(something):\n-                    if any((root.startswith(s) for s in skip_subtrees)):\n-                        continue\n-                    if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n-                        skip_subtrees.append(root)\n-                        continue\n-                    if '__init__.py' in files:\n-                        skip_subtrees.append(root)\n-                        yield root\n-                    else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+            if os.path.isdir(something):\n+                same_name_module = os.path.join(something, os.path.basename(something) + '.py')\n+                if os.path.isfile(same_name_module):\n+                    yield something\n+                    continue\n+                if not os.path.isfile(os.path.join(something, '__init__.py')):\n+                    skip_subtrees: list[str] = []\n+                    for root, _, files in os.walk(something):\n+                        if any((root.startswith(s) for s in skip_subtrees)):\n+                            continue\n+                        if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n+                            skip_subtrees.append(root)\n+                            continue\n+                        if '__init__.py' in files:\n+                            skip_subtrees.append(root)\n+                            yield root\n+                        else:\n+                            yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+                else:\n+                    yield something\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n", "normalized_occurrence": 1}
