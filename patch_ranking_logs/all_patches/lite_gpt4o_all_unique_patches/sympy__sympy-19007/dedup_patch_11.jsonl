{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..895bd01 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -235,12 +235,12 @@ class BlockMatrix(MatrixExpr):\n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if not isinstance(i, Integer) or (i < numrows):\n                 break\n             else:\n                 i -= numrows\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if not isinstance(j, Integer) or (j < numcols):\n                 break\n             else:\n                 j -= numcols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..7ef1e6d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -104,12 +104,12 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if not isinstance(i, Integer) or i < numrows:\n                 break\n             else:\n                 i -= numrows\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if not isinstance(j, Integer) or j < numcols:\n                 break\n             else:\n                 j -= numcols\n", "normalized_occurrence": 1}
