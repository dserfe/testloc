{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..fc3f265 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -547,7 +547,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 FutureWarning)\n \n         # make sure we actually converted to numeric:\n-        if dtype_numeric and array.dtype.kind == \"O\":\n+        if dtype_numeric and array.dtype.kind == \"O\" or (warn_on_dtype and isinstance(array_orig, pd.DataFrame) and array_orig.dtypes.isin([object]).any()):\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError(\"Found array with dim %d. %s expected <= 2.\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..cd072dc 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -166,7 +166,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n                 raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n-        if dtype_numeric and array.dtype.kind == 'O':\n+        if dtype_numeric and array.dtype.kind == 'O' or (warn_on_dtype and isinstance(array_orig, pd.DataFrame) and array_orig.dtypes.isin([object]).any()):\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n", "normalized_occurrence": 1}
