{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..ee8ac5f 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -105,7 +105,10 @@ def get_indexer_nd(index, labels, method=None, tolerance=None):\n     return indexer\n \n \n-def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=None, reserved_keys=('method',)):\n+    reserved_keys = set(reserved_keys)\n+    if any(k in reserved_keys for k in (index_name, *(label.keys() if is_dict_like(label) else []))):\n+        raise ValueError(f\"Dimension name conflicts with reserved keyword(s): {reserved_keys}\")\n     \"\"\"Given a pandas.Index and labels (e.g., from __getitem__) for one\n     dimension, return an indexer suitable for indexing an ndarray along that\n     dimension. If `index` is a pandas.MultiIndex and depending on `label`,\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..e731e7f 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -57,7 +57,11 @@ def get_indexer_nd(index, labels, method=None, tolerance=None):\n     flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n-def convert_label_indexer(index, label, index_name='', method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name='', method=None, tolerance=None, reserved_keys=('method',)):\n+    reserved_keys = set(reserved_keys)\n+    if any((k in reserved_keys for k in (index_name, *(label.keys() if is_dict_like(label) else [])))):\n+        raise ValueError(f'Dimension name conflicts with reserved keyword(s): {reserved_keys}')\n+    'Given a pandas.Index and labels (e.g., from __getitem__) for one\\n    dimension, return an indexer suitable for indexing an ndarray along that\\n    dimension. If `index` is a pandas.MultiIndex and depending on `label`,\\n    return a new pandas.Index or pandas.MultiIndex (otherwise return None).\\n    '\n     new_index = None\n     if isinstance(label, slice):\n         if method is not None or tolerance is not None:\n", "normalized_occurrence": 1}
