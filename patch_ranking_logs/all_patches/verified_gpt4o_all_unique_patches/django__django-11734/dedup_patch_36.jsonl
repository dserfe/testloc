{"model_name_or_path": "agentless", "instance_id": "django__django-11734", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 13129dd..eaaab34 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -898,7 +898,8 @@ class QuerySet:\n         Return a new QuerySet instance with NOT (args) ANDed to the existing\n         set.\n         \"\"\"\n-        self._not_support_combined_queries('exclude')\n+        if any(isinstance(arg, OuterRef) for arg in args) or any(isinstance(value, OuterRef) for value in kwargs.values()):\n+            raise ValueError('OuterRef cannot be used directly with exclude.')\n         return self._filter_or_exclude(True, *args, **kwargs)\n \n     def _filter_or_exclude(self, negate, *args, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1541d76..2659572 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -530,7 +530,8 @@ class QuerySet:\n         self._not_support_combined_queries('filter')\n         return self._filter_or_exclude(False, *args, **kwargs)\n     def exclude(self, *args, **kwargs):\n-        self._not_support_combined_queries('exclude')\n+        if any((isinstance(arg, OuterRef) for arg in args)) or any((isinstance(value, OuterRef) for value in kwargs.values())):\n+            raise ValueError('OuterRef cannot be used directly with exclude.')\n         return self._filter_or_exclude(True, *args, **kwargs)\n     def _filter_or_exclude(self, negate, *args, **kwargs):\n         if args or kwargs:\n", "normalized_occurrence": 1}
