{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-18057", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex b5265ce..d6d8acb 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,26 +120,33 @@ class Expr(Basic, EvalfMixin):\n         return self._args\n \n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n+        if isinstance(other, Basic):\n+            # If other is already a SymPy type, proceed with comparison\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n-        # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n-                type(self) != type(other)):\n-            return False\n-        a, b = self._hashable_content(), other._hashable_content()\n-        if a != b:\n-            return False\n-        # check number *in* an expression\n-        for a, b in zip(a, b):\n-            if not isinstance(a, Expr):\n-                continue\n-            if a.is_Number and type(a) != type(b):\n+            # check for pure number expr\n+            if not (self.is_Number and other.is_Number) and (\n+                    type(self) != type(other)):\n                 return False\n-        return True\n+            a, b = self._hashable_content(), other._hashable_content()\n+            if a != b:\n+                return False\n+            # check number *in* an expression\n+            for a, b in zip(a, b):\n+                if not isinstance(a, Expr):\n+                    continue\n+                if a.is_Number and type(a) != type(b):\n+                    return False\n+            return True\n+        # For non-SymPy objects, try _sympy_ method if available\n+        # otherwise return False\n+        if hasattr(other, '_sympy_'):\n+            try:\n+                other = other._sympy_()\n+                return self.__eq__(other)\n+            except:\n+                pass\n+        return False\n \n     # ***************\n     # * Arithmetics *\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex e14d117..48d8825 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -46,23 +46,27 @@ class Expr(Basic, EvalfMixin):\n     def _hashable_content(self):\n         return self._args\n     def __eq__(self, other):\n-        try:\n-            other = sympify(other)\n+        if isinstance(other, Basic):\n             if not isinstance(other, Expr):\n                 return False\n-        except (SympifyError, SyntaxError):\n-            return False\n-        if not (self.is_Number and other.is_Number) and type(self) != type(other):\n-            return False\n-        a, b = (self._hashable_content(), other._hashable_content())\n-        if a != b:\n-            return False\n-        for a, b in zip(a, b):\n-            if not isinstance(a, Expr):\n-                continue\n-            if a.is_Number and type(a) != type(b):\n+            if not (self.is_Number and other.is_Number) and type(self) != type(other):\n                 return False\n-        return True\n+            a, b = (self._hashable_content(), other._hashable_content())\n+            if a != b:\n+                return False\n+            for a, b in zip(a, b):\n+                if not isinstance(a, Expr):\n+                    continue\n+                if a.is_Number and type(a) != type(b):\n+                    return False\n+            return True\n+        if hasattr(other, '_sympy_'):\n+            try:\n+                other = other._sympy_()\n+                return self.__eq__(other)\n+            except:\n+                pass\n+        return False\n     _op_priority = 10.0\n     def __pos__(self):\n         return self\n", "normalized_occurrence": 1}
