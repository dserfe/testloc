{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22714", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex b7f7a47..a52fa81 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,28 +152,29 @@ class Point(GeometryEntity):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n-            raise ValueError('Imaginary coordinates are not permitted.')\n-        if not all(isinstance(a, Expr) for a in coords):\n-            raise TypeError('Coordinates must be valid SymPy expressions.')\n+        if not _nocheck:\n+            if any(a.is_number and im(a) for a in coords):\n+                raise ValueError('Imaginary coordinates are not permitted.')\n+            if not all(isinstance(a, Expr) for a in coords):\n+                raise TypeError('Coordinates must be valid SymPy expressions.')\n \n-        # pad with zeros appropriately\n-        coords = coords[:dim] + (S.Zero,)*(dim - len(coords))\n+            # pad with zeros appropriately\n+            coords = coords[:dim] + (S.Zero,)*(dim - len(coords))\n \n-        # Turn any Floats into rationals and simplify\n-        # any expressions before we instantiate\n-        if evaluate:\n-            coords = coords.xreplace({\n-                f: simplify(nsimplify(f, rational=True))\n-                 for f in coords.atoms(Float)})\n+            # Turn any Floats into rationals and simplify\n+            # any expressions before we instantiate\n+            if evaluate:\n+                coords = coords.xreplace({\n+                    f: simplify(nsimplify(f, rational=True))\n+                     for f in coords.atoms(Float)})\n \n         # return 2D or 3D instances\n         if len(coords) == 2:\n             kwargs['_nocheck'] = True\n-            return Point2D(*coords, **kwargs)\n+            return Point2D(*coords, _nocheck=True, evaluate=evaluate)\n         elif len(coords) == 3:\n             kwargs['_nocheck'] = True\n-            return Point3D(*coords, **kwargs)\n+            return Point3D(*coords, _nocheck=True, evaluate=evaluate)\n \n         # the general Point\n         return GeometryEntity.__new__(cls, *coords)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 4d7ea73..56fc5ed 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -45,19 +45,20 @@ class Point(GeometryEntity):\n                 raise ValueError(filldedent(\"\\n                        on_morph value should be 'error',\\n                        'warn' or 'ignore'.\"))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any((a.is_number and im(a) for a in coords)):\n-            raise ValueError('Imaginary coordinates are not permitted.')\n-        if not all((isinstance(a, Expr) for a in coords)):\n-            raise TypeError('Coordinates must be valid SymPy expressions.')\n-        coords = coords[:dim] + (S.Zero,) * (dim - len(coords))\n-        if evaluate:\n-            coords = coords.xreplace({f: simplify(nsimplify(f, rational=True)) for f in coords.atoms(Float)})\n+        if not _nocheck:\n+            if any((a.is_number and im(a) for a in coords)):\n+                raise ValueError('Imaginary coordinates are not permitted.')\n+            if not all((isinstance(a, Expr) for a in coords)):\n+                raise TypeError('Coordinates must be valid SymPy expressions.')\n+            coords = coords[:dim] + (S.Zero,) * (dim - len(coords))\n+            if evaluate:\n+                coords = coords.xreplace({f: simplify(nsimplify(f, rational=True)) for f in coords.atoms(Float)})\n         if len(coords) == 2:\n             kwargs['_nocheck'] = True\n-            return Point2D(*coords, **kwargs)\n+            return Point2D(*coords, _nocheck=True, evaluate=evaluate)\n         elif len(coords) == 3:\n             kwargs['_nocheck'] = True\n-            return Point3D(*coords, **kwargs)\n+            return Point3D(*coords, _nocheck=True, evaluate=evaluate)\n         return GeometryEntity.__new__(cls, *coords)\n     def __abs__(self):\n         origin = Point([0] * len(self))\n", "normalized_occurrence": 1}
