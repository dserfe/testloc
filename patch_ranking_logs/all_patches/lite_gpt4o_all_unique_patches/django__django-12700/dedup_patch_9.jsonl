{"model_name_or_path": "agentless", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7fd21f6..d4d3eb8 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,8 +90,10 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                cleansed = type(value)(self.cleanse_setting(k, v) if isinstance(v, dict) else (self.cleansed_substitute if self.hidden_settings.search(str(v)) else v) for v in value)\n             else:\n-                cleansed = value\n+                cleansed = self.cleansed_substitute if self.hidden_settings.search(str(value)) else value\n         except TypeError:\n             # If the key isn't regex-able, just return as-is.\n             cleansed = value\n", "occurrence": 1, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex b98e7c2..3944400 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,8 +47,10 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                cleansed = type(value)((self.cleanse_setting(k, v) if isinstance(v, dict) else self.cleansed_substitute if self.hidden_settings.search(str(v)) else v for v in value))\n             else:\n-                cleansed = value\n+                cleansed = self.cleansed_substitute if self.hidden_settings.search(str(value)) else value\n         except TypeError:\n             cleansed = value\n         if callable(cleansed):\n", "normalized_occurrence": 1}
