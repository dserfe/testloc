{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..f39a16a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1775,7 +1775,7 @@ class SQLInsertCompiler(SQLCompiler):\n         if (\n             self.returning_fields\n             and self.connection.features.can_return_columns_from_insert\n-        ):\n+        ) or self.query.on_conflict:\n             if self.connection.features.can_return_rows_from_bulk_insert:\n                 result.append(\n                     self.connection.ops.bulk_insert_sql(fields, placeholder_rows)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..b73a175 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -875,7 +875,7 @@ class SQLInsertCompiler(SQLCompiler):\n         can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert\n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(fields, self.query.on_conflict, (f.column for f in self.query.update_fields), (f.column for f in self.query.unique_fields))\n-        if self.returning_fields and self.connection.features.can_return_columns_from_insert:\n+        if self.returning_fields and self.connection.features.can_return_columns_from_insert or self.query.on_conflict:\n             if self.connection.features.can_return_rows_from_bulk_insert:\n                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n                 params = param_rows\n", "normalized_occurrence": 1}
