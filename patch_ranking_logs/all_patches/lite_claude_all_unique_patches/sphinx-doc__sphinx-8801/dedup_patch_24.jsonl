{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..bb0ad38 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2496,18 +2496,20 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin,  # type:\n                 pass\n \n     def get_attribute_comment(self, parent: Any, attrname: str) -> Optional[List[str]]:\n+        try:\n+            analyzer = ModuleAnalyzer.for_module(self.get_real_modname())\n+            analyzer.analyze()\n+        except PycodeError:\n+            return None\n+\n         for cls in inspect.getmro(parent):\n             try:\n-                module = safe_getattr(cls, '__module__')\n                 qualname = safe_getattr(cls, '__qualname__')\n-\n-                analyzer = ModuleAnalyzer.for_module(module)\n-                analyzer.analyze()\n                 if qualname and self.objpath:\n                     key = (qualname, attrname)\n                     if key in analyzer.attr_docs:\n                         return list(analyzer.attr_docs[key])\n-            except (AttributeError, PycodeError):\n+            except AttributeError:\n                 pass\n \n         return None\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..a91493d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1471,17 +1471,19 @@ class AttributeDocumenter(GenericAliasMixin, NewTypeMixin, SlotsMixin, TypeVarMi\n             except ValueError:\n                 pass\n     def get_attribute_comment(self, parent: Any, attrname: str) -> Optional[List[str]]:\n+        try:\n+            analyzer = ModuleAnalyzer.for_module(self.get_real_modname())\n+            analyzer.analyze()\n+        except PycodeError:\n+            return None\n         for cls in inspect.getmro(parent):\n             try:\n-                module = safe_getattr(cls, '__module__')\n                 qualname = safe_getattr(cls, '__qualname__')\n-                analyzer = ModuleAnalyzer.for_module(module)\n-                analyzer.analyze()\n                 if qualname and self.objpath:\n                     key = (qualname, attrname)\n                     if key in analyzer.attr_docs:\n                         return list(analyzer.attr_docs[key])\n-            except (AttributeError, PycodeError):\n+            except AttributeError:\n                 pass\n         return None\n     def get_doc(self, encoding: str=None, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
