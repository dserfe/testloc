{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..0badfbc 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -537,6 +537,23 @@ def matplotlib_fname():\n                        \"install is broken\")\n \n \n+def _parse_version(version_str):\n+    \"\"\"Parse version string into a tuple of ints.\"\"\"\n+    return tuple(map(int, version_str.split('.')))\n+\n+\n+@property\n+def version_info(self):\n+    \"\"\"\n+    Return a tuple of the matplotlib version. The tuple represents the version\n+    number as (major, minor, patch).\n+\n+    This can be used for checking if the current version is greater or less than\n+    a target version. For example, ``matplotlib.version_info >= (3, 5, 0)``.\n+    \"\"\"\n+    return _parse_version(__version__)\n+\n+\n # rcParams deprecated and automatically mapped to another key.\n # Values are tuples of (version, new_name, f_old2new, f_new2old).\n _deprecated_map = {}\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n+def _parse_version(version_str):\n+    return tuple(map(int, version_str.split('.')))\n+@property\n+def version_info(self):\n+    return _parse_version(__version__)", "normalized_occurrence": 1}
