{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..b017a61 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -326,9 +326,16 @@ class Collector:\n                 instances.reverse()\n \n             # delete instances\n+            delete_batches = {}\n             for model, instances in self.data.items():\n-                query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n+                if model not in delete_batches:\n+                    delete_batches[model] = pk_list\n+                else:\n+                    delete_batches[model].extend(pk_list)\n+\n+            for model, pk_list in delete_batches.items():\n+                query = sql.DeleteQuery(model)\n                 count = query.delete_batch(pk_list, self.using)\n                 deleted_counter[model._meta.label] += count\n \n@@ -346,4 +353,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..47dc0dd 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -165,9 +165,15 @@ class Collector:\n                     query.update_batch([obj.pk for obj in instances], {field.name: value}, self.using)\n             for instances in self.data.values():\n                 instances.reverse()\n+            delete_batches = {}\n             for model, instances in self.data.items():\n-                query = sql.DeleteQuery(model)\n                 pk_list = [obj.pk for obj in instances]\n+                if model not in delete_batches:\n+                    delete_batches[model] = pk_list\n+                else:\n+                    delete_batches[model].extend(pk_list)\n+            for model, pk_list in delete_batches.items():\n+                query = sql.DeleteQuery(model)\n                 count = query.delete_batch(pk_list, self.using)\n                 deleted_counter[model._meta.label] += count\n                 if not model._meta.auto_created:\n", "normalized_occurrence": 1}
