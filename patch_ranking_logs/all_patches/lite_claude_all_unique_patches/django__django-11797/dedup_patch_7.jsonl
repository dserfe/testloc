{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..3c2b657 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -96,14 +96,14 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             # If the group by is set to a list (by .values() call most likely),\n             # then we need to add everything in it to the GROUP BY clause.\n-            # Backwards compatibility hack for setting query.group_by. Remove\n-            # when  we have public API way of forcing the GROUP BY clause.\n-            # Converts string references to expressions.\n+            # These grouping columns should be preserved even in subqueries.\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n+                    expr = self.query.resolve_ref(expr)\n+                expressions.append(expr)\n+            # For subqueries, we should return immediately to preserve the original grouping\n+            if self.query.is_subquery:\n+                return [(self.compile(expr)) for expr in expressions]\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..3fab28c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -42,9 +42,10 @@ class SQLCompiler:\n         if self.query.group_by is not True:\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n-                    expressions.append(self.query.resolve_ref(expr))\n-                else:\n-                    expressions.append(expr)\n+                    expr = self.query.resolve_ref(expr)\n+                expressions.append(expr)\n+            if self.query.is_subquery:\n+                return [self.compile(expr) for expr in expressions]\n         for expr, _, _ in select:\n             cols = expr.get_group_by_cols()\n             for col in cols:\n", "normalized_occurrence": 1}
