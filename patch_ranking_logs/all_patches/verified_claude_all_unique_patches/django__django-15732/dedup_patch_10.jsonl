{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/backends/postgresql/schema.py b/django/db/backends/postgresql/schema.py\nindex fdd1271..544ea8e 100644\n--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n@@ -1,3 +1,4 @@\n+\n import psycopg2\n \n from django.db.backends.base.schema import BaseDatabaseSchemaEditor\n@@ -261,6 +262,35 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         )\n         return super()._delete_index_sql(model, name, sql)\n \n+    def _delete_unique_sql(self, model, name, fields=None):\n+        if fields:\n+            # For unique_together removals, we need to handle the case where\n+            # multiple unique constraints exist on the same fields\n+            constraint_names = []\n+            with self.connection.cursor() as cursor:\n+                cursor.execute(\"\"\"\n+                    SELECT conname \n+                    FROM pg_constraint \n+                    WHERE conrelid = %s::regclass \n+                    AND contype = 'u' \n+                    AND (\n+                        conkey = ARRAY[%s]\n+                        OR conkey = ARRAY[%s]::smallint[]\n+                    )\n+                \"\"\", [model._meta.db_table, tuple(fields), fields])\n+                constraint_names = [row[0] for row in cursor.fetchall()]\n+            \n+            # Remove all matching unique constraints\n+            sql_list = []\n+            for constraint_name in constraint_names:\n+                sql_list.append(('ALTER TABLE %s DROP CONSTRAINT %s' % (\n+                    self.quote_name(model._meta.db_table),\n+                    self.quote_name(constraint_name),\n+                ), []))\n+            return sql_list\n+        else:\n+            return super()._delete_unique_sql(model, name)\n+\n     def _create_index_sql(\n         self,\n         model,\n@@ -296,4 +326,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             condition=condition,\n             include=include,\n             expressions=expressions,\n-        )\n+        )\n", "occurrence": 1, "normalized_patch": "--- a/django/db/backends/postgresql/schema.py\n+++ b/django/db/backends/postgresql/schema.py\n+    def _delete_unique_sql(self, model, name, fields=None):\n+        if fields:\n+            constraint_names = []\n+            with self.connection.cursor() as cursor:\n+                cursor.execute(\"\\n                    SELECT conname \\n                    FROM pg_constraint \\n                    WHERE conrelid = %s::regclass \\n                    AND contype = 'u' \\n                    AND (\\n                        conkey = ARRAY[%s]\\n                        OR conkey = ARRAY[%s]::smallint[]\\n                    )\\n                \", [model._meta.db_table, tuple(fields), fields])\n+                constraint_names = [row[0] for row in cursor.fetchall()]\n+            sql_list = []\n+            for constraint_name in constraint_names:\n+                sql_list.append(('ALTER TABLE %s DROP CONSTRAINT %s' % (self.quote_name(model._meta.db_table), self.quote_name(constraint_name)), []))\n+            return sql_list\n+        else:\n+            return super()._delete_unique_sql(model, name)", "normalized_occurrence": 1}
