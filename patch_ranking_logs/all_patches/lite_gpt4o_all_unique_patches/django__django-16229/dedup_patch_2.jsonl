{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..4216007 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -92,7 +92,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {k: (v() if callable(v) else v) for k, v in (initial or {}).items()}\n         self.error_class = error_class\n         # Translators: This is the default suffix added to form field labels\n         self.label_suffix = label_suffix if label_suffix is not None else _(\":\")\n@@ -210,6 +210,8 @@ class BaseForm(RenderableFormMixin):\n         return \"%s-%s\" % (self.prefix, field_name) if self.prefix else field_name\n \n     def add_initial_prefix(self, field_name):\n+        if field_name in self.initial and callable(self.initial[field_name]):\n+            self.initial[field_name] = self.initial[field_name]()\n         \"\"\"Add an 'initial' prefix for checking dynamic initial values.\"\"\"\n         return \"initial-%s\" % self.add_prefix(field_name)\n \n@@ -536,4 +538,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..5566291 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -58,7 +58,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {k: v() if callable(v) else v for k, v in (initial or {}).items()}\n         self.error_class = error_class\n         self.label_suffix = label_suffix if label_suffix is not None else _(':')\n         self.empty_permitted = empty_permitted\n@@ -149,7 +149,9 @@ class BaseForm(RenderableFormMixin):\n         return '%s-%s' % (self.prefix, field_name) if self.prefix else field_name\n \n     def add_initial_prefix(self, field_name):\n-        \"\"\"Add an 'initial' prefix for checking dynamic initial values.\"\"\"\n+        if field_name in self.initial and callable(self.initial[field_name]):\n+            self.initial[field_name] = self.initial[field_name]()\n+        \"Add an 'initial' prefix for checking dynamic initial values.\"\n         return 'initial-%s' % self.add_prefix(field_name)\n \n     def _widget_data_value(self, widget, html_name):\n", "normalized_occurrence": 1}
