{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..24956f7 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -496,6 +496,36 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Special handling for kbd role\n+            text = node.astext()\n+            if any(sep in text for sep in '-+^'):\n+                # Handle compound keystrokes\n+                keys = []\n+                current = ''\n+                in_special = False\n+                for char in text:\n+                    if char in '-+^' and not in_special:\n+                        if current:\n+                            keys.append(current)\n+                        keys.append(char)\n+                        current = ''\n+                    else:\n+                        if char == '\\\\':\n+                            in_special = True\n+                        else:\n+                            current += char\n+                            in_special = False\n+                if current:\n+                    keys.append(current)\n+                \n+                # Filter out empty keys and wrap each key in kbd\n+                keys = [k for k in keys if k.strip()]\n+                for i, key in enumerate(keys):\n+                    if i > 0:\n+                        self.body.append(keys[i-1] if keys[i-1] in '-+^' else '+')\n+                    if key not in '-+^':\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(key))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -841,4 +871,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..c742afa 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -447,6 +447,36 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Special handling for kbd role\n+            text = node.astext()\n+            if any(sep in text for sep in '-+^'):\n+                # Handle compound keystrokes\n+                keys = []\n+                current = ''\n+                in_special = False\n+                for char in text:\n+                    if char in '-+^' and not in_special:\n+                        if current:\n+                            keys.append(current)\n+                        keys.append(char)\n+                        current = ''\n+                    else:\n+                        if char == '\\\\':\n+                            in_special = True\n+                        else:\n+                            current += char\n+                            in_special = False\n+                if current:\n+                    keys.append(current)\n+                \n+                # Filter out empty keys and wrap each key in kbd\n+                keys = [k for k in keys if k.strip()]\n+                for i, key in enumerate(keys):\n+                    if i > 0:\n+                        self.body.append(keys[i-1] if keys[i-1] in '-+^' else '+')\n+                    if key not in '-+^':\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(key))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -789,4 +819,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..41972a0 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,31 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in '-+^')):\n+                keys = []\n+                current = ''\n+                in_special = False\n+                for char in text:\n+                    if char in '-+^' and (not in_special):\n+                        if current:\n+                            keys.append(current)\n+                        keys.append(char)\n+                        current = ''\n+                    elif char == '\\\\':\n+                        in_special = True\n+                    else:\n+                        current += char\n+                        in_special = False\n+                if current:\n+                    keys.append(current)\n+                keys = [k for k in keys if k.strip()]\n+                for i, key in enumerate(keys):\n+                    if i > 0:\n+                        self.body.append(keys[i - 1] if keys[i - 1] in '-+^' else '+')\n+                    if key not in '-+^':\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(key))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..c7b9b74 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,31 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in '-+^')):\n+                keys = []\n+                current = ''\n+                in_special = False\n+                for char in text:\n+                    if char in '-+^' and (not in_special):\n+                        if current:\n+                            keys.append(current)\n+                        keys.append(char)\n+                        current = ''\n+                    elif char == '\\\\':\n+                        in_special = True\n+                    else:\n+                        current += char\n+                        in_special = False\n+                if current:\n+                    keys.append(current)\n+                keys = [k for k in keys if k.strip()]\n+                for i, key in enumerate(keys):\n+                    if i > 0:\n+                        self.body.append(keys[i - 1] if keys[i - 1] in '-+^' else '+')\n+                    if key not in '-+^':\n+                        self.body.append('<kbd class=\"compound-key\">%s</kbd>' % self.encode(key))\n+                raise nodes.SkipNode\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
