{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..e7333cf 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -60,10 +60,19 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n \n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            if not isinstance(other, Q):\n+                raise TypeError(other)\n+            # XOR should result in true if an odd number of conditions are true\n+            combined = Q()\n+            for child in self.children + other.children:\n+                combined = (combined & ~Q(child)) | (~combined & Q(child))\n+            return combined\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n \n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..4595822 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -27,10 +27,18 @@ class Q(tree.Node):\n             return other.copy()\n         if not other and isinstance(other, Q):\n             return self.copy()\n-        obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n-        return obj\n+        if conn == self.XOR:\n+            if not isinstance(other, Q):\n+                raise TypeError(other)\n+            combined = Q()\n+            for child in self.children + other.children:\n+                combined = combined & ~Q(child) | ~combined & Q(child)\n+            return combined\n+        else:\n+            obj = self.create(connector=conn)\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n+            return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n     def __and__(self, other):\n", "normalized_occurrence": 1}
