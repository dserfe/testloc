{"model_name_or_path": "agentless", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..5a6ae01 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -228,22 +228,30 @@ class HashedFilesMixin:\n         ]\n         # Do a single pass first. Post-process all files once, then repeat for\n         # adjustable files.\n+        processed_files = set()\n+        \n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            processed_files.add((name, hashed_name, processed))\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n+            current_files = set()\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                current_files.add((name, hashed_name, processed))\n                 substitutions = substitutions or subst\n \n+            processed_files.update(current_files)\n+\n             if not substitutions:\n                 break\n \n         if substitutions:\n-            yield 'All', None, RuntimeError('Max post-process passes exceeded.')\n+            processed_files.add(('All', None, RuntimeError('Max post-process passes exceeded.')))\n+\n+        for name, hashed_name, processed in processed_files:\n+            yield name, hashed_name, processed\n \n         # Store the processed paths\n         self.hashed_files.update(hashed_files)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..26006f0 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -126,18 +126,23 @@ class HashedFilesMixin:\n             return\n         hashed_files = {}\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n+        processed_files = set()\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield (name, hashed_name, processed)\n+            processed_files.add((name, hashed_name, processed))\n         paths = {path: paths[path] for path in adjustable_paths}\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n+            current_files = set()\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n+                current_files.add((name, hashed_name, processed))\n                 substitutions = substitutions or subst\n+            processed_files.update(current_files)\n             if not substitutions:\n                 break\n         if substitutions:\n-            yield ('All', None, RuntimeError('Max post-process passes exceeded.'))\n+            processed_files.add(('All', None, RuntimeError('Max post-process passes exceeded.')))\n+        for name, hashed_name, processed in processed_files:\n+            yield (name, hashed_name, processed)\n         self.hashed_files.update(hashed_files)\n     def _post_process(self, paths, adjustable_paths, hashed_files):\n         def path_level(name):\n", "normalized_occurrence": 1}
