{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..9a9820e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,16 +234,24 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        from sympy import Integer\n+        \n+        row_start = Integer(0)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_end = row_start + numrows\n+            if row_start <= i < row_end:\n+                i = i - row_start\n                 break\n-            else:\n-                i -= numrows\n+            row_start = row_end\n+        \n+        col_start = Integer(0)\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_end = col_start + numcols\n+            if col_start <= j < col_end:\n+                j = j - col_start\n                 break\n-            else:\n-                j -= numcols\n+            col_start = col_end\n+        \n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..d95f9d1 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,21 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Integer\n+        row_start = Integer(0)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            row_end = row_start + numrows\n+            if row_start <= i < row_end:\n+                i = i - row_start\n                 break\n-            else:\n-                i -= numrows\n+            row_start = row_end\n+        col_start = Integer(0)\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            col_end = col_start + numcols\n+            if col_start <= j < col_end:\n+                j = j - col_start\n                 break\n-            else:\n-                j -= numcols\n+            col_start = col_end\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
