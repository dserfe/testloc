{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 80fea06..c9565ff 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -111,7 +111,11 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n                     Xi = Xi.copy()\n-                    Xi[~valid_mask] = self.categories_[i][0]\n+                    max_length = max(len(str(item)) for item in Xi)\n+                    longest_category = max(self.categories_[i], key=len)\n+                    if len(longest_category) > max_length:\n+                        Xi = Xi.astype(object)\n+                    Xi[~valid_mask] = longest_category\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 8703749..544f7b7 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -64,7 +64,11 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                 else:\n                     X_mask[:, i] = valid_mask\n                     Xi = Xi.copy()\n-                    Xi[~valid_mask] = self.categories_[i][0]\n+                    max_length = max((len(str(item)) for item in Xi))\n+                    longest_category = max(self.categories_[i], key=len)\n+                    if len(longest_category) > max_length:\n+                        Xi = Xi.astype(object)\n+                    Xi[~valid_mask] = longest_category\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n         return (X_int, X_mask)\n", "normalized_occurrence": 1}
