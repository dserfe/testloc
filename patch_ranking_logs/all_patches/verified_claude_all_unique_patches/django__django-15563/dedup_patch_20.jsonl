{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..e4707f1 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,14 +987,31 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        # Clear any annotations so that they won't be present in subqueries.\n-        query.annotations = {}\n+        \n+        # Handle multi-table inheritance by updating each parent table separately\n+        model = self.model\n+        updated_rows = 0\n+        fields_by_model = {}\n+        \n+        # Group fields by their model\n+        for name, value in kwargs.items():\n+            field = model._meta.get_field(name)\n+            model_for_field = field.model\n+            if model_for_field == model:\n+                model_for_field = field.concrete_model\n+            fields_by_model.setdefault(model_for_field, {}).update({name: value})\n+        \n+        # Update each parent model's table\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            for parent_model, fields in fields_by_model.items():\n+                if fields:\n+                    query = self.query.chain(sql.UpdateQuery)\n+                    query.add_update_values(fields)\n+                    query.annotations = {}\n+                    updated_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+        \n         self._result_cache = None\n-        return rows\n+        return updated_rows\n \n     update.alters_data = True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..bdc4681 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,13 +532,24 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n-        query.add_update_values(kwargs)\n-        query.annotations = {}\n+        model = self.model\n+        updated_rows = 0\n+        fields_by_model = {}\n+        for name, value in kwargs.items():\n+            field = model._meta.get_field(name)\n+            model_for_field = field.model\n+            if model_for_field == model:\n+                model_for_field = field.concrete_model\n+            fields_by_model.setdefault(model_for_field, {}).update({name: value})\n         with transaction.mark_for_rollback_on_error(using=self.db):\n-            rows = query.get_compiler(self.db).execute_sql(CURSOR)\n+            for parent_model, fields in fields_by_model.items():\n+                if fields:\n+                    query = self.query.chain(sql.UpdateQuery)\n+                    query.add_update_values(fields)\n+                    query.annotations = {}\n+                    updated_rows = query.get_compiler(self.db).execute_sql(CURSOR)\n         self._result_cache = None\n-        return rows\n+        return updated_rows\n     update.alters_data = True\n     def _update(self, values):\n         if self.query.is_sliced:\n", "normalized_occurrence": 1}
