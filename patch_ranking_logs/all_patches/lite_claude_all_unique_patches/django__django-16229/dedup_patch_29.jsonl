{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..9e0a4bf 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -358,6 +358,17 @@ class BaseModelForm(BaseForm, AltersData):\n         # if initial was provided, it should override the values from instance\n         if initial is not None:\n             object_data.update(initial)\n+\n+        # Handle callable defaults for fields that are not in object_data\n+        opts = self._meta\n+        for f in opts.model._meta.fields:\n+            if f.name not in object_data and hasattr(f, 'default'):\n+                default = f.default\n+                if callable(default):\n+                    object_data[f.name] = default()\n+                elif default is not NOT_PROVIDED:\n+                    object_data[f.name] = default\n+\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..90b6fe9 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -150,6 +150,14 @@ class BaseModelForm(BaseForm, AltersData):\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n         if initial is not None:\n             object_data.update(initial)\n+        opts = self._meta\n+        for f in opts.model._meta.fields:\n+            if f.name not in object_data and hasattr(f, 'default'):\n+                default = f.default\n+                if callable(default):\n+                    object_data[f.name] = default()\n+                elif default is not NOT_PROVIDED:\n+                    object_data[f.name] = default\n         self._validate_unique = False\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n         for formfield in self.fields.values():\n", "normalized_occurrence": 1}
