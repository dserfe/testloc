{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..23ccf1b 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1075,11 +1075,14 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n \n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n+        expr = eval_expr(code, local_dict, global_dict)\n         # restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n-        return rv\n+        # Apply evaluate=False at the sympify level to handle relations properly\n+        if not evaluate:\n+            expr = sympify(expr, evaluate=False)\n+        return expr\n     except Exception as e:\n         # restore neutral definitions for names\n         for i in local_dict.pop(null, ()):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..a100299 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -513,10 +513,12 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n     if not evaluate:\n         code = compile(evaluateFalse(code), '<string>', 'eval')\n     try:\n-        rv = eval_expr(code, local_dict, global_dict)\n+        expr = eval_expr(code, local_dict, global_dict)\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n-        return rv\n+        if not evaluate:\n+            expr = sympify(expr, evaluate=False)\n+        return expr\n     except Exception as e:\n         for i in local_dict.pop(null, ()):\n             local_dict[i] = null\n", "normalized_occurrence": 1}
