{"model_name_or_path": "agentless", "instance_id": "django__django-11583", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex f44661f..9e60b9c 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -136,14 +136,18 @@ def iter_modules_and_files(modules, extra_files):\n     for filename in itertools.chain(sys_file_paths, extra_files):\n         if not filename:\n             continue\n-        path = Path(filename)\n-        try:\n-            resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            # The module could have been removed, don't fail loudly if this\n-            # is the case.\n+        if '\\x00' in filename:\n+            # Skip files with embedded null bytes in the path\n             continue\n-        results.add(resolved_path)\n+        else:\n+            path = Path(filename)\n+            try:\n+                resolved_path = path.resolve(strict=True).absolute()\n+            except FileNotFoundError:\n+                # The module could have been removed, don't fail loudly if this\n+                # is the case.\n+                continue\n+            results.add(resolved_path)\n     return frozenset(results)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex e37abac..01efc8e 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -90,12 +90,15 @@ def iter_modules_and_files(modules, extra_files):\n     for filename in itertools.chain(sys_file_paths, extra_files):\n         if not filename:\n             continue\n-        path = Path(filename)\n-        try:\n-            resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n+        if '\\x00' in filename:\n             continue\n-        results.add(resolved_path)\n+        else:\n+            path = Path(filename)\n+            try:\n+                resolved_path = path.resolve(strict=True).absolute()\n+            except FileNotFoundError:\n+                continue\n+            results.add(resolved_path)\n     return frozenset(results)\n @functools.lru_cache(maxsize=1)\n def common_roots(paths):\n", "normalized_occurrence": 2}
