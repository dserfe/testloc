{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..f333077 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1837,10 +1837,17 @@ class VariablesChecker(BaseChecker):\n             self._type_annotation_names.append(TYPING_MODULE)\n             return\n \n-        self._type_annotation_names.extend(\n-            annotation.name\n-            for annotation in type_annotation.nodes_of_class(astroid.Name)\n-        )\n+        # Handle both simple names and module parts of qualified names\n+        for node in type_annotation.nodes_of_class((astroid.Name, astroid.Attribute)):\n+            if isinstance(node, astroid.Name):\n+                self._type_annotation_names.append(node.name)\n+            elif isinstance(node, astroid.Attribute):\n+                # Get the module name for cases like 'abc.ABC'\n+                module_part = node\n+                while isinstance(module_part.expr, astroid.Attribute):\n+                    module_part = module_part.expr\n+                if isinstance(module_part.expr, astroid.Name):\n+                    self._type_annotation_names.append(module_part.expr.name)\n \n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..72a2765 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -687,7 +687,15 @@ class VariablesChecker(BaseChecker):\n         if isinstance(type_annotation.value, astroid.Attribute) and isinstance(type_annotation.value.expr, astroid.Name) and (type_annotation.value.expr.name == TYPING_MODULE):\n             self._type_annotation_names.append(TYPING_MODULE)\n             return\n-        self._type_annotation_names.extend((annotation.name for annotation in type_annotation.nodes_of_class(astroid.Name)))\n+        for node in type_annotation.nodes_of_class((astroid.Name, astroid.Attribute)):\n+            if isinstance(node, astroid.Name):\n+                self._type_annotation_names.append(node.name)\n+            elif isinstance(node, astroid.Attribute):\n+                module_part = node\n+                while isinstance(module_part.expr, astroid.Attribute):\n+                    module_part = module_part.expr\n+                if isinstance(module_part.expr, astroid.Name):\n+                    self._type_annotation_names.append(module_part.expr.name)\n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n         if not type_annotation:\n", "normalized_occurrence": 1}
