{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20488", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bbcae54..611a578 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1467,10 +1467,17 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n                 raise ValueError(\"vmin must be less or equal to vmax\")\n             if self.vmin == self.vmax:\n                 return np.full_like(value, 0)\n+            # Ensure vmin and vmax are positive for LogNorm\n+            if isinstance(self, LogNorm):\n+                if self.vmin <= 0 or self.vmax <= 0:\n+                    raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n             if clip is None:\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            # Apply masking to avoid invalid transformation on masked values\n+            if np.ma.is_masked(value):\n+                value = np.ma.masked_where(value <= 0, value)\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 8344e52..5b69aba 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1263,10 +1263,15 @@ def _make_norm_from_scale(scale_cls, base_norm_cls=None, *, init=None):\n                 raise ValueError('vmin must be less or equal to vmax')\n             if self.vmin == self.vmax:\n                 return np.full_like(value, 0)\n+            if isinstance(self, LogNorm):\n+                if self.vmin <= 0 or self.vmax <= 0:\n+                    raise ValueError('vmin and vmax must be positive for LogNorm')\n             if clip is None:\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            if np.ma.is_masked(value):\n+                value = np.ma.masked_where(value <= 0, value)\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n", "normalized_occurrence": 1}
