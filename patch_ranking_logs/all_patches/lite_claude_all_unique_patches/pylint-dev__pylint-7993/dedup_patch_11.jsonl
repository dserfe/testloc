{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7993", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 6c414e0..2b434da 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,15 +175,20 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        # Replace escaped braces with a temporary marker\n+        template_normalized = template.replace(\"{{\", \"__LEFT_BRACE__\").replace(\"}}\", \"__RIGHT_BRACE__\")\n+        # Find actual template arguments\n+        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template_normalized)\n+        # Restore escaped braces\n+        template_normalized = template_normalized.replace(\"__LEFT_BRACE__\", \"{{\").replace(\"__RIGHT_BRACE__\", \"}}\")\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n                     f\"Don't recognize the argument '{argument[0]}' in the --msg-template. \"\n                     \"Are you sure it is supported on the current version of pylint?\"\n                 )\n-                template = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template)\n-        self._fixed_template = template\n+                template_normalized = re.sub(r\"\\{\" + argument[0] + r\"(:.*?)?\\}\", \"\", template_normalized)\n+        self._fixed_template = template_normalized\n \n     def write_message(self, msg: Message) -> None:\n         \"\"\"Convenience method to write a formatted message with class default\n", "occurrence": 2, "normalized_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 3d6bc44..92eb533 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -66,12 +66,14 @@ class TextReporter(BaseReporter):\n         if template == self._template:\n             return\n         self._template = template\n-        arguments = re.findall('\\\\{(.+?)(:.*)?\\\\}', template)\n+        template_normalized = template.replace('{{', '__LEFT_BRACE__').replace('}}', '__RIGHT_BRACE__')\n+        arguments = re.findall('\\\\{(.+?)(:.*)?\\\\}', template_normalized)\n+        template_normalized = template_normalized.replace('__LEFT_BRACE__', '{{').replace('__RIGHT_BRACE__', '}}')\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(f\"Don't recognize the argument '{argument[0]}' in the --msg-template. Are you sure it is supported on the current version of pylint?\")\n-                template = re.sub('\\\\{' + argument[0] + '(:.*?)?\\\\}', '', template)\n-        self._fixed_template = template\n+                template_normalized = re.sub('\\\\{' + argument[0] + '(:.*?)?\\\\}', '', template_normalized)\n+        self._fixed_template = template_normalized\n     def write_message(self, msg: Message) -> None:\n         self_dict = asdict(msg)\n         for key in ('end_line', 'end_column'):\n", "normalized_occurrence": 2}
