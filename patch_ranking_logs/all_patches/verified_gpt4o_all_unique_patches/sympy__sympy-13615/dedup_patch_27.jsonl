{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..d1f901c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,8 +1933,8 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n+            syms = [m for m in self.args if m.is_Symbol]\n             if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n                 # Reals cannot contain elements other than numbers and symbols.\n \n                 intervals = []  # Build up a list of intervals between the elements\n@@ -1950,6 +1950,8 @@ class FiniteSet(Set, EvalfMixin):\n                     return Union(intervals, evaluate=False)\n             elif nums == []:\n                 return None\n+            else:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..76c8479 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,8 +842,8 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n+            syms = [m for m in self.args if m.is_Symbol]\n             if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n                 intervals = []\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n@@ -855,6 +855,8 @@ class FiniteSet(Set, EvalfMixin):\n                     return Union(intervals, evaluate=False)\n             elif nums == []:\n                 return None\n+            else:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
