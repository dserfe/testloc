{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21627", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex db125b2..c751dcf 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -264,6 +264,19 @@ class sinh(HyperbolicFunction):\n         arg = self.args[0]\n         return arg.is_finite\n \n+    def _eval_is_zero(self):\n+        from sympy import pi, I\n+        arg = self.args[0]\n+        # cosh(x) = 0 iff x = (2n+1)*pi*I/2 for integer n\n+        if arg.is_zero:\n+            return False\n+        if arg.is_imaginary:\n+            # Check if arg = (2n+1)*pi*I/2\n+            coeff = arg/(pi*I/2)\n+            if coeff.is_number:\n+                return fuzzy_and([coeff.is_integer, coeff.is_odd])\n+        return None\n+\n     def _eval_is_zero(self):\n         arg = self.args[0]\n         if arg.is_zero:\n@@ -499,6 +512,19 @@ class cosh(HyperbolicFunction):\n         arg = self.args[0]\n         return arg.is_finite\n \n+    def _eval_is_zero(self):\n+        from sympy import pi, I\n+        arg = self.args[0]\n+        # cosh(x) = 0 iff x = (2n+1)*pi*I/2 for integer n\n+        if arg.is_zero:\n+            return False\n+        if arg.is_imaginary:\n+            # Check if arg = (2n+1)*pi*I/2\n+            coeff = arg/(pi*I/2)\n+            if coeff.is_number:\n+                return fuzzy_and([coeff.is_integer, coeff.is_odd])\n+        return None\n+\n \n class tanh(HyperbolicFunction):\n     r\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n+    def _eval_is_zero(self):\n+        from sympy import pi, I\n+        arg = self.args[0]\n+        if arg.is_zero:\n+            return False\n+        if arg.is_imaginary:\n+            coeff = arg / (pi * I / 2)\n+            if coeff.is_number:\n+                return fuzzy_and([coeff.is_integer, coeff.is_odd])\n+        return None\n+    def _eval_is_zero(self):\n+        from sympy import pi, I\n+        arg = self.args[0]\n+        if arg.is_zero:\n+            return False\n+        if arg.is_imaginary:\n+            coeff = arg / (pi * I / 2)\n+            if coeff.is_number:\n+                return fuzzy_and([coeff.is_integer, coeff.is_odd])\n+        return None", "normalized_occurrence": 1}
