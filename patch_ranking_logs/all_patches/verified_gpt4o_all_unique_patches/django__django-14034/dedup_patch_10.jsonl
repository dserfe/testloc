{"model_name_or_path": "agentless", "instance_id": "django__django-14034", "model_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex b31d0ed..38920f5 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -1035,18 +1035,15 @@ class MultiValueField(Field):\n             except IndexError:\n                 field_value = None\n             if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    # Raise a 'required' error if the MultiValueField is\n-                    # required and any field is empty.\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    # Otherwise, add an 'incomplete' error to the list of\n-                    # collected errors and skip field cleaning, if a required\n-                    # field is empty.\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                if (self.require_all_fields and self.required) or field.required:\n+                    # Raise a 'required' error if the field is required and empty\n+                    if field_value in self.empty_values:\n+                        if field.required:\n+                            errors.append(field.error_messages['required'])\n+                        else:\n+                            if field.error_messages['incomplete'] not in errors:\n+                                errors.append(field.error_messages['incomplete'])\n+                        continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/fields.py b/django/forms/fields.py\nindex 8548471..b598d0d 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -602,13 +602,13 @@ class MultiValueField(Field):\n             except IndexError:\n                 field_value = None\n             if field_value in self.empty_values:\n-                if self.require_all_fields:\n-                    if self.required:\n-                        raise ValidationError(self.error_messages['required'], code='required')\n-                elif field.required:\n-                    if field.error_messages['incomplete'] not in errors:\n-                        errors.append(field.error_messages['incomplete'])\n-                    continue\n+                if self.require_all_fields and self.required or field.required:\n+                    if field_value in self.empty_values:\n+                        if field.required:\n+                            errors.append(field.error_messages['required'])\n+                        elif field.error_messages['incomplete'] not in errors:\n+                            errors.append(field.error_messages['incomplete'])\n+                        continue\n             try:\n                 clean_data.append(field.clean(field_value))\n             except ValidationError as e:\n", "normalized_occurrence": 1}
