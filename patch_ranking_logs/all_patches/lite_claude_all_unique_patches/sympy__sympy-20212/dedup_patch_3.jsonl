{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20212", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0c22eee..083aa75 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -299,6 +299,8 @@ class Pow(Expr):\n                 return b\n             elif e == -1 and not b:\n                 return S.ComplexInfinity\n+            elif b is S.Zero and e.is_extended_negative and e.is_infinite:\n+                return S.ComplexInfinity\n             # Only perform autosimplification if exponent or base is a Symbol or number\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and\\\n                 e.is_integer and _coeff_isneg(b):\n@@ -1742,4 +1744,4 @@ power.add((object, object), Pow)\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex a771c39..373171e 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -122,6 +122,8 @@ class Pow(Expr):\n                 return b\n             elif e == -1 and (not b):\n                 return S.ComplexInfinity\n+            elif b is S.Zero and e.is_extended_negative and e.is_infinite:\n+                return S.ComplexInfinity\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n", "normalized_occurrence": 1}
