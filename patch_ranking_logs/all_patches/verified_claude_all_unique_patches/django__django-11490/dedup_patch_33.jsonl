{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11490", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 149db6f..f248cc2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2027,40 +2027,7 @@ class Query(BaseExpression):\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n \n-    def set_values(self, fields):\n-        self.select_related = False\n-        self.clear_deferred_loading()\n-        self.clear_select_fields()\n-\n-        if self.group_by is True:\n-            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n-            self.set_group_by()\n-            self.clear_select_fields()\n-\n-        if fields:\n-            field_names = []\n-            extra_names = []\n-            annotation_names = []\n-            if not self.extra and not self.annotations:\n-                # Shortcut - if there are no extra or annotations, then\n-                # the values() clause must be just field names.\n-                field_names = list(fields)\n-            else:\n-                self.default_cols = False\n-                for f in fields:\n-                    if f in self.extra_select:\n-                        extra_names.append(f)\n-                    elif f in self.annotation_select:\n-                        annotation_names.append(f)\n-                    else:\n-                        field_names.append(f)\n-            self.set_extra_mask(extra_names)\n-            self.set_annotation_mask(annotation_names)\n-        else:\n-            field_names = [f.attname for f in self.model._meta.concrete_fields]\n \n-        self.values_select = tuple(field_names)\n-        self.add_fields(field_names, True)\n \n     @property\n     def annotation_select(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 7f0f5f1..c63b11a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1079,35 +1079,6 @@ class Query(BaseExpression):\n         else:\n             self.extra_select_mask = set(names)\n         self._extra_select_cache = None\n-    def set_values(self, fields):\n-        self.select_related = False\n-        self.clear_deferred_loading()\n-        self.clear_select_fields()\n-        if self.group_by is True:\n-            self.add_fields((f.attname for f in self.model._meta.concrete_fields), False)\n-            self.set_group_by()\n-            self.clear_select_fields()\n-        if fields:\n-            field_names = []\n-            extra_names = []\n-            annotation_names = []\n-            if not self.extra and (not self.annotations):\n-                field_names = list(fields)\n-            else:\n-                self.default_cols = False\n-                for f in fields:\n-                    if f in self.extra_select:\n-                        extra_names.append(f)\n-                    elif f in self.annotation_select:\n-                        annotation_names.append(f)\n-                    else:\n-                        field_names.append(f)\n-            self.set_extra_mask(extra_names)\n-            self.set_annotation_mask(annotation_names)\n-        else:\n-            field_names = [f.attname for f in self.model._meta.concrete_fields]\n-        self.values_select = tuple(field_names)\n-        self.add_fields(field_names, True)\n     @property\n     def annotation_select(self):\n         if self._annotation_select_cache is not None:\n", "normalized_occurrence": 1}
