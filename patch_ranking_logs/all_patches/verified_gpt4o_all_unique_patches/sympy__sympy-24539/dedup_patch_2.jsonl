{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24539", "model_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 8995407..219b5c4 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -612,16 +612,16 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n         elif self.ring.symbols != new_ring.symbols:\n             terms = list(zip(*_dict_reorder(self, self.ring.symbols, new_ring.symbols)))\n             return new_ring.from_terms(terms, self.ring.domain)\n-        else:\n+        elif not symbols:\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        elif not symbols:\n             symbols = self.ring.symbols\n \n-        return expr_from_dict(self.as_expr_dict(), *symbols)\n+        return expr_from_dict(self.as_expr_dict(), *self.ring.symbols)\n \n     def as_expr_dict(self):\n         to_sympy = self.ring.domain.to_sympy\n", "occurrence": 3, "normalized_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 082d6a9..7ee8c69 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -334,14 +334,14 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n         elif self.ring.symbols != new_ring.symbols:\n             terms = list(zip(*_dict_reorder(self, self.ring.symbols, new_ring.symbols)))\n             return new_ring.from_terms(terms, self.ring.domain)\n-        else:\n+        elif not symbols:\n             return new_ring.from_dict(self, self.ring.domain)\n     def as_expr(self, *symbols):\n         if symbols and len(symbols) != self.ring.ngens:\n             raise ValueError('not enough symbols, expected %s got %s' % (self.ring.ngens, len(symbols)))\n-        else:\n+        elif not symbols:\n             symbols = self.ring.symbols\n-        return expr_from_dict(self.as_expr_dict(), *symbols)\n+        return expr_from_dict(self.as_expr_dict(), *self.ring.symbols)\n     def as_expr_dict(self):\n         to_sympy = self.ring.domain.to_sympy\n         return {monom: to_sympy(coeff) for monom, coeff in self.iterterms()}\n", "normalized_occurrence": 3}
