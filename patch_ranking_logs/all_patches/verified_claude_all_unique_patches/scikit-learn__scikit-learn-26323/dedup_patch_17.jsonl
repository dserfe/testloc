{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..851fb4c 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -293,13 +293,18 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             Estimator instance.\n         \"\"\"\n         super().set_output(transform=transform)\n-        transformers = (\n+        # Get all transformers including remainder if it's an estimator\n+        transformers = [\n             trans\n             for _, trans, _ in chain(\n                 self.transformers, getattr(self, \"transformers_\", [])\n             )\n             if trans not in {\"passthrough\", \"drop\"}\n-        )\n+        ]\n+        remainder = getattr(self, \"remainder\", \"drop\")\n+        if remainder not in {\"passthrough\", \"drop\"}:\n+            transformers.append(remainder)\n+\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..c58151d 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -44,7 +44,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             self.transformers = value\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n-        transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n+        transformers = [trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'}]\n+        remainder = getattr(self, 'remainder', 'drop')\n+        if remainder not in {'passthrough', 'drop'}:\n+            transformers.append(remainder)\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n         return self\n", "normalized_occurrence": 3}
