{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10466", "model_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex c138802..65f3fa8 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -50,10 +50,12 @@ class Catalog:\n             # Nodes that are replicated like todo don't have a uid,\n             # however i18n is also unnecessary.\n             return\n+        entry = (origin.source, origin.line, origin.uid)  # type: ignore\n         if msg not in self.metadata:  # faster lookup in hash\n             self.messages.append(msg)\n             self.metadata[msg] = []\n-        self.metadata[msg].append((origin.source, origin.line, origin.uid))  # type: ignore\n+        if entry not in self.metadata[msg]:  # prevent duplicate entries\n+            self.metadata[msg].append(entry)\n \n     def __iter__(self) -> Generator[Message, None, None]:\n         for message in self.messages:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/gettext.py b/sphinx/builders/gettext.py\nindex 906ebf1..c282703 100644\n--- a/sphinx/builders/gettext.py\n+++ b/sphinx/builders/gettext.py\n@@ -33,10 +33,12 @@ class Catalog:\n     def add(self, msg: str, origin: Union[Element, 'MsgOrigin']) -> None:\n         if not hasattr(origin, 'uid'):\n             return\n+        entry = (origin.source, origin.line, origin.uid)\n         if msg not in self.metadata:\n             self.messages.append(msg)\n             self.metadata[msg] = []\n-        self.metadata[msg].append((origin.source, origin.line, origin.uid))\n+        if entry not in self.metadata[msg]:\n+            self.metadata[msg].append(entry)\n     def __iter__(self) -> Generator[Message, None, None]:\n         for message in self.messages:\n             positions = [(source, line) for source, line, uuid in self.metadata[message]]\n", "normalized_occurrence": 1}
