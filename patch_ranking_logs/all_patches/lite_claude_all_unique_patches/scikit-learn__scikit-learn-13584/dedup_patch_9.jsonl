{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 73c394e..6234b86 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -235,10 +235,24 @@ class BaseEstimator:\n \n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n \n         N_CHAR_MAX = 700  # number of non-whitespace or newline chars\n         N_MAX_ELEMENTS_TO_SHOW = 30  # number of elements to show in sequences\n \n+        # Convert numpy arrays to lists for safe printing\n+        params = self.get_params()\n+        safe_params = {}\n+        for key, value in params.items():\n+            if isinstance(value, np.ndarray):\n+                safe_params[key] = value.tolist()\n+            else:\n+                safe_params[key] = value\n+        \n+        # Temporarily replace parameters with safe versions\n+        original_params = self.get_params()\n+        self.set_params(**safe_params)\n+\n         # use ellipsis for sequences with a lot of elements\n         pp = _EstimatorPrettyPrinter(\n             compact=True, indent=1, indent_at_name=True,\n@@ -246,6 +260,9 @@ class BaseEstimator:\n \n         repr_ = pp.pformat(self)\n \n+        # Restore original parameters\n+        self.set_params(**original_params)\n+\n         # Use bruteforce ellipsis if string is very long\n         if len(''.join(repr_.split())) > N_CHAR_MAX:  # check non-blank chars\n             lim = N_CHAR_MAX // 2\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/base.py b/sklearn/base.py\nindex 64d90d3..9cf96d5 100644\n--- a/sklearn/base.py\n+++ b/sklearn/base.py\n@@ -101,10 +101,21 @@ class BaseEstimator:\n         return self\n     def __repr__(self):\n         from .utils._pprint import _EstimatorPrettyPrinter\n+        import numpy as np\n         N_CHAR_MAX = 700\n         N_MAX_ELEMENTS_TO_SHOW = 30\n+        params = self.get_params()\n+        safe_params = {}\n+        for key, value in params.items():\n+            if isinstance(value, np.ndarray):\n+                safe_params[key] = value.tolist()\n+            else:\n+                safe_params[key] = value\n+        original_params = self.get_params()\n+        self.set_params(**safe_params)\n         pp = _EstimatorPrettyPrinter(compact=True, indent=1, indent_at_name=True, n_max_elements_to_show=N_MAX_ELEMENTS_TO_SHOW)\n         repr_ = pp.pformat(self)\n+        self.set_params(**original_params)\n         if len(''.join(repr_.split())) > N_CHAR_MAX:\n             lim = N_CHAR_MAX // 2\n             repr_ = repr_[:lim] + '...' + repr_[-lim:]\n", "normalized_occurrence": 1}
