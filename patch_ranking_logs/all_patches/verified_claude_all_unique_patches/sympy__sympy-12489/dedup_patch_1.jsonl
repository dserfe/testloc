{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12489", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 007fa70..0ba1b1d 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -857,21 +857,23 @@ class Permutation(Basic):\n         #g) (Permutation) = adjust size or return copy\n         ok = True\n         if not args:  # a\n-            return _af_new(list(range(size or 0)))\n+            perm = list(range(size or 0))\n         elif len(args) > 1:  # c\n-            return _af_new(Cycle(*args).list(size))\n-        if len(args) == 1:\n+            perm = Cycle(*args).list(size)\n+        elif len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):  # g\n                 if size is None or size == a.size:\n                     return a\n-                return Perm(a.array_form, size=size)\n+                return cls(a.array_form, size=size)\n             if isinstance(a, Cycle):  # f\n-                return _af_new(a.list(size))\n-            if not is_sequence(a):  # b\n-                return _af_new(list(range(a + 1)))\n-            if has_variety(is_sequence(ai) for ai in a):\n+                perm = a.list(size)\n+            elif not is_sequence(a):  # b\n+                perm = list(range(a + 1))\n+            elif has_variety(is_sequence(ai) for ai in a):\n                 ok = False\n+            else:\n+                perm = None  # Will be set later\n         else:\n             ok = False\n         if not ok:\n@@ -924,31 +926,6 @@ class Permutation(Basic):\n         obj._size = size\n         return obj\n \n-    @staticmethod\n-    def _af_new(perm):\n-        \"\"\"A method to produce a Permutation object from a list;\n-        the list is bound to the _array_form attribute, so it must\n-        not be modified; this method is meant for internal use only;\n-        the list ``a`` is supposed to be generated as a temporary value\n-        in a method, so p = Perm._af_new(a) is the only object\n-        to hold a reference to ``a``::\n-\n-        Examples\n-        ========\n-\n-        >>> from sympy.combinatorics.permutations import Perm\n-        >>> Perm.print_cyclic = False\n-        >>> a = [2,1,3,0]\n-        >>> p = Perm._af_new(a)\n-        >>> p\n-        Permutation([2, 1, 3, 0])\n-\n-        \"\"\"\n-        p = Basic.__new__(Perm, perm)\n-        p._array_form = perm\n-        p._size = len(perm)\n-        return p\n-\n     def _hashable_content(self):\n         # the array_form (a list) is the Permutation arg, so we need to\n         # return a tuple, instead\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 83aa418..c1b28c2 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -168,21 +168,23 @@ class Permutation(Basic):\n             size = int(size)\n         ok = True\n         if not args:\n-            return _af_new(list(range(size or 0)))\n+            perm = list(range(size or 0))\n         elif len(args) > 1:\n-            return _af_new(Cycle(*args).list(size))\n-        if len(args) == 1:\n+            perm = Cycle(*args).list(size)\n+        elif len(args) == 1:\n             a = args[0]\n             if isinstance(a, Perm):\n                 if size is None or size == a.size:\n                     return a\n-                return Perm(a.array_form, size=size)\n+                return cls(a.array_form, size=size)\n             if isinstance(a, Cycle):\n-                return _af_new(a.list(size))\n-            if not is_sequence(a):\n-                return _af_new(list(range(a + 1)))\n-            if has_variety((is_sequence(ai) for ai in a)):\n+                perm = a.list(size)\n+            elif not is_sequence(a):\n+                perm = list(range(a + 1))\n+            elif has_variety((is_sequence(ai) for ai in a)):\n                 ok = False\n+            else:\n+                perm = None\n         else:\n             ok = False\n         if not ok:\n@@ -213,12 +215,6 @@ class Permutation(Basic):\n         obj._array_form = aform\n         obj._size = size\n         return obj\n-    @staticmethod\n-    def _af_new(perm):\n-        p = Basic.__new__(Perm, perm)\n-        p._array_form = perm\n-        p._size = len(perm)\n-        return p\n     def _hashable_content(self):\n         return tuple(self.array_form)\n     @property\n", "normalized_occurrence": 1}
