{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex da040b3..ea8f77a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -106,6 +106,8 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n                         refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n \n \n+from enum import Enum\n+\n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n     def unparse(node: ast.AST) -> List[Node]:\n@@ -121,6 +123,9 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod\n         elif isinstance(node, ast.Constant):  # type: ignore\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', \"...\")]\n+            elif hasattr(node.value, '__module__') and isinstance(node.value, Enum):\n+                # Handle Enum values specially to show just the enum member path\n+                return [nodes.Text(f\"{node.value.__class__.__name__}.{node.value.name}\")]\n             else:\n                 return [nodes.Text(node.value)]\n         elif isinstance(node, ast.Expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 5b8a917..247e12b 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -56,6 +56,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         contnodes = [nodes.Text(text)]\n     return pending_xref('', *contnodes, refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+from enum import Enum\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -70,6 +71,8 @@ def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]\n         elif isinstance(node, ast.Constant):\n             if node.value is Ellipsis:\n                 return [addnodes.desc_sig_punctuation('', '...')]\n+            elif hasattr(node.value, '__module__') and isinstance(node.value, Enum):\n+                return [nodes.Text(f'{node.value.__class__.__name__}.{node.value.name}')]\n             else:\n                 return [nodes.Text(node.value)]\n         elif isinstance(node, ast.Expr):\n", "normalized_occurrence": 2}
