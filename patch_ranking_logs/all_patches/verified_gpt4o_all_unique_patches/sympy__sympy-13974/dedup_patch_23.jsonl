{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..d10e5ab 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -254,8 +254,12 @@ class TensorProduct(Expr):\n \n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        elif isinstance(args[i], Mul):\n+            base, exp = args[i].as_base_exp()\n+            if isinstance(base, TensorProduct):\n+                expanded_base = base._eval_expand_tensorproduct()\n+                return TensorProduct(*expanded_base.args) ** exp\n+        return self\n \n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..bedcbf1 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -122,8 +122,12 @@ class TensorProduct(Expr):\n                 break\n         if add_args:\n             return Add(*add_args)\n-        else:\n-            return self\n+        elif isinstance(args[i], Mul):\n+            base, exp = args[i].as_base_exp()\n+            if isinstance(base, TensorProduct):\n+                expanded_base = base._eval_expand_tensorproduct()\n+                return TensorProduct(*expanded_base.args) ** exp\n+        return self\n     def _eval_trace(self, **kwargs):\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n", "normalized_occurrence": 1}
