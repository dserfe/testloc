{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..29dc15c 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1725,28 +1725,31 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             # This is something that numpy can not make heads or tails\n             # of, assume \"finite\"\n             return True\n-    if skip_nonfinite is False:\n-        if isinstance(obj, collections.abc.Iterator):\n-            # needed to accept `array.flat` as input.\n-            # np.flatiter reports as an instance of collections.Iterator\n-            # but can still be indexed via [].\n-            # This has the side effect of re-setting the iterator, but\n-            # that is acceptable.\n-            try:\n-                return obj[0]\n-            except TypeError:\n-                pass\n-            raise RuntimeError(\"matplotlib does not support generators \"\n-                               \"as input\")\n-        return next(iter(obj))\n-    elif isinstance(obj, np.flatiter):\n-        # TODO do the finite filtering on this\n-        return obj[0]\n-    elif isinstance(obj, collections.abc.Iterator):\n-        raise RuntimeError(\"matplotlib does not \"\n-                           \"support generators as input\")\n-    else:\n-        return next(val for val in obj if safe_isfinite(val))\n+    try:\n+        if skip_nonfinite is False:\n+            if isinstance(obj, collections.abc.Iterator):\n+                # needed to accept `array.flat` as input.\n+                # np.flatiter reports as an instance of collections.Iterator\n+                # but can still be indexed via [].\n+                # This has the side effect of re-setting the iterator, but\n+                # that is acceptable.\n+                try:\n+                    return obj[0]\n+                except TypeError:\n+                    pass\n+                raise RuntimeError(\"matplotlib does not support generators \"\n+                                   \"as input\")\n+            return next(iter(obj))\n+        elif isinstance(obj, np.flatiter):\n+            # TODO do the finite filtering on this\n+            return obj[0]\n+        elif isinstance(obj, collections.abc.Iterator):\n+            raise RuntimeError(\"matplotlib does not \"\n+                               \"support generators as input\")\n+        else:\n+            return next(val for val in obj if safe_isfinite(val))\n+    except StopIteration:\n+        return np.nan\n \n \n def sanitize_sequence(data):\n", "occurrence": 2, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..2dc57a6 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -737,20 +737,23 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             return np.isfinite(val) if np.isscalar(val) else True\n         except TypeError:\n             return True\n-    if skip_nonfinite is False:\n-        if isinstance(obj, collections.abc.Iterator):\n-            try:\n-                return obj[0]\n-            except TypeError:\n-                pass\n+    try:\n+        if skip_nonfinite is False:\n+            if isinstance(obj, collections.abc.Iterator):\n+                try:\n+                    return obj[0]\n+                except TypeError:\n+                    pass\n+                raise RuntimeError('matplotlib does not support generators as input')\n+            return next(iter(obj))\n+        elif isinstance(obj, np.flatiter):\n+            return obj[0]\n+        elif isinstance(obj, collections.abc.Iterator):\n             raise RuntimeError('matplotlib does not support generators as input')\n-        return next(iter(obj))\n-    elif isinstance(obj, np.flatiter):\n-        return obj[0]\n-    elif isinstance(obj, collections.abc.Iterator):\n-        raise RuntimeError('matplotlib does not support generators as input')\n-    else:\n-        return next((val for val in obj if safe_isfinite(val)))\n+        else:\n+            return next((val for val in obj if safe_isfinite(val)))\n+    except StopIteration:\n+        return np.nan\n def sanitize_sequence(data):\n     return list(data) if isinstance(data, collections.abc.MappingView) else data\n def normalize_kwargs(kw, alias_mapping=None):\n", "normalized_occurrence": 2}
