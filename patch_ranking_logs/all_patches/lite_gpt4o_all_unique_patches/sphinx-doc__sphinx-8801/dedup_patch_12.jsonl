{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 9e67bb6..828af92 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -656,7 +656,8 @@ class Documenter:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, [(m.name, m.value) for m in members.values()]\n+            return False, [(m.name, m.value) for m in members.values()\n+                           if m.directly_defined or isinstance(m.value, INSTANCEATTR)]\n         else:\n             return False, [(m.name, m.value) for m in members.values()\n                            if m.directly_defined]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex e1d3d5c..e2072e1 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -341,7 +341,7 @@ class Documenter:\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, [(m.name, m.value) for m in members.values()])\n+            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined or isinstance(m.value, INSTANCEATTR)])\n         else:\n             return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n", "normalized_occurrence": 1}
