{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13496", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 17608bc..bc885b6 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -117,6 +117,11 @@ class IsolationForest(BaseBagging, OutlierMixin):\n         If None, the random number generator is the RandomState instance used\n         by `np.random`.\n \n+    warm_start : bool, optional (default=False)\n+        When set to ``True``, reuse the solution of the previous call to fit\n+        and add more estimators to the ensemble, otherwise, just fit a whole\n+        new forest. See :term:`the Glossary <warm_start>`.\n+\n     verbose : int, optional (default=0)\n         Controls the verbosity of the tree building process.\n \n@@ -172,6 +177,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  bootstrap=False,\n                  n_jobs=None,\n                  behaviour='old',\n+                 warm_start=False,\n                  random_state=None,\n                  verbose=0):\n         super().__init__(\n@@ -183,6 +189,7 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             bootstrap=bootstrap,\n             bootstrap_features=False,\n             n_estimators=n_estimators,\n+            warm_start=warm_start,\n             max_samples=max_samples,\n             max_features=max_features,\n             n_jobs=n_jobs,\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 3ca6fb5..7fa3bdb 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -11,8 +11,8 @@ from .bagging import BaseBagging\n __all__ = ['IsolationForest']\n INTEGER_TYPES = (numbers.Integral, np.integer)\n class IsolationForest(BaseBagging, OutlierMixin):\n-    def __init__(self, n_estimators=100, max_samples='auto', contamination='legacy', max_features=1.0, bootstrap=False, n_jobs=None, behaviour='old', random_state=None, verbose=0):\n-        super().__init__(base_estimator=ExtraTreeRegressor(max_features=1, splitter='random', random_state=random_state), bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)\n+    def __init__(self, n_estimators=100, max_samples='auto', contamination='legacy', max_features=1.0, bootstrap=False, n_jobs=None, behaviour='old', warm_start=False, random_state=None, verbose=0):\n+        super().__init__(base_estimator=ExtraTreeRegressor(max_features=1, splitter='random', random_state=random_state), bootstrap=bootstrap, bootstrap_features=False, n_estimators=n_estimators, warm_start=warm_start, max_samples=max_samples, max_features=max_features, n_jobs=n_jobs, random_state=random_state, verbose=verbose)\n         self.behaviour = behaviour\n         self.contamination = contamination\n     def _set_oob_score(self, X, y):\n", "normalized_occurrence": 2}
