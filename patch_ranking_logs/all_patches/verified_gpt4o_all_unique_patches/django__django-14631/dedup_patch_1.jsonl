{"model_name_or_path": "agentless", "instance_id": "django__django-14631", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 2c0336e..20c5cc3 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -391,7 +391,7 @@ class BaseForm:\n             if field.disabled:\n                 value = self.get_initial_for_field(field, name)\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = self[name].data\n             try:\n                 if isinstance(field, FileField):\n                     initial = self.get_initial_for_field(field, name)\n@@ -438,23 +438,8 @@ class BaseForm:\n     def changed_data(self):\n         data = []\n         for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                # Use the BoundField's initial as this is the value passed to\n-                # the widget.\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(\n-                        self._widget_data_value(hidden_widget, initial_prefixed_name)\n-                    )\n-                except ValidationError:\n-                    # Always assume data has changed if validation fails.\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n+            bf = self[name]\n+            if bf._did_change():\n                 data.append(name)\n         return data\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex f8959b2..2847cc3 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -275,7 +275,7 @@ class BaseForm:\n             if field.disabled:\n                 value = self.get_initial_for_field(field, name)\n             else:\n-                value = self._field_data_value(field, self.add_prefix(name))\n+                value = self[name].data\n             try:\n                 if isinstance(field, FileField):\n                     initial = self.get_initial_for_field(field, name)\n@@ -322,18 +322,8 @@ class BaseForm:\n     def changed_data(self):\n         data = []\n         for name, field in self.fields.items():\n-            data_value = self._field_data_value(field, self.add_prefix(name))\n-            if not field.show_hidden_initial:\n-                initial_value = self[name].initial\n-            else:\n-                initial_prefixed_name = self.add_initial_prefix(name)\n-                hidden_widget = field.hidden_widget()\n-                try:\n-                    initial_value = field.to_python(self._widget_data_value(hidden_widget, initial_prefixed_name))\n-                except ValidationError:\n-                    data.append(name)\n-                    continue\n-            if field.has_changed(initial_value, data_value):\n+            bf = self[name]\n+            if bf._did_change():\n                 data.append(name)\n         return data\n \n", "normalized_occurrence": 1}
