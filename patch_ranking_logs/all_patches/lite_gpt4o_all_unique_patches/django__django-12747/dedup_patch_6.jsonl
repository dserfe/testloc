{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..3c4e5c2 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -380,6 +380,8 @@ class Collector:\n         # sort instance collections\n         for model, instances in self.data.items():\n             self.data[model] = sorted(instances, key=attrgetter(\"pk\"))\n+            # Ensure each model is represented in the deleted_counter with zero count initially\n+            deleted_counter[model._meta.label] = 0\n \n         # if possible, bring the models in an order suitable for databases that\n         # don't support transactions or cannot defer constraint checks until the\n@@ -442,4 +444,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..8701f44 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -197,6 +197,7 @@ class Collector:\n     def delete(self):\n         for model, instances in self.data.items():\n             self.data[model] = sorted(instances, key=attrgetter('pk'))\n+            deleted_counter[model._meta.label] = 0\n         self.sort()\n         deleted_counter = Counter()\n         if len(self.data) == 1 and len(instances) == 1:\n", "normalized_occurrence": 3}
