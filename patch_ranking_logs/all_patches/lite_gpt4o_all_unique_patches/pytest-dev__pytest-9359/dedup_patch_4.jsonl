{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..19b6da1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -851,6 +851,10 @@ class AssertionRewriter(ast.NodeVisitor):\n         raises an assertion error with a detailed explanation in case\n         the expression is false.\n         \"\"\"\n+        self.statements: List[ast.stmt] = []\n+        self.variables: List[str] = []\n+        self.variable_counter = itertools.count()\n+\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n@@ -934,6 +938,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Create failure message.\n             body = self.expl_stmts\n             self.statements.append(ast.If(negation, body, []))\n+            # Ensure proper line numbers for compatibility with Python 3.9\n+            for stmt in self.statements:\n+                for node in traverse_node(stmt):\n+                    ast.copy_location(node, assert_)\n             if assert_.msg:\n                 assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                 explanation = \"\\n>assert \" + explanation\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..613f619 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -449,6 +449,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(node)\n         return (res, self.explanation_param(self.display(res)))\n     def visit_Assert(self, assert_: ast.Assert) -> List[ast.stmt]:\n+        self.statements: List[ast.stmt] = []\n+        self.variables: List[str] = []\n+        self.variable_counter = itertools.count()\n         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:\n             from _pytest.warning_types import PytestAssertRewriteWarning\n             import warnings\n@@ -495,6 +498,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         else:\n             body = self.expl_stmts\n             self.statements.append(ast.If(negation, body, []))\n+            for stmt in self.statements:\n+                for node in traverse_node(stmt):\n+                    ast.copy_location(node, assert_)\n             if assert_.msg:\n                 assertmsg = self.helper('_format_assertmsg', assert_.msg)\n                 explanation = '\\n>assert ' + explanation\n", "normalized_occurrence": 1}
