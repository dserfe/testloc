{"model_name_or_path": "agentless", "instance_id": "django__django-15098", "model_patch": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 488a2d8..5e834d3 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -490,9 +490,12 @@ def get_supported_language_variant(lang_code, strict=False):\n         for code in possible_lang_codes:\n             if code in supported_lang_codes and check_for_language(code):\n                 return code\n-        if not strict:\n-            # if fr-fr is not supported, try fr-ca.\n-            for supported_code in supported_lang_codes:\n+        # try matching with the script and region included.\n+        for supported_code in supported_lang_codes:\n+            if not strict:\n+                if supported_code.lower() == lang_code.lower():\n+                    return supported_code\n+                # if fr-latn-fr is not supported, try fr-fr.\n                 if supported_code.startswith(generic_lang_code + '-'):\n                     return supported_code\n     raise LookupError(lang_code)\n@@ -505,7 +508,8 @@ def get_language_from_path(path, strict=False):\n     If `strict` is False (the default), look for a country-specific variant\n     when neither the language code nor its generic variant is found.\n     \"\"\"\n-    regex_match = language_code_prefix_re.match(path)\n+    # Match against the complete langtag including script and region\n+    regex_match = language_code_prefix_re.match(path.lower())\n     if not regex_match:\n         return None\n     lang_code = regex_match[1]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/translation/trans_real.py b/django/utils/translation/trans_real.py\nindex 05d14a5..13d69ec 100644\n--- a/django/utils/translation/trans_real.py\n+++ b/django/utils/translation/trans_real.py\n@@ -262,13 +262,15 @@ def get_supported_language_variant(lang_code, strict=False):\n         for code in possible_lang_codes:\n             if code in supported_lang_codes and check_for_language(code):\n                 return code\n-        if not strict:\n-            for supported_code in supported_lang_codes:\n+        for supported_code in supported_lang_codes:\n+            if not strict:\n+                if supported_code.lower() == lang_code.lower():\n+                    return supported_code\n                 if supported_code.startswith(generic_lang_code + '-'):\n                     return supported_code\n     raise LookupError(lang_code)\n def get_language_from_path(path, strict=False):\n-    regex_match = language_code_prefix_re.match(path)\n+    regex_match = language_code_prefix_re.match(path.lower())\n     if not regex_match:\n         return None\n     lang_code = regex_match[1]\n", "normalized_occurrence": 1}
