{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7236", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..a3f9c94 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -214,13 +214,13 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            # when --pdb is given, we want to postpone calling tearDown() otherwise\n-            # when entering the pdb prompt, tearDown() would have probably cleaned up\n+            # Check if test is marked as skipped\n+            skipped = self._store.get(\"skip_by_mark\", False) or hasattr(self.obj, \"__unittest_skip__\")\n+            \n+            # when --pdb is given and test is not skipped, we want to postpone calling tearDown()\n+            # otherwise when entering the pdb prompt, tearDown() would have probably cleaned up\n             # instance variables, which makes it difficult to debug\n-            # arguably we could always postpone tearDown(), but this changes the moment where the\n-            # TestCase instance interacts with the results object, so better to only do it\n-            # when absolutely needed\n-            if self.config.getoption(\"usepdb\"):\n+            if self.config.getoption(\"usepdb\") and not skipped:\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, \"tearDown\", lambda *args: None)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 4eb682f..5a92068 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -152,7 +152,8 @@ class TestCaseFunction(Function):\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n-            if self.config.getoption('usepdb'):\n+            skipped = self._store.get('skip_by_mark', False) or hasattr(self.obj, '__unittest_skip__')\n+            if self.config.getoption('usepdb') and (not skipped):\n                 self._explicit_tearDown = self._testcase.tearDown\n                 setattr(self._testcase, 'tearDown', lambda *args: None)\n             setattr(self._testcase, self.name, self.obj)\n", "normalized_occurrence": 1}
