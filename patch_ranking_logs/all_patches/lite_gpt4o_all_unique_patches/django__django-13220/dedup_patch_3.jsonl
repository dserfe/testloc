{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..08c7d45 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,25 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return all(\n+                sorted(self.error_dict[field]) == sorted(other.error_dict.get(field, []))\n+                for field in self.error_dict\n+            ) and all(\n+                sorted(other.error_dict[field]) == sorted(self.error_dict.get(field, []))\n+                for field in other.error_dict\n+            )\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.error_list) == sorted(other.error_list)\n+        return (\n+            self.message == other.message and\n+            self.code == other.code and\n+            self.params == other.params\n+        )\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +209,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return all((sorted(self.error_dict[field]) == sorted(other.error_dict.get(field, [])) for field in self.error_dict)) and all((sorted(other.error_dict[field]) == sorted(self.error_dict.get(field, [])) for field in other.error_dict))\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self.error_list) == sorted(other.error_list)\n+        return self.message == other.message and self.code == other.code and (self.params == other.params)\n+", "normalized_occurrence": 1}
