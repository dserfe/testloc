{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..b5ab1d9 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -269,9 +269,16 @@ class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str,\n                   innernode: \"Type[TextlikeNode]\" = nodes.emphasis,\n                   contnode: Node = None, env: BuildEnvironment = None) -> Node:\n+        # Handle unqualified names in the context of the current module\n+        if env and not target.startswith(('.', '~')) and '.' not in target:\n+            currmodule = env.ref_context.get('py:module')\n+            if currmodule:\n+                target = currmodule + '.' + target\n+        \n         result = super().make_xref(rolename, domain, target,  # type: ignore\n                                    innernode, contnode, env)\n         result['refspecific'] = True\n+        \n         if target.startswith(('.', '~')):\n             prefix, result['reftarget'] = target[0], target[1:]\n             if prefix == '.':\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..f692f28 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -179,6 +179,10 @@ def _pseudo_parse_arglist(signode: desc_signature, arglist: str) -> None:\n         signode += paramlist\n class PyXrefMixin:\n     def make_xref(self, rolename: str, domain: str, target: str, innernode: 'Type[TextlikeNode]'=nodes.emphasis, contnode: Node=None, env: BuildEnvironment=None) -> Node:\n+        if env and (not target.startswith(('.', '~'))) and ('.' not in target):\n+            currmodule = env.ref_context.get('py:module')\n+            if currmodule:\n+                target = currmodule + '.' + target\n         result = super().make_xref(rolename, domain, target, innernode, contnode, env)\n         result['refspecific'] = True\n         if target.startswith(('.', '~')):\n", "normalized_occurrence": 1}
