{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..5fa8298 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -805,11 +805,12 @@ class Piecewise(Function):\n         return self.func(*[(e**s, c) for e, c in self.args])\n \n     def _eval_subs(self, old, new):\n-        # this is strictly not necessary, but we can keep track\n-        # of whether True or False conditions arise and be\n-        # somewhat more efficient by avoiding other substitutions\n-        # and avoiding invalid conditions that appear after a\n-        # True condition\n+        # Handle special cases where the substitution needs to preserve structure\n+        if getattr(self, 'has_real_assumptions', False):\n+            args = [(e._subs(old, new), c._subs(old, new)) for e, c in self.args]\n+            return self.func(*args)\n+            \n+        # Regular substitution logic\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..919f174 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,6 +441,9 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n+        if getattr(self, 'has_real_assumptions', False):\n+            args = [(e._subs(old, new), c._subs(old, new)) for e, c in self.args]\n+            return self.func(*args)\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n", "normalized_occurrence": 1}
