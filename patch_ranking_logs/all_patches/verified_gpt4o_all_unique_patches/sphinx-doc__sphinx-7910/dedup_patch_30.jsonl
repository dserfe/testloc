{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..9d431d3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -145,6 +145,23 @@ def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n             obj = obj.__func__\n         else:\n             return obj\n+    \"\"\"\n+    Get an original object from wrapped object (unwrapping partials, wrapped\n+    functions, and other decorators).\n+    \"\"\"\n+    while True:\n+        if stop and stop(obj):\n+            return obj\n+        elif ispartial(obj):\n+            obj = obj.func\n+        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__'):\n+            obj = obj.__wrapped__\n+        elif isclassmethod(obj):\n+            obj = obj.__func__\n+        elif isstaticmethod(obj):\n+            obj = obj.__func__\n+        else:\n+            return obj\n \n \n def isenumclass(x: Any) -> bool:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 6e5e6c6..7abe5bf 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -83,6 +83,20 @@ def unwrap_all(obj: Any, *, stop: Callable=None) -> Any:\n             obj = obj.__func__\n         else:\n             return obj\n+    '\\n    Get an original object from wrapped object (unwrapping partials, wrapped\\n    functions, and other decorators).\\n    '\n+    while True:\n+        if stop and stop(obj):\n+            return obj\n+        elif ispartial(obj):\n+            obj = obj.func\n+        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__'):\n+            obj = obj.__wrapped__\n+        elif isclassmethod(obj):\n+            obj = obj.__func__\n+        elif isstaticmethod(obj):\n+            obj = obj.__func__\n+        else:\n+            return obj\n def isenumclass(x: Any) -> bool:\n     return inspect.isclass(x) and issubclass(x, enum.Enum)\n def isenumattribute(x: Any) -> bool:\n", "normalized_occurrence": 1}
