{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..7955304 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,16 +1074,17 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n-            else:\n+            if hasattr(self, '__all__'):\n+                # If __all__ is defined (even if empty), respect it\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n                         member.skipped = True\n-\n                 return False, list(members.values())\n+            else:\n+                # Only document all members if __all__ is not defined\n+                # for implicit module members, check __module__ to avoid\n+                # documenting imported objects\n+                return True, list(members.values())\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..994b20a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -575,13 +575,13 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                return (True, list(members.values()))\n-            else:\n+            if hasattr(self, '__all__'):\n                 for member in members.values():\n                     if member.__name__ not in self.__all__:\n                         member.skipped = True\n                 return (False, list(members.values()))\n+            else:\n+                return (True, list(members.values()))\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "normalized_occurrence": 6}
