{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..a664c53 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -159,6 +159,12 @@ class Options:\n         # for use when serializing the model definition\n         self.original_attrs = {}\n \n+        # Apply ordering from parent model if exists and none is set in child model.\n+        if self.model._meta.parents:\n+            for parent, _ in self.model._meta.parents.items():\n+                if parent._meta.ordering and not self.ordering:\n+                    self.ordering = parent._meta.ordering\n+\n         # Next, apply any overridden values from 'class Meta'.\n         if self.meta:\n             meta_attrs = self.meta.__dict__.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..be232be 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -97,6 +97,10 @@ class Options:\n         self.model_name = self.object_name.lower()\n         self.verbose_name = camel_case_to_spaces(self.object_name)\n         self.original_attrs = {}\n+        if self.model._meta.parents:\n+            for parent, _ in self.model._meta.parents.items():\n+                if parent._meta.ordering and (not self.ordering):\n+                    self.ordering = parent._meta.ordering\n         if self.meta:\n             meta_attrs = self.meta.__dict__.copy()\n             for name in self.meta.__dict__:\n", "normalized_occurrence": 1}
