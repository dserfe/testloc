{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..5e92fd1 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -254,6 +254,11 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        \n+        # Handle special case for fractional base with integer exponent\n+        if term.is_Add and any(arg.is_Pow and arg.base.is_Number and arg.exp.is_Number for arg in term.args):\n+            from sympy import exp, log\n+            return exp(summation(log(term), (k, a, n)))\n \n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..55e9ca2 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,6 +61,9 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        if term.is_Add and any((arg.is_Pow and arg.base.is_Number and arg.exp.is_Number for arg in term.args)):\n+            from sympy import exp, log\n+            return exp(summation(log(term), (k, a, n)))\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n", "normalized_occurrence": 1}
