{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..fe691d8 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -730,10 +730,9 @@ class PyLinter(\n \n         The returned generator yield one item for each Python module that should be linted.\n         \"\"\"\n-        for descr in self._expand_files(files_or_modules):\n+        for descr, _ in self._expand_files(files_or_modules):\n             name, filepath, is_arg = descr[\"name\"], descr[\"path\"], descr[\"isarg\"]\n-            if self.should_analyze_file(name, filepath, is_argument=is_arg):\n-                yield FileItem(name, filepath, descr[\"basename\"])\n+            yield FileItem(name, filepath, descr[\"basename\"])\n \n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..8f1e2ec 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -293,10 +293,9 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             modname = os.path.splitext(os.path.basename(filepath))[0]\n         return FileItem(modname, filepath, filepath)\n     def _iterate_file_descrs(self, files_or_modules: Sequence[str]) -> Iterator[FileItem]:\n-        for descr in self._expand_files(files_or_modules):\n+        for descr, _ in self._expand_files(files_or_modules):\n             name, filepath, is_arg = (descr['name'], descr['path'], descr['isarg'])\n-            if self.should_analyze_file(name, filepath, is_argument=is_arg):\n-                yield FileItem(name, filepath, descr['basename'])\n+            yield FileItem(name, filepath, descr['basename'])\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n         result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths)\n         for error in errors:\n", "normalized_occurrence": 1}
