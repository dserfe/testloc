{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..9df957a 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -264,7 +264,20 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         # database. To prevent accidental data loss, ignore close requests on\n         # an in-memory db.\n         if not self.is_in_memory_db():\n-            BaseDatabaseWrapper.close(self)\n+            import time\n+            retries = 5\n+            while retries > 0:\n+                try:\n+                    BaseDatabaseWrapper.close(self)\n+                    break\n+                except self.Database.OperationalError as e:\n+                    if 'database is locked' in str(e):\n+                        time.sleep(1)\n+                        retries -= 1\n+                    else:\n+                        raise\n+            else:\n+                raise RuntimeError(\"Maximum retries exceeded while trying to close the database.\")\n \n     def _savepoint_allowed(self):\n         # When 'isolation_level' is not None, sqlite3 commits before each\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..76f3353 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -128,7 +128,20 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n     def close(self):\n         self.validate_thread_sharing()\n         if not self.is_in_memory_db():\n-            BaseDatabaseWrapper.close(self)\n+            import time\n+            retries = 5\n+            while retries > 0:\n+                try:\n+                    BaseDatabaseWrapper.close(self)\n+                    break\n+                except self.Database.OperationalError as e:\n+                    if 'database is locked' in str(e):\n+                        time.sleep(1)\n+                        retries -= 1\n+                    else:\n+                        raise\n+            else:\n+                raise RuntimeError('Maximum retries exceeded while trying to close the database.')\n     def _savepoint_allowed(self):\n         return self.in_atomic_block\n     def _set_autocommit(self, autocommit):\n", "normalized_occurrence": 1}
