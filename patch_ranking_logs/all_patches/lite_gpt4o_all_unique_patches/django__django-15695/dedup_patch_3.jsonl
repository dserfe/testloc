{"model_name_or_path": "agentless", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..22c89ac 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -955,7 +955,7 @@ class RenameIndex(IndexOperation):\n                 )\n             old_index = models.Index(\n                 fields=self.old_fields,\n-                name=matching_index_name[0],\n+                name=matching_index_name[0] if matching_index_name else auto_name,\n             )\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n@@ -963,7 +963,7 @@ class RenameIndex(IndexOperation):\n \n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n-        schema_editor.rename_index(model, old_index, new_index)\n+        schema_editor.rename_index(model, old_index, new_index, allow_existing=True)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..69bad3c 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -427,13 +427,13 @@ class RenameIndex(IndexOperation):\n             matching_index_name = schema_editor._constraint_names(from_model, column_names=columns, index=True)\n             if len(matching_index_name) != 1:\n                 raise ValueError('Found wrong number (%s) of indexes for %s(%s).' % (len(matching_index_name), from_model._meta.db_table, ', '.join(columns)))\n-            old_index = models.Index(fields=self.old_fields, name=matching_index_name[0])\n+            old_index = models.Index(fields=self.old_fields, name=matching_index_name[0] if matching_index_name else auto_name)\n         else:\n             from_model_state = from_state.models[app_label, self.model_name_lower]\n             old_index = from_model_state.get_index_by_name(self.old_name)\n         to_model_state = to_state.models[app_label, self.model_name_lower]\n         new_index = to_model_state.get_index_by_name(self.new_name)\n-        schema_editor.rename_index(model, old_index, new_index)\n+        schema_editor.rename_index(model, old_index, new_index, allow_existing=True)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         if self.old_fields:\n             return\n", "normalized_occurrence": 1}
