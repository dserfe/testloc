{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11206", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex d5baf57..bee6914 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -1,3 +1,4 @@\n+\n from decimal import Decimal\n \n from django.conf import settings\n@@ -27,6 +28,11 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n     # sign\n     sign = ''\n     if isinstance(number, Decimal):\n+        # When decimal_pos is specified and the number is smaller than what can be\n+        # represented with the specified decimal positions, return \"0.000...\"\n+        if decimal_pos is not None and abs(number) > 0 and abs(number) < Decimal('0.1') ** decimal_pos:\n+            return '0' + decimal_sep + '0' * decimal_pos\n+\n         # Format values with more than 200 digits (an arbitrary cutoff) using\n         # scientific notation to avoid high memory usage in {:f}'.format().\n         _, digits, exponent = number.as_tuple()\n@@ -76,4 +82,4 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',\n             int_part_gd += digit\n             cnt += 1\n         int_part = int_part_gd[::-1]\n-    return sign + int_part + dec_part\n+    return sign + int_part + dec_part\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 0318af1..d7304f8 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -9,6 +9,8 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='', f\n         return mark_safe(number)\n     sign = ''\n     if isinstance(number, Decimal):\n+        if decimal_pos is not None and abs(number) > 0 and (abs(number) < Decimal('0.1') ** decimal_pos):\n+            return '0' + decimal_sep + '0' * decimal_pos\n         _, digits, exponent = number.as_tuple()\n         if abs(exponent) + len(digits) > 200:\n             number = '{:e}'.format(number)\n", "normalized_occurrence": 1}
