{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..05fb1e3 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -92,6 +92,12 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n \n+    # Check if dimensions are compatible before conversion\n+    expr_dimension = unit_system.get_dimensional_expr(expr)\n+    target_dimension = unit_system.get_dimensional_expr(Mul(*target_units))\n+    if expr_dimension != target_dimension:\n+        return expr\n+\n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..2a317b5 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -30,6 +30,10 @@ def convert_to(expr, target_units, unit_system='SI'):\n     expr = sympify(expr)\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n+    expr_dimension = unit_system.get_dimensional_expr(expr)\n+    target_dimension = unit_system.get_dimensional_expr(Mul(*target_units))\n+    if expr_dimension != target_dimension:\n+        return expr\n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])\n", "normalized_occurrence": 1}
