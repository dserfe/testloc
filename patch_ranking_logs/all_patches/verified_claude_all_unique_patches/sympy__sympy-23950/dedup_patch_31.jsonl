{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..e10f308 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import S\n from sympy.core.relational import Eq, Ne\n from sympy.logic.boolalg import BooleanFunction\n@@ -45,4 +46,15 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Return a Set equivalent to the boolean function.\n+        \n+        Since Contains represents a boolean predicate and not a set,\n+        this operation is not supported.\n+        \n+        Raises\n+        ======\n+        NotImplementedError\n+            Because Contains represents a boolean predicate, not a set.\n+        \"\"\"\n+        raise NotImplementedError(\"Contains is a boolean predicate, not a set, so it cannot be converted to a set.\")\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..7650d0a 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,4 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        raise NotImplementedError('Contains is a boolean predicate, not a set, so it cannot be converted to a set.')\n\\ No newline at end of file\n", "normalized_occurrence": 1}
