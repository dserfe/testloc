{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex ecd2cce..0eafb4c 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1387,14 +1387,14 @@ class Float(Number):\n         except SympifyError:\n             return NotImplemented\n         if not self:\n-            return not other\n+            return other.is_zero\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other.is_Boolean:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n-        if other.is_Float:\n+        if other.is_Float or other.is_Boolean:\n             # comparison is exact\n             # so Float(.1, 3) != Float(.1, 33)\n             return self._mpf_ == other._mpf_\n@@ -1870,8 +1870,8 @@ class Rational(Number):\n             # S(0) == False is True\n             return False\n         if not self:\n-            return not other\n-        if other.is_NumberSymbol:\n+            return other.is_zero\n+        if other.is_NumberSymbol or other.is_Boolean:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1879,7 +1879,7 @@ class Rational(Number):\n             # a Rational is always in reduced form so will never be 2/4\n             # so we can just check equivalence of args\n             return self.p == other.p and self.q == other.q\n-        if other.is_Float:\n+        if other.is_Float or other.is_Boolean:\n             # all Floats have a denominator that is a power of 2\n             # so if self doesn't, it can't be equal to other\n             if self.q & (self.q - 1):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c5d42bc..32da36d 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1192,14 +1192,14 @@ class Float(Number):\n         except SympifyError:\n             return NotImplemented\n         if not self:\n-            return not other\n+            return other.is_zero\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if other.is_NumberSymbol or other.is_Boolean:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n-        if other.is_Float:\n+        if other.is_Float or other.is_Boolean:\n             return self._mpf_ == other._mpf_\n         if other.is_Rational:\n             return other.__eq__(self)\n@@ -1630,14 +1630,14 @@ class Rational(Number):\n         if not isinstance(other, Number):\n             return False\n         if not self:\n-            return not other\n-        if other.is_NumberSymbol:\n+            return other.is_zero\n+        if other.is_NumberSymbol or other.is_Boolean:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n         if other.is_Rational:\n             return self.p == other.p and self.q == other.q\n-        if other.is_Float:\n+        if other.is_Float or other.is_Boolean:\n             if self.q & self.q - 1:\n                 return False\n             s, m, t = other._mpf_[:3]\n", "normalized_occurrence": 1}
