{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..cd84de5 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -600,7 +600,15 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        # Ensure the event loop is correctly set up after callbacks\n+        self.ax.figure.canvas.mpl_connect('draw_event', self._on_draw)\n+        return result\n+\n+    def _on_draw(self, event):\n+        # Reconnect the event handlers after a draw event\n+        self.disconnect_events()\n+        self.connect_events()\n \n \n class RangeSlider(SliderBase):\n@@ -983,7 +991,15 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        # Ensure the event loop is correctly set up after callbacks\n+        self.ax.figure.canvas.mpl_connect('draw_event', self._on_draw)\n+        return result\n+\n+    def _on_draw(self, event):\n+        # Reconnect the event handlers after a draw event\n+        self.disconnect_events()\n+        self.connect_events()\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..21ae8c7 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -519,7 +519,13 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.mpl_connect('draw_event', self._on_draw)\n+        return result\n+\n+    def _on_draw(self, event):\n+        self.disconnect_events()\n+        self.connect_events()\n \n class RangeSlider(SliderBase):\n     \"\"\"\n@@ -795,7 +801,13 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        result = self._observers.connect('changed', lambda val: func(val))\n+        self.ax.figure.canvas.mpl_connect('draw_event', self._on_draw)\n+        return result\n+\n+    def _on_draw(self, event):\n+        self.disconnect_events()\n+        self.connect_events()\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
