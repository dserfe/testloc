{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..7b29448 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -171,6 +171,23 @@ class Collector:\n         else:\n             return [objs]\n \n+\n+    def add_combined_fast_deletes(self, objs):\n+        \"\"\"\n+        Combine fast delete queries by table.\n+        \"\"\"\n+        model = objs[0].__class__\n+        for related in get_candidate_relations_to_delete(model._meta):\n+            field = related.field\n+            related_model = related.related_model\n+            combined_objs = []\n+            for batch in self.get_del_batches(objs, field):\n+                sub_objs = self.related_objects(related, batch)\n+                if sub_objs:\n+                    combined_objs.extend(sub_objs)\n+            if combined_objs:\n+                self.fast_deletes.append(combined_objs)\n+\n     def collect(self, objs, source=None, nullable=False, collect_related=True,\n                 source_attr=None, reverse_dependency=False, keep_parents=False):\n         \"\"\"\n@@ -191,7 +208,7 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            self.add_combined_fast_deletes(objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..9965e2c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -78,9 +78,21 @@ class Collector:\n             return [objs[i:i + conn_batch_size] for i in range(0, len(objs), conn_batch_size)]\n         else:\n             return [objs]\n+    def add_combined_fast_deletes(self, objs):\n+        model = objs[0].__class__\n+        for related in get_candidate_relations_to_delete(model._meta):\n+            field = related.field\n+            related_model = related.related_model\n+            combined_objs = []\n+            for batch in self.get_del_batches(objs, field):\n+                sub_objs = self.related_objects(related, batch)\n+                if sub_objs:\n+                    combined_objs.extend(sub_objs)\n+            if combined_objs:\n+                self.fast_deletes.append(combined_objs)\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            self.add_combined_fast_deletes(objs)\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n", "normalized_occurrence": 1}
