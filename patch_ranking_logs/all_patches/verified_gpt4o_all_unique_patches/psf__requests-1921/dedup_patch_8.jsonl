{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..68257a6 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -205,7 +205,7 @@ class Session(SessionRedirectMixin):\n         #: A case-insensitive dictionary of headers to be sent on each\n         #: :class:`Request <Request>` sent from this\n         #: :class:`Session <Session>`.\n-        self.headers = default_headers()\n+        self.headers = CaseInsensitiveDict({k: v for k, v in default_headers().items() if v is not None})\n \n         #: Default Authentication tuple or object to attach to\n         #: :class:`Request <Request>`.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..0711a7a 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,7 +86,7 @@ class SessionRedirectMixin(object):\n class Session(SessionRedirectMixin):\n     __attrs__ = ['headers', 'cookies', 'auth', 'timeout', 'proxies', 'hooks', 'params', 'verify', 'cert', 'prefetch', 'adapters', 'stream', 'trust_env', 'max_redirects']\n     def __init__(self):\n-        self.headers = default_headers()\n+        self.headers = CaseInsensitiveDict({k: v for k, v in default_headers().items() if v is not None})\n         self.auth = None\n         self.proxies = {}\n         self.hooks = default_hooks()\n", "normalized_occurrence": 1}
