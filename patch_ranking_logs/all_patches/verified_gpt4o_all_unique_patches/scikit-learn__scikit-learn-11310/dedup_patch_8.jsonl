{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11310", "model_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex 0f3216b..82c4126 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -414,6 +414,7 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n                  error_score='raise-deprecating', return_train_score=True):\n \n         self.scoring = scoring\n+        self.refit_time_ = None\n         self.estimator = estimator\n         self.n_jobs = n_jobs\n         self.fit_params = fit_params\n@@ -766,9 +767,13 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator,\n         if self.refit:\n             self.best_estimator_ = clone(base_estimator).set_params(\n                 **self.best_params_)\n+            import time\n+            refit_start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n+                self.refit_time_ = time.time() - refit_start_time\n             else:\n+                self.refit_time_ = time.time() - refit_start_time\n                 self.best_estimator_.fit(X, **fit_params)\n \n         # Store the only scorer not as a dict for single metric evaluation\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/model_selection/_search.py b/sklearn/model_selection/_search.py\nindex dd929b2..03425a7 100644\n--- a/sklearn/model_selection/_search.py\n+++ b/sklearn/model_selection/_search.py\n@@ -127,6 +127,7 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n     @abstractmethod\n     def __init__(self, estimator, scoring=None, fit_params=None, n_jobs=1, iid='warn', refit=True, cv=None, verbose=0, pre_dispatch='2*n_jobs', error_score='raise-deprecating', return_train_score=True):\n         self.scoring = scoring\n+        self.refit_time_ = None\n         self.estimator = estimator\n         self.n_jobs = n_jobs\n         self.fit_params = fit_params\n@@ -253,9 +254,13 @@ class BaseSearchCV(six.with_metaclass(ABCMeta, BaseEstimator, MetaEstimatorMixin\n             self.best_score_ = results['mean_test_%s' % refit_metric][self.best_index_]\n         if self.refit:\n             self.best_estimator_ = clone(base_estimator).set_params(**self.best_params_)\n+            import time\n+            refit_start_time = time.time()\n             if y is not None:\n                 self.best_estimator_.fit(X, y, **fit_params)\n+                self.refit_time_ = time.time() - refit_start_time\n             else:\n+                self.refit_time_ = time.time() - refit_start_time\n                 self.best_estimator_.fit(X, **fit_params)\n         self.scorer_ = scorers if self.multimetric_ else scorers['score']\n         self.cv_results_ = results\n", "normalized_occurrence": 1}
