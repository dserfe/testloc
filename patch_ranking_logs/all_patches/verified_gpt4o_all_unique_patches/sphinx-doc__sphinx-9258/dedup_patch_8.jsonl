{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..584ef6e 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -81,7 +81,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n \n \n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n-    arguments: Dict[str, Dict[str, bool]] = {}\n+    arguments: Dict[str, Dict[str, Union[bool, List[str]]]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n@@ -161,7 +161,10 @@ def augment_descriptions_with_types(\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            annotation = annotations[name]\n+            if '|' in annotation:\n+                annotation = ' or '.join(map(str.strip, annotation.split('|')))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n@@ -169,7 +172,10 @@ def augment_descriptions_with_types(\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            annotation = annotations['return']\n+            if '|' in annotation:\n+                annotation = ' or '.join(map(str.strip, annotation.split('|')))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..47d98bb 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -53,7 +53,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n         node += field_list\n     return field_list\n def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n-    arguments: Dict[str, Dict[str, bool]] = {}\n+    arguments: Dict[str, Dict[str, Union[bool, List[str]]]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n@@ -119,13 +119,19 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            annotation = annotations[name]\n+            if '|' in annotation:\n+                annotation = ' or '.join(map(str.strip, annotation.split('|')))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n             field += nodes.field_name('', 'rtype')\n-            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            annotation = annotations['return']\n+            if '|' in annotation:\n+                annotation = ' or '.join(map(str.strip, annotation.split('|')))\n+            field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n", "normalized_occurrence": 1}
