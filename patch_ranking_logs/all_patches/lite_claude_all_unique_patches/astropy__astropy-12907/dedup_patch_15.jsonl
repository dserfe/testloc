{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..77f2546 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -208,11 +208,26 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        if isinstance(model, CompoundModel) and model.op == '&':\n+            # Handle nested compound models with & operator\n+            left_mat = _coord_matrix(model.left, pos, noutp)\n+            right_mat = _coord_matrix(model.right, pos, noutp)\n+            if pos == 'left':\n+                mat[:model.n_outputs, :model.n_inputs] = np.hstack([left_mat[:model.left.n_outputs, :model.left.n_inputs],\n+                                                                   right_mat[:model.right.n_outputs, :model.right.n_inputs]])\n+            else:\n+                # For right position, shift the matrix down and right\n+                shift = noutp - model.n_outputs\n+                mat[shift:shift+model.n_outputs, shift:shift+model.n_inputs] = np.hstack([\n+                    left_mat[:model.left.n_outputs, :model.left.n_inputs],\n+                    right_mat[:model.right.n_outputs, :model.right.n_inputs]\n+                ])\n+        else:\n+            # Handle simple separable models\n+            for i in range(model.n_inputs):\n+                mat[i, i] = 1\n+            if pos == 'right':\n+                mat = np.roll(mat, (noutp - model.n_outputs))\n     return mat\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..0887604 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -62,10 +62,19 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+        if isinstance(model, CompoundModel) and model.op == '&':\n+            left_mat = _coord_matrix(model.left, pos, noutp)\n+            right_mat = _coord_matrix(model.right, pos, noutp)\n+            if pos == 'left':\n+                mat[:model.n_outputs, :model.n_inputs] = np.hstack([left_mat[:model.left.n_outputs, :model.left.n_inputs], right_mat[:model.right.n_outputs, :model.right.n_inputs]])\n+            else:\n+                shift = noutp - model.n_outputs\n+                mat[shift:shift + model.n_outputs, shift:shift + model.n_inputs] = np.hstack([left_mat[:model.left.n_outputs, :model.left.n_inputs], right_mat[:model.right.n_outputs, :model.right.n_inputs]])\n+        else:\n+            for i in range(model.n_inputs):\n+                mat[i, i] = 1\n+            if pos == 'right':\n+                mat = np.roll(mat, noutp - model.n_outputs)\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n", "normalized_occurrence": 1}
