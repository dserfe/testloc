{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..d6955be 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -423,9 +423,9 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     # TODO: make this function dask-compatible?\n     # Set offset to minimum if not given\n     if offset is None:\n-        if array.dtype.kind in \"Mm\":\n+        if array.dtype.kind == \"M\":  # datetime64\n             offset = _datetime_nanmin(array)\n-        else:\n+        else:  # timedelta64 or other\n             offset = min(array)\n \n     # Compute timedelta object.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..0feda8e 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -227,7 +227,7 @@ def _datetime_nanmin(array):\n     return array.astype(dtype)\n def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     if offset is None:\n-        if array.dtype.kind in 'Mm':\n+        if array.dtype.kind == 'M':\n             offset = _datetime_nanmin(array)\n         else:\n             offset = min(array)\n", "normalized_occurrence": 1}
