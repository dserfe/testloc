{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..f43db79 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,20 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Clear annotations that aren't referenced in filters/ordering\n+        referenced_annotations = set()\n+        for node in obj.where.children:\n+            referenced_annotations.update(node.get_refs())\n+        if obj.order_by:\n+            referenced_annotations.update(\n+                ref for ref in obj.order_by if isinstance(ref, str)\n+            )\n+        obj.annotation_select = {\n+            k: v for k, v in obj.annotation_select.items()\n+            if k in referenced_annotations\n+        }\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..02e22bf 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,12 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        referenced_annotations = set()\n+        for node in obj.where.children:\n+            referenced_annotations.update(node.get_refs())\n+        if obj.order_by:\n+            referenced_annotations.update((ref for ref in obj.order_by if isinstance(ref, str)))\n+        obj.annotation_select = {k: v for k, v in obj.annotation_select.items() if k in referenced_annotations}\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
