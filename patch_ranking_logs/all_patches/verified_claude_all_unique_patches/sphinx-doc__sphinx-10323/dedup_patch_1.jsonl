{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..1053bd9 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -340,26 +340,34 @@ class LiteralIncludeReader:\n \n         return lines\n \n+    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n+        if 'dedent' in self.options:\n+            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+        else:\n+            return lines\n+\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            # Calculate the indentation from the first line if it exists\n+            indent = ''\n+            if lines and lines[0]:\n+                indent = re.match(r'^\\s*', lines[0]).group()\n+            lines.insert(0, indent + prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            # Calculate the indentation from the last line if it exists\n+            indent = ''\n+            if lines and lines[-1]:\n+                indent = re.match(r'^\\s*', lines[-1]).group()\n+            lines.append(indent + append + '\\n')\n \n         return lines\n \n-    def dedent_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n-        if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n-        else:\n-            return lines\n-\n \n class LiteralInclude(SphinxDirective):\n     \"\"\"\n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..3cac8b9 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -223,21 +223,27 @@ class LiteralIncludeReader:\n             else:\n                 raise ValueError('end-before pattern not found: %s' % end)\n         return lines\n+    def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n+        if 'dedent' in self.options:\n+            return dedent_lines(lines, self.options.get('dedent'), location=location)\n+        else:\n+            return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            indent = ''\n+            if lines and lines[0]:\n+                indent = re.match('^\\\\s*', lines[0]).group()\n+            lines.insert(0, indent + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n         if append:\n-            lines.append(append + '\\n')\n+            indent = ''\n+            if lines and lines[-1]:\n+                indent = re.match('^\\\\s*', lines[-1]).group()\n+            lines.append(indent + append + '\\n')\n         return lines\n-    def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n-        if 'dedent' in self.options:\n-            return dedent_lines(lines, self.options.get('dedent'), location=location)\n-        else:\n-            return lines\n class LiteralInclude(SphinxDirective):\n     has_content = False\n     required_arguments = 1\n", "normalized_occurrence": 2}
