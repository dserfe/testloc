{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13798", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex e32266f..3471514 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -156,8 +156,11 @@ class LatexPrinter(Printer):\n             \"times\": r\" \\times \"\n         }\n \n-        self._settings['mul_symbol_latex'] = \\\n-            mul_symbol_table[self._settings['mul_symbol']]\n+        if self._settings['mul_symbol'] in mul_symbol_table:\n+            self._settings['mul_symbol_latex'] = \\\n+                mul_symbol_table[self._settings['mul_symbol']]\n+        else:\n+            self._settings['mul_symbol_latex'] = self._settings['mul_symbol']\n \n         self._settings['mul_symbol_latex_numbers'] = \\\n             mul_symbol_table[self._settings['mul_symbol'] or 'dot']\n@@ -2155,7 +2158,7 @@ def latex(expr, **settings):\n     \\frac{1}{2 \\pi} \\int r\\, dr\n \n     mul_symbol: The symbol to use for multiplication. Can be one of None,\n-    \"ldot\", \"dot\", or \"times\".\n+    \"ldot\", \"dot\", \"times\", or any custom string.\n \n     >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol=\"times\"))\n     \\left(2 \\times \\tau\\right)^{\\sin{\\left (\\frac{7}{2} \\right )}}\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 8e8a18d..01da710 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -34,7 +34,10 @@ class LatexPrinter(Printer):\n         if self._settings['fold_short_frac'] is None and self._settings['mode'] == 'inline':\n             self._settings['fold_short_frac'] = True\n         mul_symbol_table = {None: ' ', 'ldot': ' \\\\,.\\\\, ', 'dot': ' \\\\cdot ', 'times': ' \\\\times '}\n-        self._settings['mul_symbol_latex'] = mul_symbol_table[self._settings['mul_symbol']]\n+        if self._settings['mul_symbol'] in mul_symbol_table:\n+            self._settings['mul_symbol_latex'] = mul_symbol_table[self._settings['mul_symbol']]\n+        else:\n+            self._settings['mul_symbol_latex'] = self._settings['mul_symbol']\n         self._settings['mul_symbol_latex_numbers'] = mul_symbol_table[self._settings['mul_symbol'] or 'dot']\n         self._delim_dict = {'(': ')', '[': ']'}\n     def parenthesize(self, item, level, strict=False):\n", "normalized_occurrence": 1}
