{"model_name_or_path": "agentless", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..0be83fa 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -459,7 +459,7 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n         if self.connector == self.SUB and lhs_type in datetime_fields and lhs_type == rhs_type:\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+            return TemporalSubtraction(self.lhs, self.rhs, output_field=fields.DurationField()).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -512,8 +512,8 @@ class DurationExpression(CombinedExpression):\n class TemporalSubtraction(CombinedExpression):\n     output_field = fields.DurationField()\n \n-    def __init__(self, lhs, rhs):\n-        super().__init__(lhs, self.SUB, rhs)\n+    def __init__(self, lhs, rhs, output_field=None):\n+        super().__init__(lhs, self.SUB, rhs, output_field=output_field or fields.DurationField())\n \n     def as_sql(self, compiler, connection):\n         connection.ops.check_expression_support(self)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..1727c67 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -251,7 +251,7 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n             return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)\n         datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n         if self.connector == self.SUB and lhs_type in datetime_fields and (lhs_type == rhs_type):\n-            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n+            return TemporalSubtraction(self.lhs, self.rhs, output_field=fields.DurationField()).as_sql(compiler, connection)\n         expressions = []\n         expression_params = []\n         sql, params = compiler.compile(self.lhs)\n@@ -295,8 +295,8 @@ class DurationExpression(CombinedExpression):\n         return (expression_wrapper % sql, expression_params)\n class TemporalSubtraction(CombinedExpression):\n     output_field = fields.DurationField()\n-    def __init__(self, lhs, rhs):\n-        super().__init__(lhs, self.SUB, rhs)\n+    def __init__(self, lhs, rhs, output_field=None):\n+        super().__init__(lhs, self.SUB, rhs, output_field=output_field or fields.DurationField())\n     def as_sql(self, compiler, connection):\n         connection.ops.check_expression_support(self)\n         lhs = compiler.compile(self.lhs)\n", "normalized_occurrence": 1}
