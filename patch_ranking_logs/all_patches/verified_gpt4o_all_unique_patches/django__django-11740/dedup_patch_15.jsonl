{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..6f9a73a 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -184,6 +184,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_altered_foreign_keys()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -197,7 +198,29 @@ class MigrationAutodetector:\n \n         return self.migrations\n \n-    def _prepare_field_lists(self):\n+    def generate_altered_foreign_keys(self):\n+        \"\"\"\n+        Generate operations to alter foreign keys, ensuring dependencies\n+        are correctly handled.\n+        \"\"\"\n+        for app_label, model_name in self.kept_model_keys:\n+            old_model = self.old_apps.get_model(app_label, model_name)\n+            new_model = self.new_apps.get_model(app_label, model_name)\n+            old_fields = {field.name: field for field in old_model._meta.local_fields}\n+            new_fields = {field.name: field for field in new_model._meta.local_fields}\n+\n+            for field_name, new_field in new_fields.items():\n+                if field_name in old_fields:\n+                    old_field = old_fields[field_name]\n+                    if (isinstance(old_field, models.UUIDField) and \n+                        isinstance(new_field, models.ForeignKey) and \n+                        old_field.remote_field != new_field.remote_field):\n+                        dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                        for dep_app_label, dep_object_name, _, _ in dependencies:\n+                            self.add_dependency(\n+                                app_label,\n+                                MigrationDependency(dep_app_label, dep_object_name)\n+                            )\n         \"\"\"\n         Prepare field lists and a list of the fields that used through models\n         in the old state so dependencies can be made from the through model\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..69e58bd 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -98,6 +98,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_altered_foreign_keys()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -108,7 +109,20 @@ class MigrationAutodetector:\n         self._build_migration_list(graph)\n         self._optimize_migrations()\n         return self.migrations\n-    def _prepare_field_lists(self):\n+    def generate_altered_foreign_keys(self):\n+        for app_label, model_name in self.kept_model_keys:\n+            old_model = self.old_apps.get_model(app_label, model_name)\n+            new_model = self.new_apps.get_model(app_label, model_name)\n+            old_fields = {field.name: field for field in old_model._meta.local_fields}\n+            new_fields = {field.name: field for field in new_model._meta.local_fields}\n+            for field_name, new_field in new_fields.items():\n+                if field_name in old_fields:\n+                    old_field = old_fields[field_name]\n+                    if isinstance(old_field, models.UUIDField) and isinstance(new_field, models.ForeignKey) and (old_field.remote_field != new_field.remote_field):\n+                        dependencies = self._get_dependencies_for_foreign_key(new_field)\n+                        for dep_app_label, dep_object_name, _, _ in dependencies:\n+                            self.add_dependency(app_label, MigrationDependency(dep_app_label, dep_object_name))\n+        '\\n        Prepare field lists and a list of the fields that used through models\\n        in the old state so dependencies can be made from the through model\\n        deletion to the field that uses it.\\n        '\n         self.kept_model_keys = self.old_model_keys & self.new_model_keys\n         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys\n         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys\n", "normalized_occurrence": 1}
