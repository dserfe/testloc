{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..377891d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -251,10 +251,14 @@ class ForwardManyToOneDescriptor:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, None)\n \n-        # Set the values of the related field.\n+        # Set the values of the related field and ensure foreign key is updated.\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                val = getattr(value, rh_field.attname)\n+                setattr(instance, lh_field.attname, val)\n+                # Update the foreign key field in the parent instance\n+                if val is not None and hasattr(instance, field.attname):\n+                    instance.__dict__[field.attname] = val\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..06d86b5 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -84,7 +84,10 @@ class ForwardManyToOneDescriptor:\n                 setattr(instance, lh_field.attname, None)\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                val = getattr(value, rh_field.attname)\n+                setattr(instance, lh_field.attname, val)\n+                if val is not None and hasattr(instance, field.attname):\n+                    instance.__dict__[field.attname] = val\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
