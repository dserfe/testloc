{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..52fbf1b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -153,9 +153,19 @@ class Field(RegisterLookupMixin):\n         self.unique_for_date = unique_for_date\n         self.unique_for_month = unique_for_month\n         self.unique_for_year = unique_for_year\n+        if isinstance(choices, collections.abc.Iterator):\n+            choices = list(choices)\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\n+\n+        if self.max_length is not None and self.choices is not None:\n+            max_choice_length = max(len(str(choice)) for choice, _ in self.choices)\n+            if self.max_length < max_choice_length:\n+                raise ValueError(\n+                    \"Field's max_length is too short to accommodate the longest choice. \"\n+                    \"Please increase max_length to at least {}.\".format(max_choice_length)\n+                )\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..d075cbf 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -73,9 +73,15 @@ class Field(RegisterLookupMixin):\n         self.unique_for_date = unique_for_date\n         self.unique_for_month = unique_for_month\n         self.unique_for_year = unique_for_year\n+        if isinstance(choices, collections.abc.Iterator):\n+            choices = list(choices)\n         if isinstance(choices, collections.abc.Iterator):\n             choices = list(choices)\n         self.choices = choices\n+        if self.max_length is not None and self.choices is not None:\n+            max_choice_length = max((len(str(choice)) for choice, _ in self.choices))\n+            if self.max_length < max_choice_length:\n+                raise ValueError(\"Field's max_length is too short to accommodate the longest choice. Please increase max_length to at least {}.\".format(max_choice_length))\n         self.help_text = help_text\n         self.db_index = db_index\n         self.db_column = db_column\n", "normalized_occurrence": 1}
