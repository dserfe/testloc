{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..c760815 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1175,6 +1175,12 @@ class Query(BaseExpression):\n             lookup_class = lhs.get_lookup(lookup_name)\n             if not lookup_class:\n                 return\n+        \n+        # Handle __in lookups with querysets to ensure only necessary columns are selected\n+        if lookup_name == 'in' and hasattr(rhs, 'query'):\n+            if hasattr(lhs, 'target'):\n+                pk_name = lhs.target.model._meta.pk.name\n+                rhs = rhs.values_list(pk_name, flat=True)\n \n         lookup = lookup_class(lhs, rhs)\n         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all\n@@ -1697,7 +1703,7 @@ class Query(BaseExpression):\n     def _gen_col_aliases(cls, exprs):\n         yield from (expr.alias for expr in cls._gen_cols(exprs))\n \n-    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):\n+    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, select_field=None):\n         annotation = self.annotations.get(name)\n         if annotation is not None:\n             if not allow_joins:\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..da5e1ff 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -645,6 +645,10 @@ class Query(BaseExpression):\n             lookup_class = lhs.get_lookup(lookup_name)\n             if not lookup_class:\n                 return\n+        if lookup_name == 'in' and hasattr(rhs, 'query'):\n+            if hasattr(lhs, 'target'):\n+                pk_name = lhs.target.model._meta.pk.name\n+                rhs = rhs.values_list(pk_name, flat=True)\n         lookup = lookup_class(lhs, rhs)\n         if lookup.rhs is None and (not lookup.can_use_none_as_rhs):\n             if lookup_name not in ('exact', 'iexact'):\n@@ -924,7 +928,7 @@ class Query(BaseExpression):\n     @classmethod\n     def _gen_col_aliases(cls, exprs):\n         yield from (expr.alias for expr in cls._gen_cols(exprs))\n-    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False):\n+    def resolve_ref(self, name, allow_joins=True, reuse=None, summarize=False, select_field=None):\n         annotation = self.annotations.get(name)\n         if annotation is not None:\n             if not allow_joins:\n", "normalized_occurrence": 1}
