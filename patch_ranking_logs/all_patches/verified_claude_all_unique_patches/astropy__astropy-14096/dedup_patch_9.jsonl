{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..3d81742 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -866,38 +866,7 @@ class SkyCoord(ShapedLikeNDArray):\n             isinstance(self.frame.name, list) and string in self.frame.name\n         )\n \n-    def __getattr__(self, attr):\n-        \"\"\"\n-        Overrides getattr to return coordinates that this can be transformed\n-        to, based on the alias attr in the primary transform graph.\n-        \"\"\"\n-        if \"_sky_coord_frame\" in self.__dict__:\n-            if self._is_name(attr):\n-                return self  # Should this be a deepcopy of self?\n-\n-            # Anything in the set of all possible frame_attr_names is handled\n-            # here. If the attr is relevant for the current frame then delegate\n-            # to self.frame otherwise get it from self._<attr>.\n-            if attr in frame_transform_graph.frame_attributes:\n-                if attr in self.frame.frame_attributes:\n-                    return getattr(self.frame, attr)\n-                else:\n-                    return getattr(self, \"_\" + attr, None)\n \n-            # Some attributes might not fall in the above category but still\n-            # are available through self._sky_coord_frame.\n-            if not attr.startswith(\"_\") and hasattr(self._sky_coord_frame, attr):\n-                return getattr(self._sky_coord_frame, attr)\n-\n-            # Try to interpret as a new frame for transforming.\n-            frame_cls = frame_transform_graph.lookup_name(attr)\n-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n-                return self.transform_to(attr)\n-\n-        # Fail\n-        raise AttributeError(\n-            f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n-        )\n \n     def __setattr__(self, attr, val):\n         # This is to make anything available through __getattr__ immutable\n", "occurrence": 5, "normalized_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..430b358 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -261,21 +261,6 @@ class SkyCoord(ShapedLikeNDArray):\n         return result\n     def _is_name(self, string):\n         return self.frame.name == string or (isinstance(self.frame.name, list) and string in self.frame.name)\n-    def __getattr__(self, attr):\n-        if '_sky_coord_frame' in self.__dict__:\n-            if self._is_name(attr):\n-                return self\n-            if attr in frame_transform_graph.frame_attributes:\n-                if attr in self.frame.frame_attributes:\n-                    return getattr(self.frame, attr)\n-                else:\n-                    return getattr(self, '_' + attr, None)\n-            if not attr.startswith('_') and hasattr(self._sky_coord_frame, attr):\n-                return getattr(self._sky_coord_frame, attr)\n-            frame_cls = frame_transform_graph.lookup_name(attr)\n-            if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n-                return self.transform_to(attr)\n-        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{attr}'\")\n     def __setattr__(self, attr, val):\n         if '_sky_coord_frame' in self.__dict__:\n             if self._is_name(attr):\n", "normalized_occurrence": 5}
