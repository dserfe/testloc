{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..ec280ad 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -473,7 +473,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         else:\n             dtype = None\n \n-    if isinstance(dtype, (list, tuple)):\n+    if isinstance(dtype, (list, tuple)) and dtype is not None:\n         if dtype_orig is not None and dtype_orig in dtype:\n             # no dtype conversion required\n             dtype = None\n@@ -491,7 +491,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n             estimator_name = estimator\n         else:\n             estimator_name = estimator.__class__.__name__\n-    else:\n+    elif hasattr(array, 'iloc'):\n+        # Work on a copy of the dataframe to convert it to NumPy array\n+        array_orig = array.copy()\n+        array = array.to_numpy()\n         estimator_name = \"Estimator\"\n     context = \" by %s\" % estimator_name if estimator is not None else \"\"\n \n@@ -501,7 +504,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       dtype=dtype, copy=copy,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n-    else:\n+    elif hasattr(array, 'iloc'):\n+        # Work on a copy of the dataframe to convert it to NumPy array\n+        array_orig = array.copy()\n+        array = array.to_numpy()\n         # If np.array(..) gives ComplexWarning, then we convert the warning\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n@@ -573,7 +579,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                              % (n_features, shape_repr, ensure_min_features,\n                                 context))\n \n-    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig:\n+    if warn_on_dtype and dtype_orig is not None and array.dtype != dtype_orig and not (hasattr(array_orig, 'iloc') and dtype_orig == 'O' and array.dtype == np.float64):\n         msg = (\"Data with input dtype %s was converted to %s%s.\"\n                % (dtype_orig, array.dtype, context))\n         warnings.warn(msg, DataConversionWarning)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..cde418a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -133,7 +133,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             dtype = np.float64\n         else:\n             dtype = None\n-    if isinstance(dtype, (list, tuple)):\n+    if isinstance(dtype, (list, tuple)) and dtype is not None:\n         if dtype_orig is not None and dtype_orig in dtype:\n             dtype = None\n         else:\n@@ -145,13 +145,17 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             estimator_name = estimator\n         else:\n             estimator_name = estimator.__class__.__name__\n-    else:\n+    elif hasattr(array, 'iloc'):\n+        array_orig = array.copy()\n+        array = array.to_numpy()\n         estimator_name = 'Estimator'\n     context = ' by %s' % estimator_name if estimator is not None else ''\n     if sp.issparse(array):\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n-    else:\n+    elif hasattr(array, 'iloc'):\n+        array_orig = array.copy()\n+        array = array.to_numpy()\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n@@ -181,7 +185,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         n_features = array.shape[1]\n         if n_features < ensure_min_features:\n             raise ValueError('Found array with %d feature(s) (shape=%s) while a minimum of %d is required%s.' % (n_features, shape_repr, ensure_min_features, context))\n-    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig):\n+    if warn_on_dtype and dtype_orig is not None and (array.dtype != dtype_orig) and (not (hasattr(array_orig, 'iloc') and dtype_orig == 'O' and (array.dtype == np.float64))):\n         msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n         warnings.warn(msg, DataConversionWarning)\n     if copy and np.may_share_memory(array, array_orig):\n", "normalized_occurrence": 1}
