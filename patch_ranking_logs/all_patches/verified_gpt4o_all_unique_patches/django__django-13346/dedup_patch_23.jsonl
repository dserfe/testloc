{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..da1a2ad 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -294,11 +294,15 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return '%s IN (%%s)' % lhs, params + [json_path]\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return '%s IN (SELECT VALUE FROM TABLE(JSON_TABLE(CAST(%s AS CLOB), ''' % lhs, params + [json_path]\n         return (\n             \"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" %\n             ((lhs, json_path) * 2)\n@@ -306,6 +310,8 @@ class KeyTransform(Transform):\n \n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        if self.lookup_name == 'in':\n+            return '%s IN (%%s)' % lhs, params + [tuple(key_transforms)]\n         if len(key_transforms) > 1:\n             return '(%s %s %%s)' % (lhs, self.postgres_nested_operator), params + [key_transforms]\n         try:\n@@ -317,6 +323,8 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return '%s IN (%%s)' % lhs, params + [json_path]\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..9f4d328 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -202,13 +202,19 @@ class KeyTransform(Transform):\n     def as_mysql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return ('%s IN (%%s)' % lhs, params + [json_path])\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n     def as_oracle(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return ('%s IN (SELECT VALUE FROM TABLE(JSON_TABLE(CAST(%s AS CLOB), ' % lhs, params + [json_path])\n         return (\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" % ((lhs, json_path) * 2), tuple(params) * 2)\n     def as_postgresql(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        if self.lookup_name == 'in':\n+            return ('%s IN (%%s)' % lhs, params + [tuple(key_transforms)])\n         if len(key_transforms) > 1:\n             return ('(%s %s %%s)' % (lhs, self.postgres_nested_operator), params + [key_transforms])\n         try:\n@@ -219,6 +225,8 @@ class KeyTransform(Transform):\n     def as_sqlite(self, compiler, connection):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n+        if self.lookup_name == 'in':\n+            return ('%s IN (%%s)' % lhs, params + [json_path])\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n", "normalized_occurrence": 1}
