{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16450", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9a1c686..757175b 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -228,6 +228,8 @@ class Symbol(AtomicExpr, Boolean):\n         # given dict as ``._generator``, but future modification might, e.g.,\n         # compute a minimal equivalent assumption set.\n         tmp_asm_copy = assumptions.copy()\n+        if 'finite' in assumptions:\n+            tmp_asm_copy['finite'] = assumptions['finite']\n \n         # be strict about commutativity\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9bc1e52..d71811d 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -76,6 +76,8 @@ class Symbol(AtomicExpr, Boolean):\n         obj = Expr.__new__(cls)\n         obj.name = name\n         tmp_asm_copy = assumptions.copy()\n+        if 'finite' in assumptions:\n+            tmp_asm_copy['finite'] = assumptions['finite']\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n         assumptions['commutative'] = is_commutative\n         obj._assumptions = StdFactKB(assumptions)\n", "normalized_occurrence": 1}
