{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..c9a10bd 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -923,45 +923,25 @@ class PrettyPrinter(Printer):\n                     o1.append(arg_str + ' ' + k._pretty_form)\n                 vectstrs.append(k._pretty_form)\n \n-        #outstr = u(\"\").join(o1)\n         if o1[0].startswith(u\" + \"):\n             o1[0] = o1[0][3:]\n         elif o1[0].startswith(\" \"):\n             o1[0] = o1[0][1:]\n-        #Fixing the newlines\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            # XXX: What is this hack?\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j+1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' '*(lengths[-1] -\n-                                                   len(parts[j])+\n-                                                   3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    strs[j] += ' '*(lengths[-1]+3)\n \n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+        # Fixing the newlines and ensuring proper alignment\n+        lengths = [len(partstr.split('\\n')[0]) for partstr in o1]\n+        max_length = max(lengths)\n+        formatted_lines = []\n+\n+        for partstr in o1:\n+            lines = partstr.split('\\n')\n+            for i, line in enumerate(lines):\n+                if i >= len(formatted_lines):\n+                    formatted_lines.append(' ' * max_length)\n+                formatted_lines[i] += line.ljust(max_length) + ' + '\n+\n+        formatted_lines = [line.rstrip(' + ') for line in formatted_lines]\n+        return prettyForm(u'\\n'.join(formatted_lines))\n \n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..335b488 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -667,31 +667,17 @@ class PrettyPrinter(Printer):\n             o1[0] = o1[0][3:]\n         elif o1[0].startswith(' '):\n             o1[0] = o1[0][1:]\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'⎞', u'⎞' + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j + 1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    strs[j] += ' ' * (lengths[-1] + 3)\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+        lengths = [len(partstr.split('\\n')[0]) for partstr in o1]\n+        max_length = max(lengths)\n+        formatted_lines = []\n+        for partstr in o1:\n+            lines = partstr.split('\\n')\n+            for i, line in enumerate(lines):\n+                if i >= len(formatted_lines):\n+                    formatted_lines.append(' ' * max_length)\n+                formatted_lines[i] += line.ljust(max_length) + ' + '\n+        formatted_lines = [line.rstrip(' + ') for line in formatted_lines]\n+        return prettyForm(u'\\n'.join(formatted_lines))\n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n         if expr.rank() == 0:\n", "normalized_occurrence": 1}
