{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..2b03ec3 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -300,6 +300,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             )\n             if trans not in {\"passthrough\", \"drop\"}\n         )\n+        if self._remainder[1] not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n \n@@ -814,6 +816,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             fitted=True,\n             column_as_strings=fit_dataframe_and_transform_dataframe,\n         )\n+        if self._remainder[1] not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         self._validate_output(Xs)\n \n         if not Xs:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..5e48330 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -45,6 +45,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n+        if self._remainder[1] not in {'passthrough', 'drop'}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n         return self\n@@ -239,6 +241,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         else:\n             self._check_n_features(X, reset=False)\n         Xs = self._fit_transform(X, None, _transform_one, fitted=True, column_as_strings=fit_dataframe_and_transform_dataframe)\n+        if self._remainder[1] not in {'passthrough', 'drop'}:\n+            _safe_set_output(self._remainder[1], transform=transform)\n         self._validate_output(Xs)\n         if not Xs:\n             return np.zeros((X.shape[0], 0))\n", "normalized_occurrence": 1}
