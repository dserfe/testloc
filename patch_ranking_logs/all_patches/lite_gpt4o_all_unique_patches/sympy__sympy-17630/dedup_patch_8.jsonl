{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..36d3684 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -463,9 +463,21 @@ def bc_matmul(expr):\n     i = 0\n     while (i+1 < len(matrices)):\n         A, B = matrices[i:i+2]\n+        from sympy.matrices.expressions.matexpr import ZeroMatrix\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n             matrices[i] = A._blockmul(B)\n             matrices.pop(i+1)\n+        elif isinstance(A, BlockMatrix):\n+            if isinstance(B, ZeroMatrix):\n+                B = BlockMatrix([[B]])\n+            matrices[i] = A._blockmul(BlockMatrix([[B]]))\n+            matrices.pop(i+1)\n+        elif isinstance(B, BlockMatrix):\n+            if isinstance(A, ZeroMatrix):\n+                A = BlockMatrix([[A]])\n+            matrices[i] = BlockMatrix([[A]])._blockmul(B)\n+            matrices[i] = A._blockmul(B)\n+            matrices.pop(i+1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n             matrices.pop(i+1)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..7141126 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -236,9 +236,21 @@ def bc_matmul(expr):\n     i = 0\n     while i + 1 < len(matrices):\n         A, B = matrices[i:i + 2]\n+        from sympy.matrices.expressions.matexpr import ZeroMatrix\n         if isinstance(A, BlockMatrix) and isinstance(B, BlockMatrix):\n             matrices[i] = A._blockmul(B)\n             matrices.pop(i + 1)\n+        elif isinstance(A, BlockMatrix):\n+            if isinstance(B, ZeroMatrix):\n+                B = BlockMatrix([[B]])\n+            matrices[i] = A._blockmul(BlockMatrix([[B]]))\n+            matrices.pop(i + 1)\n+        elif isinstance(B, BlockMatrix):\n+            if isinstance(A, ZeroMatrix):\n+                A = BlockMatrix([[A]])\n+            matrices[i] = BlockMatrix([[A]])._blockmul(B)\n+            matrices[i] = A._blockmul(B)\n+            matrices.pop(i + 1)\n         elif isinstance(A, BlockMatrix):\n             matrices[i] = A._blockmul(BlockMatrix([[B]]))\n             matrices.pop(i + 1)\n", "normalized_occurrence": 1}
