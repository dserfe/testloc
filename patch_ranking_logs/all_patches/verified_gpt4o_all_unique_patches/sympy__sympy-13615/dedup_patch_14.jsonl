{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..77b5cb8 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -183,7 +183,10 @@ class Set(Basic):\n         UniversalSet() \\ Interval(0, 1)\n \n         \"\"\"\n-        return Complement(universe, self)\n+        if isinstance(universe, Interval):\n+            return Complement(universe, self)\n+        else:\n+            return Complement(self, universe)\n \n     def _complement(self, other):\n         # this behaves as other - self\n@@ -217,7 +220,7 @@ class Set(Basic):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            return FiniteSet(*[el for el in other if self.contains(el) != True]) + FiniteSet(*[el for el in self if not el.is_number])\n \n     def symmetric_difference(self, other):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..5249954 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -54,7 +54,10 @@ class Set(Basic):\n     def _union(self, other):\n         return None\n     def complement(self, universe):\n-        return Complement(universe, self)\n+        if isinstance(universe, Interval):\n+            return Complement(universe, self)\n+        else:\n+            return Complement(self, universe)\n     def _complement(self, other):\n         if isinstance(other, ProductSet):\n             switch_sets = ProductSet((FiniteSet(o, o - s) for s, o in zip(self.sets, other.sets)))\n@@ -70,7 +73,7 @@ class Set(Basic):\n         elif isinstance(other, EmptySet):\n             return S.EmptySet\n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            return FiniteSet(*[el for el in other if self.contains(el) != True]) + FiniteSet(*[el for el in self if not el.is_number])\n     def symmetric_difference(self, other):\n         return SymmetricDifference(self, other)\n     def _symmetric_difference(self, other):\n", "normalized_occurrence": 1}
