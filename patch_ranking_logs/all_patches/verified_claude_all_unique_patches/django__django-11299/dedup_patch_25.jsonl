{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 4b9cb31..af77e12 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -27,6 +27,8 @@ class BaseConstraint:\n         return self.__class__(*args, **kwargs)\n \n \n+import re\n+\n class CheckConstraint(BaseConstraint):\n     def __init__(self, *, check, name):\n         self.check = check\n@@ -37,7 +39,12 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n-        return sql % tuple(schema_editor.quote_value(p) for p in params)\n+        sql = sql % tuple(schema_editor.quote_value(p) for p in params)\n+        # Remove table name qualification from column references\n+        table_name = model._meta.db_table\n+        qualified_pattern = r'\"%s\"\\.\"([^\"]+)\"' % (schema_editor.quote_name(table_name))\n+        sql = re.sub(qualified_pattern, r'\"\\1\"', sql)\n+        return sql\n \n     def constraint_sql(self, model, schema_editor):\n         check = self._get_check_sql(model, schema_editor)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex cc6f0d3..b2a6982 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -17,6 +17,7 @@ class BaseConstraint:\n     def clone(self):\n         _, args, kwargs = self.deconstruct()\n         return self.__class__(*args, **kwargs)\n+import re\n class CheckConstraint(BaseConstraint):\n     def __init__(self, *, check, name):\n         self.check = check\n@@ -26,7 +27,11 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n-        return sql % tuple((schema_editor.quote_value(p) for p in params))\n+        sql = sql % tuple((schema_editor.quote_value(p) for p in params))\n+        table_name = model._meta.db_table\n+        qualified_pattern = '\"%s\"\\\\.\"([^\"]+)\"' % schema_editor.quote_name(table_name)\n+        sql = re.sub(qualified_pattern, '\"\\\\1\"', sql)\n+        return sql\n     def constraint_sql(self, model, schema_editor):\n         check = self._get_check_sql(model, schema_editor)\n         return schema_editor._check_sql(self.name, check)\n", "normalized_occurrence": 1}
