{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13497", "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex 94d6d73..4839734 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -247,13 +247,14 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n \n-    if discrete_features == 'auto':\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n         discrete_features = issparse(X)\n \n     if isinstance(discrete_features, bool):\n         discrete_mask = np.empty(n_features, dtype=bool)\n         discrete_mask.fill(discrete_features)\n-    else:\n+    elif isinstance(discrete_features, (list, np.ndarray)):\n+        raise ValueError(\"discrete_features must be 'auto', a boolean, or an array of indices/boolean mask\")\n         discrete_features = np.asarray(discrete_features)\n         if discrete_features.dtype != 'bool':\n             discrete_mask = np.zeros(n_features, dtype=bool)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex 11d30f9..79c037b 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -80,12 +80,13 @@ def _iterate_columns(X, columns=None):\n def _estimate_mi(X, y, discrete_features='auto', discrete_target=False, n_neighbors=3, copy=True, random_state=None):\n     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)\n     n_samples, n_features = X.shape\n-    if discrete_features == 'auto':\n+    if isinstance(discrete_features, str) and discrete_features == 'auto':\n         discrete_features = issparse(X)\n     if isinstance(discrete_features, bool):\n         discrete_mask = np.empty(n_features, dtype=bool)\n         discrete_mask.fill(discrete_features)\n-    else:\n+    elif isinstance(discrete_features, (list, np.ndarray)):\n+        raise ValueError(\"discrete_features must be 'auto', a boolean, or an array of indices/boolean mask\")\n         discrete_features = np.asarray(discrete_features)\n         if discrete_features.dtype != 'bool':\n             discrete_mask = np.zeros(n_features, dtype=bool)\n", "normalized_occurrence": 1}
