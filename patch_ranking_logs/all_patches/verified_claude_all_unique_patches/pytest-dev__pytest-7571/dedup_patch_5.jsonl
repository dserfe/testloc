{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..46f9d6e 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -346,6 +346,7 @@ class LogCaptureFixture:\n         self._item = item\n         # dict of log name -> log level\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n+        self._initial_handler_level = None  # type: Optional[int]\n \n     def _finalize(self) -> None:\n         \"\"\"Finalizes the fixture.\n@@ -356,6 +357,9 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        # restore handler level\n+        if self._initial_handler_level is not None:\n+            self.handler.setLevel(self._initial_handler_level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..0670447 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -164,10 +164,13 @@ class LogCaptureFixture:\n     def __init__(self, item: nodes.Node) -> None:\n         self._item = item\n         self._initial_logger_levels = {}\n+        self._initial_handler_level = None\n     def _finalize(self) -> None:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        if self._initial_handler_level is not None:\n+            self.handler.setLevel(self._initial_handler_level)\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n", "normalized_occurrence": 1}
