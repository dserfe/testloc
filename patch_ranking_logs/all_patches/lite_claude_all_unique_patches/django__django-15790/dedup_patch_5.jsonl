{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15790", "model_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex df5ecff..3f071a2 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -50,15 +50,15 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)  # Using set instead of list to prevent duplicates\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n@@ -66,10 +66,10 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n                 Error(\n                     E003.msg.format(\n                         repr(library_name),\n-                        \", \".join(repr(item) for item in items),\n+                        \", \".join(repr(item) for item in sorted(items)),  # Sort for consistent output\n                     ),\n                     id=E003.id,\n                 )\n             )\n \n-    return errors\n+    return errors\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 768c076..84e6c62 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -22,14 +22,14 @@ def check_string_if_invalid_is_string(app_configs, **kwargs):\n @register(Tags.templates)\n def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     errors = []\n-    libraries = defaultdict(list)\n+    libraries = defaultdict(set)\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get('OPTIONS', {}).get('libraries', {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            libraries[module_name].add(module_path)\n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        libraries[module_name].add(module_path)\n     for library_name, items in libraries.items():\n         if len(items) > 1:\n-            errors.append(Error(E003.msg.format(repr(library_name), ', '.join((repr(item) for item in items))), id=E003.id))\n+            errors.append(Error(E003.msg.format(repr(library_name), ', '.join((repr(item) for item in sorted(items)))), id=E003.id))\n     return errors\n\\ No newline at end of file\n", "normalized_occurrence": 2}
