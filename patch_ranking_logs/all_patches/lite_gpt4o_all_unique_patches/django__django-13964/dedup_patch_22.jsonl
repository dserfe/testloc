{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 9b658fb..314c5a3 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -644,10 +644,24 @@ class ForeignObject(RelatedField):\n         return tuple(rhs_field for lhs_field, rhs_field in self.related_fields if rhs_field)\n \n     def get_local_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        values = self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        # Update values if the related instance's primary key has changed\n+        for field in self.local_related_fields:\n+            if field.primary_key:\n+                related_instance = getattr(instance, self.name, None)\n+                if related_instance and related_instance.pk != values[0]:\n+                    return (related_instance.pk,)\n+        return values\n \n     def get_foreign_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n+        values = self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n+        # Update values if the related instance's primary key has changed\n+        for field in self.foreign_related_fields:\n+            if field.primary_key:\n+                related_instance = getattr(instance, self.name, None)\n+                if related_instance and related_instance.pk != values[0]:\n+                    return (related_instance.pk,)\n+        return values\n \n     @staticmethod\n     def get_instance_value_for_fields(instance, fields):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 2261016..736bc3a 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -279,9 +279,21 @@ class ForeignObject(RelatedField):\n     def foreign_related_fields(self):\n         return tuple((rhs_field for lhs_field, rhs_field in self.related_fields if rhs_field))\n     def get_local_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        values = self.get_instance_value_for_fields(instance, self.local_related_fields)\n+        for field in self.local_related_fields:\n+            if field.primary_key:\n+                related_instance = getattr(instance, self.name, None)\n+                if related_instance and related_instance.pk != values[0]:\n+                    return (related_instance.pk,)\n+        return values\n     def get_foreign_related_value(self, instance):\n-        return self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n+        values = self.get_instance_value_for_fields(instance, self.foreign_related_fields)\n+        for field in self.foreign_related_fields:\n+            if field.primary_key:\n+                related_instance = getattr(instance, self.name, None)\n+                if related_instance and related_instance.pk != values[0]:\n+                    return (related_instance.pk,)\n+        return values\n     @staticmethod\n     def get_instance_value_for_fields(instance, fields):\n         ret = []\n", "normalized_occurrence": 1}
