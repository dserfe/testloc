{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 77fd48c..088dccd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1716,12 +1716,18 @@ class DataDocumenter(ModuleLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                    objrepr = self.config.autodoc_type_aliases[objrepr]\n+                objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                        objrepr = self.config.autodoc_type_aliases[objrepr]\n+                    self.add_line('   :type: ' + objrepr,\n                                   sourcename)\n \n             try:\n@@ -2107,12 +2113,18 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n                 annotations = {}\n \n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                    objrepr = self.config.autodoc_type_aliases[objrepr]\n+                objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key],\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                        objrepr = self.config.autodoc_type_aliases[objrepr]\n+                    self.add_line('   :type: ' + objrepr,\n                                   sourcename)\n \n             # data descriptors do not have useful values\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2484638..cbc7fae 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -965,12 +965,18 @@ class DataDocumenter(ModuleLevelDocumenter):\n             except AttributeError:\n                 annotations = {}\n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                    objrepr = self.config.autodoc_type_aliases[objrepr]\n+                objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key], sourcename)\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                        objrepr = self.config.autodoc_type_aliases[objrepr]\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n             try:\n                 if self.object is UNINITIALIZED_ATTR:\n                     pass\n@@ -1223,12 +1229,18 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n             except AttributeError:\n                 annotations = {}\n             if self.objpath[-1] in annotations:\n-                objrepr = stringify_typehint(annotations.get(self.objpath[-1]))\n+                objrepr = annotations.get(self.objpath[-1])\n+                if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                    objrepr = self.config.autodoc_type_aliases[objrepr]\n+                objrepr = stringify_typehint(objrepr)\n                 self.add_line('   :type: ' + objrepr, sourcename)\n             else:\n                 key = ('.'.join(self.objpath[:-1]), self.objpath[-1])\n                 if self.analyzer and key in self.analyzer.annotations:\n-                    self.add_line('   :type: ' + self.analyzer.annotations[key], sourcename)\n+                    objrepr = self.analyzer.annotations[key]\n+                    if isinstance(objrepr, str) and objrepr in self.config.autodoc_type_aliases:\n+                        objrepr = self.config.autodoc_type_aliases[objrepr]\n+                    self.add_line('   :type: ' + objrepr, sourcename)\n             if not self._datadescriptor:\n                 try:\n                     if self.object is INSTANCEATTR:\n", "normalized_occurrence": 1}
