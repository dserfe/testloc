{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..5637f82 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -400,12 +400,12 @@ class LatexPrinter(Printer):\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n+                    and ldenom <= 3 and not \"^\" in sdenom:\n                 # handle short fractions\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n+                if self._needs_mul_brackets(expr, last=False):\n+                    tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n                 else:\n-                    tex += r\"%s / %s\" % (snumer, sdenom)\n+                    tex += r\"\\frac{%s}{%s}\" % (snumer, sdenom)\n             elif len(snumer.split()) > ratio*ldenom:\n                 # handle long fractions\n                 if self._needs_mul_brackets(numer, last=True):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..9ce7a72 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -196,11 +196,11 @@ class LatexPrinter(Printer):\n             sdenom = convert(denom)\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n+            if self._settings['fold_short_frac'] and ldenom <= 3 and (not '^' in sdenom):\n+                if self._needs_mul_brackets(expr, last=False):\n+                    tex += '\\\\frac{%s}{%s}' % (snumer, sdenom)\n                 else:\n-                    tex += '%s / %s' % (snumer, sdenom)\n+                    tex += '\\\\frac{%s}{%s}' % (snumer, sdenom)\n             elif len(snumer.split()) > ratio * ldenom:\n                 if self._needs_mul_brackets(numer, last=True):\n                     tex += '\\\\frac{1}{%s}%s\\\\left(%s\\\\right)' % (sdenom, separator, snumer)\n", "normalized_occurrence": 1}
