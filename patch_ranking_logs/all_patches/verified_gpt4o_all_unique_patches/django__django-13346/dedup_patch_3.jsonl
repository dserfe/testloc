{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..16d6a0b 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -325,7 +325,17 @@ class KeyTextTransform(KeyTransform):\n     postgres_nested_operator = '#>>'\n \n \n-class KeyTransformTextLookupMixin:\n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        if not isinstance(self.rhs, (list, tuple)):\n+            return super().process_rhs(compiler, connection)\n+\n+        sqls, sqls_params = [], []\n+        for value in self.rhs:\n+            sql, params = super().process_rhs(compiler, connection, value)\n+            sqls.append(sql)\n+            sqls_params.extend(params)\n+        return '(%s)' % ', '.join(sqls), sqls_params\n     \"\"\"\n     Mixin for combining with a lookup expecting a text lhs from a JSONField\n     key lookup. On PostgreSQL, make use of the ->> operator instead of casting\n@@ -482,6 +492,7 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIContains)\n KeyTransform.register_lookup(KeyTransformStartsWith)\n KeyTransform.register_lookup(KeyTransformIStartsWith)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..060bf8d 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -223,7 +223,17 @@ class KeyTransform(Transform):\n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n     postgres_nested_operator = '#>>'\n-class KeyTransformTextLookupMixin:\n+class KeyTransformIn(lookups.In):\n+    def process_rhs(self, compiler, connection):\n+        if not isinstance(self.rhs, (list, tuple)):\n+            return super().process_rhs(compiler, connection)\n+        sqls, sqls_params = ([], [])\n+        for value in self.rhs:\n+            sql, params = super().process_rhs(compiler, connection, value)\n+            sqls.append(sql)\n+            sqls_params.extend(params)\n+        return ('(%s)' % ', '.join(sqls), sqls_params)\n+    '\\n    Mixin for combining with a lookup expecting a text lhs from a JSONField\\n    key lookup. On PostgreSQL, make use of the ->> operator instead of casting\\n    key values to text and performing the lookup on the resulting\\n    representation.\\n    '\n     def __init__(self, key_transform, *args, **kwargs):\n         if not isinstance(key_transform, KeyTransform):\n             raise TypeError('Transform should be an instance of KeyTransform in order to use this lookup.')\n@@ -316,6 +326,7 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual\n KeyTransform.register_lookup(KeyTransformExact)\n KeyTransform.register_lookup(KeyTransformIExact)\n KeyTransform.register_lookup(KeyTransformIsNull)\n+KeyTransform.register_lookup(KeyTransformIn)\n KeyTransform.register_lookup(KeyTransformIContains)\n KeyTransform.register_lookup(KeyTransformStartsWith)\n KeyTransform.register_lookup(KeyTransformIStartsWith)\n", "normalized_occurrence": 1}
