{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..0aeb064 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -965,6 +965,87 @@ warn_explicit(\n         return res, explanation\n \n     def visit_Call_35(self, call):\n+        \"\"\"\n+        visit `ast.Call` nodes on Python3.5 and after\n+        \"\"\"\n+        # Special handling for all() and any() with generator expressions\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in ('all', 'any') and \n+            len(call.args) == 1 and \n+            isinstance(call.args[0], ast.GeneratorExp)):\n+            \n+            gen_expr = call.args[0]\n+            is_all = call.func.id == 'all'\n+            \n+            # Create result variable\n+            result_var = self.variable()\n+            self.statements.append(\n+                ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True))\n+            )\n+            \n+            # Create loop body\n+            test_expr = gen_expr.elt\n+            loop_body = []\n+            \n+            # For all(): if test fails, set result False and break\n+            # For any(): if test passes, set result True and break\n+            if is_all:\n+                loop_body.extend([\n+                    ast.If(\n+                        ast.UnaryOp(ast.Not(), test_expr),\n+                        [\n+                            ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(False)),\n+                            ast.Break()\n+                        ],\n+                        []\n+                    )\n+                ])\n+            else:\n+                loop_body.extend([\n+                    ast.If(\n+                        test_expr,\n+                        [\n+                            ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)),\n+                            ast.Break()\n+                        ],\n+                        []\n+                    )\n+                ])\n+            \n+            # Create the for loop\n+            loop = ast.For(\n+                gen_expr.generators[0].target,\n+                gen_expr.generators[0].iter,\n+                loop_body,\n+                []\n+            )\n+            self.statements.append(loop)\n+            \n+            return ast.Name(result_var, ast.Load()), \"all/any test\"\n+            \n+        # Normal function call handling\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n@@ -1081,4 +1162,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..f590e03 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,41 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1) and isinstance(call.args[0], ast.GeneratorExp):\n+            gen_expr = call.args[0]\n+            is_all = call.func.id == 'all'\n+            result_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)))\n+            test_expr = gen_expr.elt\n+            loop_body = []\n+            if is_all:\n+                loop_body.extend([ast.If(ast.UnaryOp(ast.Not(), test_expr), [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(False)), ast.Break()], [])])\n+            else:\n+                loop_body.extend([ast.If(test_expr, [ast.Assign([ast.Name(result_var, ast.Store())], ast.NameConstant(True)), ast.Break()], [])])\n+            loop = ast.For(gen_expr.generators[0].target, gen_expr.generators[0].iter, loop_body, [])\n+            self.statements.append(loop)\n+            return (ast.Name(result_var, ast.Load()), 'all/any test')\n+        new_func, func_expl = self.visit(call.func)\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
