{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..de1c073 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -395,12 +395,18 @@ class DimensionSystem(Basic, _QuantityMapper):\n                 raise TypeError(\"The exponent for the power operator must be a Symbol or dimensionless.\")\n \n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+            \n+            if dimension.name.func == exp:\n+                if dicts[0] == {}:\n+                    return {}\n+                else:\n+                    raise TypeError(\"The input argument for the exponential function must be dimensionless.\")\n+            \n             args = (Dimension._from_dimensional_dependencies(\n                 get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n \n-            dicts = [get_for_name(i) for i in dimension.name.args]\n-\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..6ba7850 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -225,9 +225,14 @@ class DimensionSystem(Basic, _QuantityMapper):\n             else:\n                 raise TypeError('The exponent for the power operator must be a Symbol or dimensionless.')\n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+            if dimension.name.func == exp:\n+                if dicts[0] == {}:\n+                    return {}\n+                else:\n+                    raise TypeError('The input argument for the exponential function must be dimensionless.')\n             args = (Dimension._from_dimensional_dependencies(get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n-            dicts = [get_for_name(i) for i in dimension.name.args]\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n", "normalized_occurrence": 1}
