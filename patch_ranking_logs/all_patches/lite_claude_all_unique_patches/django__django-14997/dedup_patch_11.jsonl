{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..800c769 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -422,6 +422,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if isinstance(constraint, UniqueConstraint) and (\n             constraint.condition or\n             constraint.contains_expressions or\n+            any(getattr(field, 'contains_expressions', False) for field in constraint.fields) or\n             constraint.include or\n             constraint.deferrable\n         ):\n@@ -433,6 +434,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         if isinstance(constraint, UniqueConstraint) and (\n             constraint.condition or\n             constraint.contains_expressions or\n+            any(getattr(field, 'contains_expressions', False) for field in constraint.fields) or\n             constraint.include or\n             constraint.deferrable\n         ):\n@@ -441,4 +443,4 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             self._remake_table(model)\n \n     def _collate_sql(self, collation):\n-        return 'COLLATE ' + collation\n+        return 'COLLATE ' + collation\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..7f786ee 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -201,12 +201,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         self.execute('INSERT INTO %s (%s) SELECT %s FROM %s' % (self.quote_name(new_field.remote_field.through._meta.db_table), ', '.join(['id', new_field.m2m_column_name(), new_field.m2m_reverse_name()]), ', '.join(['id', old_field.m2m_column_name(), old_field.m2m_reverse_name()]), self.quote_name(old_field.remote_field.through._meta.db_table)))\n         self.delete_model(old_field.remote_field.through)\n     def add_constraint(self, model, constraint):\n-        if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n+        if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or any((getattr(field, 'contains_expressions', False) for field in constraint.fields)) or constraint.include or constraint.deferrable):\n             super().add_constraint(model, constraint)\n         else:\n             self._remake_table(model)\n     def remove_constraint(self, model, constraint):\n-        if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or constraint.include or constraint.deferrable):\n+        if isinstance(constraint, UniqueConstraint) and (constraint.condition or constraint.contains_expressions or any((getattr(field, 'contains_expressions', False) for field in constraint.fields)) or constraint.include or constraint.deferrable):\n             super().remove_constraint(model, constraint)\n         else:\n             self._remake_table(model)\n", "normalized_occurrence": 1}
