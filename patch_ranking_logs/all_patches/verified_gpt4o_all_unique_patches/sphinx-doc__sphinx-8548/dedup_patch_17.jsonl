{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..c334bda 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -668,14 +668,9 @@ class Documenter:\n         \"\"\"\n         def is_filtered_inherited_member(name: str) -> bool:\n             if inspect.isclass(self.object):\n-                for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n-                        # given member is a member of specified *super class*\n+                for cls in self.object.__mro__[1:]:  # skip the first one (self.object)\n+                    if name in cls.__dict__:\n                         return True\n-                    elif name in cls.__dict__:\n-                        return False\n-                    elif name in self.get_attr(cls, '__annotations__', {}):\n-                        return False\n \n             return False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c754f31..60146db 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -342,13 +342,9 @@ class Documenter:\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n         def is_filtered_inherited_member(name: str) -> bool:\n             if inspect.isclass(self.object):\n-                for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+                for cls in self.object.__mro__[1:]:\n+                    if name in cls.__dict__:\n                         return True\n-                    elif name in cls.__dict__:\n-                        return False\n-                    elif name in self.get_attr(cls, '__annotations__', {}):\n-                        return False\n             return False\n         ret = []\n         namespace = '.'.join(self.objpath)\n", "normalized_occurrence": 1}
