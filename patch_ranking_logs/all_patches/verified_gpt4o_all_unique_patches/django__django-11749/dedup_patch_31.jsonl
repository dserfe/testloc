{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..c599db1 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,12 +130,22 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n+    # Any required arguments or mutually exclusive group arguments which are passed in via **options must be passed\n     # to parse_args().\n-    parse_args += [\n+    required_args = [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n         for opt in parser_actions if opt.required and opt.dest in options\n     ]\n+    mutually_exclusive_groups = [\n+        group for group in parser._mutually_exclusive_groups if group.required\n+    ]\n+    group_args = []\n+    for group in mutually_exclusive_groups:\n+        for opt in group._group_actions:\n+            if opt.dest in options:\n+                group_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))\n+                break\n+    parse_args += required_args + group_args\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     # Raise an error if any unknown options were passed.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..e6d303e 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,15 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    required_args = ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    mutually_exclusive_groups = [group for group in parser._mutually_exclusive_groups if group.required]\n+    group_args = []\n+    for group in mutually_exclusive_groups:\n+        for opt in group._group_actions:\n+            if opt.dest in options:\n+                group_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))\n+                break\n+    parse_args += required_args + group_args\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
