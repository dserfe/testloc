{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..719d3aa 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,6 +213,8 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n+                if not exists(self.env.doc2path(uri.split('#')[0])):\n+                    return 'broken', 'Local file does not exist', 0\n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n@@ -321,7 +323,18 @@ class CheckExternalLinksBuilder(Builder):\n             self.wqueue.put((uri, docname, lineno), False)\n             n += 1\n \n-        # image nodes\n+        # handle local references\n+        for refnode in doctree.traverse(nodes.reference):\n+            if 'refuri' in refnode and not refnode['refuri'].startswith(('http:', 'https:')):\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n+                if not exists(self.env.doc2path(uri.split('#')[0])):\n+                    self.rqueue.put((uri, docname, lineno, 'broken', 'Local file does not exist', 0))\n+                else:\n+                    self.rqueue.put((uri, docname, lineno, 'working', 'Local link is valid', 0))\n+                n += 1\n+\n+        # external references\n         for imgnode in doctree.traverse(nodes.image):\n             uri = imgnode['candidates'].get('?')\n             if uri and '://' in uri:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..52a1196 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,6 +133,8 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n+                if not exists(self.env.doc2path(uri.split('#')[0])):\n+                    return ('broken', 'Local file does not exist', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n@@ -217,6 +219,15 @@ class CheckExternalLinksBuilder(Builder):\n             lineno = get_node_line(refnode)\n             self.wqueue.put((uri, docname, lineno), False)\n             n += 1\n+        for refnode in doctree.traverse(nodes.reference):\n+            if 'refuri' in refnode and (not refnode['refuri'].startswith(('http:', 'https:'))):\n+                uri = refnode['refuri']\n+                lineno = get_node_line(refnode)\n+                if not exists(self.env.doc2path(uri.split('#')[0])):\n+                    self.rqueue.put((uri, docname, lineno, 'broken', 'Local file does not exist', 0))\n+                else:\n+                    self.rqueue.put((uri, docname, lineno, 'working', 'Local link is valid', 0))\n+                n += 1\n         for imgnode in doctree.traverse(nodes.image):\n             uri = imgnode['candidates'].get('?')\n             if uri and '://' in uri:\n", "normalized_occurrence": 1}
