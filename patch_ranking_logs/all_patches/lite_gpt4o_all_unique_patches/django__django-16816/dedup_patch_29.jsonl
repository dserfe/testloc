{"model_name_or_path": "agentless", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..cbf4ddf 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -901,9 +901,11 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n+                # Updated to cover the AttributeError case\n                 return [\n                     checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n+                        \"The value of '%s' refers to '%s', which does not exist on '%s' or '%s'\"\n+                        % (label, item, obj.__class__.__name__, obj.model.__name__),\n                         \"callable, an attribute of '%s', or an attribute or \"\n                         \"method on '%s'.\"\n                         % (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..b90ba8e 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -343,7 +343,7 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             try:\n                 field = getattr(obj.model, item)\n             except AttributeError:\n-                return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n+                return [checks.Error(\"The value of '%s' refers to '%s', which does not exist on '%s' or '%s'\" % (label, item, obj.__class__.__name__, obj.model.__name__), \"callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n         if isinstance(field, models.ManyToManyField) or (getattr(field, 'rel', None) and field.rel.field.many_to_one):\n             return [checks.Error(f\"The value of '{label}' must not be a many-to-many field or a reverse foreign key.\", obj=obj.__class__, id='admin.E109')]\n         return []\n", "normalized_occurrence": 1}
