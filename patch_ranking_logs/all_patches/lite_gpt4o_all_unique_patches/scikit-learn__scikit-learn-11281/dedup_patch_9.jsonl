{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..3ad1f48 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -596,6 +596,12 @@ class GaussianMixture(BaseMixture):\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n \n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit and then predict labels for data.\"\"\"\n+\n+        self.fit(X)\n+        return self.predict(X)\n+\n     def _check_parameters(self, X):\n         \"\"\"Check the Gaussian mixture parameters are well defined.\"\"\"\n         _, n_features = X.shape\n@@ -653,6 +659,7 @@ class GaussianMixture(BaseMixture):\n             self.precisions_cholesky_ = self.precisions_init\n \n     def _m_step(self, X, log_resp):\n+        self.labels_ = self.predict(X)\n         \"\"\"M step.\n \n         Parameters\n@@ -747,4 +754,4 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex ff762d7..8ced390 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -122,6 +122,9 @@ class GaussianMixture(BaseMixture):\n         self.weights_init = weights_init\n         self.means_init = means_init\n         self.precisions_init = precisions_init\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        return self.predict(X)\n     def _check_parameters(self, X):\n         _, n_features = X.shape\n         if self.covariance_type not in ['spherical', 'tied', 'diag', 'full']:\n@@ -148,6 +151,7 @@ class GaussianMixture(BaseMixture):\n         else:\n             self.precisions_cholesky_ = self.precisions_init\n     def _m_step(self, X, log_resp):\n+        self.labels_ = self.predict(X)\n         n_samples, _ = X.shape\n         self.weights_, self.means_, self.covariances_ = _estimate_gaussian_parameters(X, np.exp(log_resp), self.reg_covar, self.covariance_type)\n         self.weights_ /= n_samples\n", "normalized_occurrence": 1}
