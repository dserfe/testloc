{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..7ced782 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -108,7 +108,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' or parts[0].startswith('*'):\n             arguments['return'] = {'type': True}\n \n     for name, annotation in annotations.items():\n@@ -121,7 +121,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and not name.startswith('*'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -163,14 +163,14 @@ def augment_descriptions_with_types(\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' or parts[0].startswith('*'):\n             has_type.add('return')\n \n     # Add 'type' for parameters with a description but no declared type.\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+        if name in has_description and name not in has_type and not name.startswith('*'):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..53ed6d2 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -80,7 +80,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' or parts[0].startswith('*'):\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n         if name == 'return':\n@@ -91,7 +91,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n-        if not arg.get('param'):\n+        if not arg.get('param') and (not name.startswith('*')):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n@@ -123,12 +123,12 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             has_type.add(name)\n         elif parts[0] in ('return', 'returns'):\n             has_description.add('return')\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' or parts[0].startswith('*'):\n             has_type.add('return')\n     for name in annotations:\n         if name in ('return', 'returns'):\n             continue\n-        if name in has_description and name not in has_type:\n+        if name in has_description and name not in has_type and (not name.startswith('*')):\n             field = nodes.field()\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n", "normalized_occurrence": 1}
