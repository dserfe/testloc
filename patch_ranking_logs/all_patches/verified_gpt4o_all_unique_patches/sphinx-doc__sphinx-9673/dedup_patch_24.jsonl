{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9673", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex ea465e6..a6de905 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -769,17 +769,13 @@ class GoogleDocstring:\n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n         multi = len(fields) > 1\n-        if multi:\n-            use_rtype = False\n-        else:\n-            use_rtype = self._config.napoleon_use_rtype\n+        use_rtype = self._config.napoleon_use_rtype\n \n         lines: List[str] = []\n         for _name, _type, _desc in fields:\n-            if use_rtype:\n-                field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n+            if not _type and 'return' in self.annotations:\n+                _type = self.annotations['return']\n+            field = self._format_field(_name, _type, _desc)\n \n             if multi:\n                 if lines:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex bc7a995..202411d 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -507,16 +507,12 @@ class GoogleDocstring:\n     def _parse_returns_section(self, section: str) -> List[str]:\n         fields = self._consume_returns_section()\n         multi = len(fields) > 1\n-        if multi:\n-            use_rtype = False\n-        else:\n-            use_rtype = self._config.napoleon_use_rtype\n+        use_rtype = self._config.napoleon_use_rtype\n         lines: List[str] = []\n         for _name, _type, _desc in fields:\n-            if use_rtype:\n-                field = self._format_field(_name, '', _desc)\n-            else:\n-                field = self._format_field(_name, _type, _desc)\n+            if not _type and 'return' in self.annotations:\n+                _type = self.annotations['return']\n+            field = self._format_field(_name, _type, _desc)\n             if multi:\n                 if lines:\n                     lines.extend(self._format_block('          * ', field))\n", "normalized_occurrence": 1}
