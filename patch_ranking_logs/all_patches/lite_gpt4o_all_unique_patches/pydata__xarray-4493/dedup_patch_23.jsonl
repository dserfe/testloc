{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4493", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8003c0d..d31df07 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3906,7 +3906,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             If any dimensions would have inconsistent sizes in the updated\n             dataset.\n         \"\"\"\n-        merge_result = dataset_update_method(self, other)\n+        merge_result = dataset_update_method(self.copy(deep=True), other)\n         return self._replace(inplace=True, **merge_result._asdict())\n \n     def merge(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 5bd37a8..498190b 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1253,7 +1253,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                 result = result._unstack_once(dim, fill_value)\n         return result\n     def update(self, other: 'CoercibleMapping') -> 'Dataset':\n-        merge_result = dataset_update_method(self, other)\n+        merge_result = dataset_update_method(self.copy(deep=True), other)\n         return self._replace(inplace=True, **merge_result._asdict())\n     def merge(self, other: Union['CoercibleMapping', 'DataArray'], overwrite_vars: Union[Hashable, Iterable[Hashable]]=frozenset(), compat: str='no_conflicts', join: str='outer', fill_value: Any=dtypes.NA) -> 'Dataset':\n         other = other.to_dataset() if isinstance(other, xr.DataArray) else other\n", "normalized_occurrence": 1}
