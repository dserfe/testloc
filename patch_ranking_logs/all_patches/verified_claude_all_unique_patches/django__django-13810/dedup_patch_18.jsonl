{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13810", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex 2cbbab1..9f3c2f4 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -62,6 +62,9 @@ class BaseHandler:\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                # Restore handler to its previous state before adaptation\n+                handler = convert_exception_to_response(get_response if handler_is_async == is_async else\n+                         self.adapt_method_mode(handler_is_async, get_response, is_async))\n                 continue\n \n             if mw_instance is None:\n@@ -345,4 +348,4 @@ def reset_urlconf(sender, **kwargs):\n     set_urlconf(None)\n \n \n-request_finished.connect(reset_urlconf)\n+request_finished.connect(reset_urlconf)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex db9e015..2702c75 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -42,6 +42,7 @@ class BaseHandler:\n                         logger.debug('MiddlewareNotUsed(%r): %s', middleware_path, exc)\n                     else:\n                         logger.debug('MiddlewareNotUsed: %r', middleware_path)\n+                handler = convert_exception_to_response(get_response if handler_is_async == is_async else self.adapt_method_mode(handler_is_async, get_response, is_async))\n                 continue\n             if mw_instance is None:\n                 raise ImproperlyConfigured('Middleware factory %s returned None.' % middleware_path)\n", "normalized_occurrence": 1}
