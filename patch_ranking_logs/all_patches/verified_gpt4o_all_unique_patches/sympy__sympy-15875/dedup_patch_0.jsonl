{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..00e69c9 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -525,19 +525,16 @@ class Add(Expr, AssocOp):\n                 return\n         b = self.func(*nz)\n         if b.is_zero:\n-            return fuzzy_not(self.func(*im_I).is_zero)\n-        elif b.is_zero is False:\n+            if self.func(*im_I).is_zero:\n+                return None\n             return False\n \n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n-            # issue 10528: there is no way to know if a nc symbol\n-            # is zero or not\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_I = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -547,23 +544,24 @@ class Add(Expr, AssocOp):\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                im_I.append(a)\n             elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                im_I.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n+        if nz:\n+            b = self.func(*nz)\n+            if b.is_zero:\n+                if self.func(*im_I).is_zero:\n+                    return True\n+                return None\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+        if all(a.is_zero is not False for a in im_I):\n+            return None\n+        return False\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..b83da20 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -282,16 +282,15 @@ class Add(Expr, AssocOp):\n                 return\n         b = self.func(*nz)\n         if b.is_zero:\n-            return fuzzy_not(self.func(*im_I).is_zero)\n-        elif b.is_zero is False:\n+            if self.func(*im_I).is_zero:\n+                return None\n             return False\n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im_I = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n@@ -301,23 +300,24 @@ class Add(Expr, AssocOp):\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                im_I.append(a)\n             elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                im_I.append(a)\n             else:\n                 return\n         if z == len(self.args):\n             return True\n-        if len(nz) == len(self.args):\n-            return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n+        if nz:\n+            b = self.func(*nz)\n+            if b.is_zero:\n+                if self.func(*im_I).is_zero:\n+                    return True\n+                return None\n+            if b.is_zero is False:\n                 return False\n-        if b.is_zero is False:\n-            return False\n+        if all((a.is_zero is not False for a in im_I)):\n+            return None\n+        return False\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
