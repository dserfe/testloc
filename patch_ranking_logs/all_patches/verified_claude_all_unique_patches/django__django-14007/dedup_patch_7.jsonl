{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..556d5d1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -743,11 +743,42 @@ class Field(RegisterLookupMixin):\n     def db_type_suffix(self, connection):\n         return connection.data_types_suffix.get(self.get_internal_type())\n \n+    def convert_returned_value(self, value, expression, connection):\n+        \"\"\"\n+        Public method to convert a value from database to Python representation.\n+        This is called by the model after insert/update operations to ensure\n+        consistent value conversion.\n+        \"\"\"\n+        return self._convert_returned_value(value, expression, connection)\n+\n     def get_db_converters(self, connection):\n         if hasattr(self, 'from_db_value'):\n             return [self.from_db_value]\n         return []\n \n+    def to_python(self, value):\n+        \"\"\"\n+        Convert the input value into the expected Python data type, raising\n+        django.core.exceptions.ValidationError if the data can't be converted.\n+        Return the converted value. Subclasses should override this.\n+        \"\"\"\n+        return value\n+\n+    def _convert_returned_value(self, value, expression, connection):\n+        \"\"\"\n+        Convert value returned from database to Python representation, applying\n+        all database converters including from_db_value. This ensures consistent\n+        conversion across all database operations including inserts.\n+        \"\"\"\n+        if value is None:\n+            return None\n+        \n+        converters = self.get_db_converters(connection)\n+        value = self.to_python(value)\n+        for converter in converters:\n+            value = converter(value, expression, connection)\n+        return value\n+\n     @property\n     def unique(self):\n         return self._unique or self.primary_key\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n+    def convert_returned_value(self, value, expression, connection):\n+        return self._convert_returned_value(value, expression, connection)\n+    def to_python(self, value):\n+        return value\n+    def _convert_returned_value(self, value, expression, connection):\n+        if value is None:\n+            return None\n+        converters = self.get_db_converters(connection)\n+        value = self.to_python(value)\n+        for converter in converters:\n+            value = converter(value, expression, connection)\n+        return value", "normalized_occurrence": 1}
