{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..e82ba67 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -593,6 +593,9 @@ class ScalarMappable:\n     @norm.setter\n     def norm(self, norm):\n         _api.check_isinstance((colors.Normalize, str, None), norm=norm)\n+        self._norm = norm  # Set the norm before updating the colors\n+        if hasattr(self, '_A') and self._A is not None:\n+            self.set_array(self._A)  # Re-trigger the color mapping\n         if norm is None:\n             norm = colors.Normalize()\n         elif isinstance(norm, str):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..5573eac 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -177,6 +177,9 @@ class ScalarMappable:\n     @norm.setter\n     def norm(self, norm):\n         _api.check_isinstance((colors.Normalize, str, None), norm=norm)\n+        self._norm = norm\n+        if hasattr(self, '_A') and self._A is not None:\n+            self.set_array(self._A)\n         if norm is None:\n             norm = colors.Normalize()\n         elif isinstance(norm, str):\n", "normalized_occurrence": 1}
