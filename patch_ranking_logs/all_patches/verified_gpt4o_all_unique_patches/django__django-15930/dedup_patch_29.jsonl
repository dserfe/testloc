{"model_name_or_path": "agentless", "instance_id": "django__django-15930", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 47df1a9..cfe65a8 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1259,7 +1259,7 @@ class When(Expression):\n                 \"as a condition.\"\n             )\n         if isinstance(condition, Q) and not condition:\n-            raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n+            condition = Value(True)  # Handle always true condition\n         super().__init__(output_field=None)\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n@@ -1298,7 +1298,11 @@ class When(Expression):\n         connection.ops.check_expression_support(self)\n         template_params = extra_context\n         sql_params = []\n-        condition_sql, condition_params = compiler.compile(self.condition)\n+        if isinstance(self.condition, Value) and self.condition.value is True:\n+            condition_sql = '1=1'\n+            condition_params = []\n+        else:\n+            condition_sql, condition_params = compiler.compile(self.condition)\n         template_params[\"condition\"] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 1b947ba..a40ab01 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -634,7 +634,7 @@ class When(Expression):\n         if condition is None or not getattr(condition, 'conditional', False) or lookups:\n             raise TypeError('When() supports a Q object, a boolean expression, or lookups as a condition.')\n         if isinstance(condition, Q) and (not condition):\n-            raise ValueError(\"An empty Q() can't be used as a When() condition.\")\n+            condition = Value(True)\n         super().__init__(output_field=None)\n         self.condition = condition\n         self.result = self._parse_expressions(then)[0]\n@@ -659,7 +659,11 @@ class When(Expression):\n         connection.ops.check_expression_support(self)\n         template_params = extra_context\n         sql_params = []\n-        condition_sql, condition_params = compiler.compile(self.condition)\n+        if isinstance(self.condition, Value) and self.condition.value is True:\n+            condition_sql = '1=1'\n+            condition_params = []\n+        else:\n+            condition_sql, condition_params = compiler.compile(self.condition)\n         template_params['condition'] = condition_sql\n         sql_params.extend(condition_params)\n         result_sql, result_params = compiler.compile(self.result)\n", "normalized_occurrence": 1}
