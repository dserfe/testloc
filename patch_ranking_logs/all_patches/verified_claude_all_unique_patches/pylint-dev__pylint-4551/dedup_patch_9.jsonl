{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..68f4bdd 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,11 +84,24 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n-        for node_name, associated_nodes in (\n-            list(node.instance_attrs_type.items())\n-            + list(node.locals_type.items())\n-            + properties\n-        ):\n+        \n+        # Get type hints from __init__ arguments\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            if init_method.args.annotations:\n+                for arg, annotation in zip(init_method.args.args[1:], init_method.args.annotations[1:]):\n+                    if annotation:\n+                        init_type_hints[arg.name] = [annotation]\n+\n+        # Combine all sources of type information\n+        all_attrs = {}\n+        all_attrs.update(node.instance_attrs_type)\n+        all_attrs.update(node.locals_type)\n+        all_attrs.update(init_type_hints)\n+        all_attrs.update(dict(properties))\n+\n+        for node_name, associated_nodes in all_attrs.items():\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..7c00a4b 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,7 +57,19 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n-        for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n+        init_method = node.local_attr('__init__')[0] if '__init__' in node.locals else None\n+        init_type_hints = {}\n+        if init_method and isinstance(init_method, astroid.FunctionDef):\n+            if init_method.args.annotations:\n+                for arg, annotation in zip(init_method.args.args[1:], init_method.args.annotations[1:]):\n+                    if annotation:\n+                        init_type_hints[arg.name] = [annotation]\n+        all_attrs = {}\n+        all_attrs.update(node.instance_attrs_type)\n+        all_attrs.update(node.locals_type)\n+        all_attrs.update(init_type_hints)\n+        all_attrs.update(dict(properties))\n+        for node_name, associated_nodes in all_attrs.items():\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n", "normalized_occurrence": 1}
