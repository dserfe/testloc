{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11583", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex f44661f..e91c4a0 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -139,11 +139,17 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            # The module could have been removed, don't fail loudly if this\n-            # is the case.\n-            continue\n-        results.add(resolved_path)\n+            results.add(resolved_path)\n+        except (FileNotFoundError, ValueError):\n+            # The module could have been removed or the path could contain invalid\n+            # characters (like null bytes). Don't fail loudly in these cases.\n+            # Fall back to the original filename as a string.\n+            try:\n+                # Add the original filename if it's valid\n+                if filename and '\\0' not in filename:\n+                    results.add(Path(filename).absolute())\n+            except Exception:\n+                continue\n     return frozenset(results)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex e37abac..a8ae920 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -93,9 +93,13 @@ def iter_modules_and_files(modules, extra_files):\n         path = Path(filename)\n         try:\n             resolved_path = path.resolve(strict=True).absolute()\n-        except FileNotFoundError:\n-            continue\n-        results.add(resolved_path)\n+            results.add(resolved_path)\n+        except (FileNotFoundError, ValueError):\n+            try:\n+                if filename and '\\x00' not in filename:\n+                    results.add(Path(filename).absolute())\n+            except Exception:\n+                continue\n     return frozenset(results)\n @functools.lru_cache(maxsize=1)\n def common_roots(paths):\n", "normalized_occurrence": 1}
