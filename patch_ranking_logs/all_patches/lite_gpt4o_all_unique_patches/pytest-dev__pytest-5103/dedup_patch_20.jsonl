{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..7fdcbd5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -839,8 +839,48 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.stack = []\n         self.on_failure = []\n         self.push_format_context()\n-        # Rewrite assert into a bunch of statements.\n-        top_condition, explanation = self.visit(assert_.test)\n+        # Special handling for `all` and `any` calls\n+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and assert_.test.func.id in ('all', 'any'):\n+            func_name = assert_.test.func.id\n+            iter_arg = assert_.test.args[0]\n+            iter_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], iter_arg))\n+            loop_var = self.variable()\n+            loop_body = [\n+                ast.If(\n+                    test=ast.UnaryOp(ast.Not(), ast.Call(assert_.test.func, [ast.Name(loop_var, ast.Load())], [])),\n+                    body=[ast.Raise(\n+                        exc=ast.Call(\n+                            func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                            args=[ast.BinOp(\n+                                left=ast.Str(f'{func_name}({ast.dump(iter_arg)}) failed on element: '),\n+                                op=ast.Add(),\n+                                right=self.display(ast.Name(loop_var, ast.Load()))\n+                            )],\n+                            keywords=[]\n+                        ),\n+                        cause=None\n+                    )],\n+                    orelse=[]\n+                )\n+            ]\n+            self.statements.append(\n+                ast.For(\n+                    target=ast.Name(loop_var, ast.Store()),\n+                    iter=ast.Name(iter_var, ast.Load()),\n+                    body=loop_body,\n+                    orelse=[]\n+                )\n+            )\n+            top_condition = ast.Call(\n+                func=ast.Name(id=func_name, ctx=ast.Load()),\n+                args=[ast.Name(iter_var, ast.Load())],\n+                keywords=[]\n+            )\n+            explanation = f'{func_name}({ast.dump(iter_arg)})'\n+        else:\n+            # Rewrite assert into a bunch of statements.\n+            top_condition, explanation = self.visit(assert_.test)\n         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]\n         if self.module_path is not None:\n             self.statements.append(\n@@ -1081,4 +1121,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..efe0efb 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -458,7 +458,18 @@ class AssertionRewriter(ast.NodeVisitor):\n         self.stack = []\n         self.on_failure = []\n         self.push_format_context()\n-        top_condition, explanation = self.visit(assert_.test)\n+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name) and (assert_.test.func.id in ('all', 'any')):\n+            func_name = assert_.test.func.id\n+            iter_arg = assert_.test.args[0]\n+            iter_var = self.variable()\n+            self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], iter_arg))\n+            loop_var = self.variable()\n+            loop_body = [ast.If(test=ast.UnaryOp(ast.Not(), ast.Call(assert_.test.func, [ast.Name(loop_var, ast.Load())], [])), body=[ast.Raise(exc=ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.BinOp(left=ast.Str(f'{func_name}({ast.dump(iter_arg)}) failed on element: '), op=ast.Add(), right=self.display(ast.Name(loop_var, ast.Load())))], keywords=[]), cause=None)], orelse=[])]\n+            self.statements.append(ast.For(target=ast.Name(loop_var, ast.Store()), iter=ast.Name(iter_var, ast.Load()), body=loop_body, orelse=[]))\n+            top_condition = ast.Call(func=ast.Name(id=func_name, ctx=ast.Load()), args=[ast.Name(iter_var, ast.Load())], keywords=[])\n+            explanation = f'{func_name}({ast.dump(iter_arg)})'\n+        else:\n+            top_condition, explanation = self.visit(assert_.test)\n         if self.module_path is not None:\n             self.statements.append(self.warn_about_none_ast(top_condition, module_path=self.module_path, lineno=assert_.lineno))\n         body = self.on_failure\n", "normalized_occurrence": 1}
