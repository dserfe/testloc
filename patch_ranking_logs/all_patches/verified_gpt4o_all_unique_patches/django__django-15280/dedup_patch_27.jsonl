{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..f2ad816 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -185,12 +185,12 @@ class ForwardManyToOneDescriptor:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                # If this is a one-to-one relation, set the reverse accessor\n-                # cache on the related object to the current instance to avoid\n-                # an extra SQL query if it's accessed later on.\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n+                # Ensure the deferred fields are correctly set when prefetching.\n+                if rel_obj is not None:\n+                    rel_obj._state.adding = False\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field_name in deferred_fields:\n+                        rel_obj._deferred_fields.add(field_name)\n             self.field.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None and not self.field.null:\n@@ -411,10 +411,11 @@ class ReverseOneToOneDescriptor:\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n-                    # Set the forward accessor cache on the related object to\n-                    # the current instance to avoid an extra SQL query if it's\n-                    # accessed later on.\n-                    self.related.field.set_cached_value(rel_obj, instance)\n+                    # Ensure the deferred fields are correctly set when prefetching.\n+                    rel_obj._state.adding = False\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field_name in deferred_fields:\n+                        rel_obj._deferred_fields.add(field_name)\n             self.related.set_cached_value(instance, rel_obj)\n \n         if rel_obj is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..b6c0366 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -57,9 +57,11 @@ class ForwardManyToOneDescriptor:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n-                remote_field = self.field.remote_field\n-                if not remote_field.multiple:\n-                    remote_field.set_cached_value(rel_obj, instance)\n+                if rel_obj is not None:\n+                    rel_obj._state.adding = False\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field_name in deferred_fields:\n+                        rel_obj._deferred_fields.add(field_name)\n             self.field.set_cached_value(instance, rel_obj)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n@@ -151,7 +153,10 @@ class ReverseOneToOneDescriptor:\n                 except self.related.related_model.DoesNotExist:\n                     rel_obj = None\n                 else:\n-                    self.related.field.set_cached_value(rel_obj, instance)\n+                    rel_obj._state.adding = False\n+                    deferred_fields = instance.get_deferred_fields()\n+                    for field_name in deferred_fields:\n+                        rel_obj._deferred_fields.add(field_name)\n             self.related.set_cached_value(instance, rel_obj)\n         if rel_obj is None:\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (instance.__class__.__name__, self.related.get_accessor_name()))\n", "normalized_occurrence": 1}
