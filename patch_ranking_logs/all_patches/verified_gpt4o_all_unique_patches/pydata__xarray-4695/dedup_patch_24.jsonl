{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 4b06bfd..025d9aa 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -95,17 +95,17 @@ def _is_nested_tuple(possible_tuple):\n     )\n \n \n-def get_indexer_nd(index, labels, method=None, tolerance=None):\n+def get_indexer_nd(index, labels, method=None, tolerance=None, dim_name=None):\n     \"\"\"Wrapper around :meth:`pandas.Index.get_indexer` supporting n-dimensional\n     labels\n     \"\"\"\n     flat_labels = np.ravel(labels)\n-    flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n+    flat_indexer = index.get_indexer(flat_labels, method=None if method == dim_name else method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n \n \n-def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=None, dim_name=None):\n     \"\"\"Given a pandas.Index and labels (e.g., from __getitem__) for one\n     dimension, return an indexer suitable for indexing an ndarray along that\n     dimension. If `index` is a pandas.MultiIndex and depending on `label`,\n@@ -197,7 +197,7 @@ def convert_label_indexer(index, label, index_name=\"\", method=None, tolerance=No\n                     \"Vectorized selection is not available along \"\n                     \"MultiIndex variable: \" + index_name\n                 )\n-            indexer = get_indexer_nd(index, label, method, tolerance)\n+            indexer = get_indexer_nd(index, label, method, tolerance, dim_name=index_name)\n             if np.any(indexer < 0):\n                 raise KeyError(f\"not all values found in index {index_name!r}\")\n     return indexer, new_index\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py\nindex 27ac399..fbb95d5 100644\n--- a/xarray/core/indexing.py\n+++ b/xarray/core/indexing.py\n@@ -52,12 +52,12 @@ def _asarray_tuplesafe(values):\n     return result\n def _is_nested_tuple(possible_tuple):\n     return isinstance(possible_tuple, tuple) and any((isinstance(value, (tuple, list, slice)) for value in possible_tuple))\n-def get_indexer_nd(index, labels, method=None, tolerance=None):\n+def get_indexer_nd(index, labels, method=None, tolerance=None, dim_name=None):\n     flat_labels = np.ravel(labels)\n-    flat_indexer = index.get_indexer(flat_labels, method=method, tolerance=tolerance)\n+    flat_indexer = index.get_indexer(flat_labels, method=None if method == dim_name else method, tolerance=tolerance)\n     indexer = flat_indexer.reshape(labels.shape)\n     return indexer\n-def convert_label_indexer(index, label, index_name='', method=None, tolerance=None):\n+def convert_label_indexer(index, label, index_name='', method=None, tolerance=None, dim_name=None):\n     new_index = None\n     if isinstance(label, slice):\n         if method is not None or tolerance is not None:\n@@ -104,7 +104,7 @@ def convert_label_indexer(index, label, index_name='', method=None, tolerance=No\n         else:\n             if isinstance(index, pd.MultiIndex) and label.ndim > 1:\n                 raise ValueError('Vectorized selection is not available along MultiIndex variable: ' + index_name)\n-            indexer = get_indexer_nd(index, label, method, tolerance)\n+            indexer = get_indexer_nd(index, label, method, tolerance, dim_name=index_name)\n             if np.any(indexer < 0):\n                 raise KeyError(f'not all values found in index {index_name!r}')\n     return (indexer, new_index)\n", "normalized_occurrence": 1}
