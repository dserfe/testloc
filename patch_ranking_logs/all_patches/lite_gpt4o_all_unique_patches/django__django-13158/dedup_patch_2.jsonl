{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..4a1164d 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -998,9 +998,8 @@ class QuerySet:\n \n     def union(self, *other_qs, all=False):\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+        if isinstance(self, EmptyQuerySet) or all(isinstance(q, EmptyQuerySet) for q in other_qs):\n+            return self.none()\n         return self._combinator_query('union', *other_qs, all=all)\n \n     def intersection(self, *other_qs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..2c3975a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -587,9 +587,8 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n     def union(self, *other_qs, all=False):\n-        if isinstance(self, EmptyQuerySet):\n-            qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n-            return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+        if isinstance(self, EmptyQuerySet) or all((isinstance(q, EmptyQuerySet) for q in other_qs)):\n+            return self.none()\n         return self._combinator_query('union', *other_qs, all=all)\n     def intersection(self, *other_qs):\n         if isinstance(self, EmptyQuerySet):\n", "normalized_occurrence": 1}
