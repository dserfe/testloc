{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20801", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex ecd2cce..c503a1e 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1390,7 +1390,9 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean):\n+            return False\n+        elif other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1865,13 +1867,17 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not isinstance(other, Number):\n+        if isinstance(other, Boolean):\n+            return False\n+        elif not isinstance(other, Number):\n             # S(0) == S.false is False\n             # S(0) == False is True\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean):\n+            return False\n+        elif other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c5d42bc..e74ff14 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1195,7 +1195,9 @@ class Float(Number):\n             return not other\n         if isinstance(other, Boolean):\n             return False\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean):\n+            return False\n+        elif other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n@@ -1627,11 +1629,15 @@ class Rational(Number):\n             other = _sympify(other)\n         except SympifyError:\n             return NotImplemented\n-        if not isinstance(other, Number):\n+        if isinstance(other, Boolean):\n+            return False\n+        elif not isinstance(other, Number):\n             return False\n         if not self:\n             return not other\n-        if other.is_NumberSymbol:\n+        if isinstance(other, Boolean):\n+            return False\n+        elif other.is_NumberSymbol:\n             if other.is_irrational:\n                 return False\n             return other.__eq__(self)\n", "normalized_occurrence": 1}
