{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..5226bd9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -974,6 +974,12 @@ warn_explicit(\n         new_kwargs = []\n         for arg in call.args:\n             res, expl = self.visit(arg)\n+            # Special handling for all() and any() to unroll iterables\n+            if (isinstance(call.func, ast.Name) and \n+                call.func.id in ('all', 'any') and\n+                isinstance(arg, (ast.GeneratorExp, ast.ListComp, ast.SetComp))):\n+                list_call = ast_Call(self.builtin('list'), [res], [])\n+                res = self.assign(list_call)\n             arg_expls.append(expl)\n             new_args.append(res)\n         for keyword in call.keywords:\n@@ -1008,6 +1014,12 @@ warn_explicit(\n         new_star = new_kwarg = None\n         for arg in call.args:\n             res, expl = self.visit(arg)\n+            # Special handling for all() and any() to unroll iterables\n+            if (isinstance(call.func, ast.Name) and \n+                call.func.id in ('all', 'any') and\n+                isinstance(arg, (ast.GeneratorExp, ast.ListComp, ast.SetComp))):\n+                list_call = ast_Call(self.builtin('list'), [res], [])\n+                res = self.assign(list_call)\n             new_args.append(res)\n             arg_expls.append(expl)\n         for keyword in call.keywords:\n@@ -1081,4 +1093,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..afb415a 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -550,6 +550,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_kwargs = []\n         for arg in call.args:\n             res, expl = self.visit(arg)\n+            if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and isinstance(arg, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+                list_call = ast_Call(self.builtin('list'), [res], [])\n+                res = self.assign(list_call)\n             arg_expls.append(expl)\n             new_args.append(res)\n         for keyword in call.keywords:\n@@ -577,6 +580,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_star = new_kwarg = None\n         for arg in call.args:\n             res, expl = self.visit(arg)\n+            if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and isinstance(arg, (ast.GeneratorExp, ast.ListComp, ast.SetComp)):\n+                list_call = ast_Call(self.builtin('list'), [res], [])\n+                res = self.assign(list_call)\n             new_args.append(res)\n             arg_expls.append(expl)\n         for keyword in call.keywords:\n", "normalized_occurrence": 1}
