{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4687", "model_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 00a392c..bc05185 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -151,6 +151,8 @@ def fillna(data, other, join=\"left\", dataset_join=\"left\"):\n         dataset_join=dataset_join,\n         dataset_fill_value=np.nan,\n         keep_attrs=True,\n+        keep_attrs=True,\n+        kwargs={'keep_attrs': True} if keep_attrs else {}\n     )\n \n \n@@ -182,6 +184,8 @@ def where_method(self, cond, other=dtypes.NA):\n         dataset_join=join,\n         dask=\"allowed\",\n         keep_attrs=True,\n+        keep_attrs=True,\n+        kwargs={'keep_attrs': True} if keep_attrs else {}\n     )\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/ops.py b/xarray/core/ops.py\nindex 2895e91..c95cfb5 100644\n--- a/xarray/core/ops.py\n+++ b/xarray/core/ops.py\n@@ -18,11 +18,11 @@ _SKIPNA_DOCSTRING = '\\nskipna : bool, optional\\n    If True, skip missing values\n _MINCOUNT_DOCSTRING = \"\\nmin_count : int, default: None\\n    The required number of valid values to perform the operation. If\\n    fewer than min_count non-NA values are present the result will be\\n    NA. Only used if skipna is set to True or defaults to True for the\\n    array's dtype. New in version 0.10.8: Added with the default being\\n    None. Changed in version 0.17.0: if specified on an integer array\\n    and skipna=True, the result will be a float array.\"\n def fillna(data, other, join='left', dataset_join='left'):\n     from .computation import apply_ufunc\n-    return apply_ufunc(duck_array_ops.fillna, data, other, join=join, dask='allowed', dataset_join=dataset_join, dataset_fill_value=np.nan, keep_attrs=True)\n+    return apply_ufunc(duck_array_ops.fillna, data, other, join=join, dask='allowed', dataset_join=dataset_join, dataset_fill_value=np.nan, keep_attrs=True, keep_attrs=True, kwargs={'keep_attrs': True} if keep_attrs else {})\n def where_method(self, cond, other=dtypes.NA):\n     from .computation import apply_ufunc\n     join = 'inner' if other is dtypes.NA else 'exact'\n-    return apply_ufunc(duck_array_ops.where_method, self, cond, other, join=join, dataset_join=join, dask='allowed', keep_attrs=True)\n+    return apply_ufunc(duck_array_ops.where_method, self, cond, other, join=join, dataset_join=join, dask='allowed', keep_attrs=True, keep_attrs=True, kwargs={'keep_attrs': True} if keep_attrs else {})\n def _call_possibly_missing_method(arg, name, args, kwargs):\n     try:\n         method = getattr(arg, name)\n", "normalized_occurrence": 1}
