{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..5a387cb 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -109,22 +109,22 @@ class URLValidator(RegexValidator):\n \n         # Then check full URL\n         try:\n-            super().__call__(value)\n-        except ValidationError as e:\n-            # Trivial case failed. Try for possible IDN domain\n-            if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                super().__call__(value)\n+            except ValidationError as e:\n+                # Trivial case failed. Try for possible IDN domain\n+                if not value:\n+                    raise\n+                # Check for valid URL structure\n+                scheme, netloc, path, query, fragment = urlsplit(value)\n                 try:\n                     netloc = punycode(netloc)  # IDN -> ACE\n                 except UnicodeError:  # invalid domain part\n                     raise e\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n-            else:\n-                raise\n+        except ValueError:  # for example, \"Invalid IPv6 URL\"\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         else:\n             # Now verify IPv6 in the netloc part\n             host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..051d586 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -63,21 +63,20 @@ class URLValidator(RegexValidator):\n         if scheme not in self.schemes:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n-            super().__call__(value)\n-        except ValidationError as e:\n-            if value:\n-                try:\n-                    scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                super().__call__(value)\n+            except ValidationError as e:\n+                if not value:\n+                    raise\n+                scheme, netloc, path, query, fragment = urlsplit(value)\n                 try:\n                     netloc = punycode(netloc)\n                 except UnicodeError:\n                     raise e\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n-            else:\n-                raise\n+        except ValueError:\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n         else:\n             host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n             if host_match:\n", "normalized_occurrence": 1}
