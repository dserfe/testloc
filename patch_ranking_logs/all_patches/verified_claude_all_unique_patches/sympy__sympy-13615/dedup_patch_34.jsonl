{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..f7fcb30 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1931,6 +1931,38 @@ class FiniteSet(Set, EvalfMixin):\n         return self.__class__(*[el for el in self if el in other])\n \n     def _complement(self, other):\n+        if isinstance(other, Interval):\n+            nums = sorted(m for m in self.args if m.is_number)\n+            syms = [m for m in self.args if m.is_Symbol]\n+            \n+            if not nums and not syms:\n+                return other\n+                \n+            if nums:\n+                # Create intervals between numeric elements within the given interval\n+                filtered_nums = [n for n in nums if n in other]\n+                if not filtered_nums:\n+                    if syms:\n+                        return Complement(other, FiniteSet(*syms), evaluate=False)\n+                    return other\n+                    \n+                intervals = []\n+                if other.left < filtered_nums[0]:\n+                    intervals.append(Interval(other.left, filtered_nums[0], \n+                                           other.left_open, True))\n+                for a, b in zip(filtered_nums[:-1], filtered_nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                if filtered_nums[-1] < other.right:\n+                    intervals.append(Interval(filtered_nums[-1], other.right,\n+                                           True, other.right_open))\n+                \n+                if syms:\n+                    return Complement(Union(intervals, evaluate=False),\n+                                   FiniteSet(*syms), evaluate=False)\n+                return Union(intervals, evaluate=False)\n+            \n+            # Only symbols\n+            return Complement(other, FiniteSet(*syms), evaluate=False)\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n             if other == S.Reals and nums != []:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..fd0c0e4 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -840,6 +840,28 @@ class FiniteSet(Set, EvalfMixin):\n             return self.__class__(*self._elements & other._elements)\n         return self.__class__(*[el for el in self if el in other])\n     def _complement(self, other):\n+        if isinstance(other, Interval):\n+            nums = sorted((m for m in self.args if m.is_number))\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if not nums and (not syms):\n+                return other\n+            if nums:\n+                filtered_nums = [n for n in nums if n in other]\n+                if not filtered_nums:\n+                    if syms:\n+                        return Complement(other, FiniteSet(*syms), evaluate=False)\n+                    return other\n+                intervals = []\n+                if other.left < filtered_nums[0]:\n+                    intervals.append(Interval(other.left, filtered_nums[0], other.left_open, True))\n+                for a, b in zip(filtered_nums[:-1], filtered_nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                if filtered_nums[-1] < other.right:\n+                    intervals.append(Interval(filtered_nums[-1], other.right, True, other.right_open))\n+                if syms:\n+                    return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+                return Union(intervals, evaluate=False)\n+            return Complement(other, FiniteSet(*syms), evaluate=False)\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n             if other == S.Reals and nums != []:\n", "normalized_occurrence": 1}
