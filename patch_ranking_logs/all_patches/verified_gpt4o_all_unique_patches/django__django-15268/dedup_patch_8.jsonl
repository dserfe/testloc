{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..0bd6305 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -40,30 +41,33 @@ class MigrationOptimizer:\n     def optimize_inner(self, operations, app_label):\n         \"\"\"Inner optimization loop.\"\"\"\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n-            for j, other in enumerate(operations[i + 1:]):\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            optimized = False\n+            for j in range(i + 1, len(operations)):\n+                other = operations[j]\n+\n+                if isinstance(operation, (AlterUniqueTogether, AlterIndexTogether)) and isinstance(other, type(operation)) and operation.name_lower == other.name_lower:\n+                    # Merge consecutive AlterUniqueTogether or AlterIndexTogether operations\n+                    merged_operation = type(operation)(name=operation.name, **{operation.option_name: other.option_value})\n+                    operations[j] = merged_operation\n+                    optimized = True\n+                    break\n+                \n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all(op.reduce(other, app_label) is True for op in in_between):\n-                        # Perform a left reduction if all of the in-between\n-                        # operations can optimize through other.\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        # Otherwise keep trying.\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n+                    in_between = operations[i + 1:j]\n+                    new_operations.extend(in_between)\n+                    new_operations.extend(result)\n+                    new_operations.extend(operations[j + 1:])\n+                    operations = new_operations\n+                    optimized = True\n+                    break\n                 elif not result:\n-                    # Can't perform a right reduction.\n-                    right = False\n-            else:\n+                    break\n+            \n+            if not optimized:\n                 new_operations.append(operation)\n-        return new_operations\n+                i += 1\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..f5ba31e 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -11,25 +11,29 @@ class MigrationOptimizer:\n             operations = result\n     def optimize_inner(self, operations, app_label):\n         new_operations = []\n-        for i, operation in enumerate(operations):\n-            right = True\n-            for j, other in enumerate(operations[i + 1:]):\n+        i = 0\n+        while i < len(operations):\n+            operation = operations[i]\n+            optimized = False\n+            for j in range(i + 1, len(operations)):\n+                other = operations[j]\n+                if isinstance(operation, (AlterUniqueTogether, AlterIndexTogether)) and isinstance(other, type(operation)) and (operation.name_lower == other.name_lower):\n+                    merged_operation = type(operation)(name=operation.name, **{operation.option_name: other.option_value})\n+                    operations[j] = merged_operation\n+                    optimized = True\n+                    break\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n-                    in_between = operations[i + 1:i + j + 1]\n-                    if right:\n-                        new_operations.extend(in_between)\n-                        new_operations.extend(result)\n-                    elif all((op.reduce(other, app_label) is True for op in in_between)):\n-                        new_operations.extend(result)\n-                        new_operations.extend(in_between)\n-                    else:\n-                        new_operations.append(operation)\n-                        break\n-                    new_operations.extend(operations[i + j + 2:])\n-                    return new_operations\n+                    in_between = operations[i + 1:j]\n+                    new_operations.extend(in_between)\n+                    new_operations.extend(result)\n+                    new_operations.extend(operations[j + 1:])\n+                    operations = new_operations\n+                    optimized = True\n+                    break\n                 elif not result:\n-                    right = False\n-            else:\n+                    break\n+            if not optimized:\n                 new_operations.append(operation)\n+                i += 1\n         return new_operations\n\\ No newline at end of file\n", "normalized_occurrence": 1}
