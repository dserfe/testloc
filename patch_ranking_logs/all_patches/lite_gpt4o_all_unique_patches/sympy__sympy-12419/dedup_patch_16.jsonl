{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..03ed0d7 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -67,7 +67,10 @@ class MatMul(MatrixExpr):\n         if not X.cols.is_number:\n             # Don't waste time in result.doit() if the sum bounds are symbolic\n             expand = False\n-        return result.doit() if expand else result\n+        simplified_result = result.doit() if expand else result\n+        if self.is_Identity:\n+            return KroneckerDelta(i, j)\n+        return simplified_result\n \n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..918ef0d 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -41,7 +41,10 @@ class MatMul(MatrixExpr):\n         result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n             expand = False\n-        return result.doit() if expand else result\n+        simplified_result = result.doit() if expand else result\n+        if self.is_Identity:\n+            return KroneckerDelta(i, j)\n+        return simplified_result\n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n         matrices = [x for x in self.args if x.is_Matrix]\n", "normalized_occurrence": 1}
