{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..ca21329 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,26 +162,43 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n-                }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-\n-            reprtraceback[\"reprentries\"] = new_entries\n+            def serialize_traceback(tb):\n+                reprtraceback = tb.__dict__.copy()\n+                reprcrash = tb.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+                return reprtraceback, reprcrash\n+\n+            # Handle main traceback\n+            reprtraceback, reprcrash = serialize_traceback(rep.longrepr.reprtraceback)\n+            \n+            # Handle chained tracebacks\n+            chain = []\n+            if hasattr(rep.longrepr, 'chain'):\n+                for excinfo in rep.longrepr.chain:\n+                    tb, crash = serialize_traceback(excinfo[0].reprtraceback)\n+                    chain.append({\n+                        'reprtraceback': tb,\n+                        'reprcrash': crash,\n+                        'header': excinfo[1],\n+                    })\n \n             return {\n                 \"reprcrash\": reprcrash,\n                 \"reprtraceback\": reprtraceback,\n                 \"sections\": rep.longrepr.sections,\n+                \"chain\": chain,\n             }\n \n         d = self.__dict__.copy()\n@@ -250,11 +267,52 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n+                def deserialize_traceback(tb_dict, crash_dict):\n+                    unserialized_entries = []\n+                    for entry_data in tb_dict[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                filelocrepr=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    tb_dict[\"reprentries\"] = unserialized_entries\n+                    return ReprTraceback(**tb_dict), ReprFileLocation(**crash_dict)\n+\n+                # Deserialize main exception\n+                main_tb, main_crash = deserialize_traceback(reprtraceback, reprcrash)\n                 exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n+                    reprtraceback=main_tb,\n+                    reprcrash=main_crash,\n                 )\n \n+                # Deserialize chained exceptions\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for item in reportdict[\"longrepr\"][\"chain\"]:\n+                        tb, crash = deserialize_traceback(item[\"reprtraceback\"], item[\"reprcrash\"])\n+                        chain.append((ReprExceptionInfo(reprtraceback=tb, reprcrash=crash), item[\"header\"]))\n+                    exception_info.chain = chain\n+\n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n                 reportdict[\"longrepr\"] = exception_info\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..73ae197 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,25 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def serialize_traceback(tb):\n+                reprtraceback = tb.__dict__.copy()\n+                reprcrash = tb.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback['reprentries'] = new_entries\n+                return (reprtraceback, reprcrash)\n+            reprtraceback, reprcrash = serialize_traceback(rep.longrepr.reprtraceback)\n+            chain = []\n+            if hasattr(rep.longrepr, 'chain'):\n+                for excinfo in rep.longrepr.chain:\n+                    tb, crash = serialize_traceback(excinfo[0].reprtraceback)\n+                    chain.append({'reprtraceback': tb, 'reprcrash': crash, 'header': excinfo[1]})\n+            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, 'chain': chain}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -130,7 +138,37 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                def deserialize_traceback(tb_dict, crash_dict):\n+                    unserialized_entries = []\n+                    for entry_data in tb_dict['reprentries']:\n+                        data = entry_data['data']\n+                        entry_type = entry_data['type']\n+                        if entry_type == 'ReprEntry':\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data['reprfuncargs']:\n+                                reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                            if data['reprfileloc']:\n+                                reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                            if data['reprlocals']:\n+                                reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                            reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                        elif entry_type == 'ReprEntryNative':\n+                            reprentry = ReprEntryNative(data['lines'])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    tb_dict['reprentries'] = unserialized_entries\n+                    return (ReprTraceback(**tb_dict), ReprFileLocation(**crash_dict))\n+                main_tb, main_crash = deserialize_traceback(reprtraceback, reprcrash)\n+                exception_info = ReprExceptionInfo(reprtraceback=main_tb, reprcrash=main_crash)\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for item in reportdict['longrepr']['chain']:\n+                        tb, crash = deserialize_traceback(item['reprtraceback'], item['reprcrash'])\n+                        chain.append((ReprExceptionInfo(reprtraceback=tb, reprcrash=crash), item['header']))\n+                    exception_info.chain = chain\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 2}
