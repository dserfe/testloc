{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-21568", "model_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex f565bc8..e0a1960 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -631,7 +631,7 @@ class DateFormatter(ticker.Formatter):\n \n     def __call__(self, x, pos=0):\n         result = num2date(x, self.tz).strftime(self.fmt)\n-        return _wrap_in_tex(result) if self._usetex else result\n+        return _wrap_in_tex(result.replace(' ', r'\\,')) if self._usetex else result\n \n     def set_tzinfo(self, tz):\n         self.tz = tz\n@@ -770,7 +770,8 @@ class ConciseDateFormatter(ticker.Formatter):\n     def __call__(self, x, pos=None):\n         formatter = DateFormatter(self.defaultfmt, self._tz,\n                                   usetex=self._usetex)\n-        return formatter(x, pos=pos)\n+        result = formatter(x, pos=pos)\n+        return _wrap_in_tex(result.replace(' ', r'\\,')) if self._usetex else result\n \n     def format_ticks(self, values):\n         tickdatetime = [num2date(value, tz=self._tz) for value in values]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py\nindex 71de92e..918f764 100644\n--- a/lib/matplotlib/dates.py\n+++ b/lib/matplotlib/dates.py\n@@ -153,7 +153,7 @@ class DateFormatter(ticker.Formatter):\n         self._usetex = usetex if usetex is not None else mpl.rcParams['text.usetex']\n     def __call__(self, x, pos=0):\n         result = num2date(x, self.tz).strftime(self.fmt)\n-        return _wrap_in_tex(result) if self._usetex else result\n+        return _wrap_in_tex(result.replace(' ', '\\\\,')) if self._usetex else result\n     def set_tzinfo(self, tz):\n         self.tz = tz\n class ConciseDateFormatter(ticker.Formatter):\n@@ -187,7 +187,8 @@ class ConciseDateFormatter(ticker.Formatter):\n         self._usetex = usetex if usetex is not None else mpl.rcParams['text.usetex']\n     def __call__(self, x, pos=None):\n         formatter = DateFormatter(self.defaultfmt, self._tz, usetex=self._usetex)\n-        return formatter(x, pos=pos)\n+        result = formatter(x, pos=pos)\n+        return _wrap_in_tex(result.replace(' ', '\\\\,')) if self._usetex else result\n     def format_ticks(self, values):\n         tickdatetime = [num2date(value, tz=self._tz) for value in values]\n         tickdate = np.array([tdt.timetuple()[:6] for tdt in tickdatetime])\n", "normalized_occurrence": 1}
