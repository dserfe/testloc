{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..d2e6a1c 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -939,34 +939,7 @@ class RangeSlider(SliderBase):\n         \"\"\"\n         self.set_val((self.val[0], max))\n \n-    def set_val(self, val):\n-        \"\"\"\n-        Set slider value to *val*.\n \n-        Parameters\n-        ----------\n-        val : tuple or array-like of float\n-        \"\"\"\n-        val = np.sort(val)\n-        _api.check_shape((2,), val=val)\n-        # Reset value to allow _value_in_bounds() to work.\n-        self.val = (self.valmin, self.valmax)\n-        vmin, vmax = self._value_in_bounds(val)\n-        self._update_selection_poly(vmin, vmax)\n-        if self.orientation == \"vertical\":\n-            self._handles[0].set_ydata([vmin])\n-            self._handles[1].set_ydata([vmax])\n-        else:\n-            self._handles[0].set_xdata([vmin])\n-            self._handles[1].set_xdata([vmax])\n-\n-        self.valtext.set_text(self._format((vmin, vmax)))\n-\n-        if self.drawon:\n-            self.ax.figure.canvas.draw_idle()\n-        self.val = (vmin, vmax)\n-        if self.eventson:\n-            self._observers.process(\"changed\", (vmin, vmax))\n \n     def on_changed(self, func):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..08b2b87 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -754,32 +754,6 @@ class RangeSlider(SliderBase):\n         \"\"\"\n         self.set_val((self.val[0], max))\n \n-    def set_val(self, val):\n-        \"\"\"\n-        Set slider value to *val*.\n-\n-        Parameters\n-        ----------\n-        val : tuple or array-like of float\n-        \"\"\"\n-        val = np.sort(val)\n-        _api.check_shape((2,), val=val)\n-        self.val = (self.valmin, self.valmax)\n-        vmin, vmax = self._value_in_bounds(val)\n-        self._update_selection_poly(vmin, vmax)\n-        if self.orientation == 'vertical':\n-            self._handles[0].set_ydata([vmin])\n-            self._handles[1].set_ydata([vmax])\n-        else:\n-            self._handles[0].set_xdata([vmin])\n-            self._handles[1].set_xdata([vmax])\n-        self.valtext.set_text(self._format((vmin, vmax)))\n-        if self.drawon:\n-            self.ax.figure.canvas.draw_idle()\n-        self.val = (vmin, vmax)\n-        if self.eventson:\n-            self._observers.process('changed', (vmin, vmax))\n-\n     def on_changed(self, func):\n         \"\"\"\n         Connect *func* as callback function to changes of the slider value.\n", "normalized_occurrence": 1}
