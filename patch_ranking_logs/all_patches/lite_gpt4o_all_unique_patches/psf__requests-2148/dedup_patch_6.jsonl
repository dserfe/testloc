{"model_name_or_path": "agentless", "instance_id": "psf__requests-2148", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex c835f24..74e6cde 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -634,8 +634,11 @@ class Response(object):\n             try:\n                 # Special case for urllib3.\n                 try:\n-                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n-                        yield chunk\n+                    try:\n+                        for chunk in self.raw.stream(chunk_size, decode_content=True):\n+                            yield chunk\n+                    except socket.error as e:\n+                        raise ConnectionError(e)\n                 except IncompleteRead as e:\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n@@ -701,7 +704,10 @@ class Response(object):\n                 if self.status_code == 0:\n                     self._content = None\n                 else:\n-                    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n+                    try:\n+                        self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n+                    except socket.error as e:\n+                        raise ConnectionError(e)\n \n             except AttributeError:\n                 self._content = None\n", "occurrence": 2, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 08abf42..3b30757 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -322,8 +322,11 @@ class Response(object):\n         def generate():\n             try:\n                 try:\n-                    for chunk in self.raw.stream(chunk_size, decode_content=True):\n-                        yield chunk\n+                    try:\n+                        for chunk in self.raw.stream(chunk_size, decode_content=True):\n+                            yield chunk\n+                    except socket.error as e:\n+                        raise ConnectionError(e)\n                 except IncompleteRead as e:\n                     raise ChunkedEncodingError(e)\n                 except DecodeError as e:\n@@ -364,7 +367,10 @@ class Response(object):\n                 if self.status_code == 0:\n                     self._content = None\n                 else:\n-                    self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n+                    try:\n+                        self._content = bytes().join(self.iter_content(CONTENT_CHUNK_SIZE)) or bytes()\n+                    except socket.error as e:\n+                        raise ConnectionError(e)\n             except AttributeError:\n                 self._content = None\n         self._content_consumed = True\n", "normalized_occurrence": 2}
