{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13146", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 13deb95..a91a6cb 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -1067,9 +1067,13 @@ class Pow(Expr):\n         return self * (dexp * log(self.base) + dbase * self.exp/self.base)\n \n     def _eval_evalf(self, prec):\n+        from sympy import nsimplify\n         base, exp = self.as_base_exp()\n         base = base._evalf(prec)\n         if not exp.is_Integer:\n+            # Convert float exponents to rational numbers for consistency\n+            if exp.is_Float:\n+                exp = nsimplify(exp, rational=True)\n             exp = exp._evalf(prec)\n         if exp.is_negative and base.is_number and base.is_real is False:\n             base = base.conjugate() / (base * base.conjugate())._evalf(prec)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex a9c2232..c9afc16 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -734,9 +734,12 @@ class Pow(Expr):\n         dexp = self.exp.diff(s)\n         return self * (dexp * log(self.base) + dbase * self.exp / self.base)\n     def _eval_evalf(self, prec):\n+        from sympy import nsimplify\n         base, exp = self.as_base_exp()\n         base = base._evalf(prec)\n         if not exp.is_Integer:\n+            if exp.is_Float:\n+                exp = nsimplify(exp, rational=True)\n             exp = exp._evalf(prec)\n         if exp.is_negative and base.is_number and (base.is_real is False):\n             base = base.conjugate() / (base * base.conjugate())._evalf(prec)\n", "normalized_occurrence": 1}
