{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3993", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4198249..76c8e86 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -3481,7 +3481,7 @@ class DataArray(AbstractArray, DataWithCoords):\n         return self._from_temp_dataset(ds)\n \n     def integrate(\n-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n+        self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None\n     ) -> \"DataArray\":\n         \"\"\" integrate the array with the trapezoidal rule.\n \n@@ -3491,7 +3491,7 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         Parameters\n         ----------\n-        dim : hashable, or sequence of hashable\n+        coord : hashable, or sequence of hashable\n             Coordinate(s) used for the integration.\n         datetime_unit : {\"Y\", \"M\", \"W\", \"D\", \"h\", \"m\", \"s\", \"ms\", \"us\", \"ns\", \\\n                          \"ps\", \"fs\", \"as\"}, optional\n@@ -3523,12 +3523,12 @@ class DataArray(AbstractArray, DataWithCoords):\n           * x        (x) float64 0.0 0.1 1.1 1.2\n         Dimensions without coordinates: y\n         >>>\n-        >>> da.integrate(\"x\")\n+        >>> da.integrate(coord=\"x\")\n         <xarray.DataArray (y: 3)>\n         array([5.4, 6.6, 7.8])\n         Dimensions without coordinates: y\n         \"\"\"\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n \n     def unify_chunks(self) -> \"DataArray\":\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex ae20f2c..b14b9e4 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -805,8 +805,8 @@ class DataArray(AbstractArray, DataWithCoords):\n     def differentiate(self, coord: Hashable, edge_order: int=1, datetime_unit: str=None) -> 'DataArray':\n         ds = self._to_temp_dataset().differentiate(coord, edge_order, datetime_unit)\n         return self._from_temp_dataset(ds)\n-    def integrate(self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str=None) -> 'DataArray':\n-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)\n+    def integrate(self, coord: Union[Hashable, Sequence[Hashable]], datetime_unit: str=None) -> 'DataArray':\n+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)\n         return self._from_temp_dataset(ds)\n     def unify_chunks(self) -> 'DataArray':\n         ds = self._to_temp_dataset().unify_chunks()\n", "normalized_occurrence": 40}
