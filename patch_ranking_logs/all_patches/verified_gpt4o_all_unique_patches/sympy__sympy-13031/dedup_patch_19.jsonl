{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..afb06be 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -54,6 +54,9 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def shape(self):\n+        if self.blocks.shape[0] == 0 or self.blocks.shape[1] == 0:\n+            return (0, sum(block.shape[1] for block in self.args))\n+        \n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..bd6b807 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -24,6 +24,8 @@ class BlockMatrix(MatrixExpr):\n         return obj\n     @property\n     def shape(self):\n+        if self.blocks.shape[0] == 0 or self.blocks.shape[1] == 0:\n+            return (0, sum((block.shape[1] for block in self.args)))\n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n", "normalized_occurrence": 1}
