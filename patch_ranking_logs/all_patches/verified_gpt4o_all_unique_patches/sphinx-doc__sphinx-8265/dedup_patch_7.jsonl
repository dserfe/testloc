{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0e8e503..5f2d5d9 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1459,7 +1459,13 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n         if sig is None:\n             return None\n \n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return self._stringify_signature_with_parens(sig, show_return_annotation=False, **kwargs)\n+\n+    def _stringify_signature_with_parens(self, sig, **kwargs):\n+        args = stringify_signature(sig, **kwargs)\n+        # Fix tuple default arguments to ensure they are enclosed in parentheses\n+        args = re.sub(r'\\(([^()]+)\\)', r'(\\1)', args)\n+        return args\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n@@ -1835,7 +1841,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n                     sig = inspect.signature(self.object, bound_method=True,\n                                             follow_wrapped=True,\n                                             type_aliases=self.env.config.autodoc_type_aliases)\n-                args = stringify_signature(sig, **kwargs)\n+                args = stringify_signature(sig, always_parens=True, **kwargs)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a method signature for %s: %s\"),\n                            self.fullname, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0ae2e22..543c270 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1066,7 +1066,12 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             return None\n         if sig is None:\n             return None\n-        return stringify_signature(sig, show_return_annotation=False, **kwargs)\n+        return self._stringify_signature_with_parens(sig, show_return_annotation=False, **kwargs)\n+\n+    def _stringify_signature_with_parens(self, sig, **kwargs):\n+        args = stringify_signature(sig, **kwargs)\n+        args = re.sub('\\\\(([^()]+)\\\\)', '(\\\\1)', args)\n+        return args\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.doc_as_attr:\n@@ -1346,7 +1351,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n                 else:\n                     self.env.app.emit('autodoc-before-process-signature', self.object, True)\n                     sig = inspect.signature(self.object, bound_method=True, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n-                args = stringify_signature(sig, **kwargs)\n+                args = stringify_signature(sig, always_parens=True, **kwargs)\n         except TypeError as exc:\n             logger.warning(__('Failed to get a method signature for %s: %s'), self.fullname, exc)\n             return None\n", "normalized_occurrence": 1}
