{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..22a1342 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,10 +1933,16 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n+            syms = [m for m in self.args if not m.is_number]\n+            \n+            if nums == [] and syms == []:\n+                return other\n+                \n+            if nums == []:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n+                \n+            if other == S.Reals:\n+                # Special handling for complement against Reals\n                 intervals = []  # Build up a list of intervals between the elements\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n@@ -1948,8 +1954,9 @@ class FiniteSet(Set, EvalfMixin):\n                             FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            \n+            # For any other interval, return the complement directly\n+            return Complement(other, self, evaluate=False)\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..a7ab95f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,8 +842,12 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+            syms = [m for m in self.args if not m.is_number]\n+            if nums == [] and syms == []:\n+                return other\n+            if nums == []:\n+                return Complement(other, FiniteSet(*syms), evaluate=False)\n+            if other == S.Reals:\n                 intervals = []\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n@@ -853,8 +857,7 @@ class FiniteSet(Set, EvalfMixin):\n                     return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            return Complement(other, self, evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
