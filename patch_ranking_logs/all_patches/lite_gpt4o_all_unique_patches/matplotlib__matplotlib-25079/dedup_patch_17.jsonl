{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25079", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 06f543d..591081c 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -395,7 +395,8 @@ class ScalarMappable:\n         \"\"\"\n         self._A = None\n         self._norm = None  # So that the setter knows we're initializing.\n-        self.set_norm(norm)  # The Normalize instance of this ScalarMappable.\n+        self._norm = None  # So that the setter knows we're initializing.\n+        self.set_norm(norm, initializing=True)  # The Normalize instance of this ScalarMappable.\n         self.cmap = None  # So that the setter knows we're initializing.\n         self.set_cmap(cmap)  # The Colormap instance of this ScalarMappable.\n         #: The last colorbar associated with this ScalarMappable. May be None.\n@@ -619,7 +620,7 @@ class ScalarMappable:\n         if not in_init:\n             self.changed()\n \n-    def set_norm(self, norm):\n+    def set_norm(self, norm, initializing=False):\n         \"\"\"\n         Set the normalization instance.\n \n@@ -633,7 +634,11 @@ class ScalarMappable:\n         the norm of the mappable will reset the norm, locator, and formatters\n         on the colorbar to default.\n         \"\"\"\n-        self.norm = norm\n+        if initializing:\n+            self._norm = norm\n+            self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n+        else:\n+            self.norm = norm\n \n     def autoscale(self):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex f5a7578..cb852e2 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -95,7 +95,8 @@ class ScalarMappable:\n     def __init__(self, norm=None, cmap=None):\n         self._A = None\n         self._norm = None\n-        self.set_norm(norm)\n+        self._norm = None\n+        self.set_norm(norm, initializing=True)\n         self.cmap = None\n         self.set_cmap(cmap)\n         self.colorbar = None\n@@ -194,8 +195,12 @@ class ScalarMappable:\n         self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n         if not in_init:\n             self.changed()\n-    def set_norm(self, norm):\n-        self.norm = norm\n+    def set_norm(self, norm, initializing=False):\n+        if initializing:\n+            self._norm = norm\n+            self._id_norm = self.norm.callbacks.connect('changed', self.changed)\n+        else:\n+            self.norm = norm\n     def autoscale(self):\n         if self._A is None:\n             raise TypeError('You must first set_array for mappable')\n", "normalized_occurrence": 1}
