{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..4d07bb7 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -503,14 +503,30 @@ def trigsimp(expr, **opts):\n \n     trigsimpfunc = {\n         'fu': (lambda x: fu(x, **opts)),\n-        'matching': (lambda x: futrig(x)),\n+        'matching': (lambda x: futrig(x, evaluate=True)),\n         'groebner': (lambda x: groebnersimp(x, **opts)),\n         'combined': (lambda x: futrig(groebnersimp(x,\n                                polynomial=True, hints=[2, tan]))),\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n \n-    return trigsimpfunc(expr)\n+    result = trigsimpfunc(expr)\n+    \n+    # Handle special case for sin(a)*sin(b) + cos(a)*cos(b)\n+    if result == expr and expr.is_Add and len(expr.args) == 2:\n+        args = expr.args\n+        if all(isinstance(arg, Mul) for arg in args):\n+            # Check for sin(a)*sin(b) + cos(a)*cos(b) pattern\n+            sin_terms = [arg for arg in args if all(isinstance(t, sin) or t.is_Number for t in arg.args)]\n+            cos_terms = [arg for arg in args if all(isinstance(t, cos) or t.is_Number for t in arg.args)]\n+            if len(sin_terms) == 1 and len(cos_terms) == 1:\n+                sin_args = [t.args[0] for t in sin_terms[0].args if isinstance(t, sin)]\n+                cos_args = [t.args[0] for t in cos_terms[0].args if isinstance(t, cos)]\n+                if len(sin_args) == 2 and len(cos_args) == 2:\n+                    if sin_args == cos_args:\n+                        return cos(sin_args[0] - sin_args[1])\n+    \n+    return result\n \n \n def exptrigsimp(expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..a0162cc 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -170,8 +170,20 @@ def trigsimp(expr, **opts):\n         if not isinstance(new, Expr):\n             return new\n         return trigsimp_groebner(new, **opts)\n-    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n-    return trigsimpfunc(expr)\n+    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x, evaluate=True), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n+    result = trigsimpfunc(expr)\n+    if result == expr and expr.is_Add and (len(expr.args) == 2):\n+        args = expr.args\n+        if all((isinstance(arg, Mul) for arg in args)):\n+            sin_terms = [arg for arg in args if all((isinstance(t, sin) or t.is_Number for t in arg.args))]\n+            cos_terms = [arg for arg in args if all((isinstance(t, cos) or t.is_Number for t in arg.args))]\n+            if len(sin_terms) == 1 and len(cos_terms) == 1:\n+                sin_args = [t.args[0] for t in sin_terms[0].args if isinstance(t, sin)]\n+                cos_args = [t.args[0] for t in cos_terms[0].args if isinstance(t, cos)]\n+                if len(sin_args) == 2 and len(cos_args) == 2:\n+                    if sin_args == cos_args:\n+                        return cos(sin_args[0] - sin_args[1])\n+    return result\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n     from sympy.simplify.simplify import bottom_up\n", "normalized_occurrence": 1}
