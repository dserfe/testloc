{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..7b232c7 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1507,15 +1507,39 @@ class MigrationAutodetector:\n                     if value\n                     not in self.renamed_index_together_values[app_label, model_name]\n                 }\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n-                self.add_operation(\n-                    app_label,\n-                    operation(\n-                        name=model_name, **{operation.option_name: removal_value}\n-                    ),\n-                    dependencies=dependencies,\n-                )\n+                # Convert index_together to indexes format\n+                if old_value:\n+                    # Remove the old index_together by setting it to an empty set\n+                    self.add_operation(\n+                        app_label,\n+                        operation(\n+                            name=model_name, **{operation.option_name: set()}\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n+                    # Add equivalent indexes\n+                    indexes = []\n+                    for fields in old_value:\n+                        indexes.append(models.Index(fields=list(fields)))\n+                    if indexes:\n+                        self.add_operation(\n+                            app_label,\n+                            operations.AddIndex(\n+                                name=model_name,\n+                                index=indexes[0] if len(indexes) == 1 else indexes,\n+                            ),\n+                            dependencies=dependencies,\n+                        )\n+            else:\n+                removal_value = new_value.intersection(old_value)\n+                if removal_value or old_value:\n+                    self.add_operation(\n+                        app_label,\n+                        operation(\n+                            name=model_name, **{operation.option_name: removal_value}\n+                        ),\n+                        dependencies=dependencies,\n+                    )\n \n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..53bb1eb 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -613,9 +613,17 @@ class MigrationAutodetector:\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n             if operation == operations.AlterIndexTogether:\n                 old_value = {value for value in old_value if value not in self.renamed_index_together_values[app_label, model_name]}\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n-                self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n+                if old_value:\n+                    self.add_operation(app_label, operation(name=model_name, **{operation.option_name: set()}), dependencies=dependencies)\n+                    indexes = []\n+                    for fields in old_value:\n+                        indexes.append(models.Index(fields=list(fields)))\n+                    if indexes:\n+                        self.add_operation(app_label, operations.AddIndex(name=model_name, index=indexes[0] if len(indexes) == 1 else indexes), dependencies=dependencies)\n+            else:\n+                removal_value = new_value.intersection(old_value)\n+                if removal_value or old_value:\n+                    self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n     def generate_removed_altered_index_together(self):\n", "normalized_occurrence": 1}
