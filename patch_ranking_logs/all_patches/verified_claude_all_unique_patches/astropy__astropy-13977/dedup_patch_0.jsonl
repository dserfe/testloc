{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex cf3b2c2..02c6968 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2614,23 +2614,25 @@ def _condition_arg(value):\n \n     Returns\n     -------\n-    Scalar value or numpy array\n-\n-    Raises\n-    ------\n-    ValueError\n-        If value is not as expected\n+    Scalar value, numpy array, or NotImplemented\n+        Returns NotImplemented if the value cannot be converted to a numeric array\n+\n+    Notes\n+    -----\n+    This function returns NotImplemented instead of raising ValueError when\n+    a value cannot be converted, to allow for proper fallback to reflected\n+    operations in ufuncs.\n     \"\"\"\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n \n-    avalue = np.array(value)\n-    if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n-        raise ValueError(\n-            \"Value not scalar compatible or convertible to \"\n-            \"an int, float, or complex array\"\n-        )\n-    return avalue\n+    try:\n+        avalue = np.array(value)\n+        if avalue.dtype.kind not in [\"i\", \"f\", \"c\"]:\n+            return NotImplemented\n+        return avalue\n+    except (TypeError, ValueError):\n+        return NotImplemented\n \n \n def unit_scale_converter(val):\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/core.py b/astropy/units/core.py\nindex 01221e1..c35ac11 100644\n--- a/astropy/units/core.py\n+++ b/astropy/units/core.py\n@@ -2108,19 +2108,24 @@ def _condition_arg(value):\n \n     Returns\n     -------\n-    Scalar value or numpy array\n-\n-    Raises\n-    ------\n-    ValueError\n-        If value is not as expected\n+    Scalar value, numpy array, or NotImplemented\n+        Returns NotImplemented if the value cannot be converted to a numeric array\n+\n+    Notes\n+    -----\n+    This function returns NotImplemented instead of raising ValueError when\n+    a value cannot be converted, to allow for proper fallback to reflected\n+    operations in ufuncs.\n     \"\"\"\n     if isinstance(value, (np.ndarray, float, int, complex, np.void)):\n         return value\n-    avalue = np.array(value)\n-    if avalue.dtype.kind not in ['i', 'f', 'c']:\n-        raise ValueError('Value not scalar compatible or convertible to an int, float, or complex array')\n-    return avalue\n+    try:\n+        avalue = np.array(value)\n+        if avalue.dtype.kind not in ['i', 'f', 'c']:\n+            return NotImplemented\n+        return avalue\n+    except (TypeError, ValueError):\n+        return NotImplemented\n \n def unit_scale_converter(val):\n     \"\"\"Function that just multiplies the value by unity.\n", "normalized_occurrence": 1}
