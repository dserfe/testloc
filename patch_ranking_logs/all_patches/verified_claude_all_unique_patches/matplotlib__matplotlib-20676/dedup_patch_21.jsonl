{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..98d15f7 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2280,12 +2280,14 @@ class SpanSelector(_SelectorWidget):\n     def _draw_shape(self, vmin, vmax):\n         if vmin > vmax:\n             vmin, vmax = vmax, vmin\n-        if self.direction == 'horizontal':\n-            self._rect.set_x(vmin)\n-            self._rect.set_width(vmax - vmin)\n-        else:\n-            self._rect.set_y(vmin)\n-            self._rect.set_height(vmax - vmin)\n+        # Only update the rectangle coordinates without changing axes limits\n+        with self.ax.set_autoscale_on(False):\n+            if self.direction == 'horizontal':\n+                self._rect.set_x(vmin)\n+                self._rect.set_width(vmax - vmin)\n+            else:\n+                self._rect.set_y(vmin)\n+                self._rect.set_height(vmax - vmin)\n \n     def _set_active_handle(self, event):\n         \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..a58ded1 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1858,12 +1858,13 @@ class SpanSelector(_SelectorWidget):\n     def _draw_shape(self, vmin, vmax):\n         if vmin > vmax:\n             vmin, vmax = (vmax, vmin)\n-        if self.direction == 'horizontal':\n-            self._rect.set_x(vmin)\n-            self._rect.set_width(vmax - vmin)\n-        else:\n-            self._rect.set_y(vmin)\n-            self._rect.set_height(vmax - vmin)\n+        with self.ax.set_autoscale_on(False):\n+            if self.direction == 'horizontal':\n+                self._rect.set_x(vmin)\n+                self._rect.set_width(vmax - vmin)\n+            else:\n+                self._rect.set_y(vmin)\n+                self._rect.set_height(vmax - vmin)\n \n     def _set_active_handle(self, event):\n         \"\"\"Set active handle based on the location of the mouse event.\"\"\"\n", "normalized_occurrence": 1}
