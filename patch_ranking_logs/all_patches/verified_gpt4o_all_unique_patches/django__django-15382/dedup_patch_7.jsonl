{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e64dbc9..855f1c0 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1219,7 +1219,12 @@ class Exists(Subquery):\n             **extra_context,\n         )\n         if self.negated:\n-            sql = 'NOT {}'.format(sql)\n+            if isinstance(query, EmptyResultSet):\n+                sql = 'TRUE'\n+            else:\n+                sql = 'NOT {}'.format(sql)\n+        elif isinstance(query, EmptyResultSet):\n+            sql = 'FALSE'\n         return sql, params\n \n     def select_format(self, compiler, sql, params):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ee0d94d..edb6bb6 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -758,7 +758,12 @@ class Exists(Subquery):\n         query = self.query.exists(using=connection.alias)\n         sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n         if self.negated:\n-            sql = 'NOT {}'.format(sql)\n+            if isinstance(query, EmptyResultSet):\n+                sql = 'TRUE'\n+            else:\n+                sql = 'NOT {}'.format(sql)\n+        elif isinstance(query, EmptyResultSet):\n+            sql = 'FALSE'\n         return (sql, params)\n     def select_format(self, compiler, sql, params):\n         if not compiler.connection.features.supports_boolean_expr_in_select_clause:\n", "normalized_occurrence": 1}
