{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-17630", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 5a4ea29..cd182b5 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -152,7 +152,18 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def colblocksizes(self):\n-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n+        sizes = []\n+        for i in range(self.blockshape[1]):\n+            block = self.blocks[0, i]\n+            if hasattr(block, 'cols'):\n+                sizes.append(block.cols)\n+            else:\n+                # If the block is Zero, we need to infer its size from the matrix structure\n+                total_cols = self.shape[1]\n+                # Assuming equal distribution for zero blocks\n+                size = total_cols // self.blockshape[1]\n+                sizes.append(size)\n+        return sizes\n \n     def structurally_equal(self, other):\n         return (isinstance(other, BlockMatrix)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex c0f9049..6f39615 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -67,7 +67,16 @@ class BlockMatrix(MatrixExpr):\n         return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]\n     @property\n     def colblocksizes(self):\n-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\n+        sizes = []\n+        for i in range(self.blockshape[1]):\n+            block = self.blocks[0, i]\n+            if hasattr(block, 'cols'):\n+                sizes.append(block.cols)\n+            else:\n+                total_cols = self.shape[1]\n+                size = total_cols // self.blockshape[1]\n+                sizes.append(size)\n+        return sizes\n     def structurally_equal(self, other):\n         return isinstance(other, BlockMatrix) and self.shape == other.shape and (self.blockshape == other.blockshape) and (self.rowblocksizes == other.rowblocksizes) and (self.colblocksizes == other.colblocksizes)\n     def _blockmul(self, other):\n", "normalized_occurrence": 1}
