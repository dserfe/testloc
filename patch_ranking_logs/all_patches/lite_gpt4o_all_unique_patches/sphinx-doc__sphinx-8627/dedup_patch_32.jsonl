{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..ea03695 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,9 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, TYPE_CHECKING\n+if TYPE_CHECKING:\n+    import struct\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -18,6 +20,13 @@ from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.inspect import safe_getattr\n+\n+def get_type_full_name(obj: Any) -> str:\n+    \"\"\"Get the full name of a type.\"\"\"\n+    if hasattr(obj, '__module__') and obj.__module__ == 'struct' and hasattr(obj, '__name__'):\n+        return 'struct.' + obj.__name__\n+    return typing.stringify(obj)\n \n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n@@ -28,6 +37,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            for param in sig.parameters.values():\n+                if isinstance(param.annotation, str):\n+                    param._annotation = get_type_full_name(eval(param.annotation))\n+            if isinstance(sig.return_annotation, str):\n+                sig._return_annotation = get_type_full_name(eval(sig.return_annotation))\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..a55cd98 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,17 +1,29 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, TYPE_CHECKING\n+if TYPE_CHECKING:\n+    import struct\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n+from sphinx.util.inspect import safe_getattr\n+def get_type_full_name(obj: Any) -> str:\n+    if hasattr(obj, '__module__') and obj.__module__ == 'struct' and hasattr(obj, '__name__'):\n+        return 'struct.' + obj.__name__\n+    return typing.stringify(obj)\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            for param in sig.parameters.values():\n+                if isinstance(param.annotation, str):\n+                    param._annotation = get_type_full_name(eval(param.annotation))\n+            if isinstance(sig.return_annotation, str):\n+                sig._return_annotation = get_type_full_name(eval(sig.return_annotation))\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "normalized_occurrence": 1}
