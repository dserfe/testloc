{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..904ca22 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1862,6 +1862,18 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     option_spec[\"annotation\"] = annotation_option\n     option_spec[\"no-value\"] = bool_option\n \n+    def check_module_skip(self) -> bool:\n+        \"\"\"Skip member if it's private and :meta public: is not set.\"\"\"\n+        if self.objpath[-1].startswith('_') and not self.objpath[-1].startswith('__'):\n+            doc = self.get_doc()\n+            if doc and doc[0]:\n+                # check if :meta public: is in the docstring\n+                for line in doc[0]:\n+                    if ':meta public:' in line:\n+                        return False\n+            return True\n+        return False\n+\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n+    def check_module_skip(self) -> bool:\n+        if self.objpath[-1].startswith('_') and (not self.objpath[-1].startswith('__')):\n+            doc = self.get_doc()\n+            if doc and doc[0]:\n+                for line in doc[0]:\n+                    if ':meta public:' in line:\n+                        return False\n+            return True\n+        return False", "normalized_occurrence": 1}
