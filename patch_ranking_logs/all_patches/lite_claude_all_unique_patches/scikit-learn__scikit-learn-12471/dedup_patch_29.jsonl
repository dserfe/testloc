{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 80fea06..e93e1b6 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -42,10 +42,13 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n         - convert list of strings to object dtype\n         - check for missing values for object dtype data (check_array does\n           not do that)\n-\n+        - ensure string arrays are using object dtype when strings of varying length\n+          are present or when handle_unknown='ignore' is set\n         \"\"\"\n         X_temp = check_array(X, dtype=None)\n-        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_):\n+        if (not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_)) or \\\n+           (hasattr(self, 'handle_unknown') and self.handle_unknown == 'ignore' and \n+            np.issubdtype(X_temp.dtype, np.str_)):\n             X = check_array(X, dtype=np.object)\n         else:\n             X = X_temp\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 8703749..af7f5ba 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -17,7 +17,7 @@ __all__ = ['OneHotEncoder', 'OrdinalEncoder']\n class _BaseEncoder(BaseEstimator, TransformerMixin):\n     def _check_X(self, X):\n         X_temp = check_array(X, dtype=None)\n-        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_):\n+        if not hasattr(X, 'dtype') and np.issubdtype(X_temp.dtype, np.str_) or (hasattr(self, 'handle_unknown') and self.handle_unknown == 'ignore' and np.issubdtype(X_temp.dtype, np.str_)):\n             X = check_array(X, dtype=np.object)\n         else:\n             X = X_temp\n", "normalized_occurrence": 1}
