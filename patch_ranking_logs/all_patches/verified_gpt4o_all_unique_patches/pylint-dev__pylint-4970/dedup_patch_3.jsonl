{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4970", "model_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 79a566f..179f371 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -475,8 +475,8 @@ class Similar:\n         hash_to_index_2: HashToIndex_T\n         index_to_lines_1: IndexToLines_T\n         index_to_lines_2: IndexToLines_T\n-        hash_to_index_1, index_to_lines_1 = hash_lineset(lineset1, self.min_lines)\n-        hash_to_index_2, index_to_lines_2 = hash_lineset(lineset2, self.min_lines)\n+        hash_to_index_1, index_to_lines_1 = hash_lineset(lineset1, min(self.min_lines, len(lineset1)))\n+        hash_to_index_2, index_to_lines_2 = hash_lineset(lineset2, min(self.min_lines, len(lineset2)))\n \n         hash_1: FrozenSet[LinesChunk] = frozenset(hash_to_index_1.keys())\n         hash_2: FrozenSet[LinesChunk] = frozenset(hash_to_index_2.keys())\n@@ -802,6 +802,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == \"min-similarity-lines\":\n             self.min_lines = self.config.min_similarity_lines\n+            if self.min_lines == 0:\n+                self.min_lines = float('inf')\n         elif optname == \"ignore-comments\":\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == \"ignore-docstrings\":\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/similar.py b/pylint/checkers/similar.py\nindex 0997b2e..3ed3a67 100644\n--- a/pylint/checkers/similar.py\n+++ b/pylint/checkers/similar.py\n@@ -189,8 +189,8 @@ class Similar:\n         hash_to_index_2: HashToIndex_T\n         index_to_lines_1: IndexToLines_T\n         index_to_lines_2: IndexToLines_T\n-        hash_to_index_1, index_to_lines_1 = hash_lineset(lineset1, self.min_lines)\n-        hash_to_index_2, index_to_lines_2 = hash_lineset(lineset2, self.min_lines)\n+        hash_to_index_1, index_to_lines_1 = hash_lineset(lineset1, min(self.min_lines, len(lineset1)))\n+        hash_to_index_2, index_to_lines_2 = hash_lineset(lineset2, min(self.min_lines, len(lineset2)))\n         hash_1: FrozenSet[LinesChunk] = frozenset(hash_to_index_1.keys())\n         hash_2: FrozenSet[LinesChunk] = frozenset(hash_to_index_2.keys())\n         common_hashes: Iterable[LinesChunk] = sorted(hash_1 & hash_2, key=lambda m: hash_to_index_1[m][0])\n@@ -306,6 +306,8 @@ class SimilarChecker(BaseChecker, Similar, MapReduceMixin):\n         BaseChecker.set_option(self, optname, value, action, optdict)\n         if optname == 'min-similarity-lines':\n             self.min_lines = self.config.min_similarity_lines\n+            if self.min_lines == 0:\n+                self.min_lines = float('inf')\n         elif optname == 'ignore-comments':\n             self.ignore_comments = self.config.ignore_comments\n         elif optname == 'ignore-docstrings':\n", "normalized_occurrence": 1}
