{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16408", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 83f3a12..5318844 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1832,15 +1832,19 @@ class Query(BaseExpression):\n                 nullable,\n                 filtered_relation=filtered_relation,\n             )\n-            reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n-            alias = self.join(\n-                connection,\n-                reuse=reuse,\n-                reuse_with_filtered_relation=reuse_with_filtered_relation,\n-            )\n-            joins.append(alias)\n             if filtered_relation:\n+                # Don't reuse joins for filtered relations to maintain proper chain\n+                reuse = None\n+                alias = self.join(connection, reuse=None, reuse_with_filtered_relation=False)\n                 filtered_relation.path = joins[:]\n+            else:\n+                reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n+                alias = self.join(\n+                    connection,\n+                    reuse=reuse,\n+                    reuse_with_filtered_relation=reuse_with_filtered_relation,\n+                )\n+            joins.append(alias)\n         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n \n     def trim_joins(self, targets, joins, path):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 0b42199..83c7b14 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -905,11 +905,14 @@ class Query(BaseExpression):\n             else:\n                 nullable = True\n             connection = self.join_class(opts.db_table, alias, table_alias, INNER, join.join_field, nullable, filtered_relation=filtered_relation)\n-            reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n-            alias = self.join(connection, reuse=reuse, reuse_with_filtered_relation=reuse_with_filtered_relation)\n-            joins.append(alias)\n             if filtered_relation:\n+                reuse = None\n+                alias = self.join(connection, reuse=None, reuse_with_filtered_relation=False)\n                 filtered_relation.path = joins[:]\n+            else:\n+                reuse = can_reuse if join.m2m or reuse_with_filtered_relation else None\n+                alias = self.join(connection, reuse=reuse, reuse_with_filtered_relation=reuse_with_filtered_relation)\n+            joins.append(alias)\n         return JoinInfo(final_field, targets, opts, joins, path, final_transformer)\n     def trim_joins(self, targets, joins, path):\n         joins = joins[:]\n", "normalized_occurrence": 1}
