{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..c6ac2e5 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -124,30 +124,44 @@ class Media:\n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n+\n+        The order is determined by the first list that contains any given item.\n+        When there are conflicts between the ordering of items between lists,\n+        the item will maintain the earliest position specified by any list.\n         \"\"\"\n-        # Start with a copy of list_1.\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        # Walk list_2 in reverse, inserting each element into combined_list if\n-        # it doesn't already exist.\n-        for path in reversed(list_2):\n-            try:\n-                # Does path already exist in the list?\n-                index = combined_list.index(path)\n-            except ValueError:\n-                # Add path to combined_list since it doesn't exist.\n-                combined_list.insert(last_insert_index, path)\n-            else:\n-                if index > last_insert_index:\n-                    warnings.warn(\n-                        'Detected duplicate Media files in an opposite order:\\n'\n-                        '%s\\n%s' % (combined_list[last_insert_index], combined_list[index]),\n-                        MediaOrderConflictWarning,\n-                    )\n-                # path already exists in the list. Update last_insert_index so\n-                # that the following elements are inserted in front of this one.\n-                last_insert_index = index\n-        return combined_list\n+        # Create ordered sets to track the relative ordering from each list\n+        order_1 = {item: idx for idx, item in enumerate(list_1)}\n+        order_2 = {item: idx for idx, item in enumerate(list_2)}\n+        \n+        # Combine unique items from both lists\n+        combined_items = set(list_1) | set(list_2)\n+        \n+        # For each item, get its earliest position in either list (if present)\n+        item_positions = {}\n+        for item in combined_items:\n+            pos_1 = order_1.get(item, len(list_1))\n+            pos_2 = order_2.get(item, len(list_2))\n+            item_positions[item] = min(pos_1, pos_2)\n+        \n+        # Check for ordering conflicts\n+        for item1 in combined_items:\n+            for item2 in combined_items:\n+                if item1 != item2:\n+                    # Check if the items appear in both lists in different orders\n+                    in_1_ordered = item1 in order_1 and item2 in order_1\n+                    in_2_ordered = item1 in order_2 and item2 in order_2\n+                    if in_1_ordered and in_2_ordered:\n+                        order_1_correct = order_1[item1] < order_1[item2]\n+                        order_2_correct = order_2[item1] < order_2[item2]\n+                        if order_1_correct != order_2_correct:\n+                            warnings.warn(\n+                                'Detected duplicate Media files in an opposite order:\\n'\n+                                '%s\\n%s' % (item1, item2),\n+                                MediaOrderConflictWarning,\n+                            )\n+        \n+        # Sort by position and return\n+        return sorted(combined_items, key=lambda x: item_positions[x])\n \n     def __add__(self, other):\n         combined = Media()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..aad171d 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -63,18 +63,25 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n     def merge(list_1, list_2):\n-        combined_list = list(list_1)\n-        last_insert_index = len(list_1)\n-        for path in reversed(list_2):\n-            try:\n-                index = combined_list.index(path)\n-            except ValueError:\n-                combined_list.insert(last_insert_index, path)\n-            else:\n-                if index > last_insert_index:\n-                    warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (combined_list[last_insert_index], combined_list[index]), MediaOrderConflictWarning)\n-                last_insert_index = index\n-        return combined_list\n+        order_1 = {item: idx for idx, item in enumerate(list_1)}\n+        order_2 = {item: idx for idx, item in enumerate(list_2)}\n+        combined_items = set(list_1) | set(list_2)\n+        item_positions = {}\n+        for item in combined_items:\n+            pos_1 = order_1.get(item, len(list_1))\n+            pos_2 = order_2.get(item, len(list_2))\n+            item_positions[item] = min(pos_1, pos_2)\n+        for item1 in combined_items:\n+            for item2 in combined_items:\n+                if item1 != item2:\n+                    in_1_ordered = item1 in order_1 and item2 in order_1\n+                    in_2_ordered = item1 in order_2 and item2 in order_2\n+                    if in_1_ordered and in_2_ordered:\n+                        order_1_correct = order_1[item1] < order_1[item2]\n+                        order_2_correct = order_2[item1] < order_2[item2]\n+                        if order_1_correct != order_2_correct:\n+                            warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (item1, item2), MediaOrderConflictWarning)\n+        return sorted(combined_items, key=lambda x: item_positions[x])\n     def __add__(self, other):\n         combined = Media()\n         combined._css_lists = self._css_lists + other._css_lists\n", "normalized_occurrence": 1}
