{"model_name_or_path": "agentless", "instance_id": "django__django-11211", "model_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 3bf5851..e79020b 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -184,6 +184,10 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is not None:\n                 fk_val = getattr(instance, self.fk_field)\n                 if fk_val is not None:\n+                    # Ensure that UUID fields are correctly handled\n+                    field = instance._meta.get_field(self.fk_field)\n+                    if isinstance(field, models.UUIDField):\n+                        fk_val = str(fk_val)\n                     fk_dict[ct_id].add(fk_val)\n                     instance_dict[ct_id] = instance\n \n@@ -202,8 +206,11 @@ class GenericForeignKey(FieldCacheMixin):\n             else:\n                 model = self.get_content_type(id=ct_id,\n                                               using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),\n-                        model)\n+                fk_val = getattr(obj, self.fk_field)\n+                field = obj._meta.get_field(self.fk_field)\n+                if isinstance(field, models.UUIDField):\n+                    fk_val = uuid.UUID(fk_val)\n+                return (model._meta.pk.get_prep_value(fk_val), model)\n \n         return (\n             ret_val,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py\nindex 8e99ea7..040d8fd 100644\n--- a/django/contrib/contenttypes/fields.py\n+++ b/django/contrib/contenttypes/fields.py\n@@ -87,6 +87,9 @@ class GenericForeignKey(FieldCacheMixin):\n             if ct_id is not None:\n                 fk_val = getattr(instance, self.fk_field)\n                 if fk_val is not None:\n+                    field = instance._meta.get_field(self.fk_field)\n+                    if isinstance(field, models.UUIDField):\n+                        fk_val = str(fk_val)\n                     fk_dict[ct_id].add(fk_val)\n                     instance_dict[ct_id] = instance\n         ret_val = []\n@@ -100,7 +103,11 @@ class GenericForeignKey(FieldCacheMixin):\n                 return None\n             else:\n                 model = self.get_content_type(id=ct_id, using=obj._state.db).model_class()\n-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)), model)\n+                fk_val = getattr(obj, self.fk_field)\n+                field = obj._meta.get_field(self.fk_field)\n+                if isinstance(field, models.UUIDField):\n+                    fk_val = uuid.UUID(fk_val)\n+                return (model._meta.pk.get_prep_value(fk_val), model)\n         return (ret_val, lambda obj: (obj.pk, obj.__class__), gfk_key, True, self.name, True)\n     def __get__(self, instance, cls=None):\n         if instance is None:\n", "normalized_occurrence": 1}
