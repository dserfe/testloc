{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..c001933 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -256,15 +256,24 @@ class ForwardManyToOneDescriptor:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n-        # Set the related instance cache used by __get__ to avoid an SQL query\n-        # when accessing the attribute we just set.\n-        self.field.set_cached_value(instance, value)\n-\n-        # If this is a one-to-one relation, set the reverse accessor cache on\n-        # the related object to the current instance to avoid an extra SQL\n-        # query if it's accessed later on.\n-        if value is not None and not remote_field.multiple:\n-            remote_field.set_cached_value(value, instance)\n+        # Enforce the assignment of the primary key of the related object\n+        if value is not None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+\n+            # Ensure instance gets updated with the pk value of the related object\n+            if value._state.adding and value.pk is None and isinstance(value._meta.pk, CharField):\n+                value.save()  # Ensure the related object's primary key is saved\n+\n+            # Set the related instance cache used by __get__ to avoid an SQL query\n+            # when accessing the attribute we just set.\n+            self.field.set_cached_value(instance, value)\n+\n+            # If this is a one-to-one relation, set the reverse accessor cache on\n+            # the related object to the current instance to avoid an extra SQL\n+            # query if it's accessed later on.\n+            if not remote_field.multiple:\n+                remote_field.set_cached_value(value, instance)\n \n     def __reduce__(self):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..a52ea44 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -85,9 +85,14 @@ class ForwardManyToOneDescriptor:\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n-        self.field.set_cached_value(instance, value)\n-        if value is not None and (not remote_field.multiple):\n-            remote_field.set_cached_value(value, instance)\n+        if value is not None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+            if value._state.adding and value.pk is None and isinstance(value._meta.pk, CharField):\n+                value.save()\n+            self.field.set_cached_value(instance, value)\n+            if not remote_field.multiple:\n+                remote_field.set_cached_value(value, instance)\n     def __reduce__(self):\n         return (getattr, (self.field.model, self.field.name))\n class ForwardOneToOneDescriptor(ForwardManyToOneDescriptor):\n", "normalized_occurrence": 1}
