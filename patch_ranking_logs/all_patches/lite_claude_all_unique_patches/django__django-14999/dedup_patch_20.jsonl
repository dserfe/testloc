{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14999", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 165c6f5..982ceb4 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -320,53 +320,18 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n-            # Move the main table\n-            schema_editor.alter_db_table(\n-                new_model,\n-                old_model._meta.db_table,\n-                new_model._meta.db_table,\n-            )\n-            # Alter the fields pointing to us\n-            for related_object in old_model._meta.related_objects:\n-                if related_object.related_model == old_model:\n-                    model = new_model\n-                    related_key = (app_label, self.new_name_lower)\n-                else:\n-                    model = related_object.related_model\n-                    related_key = (\n-                        related_object.related_model._meta.app_label,\n-                        related_object.related_model._meta.model_name,\n-                    )\n-                to_field = to_state.apps.get_model(\n-                    *related_key\n-                )._meta.get_field(related_object.field.name)\n-                schema_editor.alter_field(\n-                    model,\n-                    related_object.field,\n-                    to_field,\n-                )\n-            # Rename M2M fields whose name is based on this model's name.\n-            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n-            for (old_field, new_field) in fields:\n-                # Skip self-referential fields as these are renamed above.\n-                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n-                    continue\n-                # Rename the M2M table that's based on this model's name.\n-                old_m2m_model = old_field.remote_field.through\n-                new_m2m_model = new_field.remote_field.through\n+            # Skip table rename if both models have the same db_table defined\n+            old_db_table = old_model._meta.db_table\n+            new_db_table = new_model._meta.db_table\n+            if old_db_table != new_db_table:\n+                # Move the main table\n                 schema_editor.alter_db_table(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.db_table,\n-                    new_m2m_model._meta.db_table,\n-                )\n-                # Rename the column in the M2M table that's based on this\n-                # model's name.\n-                schema_editor.alter_field(\n-                    new_m2m_model,\n-                    old_m2m_model._meta.get_field(old_model._meta.model_name),\n-                    new_m2m_model._meta.get_field(new_model._meta.model_name),\n+                    new_model,\n+                    old_db_table,\n+                    new_db_table,\n                 )\n \n+\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         self.new_name_lower, self.old_name_lower = self.old_name_lower, self.new_name_lower\n         self.new_name, self.old_name = self.old_name, self.new_name\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 8445d8b..f4a032e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -152,24 +152,10 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n-            schema_editor.alter_db_table(new_model, old_model._meta.db_table, new_model._meta.db_table)\n-            for related_object in old_model._meta.related_objects:\n-                if related_object.related_model == old_model:\n-                    model = new_model\n-                    related_key = (app_label, self.new_name_lower)\n-                else:\n-                    model = related_object.related_model\n-                    related_key = (related_object.related_model._meta.app_label, related_object.related_model._meta.model_name)\n-                to_field = to_state.apps.get_model(*related_key)._meta.get_field(related_object.field.name)\n-                schema_editor.alter_field(model, related_object.field, to_field)\n-            fields = zip(old_model._meta.local_many_to_many, new_model._meta.local_many_to_many)\n-            for old_field, new_field in fields:\n-                if new_field.model == new_field.related_model or not new_field.remote_field.through._meta.auto_created:\n-                    continue\n-                old_m2m_model = old_field.remote_field.through\n-                new_m2m_model = new_field.remote_field.through\n-                schema_editor.alter_db_table(new_m2m_model, old_m2m_model._meta.db_table, new_m2m_model._meta.db_table)\n-                schema_editor.alter_field(new_m2m_model, old_m2m_model._meta.get_field(old_model._meta.model_name), new_m2m_model._meta.get_field(new_model._meta.model_name))\n+            old_db_table = old_model._meta.db_table\n+            new_db_table = new_model._meta.db_table\n+            if old_db_table != new_db_table:\n+                schema_editor.alter_db_table(new_model, old_db_table, new_db_table)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n", "normalized_occurrence": 1}
