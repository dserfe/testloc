{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..57a70e7 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -2033,6 +2033,11 @@ class VariablesChecker(BaseChecker):\n                 is_type_annotation_import = (\n                     imported_name in self._type_annotation_names\n                     or as_name in self._type_annotation_names\n+                    or any(\n+                        imported_name in getattr(node, \"type_comment\", \"\")\n+                        or (as_name and as_name in getattr(node, \"type_comment\", \"\"))\n+                        for node in stmt.root().nodes_of_class(astroid.NodeNG)\n+                    )\n                 )\n                 if isinstance(stmt, astroid.Import) or (\n                     isinstance(stmt, astroid.ImportFrom) and not stmt.modname\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..55239d3 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -805,7 +805,7 @@ class VariablesChecker(BaseChecker):\n                 if name not in (real_name, as_name):\n                     continue\n                 checked.add(real_name)\n-                is_type_annotation_import = imported_name in self._type_annotation_names or as_name in self._type_annotation_names\n+                is_type_annotation_import = imported_name in self._type_annotation_names or as_name in self._type_annotation_names or any((imported_name in getattr(node, 'type_comment', '') or (as_name and as_name in getattr(node, 'type_comment', '')) for node in stmt.root().nodes_of_class(astroid.NodeNG)))\n                 if isinstance(stmt, astroid.Import) or (isinstance(stmt, astroid.ImportFrom) and (not stmt.modname)):\n                     if isinstance(stmt, astroid.ImportFrom) and SPECIAL_OBJ.search(imported_name):\n                         continue\n", "normalized_occurrence": 1}
