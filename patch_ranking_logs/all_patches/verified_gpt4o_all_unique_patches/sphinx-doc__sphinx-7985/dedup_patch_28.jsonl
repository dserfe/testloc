{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..b2bb717 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -75,9 +75,9 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n     return parser.found\n \n \n-class CheckExternalLinksBuilder(Builder):\n+class CheckLinksBuilder(Builder):\n     \"\"\"\n-    Checks for broken external links.\n+    Checks for broken links (both external and internal).\n     \"\"\"\n     name = 'linkcheck'\n     epilog = __('Look for any errors in the above output or in '\n@@ -268,9 +268,14 @@ class CheckExternalLinksBuilder(Builder):\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n         elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n+            # Check if the local file exists\n+            if path.exists(path.join(self.env.srcdir, uri)):\n+                logger.info(darkgreen('ok        ') + uri)\n+                self.write_linkstat(linkstat)\n+            else:\n+                logger.info(red('broken    ') + uri + red(' - local file not found'))\n+                self.write_entry('broken', docname, filename, lineno, uri + ': local file not found')\n+                self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n@@ -312,20 +317,16 @@ class CheckExternalLinksBuilder(Builder):\n         logger.info('')\n         n = 0\n \n-        # reference nodes\n-        for refnode in doctree.traverse(nodes.reference):\n-            if 'refuri' not in refnode:\n-                continue\n-            uri = refnode['refuri']\n-            lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n-            n += 1\n-\n-        # image nodes\n-        for imgnode in doctree.traverse(nodes.image):\n-            uri = imgnode['candidates'].get('?')\n-            if uri and '://' in uri:\n-                lineno = get_node_line(imgnode)\n+        # iterate over reference nodes and image nodes\n+        for nodetype in (nodes.reference, nodes.image):\n+            for node in doctree.traverse(nodetype):\n+                if nodetype is nodes.reference and 'refuri' in node:\n+                    uri = node['refuri']\n+                elif nodetype is nodes.image and node['candidates'].get('?'):\n+                    uri = node['candidates'].get('?')\n+                else:\n+                    continue\n+                lineno = get_node_line(node)\n                 self.wqueue.put((uri, docname, lineno), False)\n                 n += 1\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..563c41b 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -39,7 +39,7 @@ def check_anchor(response: requests.requests.Response, anchor: str) -> bool:\n             break\n     parser.close()\n     return parser.found\n-class CheckExternalLinksBuilder(Builder):\n+class CheckLinksBuilder(Builder):\n     name = 'linkcheck'\n     epilog = __('Look for any errors in the above output or in %(outdir)s/output.txt')\n     def init(self) -> None:\n@@ -179,9 +179,13 @@ class CheckExternalLinksBuilder(Builder):\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n         elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n-            self.write_linkstat(linkstat)\n+            if path.exists(path.join(self.env.srcdir, uri)):\n+                logger.info(darkgreen('ok        ') + uri)\n+                self.write_linkstat(linkstat)\n+            else:\n+                logger.info(red('broken    ') + uri + red(' - local file not found'))\n+                self.write_entry('broken', docname, filename, lineno, uri + ': local file not found')\n+                self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n@@ -210,17 +214,15 @@ class CheckExternalLinksBuilder(Builder):\n     def write_doc(self, docname: str, doctree: Node) -> None:\n         logger.info('')\n         n = 0\n-        for refnode in doctree.traverse(nodes.reference):\n-            if 'refuri' not in refnode:\n-                continue\n-            uri = refnode['refuri']\n-            lineno = get_node_line(refnode)\n-            self.wqueue.put((uri, docname, lineno), False)\n-            n += 1\n-        for imgnode in doctree.traverse(nodes.image):\n-            uri = imgnode['candidates'].get('?')\n-            if uri and '://' in uri:\n-                lineno = get_node_line(imgnode)\n+        for nodetype in (nodes.reference, nodes.image):\n+            for node in doctree.traverse(nodetype):\n+                if nodetype is nodes.reference and 'refuri' in node:\n+                    uri = node['refuri']\n+                elif nodetype is nodes.image and node['candidates'].get('?'):\n+                    uri = node['candidates'].get('?')\n+                else:\n+                    continue\n+                lineno = get_node_line(node)\n                 self.wqueue.put((uri, docname, lineno), False)\n                 n += 1\n         done = 0\n", "normalized_occurrence": 1}
