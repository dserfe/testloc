{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..0f61a32 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1251,6 +1251,10 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise TypeError(\n                     \"When providing two arguments, they must be \"\n                     \"(coords[N][{0}], origin)\".format(self.naxis))\n+            # Handle empty input arrays\n+            if xy.size == 0:\n+                return np.array([]).reshape(xy.shape[:-1] + (self.naxis,))\n+\n             if self.naxis == 1 and len(xy.shape) == 1:\n                 return _return_list_of_arrays([xy], origin)\n             return _return_single_array(xy, origin)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..9e42ae4 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -622,6 +622,8 @@ class WCS(WCSBase):\n                 origin = int(origin)\n             except Exception:\n                 raise TypeError('When providing two arguments, they must be (coords[N][{0}], origin)'.format(self.naxis))\n+            if xy.size == 0:\n+                return np.array([]).reshape(xy.shape[:-1] + (self.naxis,))\n             if self.naxis == 1 and len(xy.shape) == 1:\n                 return _return_list_of_arrays([xy], origin)\n             return _return_single_array(xy, origin)\n", "normalized_occurrence": 1}
