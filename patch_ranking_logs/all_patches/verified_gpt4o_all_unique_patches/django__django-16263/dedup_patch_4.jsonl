{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex a096f65..2221b85 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -622,7 +622,10 @@ class QuerySet(AltersData):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n \n-        return self.query.get_count(using=self.db)\n+        clean_query = self.query.clone()\n+        for alias in list(clean_query.annotations.keys()):\n+            clean_query.annotations.pop(alias)\n+        return clean_query.get_count(using=self.db)\n \n     async def acount(self):\n         return await sync_to_async(self.count)()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 56014f8..e1ecdbf 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -323,7 +323,10 @@ class QuerySet(AltersData):\n     def count(self):\n         if self._result_cache is not None:\n             return len(self._result_cache)\n-        return self.query.get_count(using=self.db)\n+        clean_query = self.query.clone()\n+        for alias in list(clean_query.annotations.keys()):\n+            clean_query.annotations.pop(alias)\n+        return clean_query.get_count(using=self.db)\n     async def acount(self):\n         return await sync_to_async(self.count)()\n     def get(self, *args, **kwargs):\n", "normalized_occurrence": 1}
