{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..1c6983f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1268,9 +1268,7 @@ class Intersection(Set, LatticeOp):\n             return simplify_intersection(args)\n \n         args = list(ordered(args, Set._infimum_key))\n-\n         obj = Basic.__new__(cls, *args)\n-        obj._argset = frozenset(args)\n         return obj\n \n     @property\n@@ -1982,6 +1980,13 @@ def simplify_intersection(args):\n     # ===== Global Rules =====\n     if not args:\n         return S.UniversalSet\n+        \n+    # Remove duplicates while preserving order\n+    unique_args = []\n+    for arg in args:\n+        if arg not in unique_args:\n+            unique_args.append(arg)\n+    args = unique_args\n \n     for arg in args:\n         if not isinstance(arg, Set):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..9617903 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -479,7 +479,6 @@ class Intersection(Set, LatticeOp):\n             return simplify_intersection(args)\n         args = list(ordered(args, Set._infimum_key))\n         obj = Basic.__new__(cls, *args)\n-        obj._argset = frozenset(args)\n         return obj\n     @property\n     @cacheit\n@@ -840,6 +839,11 @@ def simplify_union(args):\n def simplify_intersection(args):\n     if not args:\n         return S.UniversalSet\n+    unique_args = []\n+    for arg in args:\n+        if arg not in unique_args:\n+            unique_args.append(arg)\n+    args = unique_args\n     for arg in args:\n         if not isinstance(arg, Set):\n             raise TypeError('Input args to Union must be Sets')\n", "normalized_occurrence": 1}
