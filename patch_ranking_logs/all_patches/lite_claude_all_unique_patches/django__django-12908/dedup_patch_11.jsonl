{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..08e139c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,7 +475,19 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        \n+        # If this is a UNION with DISTINCT ON fields, wrap the entire UNION in a subquery\n+        if (combinator == 'union' and hasattr(self.query, 'distinct_fields') and \n+            self.query.distinct_fields):\n+            result = ['SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(\n+                ', '.join(self.quote_name_unless_alias(field) \n+                         for field in self.query.distinct_fields),\n+                ' {} '.format(combinator_sql).join(sql_parts),\n+                self.connection.ops.quote_name('subquery')\n+            )]\n+        else:\n+            result = [' {} '.format(combinator_sql).join(sql_parts)]\n+            \n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..17095d5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,7 +267,10 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        if combinator == 'union' and hasattr(self.query, 'distinct_fields') and self.query.distinct_fields:\n+            result = ['SELECT DISTINCT ON ({}) * FROM ({}) AS {}'.format(', '.join((self.quote_name_unless_alias(field) for field in self.query.distinct_fields)), ' {} '.format(combinator_sql).join(sql_parts), self.connection.ops.quote_name('subquery'))]\n+        else:\n+            result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n         for part in args_parts:\n             params.extend(part)\n", "normalized_occurrence": 1}
