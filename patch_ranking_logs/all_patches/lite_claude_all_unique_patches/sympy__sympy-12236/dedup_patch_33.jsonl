{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..e38eaf5 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -127,6 +127,18 @@ def apart(f, x=None, full=False, **options):\n \n     common, P, Q = P.cancel(Q)\n \n+    # First try partial fraction decomposition without polynomial division\n+    if P.has_free_symbols:\n+        try:\n+            if not full:\n+                partial = apart_undetermined_coeffs(P, Q)\n+            else:\n+                partial = apart_full_decomposition(P, Q)\n+            return common * partial\n+        except (PolynomialError, NotImplementedError):\n+            pass\n+\n+    # Fall back to normal processing if the above fails\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..98a49ac 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -60,6 +60,15 @@ def apart(f, x=None, full=False, **options):\n             return apart(fc, x=x, full=full, **_options)\n         raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n+    if P.has_free_symbols:\n+        try:\n+            if not full:\n+                partial = apart_undetermined_coeffs(P, Q)\n+            else:\n+                partial = apart_full_decomposition(P, Q)\n+            return common * partial\n+        except (PolynomialError, NotImplementedError):\n+            pass\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n", "normalized_occurrence": 1}
