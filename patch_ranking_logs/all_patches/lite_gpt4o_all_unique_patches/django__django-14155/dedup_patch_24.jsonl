{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..a071dde 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -31,7 +31,14 @@ from .utils import get_callable\n \n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = None\n+            self.partial_keywords = None\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,8 +66,15 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        if self.partial_args is not None or self.partial_keywords is not None:\n+            func_repr = \"functools.partial(%s, args=%s, kwargs=%s)\" % (\n+                self._func_path, self.partial_args, self.partial_keywords,\n+            )\n+        else:\n+            func_repr = self._func_path\n+        \n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_repr, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..0d089de 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,7 +19,14 @@ from .exceptions import NoReverseMatch, Resolver404\n from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n-        self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.partial_args = func.args\n+            self.partial_keywords = func.keywords\n+        else:\n+            self.func = func\n+            self.partial_args = None\n+            self.partial_keywords = None\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -38,7 +45,11 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        if self.partial_args is not None or self.partial_keywords is not None:\n+            func_repr = 'functools.partial(%s, args=%s, kwargs=%s)' % (self._func_path, self.partial_args, self.partial_keywords)\n+        else:\n+            func_repr = self._func_path\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_repr, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
