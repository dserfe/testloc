{"model_name_or_path": "agentless", "instance_id": "django__django-16116", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex f0e76b4..55a7037 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -117,6 +117,10 @@ class Command(BaseCommand):\n         if self.scriptable:\n             self.stderr.style_func = None\n \n+        # If check_changes is True, set dry_run to True to avoid creating migrations\n+        if check_changes:\n+            self.dry_run = True\n+\n         # Make sure the app they asked for exists\n         app_labels = set(app_labels)\n         has_bad_labels = False\n@@ -254,6 +258,9 @@ class Command(BaseCommand):\n                 self.write_migration_files(changes)\n             if check_changes:\n                 sys.exit(1)\n+            elif self.dry_run:\n+                self.log(\"Migrations would be created for the following apps: %s\" % \", \".join(changes.keys()))\n+                sys.exit(0)\n \n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex be2b711..ba22f80 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -51,6 +51,8 @@ class Command(BaseCommand):\n         self.update = options['update']\n         if self.scriptable:\n             self.stderr.style_func = None\n+        if check_changes:\n+            self.dry_run = True\n         app_labels = set(app_labels)\n         has_bad_labels = False\n         for app_label in app_labels:\n@@ -111,6 +113,9 @@ class Command(BaseCommand):\n                 self.write_migration_files(changes)\n             if check_changes:\n                 sys.exit(1)\n+            elif self.dry_run:\n+                self.log('Migrations would be created for the following apps: %s' % ', '.join(changes.keys()))\n+                sys.exit(0)\n     def write_to_last_migration_files(self, changes):\n         loader = MigrationLoader(connections[DEFAULT_DB_ALIAS])\n         new_changes = {}\n", "normalized_occurrence": 1}
