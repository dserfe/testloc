{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..f461e28 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2130,7 +2130,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj) or (isinstance(obj, property) and inspect.isclassmethod(obj.fget)):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n@@ -2661,7 +2661,8 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return (inspect.isproperty(member) or \n+                (isinstance(member, property) and inspect.isclassmethod(member.fget))) and isinstance(parent, ClassDocumenter)\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..2170e34 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1241,7 +1241,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isclassmethod(obj) or (isinstance(obj, property) and inspect.isclassmethod(obj.fget)):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n@@ -1597,7 +1597,7 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        return (inspect.isproperty(member) or (isinstance(member, property) and inspect.isclassmethod(member.fget))) and isinstance(parent, ClassDocumenter)\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n", "normalized_occurrence": 2}
