{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23534", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex e6fdcf8..66f2270 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -790,10 +790,12 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n \n         return tuple(result)\n     else:\n-        for name in names:\n-            result.append(symbols(name, **args))\n-\n-        return type(names)(result)\n+        if isinstance(names, (tuple, list)):\n+            for name in names:\n+                result.append(symbols(name, **args))\n+            return type(names)(result)\n+        else:\n+            return [cls(s, **args) for s in names]\n \n \n def var(names, **args):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 6e0b9ca..ebfe1c1 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -289,10 +289,12 @@ def symbols(names, *, cls=Symbol, **args) -> Any:\n                 return ()\n             return result[0]\n         return tuple(result)\n-    else:\n+    elif isinstance(names, (tuple, list)):\n         for name in names:\n             result.append(symbols(name, **args))\n         return type(names)(result)\n+    else:\n+        return [cls(s, **args) for s in names]\n def var(names, **args):\n     def traverse(symbols, frame):\n         for symbol in symbols:\n", "normalized_occurrence": 1}
