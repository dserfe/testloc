{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex b4a2caa..cf9f037 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -852,6 +852,15 @@ def eval_sum(f, limits):\n         return S.Zero\n     if i not in f.free_symbols:\n         return f*(b - a + 1)\n+    # Special case for identity matrix elements\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if ask(Q.identity(matrix)):\n+            i, j = f.args[1:]\n+            # For identity matrix, element is 1 if i==j, 0 otherwise\n+            if i == j:\n+                return S.One\n+            return S.Zero\n     if a == b:\n         return f.subs(i, a)\n     if isinstance(f, Piecewise):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 3200d91..63e599e 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -330,6 +330,13 @@ def eval_sum(f, limits):\n         return S.Zero\n     if i not in f.free_symbols:\n         return f * (b - a + 1)\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if ask(Q.identity(matrix)):\n+            i, j = f.args[1:]\n+            if i == j:\n+                return S.One\n+            return S.Zero\n     if a == b:\n         return f.subs(i, a)\n     if isinstance(f, Piecewise):\n", "normalized_occurrence": 1}
