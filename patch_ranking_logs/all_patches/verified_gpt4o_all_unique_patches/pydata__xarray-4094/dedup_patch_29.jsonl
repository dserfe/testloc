{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..c87e084 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1388,7 +1388,10 @@ class Variable(\n             tmp_shape = tuple(dims_map[d] for d in expanded_dims)\n             expanded_data = duck_array_ops.broadcast_to(self.data, tmp_shape)\n         else:\n-            expanded_data = self.data[(None,) * (len(expanded_dims) - self.ndim)]\n+            if len(expanded_dims) > 0:\n+                expanded_data = self.data[(None,) * (len(expanded_dims) - self.ndim)]\n+            else:\n+                expanded_data = self.data\n \n         expanded_var = Variable(\n             expanded_dims, expanded_data, self._attrs, self._encoding, fastpath=True\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..54d1741 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1055,8 +1055,10 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n             dims_map = dict(zip(dims, shape))\n             tmp_shape = tuple((dims_map[d] for d in expanded_dims))\n             expanded_data = duck_array_ops.broadcast_to(self.data, tmp_shape)\n-        else:\n+        elif len(expanded_dims) > 0:\n             expanded_data = self.data[(None,) * (len(expanded_dims) - self.ndim)]\n+        else:\n+            expanded_data = self.data\n         expanded_var = Variable(expanded_dims, expanded_data, self._attrs, self._encoding, fastpath=True)\n         return expanded_var.transpose(*dims)\n \n", "normalized_occurrence": 1}
