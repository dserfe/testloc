{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6517a9e..5ea251c 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -586,15 +586,25 @@ class PyLinter(\n         \"\"\"Discover python modules and packages in sub-directory.\n \n         Returns iterator of paths to discovered modules and packages.\n+\n+        For backward compatibility, we first check if the directory contains an __init__.py \n+        and yield it as a package in that case. Otherwise, for Python 3.3+ namespace packages,\n+        we yield all .py files in the directory.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n+                has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n+                \n+                # If it's a traditional package with __init__.py, yield the directory\n+                if has_init:\n+                    yield something\n+                    continue\n+                \n+                # For directories without __init__.py (namespace packages in Python 3.3+)\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n-                        # Skip subtree of already discovered package.\n+                        # Skip subtree of already discovered package\n                         continue\n \n                     if _is_ignored_file(\n@@ -606,15 +616,18 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n+                    # Handle nested packages with __init__.py\n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n-                    else:\n-                        yield from (\n-                            os.path.join(root, file)\n-                            for file in files\n-                            if file.endswith(\".py\")\n-                        )\n+                        continue\n+                    \n+                    # Yield all Python files in the directory\n+                    yield from (\n+                        os.path.join(root, file)\n+                        for file in files\n+                        if file.endswith(\".py\")\n+                    )\n             else:\n                 yield something\n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6a01a21..7ef3587 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -225,8 +225,12 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 self._msgs_state[msg.msgid] = False\n     def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n         for something in files_or_modules:\n-            if os.path.isdir(something) and (not os.path.isfile(os.path.join(something, '__init__.py'))):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n+                has_init = os.path.isfile(os.path.join(something, '__init__.py'))\n+                if has_init:\n+                    yield something\n+                    continue\n                 for root, _, files in os.walk(something):\n                     if any((root.startswith(s) for s in skip_subtrees)):\n                         continue\n@@ -236,8 +240,8 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                     if '__init__.py' in files:\n                         skip_subtrees.append(root)\n                         yield root\n-                    else:\n-                        yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n+                        continue\n+                    yield from (os.path.join(root, file) for file in files if file.endswith('.py'))\n             else:\n                 yield something\n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n", "normalized_occurrence": 1}
