{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-11510", "model_patch": "diff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 96f4a03..f52019d 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -556,6 +556,9 @@ class BuildEnvironment:\n         self.temp_data[key] = cur + 1\n         return cur\n \n+    def __init__(self) -> None:\n+        self._content_cache = {}  # cache for modified file contents\n+\n     def note_dependency(self, filename: str) -> None:\n         \"\"\"Add *filename* as a dependency of the current document.\n \ndiff --git a/sphinx/io.py b/sphinx/io.py\nindex 2cbe59f..a1208d0 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -112,6 +112,9 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         # emit \"source-read\" event\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        # Store the modified content in the environment for later use with includes\n+        if hasattr(self.source, 'source_path'):\n+            env._content_cache[self.source.source_path] = arg[0]\n         return arg[0]\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/io.py b/sphinx/io.py\nindex 93c5794..ff65475 100644\n--- a/sphinx/io.py\n+++ b/sphinx/io.py\n@@ -64,6 +64,8 @@ class SphinxStandaloneReader(SphinxBaseReader):\n         content = self.source.read()\n         arg = [content]\n         env.events.emit('source-read', env.docname, arg)\n+        if hasattr(self.source, 'source_path'):\n+            env._content_cache[self.source.source_path] = arg[0]\n         return arg[0]\n class SphinxI18nReader(SphinxBaseReader):\n     def setup(self, app: Sphinx) -> None:\ndiff --git a/sphinx/environment/__init__.py b/sphinx/environment/__init__.py\nindex 3c422c4..f1ea741 100644\n--- a/sphinx/environment/__init__.py\n+++ b/sphinx/environment/__init__.py\n@@ -325,6 +325,8 @@ class BuildEnvironment:\n         cur = self.temp_data.get(key, 0)\n         self.temp_data[key] = cur + 1\n         return cur\n+    def __init__(self) -> None:\n+        self._content_cache = {}\n     def note_dependency(self, filename: str) -> None:\n         self.dependencies[self.docname].add(filename)\n     def note_included(self, filename: str) -> None:\n", "normalized_occurrence": 1}
