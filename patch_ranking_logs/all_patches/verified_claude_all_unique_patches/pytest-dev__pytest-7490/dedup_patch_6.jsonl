{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 1ea0522..cda111e 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -258,29 +258,7 @@ class Node(metaclass=NodeMeta):\n         chain.reverse()\n         return chain\n \n-    def add_marker(\n-        self, marker: Union[str, MarkDecorator], append: bool = True\n-    ) -> None:\n-        \"\"\"dynamically add a marker object to the node.\n-\n-        :type marker: ``str`` or ``pytest.mark.*``  object\n-        :param marker:\n-            ``append=True`` whether to append the marker,\n-            if ``False`` insert at position ``0``.\n-        \"\"\"\n-        from _pytest.mark import MARK_GEN\n \n-        if isinstance(marker, MarkDecorator):\n-            marker_ = marker\n-        elif isinstance(marker, str):\n-            marker_ = getattr(MARK_GEN, marker)\n-        else:\n-            raise ValueError(\"is not a string or pytest.mark.* Marker\")\n-        self.keywords[marker_.name] = marker_\n-        if append:\n-            self.own_markers.append(marker_.mark)\n-        else:\n-            self.own_markers.insert(0, marker_.mark)\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 8a79019..06ba7e6 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -193,27 +193,6 @@ class Node(metaclass=NodeMeta):\n         chain.reverse()\n         return chain\n \n-    def add_marker(self, marker: Union[str, MarkDecorator], append: bool=True) -> None:\n-        \"\"\"dynamically add a marker object to the node.\n-\n-        :type marker: ``str`` or ``pytest.mark.*``  object\n-        :param marker:\n-            ``append=True`` whether to append the marker,\n-            if ``False`` insert at position ``0``.\n-        \"\"\"\n-        from _pytest.mark import MARK_GEN\n-        if isinstance(marker, MarkDecorator):\n-            marker_ = marker\n-        elif isinstance(marker, str):\n-            marker_ = getattr(MARK_GEN, marker)\n-        else:\n-            raise ValueError('is not a string or pytest.mark.* Marker')\n-        self.keywords[marker_.name] = marker_\n-        if append:\n-            self.own_markers.append(marker_.mark)\n-        else:\n-            self.own_markers.insert(0, marker_.mark)\n-\n     def iter_markers(self, name: Optional[str]=None) -> Iterator[Mark]:\n         \"\"\"\n         :param name: if given, filter the results by the name attribute\n", "normalized_occurrence": 1}
