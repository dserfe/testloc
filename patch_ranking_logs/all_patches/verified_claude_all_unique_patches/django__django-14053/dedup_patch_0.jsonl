{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14053", "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 04c866a..0cccf71 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -200,6 +200,8 @@ class HashedFilesMixin:\n \n         return converter\n \n+\n+\n     def post_process(self, paths, dry_run=False, **options):\n         \"\"\"\n         Post process the given dictionary of files (called from collectstatic).\n@@ -220,24 +222,32 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        # Track which files have been yielded\n+        yielded_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n+\n+        # First pass - process all files\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if processed and name not in yielded_files:\n+                yielded_files.add(name)\n+                yield name, hashed_name, processed\n \n+        # Additional passes - only for adjustable files that need updating\n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n+                # Only yield if file was processed and hasn't been yielded before\n+                if processed and name not in yielded_files:\n+                    yielded_files.add(name)\n+                    yield name, hashed_name, processed\n \n             if not substitutions:\n                 break\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 08bad89..d4bc5f1 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -125,15 +125,20 @@ class HashedFilesMixin:\n         if dry_run:\n             return\n         hashed_files = {}\n+        yielded_files = set()\n         adjustable_paths = [path for path in paths if matches_patterns(path, self._patterns)]\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield (name, hashed_name, processed)\n+            if processed and name not in yielded_files:\n+                yielded_files.add(name)\n+                yield (name, hashed_name, processed)\n         paths = {path: paths[path] for path in adjustable_paths}\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield (name, hashed_name, processed)\n                 substitutions = substitutions or subst\n+                if processed and name not in yielded_files:\n+                    yielded_files.add(name)\n+                    yield (name, hashed_name, processed)\n             if not substitutions:\n                 break\n         if substitutions:\n", "normalized_occurrence": 1}
