{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12700", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex 7fd21f6..a84292b 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -83,13 +83,17 @@ class SafeExceptionReporterFilter:\n     def cleanse_setting(self, key, value):\n         \"\"\"\n         Cleanse an individual setting key/value of sensitive content. If the\n-        value is a dictionary, recursively cleanse the keys in that dictionary.\n+        value is a dictionary or list/tuple, recursively cleanse the values.\n         \"\"\"\n         try:\n             if self.hidden_settings.search(key):\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = [self.cleanse_setting('', v) for v in value]\n+                if isinstance(value, tuple):\n+                    cleansed = tuple(cleansed)\n             else:\n                 cleansed = value\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex b98e7c2..008fde6 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -47,6 +47,10 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple)):\n+                cleansed = [self.cleanse_setting('', v) for v in value]\n+                if isinstance(value, tuple):\n+                    cleansed = tuple(cleansed)\n             else:\n                 cleansed = value\n         except TypeError:\n", "normalized_occurrence": 3}
