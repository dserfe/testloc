{"model_name_or_path": "agentless", "instance_id": "django__django-14559", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..3edb667 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -549,7 +549,9 @@ class QuerySet:\n         requires_casting = connections[self.db].features.requires_casted_case_in_updates\n         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))\n         updates = []\n+        total_updated = 0\n         for batch_objs in batches:\n+            batch_pks = [obj.pk for obj in batch_objs]\n             update_kwargs = {}\n             for field in fields:\n                 when_statements = []\n@@ -565,7 +567,9 @@ class QuerySet:\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                updated_rows = self.filter(pk__in=pks).update(**update_kwargs)\n+                total_updated += updated_rows\n+        return total_updated\n     bulk_update.alters_data = True\n \n     def get_or_create(self, defaults=None, **kwargs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..0826f29 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -322,7 +322,9 @@ class QuerySet:\n         requires_casting = connections[self.db].features.requires_casted_case_in_updates\n         batches = (objs[i:i + batch_size] for i in range(0, len(objs), batch_size))\n         updates = []\n+        total_updated = 0\n         for batch_objs in batches:\n+            batch_pks = [obj.pk for obj in batch_objs]\n             update_kwargs = {}\n             for field in fields:\n                 when_statements = []\n@@ -338,7 +340,9 @@ class QuerySet:\n             updates.append(([obj.pk for obj in batch_objs], update_kwargs))\n         with transaction.atomic(using=self.db, savepoint=False):\n             for pks, update_kwargs in updates:\n-                self.filter(pk__in=pks).update(**update_kwargs)\n+                updated_rows = self.filter(pk__in=pks).update(**update_kwargs)\n+                total_updated += updated_rows\n+        return total_updated\n     bulk_update.alters_data = True\n     def get_or_create(self, defaults=None, **kwargs):\n         self._for_write = True\n", "normalized_occurrence": 1}
