{"model_name_or_path": "agentless", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..2179297 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -110,8 +110,9 @@ class URLValidator(RegexValidator):\n         # Then check full URL\n         try:\n             super().__call__(value)\n-        except ValidationError as e:\n-            # Trivial case failed. Try for possible IDN domain\n+        except (ValidationError, ValueError) as e:\n+            # Trivial case failed or ValueError occurred in urlsplit.\n+            # Try for possible IDN domain\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n@@ -124,7 +125,7 @@ class URLValidator(RegexValidator):\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n-                raise\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n         else:\n             # Now verify IPv6 in the netloc part\n             host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..80cea2d 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -64,7 +64,7 @@ class URLValidator(RegexValidator):\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n         try:\n             super().__call__(value)\n-        except ValidationError as e:\n+        except (ValidationError, ValueError) as e:\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n@@ -77,7 +77,7 @@ class URLValidator(RegexValidator):\n                 url = urlunsplit((scheme, netloc, path, query, fragment))\n                 super().__call__(url)\n             else:\n-                raise\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n         else:\n             host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n             if host_match:\n", "normalized_occurrence": 2}
