{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..8d4764b 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -24,21 +24,23 @@ def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> li\n \n \n def get_python_path(filepath: str) -> str:\n-    \"\"\"TODO This get the python path with the (bad) assumption that there is always\n-    an __init__.py.\n+    \"\"\"Get the Python path by finding the highest directory in the hierarchy\n+    that could be a Python package or module directory.\n \n-    This is not true since python 3.3 and is causing problem.\n+    This handles both traditional packages (with __init__.py) and namespace\n+    packages (without __init__.py) supported since Python 3.3+.\n     \"\"\"\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n     if not os.path.isdir(dirname):\n         dirname = os.path.dirname(dirname)\n-    while True:\n-        if not os.path.exists(os.path.join(dirname, \"__init__.py\")):\n-            return dirname\n-        old_dirname = dirname\n-        dirname = os.path.dirname(dirname)\n-        if old_dirname == dirname:\n-            return os.getcwd()\n+    \n+    # If it's a valid Python file/dir, return its parent directory as the path\n+    if os.path.exists(dirname) and (\n+        os.path.isfile(os.path.join(dirname, \"__init__.py\")) or\n+        any(f.endswith(\".py\") for f in os.listdir(dirname) if os.path.isfile(os.path.join(dirname, f)))\n+    ):\n+        return os.path.dirname(dirname)\n+    return dirname\n \n \n def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..68773ec 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -13,13 +13,9 @@ def get_python_path(filepath: str) -> str:\n     dirname = os.path.realpath(os.path.expanduser(filepath))\n     if not os.path.isdir(dirname):\n         dirname = os.path.dirname(dirname)\n-    while True:\n-        if not os.path.exists(os.path.join(dirname, '__init__.py')):\n-            return dirname\n-        old_dirname = dirname\n-        dirname = os.path.dirname(dirname)\n-        if old_dirname == dirname:\n-            return os.getcwd()\n+    if os.path.exists(dirname) and (os.path.isfile(os.path.join(dirname, '__init__.py')) or any((f.endswith('.py') for f in os.listdir(dirname) if os.path.isfile(os.path.join(dirname, f))))):\n+        return os.path.dirname(dirname)\n+    return dirname\n def _is_in_ignore_list_re(element: str, ignore_list_re: list[Pattern[str]]) -> bool:\n     return any((file_pattern.match(element) for file_pattern in ignore_list_re))\n def _is_ignored_file(element: str, ignore_list: list[str], ignore_list_re: list[Pattern[str]], ignore_list_paths_re: list[Pattern[str]]) -> bool:\n", "normalized_occurrence": 1}
