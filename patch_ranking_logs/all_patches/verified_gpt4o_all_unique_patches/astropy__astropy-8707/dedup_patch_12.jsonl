{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..806f523 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -327,15 +327,15 @@ class Header:\n         self.__dict__['_modified'] = val\n \n     @classmethod\n-    def fromstring(cls, data, sep=''):\n+    def fromstring(cls, data, sep='', encoding='ascii'):\n         \"\"\"\n         Creates an HDU header from a byte string containing the entire header\n         data.\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -357,6 +357,10 @@ class Header:\n         # immediately at the separator\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n \n+        # Convert bytes to str if necessary\n+        if isinstance(data, bytes):\n+            data = data.decode(encoding)\n+\n         # Split the header into individual cards\n         idx = 0\n         image = []\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex a818589..ce9bdad 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -160,9 +160,11 @@ class Header:\n     def _modified(self, val):\n         self.__dict__['_modified'] = val\n     @classmethod\n-    def fromstring(cls, data, sep=''):\n+    def fromstring(cls, data, sep='', encoding='ascii'):\n         cards = []\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n+        if isinstance(data, bytes):\n+            data = data.decode(encoding)\n         idx = 0\n         image = []\n         while idx < len(data):\n", "normalized_occurrence": 1}
