{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-7336", "model_patch": "diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\nindex 5ce0659..e2204a1 100644\n--- a/astropy/units/decorators.py\n+++ b/astropy/units/decorators.py\n@@ -220,7 +220,9 @@ class QuantityInput:\n             # Call the original function with any equivalencies in force.\n             with add_enabled_equivalencies(self.equivalencies):\n                 return_ = wrapped_function(*func_args, **func_kwargs)\n-            if wrapped_signature.return_annotation is not inspect.Signature.empty:\n+            if (wrapped_signature.return_annotation is not inspect.Signature.empty and\n+                wrapped_signature.return_annotation is not None and\n+                return_ is not None):\n                 return return_.to(wrapped_signature.return_annotation)\n             else:\n                 return return_\n@@ -228,4 +230,4 @@ class QuantityInput:\n         return wrapper\n \n \n-quantity_input = QuantityInput.as_decorator\n+quantity_input = QuantityInput.as_decorator\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py\nindex a93123e..29f869f 100644\n--- a/astropy/units/decorators.py\n+++ b/astropy/units/decorators.py\n@@ -77,7 +77,7 @@ class QuantityInput:\n                 _validate_arg_value(param.name, wrapped_function.__name__, arg, valid_targets, self.equivalencies)\n             with add_enabled_equivalencies(self.equivalencies):\n                 return_ = wrapped_function(*func_args, **func_kwargs)\n-            if wrapped_signature.return_annotation is not inspect.Signature.empty:\n+            if wrapped_signature.return_annotation is not inspect.Signature.empty and wrapped_signature.return_annotation is not None and (return_ is not None):\n                 return return_.to(wrapped_signature.return_annotation)\n             else:\n                 return return_\n", "normalized_occurrence": 2}
