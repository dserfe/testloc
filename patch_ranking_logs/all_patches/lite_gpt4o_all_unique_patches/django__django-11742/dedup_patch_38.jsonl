{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..efd7f6b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -238,8 +238,17 @@ class Field(RegisterLookupMixin):\n                     id='fields.E003',\n                 )\n             ]\n-        else:\n-            return []\n+        # Check if `max_length` is large enough to fit the longest choice value\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((len(str(value)) for value, _ in self.choices), default=0)\n+            if longest_choice > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too short to accommodate the longest choice value.\",\n+                        obj=self,\n+                        id='fields.E007',\n+                    )\n+                ]\n \n     def _check_choices(self):\n         if not self.choices:\n@@ -279,8 +288,17 @@ class Field(RegisterLookupMixin):\n             # Special case: choices=['ab']\n             if isinstance(choices_group, str):\n                 break\n-        else:\n-            return []\n+        # Check if `max_length` is large enough to fit the longest choice value\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((len(str(value)) for value, _ in self.choices), default=0)\n+            if longest_choice > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too short to accommodate the longest choice value.\",\n+                        obj=self,\n+                        id='fields.E007',\n+                    )\n+                ]\n \n         return [\n             checks.Error(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..a459c48 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -115,8 +115,10 @@ class Field(RegisterLookupMixin):\n             return [checks.Error('Field names must not contain \"%s\".' % (LOOKUP_SEP,), obj=self, id='fields.E002')]\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n-        else:\n-            return []\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((len(str(value)) for value, _ in self.choices), default=0)\n+            if longest_choice > self.max_length:\n+                return [checks.Error(\"'max_length' is too short to accommodate the longest choice value.\", obj=self, id='fields.E007')]\n     def _check_choices(self):\n         if not self.choices:\n             return []\n@@ -138,8 +140,10 @@ class Field(RegisterLookupMixin):\n                     break\n             if isinstance(choices_group, str):\n                 break\n-        else:\n-            return []\n+        if self.max_length is not None and self.choices:\n+            longest_choice = max((len(str(value)) for value, _ in self.choices), default=0)\n+            if longest_choice > self.max_length:\n+                return [checks.Error(\"'max_length' is too short to accommodate the longest choice value.\", obj=self, id='fields.E007')]\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n", "normalized_occurrence": 1}
