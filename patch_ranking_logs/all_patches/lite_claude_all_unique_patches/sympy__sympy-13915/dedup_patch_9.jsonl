{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..9e9b6ea 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -917,9 +917,14 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                except (ValueError, ZeroDivisionError):\n+                    # If substitution leads to undefined intermediate results\n+                    # keep the original expression for limit evaluation\n+                    continue\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..1e3d706 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -326,9 +326,12 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n-                if not isinstance(rv, Basic):\n-                    break\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                    if not isinstance(rv, Basic):\n+                        break\n+                except (ValueError, ZeroDivisionError):\n+                    continue\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
