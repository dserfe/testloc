{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..6d98f75 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -473,7 +473,14 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+        distinct_fields = self.query.distinct and self.query.distinct_fields\n+        if distinct_fields:\n+            distinct_sql, distinct_params = self.get_distinct()\n+            parts_sql = [\"SELECT DISTINCT ON ({}) * FROM ({})\".format(\", \".join(distinct_sql), sql) for sql in sql_parts]\n+            params.extend(distinct_params)\n+        else:\n+            braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+            parts_sql = [braces.format(sql) for sql in sql_parts]\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..b2f6be5 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -265,7 +265,14 @@ class SQLCompiler:\n         combinator_sql = self.connection.ops.set_operators[combinator]\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+        distinct_fields = self.query.distinct and self.query.distinct_fields\n+        if distinct_fields:\n+            distinct_sql, distinct_params = self.get_distinct()\n+            parts_sql = ['SELECT DISTINCT ON ({}) * FROM ({})'.format(', '.join(distinct_sql), sql) for sql in sql_parts]\n+            params.extend(distinct_params)\n+        else:\n+            braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+            parts_sql = [braces.format(sql) for sql in sql_parts]\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n", "normalized_occurrence": 1}
