{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..975af51 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1371,6 +1371,25 @@ class ManyToManyField(RelatedField):\n             raise ValueError(\n                 \"Cannot specify a db_table if an intermediary model is used.\"\n             )\n+        \n+        try:\n+            if isinstance(through, str):\n+                through_model = self.rel_class(self, to).resolve_model(through)\n+                through_model._meta  # Access _meta to trigger resolution\n+            else:\n+                through._meta\n+\n+        except AttributeError:\n+            if not isinstance(through, str):\n+                raise TypeError(\n+                    \"%s(%r) is invalid. `through` parameter in ManyToManyField \"\n+                    \"must be either a model, a model name, or the string %r\"\n+                    % (\n+                        self.__class__.__name__,\n+                        through,\n+                        RECURSIVE_RELATIONSHIP_CONSTANT,\n+                    )\n+                )\n \n         kwargs[\"rel\"] = self.rel_class(\n             self,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..5313ac3 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -542,6 +542,15 @@ class ManyToManyField(RelatedField):\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n+        try:\n+            if isinstance(through, str):\n+                through_model = self.rel_class(self, to).resolve_model(through)\n+                through_model._meta\n+            else:\n+                through._meta\n+        except AttributeError:\n+            if not isinstance(through, str):\n+                raise TypeError('%s(%r) is invalid. `through` parameter in ManyToManyField must be either a model, a model name, or the string %r' % (self.__class__.__name__, through, RECURSIVE_RELATIONSHIP_CONSTANT))\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n", "normalized_occurrence": 1}
