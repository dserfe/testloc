{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..7f05373 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1001,6 +1001,9 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+        # If the query is an EmptyQuerySet or should be empty, return an EmptyQuerySet\n+        if isinstance(self, EmptyQuerySet) or not self.query.where and not other_qs and not all:\n+            return self.none()\n         return self._combinator_query('union', *other_qs, all=all)\n \n     def intersection(self, *other_qs):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..d32b863 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -590,6 +590,8 @@ class QuerySet:\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n+        if isinstance(self, EmptyQuerySet) or (not self.query.where and (not other_qs) and (not all)):\n+            return self.none()\n         return self._combinator_query('union', *other_qs, all=all)\n     def intersection(self, *other_qs):\n         if isinstance(self, EmptyQuerySet):\n", "normalized_occurrence": 1}
