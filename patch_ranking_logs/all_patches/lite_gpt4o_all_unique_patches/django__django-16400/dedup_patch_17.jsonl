{"model_name_or_path": "agentless", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 05a8e83..57374e9 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -141,6 +141,7 @@ class MigrationExecutor:\n             state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n \n         self.check_replacements()\n+        self.recorder.connection = self.connection\n \n         return state\n \n@@ -246,10 +247,9 @@ class MigrationExecutor:\n                     fake = True\n             if not fake:\n                 # Alright, do it normally\n-                with self.connection.schema_editor(\n-                    atomic=migration.atomic\n-                ) as schema_editor:\n-                    state = migration.apply(state, schema_editor)\n+                with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n+                    with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n+                        state = migration.apply(state, schema_editor)\n                     if not schema_editor.deferred_sql:\n                         self.record_migration(migration)\n                         migration_recorded = True\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py\nindex 800f25e..581c5d8 100644\n--- a/django/db/migrations/executor.py\n+++ b/django/db/migrations/executor.py\n@@ -73,6 +73,7 @@ class MigrationExecutor:\n         else:\n             state = self._migrate_all_backwards(plan, full_plan, fake=fake)\n         self.check_replacements()\n+        self.recorder.connection = self.connection\n         return state\n     def _migrate_all_forwards(self, state, plan, full_plan, fake, fake_initial):\n         migrations_to_run = {m[0] for m in plan}\n@@ -132,7 +133,8 @@ class MigrationExecutor:\n                     fake = True\n             if not fake:\n                 with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n-                    state = migration.apply(state, schema_editor)\n+                    with self.connection.schema_editor(atomic=migration.atomic) as schema_editor:\n+                        state = migration.apply(state, schema_editor)\n                     if not schema_editor.deferred_sql:\n                         self.record_migration(migration)\n                         migration_recorded = True\n", "normalized_occurrence": 1}
