{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..efc6dd5 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,6 +518,18 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n+    def _is_used_in_type_comment(self, node, imported_module):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n+\n     @check_messages(*MSGS)\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n@@ -544,6 +556,18 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n \n             self._add_imported_module(node, imported_module.name)\n \n+    def _is_used_in_type_comment(self, node, imported_module):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n+\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n@@ -562,7 +586,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         if isinstance(node.parent, astroid.Module):\n             # Allow imports nested\n             self._check_position(node)\n-        if isinstance(node.scope(), astroid.Module):\n+        if isinstance(node.scope(), astroid.Module) or self._is_used_in_type_comment(node, imported_module):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n@@ -572,6 +596,18 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n+    def _is_used_in_type_comment(self, node, imported_module):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n+\n     @check_messages(*MSGS)\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..b320374 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -165,6 +165,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self.add_message('cyclic-import', args=' -> '.join(cycle))\n     def deprecated_modules(self):\n         return self.config.deprecated_modules\n+    def _is_used_in_type_comment(self, node, imported_module):\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n     @check_messages(*MSGS)\n     def visit_import(self, node):\n         self._check_reimport(node)\n@@ -184,6 +194,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n             self._add_imported_module(node, imported_module.name)\n+    def _is_used_in_type_comment(self, node, imported_module):\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n         basename = node.modname\n@@ -198,7 +218,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         self._check_toplevel(node)\n         if isinstance(node.parent, astroid.Module):\n             self._check_position(node)\n-        if isinstance(node.scope(), astroid.Module):\n+        if isinstance(node.scope(), astroid.Module) or self._is_used_in_type_comment(node, imported_module):\n             self._record_import(node, imported_module)\n         if imported_module is None:\n             return\n@@ -207,6 +227,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n             else:\n                 self._add_imported_module(node, imported_module.name)\n+    def _is_used_in_type_comment(self, node, imported_module):\n+        if not hasattr(node, 'parent'):\n+            return False\n+        parent_node = node.parent\n+        while parent_node:\n+            if hasattr(parent_node, 'type_comment'):\n+                if imported_module.name in parent_node.type_comment:\n+                    return True\n+            parent_node = parent_node.parent\n+        return False\n     @check_messages(*MSGS)\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n", "normalized_occurrence": 1}
