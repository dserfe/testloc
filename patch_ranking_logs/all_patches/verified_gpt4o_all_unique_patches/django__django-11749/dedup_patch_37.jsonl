{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..f629170 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,11 +130,22 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n-    # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # Handle mutually exclusive required groups.\n+    def get_required_exclusive_args(parser):\n+        required_exclusive_args = []\n+        for group in parser._mutually_exclusive_groups:\n+            if group.required:\n+                for action in group._group_actions:\n+                    if action.dest in options:\n+                        required_exclusive_args.append(action)\n+                        break\n+        return required_exclusive_args\n+\n+    required_exclusive_args = get_required_exclusive_args(parser)\n+    required_args = [opt for opt in parser_actions if opt.required and opt.dest in options]\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in required_args + required_exclusive_args\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..7c951d4 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,18 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    def get_required_exclusive_args(parser):\n+        required_exclusive_args = []\n+        for group in parser._mutually_exclusive_groups:\n+            if group.required:\n+                for action in group._group_actions:\n+                    if action.dest in options:\n+                        required_exclusive_args.append(action)\n+                        break\n+        return required_exclusive_args\n+    required_exclusive_args = get_required_exclusive_args(parser)\n+    required_args = [opt for opt in parser_actions if opt.required and opt.dest in options]\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in required_args + required_exclusive_args]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
