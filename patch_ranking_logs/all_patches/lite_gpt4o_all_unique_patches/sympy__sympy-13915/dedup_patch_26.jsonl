{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..aaee971 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -920,7 +920,11 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n-            return rv\n+            # Check for undefined expressions\n+            if rv.has(S.ComplexInfinity) or rv.has(S.NaN) or (rv.is_Number and rv.is_infinite):\n+                return S.NaN\n+            else:\n+                return rv\n \n     @cacheit\n     def _subs(self, old, new, **hints):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..16a5b1c 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -329,7 +329,10 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n-            return rv\n+            if rv.has(S.ComplexInfinity) or rv.has(S.NaN) or (rv.is_Number and rv.is_infinite):\n+                return S.NaN\n+            else:\n+                return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n         def fallback(self, old, new):\n", "normalized_occurrence": 1}
