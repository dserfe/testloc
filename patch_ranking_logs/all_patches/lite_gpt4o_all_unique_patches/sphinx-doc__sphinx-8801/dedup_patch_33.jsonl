{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 16f59c0..8877a17 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -294,24 +294,31 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n \n     try:\n         for cls in getmro(subject):\n-            # annotation only member (ex. attr: int)\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n-\n-            # append instance attributes (cf. self.attr1) if analyzer knows\n-            try:\n-                modname = safe_getattr(cls, '__module__')\n-                qualname = safe_getattr(cls, '__qualname__')\n-                analyzer = ModuleAnalyzer.for_module(modname)\n-                analyzer.analyze()\n-                for (ns, name), docstring in analyzer.attr_docs.items():\n-                    if ns == qualname and name not in members:\n-                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n-                                                     docstring='\\n'.join(docstring))\n-            except (AttributeError, PycodeError):\n-                pass\n+            if cls == subject:\n+                # annotation only member (ex. attr: int)\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n+\n+                # append instance attributes (cf. self.attr1) if analyzer knows\n+                try:\n+                    modname = safe_getattr(cls, '__module__')\n+                    qualname = safe_getattr(cls, '__qualname__')\n+                    analyzer = ModuleAnalyzer.for_module(modname)\n+                    analyzer.analyze()\n+                    for (ns, name), docstring in analyzer.attr_docs.items():\n+                        if ns == qualname and name not in members:\n+                            members[name] = ObjectMember(name, INSTANCEATTR, class_=cls,\n+                                                         docstring='\\n'.join(docstring))\n+                except (AttributeError, PycodeError):\n+                    pass\n+            else:\n+                # add annotations for superclass\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n     except AttributeError:\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 7792b8a..c2f53ef 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -189,20 +189,26 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n             continue\n     try:\n         for cls in getmro(subject):\n-            for name in getannotations(cls):\n-                name = unmangle(cls, name)\n-                if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n-            try:\n-                modname = safe_getattr(cls, '__module__')\n-                qualname = safe_getattr(cls, '__qualname__')\n-                analyzer = ModuleAnalyzer.for_module(modname)\n-                analyzer.analyze()\n-                for (ns, name), docstring in analyzer.attr_docs.items():\n-                    if ns == qualname and name not in members:\n-                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring))\n-            except (AttributeError, PycodeError):\n-                pass\n+            if cls == subject:\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n+                try:\n+                    modname = safe_getattr(cls, '__module__')\n+                    qualname = safe_getattr(cls, '__qualname__')\n+                    analyzer = ModuleAnalyzer.for_module(modname)\n+                    analyzer.analyze()\n+                    for (ns, name), docstring in analyzer.attr_docs.items():\n+                        if ns == qualname and name not in members:\n+                            members[name] = ObjectMember(name, INSTANCEATTR, class_=cls, docstring='\\n'.join(docstring))\n+                except (AttributeError, PycodeError):\n+                    pass\n+            else:\n+                for name in getannotations(cls):\n+                    name = unmangle(cls, name)\n+                    if name and name not in members:\n+                        members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n     except AttributeError:\n         pass\n     return members\n", "normalized_occurrence": 1}
