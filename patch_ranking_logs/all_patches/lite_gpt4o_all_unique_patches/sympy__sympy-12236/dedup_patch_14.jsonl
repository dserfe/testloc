{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..55b9ee8 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -122,8 +122,11 @@ def apart(f, x=None, full=False, **options):\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n \n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n+        if not full:\n+            return f.cancel()\n+        else:\n+            raise NotImplementedError(\n+                \"multivariate partial fraction decomposition\")\n \n     common, P, Q = P.cancel(Q)\n \n@@ -131,13 +134,15 @@ def apart(f, x=None, full=False, **options):\n     P, Q = P.rat_clear_denoms(Q)\n \n     if Q.degree() <= 1:\n-        partial = P/Q\n+        partial = P / Q\n     else:\n         if not full:\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n+            \n+        # Ensure to fully decompose the expression\n+        partial = partial.apart()\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..da82537 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -58,16 +58,21 @@ def apart(f, x=None, full=False, **options):\n         fc = f.cancel()\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n+        if not full:\n+            return f.cancel()\n+        else:\n+            raise NotImplementedError('multivariate partial fraction decomposition')\n     common, P, Q = P.cancel(Q)\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n     if Q.degree() <= 1:\n         partial = P / Q\n-    elif not full:\n-        partial = apart_undetermined_coeffs(P, Q)\n     else:\n-        partial = apart_full_decomposition(P, Q)\n+        if not full:\n+            partial = apart_undetermined_coeffs(P, Q)\n+        else:\n+            partial = apart_full_decomposition(P, Q)\n+        partial = partial.apart()\n     terms = S.Zero\n     for term in Add.make_args(partial):\n         if term.has(RootSum):\n", "normalized_occurrence": 1}
