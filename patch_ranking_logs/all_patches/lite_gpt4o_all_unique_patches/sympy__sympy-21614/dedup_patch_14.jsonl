{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex ab763da..72588d7 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1381,6 +1381,10 @@ class Derivative(Expr):\n \n         evaluate = kwargs.get('evaluate', False)\n \n+        kind = kwargs.pop('kind', None)\n+        if kind is None:\n+            kind = DerivativeKind(expr, *[v for v, c in variable_count])\n+        \n         if evaluate:\n             if isinstance(expr, Derivative):\n                 expr = expr.canonical\n@@ -1422,6 +1426,7 @@ class Derivative(Expr):\n             # make the order of symbols canonical\n             #TODO: check if assumption of discontinuous derivatives exist\n             variable_count = cls._sort_variable_count(variable_count)\n+        kwargs['kind'] = kind\n \n         # denest\n         if isinstance(expr, Derivative):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 96e033b..b4b60b2 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -518,6 +518,9 @@ class Derivative(Expr):\n         if len(variable_count) == 0:\n             return expr\n         evaluate = kwargs.get('evaluate', False)\n+        kind = kwargs.pop('kind', None)\n+        if kind is None:\n+            kind = DerivativeKind(expr, *[v for v, c in variable_count])\n         if evaluate:\n             if isinstance(expr, Derivative):\n                 expr = expr.canonical\n@@ -544,6 +547,7 @@ class Derivative(Expr):\n             if zero:\n                 return cls._get_zero_with_shape_like(expr)\n             variable_count = cls._sort_variable_count(variable_count)\n+        kwargs['kind'] = kind\n         if isinstance(expr, Derivative):\n             variable_count = list(expr.variable_count) + variable_count\n             expr = expr.expr\n", "normalized_occurrence": 1}
