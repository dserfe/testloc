{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..fe2bf25 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -604,7 +604,10 @@ class Query(BaseExpression):\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n             join = join.relabeled_clone(change_map)\n+            # Ensure new_alias does not conflict with rhs.alias_map\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in rhs.alias_map.values():\n+                new_alias = self.join(join.relabeled_clone({alias: new_alias}), reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             # We can't reuse the same join again in the query. If we have two\n@@ -846,6 +849,8 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        # Ensure that no alias is mapped to another alias which is also being changed.\n+        # This avoids any alias being relabeled more than once.\n         assert set(change_map).isdisjoint(change_map.values())\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..5c1afa3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -337,6 +337,8 @@ class Query(BaseExpression):\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in rhs.alias_map.values():\n+                new_alias = self.join(join.relabeled_clone({alias: new_alias}), reuse=reuse)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n", "normalized_occurrence": 1}
