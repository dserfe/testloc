{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..5f336c2 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -900,7 +900,10 @@ class Basic(with_metaclass(ManagedProperties)):\n \n         if kwargs.pop('simultaneous', False):  # XXX should this be the default for dict subs?\n             reps = {}\n+            from sympy import nan\n             rv = self\n+            if any(s is nan for s in sequence):\n+                return nan\n             kwargs['hack2'] = True\n             m = Dummy()\n             for old, new in sequence:\n@@ -915,7 +918,10 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One  # get rid of m\n             return rv.xreplace(reps)\n         else:\n+            from sympy import nan\n             rv = self\n+            if any(s is nan for s in sequence):\n+                return nan\n             for old, new in sequence:\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..e1a8a01 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -312,7 +312,10 @@ class Basic(with_metaclass(ManagedProperties)):\n                 sequence = sorted([(k, v) for k, v in sequence.items()], key=default_sort_key)\n         if kwargs.pop('simultaneous', False):\n             reps = {}\n+            from sympy import nan\n             rv = self\n+            if any((s is nan for s in sequence)):\n+                return nan\n             kwargs['hack2'] = True\n             m = Dummy()\n             for old, new in sequence:\n@@ -324,7 +327,10 @@ class Basic(with_metaclass(ManagedProperties)):\n             reps[m] = S.One\n             return rv.xreplace(reps)\n         else:\n+            from sympy import nan\n             rv = self\n+            if any((s is nan for s in sequence)):\n+                return nan\n             for old, new in sequence:\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n", "normalized_occurrence": 1}
