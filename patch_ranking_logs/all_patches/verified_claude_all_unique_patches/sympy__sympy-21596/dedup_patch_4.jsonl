{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..3f34f0f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,6 +1389,19 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        # First check basic containment in all sets\n+        ret = fuzzy_and(set.contains(other) for set in self.args)\n+        if ret is not None:\n+            return ret\n+        \n+        # If undetermined, check if any set has an evaluated intersection\n+        # that we can use for containment checking\n+        for s in self.args:\n+            i = Intersection(*(set for set in self.args if set != s), evaluate=True)\n+            if i != self:\n+                return i.contains(other)\n+        \n+        # Fall back to the basic AND if no other method worked\n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..b0a9b33 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,6 +530,13 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n+        ret = fuzzy_and((set.contains(other) for set in self.args))\n+        if ret is not None:\n+            return ret\n+        for s in self.args:\n+            i = Intersection(*(set for set in self.args if set != s), evaluate=True)\n+            if i != self:\n+                return i.contains(other)\n         return And(*[set.contains(other) for set in self.args])\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "normalized_occurrence": 1}
