{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex d9ef12f..dd983af 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -867,6 +867,13 @@ class cos(TrigonometricFunction):\n         x = None\n         if arg.is_Add:  # TODO: Do this more efficiently for more than two terms\n             x, y = arg.as_two_terms()\n+            # Handle rational differences first\n+            if (isinstance(x, Rational) and isinstance(y, Rational)) or \\\n+               (isinstance(x, Mul) and isinstance(y, Mul) and \\\n+                all(isinstance(t, Rational) for t in x.args + y.args)):\n+                return cos(x)._eval_expand_trig()*cos(y)._eval_expand_trig() + \\\n+                       sin(x)._eval_expand_trig()*sin(y)._eval_expand_trig()\n+            # Otherwise fall back to regular expansion\n             sx = sin(x, evaluate=False)._eval_expand_trig()\n             sy = sin(y, evaluate=False)._eval_expand_trig()\n             cx = cos(x, evaluate=False)._eval_expand_trig()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 9f9dff8..a2f9587 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -545,6 +545,8 @@ class cos(TrigonometricFunction):\n         x = None\n         if arg.is_Add:\n             x, y = arg.as_two_terms()\n+            if isinstance(x, Rational) and isinstance(y, Rational) or (isinstance(x, Mul) and isinstance(y, Mul) and all((isinstance(t, Rational) for t in x.args + y.args))):\n+                return cos(x)._eval_expand_trig() * cos(y)._eval_expand_trig() + sin(x)._eval_expand_trig() * sin(y)._eval_expand_trig()\n             sx = sin(x, evaluate=False)._eval_expand_trig()\n             sy = sin(y, evaluate=False)._eval_expand_trig()\n             cx = cos(x, evaluate=False)._eval_expand_trig()\n", "normalized_occurrence": 1}
