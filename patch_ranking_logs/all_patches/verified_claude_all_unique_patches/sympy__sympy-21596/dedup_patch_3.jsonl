{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..2e493e3 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -398,6 +398,17 @@ class Set(Basic, EvalfMixin):\n \n     def _eval_is_subset(self, other):\n         '''Returns a fuzzy bool for whether self is a subset of other.'''\n+        from sympy import S\n+        if other is S.Reals:\n+            # For Reals, an element must have no imaginary component\n+            try:\n+                for elem in self:\n+                    if elem.free_symbols:\n+                        continue\n+                    if elem.is_real is False:\n+                        return False\n+            except TypeError:  # not iterable\n+                pass\n         return None\n \n     def _eval_is_superset(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..354ca26 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -140,6 +140,16 @@ class Set(Basic, EvalfMixin):\n         if self.intersect(other) == self:\n             return True\n     def _eval_is_subset(self, other):\n+        from sympy import S\n+        if other is S.Reals:\n+            try:\n+                for elem in self:\n+                    if elem.free_symbols:\n+                        continue\n+                    if elem.is_real is False:\n+                        return False\n+            except TypeError:\n+                pass\n         return None\n     def _eval_is_superset(self, other):\n         return None\n", "normalized_occurrence": 1}
