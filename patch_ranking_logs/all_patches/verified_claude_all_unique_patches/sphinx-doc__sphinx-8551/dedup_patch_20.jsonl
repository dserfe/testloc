{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..7e0ec33 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -1255,18 +1255,31 @@ class PythonDomain(Domain):\n             else:\n                 objtypes = self.objtypes_for_role(type)\n             if objtypes is not None:\n+                # First try with both module and classname if available\n                 if modname and classname:\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                \n+                # Then try with just module name\n+                if not newname and modname:\n+                    fullname = modname + '.' + name\n+                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                        newname = fullname\n+                    # For module paths like 'mod.submod', also check direct submodule path first\n+                    if '.' in modname:\n+                        fullname = modname.rsplit('.', 1)[0] + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            # Only set if we haven't found a more specific match\n+                            if not newname:\n+                                newname = fullname\n+                \n+                # Only fall back to unqualified name if no module-qualified match found\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and \\\n-                       self.objects[modname + '.' + name].objtype in objtypes:\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    if name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n-                        # \"fuzzy\" searching mode\n+                        # Last resort: \"fuzzy\" searching mode\n                         searchname = '.' + name\n                         matches = [(oname, self.objects[oname]) for oname in self.objects\n                                    if oname.endswith(searchname) and\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..f0b7e64 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -758,10 +758,17 @@ class PythonDomain(Domain):\n                     fullname = modname + '.' + classname + '.' + name\n                     if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n                         newname = fullname\n+                if not newname and modname:\n+                    fullname = modname + '.' + name\n+                    if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                        newname = fullname\n+                    if '.' in modname:\n+                        fullname = modname.rsplit('.', 1)[0] + '.' + name\n+                        if fullname in self.objects and self.objects[fullname].objtype in objtypes:\n+                            if not newname:\n+                                newname = fullname\n                 if not newname:\n-                    if modname and modname + '.' + name in self.objects and (self.objects[modname + '.' + name].objtype in objtypes):\n-                        newname = modname + '.' + name\n-                    elif name in self.objects and self.objects[name].objtype in objtypes:\n+                    if name in self.objects and self.objects[name].objtype in objtypes:\n                         newname = name\n                     else:\n                         searchname = '.' + name\n", "normalized_occurrence": 1}
