{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..f1375ee 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -66,6 +67,34 @@ def refine(expr, assumptions=True):\n     return refine(new_expr, assumptions)\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for the arg function.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import Q, arg, I\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> refine_arg(arg(I), Q.positive(I))\n+    pi/2\n+    >>> refine_arg(arg(1), Q.positive(1))\n+    0\n+    >>> refine_arg(arg(-1), Q.positive(-1))\n+    pi\n+\n+    \"\"\"\n+    from sympy.functions.elementary.complexes import arg\n+    from sympy import pi\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return 0\n+    if ask(Q.negative(arg_expr), assumptions):\n+        return pi\n+    if ask(Q.zero(arg_expr), assumptions):\n+        return 0\n+    return expr\n+\n def refine_abs(expr, assumptions):\n     \"\"\"\n     Handler for the absolute value.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n+def refine_arg(expr, assumptions):\n+    from sympy.functions.elementary.complexes import arg\n+    from sympy import pi\n+    arg_expr = expr.args[0]\n+    if ask(Q.positive(arg_expr), assumptions):\n+        return 0\n+    if ask(Q.negative(arg_expr), assumptions):\n+        return pi\n+    if ask(Q.zero(arg_expr), assumptions):\n+        return 0\n+    return expr", "normalized_occurrence": 1}
