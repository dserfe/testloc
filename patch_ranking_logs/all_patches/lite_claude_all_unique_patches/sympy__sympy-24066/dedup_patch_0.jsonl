{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..04df86c 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -395,25 +395,26 @@ class DimensionSystem(Basic, _QuantityMapper):\n                 raise TypeError(\"The exponent for the power operator must be a Symbol or dimensionless.\")\n \n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+\n+            # Check dimensionality before evaluating the function\n+            if isinstance(dimension.name, TrigonometricFunction):\n+                if dicts[0] not in ({}, {Dimension('angle'): 1}):\n+                    raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.name.func))\n+            else:\n+                if not all(item == {} for item in dicts):\n+                    raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.name.func))\n+\n+            # If we get here, the dimensions are valid, so evaluate the function\n             args = (Dimension._from_dimensional_dependencies(\n                 get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n \n-            dicts = [get_for_name(i) for i in dimension.name.args]\n-\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n-                if isinstance(dimension.name, TrigonometricFunction):\n-                    if dicts[0] in ({}, {Dimension('angle'): 1}):\n-                        return {}\n-                    else:\n-                        raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n-                else:\n-                    if all(item == {} for item in dicts):\n-                        return {}\n-                    else:\n-                        raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n+                # Function evaluation didn't simplify, but we know the arguments are dimensionless\n+                return {}\n             else:\n                 return get_for_name(result)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..456a770 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -225,21 +225,18 @@ class DimensionSystem(Basic, _QuantityMapper):\n             else:\n                 raise TypeError('The exponent for the power operator must be a Symbol or dimensionless.')\n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+            if isinstance(dimension.name, TrigonometricFunction):\n+                if dicts[0] not in ({}, {Dimension('angle'): 1}):\n+                    raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.name.func))\n+            elif not all((item == {} for item in dicts)):\n+                raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.name.func))\n             args = (Dimension._from_dimensional_dependencies(get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n-            dicts = [get_for_name(i) for i in dimension.name.args]\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n-                if isinstance(dimension.name, TrigonometricFunction):\n-                    if dicts[0] in ({}, {Dimension('angle'): 1}):\n-                        return {}\n-                    else:\n-                        raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n-                elif all((item == {} for item in dicts)):\n-                    return {}\n-                else:\n-                    raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n+                return {}\n             else:\n                 return get_for_name(result)\n         raise TypeError('Type {} not implemented for get_dimensional_dependencies'.format(type(dimension.name)))\n", "normalized_occurrence": 2}
