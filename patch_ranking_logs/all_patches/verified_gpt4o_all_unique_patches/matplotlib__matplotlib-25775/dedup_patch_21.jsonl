{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..a1e0b1f 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -91,8 +91,18 @@ def _get_text_metrics_with_cache_impl(\n     \"fontvariant\": [\"variant\"],\n     \"verticalalignment\": [\"va\"],\n     \"fontweight\": [\"weight\"],\n+    \"antialiased\": [\"aa\"],  # Added the antialiased property\n })\n class Text(Artist):\n+\n+    def get_antialiased(self):\n+        \"\"\"Return the antialiased state of the text.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"Set the antialiased state of the text.\"\"\"\n+        self._antialiased = aa\n+        self.stale = True\n     \"\"\"Handle storing and drawing of text in window or data coordinates.\"\"\"\n \n     zorder = 3\n@@ -150,6 +160,7 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -167,7 +178,9 @@ class Text(Artist):\n         transform_rotates_text=False,\n         linespacing=None,\n         rotation_mode=None,\n+        antialiased=mpl.rcParams[\"text.antialiased\"],\n     ):\n+        self.set_antialiased(antialiased)\n         self.set_text(text)\n         self.set_color(\n             color if color is not None else mpl.rcParams[\"text.color\"])\n@@ -737,6 +750,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n \n             angle = self.get_rotation()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..8a62cab 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -35,8 +35,14 @@ def _get_text_metrics_with_cache(renderer, text, fontprop, ismath, dpi):\n def _get_text_metrics_with_cache_impl(renderer_ref, text, fontprop, ismath, dpi):\n     return renderer_ref().get_text_width_height_descent(text, fontprop, ismath)\n @_docstring.interpd\n-@_api.define_aliases({'color': ['c'], 'fontfamily': ['family'], 'fontproperties': ['font', 'font_properties'], 'horizontalalignment': ['ha'], 'multialignment': ['ma'], 'fontname': ['name'], 'fontsize': ['size'], 'fontstretch': ['stretch'], 'fontstyle': ['style'], 'fontvariant': ['variant'], 'verticalalignment': ['va'], 'fontweight': ['weight']})\n+@_api.define_aliases({'color': ['c'], 'fontfamily': ['family'], 'fontproperties': ['font', 'font_properties'], 'horizontalalignment': ['ha'], 'multialignment': ['ma'], 'fontname': ['name'], 'fontsize': ['size'], 'fontstretch': ['stretch'], 'fontstyle': ['style'], 'fontvariant': ['variant'], 'verticalalignment': ['va'], 'fontweight': ['weight'], 'antialiased': ['aa']})\n class Text(Artist):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, aa):\n+        self._antialiased = aa\n+        self.stale = True\n+    'Handle storing and drawing of text in window or data coordinates.'\n     zorder = 3\n     _charsize_cache = dict()\n     def __repr__(self):\n@@ -46,8 +52,10 @@ class Text(Artist):\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.update(kwargs)\n-    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n+    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None, antialiased=mpl.rcParams['text.antialiased']):\n+        self.set_antialiased(antialiased)\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n         self.set_fontproperties(fontproperties)\n@@ -370,6 +378,7 @@ class Text(Artist):\n             gc.set_foreground(self.get_color())\n             gc.set_alpha(self.get_alpha())\n             gc.set_url(self._url)\n+            gc.set_antialiased(self.get_antialiased())\n             self._set_gc_clip(gc)\n             angle = self.get_rotation()\n             for line, wh, x, y in info:\n", "normalized_occurrence": 1}
