{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..6ce674a 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -106,17 +106,28 @@ class Count(Aggregate):\n     name = 'Count'\n     output_field = IntegerField()\n     allow_distinct = True\n+    template = '%(function)s(%(distinct)s%(field)s)'\n \n-    def __init__(self, expression, filter=None, **extra):\n+    def __init__(self, expression, filter=None, distinct=False, **extra):\n         if expression == '*':\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n-        super().__init__(expression, filter=filter, **extra)\n+        super().__init__(expression, filter=filter, distinct=distinct, **extra)\n+        self.distinct = distinct\n \n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n \n+    def as_sql(self, compiler, connection):\n+        options = self.extra.copy()\n+        options['function'] = self.function\n+        options['distinct'] = 'DISTINCT ' if self.distinct else ''\n+        field_sql, field_params = compiler.compile(self.source_expressions[0])\n+        options['field'] = field_sql\n+        sql = self.template % options\n+        return sql, field_params\n+\n \n class Max(Aggregate):\n     function = 'MAX'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..8b55696 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -76,14 +76,24 @@ class Count(Aggregate):\n     name = 'Count'\n     output_field = IntegerField()\n     allow_distinct = True\n-    def __init__(self, expression, filter=None, **extra):\n+    template = '%(function)s(%(distinct)s%(field)s)'\n+    def __init__(self, expression, filter=None, distinct=False, **extra):\n         if expression == '*':\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n-        super().__init__(expression, filter=filter, **extra)\n+        super().__init__(expression, filter=filter, distinct=distinct, **extra)\n+        self.distinct = distinct\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n+    def as_sql(self, compiler, connection):\n+        options = self.extra.copy()\n+        options['function'] = self.function\n+        options['distinct'] = 'DISTINCT ' if self.distinct else ''\n+        field_sql, field_params = compiler.compile(self.source_expressions[0])\n+        options['field'] = field_sql\n+        sql = self.template % options\n+        return (sql, field_params)\n class Max(Aggregate):\n     function = 'MAX'\n     name = 'Max'\n", "normalized_occurrence": 1}
