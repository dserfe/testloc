{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f4e1e57..55f7d37 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -692,8 +692,13 @@ class Documenter:\n             attr_docs = {}\n \n         # process members and determine which to skip\n+        processed_members = set()\n         for obj in members:\n             membername, member = obj\n+            # avoid processing the same member multiple times\n+            if membername in processed_members:\n+                continue\n+            processed_members.add(membername)\n             # if isattr is True, the member is documented as an attribute\n             if member is INSTANCEATTR:\n                 isattr = True\n@@ -713,6 +718,10 @@ class Documenter:\n                 cls_doc = self.get_attr(cls, '__doc__', None)\n                 if cls_doc == doc:\n                     doc = None\n+                else:\n+                    # Ensure instance variables are documented correctly\n+                    if self.get_attr(cls, membername, None) is member:\n+                        doc = doc or self.get_attr(member, '__doc__', None)\n \n             if isinstance(obj, ObjectMember) and obj.docstring:\n                 # hack for ClassDocumenter to inject docstring via ObjectMember\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 320f592..b959bbe 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -358,8 +358,12 @@ class Documenter:\n             attr_docs = self.analyzer.find_attr_docs()\n         else:\n             attr_docs = {}\n+        processed_members = set()\n         for obj in members:\n             membername, member = obj\n+            if membername in processed_members:\n+                continue\n+            processed_members.add(membername)\n             if member is INSTANCEATTR:\n                 isattr = True\n             else:\n@@ -372,6 +376,8 @@ class Documenter:\n                 cls_doc = self.get_attr(cls, '__doc__', None)\n                 if cls_doc == doc:\n                     doc = None\n+                elif self.get_attr(cls, membername, None) is member:\n+                    doc = doc or self.get_attr(member, '__doc__', None)\n             if isinstance(obj, ObjectMember) and obj.docstring:\n                 doc = obj.docstring\n             has_doc = bool(doc)\n", "normalized_occurrence": 1}
