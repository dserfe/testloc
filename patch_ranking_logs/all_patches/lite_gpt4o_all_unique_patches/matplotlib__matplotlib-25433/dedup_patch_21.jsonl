{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25433", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex f12a9a3..d346928 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -600,7 +600,9 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        cid = self._observers.connect('changed', lambda val: func(val))\n+        self._cids.append(cid)\n+        return cid\n \n \n class RangeSlider(SliderBase):\n@@ -800,6 +802,7 @@ class RangeSlider(SliderBase):\n             )\n \n         self._active_handle = None\n+        self._cids = []\n         self.set_val(valinit)\n \n     def _update_selection_poly(self, vmin, vmax):\n@@ -965,8 +968,17 @@ class RangeSlider(SliderBase):\n         if self.drawon:\n             self.ax.figure.canvas.draw_idle()\n         self.val = (vmin, vmax)\n+\n         if self.eventson:\n+            # Temporarily disable events to prevent re-entrance issues\n+            tmp = self.eventson\n+            self.eventson = False\n+            for cid in self._cids:\n+                self._observers.disconnect(cid)\n             self._observers.process(\"changed\", (vmin, vmax))\n+            self.eventson = tmp\n+            for cid in self._cids:\n+                self._observers.connect('changed', lambda val: self._callbacks[cid](val))\n \n     def on_changed(self, func):\n         \"\"\"\n@@ -983,7 +995,9 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        cid = self._observers.connect('changed', lambda val: func(val))\n+        self._cids.append(cid)\n+        return cid\n \n \n def _expand_text_props(props):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex 2882ff9..6c52220 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -519,7 +519,9 @@ class Slider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        cid = self._observers.connect('changed', lambda val: func(val))\n+        self._cids.append(cid)\n+        return cid\n \n class RangeSlider(SliderBase):\n     \"\"\"\n@@ -640,6 +642,7 @@ class RangeSlider(SliderBase):\n             self.label = ax.text(-0.02, 0.5, label, transform=ax.transAxes, verticalalignment='center', horizontalalignment='right')\n             self.valtext = ax.text(1.02, 0.5, self._format(valinit), transform=ax.transAxes, verticalalignment='center', horizontalalignment='left')\n         self._active_handle = None\n+        self._cids = []\n         self.set_val(valinit)\n \n     def _update_selection_poly(self, vmin, vmax):\n@@ -778,7 +781,14 @@ class RangeSlider(SliderBase):\n             self.ax.figure.canvas.draw_idle()\n         self.val = (vmin, vmax)\n         if self.eventson:\n+            tmp = self.eventson\n+            self.eventson = False\n+            for cid in self._cids:\n+                self._observers.disconnect(cid)\n             self._observers.process('changed', (vmin, vmax))\n+            self.eventson = tmp\n+            for cid in self._cids:\n+                self._observers.connect('changed', lambda val: self._callbacks[cid](val))\n \n     def on_changed(self, func):\n         \"\"\"\n@@ -795,7 +805,9 @@ class RangeSlider(SliderBase):\n         int\n             Connection id (which can be used to disconnect *func*).\n         \"\"\"\n-        return self._observers.connect('changed', lambda val: func(val))\n+        cid = self._observers.connect('changed', lambda val: func(val))\n+        self._cids.append(cid)\n+        return cid\n \n def _expand_text_props(props):\n     props = cbook.normalize_kwargs(props, mtext.Text)\n", "normalized_occurrence": 1}
