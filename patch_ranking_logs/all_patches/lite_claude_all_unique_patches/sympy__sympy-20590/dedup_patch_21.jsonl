{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 3b46a26..b79e700 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -179,7 +179,7 @@ def uniquely_named_symbol(xname, exprs=(), compare=str, modify=None, **assumptio\n     return _symbol(x, default, **assumptions)\n _uniquely_named_symbol = uniquely_named_symbol\n \n-class Symbol(AtomicExpr, Boolean):\n+class Symbol(AtomicExpr):\n     \"\"\"\n     Assumptions:\n        commutative = True\n@@ -200,7 +200,11 @@ class Symbol(AtomicExpr, Boolean):\n \n     is_comparable = False\n \n+    # Ensure we don't get a __dict__ from parent classes\n     __slots__ = ('name',)\n+    \n+    # Add Boolean properties explicitly rather than inheriting\n+    is_Boolean = False\n \n     is_Symbol = True\n     is_symbol = True\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 2506145..33914de 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -65,9 +65,10 @@ def uniquely_named_symbol(xname, exprs=(), compare=str, modify=None, **assumptio\n         x = modify(x)\n     return _symbol(x, default, **assumptions)\n _uniquely_named_symbol = uniquely_named_symbol\n-class Symbol(AtomicExpr, Boolean):\n+class Symbol(AtomicExpr):\n     is_comparable = False\n     __slots__ = ('name',)\n+    is_Boolean = False\n     is_Symbol = True\n     is_symbol = True\n     @property\n", "normalized_occurrence": 1}
