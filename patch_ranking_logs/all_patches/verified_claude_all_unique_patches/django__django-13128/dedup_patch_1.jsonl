{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..2b0ccbb 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -478,6 +478,19 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         c.is_summary = summarize\n         c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n         c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+        \n+        # Handle datetime subtraction during resolution\n+        if hasattr(c, 'connector') and c.connector == c.SUB:\n+            try:\n+                lhs_type = c.lhs.output_field.get_internal_type()\n+                rhs_type = c.rhs.output_field.get_internal_type()\n+                datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+                if lhs_type in datetime_fields and lhs_type == rhs_type:\n+                    return TemporalSubtraction(c.lhs, c.rhs).resolve_expression(\n+                        query, allow_joins, reuse, summarize, for_save\n+                    )\n+            except FieldError:\n+                pass\n         return c\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..1059f40 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -268,6 +268,15 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         c.is_summary = summarize\n         c.lhs = c.lhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n         c.rhs = c.rhs.resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+        if hasattr(c, 'connector') and c.connector == c.SUB:\n+            try:\n+                lhs_type = c.lhs.output_field.get_internal_type()\n+                rhs_type = c.rhs.output_field.get_internal_type()\n+                datetime_fields = {'DateField', 'DateTimeField', 'TimeField'}\n+                if lhs_type in datetime_fields and lhs_type == rhs_type:\n+                    return TemporalSubtraction(c.lhs, c.rhs).resolve_expression(query, allow_joins, reuse, summarize, for_save)\n+            except FieldError:\n+                pass\n         return c\n class DurationExpression(CombinedExpression):\n     def compile(self, side, compiler, connection):\n", "normalized_occurrence": 1}
