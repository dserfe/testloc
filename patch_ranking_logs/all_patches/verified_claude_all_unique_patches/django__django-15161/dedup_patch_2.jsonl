{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..28fbfd7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -657,6 +657,15 @@ class Func(SQLiteNumericMixin, Expression):\n     template = '%(function)s(%(expressions)s)'\n     arg_joiner = ', '\n     arity = None  # The number of arguments the function accepts.\n+    \n+    def deconstruct(self):\n+        path = 'django.db.models.Func'\n+        args = tuple(arg for arg in self.source_expressions)\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        kwargs.update(self.extra)\n+        return path, args, kwargs\n \n     def __init__(self, *expressions, output_field=None, **extra):\n         if self.arity is not None and len(expressions) != self.arity:\n@@ -737,6 +746,14 @@ class Value(SQLiteNumericMixin, Expression):\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = (self.value,)\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return path, args, kwargs\n+\n     def __init__(self, value, output_field=None):\n         \"\"\"\n         Arguments:\n@@ -990,6 +1007,15 @@ class When(Expression):\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            args.append(self.condition)\n+        kwargs['then'] = self.result\n+        return path, args, kwargs\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path = 'django.db.models.Func'\n+        args = tuple((arg for arg in self.source_expressions))\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        kwargs.update(self.extra)\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.Value'\n+        args = (self.value,)\n+        kwargs = {}\n+        if self.output_field is not None:\n+            kwargs['output_field'] = self.output_field\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path = 'django.db.models.When'\n+        args = []\n+        kwargs = {}\n+        if self.condition is not None:\n+            args.append(self.condition)\n+        kwargs['then'] = self.result\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
