{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 2f2ca70..00f7930 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -1278,9 +1278,14 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n \n     def _hstack(self, Xs):\n         config = _get_output_config(\"transform\", self)\n-        if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n+        if config[\"dense\"] == \"pandas\":\n             pd = check_pandas_support(\"transform\")\n-            return pd.concat(Xs, axis=1)\n+            # Make sure indexes are aligned before concatenation\n+            from functools import reduce\n+            Xs = [X.reset_index(drop=True) if hasattr(X, \"iloc\") else X for X in Xs]\n+            if all(hasattr(X, \"iloc\") for X in Xs):\n+                return pd.concat(Xs, axis=1)\n+            return reduce(lambda x, y: np.hstack((x, y)), Xs)\n \n         if any(sparse.issparse(f) for f in Xs):\n             Xs = sparse.hstack(Xs).tocsr()\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex f4194e0..884a0f8 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -348,9 +348,13 @@ class FeatureUnion(TransformerMixin, _BaseComposition):\n         return self._hstack(Xs)\n     def _hstack(self, Xs):\n         config = _get_output_config('transform', self)\n-        if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n+        if config['dense'] == 'pandas':\n             pd = check_pandas_support('transform')\n-            return pd.concat(Xs, axis=1)\n+            from functools import reduce\n+            Xs = [X.reset_index(drop=True) if hasattr(X, 'iloc') else X for X in Xs]\n+            if all((hasattr(X, 'iloc') for X in Xs)):\n+                return pd.concat(Xs, axis=1)\n+            return reduce(lambda x, y: np.hstack((x, y)), Xs)\n         if any((sparse.issparse(f) for f in Xs)):\n             Xs = sparse.hstack(Xs).tocsr()\n         else:\n", "normalized_occurrence": 1}
