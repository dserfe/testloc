{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py\nindex 496df38..0b0116c 100644\n--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n@@ -69,4 +69,23 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):\n     are sliced.\n     \"\"\"\n \n-    pass\n+    def _arithmetic_mask(self, operand1, operand2, handle_mask):\n+        \"\"\"\n+        Handle the mask combination for arithmetic operations.\n+        \"\"\"\n+        if operand1.mask is None and operand2.mask is None:\n+            return None\n+        elif operand1.mask is None:\n+            return operand2.mask\n+        elif operand2.mask is None:\n+            return operand1.mask\n+        else:\n+            return handle_mask(operand1.mask, operand2.mask)\n+\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        \"\"\"\n+        Multiply two NDDataRef objects, handling masks appropriately.\n+        \"\"\"\n+        result_data = self.data * operand.data if isinstance(operand, NDDataRef) else self.data * operand\n+        result_mask = self._arithmetic_mask(self, operand, handle_mask) if isinstance(operand, NDDataRef) else self.mask\n+        return NDDataRef(result_data, mask=result_mask)\n", "occurrence": 1, "normalized_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _arithmetic_mask(self, operand1, operand2, handle_mask):\n+        if operand1.mask is None and operand2.mask is None:\n+            return None\n+        elif operand1.mask is None:\n+            return operand2.mask\n+        elif operand2.mask is None:\n+            return operand1.mask\n+        else:\n+            return handle_mask(operand1.mask, operand2.mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result_data = self.data * operand.data if isinstance(operand, NDDataRef) else self.data * operand\n+        result_mask = self._arithmetic_mask(self, operand, handle_mask) if isinstance(operand, NDDataRef) else self.mask\n+        return NDDataRef(result_data, mask=result_mask)", "normalized_occurrence": 1}
