{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e64dbc9..fe95b17 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1211,16 +1211,22 @@ class Exists(Subquery):\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return sql, params\n+        try:\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, params\n+        except EmptyResultSet:\n+            if self.negated:\n+                return '1=1', []\n+            else:\n+                return '0=1', []\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ee0d94d..b24949a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -756,10 +756,16 @@ class Exists(Subquery):\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return (sql, params)\n+        try:\n+            sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return (sql, params)\n+        except EmptyResultSet:\n+            if self.negated:\n+                return ('1=1', [])\n+            else:\n+                return ('0=1', [])\n     def select_format(self, compiler, sql, params):\n         if not compiler.connection.features.supports_boolean_expr_in_select_clause:\n             sql = 'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)\n", "normalized_occurrence": 1}
