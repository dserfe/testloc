{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..eb2c5ce 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,10 +862,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                non_empty_transformers = [\n+                    (t[0], X.columns) for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs) if X.shape[1] > 0\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                transformer_names, feature_names_outs = zip(*non_empty_transformers) if non_empty_transformers else ([],[])\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..30ff4c8 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,8 +257,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n+                non_empty_transformers = [(t[0], X.columns) for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs) if X.shape[1] > 0]\n+                transformer_names, feature_names_outs = zip(*non_empty_transformers) if non_empty_transformers else ([], [])\n                 names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n                 output.columns = names_out\n                 return output\n", "normalized_occurrence": 1}
