{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..9a7515e 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,7 +114,7 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in value.split(';'):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n \n@@ -122,7 +122,7 @@ def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions paths.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in value.split(';'):\n         patterns.append(\n             re.compile(\n                 str(pathlib.PureWindowsPath(pattern)).replace(\"\\\\\", \"\\\\\\\\\")\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..a5e9f19 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,12 +55,12 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in value.split(';'):\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    for pattern in value.split(';'):\n         patterns.append(re.compile(str(pathlib.PureWindowsPath(pattern)).replace('\\\\', '\\\\\\\\') + '|' + pathlib.PureWindowsPath(pattern).as_posix()))\n     return patterns\n _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {'choice': str, 'csv': _csv_transformer, 'float': float, 'int': int, 'confidence': _confidence_transformer, 'non_empty_string': _non_empty_string_transformer, 'path': _path_transformer, 'glob_paths_csv': _glob_paths_csv_transformer, 'py_version': _py_version_transformer, 'regexp': _regex_transformer, 'regexp_csv': _regexp_csv_transfomer, 'regexp_paths_csv': _regexp_paths_csv_transfomer, 'string': pylint_utils._unquote, 'yn': _yn_transformer}\n", "normalized_occurrence": 1}
