{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20590", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 3b46a26..a744025 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -268,7 +268,7 @@ class Symbol(AtomicExpr, Boolean):\n         if not isinstance(name, str):\n             raise TypeError(\"name should be a string, not %s\" % repr(type(name)))\n \n-        obj = Expr.__new__(cls)\n+        obj = Expr.__new__(cls, name, **assumptions)\n         obj.name = name\n \n         # TODO: Issue #8873: Forcing the commutative assumption here means\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 2506145..81479dd 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -99,7 +99,7 @@ class Symbol(AtomicExpr, Boolean):\n     def __new_stage2__(cls, name, **assumptions):\n         if not isinstance(name, str):\n             raise TypeError('name should be a string, not %s' % repr(type(name)))\n-        obj = Expr.__new__(cls)\n+        obj = Expr.__new__(cls, name, **assumptions)\n         obj.name = name\n         tmp_asm_copy = assumptions.copy()\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n", "normalized_occurrence": 1}
