{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..ad8cdb5 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,23 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if local reference exists\n+                if uri.startswith('#'):\n+                    # Fragment-only reference in same document\n+                    return self._check_anchor_in_doc(uri[1:], docname)\n+                else:\n+                    # Reference to another document\n+                    doc = uri.split('#')[0] if '#' in uri else uri\n+                    try:\n+                        if doc not in self.env.all_docs:\n+                            return 'broken', 'document not found', 0\n+                        if '#' in uri:\n+                            # Check anchor in target document\n+                            anchor = uri.split('#')[1]\n+                            return self._check_anchor_in_doc(anchor, doc)\n+                        return 'working', '', 0\n+                    except Exception as err:\n+                        return 'broken', str(err), 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -347,6 +363,13 @@ class CheckExternalLinksBuilder(Builder):\n             output.write(json.dumps(data))\n             output.write('\\n')\n \n+    def _check_anchor_in_doc(self, anchor: str, docname: str) -> Tuple[str, str, int]:\n+        doc = self.env.get_doctree(docname)\n+        for node in doc.traverse():\n+            if 'ids' in node and anchor in node['ids']:\n+                return 'working', '', 0\n+        return 'broken', 'anchor not found', 0\n+\n     def finish(self) -> None:\n         for worker in self.workers:\n             self.wqueue.put((None, None, None), False)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..43f3c24 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,19 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    return self._check_anchor_in_doc(uri[1:], docname)\n+                else:\n+                    doc = uri.split('#')[0] if '#' in uri else uri\n+                    try:\n+                        if doc not in self.env.all_docs:\n+                            return ('broken', 'document not found', 0)\n+                        if '#' in uri:\n+                            anchor = uri.split('#')[1]\n+                            return self._check_anchor_in_doc(anchor, doc)\n+                        return ('working', '', 0)\n+                    except Exception as err:\n+                        return ('broken', str(err), 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n@@ -236,6 +248,12 @@ class CheckExternalLinksBuilder(Builder):\n         with open(path.join(self.outdir, 'output.json'), 'a') as output:\n             output.write(json.dumps(data))\n             output.write('\\n')\n+    def _check_anchor_in_doc(self, anchor: str, docname: str) -> Tuple[str, str, int]:\n+        doc = self.env.get_doctree(docname)\n+        for node in doc.traverse():\n+            if 'ids' in node and anchor in node['ids']:\n+                return ('working', '', 0)\n+        return ('broken', 'anchor not found', 0)\n     def finish(self) -> None:\n         for worker in self.workers:\n             self.wqueue.put((None, None, None), False)\n", "normalized_occurrence": 1}
