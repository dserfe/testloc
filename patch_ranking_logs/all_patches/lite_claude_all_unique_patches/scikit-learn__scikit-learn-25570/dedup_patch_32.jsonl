{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..ed26be0 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,13 +862,13 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n+                # Only include non-empty transformers when setting column names\n+                names_and_features = []\n+                for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs):\n+                    if X.shape[1] > 0:  # Only include if transformer produced features\n+                        names_and_features.append((t[0], X.columns))\n+                        \n+                names_out = self._add_prefix_for_feature_names_out(names_and_features)\n                 output.columns = names_out\n                 return output\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..8558678 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,9 +257,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                names_and_features = []\n+                for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs):\n+                    if X.shape[1] > 0:\n+                        names_and_features.append((t[0], X.columns))\n+                names_out = self._add_prefix_for_feature_names_out(names_and_features)\n                 output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n", "normalized_occurrence": 1}
