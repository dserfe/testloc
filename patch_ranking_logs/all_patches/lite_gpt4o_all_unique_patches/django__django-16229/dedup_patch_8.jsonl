{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..9f6d6ec 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -92,7 +92,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {k: (v() if callable(v) else v) for k, v in (initial or {}).items()}\n         self.error_class = error_class\n         # Translators: This is the default suffix added to form field labels\n         self.label_suffix = label_suffix if label_suffix is not None else _(\":\")\n@@ -517,7 +517,7 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n+        value = self.initial.get(field_name, field.initial() if callable(field.initial) else field.initial)\n         if callable(value):\n             value = value()\n         # If this is an auto-generated default date, nix the microseconds\n@@ -536,4 +536,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..f115413 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -58,7 +58,7 @@ class BaseForm(RenderableFormMixin):\n         self.auto_id = auto_id\n         if prefix is not None:\n             self.prefix = prefix\n-        self.initial = initial or {}\n+        self.initial = {k: v() if callable(v) else v for k, v in (initial or {}).items()}\n         self.error_class = error_class\n         self.label_suffix = label_suffix if label_suffix is not None else _(':')\n         self.empty_permitted = empty_permitted\n@@ -367,7 +367,7 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n+        value = self.initial.get(field_name, field.initial() if callable(field.initial) else field.initial)\n         if callable(value):\n             value = value()\n         if isinstance(value, (datetime.datetime, datetime.time)) and (not field.widget.supports_microseconds):\n", "normalized_occurrence": 1}
