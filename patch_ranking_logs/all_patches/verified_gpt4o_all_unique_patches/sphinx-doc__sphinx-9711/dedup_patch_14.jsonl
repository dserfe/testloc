{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9711", "model_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..682ea24 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -41,6 +41,8 @@ class Extension:\n \n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n+    from packaging.version import Version\n+\n     if config.needs_extensions is None:\n         return\n \n@@ -51,7 +53,14 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        try:\n+            ext_version = Version(extension.version)\n+            req_version = Version(reqversion)\n+        except InvalidVersion:\n+            logger.warning(__('Invalid version format for extension %s or requirement %s.'), extname, reqversion)\n+            continue\n+\n+        if ext_version == Version('unknown version') or ext_version < req_version:\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 41afac8..e99a30d 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -15,6 +15,7 @@ class Extension:\n         self.parallel_read_safe = kwargs.pop('parallel_read_safe', None)\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n def verify_needs_extensions(app: 'Sphinx', config: Config) -> None:\n+    from packaging.version import Version\n     if config.needs_extensions is None:\n         return\n     for extname, reqversion in config.needs_extensions.items():\n@@ -22,7 +23,13 @@ def verify_needs_extensions(app: 'Sphinx', config: Config) -> None:\n         if extension is None:\n             logger.warning(__('The %s extension is required by needs_extensions settings, but it is not loaded.'), extname)\n             continue\n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        try:\n+            ext_version = Version(extension.version)\n+            req_version = Version(reqversion)\n+        except InvalidVersion:\n+            logger.warning(__('Invalid version format for extension %s or requirement %s.'), extname, reqversion)\n+            continue\n+        if ext_version == Version('unknown version') or ext_version < req_version:\n             raise VersionRequirementError(__('This project needs the extension %s at least in version %s and therefore cannot be built with the loaded version (%s).') % (extname, reqversion, extension.version))\n def setup(app: 'Sphinx') -> Dict[str, Any]:\n     app.connect('config-inited', verify_needs_extensions, priority=800)\n", "normalized_occurrence": 1}
