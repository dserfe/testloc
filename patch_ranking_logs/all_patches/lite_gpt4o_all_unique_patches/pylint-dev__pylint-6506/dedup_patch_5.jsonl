{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6506", "model_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex a3fdb0c..308d5ae 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -72,17 +72,23 @@ def _config_initialization(\n     # the configuration file\n     parsed_args_list = linter._parse_command_line_configuration(args_list)\n \n-    # Check if there are any options that we do not recognize\n-    unrecognized_options: list[str] = []\n-    for opt in parsed_args_list:\n-        if opt.startswith(\"--\"):\n-            unrecognized_options.append(opt[2:])\n-        elif opt.startswith(\"-\"):\n-            unrecognized_options.append(opt[1:])\n-    if unrecognized_options:\n-        msg = \", \".join(unrecognized_options)\n-        linter.add_message(\"unrecognized-option\", line=0, args=msg)\n-        raise _UnrecognizedOptionError(options=unrecognized_options)\n+    try:\n+        # Check if there are any options that we do not recognize\n+        unrecognized_options: list[str] = []\n+        for opt in parsed_args_list:\n+            if opt.startswith(\"--\"):\n+                unrecognized_options.append(opt[2:])\n+            elif opt.startswith(\"-\"):\n+                unrecognized_options.append(opt[1:])\n+        if unrecognized_options:\n+            msg = \", \".join(unrecognized_options)\n+            linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+            raise _UnrecognizedOptionError(options=unrecognized_options)\n+    except _UnrecognizedOptionError as exc:\n+        msg = \", \".join(exc.options)\n+        print(f\"Error: Unrecognized option(s) found: {msg}\")\n+        print(linter.help())\n+        sys.exit(32)\n \n     # Set the current module to configuration as we don't know where\n     # the --load-plugins key is coming from\n@@ -103,4 +109,4 @@ def _config_initialization(\n \n     linter._parse_error_mode()\n \n-    return parsed_args_list\n+    return parsed_args_list\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex e5a3333..b87e1dc 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -30,16 +30,22 @@ def _config_initialization(linter: PyLinter, args_list: list[str], reporter: rep\n         linter.set_reporter(reporter)\n     linter.set_current_module('Command line')\n     parsed_args_list = linter._parse_command_line_configuration(args_list)\n-    unrecognized_options: list[str] = []\n-    for opt in parsed_args_list:\n-        if opt.startswith('--'):\n-            unrecognized_options.append(opt[2:])\n-        elif opt.startswith('-'):\n-            unrecognized_options.append(opt[1:])\n-    if unrecognized_options:\n-        msg = ', '.join(unrecognized_options)\n-        linter.add_message('unrecognized-option', line=0, args=msg)\n-        raise _UnrecognizedOptionError(options=unrecognized_options)\n+    try:\n+        unrecognized_options: list[str] = []\n+        for opt in parsed_args_list:\n+            if opt.startswith('--'):\n+                unrecognized_options.append(opt[2:])\n+            elif opt.startswith('-'):\n+                unrecognized_options.append(opt[1:])\n+        if unrecognized_options:\n+            msg = ', '.join(unrecognized_options)\n+            linter.add_message('unrecognized-option', line=0, args=msg)\n+            raise _UnrecognizedOptionError(options=unrecognized_options)\n+    except _UnrecognizedOptionError as exc:\n+        msg = ', '.join(exc.options)\n+        print(f'Error: Unrecognized option(s) found: {msg}')\n+        print(linter.help())\n+        sys.exit(32)\n     linter.set_current_module('Command line or configuration file')\n     linter.load_plugin_configuration()\n     if not parsed_args_list:\n", "normalized_occurrence": 1}
