{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ff9064f..8d027e0 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -878,16 +878,26 @@ warn_explicit(\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = next_res, next_expl\n+        # For byte string comparisons, we want to show the actual bytes\n+        # rather than their ASCII ordinal values\n+        formatted_results = []\n+        for result in results:\n+            if isinstance(result, ast.Bytes):\n+                # For literal byte strings, convert to a more readable form\n+                formatted_results.append(ast.Str(repr(result.s)))\n+            else:\n+                formatted_results.append(result)\n+\n         # Use pytest.assertion.util._reprcompare if that's available.\n         expl_call = self.helper(\n             \"_call_reprcompare\",\n             ast.Tuple(syms, ast.Load()),\n             ast.Tuple(load_names, ast.Load()),\n             ast.Tuple(expls, ast.Load()),\n-            ast.Tuple(results, ast.Load()),\n+            ast.Tuple(formatted_results, ast.Load()),\n         )\n         if len(comp.ops) > 1:\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex c715f90..a1a15ae 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -489,7 +489,13 @@ class AssertionRewriter(ast.NodeVisitor):\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n             left_res, left_expl = (next_res, next_expl)\n-        expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(results, ast.Load()))\n+        formatted_results = []\n+        for result in results:\n+            if isinstance(result, ast.Bytes):\n+                formatted_results.append(ast.Str(repr(result.s)))\n+            else:\n+                formatted_results.append(result)\n+        expl_call = self.helper('_call_reprcompare', ast.Tuple(syms, ast.Load()), ast.Tuple(load_names, ast.Load()), ast.Tuple(expls, ast.Load()), ast.Tuple(formatted_results, ast.Load()))\n         if len(comp.ops) > 1:\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n", "normalized_occurrence": 1}
