{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..218f9b2 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -187,10 +187,18 @@ class Nominal(Scale):\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n \n-            # TODO Currently just used in non-Coordinate contexts, but should\n-            # we use this to (A) set the padding we want for categorial plots\n-            # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Setting the padding to +/- 0.5 from the first and last tick for Nominal scales\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            # Set sticky edges and margin to 0\n+            axis.sticky_edges.x[:] = [-0.5, len(units_seed) - 0.5]\n+            axis.use_sticky_edges = True\n+\n+            # Disable grid for Nominal scales\n+            axis.grid(False)\n+\n+            # Inverting the axis if it's the y-axis\n+            if axis.axis_name == 'y':\n+                axis.invert()\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..357add1 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -94,7 +94,12 @@ class Nominal(Scale):\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n+            axis.sticky_edges.x[:] = [-0.5, len(units_seed) - 0.5]\n+            axis.use_sticky_edges = True\n+            axis.grid(False)\n+            if axis.axis_name == 'y':\n+                axis.invert()\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 1}
