{"model_name_or_path": "agentless", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..7eaf862 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -471,9 +471,15 @@ class SQLCompiler:\n         if not parts:\n             raise EmptyResultSet\n         combinator_sql = self.connection.ops.set_operators[combinator]\n+\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            if distinct_fields:\n+                result.append('DISTINCT ON ({})'.format(', '.join(distinct_fields)))\n+                params.extend(distinct_params)\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+        braces = '({})' if features.supports_slicing_ordering_in_compound or self.query.distinct else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..758943f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -263,9 +263,14 @@ class SQLCompiler:\n         if not parts:\n             raise EmptyResultSet\n         combinator_sql = self.connection.ops.set_operators[combinator]\n+        if self.query.distinct and self.query.distinct_fields:\n+            distinct_fields, distinct_params = self.get_distinct()\n+            if distinct_fields:\n+                result.append('DISTINCT ON ({})'.format(', '.join(distinct_fields)))\n+                params.extend(distinct_params)\n         if all and combinator == 'union':\n             combinator_sql += ' ALL'\n-        braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n+        braces = '({})' if features.supports_slicing_ordering_in_compound or self.query.distinct else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n         result = [' {} '.format(combinator_sql).join(sql_parts)]\n         params = []\n", "normalized_occurrence": 1}
