{"model_name_or_path": "agentless", "instance_id": "django__django-12125", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 824ab10..f3c1c8d 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -90,13 +90,17 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        parts = path.split(\".\")\n+        if parts[0] == \"django\" and parts[1] == \"db\" and parts[2] == \"models\":\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % parts[-1]\n         else:\n-            imports = {\"import %s\" % module}\n+            module = \".\".join(parts[:-1])\n             name = path\n+            imports = {\"import %s\" % module}\n+            # Handle inner classes\n+            if len(parts) > 2 and parts[-2][0].isupper():\n+                name = \".\".join(parts[-2:])\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d663baf..7b7fc59 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -68,13 +68,16 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        parts = path.split('.')\n+        if parts[0] == 'django' and parts[1] == 'db' and (parts[2] == 'models'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.%s' % parts[-1]\n         else:\n-            imports = {'import %s' % module}\n+            module = '.'.join(parts[:-1])\n             name = path\n+            imports = {'import %s' % module}\n+            if len(parts) > 2 and parts[-2][0].isupper():\n+                name = '.'.join(parts[-2:])\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
