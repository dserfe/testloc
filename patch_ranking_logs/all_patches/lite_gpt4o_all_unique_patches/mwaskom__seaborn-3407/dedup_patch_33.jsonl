{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3407", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 29c361e..e036891 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1291,7 +1291,11 @@ class PairGrid(Grid):\n \n         self._figure = fig\n         self.axes = axes\n-        self.data = data\n+        if isinstance(data.columns, pd.MultiIndex):\n+            self.data = data.copy()\n+            self.data.columns = [' '.join(map(str, col)).strip() for col in self.data.columns.values]\n+        else:\n+            self.data = data\n \n         # Save what we are going to do with the diagonal\n         self.diag_sharey = diag_sharey\n@@ -1487,7 +1491,10 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n-            vector = self.data[var]\n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                vector = self.data[' '.join(map(str, var)).strip()]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -1591,6 +1598,8 @@ class PairGrid(Grid):\n         if self._hue_var is not None and self._hue_var not in axes_vars:\n             axes_vars.append(self._hue_var)\n \n+        if isinstance(self.data.columns, pd.MultiIndex):\n+            axes_vars = [' '.join(map(str, var)).strip() for var in axes_vars]\n         data = self.data[axes_vars]\n         if self._dropna:\n             data = data.dropna()\n@@ -1623,7 +1632,10 @@ class PairGrid(Grid):\n         else:\n             axes_vars = [x_var, y_var]\n \n-        hue_grouped = self.data.groupby(self.hue_vals)\n+        if isinstance(self.data.columns, pd.MultiIndex):\n+            hue_grouped = self.data.groupby(self.hue_vals, axis=0)\n+        else:\n+            hue_grouped = self.data.groupby(self.hue_vals)\n         for k, label_k in enumerate(self._hue_order):\n \n             kws = kwargs.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 039b44a..d84bfd8 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -567,7 +567,11 @@ class PairGrid(Grid):\n                 axes[i, j] = None\n         self._figure = fig\n         self.axes = axes\n-        self.data = data\n+        if isinstance(data.columns, pd.MultiIndex):\n+            self.data = data.copy()\n+            self.data.columns = [' '.join(map(str, col)).strip() for col in self.data.columns.values]\n+        else:\n+            self.data = data\n         self.diag_sharey = diag_sharey\n         self.diag_vars = None\n         self.diag_axes = None\n@@ -666,7 +670,10 @@ class PairGrid(Grid):\n                 plot_kwargs['ax'] = ax\n             else:\n                 plt.sca(ax)\n-            vector = self.data[var]\n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                vector = self.data[' '.join(map(str, var)).strip()]\n+            else:\n+                vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n             else:\n@@ -741,6 +748,8 @@ class PairGrid(Grid):\n             axes_vars = [x_var, y_var]\n         if self._hue_var is not None and self._hue_var not in axes_vars:\n             axes_vars.append(self._hue_var)\n+        if isinstance(self.data.columns, pd.MultiIndex):\n+            axes_vars = [' '.join(map(str, var)).strip() for var in axes_vars]\n         data = self.data[axes_vars]\n         if self._dropna:\n             data = data.dropna()\n@@ -764,7 +773,10 @@ class PairGrid(Grid):\n             axes_vars = [x_var]\n         else:\n             axes_vars = [x_var, y_var]\n-        hue_grouped = self.data.groupby(self.hue_vals)\n+        if isinstance(self.data.columns, pd.MultiIndex):\n+            hue_grouped = self.data.groupby(self.hue_vals, axis=0)\n+        else:\n+            hue_grouped = self.data.groupby(self.hue_vals)\n         for k, label_k in enumerate(self._hue_order):\n             kws = kwargs.copy()\n             try:\n", "normalized_occurrence": 1}
