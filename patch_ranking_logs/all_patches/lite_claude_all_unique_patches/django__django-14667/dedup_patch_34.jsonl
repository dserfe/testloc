{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..d2e238c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2081,11 +2081,13 @@ class Query(BaseExpression):\n         # splitting and handling when computing the SQL column names (as part of\n         # get_columns()).\n         existing, defer = self.deferred_loading\n+        field_names = set(field_names)\n         if defer:\n             # Add to existing deferred names.\n             self.deferred_loading = existing.union(field_names), True\n         else:\n-            # Remove names from the set of any existing \"immediate load\" names.\n+            # We're in .only() mode and want to defer additional fields.\n+            # Remove the new names from the set of fields to load.\n             self.deferred_loading = existing.difference(field_names), False\n \n     def add_immediate_loading(self, field_names):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..c829905 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1137,6 +1137,7 @@ class Query(BaseExpression):\n         self.deferred_loading = (frozenset(), True)\n     def add_deferred_loading(self, field_names):\n         existing, defer = self.deferred_loading\n+        field_names = set(field_names)\n         if defer:\n             self.deferred_loading = (existing.union(field_names), True)\n         else:\n", "normalized_occurrence": 1}
