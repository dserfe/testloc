{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14087", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex dbd459e..24125bb 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,8 +2174,12 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n-                                 for i in range(len(folds))], axis=0)\n+                    if multi_class == 'ovr':\n+                        w = np.mean([coefs_paths[i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n+                    else:\n+                        w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                                     for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n                 self.C_.append(np.mean(self.Cs_[best_indices_C]))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 5d31b9f..2f90e4e 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -552,6 +552,8 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator, LinearClassifierMi\n                 best_indices = np.argmax(scores, axis=1)\n                 if self.multi_class == 'ovr':\n                     w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)\n+                elif multi_class == 'ovr':\n+                    w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)\n                 else:\n                     w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)\n                 best_indices_C = best_indices % len(self.Cs_)\n", "normalized_occurrence": 1}
