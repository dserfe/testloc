{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..d546b65 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -88,15 +88,27 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'),\n                   'py:class': env.ref_context.get('py:class')}\n+        # Resolve full qualified name\n+        domain = env.get_domain('py')\n+        target = text\n+        if not target.startswith('.'):\n+            modname = kwargs.get('py:module')\n+            clsname = kwargs.get('py:class')\n+            if modname or clsname:\n+                fqn = '.'.join(filter(None, [modname, clsname, target]))\n+                if fqn in domain.objects:\n+                    target = fqn\n     else:\n         kwargs = {}\n \n     return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+                        refdomain='py', reftype=reftype, reftarget=target, **kwargs)\n \n \n-def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n+def _parse_annotation(annotation: str, env: BuildEnvironment) -> List[Node]:\n     \"\"\"Parse type annotation.\"\"\"\n+    if env is None:\n+        raise ValueError(\"env parameter is required for _parse_annotation.\")\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text(\"%s.%s\" % (unparse(node.value)[0], node.attr))]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..8b5d3b1 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -41,10 +41,21 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         reftype = 'class'\n     if env:\n         kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n+        domain = env.get_domain('py')\n+        target = text\n+        if not target.startswith('.'):\n+            modname = kwargs.get('py:module')\n+            clsname = kwargs.get('py:class')\n+            if modname or clsname:\n+                fqn = '.'.join(filter(None, [modname, clsname, target]))\n+                if fqn in domain.objects:\n+                    target = fqn\n     else:\n         kwargs = {}\n-    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n-def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n+    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=target, **kwargs)\n+def _parse_annotation(annotation: str, env: BuildEnvironment) -> List[Node]:\n+    if env is None:\n+        raise ValueError('env parameter is required for _parse_annotation.')\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n             return [nodes.Text('%s.%s' % (unparse(node.value)[0], node.attr))]\n", "normalized_occurrence": 1}
