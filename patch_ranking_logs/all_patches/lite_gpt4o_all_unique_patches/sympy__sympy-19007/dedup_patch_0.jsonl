{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..16cb5d0 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -234,17 +234,19 @@ class BlockMatrix(MatrixExpr):\n \n     def _entry(self, i, j, **kwargs):\n         # Find row entry\n+        row_index = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if row_index < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            row_index -= numrows\n+\n+        col_index = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if col_index < numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_index -= numcols\n+\n+        return self.blocks[row_block, col_block][row_index, col_index]\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..a953f6a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,17 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        row_index = i\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if row_index < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            row_index -= numrows\n+        col_index = j\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if col_index < numcols:\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_index -= numcols\n+        return self.blocks[row_block, col_block][row_index, col_index]\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
