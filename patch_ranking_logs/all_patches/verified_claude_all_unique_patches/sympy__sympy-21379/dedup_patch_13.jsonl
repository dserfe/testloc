{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..43e44db 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -810,15 +810,25 @@ class Piecewise(Function):\n         # somewhat more efficient by avoiding other substitutions\n         # and avoiding invalid conditions that appear after a\n         # True condition\n+        if _aresame(self, old):\n+            return new\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+            # First try to substitute in the expression\n+            try:\n+                newe = e._subs(old, new)\n+            except (TypeError, AttributeError):\n+                newe = e\n+            # Then try to substitute in the condition\n+            try:\n+                newc = c._subs(old, new)\n+            except (TypeError, AttributeError):\n+                newc = c\n+            if newc != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            args[i] = (newe, newc)\n+            if newc == True:\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..ea2e70f 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,15 +441,23 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n+        if _aresame(self, old):\n+            return new\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n-            c = c._subs(old, new)\n-            if c != False:\n+            try:\n+                newe = e._subs(old, new)\n+            except (TypeError, AttributeError):\n+                newe = e\n+            try:\n+                newc = c._subs(old, new)\n+            except (TypeError, AttributeError):\n+                newc = c\n+            if newc != False:\n                 args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            args[i] = (newe, newc)\n+            if newc == True:\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n", "normalized_occurrence": 1}
