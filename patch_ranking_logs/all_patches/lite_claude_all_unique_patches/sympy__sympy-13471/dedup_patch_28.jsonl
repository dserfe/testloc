{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13471", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex d444598..f5238de 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1042,7 +1042,8 @@ class Float(Number):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                # Strip 'L' suffix if present (from Python 2 dumps)\n+                num[1] = long(num[1].rstrip('L'), 16)\n                 _mpf_ = tuple(num)\n             else:\n                 if len(num) == 4:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 2b4ff35..97e8612 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -877,7 +877,7 @@ class Float(Number):\n         elif isinstance(num, tuple) and len(num) in (3, 4):\n             if type(num[1]) is str:\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                num[1] = long(num[1].rstrip('L'), 16)\n                 _mpf_ = tuple(num)\n             elif len(num) == 4:\n                 return Float._new(num, precision)\n", "normalized_occurrence": 22}
