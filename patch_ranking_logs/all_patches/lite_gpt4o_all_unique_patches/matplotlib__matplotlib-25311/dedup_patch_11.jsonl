{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..c262b21 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3159,10 +3159,20 @@ None}, default: None\n     def __getstate__(self):\n         state = super().__getstate__()\n \n+        # Remove the canvas and any non-picklable objects from the state\n         # The canvas cannot currently be pickled, but this has the benefit\n         # of meaning that a figure can be detached from one canvas, and\n         # re-attached to another.\n-        state.pop(\"canvas\")\n+        state.pop(\"canvas\", None)\n+\n+        # Remove draggable state for legends and annotations \n+        for ax in self.axes:\n+            for leg in ax.get_children():\n+                if isinstance(leg, mpl.legend.Legend) and leg._draggable is not None:\n+                    leg._draggable._release(None)\n+                for ann in ax.texts:\n+                    if hasattr(ann, '_draggable') and ann._draggable is not None:\n+                        ann._draggable._release(None)\n \n         # discard any changes to the dpi due to pixel ratio changes\n         state[\"_dpi\"] = state.get('_original_dpi', state['_dpi'])\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..82103e2 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -945,7 +945,14 @@ class Figure(FigureBase):\n         a.draw(self.canvas.get_renderer())\n     def __getstate__(self):\n         state = super().__getstate__()\n-        state.pop('canvas')\n+        state.pop('canvas', None)\n+        for ax in self.axes:\n+            for leg in ax.get_children():\n+                if isinstance(leg, mpl.legend.Legend) and leg._draggable is not None:\n+                    leg._draggable._release(None)\n+                for ann in ax.texts:\n+                    if hasattr(ann, '_draggable') and ann._draggable is not None:\n+                        ann._draggable._release(None)\n         state['_dpi'] = state.get('_original_dpi', state['_dpi'])\n         state['__mpl_version__'] = mpl.__version__\n         from matplotlib import _pylab_helpers\n", "normalized_occurrence": 1}
