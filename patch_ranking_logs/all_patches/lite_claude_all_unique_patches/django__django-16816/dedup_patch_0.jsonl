{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..066d9ee 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -893,6 +893,36 @@ class ModelAdminChecks(BaseModelAdminChecks):\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n+            \n+        # First check if it's a model field\n+        try:\n+            field = obj.model._meta.get_field(item)\n+        except FieldDoesNotExist:\n+            # If not a model field, check if it's a model attribute/method\n+            try:\n+                field = getattr(obj.model, item)\n+            except AttributeError:\n+                # Finally check if it's an admin attribute/method\n+                if hasattr(obj, item):\n+                    return []\n+                    \n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is not a \"\n+                        \"callable, an attribute of '%s', or an attribute or \"\n+                        \"method on '%s'.\"\n+                        % (\n+                            label,\n+                            item,\n+                            obj.__class__.__name__,\n+                            obj.model._meta.label,\n+                        ),\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n+        if callable(item):\n+            return []\n         elif hasattr(obj, item):\n             return []\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..2b82f50 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -333,6 +333,17 @@ class ModelAdminChecks(BaseModelAdminChecks):\n         else:\n             return list(chain.from_iterable((self._check_list_display_item(obj, item, 'list_display[%d]' % index) for index, item in enumerate(obj.list_display))))\n     def _check_list_display_item(self, obj, item, label):\n+        if callable(item):\n+            return []\n+        try:\n+            field = obj.model._meta.get_field(item)\n+        except FieldDoesNotExist:\n+            try:\n+                field = getattr(obj.model, item)\n+            except AttributeError:\n+                if hasattr(obj, item):\n+                    return []\n+                return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n         if callable(item):\n             return []\n         elif hasattr(obj, item):\n", "normalized_occurrence": 1}
