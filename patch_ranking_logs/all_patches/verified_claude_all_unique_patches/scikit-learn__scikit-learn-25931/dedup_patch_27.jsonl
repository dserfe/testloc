{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..5e6fcce 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -288,6 +288,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             Fitted estimator.\n         \"\"\"\n         self._validate_params()\n+        # Store a reference to the original input for offset calculation\n+        self._fit_X = X\n         X = self._validate_data(X, accept_sparse=[\"csc\"], dtype=tree_dtype)\n         if issparse(X):\n             # Pre-sort indices to avoid that each individual tree of the\n@@ -344,8 +346,10 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             self.offset_ = -0.5\n             return self\n \n-        # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        # else, define offset_ wrt contamination parameter using original input\n+        self.offset_ = np.percentile(self.score_samples(self._fit_X), 100.0 * self.contamination)\n+        # Clean up\n+        del self._fit_X\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..5ec9d94 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -23,6 +23,7 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         return {'prefer': 'threads'}\n     def fit(self, X, y=None, sample_weight=None):\n         self._validate_params()\n+        self._fit_X = X\n         X = self._validate_data(X, accept_sparse=['csc'], dtype=tree_dtype)\n         if issparse(X):\n             X.sort_indices()\n@@ -46,7 +47,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        self.offset_ = np.percentile(self.score_samples(self._fit_X), 100.0 * self.contamination)\n+        del self._fit_X\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 2}
