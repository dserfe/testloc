{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..8e6dc2d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -256,6 +256,19 @@ class ForwardManyToOneDescriptor:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n \n+        # Ensure the primary key of the related instance is set before caching it.\n+        if value is not None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                if getattr(value, rh_field.attname) is None:\n+                    raise ValueError(\n+                        'Cannot assign \"%r\": \"%s.%s\" must have a value for field \"%s\" before assignment.' % (\n+                            value,\n+                            instance._meta.object_name,\n+                            self.field.name,\n+                            rh_field.attname,\n+                        )\n+                    )\n+\n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n         self.field.set_cached_value(instance, value)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..b9f0d40 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -85,6 +85,10 @@ class ForwardManyToOneDescriptor:\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n                 setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+        if value is not None:\n+            for lh_field, rh_field in self.field.related_fields:\n+                if getattr(value, rh_field.attname) is None:\n+                    raise ValueError('Cannot assign \"%r\": \"%s.%s\" must have a value for field \"%s\" before assignment.' % (value, instance._meta.object_name, self.field.name, rh_field.attname))\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
