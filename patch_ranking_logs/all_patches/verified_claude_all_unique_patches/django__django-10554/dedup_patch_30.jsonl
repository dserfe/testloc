{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..f806dbb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -355,8 +355,15 @@ class SQLCompiler:\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    # Handle cases where the order by column is the same field but not the exact same expression\n+                    elif (isinstance(src, Field) and isinstance(sel_expr, Field) and \n+                          src.name == sel_expr.name and src.model == sel_expr.model):\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    # Add the ordering column to the selected columns if not present\n+                    self.select.append((src, None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % (len(self.select)), ())])\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..8eab145 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -191,8 +191,12 @@ class SQLCompiler:\n                     if src == sel_expr:\n                         resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n                         break\n+                    elif isinstance(src, Field) and isinstance(sel_expr, Field) and (src.name == sel_expr.name) and (src.model == sel_expr.model):\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    self.select.append((src, None, None))\n+                    resolved.set_source_expressions([RawSQL('%d' % len(self.select), ())])\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
