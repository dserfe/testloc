{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13297", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 4950955..f9c21dd 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -553,10 +553,10 @@ class URLResolver:\n                         tried.append([pattern])\n                 else:\n                     if sub_match:\n-                        # Merge captured arguments in match with submatch\n-                        sub_match_dict = {**kwargs, **self.default_kwargs}\n-                        # Update the sub_match_dict with the kwargs from the sub_match.\n-                        sub_match_dict.update(sub_match.kwargs)\n+                        # Merge captured arguments in match with submatch and ensure they're strings\n+                        sub_match_dict = {k: str(v) for k, v in {**kwargs, **self.default_kwargs}.items()}\n+                        # Update the sub_match_dict with the kwargs from the sub_match, ensuring they're strings\n+                        sub_match_dict.update({k: str(v) for k, v in sub_match.kwargs.items()})\n                         # If there are *any* named groups, ignore all non-named groups.\n                         # Otherwise, pass all non-named arguments as positional arguments.\n                         sub_match_args = sub_match.args\n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 715ed78..e89de3e 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -363,8 +363,8 @@ class URLResolver:\n                         tried.append([pattern])\n                 else:\n                     if sub_match:\n-                        sub_match_dict = {**kwargs, **self.default_kwargs}\n-                        sub_match_dict.update(sub_match.kwargs)\n+                        sub_match_dict = {k: str(v) for k, v in {**kwargs, **self.default_kwargs}.items()}\n+                        sub_match_dict.update({k: str(v) for k, v in sub_match.kwargs.items()})\n                         sub_match_args = sub_match.args\n                         if not sub_match_dict:\n                             sub_match_args = args + sub_match.args\n", "normalized_occurrence": 5}
