{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..e3a5c6f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1074,16 +1074,20 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                # for implicit module members, check __module__ to avoid\n-                # documenting imported objects\n-                return True, list(members.values())\n+            if self.__all__ is None:\n+                for member in members.values():\n+                    if member.__module__ == self.object.__name__:\n+                        memberlist.append(member)\n+            elif len(self.__all__) == 0:\n+                return False, []\n             else:\n                 for member in members.values():\n-                    if member.__name__ not in self.__all__:\n+                    if member.__name__ in self.__all__:\n+                        memberlist.append(member)\n+                    else:\n                         member.skipped = True\n \n-                return False, list(members.values())\n+            return False, memberlist\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..69553c3 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -575,13 +575,19 @@ class ModuleDocumenter(Documenter):\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n         if want_all:\n-            if not self.__all__:\n-                return (True, list(members.values()))\n+            if self.__all__ is None:\n+                for member in members.values():\n+                    if member.__module__ == self.object.__name__:\n+                        memberlist.append(member)\n+            elif len(self.__all__) == 0:\n+                return (False, [])\n             else:\n                 for member in members.values():\n-                    if member.__name__ not in self.__all__:\n+                    if member.__name__ in self.__all__:\n+                        memberlist.append(member)\n+                    else:\n                         member.skipped = True\n-                return (False, list(members.values()))\n+            return (False, memberlist)\n         else:\n             memberlist = self.options.members or []\n             ret = []\n", "normalized_occurrence": 1}
