{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..cb76ae2 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -299,13 +300,27 @@ def _dataset_concat(\n     if (dim in coord_names or dim in data_names) and dim not in dim_names:\n         datasets = [ds.expand_dims(dim) for ds in datasets]\n \n-    # determine which variables to concatentate\n+    # determine which variables to concatenate\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(\n         datasets, dim, dim_names, data_vars, coords, compat\n     )\n \n+    # Get all possible variables across all datasets\n+    all_variables = set()\n+    for ds in datasets:\n+        all_variables.update(coord_names | data_names)\n+\n     # determine which variables to merge, and then merge them according to compat\n-    variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n+    variables_to_merge = all_variables - concat_over - dim_names\n+\n+    # Create missing variables in datasets where they don't exist\n+    for ds in datasets:\n+        for var in variables_to_merge:\n+            if var not in ds and var not in ds.coords:\n+                if var in coord_names:\n+                    ds.coords[var] = Variable((), fill_value)\n+                else:\n+                    ds[var] = Variable((), fill_value)\n \n     result_vars = {}\n     if variables_to_merge:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..33701d9 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -121,7 +121,17 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     if (dim in coord_names or dim in data_names) and dim not in dim_names:\n         datasets = [ds.expand_dims(dim) for ds in datasets]\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat)\n-    variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n+    all_variables = set()\n+    for ds in datasets:\n+        all_variables.update(coord_names | data_names)\n+    variables_to_merge = all_variables - concat_over - dim_names\n+    for ds in datasets:\n+        for var in variables_to_merge:\n+            if var not in ds and var not in ds.coords:\n+                if var in coord_names:\n+                    ds.coords[var] = Variable((), fill_value)\n+                else:\n+                    ds[var] = Variable((), fill_value)\n     result_vars = {}\n     if variables_to_merge:\n         to_merge = {var: [] for var in variables_to_merge}\n", "normalized_occurrence": 1}
