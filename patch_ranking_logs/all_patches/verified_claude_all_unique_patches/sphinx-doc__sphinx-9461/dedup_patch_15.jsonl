{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..6995b0e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2661,7 +2661,16 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        \"\"\"Check if a member can be documented by this documenter.\n+        \n+        Handles both regular properties and class properties (decorated with both @classmethod and @property).\"\"\"\n+        if inspect.isproperty(member) and isinstance(parent, ClassDocumenter):\n+            return True\n+        # Handle class properties (decorated with both @classmethod and @property)\n+        try:\n+            return hasattr(member, '__get__') and hasattr(member, '__doc__') and isinstance(parent, ClassDocumenter)\n+        except Exception:\n+            return False\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..05dd9a6 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1597,7 +1597,12 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        if inspect.isproperty(member) and isinstance(parent, ClassDocumenter):\n+            return True\n+        try:\n+            return hasattr(member, '__get__') and hasattr(member, '__doc__') and isinstance(parent, ClassDocumenter)\n+        except Exception:\n+            return False\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n", "normalized_occurrence": 1}
