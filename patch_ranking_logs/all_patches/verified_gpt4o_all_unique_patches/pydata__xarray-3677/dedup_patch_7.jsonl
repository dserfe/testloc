{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-3677", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex cad360a..2977ec7 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -797,7 +797,7 @@ def merge(\n \n def dataset_merge_method(\n     dataset: \"Dataset\",\n-    other: \"CoercibleMapping\",\n+    other: Union[\"CoercibleMapping\", \"DataArray\"],\n     overwrite_vars: Union[Hashable, Iterable[Hashable]],\n     compat: str,\n     join: str,\n@@ -831,6 +831,10 @@ def dataset_merge_method(\n         objs = [dataset, other_no_overwrite, other_overwrite]\n         priority_arg = 2\n \n+    from .dataarray import DataArray\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n+        \n     return merge_core(\n         objs, compat, join, priority_arg=priority_arg, fill_value=fill_value\n     )\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 2140bbd..3a03356 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -611,7 +611,7 @@ def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str\n     merged = Dataset._construct_direct(**merge_result._asdict())\n     return merged\n \n-def dataset_merge_method(dataset: 'Dataset', other: 'CoercibleMapping', overwrite_vars: Union[Hashable, Iterable[Hashable]], compat: str, join: str, fill_value: Any) -> _MergeResult:\n+def dataset_merge_method(dataset: 'Dataset', other: Union['CoercibleMapping', 'DataArray'], overwrite_vars: Union[Hashable, Iterable[Hashable]], compat: str, join: str, fill_value: Any) -> _MergeResult:\n     \"\"\"Guts of the Dataset.merge method.\n     \"\"\"\n     if isinstance(overwrite_vars, Iterable) and (not isinstance(overwrite_vars, str)):\n@@ -634,6 +634,9 @@ def dataset_merge_method(dataset: 'Dataset', other: 'CoercibleMapping', overwrit\n                 other_no_overwrite[k] = v\n         objs = [dataset, other_no_overwrite, other_overwrite]\n         priority_arg = 2\n+    from .dataarray import DataArray\n+    if isinstance(other, DataArray):\n+        other = other.to_dataset()\n     return merge_core(objs, compat, join, priority_arg=priority_arg, fill_value=fill_value)\n \n def dataset_update_method(dataset: 'Dataset', other: 'CoercibleMapping') -> _MergeResult:\n", "normalized_occurrence": 1}
