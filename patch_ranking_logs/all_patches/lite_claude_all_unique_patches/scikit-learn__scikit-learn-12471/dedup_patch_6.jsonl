{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-12471", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 80fea06..387e24b 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -110,7 +110,15 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     # continue `The rows are marked `X_mask` and will be\n                     # removed later.\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    if Xi.dtype.kind == 'U' or Xi.dtype.kind == 'S':\n+                        # For string dtypes, make a copy with large enough itemsize to\n+                        # accommodate longest category\n+                        max_size = max(Xi.dtype.itemsize,\n+                                     self.categories_[i].dtype.itemsize)\n+                        Xi = Xi.astype(f'|U{max_size // 4}' if Xi.dtype.kind == 'U'\n+                                     else f'|S{max_size}')\n+                    else:\n+                        Xi = Xi.copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 8703749..cd4520e 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -63,7 +63,11 @@ class _BaseEncoder(BaseEstimator, TransformerMixin):\n                     raise ValueError(msg)\n                 else:\n                     X_mask[:, i] = valid_mask\n-                    Xi = Xi.copy()\n+                    if Xi.dtype.kind == 'U' or Xi.dtype.kind == 'S':\n+                        max_size = max(Xi.dtype.itemsize, self.categories_[i].dtype.itemsize)\n+                        Xi = Xi.astype(f'|U{max_size // 4}' if Xi.dtype.kind == 'U' else f'|S{max_size}')\n+                    else:\n+                        Xi = Xi.copy()\n                     Xi[~valid_mask] = self.categories_[i][0]\n             _, encoded = _encode(Xi, self.categories_[i], encode=True)\n             X_int[:, i] = encoded\n", "normalized_occurrence": 1}
