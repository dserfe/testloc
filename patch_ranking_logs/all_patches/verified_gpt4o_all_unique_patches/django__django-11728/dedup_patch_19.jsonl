{"model_name_or_path": "agentless", "instance_id": "django__django-11728", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 5b145cc..df3319f 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -214,29 +214,29 @@ def _route_to_regex(route, is_endpoint=False):\n     converters = {}\n     while True:\n         match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n-        if not match:\n-            parts.append(re.escape(route))\n-            break\n-        parts.append(re.escape(route[:match.start()]))\n-        route = route[match.end():]\n-        parameter = match.group('parameter')\n-        if not parameter.isidentifier():\n-            raise ImproperlyConfigured(\n-                \"URL route '%s' uses parameter name %r which isn't a valid \"\n-                \"Python identifier.\" % (original_route, parameter)\n-            )\n-        raw_converter = match.group('converter')\n-        if raw_converter is None:\n-            # If a converter isn't specified, the default is `str`.\n-            raw_converter = 'str'\n-        try:\n-            converter = get_converter(raw_converter)\n-        except KeyError as e:\n-            raise ImproperlyConfigured(\n-                \"URL route '%s' uses invalid converter %s.\" % (original_route, e)\n-            )\n-        converters[parameter] = converter\n-        parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n+        while match:\n+            parts.append(re.escape(route[:match.start()]))\n+            route = route[match.end():]\n+            parameter = match.group('parameter')\n+            if not parameter.isidentifier():\n+                raise ImproperlyConfigured(\n+                    \"URL route '%s' uses parameter name %r which isn't a valid \"\n+                    \"Python identifier.\" % (original_route, parameter)\n+                )\n+            raw_converter = match.group('converter')\n+            if raw_converter is None:\n+                # If a converter isn't specified, the default is `str`.\n+                raw_converter = 'str'\n+            try:\n+                converter = get_converter(raw_converter)\n+            except KeyError as e:\n+                raise ImproperlyConfigured(\n+                    \"URL route '%s' uses invalid converter %s.\" % (original_route, e)\n+                )\n+            converters[parameter] = converter\n+            parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n+            match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n+        parts.append(re.escape(route))\n     if is_endpoint:\n         parts.append('$')\n     return ''.join(parts), converters\n", "occurrence": 2, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex ac39a99..85e5ffd 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -123,23 +123,23 @@ def _route_to_regex(route, is_endpoint=False):\n     converters = {}\n     while True:\n         match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n-        if not match:\n-            parts.append(re.escape(route))\n-            break\n-        parts.append(re.escape(route[:match.start()]))\n-        route = route[match.end():]\n-        parameter = match.group('parameter')\n-        if not parameter.isidentifier():\n-            raise ImproperlyConfigured(\"URL route '%s' uses parameter name %r which isn't a valid Python identifier.\" % (original_route, parameter))\n-        raw_converter = match.group('converter')\n-        if raw_converter is None:\n-            raw_converter = 'str'\n-        try:\n-            converter = get_converter(raw_converter)\n-        except KeyError as e:\n-            raise ImproperlyConfigured(\"URL route '%s' uses invalid converter %s.\" % (original_route, e))\n-        converters[parameter] = converter\n-        parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n+        while match:\n+            parts.append(re.escape(route[:match.start()]))\n+            route = route[match.end():]\n+            parameter = match.group('parameter')\n+            if not parameter.isidentifier():\n+                raise ImproperlyConfigured(\"URL route '%s' uses parameter name %r which isn't a valid Python identifier.\" % (original_route, parameter))\n+            raw_converter = match.group('converter')\n+            if raw_converter is None:\n+                raw_converter = 'str'\n+            try:\n+                converter = get_converter(raw_converter)\n+            except KeyError as e:\n+                raise ImproperlyConfigured(\"URL route '%s' uses invalid converter %s.\" % (original_route, e))\n+            converters[parameter] = converter\n+            parts.append('(?P<' + parameter + '>' + converter.regex + ')')\n+            match = _PATH_PARAMETER_COMPONENT_RE.search(route)\n+        parts.append(re.escape(route))\n     if is_endpoint:\n         parts.append('$')\n     return (''.join(parts), converters)\n", "normalized_occurrence": 2}
