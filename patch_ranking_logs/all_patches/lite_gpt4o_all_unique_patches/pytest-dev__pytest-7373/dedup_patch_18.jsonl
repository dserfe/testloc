{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7373", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 74f45dd..b878efe 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -18,16 +18,16 @@ from _pytest.store import StoreKey\n evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+def cached_eval(config: Config, expr: str, d: Dict[str, object], globals_key: str) -> Any:\n     default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n+    evalcache = config._store.setdefault(evalcache_key, default).setdefault(globals_key, {})\n     try:\n-        return evalcache[expr]\n+        return evalcache[globals_key][expr]\n     except KeyError:\n         import _pytest._code\n \n         exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n+        evalcache[globals_key][expr] = x = eval(exprcode, d)\n         return x\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 678113f..de7af09 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -13,15 +13,15 @@ from _pytest.config import Config\n from _pytest.nodes import Item\n from _pytest.store import StoreKey\n evalcache_key = StoreKey[Dict[str, Any]]()\n-def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n+def cached_eval(config: Config, expr: str, d: Dict[str, object], globals_key: str) -> Any:\n     default = {}\n-    evalcache = config._store.setdefault(evalcache_key, default)\n+    evalcache = config._store.setdefault(evalcache_key, default).setdefault(globals_key, {})\n     try:\n-        return evalcache[expr]\n+        return evalcache[globals_key][expr]\n     except KeyError:\n         import _pytest._code\n         exprcode = _pytest._code.compile(expr, mode='eval')\n-        evalcache[expr] = x = eval(exprcode, d)\n+        evalcache[globals_key][expr] = x = eval(exprcode, d)\n         return x\n class MarkEvaluator:\n     def __init__(self, item: Item, name: str) -> None:\n", "normalized_occurrence": 1}
