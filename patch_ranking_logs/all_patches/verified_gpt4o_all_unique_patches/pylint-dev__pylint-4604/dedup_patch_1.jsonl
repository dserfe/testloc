{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..281469d 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -518,7 +518,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n         \"\"\"Callback returning the deprecated modules.\"\"\"\n         return self.config.deprecated_modules\n \n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f\"type: {node.names[0][0]}\" in comment:\n+                    return True\n+        return False\n     def visit_import(self, node):\n         \"\"\"triggered when an import statement is seen\"\"\"\n         self._check_reimport(node)\n@@ -539,12 +546,19 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if isinstance(node.scope(), astroid.Module):\n                 self._record_import(node, imported_module)\n \n-            if imported_module is None:\n+            if imported_module is None or self._is_type_comment_used(node):\n                 continue\n \n             self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f\"type: {node.names[0][0]}\" in comment:\n+                    return True\n+        return False\n     def visit_importfrom(self, node):\n         \"\"\"triggered when a from statement is seen\"\"\"\n         basename = node.modname\n@@ -564,7 +578,7 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_position(node)\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n-        if imported_module is None:\n+        if imported_module is None or self._is_type_comment_used(node):\n             return\n         for name, _ in node.names:\n             if name != \"*\":\n@@ -572,7 +586,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             else:\n                 self._add_imported_module(node, imported_module.name)\n \n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        \"\"\"Check if the imported module is used in a type comment.\"\"\"\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f\"type: {node.names[0][0]}\" in comment:\n+                    return True\n+        return False\n     def leave_module(self, node):\n         # Check imports are grouped by category (standard, 3rd party, local)\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..39955bd 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -165,7 +165,13 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self.add_message('cyclic-import', args=' -> '.join(cycle))\n     def deprecated_modules(self):\n         return self.config.deprecated_modules\n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f'type: {node.names[0][0]}' in comment:\n+                    return True\n+        return False\n     def visit_import(self, node):\n         self._check_reimport(node)\n         self._check_import_as_rename(node)\n@@ -181,10 +187,16 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._check_position(node)\n             if isinstance(node.scope(), astroid.Module):\n                 self._record_import(node, imported_module)\n-            if imported_module is None:\n+            if imported_module is None or self._is_type_comment_used(node):\n                 continue\n             self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f'type: {node.names[0][0]}' in comment:\n+                    return True\n+        return False\n     def visit_importfrom(self, node):\n         basename = node.modname\n         imported_module = self._get_imported_module(node, basename)\n@@ -200,14 +212,20 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             self._check_position(node)\n         if isinstance(node.scope(), astroid.Module):\n             self._record_import(node, imported_module)\n-        if imported_module is None:\n+        if imported_module is None or self._is_type_comment_used(node):\n             return\n         for name, _ in node.names:\n             if name != '*':\n                 self._add_imported_module(node, f'{imported_module.name}.{name}')\n             else:\n                 self._add_imported_module(node, imported_module.name)\n-    @check_messages(*MSGS)\n+    def _is_type_comment_used(self, node):\n+        if isinstance(node.parent, astroid.Module):\n+            comments = node.parent.comment\n+            for comment in comments:\n+                if f'type: {node.names[0][0]}' in comment:\n+                    return True\n+        return False\n     def leave_module(self, node):\n         std_imports, ext_imports, loc_imports = self._check_imports_order(node)\n         met_import = set()\n", "normalized_occurrence": 1}
