{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..76503b1 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,16 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Select the variable and drop missing values from other levels\n+            selected = self.sel({variable_dim: k})\n+            # Only squeeze dimensions with actual missing values\n+            dims_to_drop = [name for name in selected.dims \n+                          if name != dim and \n+                          selected.sizes[name] == 1 and \n+                          any(selected[name].isnull())]\n+            if dims_to_drop:\n+                selected = selected.squeeze(dims_to_drop, drop=True)\n+            data_dict[k] = selected\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..3318244 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,7 +534,11 @@ class DataArray(AbstractArray, DataWithCoords):\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            selected = self.sel({variable_dim: k})\n+            dims_to_drop = [name for name in selected.dims if name != dim and selected.sizes[name] == 1 and any(selected[name].isnull())]\n+            if dims_to_drop:\n+                selected = selected.squeeze(dims_to_drop, drop=True)\n+            data_dict[k] = selected\n         return Dataset(data_dict)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n", "normalized_occurrence": 1}
