{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..4e5cc8e 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -451,14 +451,14 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n \n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n-        if arg.dimensions:\n+        if arg.dimensions or not isinstance(arg, InputArgument):\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n             return proto + \" = 0\"\n \n     def _call_arg(self, arg):\n-        if arg.dimensions:\n+        if arg.dimensions or not isinstance(arg, InputArgument):\n             t = arg.get_datatype('c')\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..542cc22 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -203,13 +203,13 @@ class CythonCodeWrapper(CodeWrapper):\n             return '%s %s' % (t, self._string_var(arg.name))\n     def _declare_arg(self, arg):\n         proto = self._prototype_arg(arg)\n-        if arg.dimensions:\n+        if arg.dimensions or not isinstance(arg, InputArgument):\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n             return proto + ' = 0'\n     def _call_arg(self, arg):\n-        if arg.dimensions:\n+        if arg.dimensions or not isinstance(arg, InputArgument):\n             t = arg.get_datatype('c')\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n", "normalized_occurrence": 1}
