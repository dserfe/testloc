{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 8faef3a..13a462f 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -276,6 +276,23 @@ class DenseMatrix(MatrixBase):\n         mat = [a*other for a in self._mat]\n         return self._new(self.rows, self.cols, mat, copy=False)\n \n+    def __matmul__(self, other):\n+        \"\"\"Matrix multiplication using the '@' operator (like NumPy)\"\"\"\n+        from sympy.matrices.matrices import MatrixBase\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_mul(other)\n+\n+    def __rmatmul__(self, other):\n+        \"\"\"Matrix multiplication using the '@' operator (like NumPy)\"\"\"\n+        from sympy.matrices.matrices import MatrixBase\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        # Make other a matrix if necessary\n+        from sympy.matrices import Matrix\n+        other = Matrix(other) if not isinstance(other, MatrixBase) else other\n+        return other._eval_matrix_mul(self)\n+\n     def _eval_tolist(self):\n         mat = list(self._mat)\n         cols = self.cols\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n+    def __matmul__(self, other):\n+        from sympy.matrices.matrices import MatrixBase\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        return self._eval_matrix_mul(other)\n+    def __rmatmul__(self, other):\n+        from sympy.matrices.matrices import MatrixBase\n+        if not isinstance(other, MatrixBase):\n+            raise ValueError(\"Scalar operands are not allowed, use '*' instead\")\n+        from sympy.matrices import Matrix\n+        other = Matrix(other) if not isinstance(other, MatrixBase) else other\n+        return other._eval_matrix_mul(self)", "normalized_occurrence": 1}
