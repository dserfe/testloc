{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13449", "model_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 01e5980..6e8ca6f 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -25,6 +25,8 @@ class FirstValue(Func):\n     window_compatible = True\n \n \n+from django.db.models import DecimalField\n+\n class LagLeadFunction(Func):\n     window_compatible = True\n \n@@ -46,8 +48,20 @@ class LagLeadFunction(Func):\n \n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n+        # If explicit output_field is provided, use that\n+        if 'output_field' in self.extra:\n+            return self.extra['output_field']\n+        # Otherwise use the first source's output_field\n         return sources[0].output_field\n \n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        # For DecimalField, cast the whole window expression instead of just LAG\n+        if isinstance(self._resolve_output_field(), DecimalField):\n+            extra_context['window_frame'] = True\n+            sql, params = super().as_sql(compiler, connection, **extra_context)\n+            return 'CAST(%s AS NUMERIC)' % sql, params\n+        return super().as_sql(compiler, connection, **extra_context)\n+\n \n class Lag(LagLeadFunction):\n     function = 'LAG'\n", "normalized_patch": "diff --git a/django/db/models/functions/window.py b/django/db/models/functions/window.py\nindex 88926d4..f06657f 100644\n--- a/django/db/models/functions/window.py\n+++ b/django/db/models/functions/window.py\n@@ -13,6 +13,7 @@ class FirstValue(Func):\n     arity = 1\n     function = 'FIRST_VALUE'\n     window_compatible = True\n+from django.db.models import DecimalField\n class LagLeadFunction(Func):\n     window_compatible = True\n     def __init__(self, expression, offset=1, default=None, **extra):\n@@ -26,7 +27,15 @@ class LagLeadFunction(Func):\n         super().__init__(*args, **extra)\n     def _resolve_output_field(self):\n         sources = self.get_source_expressions()\n+        if 'output_field' in self.extra:\n+            return self.extra['output_field']\n         return sources[0].output_field\n+    def as_sqlite(self, compiler, connection, **extra_context):\n+        if isinstance(self._resolve_output_field(), DecimalField):\n+            extra_context['window_frame'] = True\n+            sql, params = super().as_sql(compiler, connection, **extra_context)\n+            return ('CAST(%s AS NUMERIC)' % sql, params)\n+        return super().as_sql(compiler, connection, **extra_context)\n class Lag(LagLeadFunction):\n     function = 'LAG'\n class LastValue(Func):\n", "normalized_occurrence": 1}
