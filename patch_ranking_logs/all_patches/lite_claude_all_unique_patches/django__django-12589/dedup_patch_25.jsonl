{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..c0dc354 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -47,6 +47,7 @@ class SQLCompiler:\n         is for things that can't necessarily be done in __init__ because we\n         might not have all the pieces in place at that time.\n         \"\"\"\n+        from django.db.models import Subquery\n         self.setup_query()\n         order_by = self.get_order_by()\n         self.where, self.having = self.query.where.split_having()\n@@ -117,9 +118,13 @@ class SQLCompiler:\n             # by reference.\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            # If the expression is a Subquery annotation, add it directly\n+            if isinstance(expr, Subquery):\n+                expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             # Skip References to the select clause, as all expressions in the\n             # select clause are already part of the group by.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..93a2636 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -30,6 +30,7 @@ class SQLCompiler:\n         self.select, self.klass_info, self.annotation_col_map = self.get_select()\n         self.col_count = len(self.select)\n     def pre_sql_setup(self):\n+        from django.db.models import Subquery\n         self.setup_query()\n         order_by = self.get_order_by()\n         self.where, self.having = self.query.where.split_having()\n@@ -51,9 +52,12 @@ class SQLCompiler:\n         for expr, _, _ in select:\n             if expr in ref_sources:\n                 continue\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n+            if isinstance(expr, Subquery):\n+                expressions.append(expr)\n+            else:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n         for expr, (sql, params, is_ref) in order_by:\n             if not is_ref:\n                 expressions.extend(expr.get_group_by_cols())\n", "normalized_occurrence": 1}
