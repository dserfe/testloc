{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..842556e 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -333,22 +333,25 @@ class MathMLContentPrinter(MathMLPrinterBase):\n         return self._print_Integral(e)\n \n     def _print_Symbol(self, sym):\n-        ci = self.dom.createElement(self.mathml_tag(sym))\n+        x = self.dom.createElement('mi')\n+\n+        if style == 'bold':\n+            x.setAttribute('mathvariant', 'bold')\n \n         def join(items):\n             if len(items) > 1:\n-                mrow = self.dom.createElement('mml:mrow')\n+                mrow = self.dom.createElement('mrow')\n                 for i, item in enumerate(items):\n                     if i > 0:\n-                        mo = self.dom.createElement('mml:mo')\n+                        mo = self.dom.createElement('mo')\n                         mo.appendChild(self.dom.createTextNode(\" \"))\n                         mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mml:mi')\n+                    mi = self.dom.createElement('mi')\n                     mi.appendChild(self.dom.createTextNode(item))\n                     mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mml:mi')\n+                mi = self.dom.createElement('mi')\n                 mi.appendChild(self.dom.createTextNode(items[0]))\n                 return mi\n \n@@ -364,29 +367,29 @@ class MathMLContentPrinter(MathMLPrinterBase):\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n \n-        mname = self.dom.createElement('mml:mi')\n+        mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                ci.appendChild(self.dom.createTextNode(name))\n+                x.appendChild(self.dom.createTextNode(name))\n             else:\n-                msub = self.dom.createElement('mml:msub')\n+                msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n                 msub.appendChild(join(subs))\n-                ci.appendChild(msub)\n+                x.appendChild(msub)\n         else:\n             if len(subs) == 0:\n-                msup = self.dom.createElement('mml:msup')\n+                msup = self.dom.createElement('msup')\n                 msup.appendChild(mname)\n                 msup.appendChild(join(supers))\n-                ci.appendChild(msup)\n+                x.appendChild(msup)\n             else:\n-                msubsup = self.dom.createElement('mml:msubsup')\n+                msubsup = self.dom.createElement('msubsup')\n                 msubsup.appendChild(mname)\n                 msubsup.appendChild(join(subs))\n                 msubsup.appendChild(join(supers))\n-                ci.appendChild(msubsup)\n-        return ci\n+                x.appendChild(msubsup)\n+        return x\n \n     _print_MatrixSymbol = _print_Symbol\n     _print_RandomSymbol = _print_Symbol\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..4924084 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -202,21 +202,23 @@ class MathMLContentPrinter(MathMLPrinterBase):\n     def _print_Sum(self, e):\n         return self._print_Integral(e)\n     def _print_Symbol(self, sym):\n-        ci = self.dom.createElement(self.mathml_tag(sym))\n+        x = self.dom.createElement('mi')\n+        if style == 'bold':\n+            x.setAttribute('mathvariant', 'bold')\n         def join(items):\n             if len(items) > 1:\n-                mrow = self.dom.createElement('mml:mrow')\n+                mrow = self.dom.createElement('mrow')\n                 for i, item in enumerate(items):\n                     if i > 0:\n-                        mo = self.dom.createElement('mml:mo')\n+                        mo = self.dom.createElement('mo')\n                         mo.appendChild(self.dom.createTextNode(' '))\n                         mrow.appendChild(mo)\n-                    mi = self.dom.createElement('mml:mi')\n+                    mi = self.dom.createElement('mi')\n                     mi.appendChild(self.dom.createTextNode(item))\n                     mrow.appendChild(mi)\n                 return mrow\n             else:\n-                mi = self.dom.createElement('mml:mi')\n+                mi = self.dom.createElement('mi')\n                 mi.appendChild(self.dom.createTextNode(items[0]))\n                 return mi\n         def translate(s):\n@@ -228,28 +230,28 @@ class MathMLContentPrinter(MathMLPrinterBase):\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n         subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mml:mi')\n+        mname = self.dom.createElement('mi')\n         mname.appendChild(self.dom.createTextNode(name))\n         if len(supers) == 0:\n             if len(subs) == 0:\n-                ci.appendChild(self.dom.createTextNode(name))\n+                x.appendChild(self.dom.createTextNode(name))\n             else:\n-                msub = self.dom.createElement('mml:msub')\n+                msub = self.dom.createElement('msub')\n                 msub.appendChild(mname)\n                 msub.appendChild(join(subs))\n-                ci.appendChild(msub)\n+                x.appendChild(msub)\n         elif len(subs) == 0:\n-            msup = self.dom.createElement('mml:msup')\n+            msup = self.dom.createElement('msup')\n             msup.appendChild(mname)\n             msup.appendChild(join(supers))\n-            ci.appendChild(msup)\n+            x.appendChild(msup)\n         else:\n-            msubsup = self.dom.createElement('mml:msubsup')\n+            msubsup = self.dom.createElement('msubsup')\n             msubsup.appendChild(mname)\n             msubsup.appendChild(join(subs))\n             msubsup.appendChild(join(supers))\n-            ci.appendChild(msubsup)\n-        return ci\n+            x.appendChild(msubsup)\n+        return x\n     _print_MatrixSymbol = _print_Symbol\n     _print_RandomSymbol = _print_Symbol\n     def _print_Pow(self, e):\n", "normalized_occurrence": 1}
