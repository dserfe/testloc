{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7454", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex cf5467b..735a92d 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -11,7 +11,7 @@\n import re\n from collections import OrderedDict\n from typing import Any, Dict, Iterable\n-from typing import cast\n+from typing import cast, Any, Dict, OrderedDict\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -41,6 +41,25 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n     if domain != 'py':\n         return\n+\n+    annotations = app.env.temp_data.get('annotations', {})\n+    signature = cast(addnodes.desc_signature, contentnode.parent[0])\n+    if signature['module']:\n+        fullname = '.'.join([signature['module'], signature['fullname']])\n+    else:\n+        fullname = signature['fullname']\n+    if fullname not in annotations:\n+        return\n+\n+    if app.config.autodoc_typehints == 'signature':\n+        for child in contentnode.traverse(addnodes.desc_annotation):\n+            if child.astext() == 'None':\n+                ref_node = nodes.reference('', '', internal=False, refuri='https://docs.python.org/3/library/constants.html#None')\n+                ref_node += nodes.Text('None')\n+                child.replace_self(ref_node)\n+        return\n+    if domain != 'py':\n+        return\n     if app.config.autodoc_typehints != 'description':\n         return\n     if objtype == 'class' and app.config.autoclass_content not in ('init', 'both'):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex f356328..003e7b7 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,7 +1,7 @@\n import re\n from collections import OrderedDict\n from typing import Any, Dict, Iterable\n-from typing import cast\n+from typing import cast, Any, Dict, OrderedDict\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -21,6 +21,23 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+    if domain != 'py':\n+        return\n+    annotations = app.env.temp_data.get('annotations', {})\n+    signature = cast(addnodes.desc_signature, contentnode.parent[0])\n+    if signature['module']:\n+        fullname = '.'.join([signature['module'], signature['fullname']])\n+    else:\n+        fullname = signature['fullname']\n+    if fullname not in annotations:\n+        return\n+    if app.config.autodoc_typehints == 'signature':\n+        for child in contentnode.traverse(addnodes.desc_annotation):\n+            if child.astext() == 'None':\n+                ref_node = nodes.reference('', '', internal=False, refuri='https://docs.python.org/3/library/constants.html#None')\n+                ref_node += nodes.Text('None')\n+                child.replace_self(ref_node)\n+        return\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints != 'description':\n", "normalized_occurrence": 1}
