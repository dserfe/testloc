{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14365", "model_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 92431f5..368950b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -60,7 +60,7 @@ def _line_type(line, delimiter=None):\n     ValueError: Unrecognized QDP line...\n     \"\"\"\n     _decimal_re = r\"[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?\"\n-    _command_re = r\"READ [TS]ERR(\\s+[0-9]+)+\"\n+    _command_re = r\"(?i)READ [TS]ERR(\\s+[0-9]+)+\"\n \n     sep = delimiter\n     if delimiter is None:\n@@ -297,7 +297,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n                         continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+                    err_specs[command[1].upper()] = [int(c) for c in command[2:]]\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 78a945e..c7f001b 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -8,7 +8,7 @@ from astropy.utils.exceptions import AstropyUserWarning\n from . import basic, core\n def _line_type(line, delimiter=None):\n     _decimal_re = '[+-]?(\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][+-]?\\\\d+)?'\n-    _command_re = 'READ [TS]ERR(\\\\s+[0-9]+)+'\n+    _command_re = '(?i)READ [TS]ERR(\\\\s+[0-9]+)+'\n     sep = delimiter\n     if delimiter is None:\n         sep = '\\\\s+'\n@@ -112,7 +112,7 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n                     command = cline.strip().split()\n                     if len(command) < 3:\n                         continue\n-                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n+                    err_specs[command[1].upper()] = [int(c) for c in command[2:]]\n             if colnames is None:\n                 colnames = _interpret_err_lines(err_specs, ncol, names=input_colnames)\n             if current_rows is None:\n", "normalized_occurrence": 1}
