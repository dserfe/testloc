{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..af0de4b 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -138,7 +138,17 @@ class Piecewise(Function):\n             r = None\n \n         if r is None:\n-            return Basic.__new__(cls, *newargs, **options)\n+            # Ensure proper handling of polynomial checks under assumptions\n+            try:\n+                return Basic.__new__(cls, *newargs, **options)\n+            except PolynomialError as e:\n+                # Catch specific instance of PolynomialError and handle gracefully\n+                if any(isinstance(arg, Piecewise) for arg in newargs):\n+                    # Reconstruct without polynomial check (fallback handling)\n+                    return Basic.__new__(cls, *newargs, evaluate=False, **options)\n+                else:\n+                    # Re-raise if not related to Piecewise arguments\n+                    raise e\n         else:\n             return r\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..c33af38 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -55,7 +55,13 @@ class Piecewise(Function):\n         else:\n             r = None\n         if r is None:\n-            return Basic.__new__(cls, *newargs, **options)\n+            try:\n+                return Basic.__new__(cls, *newargs, **options)\n+            except PolynomialError as e:\n+                if any((isinstance(arg, Piecewise) for arg in newargs)):\n+                    return Basic.__new__(cls, *newargs, evaluate=False, **options)\n+                else:\n+                    raise e\n         else:\n             return r\n     @classmethod\n", "normalized_occurrence": 1}
