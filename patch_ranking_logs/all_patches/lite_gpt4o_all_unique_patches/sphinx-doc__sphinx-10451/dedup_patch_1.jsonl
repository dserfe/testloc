{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..0f0b77f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -124,7 +124,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            if name in ('*args', '**kwargs'):\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n     if 'return' in annotations and 'return' not in arguments:\n@@ -175,6 +178,16 @@ def augment_descriptions_with_types(\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n+        elif name in ('*args', '**kwargs') and name in has_description:\n+            # Ensure *args and **kwargs are not duplicated\n+            for field in list(node):\n+                field_name = field[0].astext()\n+                if field_name == 'param ' + name:\n+                    node.remove(field)\n+            field = nodes.field()\n+            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n     if 'return' in annotations:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..5b1a03f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -94,7 +94,10 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n         if not arg.get('param'):\n             field = nodes.field()\n             field += nodes.field_name('', 'param ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', ''))\n+            if name in ('*args', '**kwargs'):\n+                field += nodes.field_body('', nodes.paragraph('', annotation))\n+            else:\n+                field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n         annotation = annotations['return']\n@@ -133,6 +136,15 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             field += nodes.field_name('', 'type ' + name)\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n+        elif name in ('*args', '**kwargs') and name in has_description:\n+            for field in list(node):\n+                field_name = field[0].astext()\n+                if field_name == 'param ' + name:\n+                    node.remove(field)\n+            field = nodes.field()\n+            field += nodes.field_name('', 'param ' + name)\n+            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            node += field\n     if 'return' in annotations:\n         rtype = annotations['return']\n         if 'return' not in has_type and ('return' in has_description or (force_rtype and rtype != 'None')):\n", "normalized_occurrence": 1}
