{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..285c61f 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -352,10 +352,11 @@ class LogCaptureFixture:\n \n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n-        # restore log levels\n-        for logger_name, level in self._initial_logger_levels.items():\n+        # restore log levels and handler level\n+        for logger_name, (logger_level, handler_level) in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n-            logger.setLevel(level)\n+            logger.setLevel(logger_level)\n+            self.handler.setLevel(handler_level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n@@ -432,7 +433,7 @@ class LogCaptureFixture:\n         \"\"\"\n         logger_obj = logging.getLogger(logger)\n         # save the original log-level to restore it during teardown\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        self._initial_logger_levels.setdefault(logger, (logger_obj.level, self.handler.level))\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..50a410e 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -165,9 +165,10 @@ class LogCaptureFixture:\n         self._item = item\n         self._initial_logger_levels = {}\n     def _finalize(self) -> None:\n-        for logger_name, level in self._initial_logger_levels.items():\n+        for logger_name, (logger_level, handler_level) in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n-            logger.setLevel(level)\n+            logger.setLevel(logger_level)\n+            self.handler.setLevel(handler_level)\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n@@ -189,7 +190,7 @@ class LogCaptureFixture:\n         self.handler.reset()\n     def set_level(self, level: Union[int, str], logger: Optional[str]=None) -> None:\n         logger_obj = logging.getLogger(logger)\n-        self._initial_logger_levels.setdefault(logger, logger_obj.level)\n+        self._initial_logger_levels.setdefault(logger, (logger_obj.level, self.handler.level))\n         logger_obj.setLevel(level)\n         self.handler.setLevel(level)\n     @contextmanager\n", "normalized_occurrence": 1}
