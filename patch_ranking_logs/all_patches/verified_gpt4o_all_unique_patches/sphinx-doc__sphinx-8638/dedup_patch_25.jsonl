{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex f9408ce..6c4027b 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -211,7 +211,7 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                members[name] = Attribute(f\"{subject.__module__}.{subject.__qualname__}.{name}\", directly_defined, value)\n         except AttributeError:\n             continue\n \n@@ -276,9 +276,9 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n             unmangled = unmangle(subject, name)\n             if unmangled and unmangled not in members:\n                 if name in obj_dict:\n-                    members[unmangled] = ObjectMember(unmangled, value, class_=subject)\n+                    members[unmangled] = ObjectMember(f\"{subject.__module__}.{subject.__qualname__}.{unmangled}\", value, class_=subject)\n                 else:\n-                    members[unmangled] = ObjectMember(unmangled, value)\n+                    members[unmangled] = ObjectMember(f\"{subject.__module__}.{subject.__qualname__}.{unmangled}\", value)\n         except AttributeError:\n             continue\n \n@@ -308,4 +308,4 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n     except AttributeError:\n         pass\n \n-    return members\n+    return members\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex bf1ee33..e6755cc 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -138,7 +138,7 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n             directly_defined = name in obj_dict\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                members[name] = Attribute(f'{subject.__module__}.{subject.__qualname__}.{name}', directly_defined, value)\n         except AttributeError:\n             continue\n     for i, cls in enumerate(getmro(subject)):\n@@ -182,9 +182,9 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n             unmangled = unmangle(subject, name)\n             if unmangled and unmangled not in members:\n                 if name in obj_dict:\n-                    members[unmangled] = ObjectMember(unmangled, value, class_=subject)\n+                    members[unmangled] = ObjectMember(f'{subject.__module__}.{subject.__qualname__}.{unmangled}', value, class_=subject)\n                 else:\n-                    members[unmangled] = ObjectMember(unmangled, value)\n+                    members[unmangled] = ObjectMember(f'{subject.__module__}.{subject.__qualname__}.{unmangled}', value)\n         except AttributeError:\n             continue\n     try:\n", "normalized_occurrence": 1}
