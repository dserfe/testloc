{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..ca73ea7 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -860,7 +860,15 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             raise ValueError(\"subs accepts either 1 or 2 arguments\")\n \n+        from sympy.core.numbers import NaN\n+\n         sequence = list(sequence)\n+        # Check if any substitution leads to division by zero\n+        for old, new in sequence:\n+            if self.has(old):\n+                test_expr = self.subs(old, new)\n+                if test_expr.has(S.ComplexInfinity, S.NaN):\n+                    return S.NaN\n         for i in range(len(sequence)):\n             s = list(sequence[i])\n             for j, si in enumerate(s):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..7527c92 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -277,7 +277,13 @@ class Basic(with_metaclass(ManagedProperties)):\n             sequence = [args]\n         else:\n             raise ValueError('subs accepts either 1 or 2 arguments')\n+        from sympy.core.numbers import NaN\n         sequence = list(sequence)\n+        for old, new in sequence:\n+            if self.has(old):\n+                test_expr = self.subs(old, new)\n+                if test_expr.has(S.ComplexInfinity, S.NaN):\n+                    return S.NaN\n         for i in range(len(sequence)):\n             s = list(sequence[i])\n             for j, si in enumerate(s):\n", "normalized_occurrence": 1}
