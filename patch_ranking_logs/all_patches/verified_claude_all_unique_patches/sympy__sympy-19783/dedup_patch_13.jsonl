{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19783", "model_patch": "diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py\nindex 0107229..f387ec1 100644\n--- a/sympy/physics/quantum/dagger.py\n+++ b/sympy/physics/quantum/dagger.py\n@@ -77,13 +77,16 @@ class Dagger(adjoint):\n     \"\"\"\n \n     def __new__(cls, arg):\n+        obj = None\n         if hasattr(arg, 'adjoint'):\n             obj = arg.adjoint()\n         elif hasattr(arg, 'conjugate') and hasattr(arg, 'transpose'):\n             obj = arg.conjugate().transpose()\n         if obj is not None:\n             return obj\n-        return Expr.__new__(cls, arg)\n+        if isinstance(arg, Operator):\n+            return Expr.__new__(cls, arg)\n+        return Mul(cls(Operator(arg)), 1)\n \n adjoint.__name__ = \"Dagger\"\n-adjoint._sympyrepr = lambda a, b: \"Dagger(%s)\" % b._print(a.args[0])\n+adjoint._sympyrepr = lambda a, b: \"Dagger(%s)\" % b._print(a.args[0])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/dagger.py b/sympy/physics/quantum/dagger.py\nindex 7733787..aae449c 100644\n--- a/sympy/physics/quantum/dagger.py\n+++ b/sympy/physics/quantum/dagger.py\n@@ -4,12 +4,15 @@ from sympy.functions.elementary.complexes import adjoint\n __all__ = ['Dagger']\n class Dagger(adjoint):\n     def __new__(cls, arg):\n+        obj = None\n         if hasattr(arg, 'adjoint'):\n             obj = arg.adjoint()\n         elif hasattr(arg, 'conjugate') and hasattr(arg, 'transpose'):\n             obj = arg.conjugate().transpose()\n         if obj is not None:\n             return obj\n-        return Expr.__new__(cls, arg)\n+        if isinstance(arg, Operator):\n+            return Expr.__new__(cls, arg)\n+        return Mul(cls(Operator(arg)), 1)\n adjoint.__name__ = 'Dagger'\n adjoint._sympyrepr = lambda a, b: 'Dagger(%s)' % b._print(a.args[0])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
