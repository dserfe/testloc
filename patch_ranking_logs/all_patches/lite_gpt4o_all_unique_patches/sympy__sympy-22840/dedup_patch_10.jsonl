{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..2e0c59b 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -823,11 +823,23 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n \n     # Postprocess the expressions to return the expressions to canonical form.\n     exprs = copy\n+    # Handle matrix elements individually for MatrixSymbol\n+    new_replacements = []\n+    for sym, subtree in replacements:\n+        if isinstance(sym, MatrixSymbol):\n+            for i in range(sym.shape[0]):\n+                for j in range(sym.shape[1]):\n+                    elem_sym = sym[i, j]\n+                    elem_subtree = subtree[i, j]\n+                    new_replacements.append((elem_sym, elem_subtree))\n+        else:\n+            new_replacements.append((sym, subtree))\n+    replacements = new_replacements\n+\n     for i, (sym, subtree) in enumerate(replacements):\n         subtree = postprocess_for_cse(subtree, optimizations)\n         replacements[i] = (sym, subtree)\n-    reduced_exprs = [postprocess_for_cse(e, optimizations)\n-                     for e in reduced_exprs]\n+    reduced_exprs = [postprocess_for_cse(e, optimizations) for e in reduced_exprs]\n \n     # Get the matrices back\n     for i, e in enumerate(exprs):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..579a1d6 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -333,6 +333,17 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n     opt_subs = opt_cse(reduced_exprs, order)\n     replacements, reduced_exprs = tree_cse(reduced_exprs, symbols, opt_subs, order, ignore)\n     exprs = copy\n+    new_replacements = []\n+    for sym, subtree in replacements:\n+        if isinstance(sym, MatrixSymbol):\n+            for i in range(sym.shape[0]):\n+                for j in range(sym.shape[1]):\n+                    elem_sym = sym[i, j]\n+                    elem_subtree = subtree[i, j]\n+                    new_replacements.append((elem_sym, elem_subtree))\n+        else:\n+            new_replacements.append((sym, subtree))\n+    replacements = new_replacements\n     for i, (sym, subtree) in enumerate(replacements):\n         subtree = postprocess_for_cse(subtree, optimizations)\n         replacements[i] = (sym, subtree)\n", "normalized_occurrence": 1}
