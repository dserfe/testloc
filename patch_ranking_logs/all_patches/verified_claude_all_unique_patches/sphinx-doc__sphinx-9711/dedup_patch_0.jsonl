{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9711", "model_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 6ac780b..0666d9a 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -39,6 +39,8 @@ class Extension:\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n \n \n+from packaging.version import parse as parse_version\n+\n def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n     \"\"\"Verify the required Sphinx extensions are loaded.\"\"\"\n     if config.needs_extensions is None:\n@@ -51,7 +53,13 @@ def verify_needs_extensions(app: \"Sphinx\", config: Config) -> None:\n                               'but it is not loaded.'), extname)\n             continue\n \n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version':\n+            raise VersionRequirementError(__('This project needs the extension %s at least in '\n+                                             'version %s and therefore cannot be built with '\n+                                             'the loaded version (%s).') %\n+                                          (extname, reqversion, extension.version))\n+        \n+        if parse_version(reqversion) > parse_version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in '\n                                              'version %s and therefore cannot be built with '\n                                              'the loaded version (%s).') %\n@@ -65,4 +73,4 @@ def setup(app: \"Sphinx\") -> Dict[str, Any]:\n         'version': 'builtin',\n         'parallel_read_safe': True,\n         'parallel_write_safe': True,\n-    }\n+    }\n", "occurrence": 5, "normalized_patch": "diff --git a/sphinx/extension.py b/sphinx/extension.py\nindex 41afac8..50aedf2 100644\n--- a/sphinx/extension.py\n+++ b/sphinx/extension.py\n@@ -14,6 +14,7 @@ class Extension:\n         self.version = kwargs.pop('version', 'unknown version')\n         self.parallel_read_safe = kwargs.pop('parallel_read_safe', None)\n         self.parallel_write_safe = kwargs.pop('parallel_write_safe', True)\n+from packaging.version import parse as parse_version\n def verify_needs_extensions(app: 'Sphinx', config: Config) -> None:\n     if config.needs_extensions is None:\n         return\n@@ -22,7 +23,9 @@ def verify_needs_extensions(app: 'Sphinx', config: Config) -> None:\n         if extension is None:\n             logger.warning(__('The %s extension is required by needs_extensions settings, but it is not loaded.'), extname)\n             continue\n-        if extension.version == 'unknown version' or reqversion > extension.version:\n+        if extension.version == 'unknown version':\n+            raise VersionRequirementError(__('This project needs the extension %s at least in version %s and therefore cannot be built with the loaded version (%s).') % (extname, reqversion, extension.version))\n+        if parse_version(reqversion) > parse_version(extension.version):\n             raise VersionRequirementError(__('This project needs the extension %s at least in version %s and therefore cannot be built with the loaded version (%s).') % (extname, reqversion, extension.version))\n def setup(app: 'Sphinx') -> Dict[str, Any]:\n     app.connect('config-inited', verify_needs_extensions, priority=800)\n", "normalized_occurrence": 5}
