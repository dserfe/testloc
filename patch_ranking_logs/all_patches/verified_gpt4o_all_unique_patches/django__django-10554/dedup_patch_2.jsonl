{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..110d670 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -437,15 +437,19 @@ class SQLCompiler:\n                     # Wrap in a subquery if wrapping in parentheses isn't\n                     # supported.\n                     if not features.supports_parentheses_in_compound:\n-                        part_sql = 'SELECT * FROM ({})'.format(part_sql)\n-                    # Add parentheses when combining with compound query if not\n-                    # already added for all compound queries.\n-                    elif not features.supports_slicing_ordering_in_compound:\n+                        # Ensure the order by columns are included in the select list for the UNION query\n+                        columns_to_add = [\n+                            expr for expr, (sql, params, is_ref) in self.get_order_by()\n+                            if sql not in part_sql\n+                        ]\n+                        select_sql = ', '.join(\n+                            [col[1] for col in select] + [col[1] for col in columns_to_add]\n+                        )\n+                        part_sql = 'SELECT {} FROM ({})'.format(select_sql, part_sql)\n+                    else:\n                         part_sql = '({})'.format(part_sql)\n                 parts += ((part_sql, part_args),)\n             except EmptyResultSet:\n-                # Omit the empty queryset with UNION and with DIFFERENCE if the\n-                # first queryset is nonempty.\n                 if combinator == 'union' or (combinator == 'difference' and parts):\n                     continue\n                 raise\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..e12ca38 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -246,8 +246,10 @@ class SQLCompiler:\n                 part_sql, part_args = compiler.as_sql()\n                 if compiler.query.combinator:\n                     if not features.supports_parentheses_in_compound:\n-                        part_sql = 'SELECT * FROM ({})'.format(part_sql)\n-                    elif not features.supports_slicing_ordering_in_compound:\n+                        columns_to_add = [expr for expr, (sql, params, is_ref) in self.get_order_by() if sql not in part_sql]\n+                        select_sql = ', '.join([col[1] for col in select] + [col[1] for col in columns_to_add])\n+                        part_sql = 'SELECT {} FROM ({})'.format(select_sql, part_sql)\n+                    else:\n                         part_sql = '({})'.format(part_sql)\n                 parts += ((part_sql, part_args),)\n             except EmptyResultSet:\n", "normalized_occurrence": 1}
