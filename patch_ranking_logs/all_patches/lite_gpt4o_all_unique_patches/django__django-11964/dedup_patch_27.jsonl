{"model_name_or_path": "agentless", "instance_id": "django__django-11964", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 6957452..9e25041 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -786,7 +786,10 @@ class Field(RegisterLookupMixin):\n \n     def pre_save(self, model_instance, add):\n         \"\"\"Return field's value just before saving.\"\"\"\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, Enum):\n+            return value.value\n+        return value\n \n     def get_prep_value(self, value):\n         \"\"\"Perform preliminary non-db specific value checks and conversions.\"\"\"\n@@ -1008,6 +1011,8 @@ class CharField(Field):\n         return \"CharField\"\n \n     def to_python(self, value):\n+        if isinstance(value, Enum):\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -1756,6 +1761,8 @@ class IntegerField(Field):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        if isinstance(value, Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -1769,6 +1776,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex e3867cb..afb360a 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -354,7 +354,10 @@ class Field(RegisterLookupMixin):\n     def get_internal_type(self):\n         return self.__class__.__name__\n     def pre_save(self, model_instance, add):\n-        return getattr(model_instance, self.attname)\n+        value = getattr(model_instance, self.attname)\n+        if isinstance(value, Enum):\n+            return value.value\n+        return value\n     def get_prep_value(self, value):\n         if isinstance(value, Promise):\n             value = value._proxy____cast()\n@@ -485,6 +488,8 @@ class CharField(Field):\n     def get_internal_type(self):\n         return 'CharField'\n     def to_python(self, value):\n+        if isinstance(value, Enum):\n+            return value.value\n         if isinstance(value, str) or value is None:\n             return value\n         return str(value)\n@@ -883,6 +888,8 @@ class IntegerField(Field):\n         value = super().get_prep_value(value)\n         if value is None:\n             return None\n+        if isinstance(value, Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError) as e:\n@@ -892,6 +899,8 @@ class IntegerField(Field):\n     def to_python(self, value):\n         if value is None:\n             return value\n+        if isinstance(value, Enum):\n+            return value.value\n         try:\n             return int(value)\n         except (TypeError, ValueError):\n", "normalized_occurrence": 1}
