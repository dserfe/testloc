{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..75738a5 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -971,6 +971,17 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     ValueError\n         If the parameter's value violates the given bounds.\n     \"\"\"\n+    import numbers\n+\n+    # Convert target_type to tuple to handle multiple types\n+    if not isinstance(target_type, (tuple, list)):\n+        target_type = (target_type,)\n+    \n+    # Special handling for int/float types\n+    if int in target_type:\n+        target_type = target_type + (numbers.Integral,)\n+    if float in target_type:\n+        target_type = target_type + (numbers.Real,)\n \n     if not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'\n@@ -980,4 +991,4 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..60533c3 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,6 +281,13 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n+    import numbers\n+    if not isinstance(target_type, (tuple, list)):\n+        target_type = (target_type,)\n+    if int in target_type:\n+        target_type = target_type + (numbers.Integral,)\n+    if float in target_type:\n+        target_type = target_type + (numbers.Real,)\n     if not isinstance(x, target_type):\n         raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n", "normalized_occurrence": 1}
