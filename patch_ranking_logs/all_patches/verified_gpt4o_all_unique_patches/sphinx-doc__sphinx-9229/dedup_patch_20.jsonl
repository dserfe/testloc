{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9229", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 8cd9189..dc6e92b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -549,6 +549,14 @@ class Documenter:\n             # etc. don't support a prepended module name\n             self.add_line('   :module: %s' % self.modname, sourcename)\n \n+        # Handle type alias documentation\n+        if self.objtype == 'alias' and self.doc_as_attr:\n+            docstring = self.get_doc()\n+            if docstring:\n+                for line in docstring:\n+                    for subline in line:\n+                        self.add_line('   %s' % subline, sourcename)\n+\n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n         \"\"\"Decode and return lines of the docstring(s) for the object.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7792226..3ecf04a 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -283,6 +283,12 @@ class Documenter:\n             self.add_line('   :noindex:', sourcename)\n         if self.objpath:\n             self.add_line('   :module: %s' % self.modname, sourcename)\n+        if self.objtype == 'alias' and self.doc_as_attr:\n+            docstring = self.get_doc()\n+            if docstring:\n+                for line in docstring:\n+                    for subline in line:\n+                        self.add_line('   %s' % subline, sourcename)\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n         if ignore is not None:\n             warnings.warn(\"The 'ignore' argument to autodoc.%s.get_doc() is deprecated.\" % self.__class__.__name__, RemovedInSphinx50Warning, stacklevel=2)\n", "normalized_occurrence": 1}
