{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..e9f1d8e 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -336,6 +336,9 @@ class sin(TrigonometricFunction):\n                     return cls(pi_coeff*S.Pi)\n                 return None\n \n+        if arg.is_complex:\n+            return Abs(sin(arg))\n+\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n@@ -653,6 +656,9 @@ class cos(TrigonometricFunction):\n                     return sign_cos*sqrt( (1 + nval)/2 )\n             return None\n \n+        if arg.is_complex:\n+            return Abs(sin(arg))\n+\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n@@ -1077,6 +1083,9 @@ class tan(TrigonometricFunction):\n                 if narg != arg:\n                     return cls(narg)\n \n+        if arg.is_complex:\n+            return Abs(sin(arg))\n+\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..8cf6532 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -187,6 +187,8 @@ class sin(TrigonometricFunction):\n                 if pi_coeff * S.Pi != arg:\n                     return cls(pi_coeff * S.Pi)\n                 return None\n+        if arg.is_complex:\n+            return Abs(sin(arg))\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n@@ -379,6 +381,8 @@ class cos(TrigonometricFunction):\n                     sign_cos = (-1) ** ((-1 if x < 0 else 1) * int(abs(x)))\n                     return sign_cos * sqrt((1 + nval) / 2)\n             return None\n+        if arg.is_complex:\n+            return Abs(sin(arg))\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n@@ -663,6 +667,8 @@ class tan(TrigonometricFunction):\n                     return sresult / cresult\n                 if narg != arg:\n                     return cls(narg)\n+        if arg.is_complex:\n+            return Abs(sin(arg))\n         if arg.is_Add:\n             x, m = _peeloff_pi(arg)\n             if m:\n", "normalized_occurrence": 1}
