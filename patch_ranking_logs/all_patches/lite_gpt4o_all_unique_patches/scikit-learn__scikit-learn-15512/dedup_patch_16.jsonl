{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15512", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 0511594..78bda68 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -204,7 +204,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n \n-    if K > 0:\n+    if K > 0 and not unconverged:\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)  # Identify clusters\n         # Refine the final set of exemplars and clusters and return results\n@@ -223,7 +223,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n         warnings.warn(\"Affinity propagation did not converge, this model \"\n                       \"will not have any cluster centers.\", ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n-        cluster_centers_indices = []\n+        cluster_centers_indices = np.array([], dtype=int)\n \n     if return_n_iter:\n         return cluster_centers_indices, labels, it + 1\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex b441de5..e31f680 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -73,7 +73,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n             print('Did not converge')\n     I = np.flatnonzero(E)\n     K = I.size\n-    if K > 0:\n+    if K > 0 and (not unconverged):\n         c = np.argmax(S[:, I], axis=1)\n         c[I] = np.arange(K)\n         for k in range(K):\n@@ -88,7 +88,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         warnings.warn('Affinity propagation did not converge, this model will not have any cluster centers.', ConvergenceWarning)\n         labels = np.array([-1] * n_samples)\n-        cluster_centers_indices = []\n+        cluster_centers_indices = np.array([], dtype=int)\n     if return_n_iter:\n         return (cluster_centers_indices, labels, it + 1)\n     else:\n", "normalized_occurrence": 1}
