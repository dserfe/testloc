{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..b6f22c1 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,7 +175,10 @@ class UnitSystem(_QuantityMapper):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                # Convert dimensions to their base units before comparison\n+                dim_base = self.get_dimension_system().get_dimensional_expr(dim)\n+                addend_dim_base = self.get_dimension_system().get_dimensional_expr(addend_dim)\n+                if dim_base != addend_dim_base:\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n@@ -202,4 +205,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 212532e..c7e0a91 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -104,7 +104,9 @@ class UnitSystem(_QuantityMapper):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                dim_base = self.get_dimension_system().get_dimensional_expr(dim)\n+                addend_dim_base = self.get_dimension_system().get_dimensional_expr(addend_dim)\n+                if dim_base != addend_dim_base:\n                     raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n                 factor += addend_factor\n             return (factor, dim)\n", "normalized_occurrence": 1}
