{"model_name_or_path": "agentless", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..385b8d9 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -368,7 +368,8 @@ class HTTPAdapter(BaseAdapter):\n         :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n         :param kwargs: The keyword arguments from the call to send().\n         \"\"\"\n-        pass\n+        if request.headers and self.proxy_headers:\n+            request.headers.update(self.proxy_headers)\n \n     def proxy_headers(self, proxy):\n         \"\"\"Returns a dictionary of the headers to add to any request sent\n@@ -392,7 +393,7 @@ class HTTPAdapter(BaseAdapter):\n \n         return headers\n \n-    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n+    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None, proxy_headers=None):\n         \"\"\"Sends PreparedRequest object. Returns Response object.\n \n         :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..f4e301c 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -152,14 +152,15 @@ class HTTPAdapter(BaseAdapter):\n             url = urldefragauth(request.url)\n         return url\n     def add_headers(self, request, **kwargs):\n-        pass\n+        if request.headers and self.proxy_headers:\n+            request.headers.update(self.proxy_headers)\n     def proxy_headers(self, proxy):\n         headers = {}\n         username, password = get_auth_from_url(proxy)\n         if username:\n             headers['Proxy-Authorization'] = _basic_auth_str(username, password)\n         return headers\n-    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n+    def send(self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None, proxy_headers=None):\n         try:\n             conn = self.get_connection(request.url, proxies)\n         except LocationValueError as e:\n", "normalized_occurrence": 1}
