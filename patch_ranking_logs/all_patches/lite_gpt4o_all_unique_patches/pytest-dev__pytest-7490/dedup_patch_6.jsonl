{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7490", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1316da9..37f694e 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -276,15 +276,15 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n         rep.outcome = \"skipped\"\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n+    elif xfailed:\n+        if call.excinfo and rep.when == \"call\":\n             raises = xfailed.raises\n             if raises is not None and not isinstance(call.excinfo.value, raises):\n                 rep.outcome = \"failed\"\n             else:\n                 rep.outcome = \"skipped\"\n                 rep.wasxfail = xfailed.reason\n-        elif call.when == \"call\":\n+        elif rep.when == \"call\":\n             if xfailed.strict:\n                 rep.outcome = \"failed\"\n                 rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n@@ -312,4 +312,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex d85ae4c..f2b6293 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -154,15 +154,15 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n         rep.outcome = 'skipped'\n-    elif not rep.skipped and xfailed:\n-        if call.excinfo:\n+    elif xfailed:\n+        if call.excinfo and rep.when == 'call':\n             raises = xfailed.raises\n             if raises is not None and (not isinstance(call.excinfo.value, raises)):\n                 rep.outcome = 'failed'\n             else:\n                 rep.outcome = 'skipped'\n                 rep.wasxfail = xfailed.reason\n-        elif call.when == 'call':\n+        elif rep.when == 'call':\n             if xfailed.strict:\n                 rep.outcome = 'failed'\n                 rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n", "normalized_occurrence": 1}
