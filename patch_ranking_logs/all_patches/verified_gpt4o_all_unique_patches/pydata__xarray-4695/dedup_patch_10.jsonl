{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 81d2785..49f34fe 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -196,7 +196,9 @@ class _LocIndexer:\n             # expand the indexer so we can handle Ellipsis\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n             key = dict(zip(self.data_array.dims, labels))\n-        return self.data_array.sel(**key)\n+        # Ensure that 'method' is not interpreted as a fill method\n+        key = {k: v for k, v in key.items() if k != 'method'}\n+        return self.data_array.sel(**key, method=None)\n \n     def __setitem__(self, key, value) -> None:\n         if not utils.is_dict_like(key):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4be0f90..f7e81df 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -95,7 +95,8 @@ class _LocIndexer:\n         if not utils.is_dict_like(key):\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n             key = dict(zip(self.data_array.dims, labels))\n-        return self.data_array.sel(**key)\n+        key = {k: v for k, v in key.items() if k != 'method'}\n+        return self.data_array.sel(**key, method=None)\n     def __setitem__(self, key, value) -> None:\n         if not utils.is_dict_like(key):\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n", "normalized_occurrence": 1}
