{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..9f472b0 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -725,8 +725,11 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n-                argrep = self._argrepr(arg)\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n+                if isinstance(arg, MatrixSymbol):\n+                    argrep = arg.name\n+                else:\n+                    argrep = self._argrepr(arg)\n \n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n@@ -745,11 +748,13 @@ class _EvaluatorPrinter(object):\n \n     def _subexpr(self, expr, dummies_dict):\n         from sympy.matrices import DeferredVector\n-        from sympy import sympify\n+        from sympy import sympify, MatrixSymbol\n \n         try:\n             expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n+            if isinstance(expr, MatrixSymbol):\n+                expr = expr.xreplace(dummies_dict)\n             if isinstance(expr, DeferredVector):\n                 pass\n             elif isinstance(expr, dict):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..93651de 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -294,8 +294,11 @@ class _EvaluatorPrinter(object):\n                 argstrs.append(nested_argstrs)\n             elif isinstance(arg, DeferredVector):\n                 argstrs.append(str(arg))\n-            elif isinstance(arg, Symbol):\n-                argrep = self._argrepr(arg)\n+            elif isinstance(arg, (Symbol, MatrixSymbol)):\n+                if isinstance(arg, MatrixSymbol):\n+                    argrep = arg.name\n+                else:\n+                    argrep = self._argrepr(arg)\n                 if dummify or not self._is_safe_ident(argrep):\n                     dummy = Dummy()\n                     argstrs.append(self._argrepr(dummy))\n@@ -311,10 +314,12 @@ class _EvaluatorPrinter(object):\n         return (argstrs, expr)\n     def _subexpr(self, expr, dummies_dict):\n         from sympy.matrices import DeferredVector\n-        from sympy import sympify\n+        from sympy import sympify, MatrixSymbol\n         try:\n             expr = sympify(expr).xreplace(dummies_dict)\n         except Exception:\n+            if isinstance(expr, MatrixSymbol):\n+                expr = expr.xreplace(dummies_dict)\n             if isinstance(expr, DeferredVector):\n                 pass\n             elif isinstance(expr, dict):\n", "normalized_occurrence": 1}
