{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..fe55fad 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -257,7 +257,14 @@ class TensorProduct(Expr):\n         else:\n             return self\n \n-    def _eval_trace(self, **kwargs):\n+    def _eval_power(self, exp):\n+        if isinstance(exp, Integer) and exp > 0:\n+            result = TensorProduct(*self.args)\n+            for _ in range(1, exp):\n+                result = tensor_product_simp(result * TensorProduct(*self.args))\n+            return result\n+        else:\n+            return super()._eval_power(exp)\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n \n@@ -382,7 +389,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +401,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..e2c17b6 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -124,7 +124,14 @@ class TensorProduct(Expr):\n             return Add(*add_args)\n         else:\n             return self\n-    def _eval_trace(self, **kwargs):\n+    def _eval_power(self, exp):\n+        if isinstance(exp, Integer) and exp > 0:\n+            result = TensorProduct(*self.args)\n+            for _ in range(1, exp):\n+                result = tensor_product_simp(result * TensorProduct(*self.args))\n+            return result\n+        else:\n+            return super()._eval_power(exp)\n         indices = kwargs.get('indices', None)\n         exp = tensor_product_simp(self)\n         if indices is None or len(indices) == 0:\n@@ -161,7 +168,11 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base_simp = tensor_product_simp(e.base)\n+        if isinstance(base_simp, TensorProduct):\n+            return TensorProduct(*[arg ** e.exp for arg in base_simp.args])\n+        else:\n+            return base_simp ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
