{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..e4679d9 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -13,10 +13,10 @@ class classonlymethod(classmethod):\n def _update_method_wrapper(_wrapper, decorator):\n     # _multi_decorate()'s bound_method isn't available in this scope. Cheat by\n     # using it on a dummy function.\n-    @decorator\n-    def dummy(*args, **kwargs):\n-        pass\n-    update_wrapper(_wrapper, dummy)\n+    # Pass the wrapper itself as the first arg to the decorator, so that if it\n+    # uses functools.wraps, the attributes will be copied from the wrapper.\n+    wrapped = decorator(_wrapper)\n+    update_wrapper(_wrapper, wrapped)\n \n \n def _multi_decorate(decorators, method):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..4273172 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -5,10 +5,8 @@ class classonlymethod(classmethod):\n             raise AttributeError('This method is available only on the class, not on instances.')\n         return super().__get__(instance, cls)\n def _update_method_wrapper(_wrapper, decorator):\n-    @decorator\n-    def dummy(*args, **kwargs):\n-        pass\n-    update_wrapper(_wrapper, dummy)\n+    wrapped = decorator(_wrapper)\n+    update_wrapper(_wrapper, wrapped)\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n", "normalized_occurrence": 1}
