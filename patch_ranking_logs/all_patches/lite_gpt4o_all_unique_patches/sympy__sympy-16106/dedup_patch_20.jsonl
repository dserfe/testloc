{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16106", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 59074b8..7d4075d 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -436,6 +436,15 @@ class MathMLContentPrinter(MathMLPrinterBase):\n         x.appendChild(self._print(e.expr))\n         return x\n \n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement(self.mathml_tag(e))\n+        base = e.base\n+        indices = e.indices\n+        x.appendChild(self._print(base))\n+        for index in indices:\n+            x.appendChild(self._print(index))\n+        return x\n+\n     def _print_Function(self, e):\n         x = self.dom.createElement(\"apply\")\n         x.appendChild(self.dom.createElement(self.mathml_tag(e)))\n@@ -1017,6 +1026,17 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         mrow.appendChild(brac)\n         return mrow\n \n+    def _print_Indexed(self, e):\n+        mrow = self.dom.createElement('mrow')\n+        mi = self.dom.createElement('mi')\n+        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e.base)))\n+        mrow.appendChild(mi)\n+        mfenced = self.dom.createElement('mfenced')\n+        for index in e.indices:\n+            mfenced.appendChild(self._print(index))\n+        mrow.appendChild(mfenced)\n+        return mrow\n+\n     def _print_Tuple(self, e):\n         mrow = self.dom.createElement('mrow')\n         x = self.dom.createElement('mfenced')\n", "occurrence": 1, "normalized_patch": "--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n+    def _print_Indexed(self, e):\n+        x = self.dom.createElement(self.mathml_tag(e))\n+        base = e.base\n+        indices = e.indices\n+        x.appendChild(self._print(base))\n+        for index in indices:\n+            x.appendChild(self._print(index))\n+        return x\n+    def _print_Indexed(self, e):\n+        mrow = self.dom.createElement('mrow')\n+        mi = self.dom.createElement('mi')\n+        mi.appendChild(self.dom.createTextNode(self.mathml_tag(e.base)))\n+        mrow.appendChild(mi)\n+        mfenced = self.dom.createElement('mfenced')\n+        for index in e.indices:\n+            mfenced.appendChild(self._print(index))\n+        mrow.appendChild(mfenced)\n+        return mrow", "normalized_occurrence": 1}
