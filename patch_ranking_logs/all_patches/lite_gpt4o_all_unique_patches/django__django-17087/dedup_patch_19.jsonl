{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..d1d5692 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -72,7 +72,10 @@ class MigrationAutodetector:\n         elif isinstance(obj, type):\n             # If this is a type that implements 'deconstruct' as an instance method,\n             # avoid treating this as being deconstructible itself - see #22951\n-            return obj\n+            if hasattr(obj, '__module__') and hasattr(obj, '__qualname__'):\n+                return f\"{obj.__module__}.{obj.__qualname__}\"\n+            else:\n+                return obj\n         elif hasattr(obj, \"deconstruct\"):\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n@@ -85,7 +88,10 @@ class MigrationAutodetector:\n                 {key: self.deep_deconstruct(value) for key, value in kwargs.items()},\n             )\n         else:\n-            return obj\n+            if hasattr(obj, '__module__') and hasattr(obj, '__qualname__'):\n+                return f\"{obj.__module__}.{obj.__qualname__}\"\n+            else:\n+                return obj\n \n     def only_relation_agnostic_fields(self, fields):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..b4cc578 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -35,13 +35,18 @@ class MigrationAutodetector:\n         elif isinstance(obj, COMPILED_REGEX_TYPE):\n             return RegexObject(obj)\n         elif isinstance(obj, type):\n-            return obj\n+            if hasattr(obj, '__module__') and hasattr(obj, '__qualname__'):\n+                return f'{obj.__module__}.{obj.__qualname__}'\n+            else:\n+                return obj\n         elif hasattr(obj, 'deconstruct'):\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n                 deconstructed = deconstructed[1:]\n             path, args, kwargs = deconstructed\n             return (path, [self.deep_deconstruct(value) for value in args], {key: self.deep_deconstruct(value) for key, value in kwargs.items()})\n+        elif hasattr(obj, '__module__') and hasattr(obj, '__qualname__'):\n+            return f'{obj.__module__}.{obj.__qualname__}'\n         else:\n             return obj\n     def only_relation_agnostic_fields(self, fields):\n", "normalized_occurrence": 1}
