{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..7ac8404 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,6 +502,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n+        if isinstance(array_orig, pd.DataFrame) and dtype_orig != array.dtype:\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n+\n         # If np.array(..) gives ComplexWarning, then we convert the warning\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n@@ -549,7 +554,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # make sure we actually converted to numeric:\n         if dtype_numeric and array.dtype.kind == \"O\":\n             array = array.astype(np.float64)\n-        if not allow_nd and array.ndim >= 3:\n+        if hasattr(array_orig, 'dtype') and dtype_orig is not None and array.dtype != dtype_orig:\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, array.dtype, context))\n+            warnings.warn(msg, DataConversionWarning)\n             raise ValueError(\"Found array with dim %d. %s expected <= 2.\"\n                              % (array.ndim, estimator_name))\n         if force_all_finite:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..48374ff 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,6 +152,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if isinstance(array_orig, pd.DataFrame) and dtype_orig != array.dtype:\n+            msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+            warnings.warn(msg, DataConversionWarning)\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n@@ -168,7 +171,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n         if dtype_numeric and array.dtype.kind == 'O':\n             array = array.astype(np.float64)\n-        if not allow_nd and array.ndim >= 3:\n+        if hasattr(array_orig, 'dtype') and dtype_orig is not None and (array.dtype != dtype_orig):\n+            msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, array.dtype, context)\n+            warnings.warn(msg, DataConversionWarning)\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n         if force_all_finite:\n             _assert_all_finite(array, allow_nan=force_all_finite == 'allow-nan')\n", "normalized_occurrence": 1}
