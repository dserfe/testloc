{"model_name_or_path": "agentless", "instance_id": "django__django-15851", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 55aff39..ff7ec0c 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -55,10 +55,12 @@ class DatabaseClient(BaseDatabaseClient):\n \n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n+        if self.connection.settings_dict['NAME']:\n+            parameters.append(self.connection.settings_dict['NAME'])\n         try:\n             # Allow SIGINT to pass to psql to abort queries.\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n             super().runshell(parameters)\n         finally:\n             # Restore the original SIGINT handler.\n-            signal.signal(signal.SIGINT, sigint_handler)\n+            signal.signal(signal.SIGINT, sigint_handler)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 8620a6f..7e789eb 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -46,6 +46,8 @@ class DatabaseClient(BaseDatabaseClient):\n         return (args, env or None)\n     def runshell(self, parameters):\n         sigint_handler = signal.getsignal(signal.SIGINT)\n+        if self.connection.settings_dict['NAME']:\n+            parameters.append(self.connection.settings_dict['NAME'])\n         try:\n             signal.signal(signal.SIGINT, signal.SIG_IGN)\n             super().runshell(parameters)\n", "normalized_occurrence": 1}
