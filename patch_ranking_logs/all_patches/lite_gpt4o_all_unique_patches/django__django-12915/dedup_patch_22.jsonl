{"model_name_or_path": "agentless", "instance_id": "django__django-12915", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex f289230..feb63ca 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -83,6 +83,15 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n             # Serve static content\n             # (the one thing super() doesn't do is __call__, apparently)\n-            return await super().__call__(scope, receive, send)\n+            request, error_response = self.create_request(scope, body_file)\n+            if request is None:\n+                await self.send_response(error_response, send)\n+                return\n+            # Get the response, using the async mode of BaseHandler.\n+            response = await self.get_response_async(request)\n+            response._handler_class = self.__class__\n+            if isinstance(response, FileResponse):\n+                response.block_size = self.chunk_size\n+            await self.send_response(response, send)\n         # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 5a447be..63eb343 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -41,5 +41,13 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n         self.base_url = urlparse(self.get_base_url())\n     async def __call__(self, scope, receive, send):\n         if scope['type'] == 'http' and self._should_handle(scope['path']):\n-            return await super().__call__(scope, receive, send)\n+            request, error_response = self.create_request(scope, body_file)\n+            if request is None:\n+                await self.send_response(error_response, send)\n+                return\n+            response = await self.get_response_async(request)\n+            response._handler_class = self.__class__\n+            if isinstance(response, FileResponse):\n+                response.block_size = self.chunk_size\n+            await self.send_response(response, send)\n         return await self.application(scope, receive, send)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
