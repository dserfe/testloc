{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..02f4622 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -271,6 +271,11 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             return new_class\n \n         opts = new_class._meta = ModelFormOptions(getattr(new_class, \"Meta\", None))\n+        \n+        # Check for formfield_callback in Meta after class creation\n+        meta_formfield_callback = getattr(opts, \"formfield_callback\", None)\n+        if meta_formfield_callback is not None:\n+            formfield_callback = meta_formfield_callback\n \n         # We check if a string was passed to `fields` or `exclude`,\n         # which is likely to be a mistake where the user typed ('foo') instead\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..120eb64 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -119,6 +119,9 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n         if bases == (BaseModelForm,):\n             return new_class\n         opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))\n+        meta_formfield_callback = getattr(opts, 'formfield_callback', None)\n+        if meta_formfield_callback is not None:\n+            formfield_callback = meta_formfield_callback\n         for opt in ['fields', 'exclude', 'localized_fields']:\n             value = getattr(opts, opt)\n             if isinstance(value, str) and value != ALL_FIELDS:\n", "normalized_occurrence": 1}
