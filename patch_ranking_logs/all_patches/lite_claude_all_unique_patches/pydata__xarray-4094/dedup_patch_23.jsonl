{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..75c9958 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1960,11 +1960,20 @@ class DataArray(AbstractArray, DataWithCoords):\n \n         # pull variables out of datarray\n         data_dict = {}\n+        coords = {}\n+        \n+        # Get the non-variable-dim levels to use as coordinates\n+        other_levels = [name for name in idx.names if name != variable_dim]\n+        if other_levels:\n+            for lev in other_levels:\n+                level_values = idx.get_level_values(lev).unique()\n+                coords[lev] = level_values\n+        \n         for k in variables:\n             data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-\n-        # unstacked dataset\n-        return Dataset(data_dict)\n+            \n+        # unstacked dataset with explicit coordinates\n+        return Dataset(data_dict, coords=coords)\n \n     def transpose(self, *dims: Hashable, transpose_coords: bool = True) -> \"DataArray\":\n         \"\"\"Return a new DataArray object with transposed dimensions.\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..2aa54b7 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -533,9 +533,15 @@ class DataArray(AbstractArray, DataWithCoords):\n         variables = idx.levels[level_number]\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n+        coords = {}\n+        other_levels = [name for name in idx.names if name != variable_dim]\n+        if other_levels:\n+            for lev in other_levels:\n+                level_values = idx.get_level_values(lev).unique()\n+                coords[lev] = level_values\n         for k in variables:\n             data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n-        return Dataset(data_dict)\n+        return Dataset(data_dict, coords=coords)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n             dims = tuple(utils.infix_dims(dims, self.dims))\n", "normalized_occurrence": 1}
