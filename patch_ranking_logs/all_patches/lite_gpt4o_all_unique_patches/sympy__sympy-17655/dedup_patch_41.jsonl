{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..fd98183 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,16 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        if isinstance(other, Mul) and any(isinstance(arg, Point) for arg in other.args):\n+            scalar, point = None, None\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                else:\n+                    scalar = arg\n+            if scalar and point:\n+                other = Point([scalar * coord for coord in point.args], evaluate=False)\n+        \n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..20f37a7 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,6 +62,15 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n+        if isinstance(other, Mul) and any((isinstance(arg, Point) for arg in other.args)):\n+            scalar, point = (None, None)\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                else:\n+                    scalar = arg\n+            if scalar and point:\n+                other = Point([scalar * coord for coord in point.args], evaluate=False)\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "normalized_occurrence": 1}
