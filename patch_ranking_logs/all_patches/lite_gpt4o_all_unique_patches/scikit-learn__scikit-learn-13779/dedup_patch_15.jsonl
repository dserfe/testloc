{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..6e9222c 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,7 +29,9 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n-    if sample_weight is not None:\n+    if estimator is None:\n+        return None\n+    elif sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n         estimator.fit(X, y)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..bcb6e2a 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -10,7 +10,9 @@ from ..utils.validation import has_fit_parameter, check_is_fitted\n from ..utils.metaestimators import _BaseComposition\n from ..utils import Bunch\n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n-    if sample_weight is not None:\n+    if estimator is None:\n+        return None\n+    elif sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n         estimator.fit(X, y)\n", "normalized_occurrence": 1}
