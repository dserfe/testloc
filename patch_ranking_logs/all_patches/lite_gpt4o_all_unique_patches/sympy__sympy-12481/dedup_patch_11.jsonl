{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..53854f1 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -895,13 +895,18 @@ class Permutation(Basic):\n         # counting starts from 1.\n \n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        # Resolve repeated elements in cycles by applying them in order\n+        if is_cycle:\n+            resolved_perm = list(range(max(temp)+1)) if temp else []\n+            for cycle in args:\n+                for i in range(len(cycle)):\n+                    resolved_perm[cycle[i-1]] = cycle[i]\n+            args = resolved_perm\n+            temp = set(resolved_perm)\n+        else:\n+            if has_dups(temp):\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+            temp = set(temp)\n \n         if not is_cycle and \\\n                 any(i not in temp for i in range(len(temp))):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..d777824 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -194,12 +194,17 @@ class Permutation(Basic):\n         else:\n             args = [int(i) for i in args]\n         temp = flatten(args)\n-        if has_dups(temp):\n-            if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n-            else:\n+        if is_cycle:\n+            resolved_perm = list(range(max(temp) + 1)) if temp else []\n+            for cycle in args:\n+                for i in range(len(cycle)):\n+                    resolved_perm[cycle[i - 1]] = cycle[i]\n+            args = resolved_perm\n+            temp = set(resolved_perm)\n+        else:\n+            if has_dups(temp):\n                 raise ValueError('there were repeated elements.')\n-        temp = set(temp)\n+            temp = set(temp)\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n", "normalized_occurrence": 1}
