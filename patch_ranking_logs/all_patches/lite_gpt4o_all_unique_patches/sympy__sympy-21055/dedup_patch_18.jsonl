{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..b76ec2a 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -275,6 +275,36 @@ def refine_re(expr, assumptions):\n     return _refine_reim(expr, assumptions)\n \n \n+def refine_arg(expr, assumptions):\n+    \"\"\"\n+    Handler for argument function.\n+\n+    Explanation\n+    ===========\n+\n+    If the argument is positive, arg(a) should return 0.\n+    If the argument is negative, arg(a) should return pi.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy import arg, I\n+    >>> from sympy.assumptions.refine import refine_arg\n+    >>> refine_arg(arg(I+1), True)  # arg(I+1)\n+    arg(I + 1)\n+    >>> refine_arg(arg(1), Q.positive(1))\n+    0\n+    >>> refine_arg(arg(-1), Q.negative(-1))\n+    pi\n+    \"\"\"\n+    from sympy.core import S\n+    arg = expr.args[0]\n+    if ask(Q.positive(arg), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg), assumptions):\n+        return S.Pi\n+    return expr\n+\n def refine_im(expr, assumptions):\n     \"\"\"\n     Handler for imaginary part.\n", "occurrence": 1, "normalized_patch": "--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n+def refine_arg(expr, assumptions):\n+    from sympy.core import S\n+    arg = expr.args[0]\n+    if ask(Q.positive(arg), assumptions):\n+        return S.Zero\n+    if ask(Q.negative(arg), assumptions):\n+        return S.Pi\n+    return expr", "normalized_occurrence": 1}
