{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..fda4f5b 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -538,6 +538,27 @@ def exptrigsimp(expr):\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n+        \n+        # Handle imaginary exponential patterns for sin/cos\n+        if e.is_Mul and S.ImaginaryUnit in e.args:\n+            # Try to match sin(x) = -i/2 * (e^(ix) - e^(-ix))\n+            try:\n+                coeff, terms = e.as_coeff_add()\n+                if coeff == S.ImaginaryUnit/2 or coeff == -S.ImaginaryUnit/2:\n+                    exp_terms = [t for t in terms if isinstance(t, exp)]\n+                    if len(exp_terms) == 2:\n+                        exp1, exp2 = exp_terms\n+                        if (exp1.args[0] == -exp2.args[0] and \n+                            (S.ImaginaryUnit in exp1.args[0].args)):\n+                            # Extract the real argument\n+                            arg = exp1.args[0].args[1]\n+                            if coeff == S.ImaginaryUnit/2:\n+                                choices.append(-sin(arg))\n+                            else:\n+                                choices.append(sin(arg))\n+            except:\n+                pass\n+                \n         return min(*choices, key=count_ops)\n     newexpr = bottom_up(expr, exp_trig)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..1e7f7d1 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -180,6 +180,21 @@ def exptrigsimp(expr):\n         if e.has(*_trigs):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n+        if e.is_Mul and S.ImaginaryUnit in e.args:\n+            try:\n+                coeff, terms = e.as_coeff_add()\n+                if coeff == S.ImaginaryUnit / 2 or coeff == -S.ImaginaryUnit / 2:\n+                    exp_terms = [t for t in terms if isinstance(t, exp)]\n+                    if len(exp_terms) == 2:\n+                        exp1, exp2 = exp_terms\n+                        if exp1.args[0] == -exp2.args[0] and S.ImaginaryUnit in exp1.args[0].args:\n+                            arg = exp1.args[0].args[1]\n+                            if coeff == S.ImaginaryUnit / 2:\n+                                choices.append(-sin(arg))\n+                            else:\n+                                choices.append(sin(arg))\n+            except:\n+                pass\n         return min(*choices, key=count_ops)\n     newexpr = bottom_up(expr, exp_trig)\n     def f(rv):\n", "normalized_occurrence": 1}
