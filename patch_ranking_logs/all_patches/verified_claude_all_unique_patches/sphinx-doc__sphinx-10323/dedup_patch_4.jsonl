{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..2e0eecd 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -342,15 +342,29 @@ class LiteralIncludeReader:\n \n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            # Match indentation of the first non-empty line\n+            for line in lines:\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.insert(0, indentation + prepend + '\\n')\n+                    break\n+            else:\n+                lines.insert(0, prepend + '\\n')\n \n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n+        if append and lines:\n+            # Match indentation of the last non-empty line\n+            for line in reversed(lines):\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.append(indentation + append + '\\n')\n+                    break\n+            else:\n+                lines.append(append + '\\n')\n \n         return lines\n \n", "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..1614204 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -225,13 +225,25 @@ class LiteralIncludeReader:\n         return lines\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n-        if prepend:\n-            lines.insert(0, prepend + '\\n')\n+        if prepend and lines:\n+            for line in lines:\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.insert(0, indentation + prepend + '\\n')\n+                    break\n+            else:\n+                lines.insert(0, prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n-        if append:\n-            lines.append(append + '\\n')\n+        if append and lines:\n+            for line in reversed(lines):\n+                if line.strip():\n+                    indentation = line[:len(line) - len(line.lstrip())]\n+                    lines.append(indentation + append + '\\n')\n+                    break\n+            else:\n+                lines.append(append + '\\n')\n         return lines\n     def dedent_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         if 'dedent' in self.options:\n", "normalized_occurrence": 1}
