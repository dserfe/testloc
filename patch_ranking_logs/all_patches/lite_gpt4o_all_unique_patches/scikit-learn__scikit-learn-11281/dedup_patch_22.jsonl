{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11281", "model_patch": "diff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex 67ca063..8b5da9b 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -434,6 +434,11 @@ def _estimate_log_gaussian_prob(X, means, precisions_chol, covariance_type):\n \n class GaussianMixture(BaseMixture):\n     \"\"\"Gaussian Mixture.\n+    \n+    Attributes\n+    ----------\n+    labels_ : array-like, shape (n_samples,)\n+        Labels of each point\n \n     Representation of a Gaussian mixture model probability distribution.\n     This class allows to estimate the parameters of a Gaussian mixture\n@@ -747,4 +752,24 @@ class GaussianMixture(BaseMixture):\n         aic : float\n             The lower the better.\n         \"\"\"\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+\n+    def fit_predict(self, X, y=None):\n+        \"\"\"Fit the model to X and predict the closest cluster each sample in X belongs to.\n+\n+        Parameters\n+        ----------\n+        X : array-like or sparse matrix, shape (n_samples, n_features)\n+            Training instances to cluster.\n+\n+        y : Ignored\n+            not used, present here for API consistency by convention.\n+\n+        Returns\n+        -------\n+        labels : array, shape [n_samples,]\n+            Index of the cluster each sample belongs to.\n+        \"\"\"\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_\n", "occurrence": 1, "normalized_patch": "--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n-        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+        return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+    def fit_predict(self, X, y=None):\n+        self.fit(X)\n+        self.labels_ = self.predict(X)\n+        return self.labels_", "normalized_occurrence": 1}
