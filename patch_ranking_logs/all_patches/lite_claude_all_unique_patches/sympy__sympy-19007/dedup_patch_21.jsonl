{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..82f646e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,39 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n+        from sympy import Piecewise, And, S\n+        \n+        # Handle literal integer indices directly\n+        if isinstance(i, (int, S.Zero, S.One)) and isinstance(j, (int, S.Zero, S.One)):\n+            # Find row entry\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < numrows:\n+                    break\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < numcols:\n+                    break\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            return self.blocks[row_block, col_block][i, j]\n+            \n+        # For symbolic indices, return a Piecewise expression\n+        expr = None\n+        row_offset = 0\n+        for row_block, numrows in enumerate(self.rowblocksizes):\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                condition = And(\n+                    row_offset <= i,\n+                    i < row_offset + numrows,\n+                    col_offset <= j,\n+                    j < col_offset + numcols\n+                )\n+                entry = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                expr = Piecewise((entry, condition)) if expr is None else \\\n+                       Piecewise((entry, condition), *expr.args)\n+                col_offset += numcols\n+            row_offset += numrows\n+        return expr\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..d6e051d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,28 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n+        from sympy import Piecewise, And, S\n+        if isinstance(i, (int, S.Zero, S.One)) and isinstance(j, (int, S.Zero, S.One)):\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if i < numrows:\n+                    break\n                 i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if j < numcols:\n+                    break\n                 j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            return self.blocks[row_block, col_block][i, j]\n+        expr = None\n+        row_offset = 0\n+        for row_block, numrows in enumerate(self.rowblocksizes):\n+            col_offset = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                condition = And(row_offset <= i, i < row_offset + numrows, col_offset <= j, j < col_offset + numcols)\n+                entry = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                expr = Piecewise((entry, condition)) if expr is None else Piecewise((entry, condition), *expr.args)\n+                col_offset += numcols\n+            row_offset += numrows\n+        return expr\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
