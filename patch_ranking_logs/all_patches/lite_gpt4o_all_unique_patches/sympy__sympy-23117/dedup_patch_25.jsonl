{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..e5389a0 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -194,8 +194,10 @@ class NDimArray(Printable):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n \n+            if not pointer:\n+                return [], (0,)\n             result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n+            elems, shapes = zip(*[f(i) for i in pointer]) if pointer else ([], (0,))\n             if len(set(shapes)) != 1:\n                 raise ValueError(\"could not determine shape unambiguously\")\n             for i in elems:\n@@ -211,7 +213,7 @@ class NDimArray(Printable):\n \n         if shape is None:\n             if iterable is None:\n-                shape = ()\n+                shape = (0,)\n                 iterable = ()\n             # Construction of a sparse array from a sparse array\n             elif isinstance(iterable, SparseNDimArray):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..3b73cf0 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -70,8 +70,10 @@ class NDimArray(Printable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n+            if not pointer:\n+                return ([], (0,))\n             result = []\n-            elems, shapes = zip(*[f(i) for i in pointer])\n+            elems, shapes = zip(*[f(i) for i in pointer]) if pointer else ([], (0,))\n             if len(set(shapes)) != 1:\n                 raise ValueError('could not determine shape unambiguously')\n             for i in elems:\n@@ -84,7 +86,7 @@ class NDimArray(Printable):\n         from sympy.tensor.array import SparseNDimArray\n         if shape is None:\n             if iterable is None:\n-                shape = ()\n+                shape = (0,)\n                 iterable = ()\n             elif isinstance(iterable, SparseNDimArray):\n                 return (iterable._shape, iterable._sparse_array)\n", "normalized_occurrence": 1}
