{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 5a40118..3a96ac6 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -74,6 +74,13 @@ class MigrationAutodetector:\n             # avoid treating this as being deconstructible itself - see #22951\n             return obj\n         elif hasattr(obj, \"deconstruct\"):\n+            if isinstance(obj, (types.MethodType, types.FunctionType)) and hasattr(obj, '__self__'):\n+                # Handle method references, especially for nested classes\n+                cls = obj.__self__.__class__\n+                module = cls.__module__\n+                class_name = cls.__qualname__\n+                method_name = obj.__name__\n+                return f\"{module}.{class_name}.{method_name}\"\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n                 # we have a field which also returns a name\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 74bfa63..4120745 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -37,6 +37,12 @@ class MigrationAutodetector:\n         elif isinstance(obj, type):\n             return obj\n         elif hasattr(obj, 'deconstruct'):\n+            if isinstance(obj, (types.MethodType, types.FunctionType)) and hasattr(obj, '__self__'):\n+                cls = obj.__self__.__class__\n+                module = cls.__module__\n+                class_name = cls.__qualname__\n+                method_name = obj.__name__\n+                return f'{module}.{class_name}.{method_name}'\n             deconstructed = obj.deconstruct()\n             if isinstance(obj, models.Field):\n                 deconstructed = deconstructed[1:]\n", "normalized_occurrence": 1}
