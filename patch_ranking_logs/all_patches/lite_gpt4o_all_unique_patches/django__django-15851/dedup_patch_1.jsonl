{"model_name_or_path": "agentless", "instance_id": "django__django-15851", "model_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 1e8eb45..313b922 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -26,8 +26,11 @@ class Command(BaseCommand):\n \n     def handle(self, **options):\n         connection = connections[options[\"database\"]]\n+        args = options[\"parameters\"]\n+        if connection.settings_dict[\"NAME\"]:\n+            args.append(connection.settings_dict[\"NAME\"])\n         try:\n-            connection.client.runshell(options[\"parameters\"])\n+            connection.client.runshell(args)\n         except FileNotFoundError:\n             # Note that we're assuming the FileNotFoundError relates to the\n             # command missing. It could be raised for some other reason, in\n@@ -45,4 +48,4 @@ class Command(BaseCommand):\n                     e.returncode,\n                 ),\n                 returncode=e.returncode,\n-            )\n+            )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/dbshell.py b/django/core/management/commands/dbshell.py\nindex 49d7a05..4aaf0dc 100644\n--- a/django/core/management/commands/dbshell.py\n+++ b/django/core/management/commands/dbshell.py\n@@ -10,8 +10,11 @@ class Command(BaseCommand):\n         parameters.add_argument('parameters', nargs='*')\n     def handle(self, **options):\n         connection = connections[options['database']]\n+        args = options['parameters']\n+        if connection.settings_dict['NAME']:\n+            args.append(connection.settings_dict['NAME'])\n         try:\n-            connection.client.runshell(options['parameters'])\n+            connection.client.runshell(args)\n         except FileNotFoundError:\n             raise CommandError('You appear not to have the %r program installed or on your path.' % connection.client.executable_name)\n         except subprocess.CalledProcessError as e:\n", "normalized_occurrence": 1}
