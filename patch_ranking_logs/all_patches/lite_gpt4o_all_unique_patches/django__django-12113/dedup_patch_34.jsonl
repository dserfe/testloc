{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex d08f29d..cbccac6 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -77,13 +77,26 @@ class CursorWrapper:\n         return executor(sql, params, many, context)\n \n     def _execute(self, sql, params, *ignored_wrapper_args):\n+        import time\n+        from django.db.utils import OperationalError\n+\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            if params is None:\n-                # params default might be backend specific.\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+            retries = 5\n+            while retries > 0:\n+                try:\n+                    if params is None:\n+                        # params default might be backend specific.\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+                except OperationalError as e:\n+                    if 'locked' in str(e):\n+                        retries -= 1\n+                        time.sleep(0.1)\n+                    else:\n+                        raise\n+            raise OperationalError(f\"Database is locked after {5} retries\")\n \n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/utils.py b/django/db/backends/utils.py\nindex 8a96ea8..bb802d8 100644\n--- a/django/db/backends/utils.py\n+++ b/django/db/backends/utils.py\n@@ -52,12 +52,24 @@ class CursorWrapper:\n             executor = functools.partial(wrapper, executor)\n         return executor(sql, params, many, context)\n     def _execute(self, sql, params, *ignored_wrapper_args):\n+        import time\n+        from django.db.utils import OperationalError\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n-            if params is None:\n-                return self.cursor.execute(sql)\n-            else:\n-                return self.cursor.execute(sql, params)\n+            retries = 5\n+            while retries > 0:\n+                try:\n+                    if params is None:\n+                        return self.cursor.execute(sql)\n+                    else:\n+                        return self.cursor.execute(sql, params)\n+                except OperationalError as e:\n+                    if 'locked' in str(e):\n+                        retries -= 1\n+                        time.sleep(0.1)\n+                    else:\n+                        raise\n+            raise OperationalError(f'Database is locked after {5} retries')\n     def _executemany(self, sql, param_list, *ignored_wrapper_args):\n         self.db.validate_no_broken_transaction()\n         with self.db.wrap_database_errors:\n", "normalized_occurrence": 1}
