{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12754", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 12ebcde..aeaffb7 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -395,6 +395,14 @@ class MigrationAutodetector:\n                     operation.model_name_lower == dependency[1].lower() and\n                     operation.name_lower == dependency[2].lower()\n                 )\n+            ) or (\n+                # Add dependency when creating a model that inherits from another model\n+                # that has fields being removed\n+                isinstance(operation, operations.CreateModel) and\n+                any(isinstance(base, str) and \".\" in base and\n+                    base.split(\".\", 1)[0] == dependency[0] and\n+                    base.split(\".\", 1)[1].lower() == dependency[1].lower()\n+                    for base in operation.bases)\n             )\n         # Removed field\n         elif dependency[2] is not None and dependency[3] is False:\n@@ -1326,4 +1334,4 @@ class MigrationAutodetector:\n         match = re.match(r'^\\d+', name)\n         if match:\n             return int(match[0])\n-        return None\n+        return None\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex f799cd9..6f6736f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -211,7 +211,7 @@ class MigrationAutodetector:\n         if dependency[2] is None and dependency[3] is True:\n             return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower()\n         elif dependency[2] is not None and dependency[3] is True:\n-            return isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower() and any((dependency[2] == x for x, y in operation.fields)) or (isinstance(operation, operations.AddField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower()))\n+            return (isinstance(operation, operations.CreateModel) and operation.name_lower == dependency[1].lower() and any((dependency[2] == x for x, y in operation.fields)) or (isinstance(operation, operations.AddField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower()))) or (isinstance(operation, operations.CreateModel) and any((isinstance(base, str) and '.' in base and (base.split('.', 1)[0] == dependency[0]) and (base.split('.', 1)[1].lower() == dependency[1].lower()) for base in operation.bases)))\n         elif dependency[2] is not None and dependency[3] is False:\n             return isinstance(operation, operations.RemoveField) and operation.model_name_lower == dependency[1].lower() and (operation.name_lower == dependency[2].lower())\n         elif dependency[2] is None and dependency[3] is False:\n", "normalized_occurrence": 1}
