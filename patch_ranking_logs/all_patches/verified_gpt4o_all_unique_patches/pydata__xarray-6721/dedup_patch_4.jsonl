{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6721", "model_patch": "diff --git a/xarray/core/common.py b/xarray/core/common.py\nindex 304e65c..46dc697 100644\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -2023,8 +2023,8 @@ def get_chunksizes(\n \n     chunks: dict[Any, tuple[int, ...]] = {}\n     for v in variables:\n-        if hasattr(v.data, \"chunks\"):\n-            for dim, c in v.chunksizes.items():\n+        if 'chunks' in v.encoding:\n+            for dim, c in zip(v.dims, v.encoding['chunks']):\n                 if dim in chunks and c != chunks[dim]:\n                     raise ValueError(\n                         f\"Object has inconsistent chunks along dimension {dim}. \"\n", "occurrence": 2, "normalized_patch": "diff --git a/xarray/core/common.py b/xarray/core/common.py\nindex 66e6a33..59d8ca0 100644\n--- a/xarray/core/common.py\n+++ b/xarray/core/common.py\n@@ -387,8 +387,8 @@ def ones_like(other: Dataset | DataArray | Variable, dtype: DTypeMaybeMapping=No\n def get_chunksizes(variables: Iterable[Variable]) -> Mapping[Any, tuple[int, ...]]:\n     chunks: dict[Any, tuple[int, ...]] = {}\n     for v in variables:\n-        if hasattr(v.data, 'chunks'):\n-            for dim, c in v.chunksizes.items():\n+        if 'chunks' in v.encoding:\n+            for dim, c in zip(v.dims, v.encoding['chunks']):\n                 if dim in chunks and c != chunks[dim]:\n                     raise ValueError(f'Object has inconsistent chunks along dimension {dim}. This can be fixed by calling unify_chunks().')\n                 chunks[dim] = c\n", "normalized_occurrence": 5}
