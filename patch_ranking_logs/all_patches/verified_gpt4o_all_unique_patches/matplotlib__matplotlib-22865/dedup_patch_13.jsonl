{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..4407d13 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -625,11 +625,8 @@ class Colorbar:\n \n         if self._filled:\n             ind = np.arange(len(self._values))\n-            if self._extend_lower():\n-                ind = ind[1:]\n-            if self._extend_upper():\n-                ind = ind[:-1]\n-            self._add_solids(X, Y, self._values[ind, np.newaxis])\n+            # Ensure that we add dividers to include the extended regions\n+            self._add_solids(X, Y, self._values)\n \n     def _add_solids(self, X, Y, C):\n         \"\"\"Draw the colors; optionally add separators.\"\"\"\n@@ -651,8 +648,15 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            segments = np.dstack([X, Y])\n+            if self._extend_lower():\n+                segments = segments[:-1]\n+            if self._extend_upper():\n+                segments = segments[1:]\n+            self.dividers.set_segments(segments)\n+        else:\n+            self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..f156a53 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -244,11 +244,7 @@ class Colorbar:\n         self.update_ticks()\n         if self._filled:\n             ind = np.arange(len(self._values))\n-            if self._extend_lower():\n-                ind = ind[1:]\n-            if self._extend_upper():\n-                ind = ind[:-1]\n-            self._add_solids(X, Y, self._values[ind, np.newaxis])\n+            self._add_solids(X, Y, self._values)\n     def _add_solids(self, X, Y, C):\n         if self.solids is not None:\n             self.solids.remove()\n@@ -262,7 +258,15 @@ class Colorbar:\n             if not self.drawedges:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+        if self.drawedges:\n+            segments = np.dstack([X, Y])\n+            if self._extend_lower():\n+                segments = segments[:-1]\n+            if self._extend_upper():\n+                segments = segments[1:]\n+            self.dividers.set_segments(segments)\n+        else:\n+            self.dividers.set_segments([])\n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)\n         patches = []\n", "normalized_occurrence": 1}
