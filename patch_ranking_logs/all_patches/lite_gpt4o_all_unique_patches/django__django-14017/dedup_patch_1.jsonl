{"model_name_or_path": "agentless", "instance_id": "django__django-14017", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex c757b1f..2690d19 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -137,9 +137,9 @@ class Combinable:\n         return self._combine(other, self.POW, True)\n \n     def __rand__(self, other):\n-        raise NotImplementedError(\n-            \"Use .bitand() and .bitor() for bitwise logical operations.\"\n-        )\n+        if isinstance(other, Q):\n+            return other & self\n+        raise TypeError(f\"Unsupported operand type(s) for &: '{type(other)}' and '{type(self)}'\")\n \n     def __ror__(self, other):\n         raise NotImplementedError(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex b443491..cb49f17 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -84,7 +84,9 @@ class Combinable:\n     def __rpow__(self, other):\n         return self._combine(other, self.POW, True)\n     def __rand__(self, other):\n-        raise NotImplementedError('Use .bitand() and .bitor() for bitwise logical operations.')\n+        if isinstance(other, Q):\n+            return other & self\n+        raise TypeError(f\"Unsupported operand type(s) for &: '{type(other)}' and '{type(self)}'\")\n     def __ror__(self, other):\n         raise NotImplementedError('Use .bitand() and .bitor() for bitwise logical operations.')\n @deconstructible\n", "normalized_occurrence": 1}
