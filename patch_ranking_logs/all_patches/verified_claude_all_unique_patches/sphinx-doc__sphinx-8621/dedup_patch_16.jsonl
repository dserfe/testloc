{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..60831fa 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -496,6 +496,42 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Handle keyboard shortcuts\n+            text = node.astext()\n+            if any(sep in text for sep in '-+^'):\n+                # Check if it's a compound keystroke\n+                if len(text) > 1 and any(c.isalpha() for c in text):\n+                    # Split only on separators between actual keys\n+                    parts = []\n+                    current = ''\n+                    for i, char in enumerate(text):\n+                        if char in '-+^' and i > 0 and i < len(text)-1:\n+                            if current:\n+                                parts.append(current)\n+                                parts.append(char)\n+                                current = ''\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    \n+                    # Write each part\n+                    for i, part in enumerate(parts):\n+                        if part in '-+^':\n+                            self.body.append(part)\n+                        else:\n+                            if i > 0:  # Not the first element\n+                                self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(part)\n+                            if i > 0:  # Not the first element\n+                                self.body.append('</kbd>')\n+                else:\n+                    # Single keystroke containing a separator character\n+                    self.body.append(text)\n+            else:\n+                # Regular single keystroke\n+                self.body.append(node.astext())\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..697033b 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -447,6 +447,42 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            \n+            # Handle keyboard shortcuts\n+            text = node.astext()\n+            if any(sep in text for sep in '-+^'):\n+                # Check if it's a compound keystroke\n+                if len(text) > 1 and any(c.isalpha() for c in text):\n+                    # Split only on separators between actual keys\n+                    parts = []\n+                    current = ''\n+                    for i, char in enumerate(text):\n+                        if char in '-+^' and i > 0 and i < len(text)-1:\n+                            if current:\n+                                parts.append(current)\n+                                parts.append(char)\n+                                current = ''\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    \n+                    # Write each part\n+                    for i, part in enumerate(parts):\n+                        if part in '-+^':\n+                            self.body.append(part)\n+                        else:\n+                            if i > 0:  # Not the first element\n+                                self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(part)\n+                            if i > 0:  # Not the first element\n+                                self.body.append('</kbd>')\n+                else:\n+                    # Single keystroke containing a separator character\n+                    self.body.append(text)\n+            else:\n+                # Regular single keystroke\n+                self.body.append(node.astext())\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..1b73e59 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -325,6 +325,34 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in '-+^')):\n+                if len(text) > 1 and any((c.isalpha() for c in text)):\n+                    parts = []\n+                    current = ''\n+                    for i, char in enumerate(text):\n+                        if char in '-+^' and i > 0 and (i < len(text) - 1):\n+                            if current:\n+                                parts.append(current)\n+                                parts.append(char)\n+                                current = ''\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    for i, part in enumerate(parts):\n+                        if part in '-+^':\n+                            self.body.append(part)\n+                        else:\n+                            if i > 0:\n+                                self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(part)\n+                            if i > 0:\n+                                self.body.append('</kbd>')\n+                else:\n+                    self.body.append(text)\n+            else:\n+                self.body.append(node.astext())\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..f1952df 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -298,6 +298,34 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            text = node.astext()\n+            if any((sep in text for sep in '-+^')):\n+                if len(text) > 1 and any((c.isalpha() for c in text)):\n+                    parts = []\n+                    current = ''\n+                    for i, char in enumerate(text):\n+                        if char in '-+^' and i > 0 and (i < len(text) - 1):\n+                            if current:\n+                                parts.append(current)\n+                                parts.append(char)\n+                                current = ''\n+                        else:\n+                            current += char\n+                    if current:\n+                        parts.append(current)\n+                    for i, part in enumerate(parts):\n+                        if part in '-+^':\n+                            self.body.append(part)\n+                        else:\n+                            if i > 0:\n+                                self.body.append('<kbd class=\"kbd docutils literal notranslate\">')\n+                            self.body.append(part)\n+                            if i > 0:\n+                                self.body.append('</kbd>')\n+                else:\n+                    self.body.append(text)\n+            else:\n+                self.body.append(node.astext())\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
