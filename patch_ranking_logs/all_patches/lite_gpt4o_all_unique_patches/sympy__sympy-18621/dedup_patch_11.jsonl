{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18621", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex cc9a4f7..c472941 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -298,10 +298,13 @@ class BlockDiagMatrix(BlockMatrix):\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n         mats = self.args\n-        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n-                        for j in range(len(mats))]\n-                        for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        if len(mats) == 1:\n+            return mats[0]\n+        else:\n+            data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n+                            for j in range(len(mats))]\n+                            for i in range(len(mats))]\n+            return ImmutableDenseMatrix(data)\n \n     @property\n     def shape(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex bedf9e1..d6e97cb 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -144,8 +144,11 @@ class BlockDiagMatrix(BlockMatrix):\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n         mats = self.args\n-        data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols) for j in range(len(mats))] for i in range(len(mats))]\n-        return ImmutableDenseMatrix(data)\n+        if len(mats) == 1:\n+            return mats[0]\n+        else:\n+            data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols) for j in range(len(mats))] for i in range(len(mats))]\n+            return ImmutableDenseMatrix(data)\n     @property\n     def shape(self):\n         return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n", "normalized_occurrence": 1}
