{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14894", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex b637f36..bfa7a6a 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -280,6 +280,10 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n \n         self._warn_from_fit_status()\n \n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix([])\n+            return\n+\n         if hasattr(self, \"classes_\"):\n             n_class = len(self.classes_) - 1\n         else:  # regression\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex ff4726d..f35f37a 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -120,6 +120,9 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n         libsvm_sparse.set_verbosity_wrap(self.verbose)\n         self.support_, self.support_vectors_, dual_coef_data, self.intercept_, self._n_support, self.probA_, self.probB_, self.fit_status_ = libsvm_sparse.libsvm_sparse_train(X.shape[1], X.data, X.indices, X.indptr, y, solver_type, kernel_type, self.degree, self._gamma, self.coef0, self.tol, self.C, self.class_weight_, sample_weight, self.nu, self.cache_size, self.epsilon, int(self.shrinking), int(self.probability), self.max_iter, random_seed)\n         self._warn_from_fit_status()\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix([])\n+            return\n         if hasattr(self, 'classes_'):\n             n_class = len(self.classes_) - 1\n         else:\n", "normalized_occurrence": 1}
