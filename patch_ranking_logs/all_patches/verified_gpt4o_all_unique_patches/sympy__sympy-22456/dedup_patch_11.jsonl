{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..575bfac 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -202,11 +202,12 @@ class Token(CodegenAST):\n         # arg may be ``NoneToken()``, so comparation is done using == instead of ``is`` operator\n         if arg == None:\n             return cls.defaults.get(attr, none)\n+        elif attr == 'text':\n+            return cls._construct_text(arg)\n+        if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances\n+            return arg\n         else:\n-            if isinstance(arg, Dummy):  # SymPy's replace uses Dummy instances\n-                return arg\n-            else:\n-                return cls._get_constructor(attr)(arg)\n+            return cls._get_constructor(attr)(arg)\n \n     def __new__(cls, *args, **kwargs):\n         # Pass through existing instances when given as sole argument\n@@ -895,7 +896,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..53f2003 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -193,7 +193,9 @@ class Token(CodegenAST):\n         \"\"\" Construct an attribute value from argument passed to ``__new__()``. \"\"\"\n         if arg == None:\n             return cls.defaults.get(attr, none)\n-        elif isinstance(arg, Dummy):\n+        elif attr == 'text':\n+            return cls._construct_text(arg)\n+        if isinstance(arg, Dummy):\n             return arg\n         else:\n             return cls._get_constructor(attr)(arg)\n@@ -774,7 +776,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    not_in_args = []\n     is_Atom = True\n \n     @classmethod\n", "normalized_occurrence": 1}
