{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11555", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 291f673..5b95ce6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -282,12 +282,13 @@ class SQLCompiler:\n                 if isinstance(field, Value):\n                     # output_field must be resolved for constants.\n                     field = Cast(field, field.output_field)\n+                resolved_field = field\n                 if not isinstance(field, OrderBy):\n-                    field = field.asc()\n+                    resolved_field = field.asc()\n                 if not self.query.standard_ordering:\n-                    field = field.copy()\n-                    field.reverse_ordering()\n-                order_by.append((field, False))\n+                    resolved_field = resolved_field.copy()\n+                    resolved_field.reverse_ordering()\n+                order_by.append((resolved_field, False))\n                 continue\n             if field == '?':  # random\n                 order_by.append((OrderBy(Random()), False))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 541feee..b144e9b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -146,12 +146,13 @@ class SQLCompiler:\n             if hasattr(field, 'resolve_expression'):\n                 if isinstance(field, Value):\n                     field = Cast(field, field.output_field)\n+                resolved_field = field\n                 if not isinstance(field, OrderBy):\n-                    field = field.asc()\n+                    resolved_field = field.asc()\n                 if not self.query.standard_ordering:\n-                    field = field.copy()\n-                    field.reverse_ordering()\n-                order_by.append((field, False))\n+                    resolved_field = resolved_field.copy()\n+                    resolved_field.reverse_ordering()\n+                order_by.append((resolved_field, False))\n                 continue\n             if field == '?':\n                 order_by.append((OrderBy(Random()), False))\n", "normalized_occurrence": 1}
