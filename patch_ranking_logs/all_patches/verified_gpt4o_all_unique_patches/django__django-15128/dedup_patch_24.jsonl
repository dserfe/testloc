{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..a655efb 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -574,6 +574,7 @@ class Query(BaseExpression):\n \n         # Work out how to relabel the rhs aliases, if necessary.\n         change_map = {}\n+        used_aliases = set(self.alias_map) | set(rhs.alias_map)\n         conjunction = (connector == AND)\n \n         # Determine which existing joins can be reused. When combining the\n@@ -600,6 +601,11 @@ class Query(BaseExpression):\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n+            new_alias = alias\n+            while new_alias in used_aliases:\n+                new_alias = '%s%d' % (alias[:1], len(used_aliases))\n+                used_aliases.add(new_alias)\n+            change_map[alias] = new_alias\n             join = rhs.alias_map[alias]\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n@@ -630,6 +636,7 @@ class Query(BaseExpression):\n         # one.\n         w = rhs.where.clone()\n         w.relabel_aliases(change_map)\n+        w.relabel_aliases(change_map)\n         self.where.add(w, connector)\n \n         # Selection columns and extra extensions are those provided by 'rhs'.\n@@ -854,6 +861,7 @@ class Query(BaseExpression):\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])\n+        self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n         self.annotations = self.annotations and {\n             key: col.relabeled_clone(change_map) for key, col in self.annotations.items()\n         }\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..9587a5d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -326,6 +326,7 @@ class Query(BaseExpression):\n         if self.distinct_fields != rhs.distinct_fields:\n             raise TypeError('Cannot combine queries with different distinct fields.')\n         change_map = {}\n+        used_aliases = set(self.alias_map) | set(rhs.alias_map)\n         conjunction = connector == AND\n         reuse = set() if conjunction else set(self.alias_map)\n         self.get_initial_alias()\n@@ -334,6 +335,11 @@ class Query(BaseExpression):\n         rhs_votes = set()\n         rhs_tables = list(rhs.alias_map)[1:]\n         for alias in rhs_tables:\n+            new_alias = alias\n+            while new_alias in used_aliases:\n+                new_alias = '%s%d' % (alias[:1], len(used_aliases))\n+                used_aliases.add(new_alias)\n+            change_map[alias] = new_alias\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n@@ -349,6 +355,7 @@ class Query(BaseExpression):\n         self.subq_aliases |= rhs.subq_aliases\n         w = rhs.where.clone()\n         w.relabel_aliases(change_map)\n+        w.relabel_aliases(change_map)\n         self.where.add(w, connector)\n         if rhs.select:\n             self.set_select([col.relabeled_clone(change_map) for col in rhs.select])\n@@ -472,6 +479,7 @@ class Query(BaseExpression):\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n         self.select = tuple([col.relabeled_clone(change_map) for col in self.select])\n+        self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n         self.annotations = self.annotations and {key: col.relabeled_clone(change_map) for key, col in self.annotations.items()}\n         for old_alias, new_alias in change_map.items():\n             if old_alias not in self.alias_map:\n", "normalized_occurrence": 1}
