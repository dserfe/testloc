{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25442", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex db0cc2e..df3d177 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,13 +1499,15 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [\n-            self.canvas.callbacks._connect_picklable(\n-                'pick_event', self.on_pick),\n-            self.canvas.callbacks._connect_picklable(\n-                'button_release_event', self.on_release),\n-        ]\n+        self._use_blit = use_blit and self.ref_artist.figure.canvas.supports_blit\n+        self.cids = []\n+        if self.ref_artist.figure and self.ref_artist.figure.canvas:\n+            self.cids = [\n+                self.ref_artist.figure.canvas.callbacks._connect_picklable(\n+                    'pick_event', self.on_pick),\n+                self.ref_artist.figure.canvas.callbacks._connect_picklable(\n+                    'button_release_event', self.on_release),\n+            ]\n \n     # A property, not an attribute, to maintain picklability.\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex f94319f..3cbbb10 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1262,8 +1262,10 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n-        self.cids = [self.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n+        self._use_blit = use_blit and self.ref_artist.figure.canvas.supports_blit\n+        self.cids = []\n+        if self.ref_artist.figure and self.ref_artist.figure.canvas:\n+            self.cids = [self.ref_artist.figure.canvas.callbacks._connect_picklable('pick_event', self.on_pick), self.ref_artist.figure.canvas.callbacks._connect_picklable('button_release_event', self.on_release)]\n     canvas = property(lambda self: self.ref_artist.figure.canvas)\n \n     def on_motion(self, evt):\n", "normalized_occurrence": 1}
