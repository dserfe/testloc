{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..a5ad5ac 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,29 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        # Special handling for all() and any() calls\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and not call.keywords:\n+                iterator = call.args[0]\n+                # Handle generator expressions and list comprehensions\n+                if isinstance(iterator, (ast.GeneratorExp, ast.ListComp)):\n+                    # Create a for loop that checks each element\n+                    loop_var = iterator.generators[0].target\n+                    test_expr = iterator.elt\n+                    iter_expr = iterator.generators[0].iter\n+                    \n+                    # Create the loop body with proper assertion\n+                    loop_body = [ast.Assert(test_expr, None)]\n+                    \n+                    # Create the for loop\n+                    new_node = ast.For(\n+                        target=loop_var,\n+                        iter=iter_expr,\n+                        body=loop_body,\n+                        orelse=[]\n+                    )\n+                    \n+                    return new_node, \"unrolled loop\"\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..67d20e1 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,16 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1 and (not call.keywords):\n+                iterator = call.args[0]\n+                if isinstance(iterator, (ast.GeneratorExp, ast.ListComp)):\n+                    loop_var = iterator.generators[0].target\n+                    test_expr = iterator.elt\n+                    iter_expr = iterator.generators[0].iter\n+                    loop_body = [ast.Assert(test_expr, None)]\n+                    new_node = ast.For(target=loop_var, iter=iter_expr, body=loop_body, orelse=[])\n+                    return (new_node, 'unrolled loop')\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
