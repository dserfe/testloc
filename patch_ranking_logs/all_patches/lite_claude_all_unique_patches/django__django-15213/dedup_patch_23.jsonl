{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15213", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..e4f4b08 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -979,7 +979,14 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n         return super().get_group_by_cols()\n \n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        if hasattr(self.expression, 'resolve_expression'):\n+            return compiler.compile(self.expression)\n+        # Handle Q objects by converting them to a boolean expression\n+        sql, params = compiler.query.build_where(self.expression)\n+        # Remove the leading \"WHERE\" if present\n+        if sql.startswith('WHERE '):\n+            sql = sql[6:]\n+        return sql, params\n \n     def __repr__(self):\n         return \"{}({})\".format(self.__class__.__name__, self.expression)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 7926e3e..ad7b013 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -590,7 +590,12 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n             return expression.get_group_by_cols(alias=alias)\n         return super().get_group_by_cols()\n     def as_sql(self, compiler, connection):\n-        return compiler.compile(self.expression)\n+        if hasattr(self.expression, 'resolve_expression'):\n+            return compiler.compile(self.expression)\n+        sql, params = compiler.query.build_where(self.expression)\n+        if sql.startswith('WHERE '):\n+            sql = sql[6:]\n+        return (sql, params)\n     def __repr__(self):\n         return '{}({})'.format(self.__class__.__name__, self.expression)\n class When(Expression):\n", "normalized_occurrence": 1}
