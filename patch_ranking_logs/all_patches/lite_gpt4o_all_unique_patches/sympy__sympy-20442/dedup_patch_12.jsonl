{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..3ca47a3 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -105,6 +105,10 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     if depmat is None:\n         return expr\n \n+    expr_factor, expr_dim = unit_system._collect_factor_and_dimension(expr)\n+    if expr_dim != unit_system._collect_factor_and_dimension(Mul.fromiter(target_units))[1]:\n+        return expr  # Return original expression if dimensions are not compatible\n+\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..4b1bb27 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -41,6 +41,9 @@ def convert_to(expr, target_units, unit_system='SI'):\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n+    expr_factor, expr_dim = unit_system._collect_factor_and_dimension(expr)\n+    if expr_dim != unit_system._collect_factor_and_dimension(Mul.fromiter(target_units))[1]:\n+        return expr\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n def quantity_simplify(expr):\n", "normalized_occurrence": 1}
