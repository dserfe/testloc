{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..97ecb02 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1372,6 +1372,19 @@ class ManyToManyField(RelatedField):\n                 \"Cannot specify a db_table if an intermediary model is used.\"\n             )\n \n+        if isinstance(through, str):\n+            def resolve_through_model():\n+                from django.apps import apps\n+                model = apps.get_model(through, require_ready=False)\n+                if not model._meta.auto_created:\n+                    return model\n+                raise ValueError(\"The `through` attribute must be a registered model.\")\n+            \n+            self._through_model = through\n+            self.resolve_through_model = resolve_through_model\n+        else:\n+            self._through_model = through\n+\n         kwargs[\"rel\"] = self.rel_class(\n             self,\n             to,\n@@ -1379,7 +1392,7 @@ class ManyToManyField(RelatedField):\n             related_query_name=related_query_name,\n             limit_choices_to=limit_choices_to,\n             symmetrical=symmetrical,\n-            through=through,\n+            through=self._through_model,\n             through_fields=through_fields,\n             db_constraint=db_constraint,\n         )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..79b9033 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -542,7 +542,18 @@ class ManyToManyField(RelatedField):\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n-        kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n+        if isinstance(through, str):\n+            def resolve_through_model():\n+                from django.apps import apps\n+                model = apps.get_model(through, require_ready=False)\n+                if not model._meta.auto_created:\n+                    return model\n+                raise ValueError('The `through` attribute must be a registered model.')\n+            self._through_model = through\n+            self.resolve_through_model = resolve_through_model\n+        else:\n+            self._through_model = through\n+        kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=self._through_model, through_fields=through_fields, db_constraint=db_constraint)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n         self.db_table = db_table\n", "normalized_occurrence": 1}
