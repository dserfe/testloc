{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..31683e4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,15 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        \n+        # Clear annotations that aren't referenced in filters or ordering\n+        annotations = obj.annotation_select.copy()\n+        for alias in annotations:\n+            annotation = obj.annotations[alias]\n+            if not annotation.refs_aggregate:\n+                del obj.annotations[alias]\n+                del obj.annotation_select[alias]\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..ed58c1f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,12 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        annotations = obj.annotation_select.copy()\n+        for alias in annotations:\n+            annotation = obj.annotations[alias]\n+            if not annotation.refs_aggregate:\n+                del obj.annotations[alias]\n+                del obj.annotation_select[alias]\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
