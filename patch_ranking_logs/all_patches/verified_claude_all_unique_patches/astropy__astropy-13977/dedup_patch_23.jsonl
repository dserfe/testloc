{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-13977", "model_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex ef71d2c..f3e2b98 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -667,7 +667,14 @@ class Quantity(np.ndarray):\n         arrays = []\n         for input_, converter in zip(inputs, converters):\n             input_ = getattr(input_, \"value\", input_)\n-            arrays.append(converter(input_) if converter else input_)\n+            if converter:\n+                try:\n+                    converted = converter(input_)\n+                except ValueError:\n+                    return NotImplemented\n+                arrays.append(converted)\n+            else:\n+                arrays.append(input_)\n \n         # Call our superclass's __array_ufunc__\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py\nindex 9a6c1e2..3712a98 100644\n--- a/astropy/units/quantity.py\n+++ b/astropy/units/quantity.py\n@@ -207,7 +207,14 @@ class Quantity(np.ndarray):\n         arrays = []\n         for input_, converter in zip(inputs, converters):\n             input_ = getattr(input_, 'value', input_)\n-            arrays.append(converter(input_) if converter else input_)\n+            if converter:\n+                try:\n+                    converted = converter(input_)\n+                except ValueError:\n+                    return NotImplemented\n+                arrays.append(converted)\n+            else:\n+                arrays.append(input_)\n         result = super().__array_ufunc__(function, method, *arrays, **kwargs)\n         if unit is None or result is None or result is NotImplemented:\n             return result\n", "normalized_occurrence": 1}
