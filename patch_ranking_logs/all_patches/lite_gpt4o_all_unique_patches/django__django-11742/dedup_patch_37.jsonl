{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..ef30f2d 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,11 +239,33 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n \n     def _check_choices(self):\n         if not self.choices:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n \n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n@@ -280,7 +302,18 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n \n         return [\n             checks.Error(\n@@ -301,7 +334,18 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n \n     def _check_null_allowed_for_primary_keys(self):\n         if (self.primary_key and self.null and\n@@ -319,7 +363,18 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n \n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n@@ -842,7 +897,18 @@ class Field(RegisterLookupMixin):\n     def _get_flatchoices(self):\n         \"\"\"Flattened version of choices tuple.\"\"\"\n         if self.choices is None:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest value in 'choices'.\",\n+                        hint=f\"Increase 'max_length' to at least {longest_choice_length}.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                )\n+            return errors\n         flat = []\n         for choice, value in self.choices:\n             if isinstance(value, (list, tuple)):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..03f6090 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -116,10 +116,18 @@ class Field(RegisterLookupMixin):\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_choices(self):\n         if not self.choices:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n@@ -139,18 +147,30 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [checks.Error(\"'db_index' must be None, True or False.\", obj=self, id='fields.E006')]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_null_allowed_for_primary_keys(self):\n         if self.primary_key and self.null and (not connection.features.interprets_empty_strings_as_nulls):\n             return [checks.Error('Primary keys must not have null=True.', hint='Set null=False on the field, or remove primary_key=True argument.', obj=self, id='fields.E007')]\n         else:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n         for db in connections:\n@@ -388,7 +408,11 @@ class Field(RegisterLookupMixin):\n         return str(self.value_from_object(obj))\n     def _get_flatchoices(self):\n         if self.choices is None:\n-            return []\n+            errors = []\n+            longest_choice_length = max((len(str(choice)) for choice, _ in self.flatchoices), default=0)\n+            if self.max_length is not None and self.max_length < longest_choice_length:\n+                errors.append(checks.Error(\"'max_length' is too small to fit the longest value in 'choices'.\", hint=f\"Increase 'max_length' to at least {longest_choice_length}.\", obj=self, id='fields.E009'))\n+            return errors\n         flat = []\n         for choice, value in self.choices:\n             if isinstance(value, (list, tuple)):\n", "normalized_occurrence": 1}
