{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..0899f66 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,10 +356,25 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    \"\"\"Obtain the unpacked marks that are stored on an object.\n+    \n+    For classes, this includes marks from all parent classes following MRO order.\"\"\"\n+    mark_list = []\n+    \n+    # If it's a class, collect marks from the entire MRO chain\n+    if inspect.isclass(obj):\n+        for cls in reversed(getattr(obj, \"__mro__\", [obj])):\n+            cls_marks = getattr(cls, \"_pytestmark\", [])\n+            if not isinstance(cls_marks, list):\n+                cls_marks = [cls_marks]\n+            mark_list.extend(cls_marks)\n+    else:\n+        # For non-class objects, use the direct pytestmark attribute\n+        direct_marks = getattr(obj, \"pytestmark\", [])\n+        if not isinstance(direct_marks, list):\n+            direct_marks = [direct_marks]\n+        mark_list.extend(direct_marks)\n+    \n     return normalize_mark_list(mark_list)\n \n \n@@ -386,9 +401,13 @@ def store_mark(obj, mark: Mark) -> None:\n     This is used to implement the Mark declarations/decorators correctly.\n     \"\"\"\n     assert isinstance(mark, Mark), mark\n+    # Store marks in _pytestmark to avoid MRO conflicts\n     # Always reassign name to avoid updating pytestmark in a reference that\n     # was only borrowed.\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    direct_marks = getattr(obj, \"_pytestmark\", [])\n+    if not isinstance(direct_marks, list):\n+        direct_marks = [direct_marks]\n+    obj._pytestmark = [*direct_marks, mark]\n \n \n # Typing for builtin pytest marks. This is cheating; it gives builtin marks\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..5889b9c 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,9 +161,18 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    mark_list = []\n+    if inspect.isclass(obj):\n+        for cls in reversed(getattr(obj, '__mro__', [obj])):\n+            cls_marks = getattr(cls, '_pytestmark', [])\n+            if not isinstance(cls_marks, list):\n+                cls_marks = [cls_marks]\n+            mark_list.extend(cls_marks)\n+    else:\n+        direct_marks = getattr(obj, 'pytestmark', [])\n+        if not isinstance(direct_marks, list):\n+            direct_marks = [direct_marks]\n+        mark_list.extend(direct_marks)\n     return normalize_mark_list(mark_list)\n def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iterable[Mark]:\n     for mark in mark_list:\n@@ -173,7 +182,10 @@ def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iter\n         yield mark_obj\n def store_mark(obj, mark: Mark) -> None:\n     assert isinstance(mark, Mark), mark\n-    obj.pytestmark = [*get_unpacked_marks(obj), mark]\n+    direct_marks = getattr(obj, '_pytestmark', [])\n+    if not isinstance(direct_marks, list):\n+        direct_marks = [direct_marks]\n+    obj._pytestmark = [*direct_marks, mark]\n if TYPE_CHECKING:\n     from _pytest.scope import _ScopeName\n     class _SkipMarkDecorator(MarkDecorator):\n", "normalized_occurrence": 1}
