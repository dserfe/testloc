{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..dfa1ee8 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -65,8 +65,12 @@ class MatMul(MatrixExpr):\n             return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n-            # Don't waste time in result.doit() if the sum bounds are symbolic\n-            expand = False\n+            # If the sum bounds are symbolic, handle orthogonal case explicitly\n+            if all(isinstance(arg, Identity) for arg in matrices):\n+                return coeff * KroneckerDelta(i, j)\n+            else:\n+                # Don't waste time in result.doit() if the sum bounds are symbolic\n+                expand = False\n         return result.doit() if expand else result\n \n     def as_coeff_matrices(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..c473424 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -40,7 +40,10 @@ class MatMul(MatrixExpr):\n             return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n         if not X.cols.is_number:\n-            expand = False\n+            if all((isinstance(arg, Identity) for arg in matrices)):\n+                return coeff * KroneckerDelta(i, j)\n+            else:\n+                expand = False\n         return result.doit() if expand else result\n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n", "normalized_occurrence": 1}
