{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15346", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 9a2774b..01a41a9 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -509,6 +509,21 @@ def trigsimp(expr, **opts):\n                                polynomial=True, hints=[2, tan]))),\n         'old': lambda x: trigsimp_old(x, **opts),\n                    }[method]\n+    \n+    # Handle rational multiples case before the main simplification\n+    if expr.has(sin, cos):\n+        # Try to identify patterns like sin(a)*sin(b) + cos(a)*cos(b)\n+        if isinstance(expr, Add):\n+            terms = expr.args\n+            for i, term1 in enumerate(terms):\n+                if isinstance(term1, Mul) and any(isinstance(arg, (sin, cos)) for arg in term1.args):\n+                    for term2 in terms[i+1:]:\n+                        if isinstance(term2, Mul) and any(isinstance(arg, (sin, cos)) for arg in term2.args):\n+                            # Check if terms match the pattern sin(a)*sin(b) + cos(a)*cos(b)\n+                            pattern = term1 + term2\n+                            if (pattern.has(sin) and pattern.has(cos) and\n+                                all(isinstance(arg.args[0], Rational) for arg in pattern.atoms(sin, cos))):\n+                                return cos(pattern.subs([(sin, lambda x: x), (cos, lambda x: x)]).simplify())\n \n     return trigsimpfunc(expr)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 79862a9..4fbb5fc 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -171,6 +171,16 @@ def trigsimp(expr, **opts):\n             return new\n         return trigsimp_groebner(new, **opts)\n     trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n+    if expr.has(sin, cos):\n+        if isinstance(expr, Add):\n+            terms = expr.args\n+            for i, term1 in enumerate(terms):\n+                if isinstance(term1, Mul) and any((isinstance(arg, (sin, cos)) for arg in term1.args)):\n+                    for term2 in terms[i + 1:]:\n+                        if isinstance(term2, Mul) and any((isinstance(arg, (sin, cos)) for arg in term2.args)):\n+                            pattern = term1 + term2\n+                            if pattern.has(sin) and pattern.has(cos) and all((isinstance(arg.args[0], Rational) for arg in pattern.atoms(sin, cos))):\n+                                return cos(pattern.subs([(sin, lambda x: x), (cos, lambda x: x)]).simplify())\n     return trigsimpfunc(expr)\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n", "normalized_occurrence": 1}
