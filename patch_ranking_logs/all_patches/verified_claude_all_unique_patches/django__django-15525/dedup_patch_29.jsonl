{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..ca758a9 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,12 +336,25 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        model_fields = {\n+            f.name: data[f.name]\n+            for f in Model._meta.fields\n+            if not f.is_relation and f.name in data\n+        }\n+        obj = Model(**model_fields)\n         try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n-            )\n-        except Model.DoesNotExist:\n+            if hasattr(obj, 'natural_key_fields'):\n+                natural_key = tuple(data[field] for field in obj.natural_key_fields)\n+            else:\n+                # For backwards compatibility\n+                natural_key = tuple(data[f.name] for f in Model._meta.fields if not f.is_relation and f.name in data)\n+            try:\n+                data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n+                    default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n+                )\n+            except Model.DoesNotExist:\n+                pass\n+        except (AttributeError, KeyError):\n             pass\n     return Model(**data)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..c26c154 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,10 +144,18 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n-        natural_key = Model(**data).natural_key()\n+        model_fields = {f.name: data[f.name] for f in Model._meta.fields if not f.is_relation and f.name in data}\n+        obj = Model(**model_fields)\n         try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n-        except Model.DoesNotExist:\n+            if hasattr(obj, 'natural_key_fields'):\n+                natural_key = tuple((data[field] for field in obj.natural_key_fields))\n+            else:\n+                natural_key = tuple((data[f.name] for f in Model._meta.fields if not f.is_relation and f.name in data))\n+            try:\n+                data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n+            except Model.DoesNotExist:\n+                pass\n+        except (AttributeError, KeyError):\n             pass\n     return Model(**data)\n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n", "normalized_occurrence": 1}
