{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..85fb502 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -382,7 +382,15 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            # For integer powers, multiply out the tensor product\n+            if e.exp.is_Integer and e.exp > 1:\n+                result = base\n+                for _ in range(int(e.exp) - 1):\n+                    result = tensor_product_simp_Mul(result * base)\n+                return result\n+        return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n@@ -390,4 +398,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..3d222c6 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -161,7 +161,14 @@ def tensor_product_simp(e, **hints):\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n-        return tensor_product_simp(e.base) ** e.exp\n+        base = tensor_product_simp(e.base)\n+        if isinstance(base, TensorProduct):\n+            if e.exp.is_Integer and e.exp > 1:\n+                result = base\n+                for _ in range(int(e.exp) - 1):\n+                    result = tensor_product_simp_Mul(result * base)\n+                return result\n+        return base ** e.exp\n     elif isinstance(e, Mul):\n         return tensor_product_simp_Mul(e)\n     elif isinstance(e, Commutator):\n", "normalized_occurrence": 1}
