{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex e82a744..7ff2db8 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -336,14 +336,19 @@ def build_instance(Model, data, db):\n         and hasattr(default_manager, \"get_by_natural_key\")\n         and hasattr(Model, \"natural_key\")\n     ):\n-        natural_key = Model(**data).natural_key()\n+        # The following block was added to ensure the correct database is used for natural key lookup\n+        # Build a temporary instance to retrieve the natural key\n+        instance = Model(**data)\n+        natural_key = instance.natural_key()\n         try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(\n-                default_manager.db_manager(db).get_by_natural_key(*natural_key).pk\n-            )\n+            # Use the database specified in `db` for the lookup\n+            related_instance = default_manager.db_manager(db).get_by_natural_key(*natural_key)\n+            data[Model._meta.pk.attname] = Model._meta.pk.to_python(related_instance.pk)\n         except Model.DoesNotExist:\n             pass\n-    return Model(**data)\n+    obj = Model(**data)\n+    obj._state.db = db  # Ensure the object knows which database it belongs to\n+    return obj\n \n \n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py\nindex 65e3dcb..024dc19 100644\n--- a/django/core/serializers/base.py\n+++ b/django/core/serializers/base.py\n@@ -144,12 +144,16 @@ def build_instance(Model, data, db):\n     default_manager = Model._meta.default_manager\n     pk = data.get(Model._meta.pk.attname)\n     if pk is None and hasattr(default_manager, 'get_by_natural_key') and hasattr(Model, 'natural_key'):\n-        natural_key = Model(**data).natural_key()\n+        instance = Model(**data)\n+        natural_key = instance.natural_key()\n         try:\n-            data[Model._meta.pk.attname] = Model._meta.pk.to_python(default_manager.db_manager(db).get_by_natural_key(*natural_key).pk)\n+            related_instance = default_manager.db_manager(db).get_by_natural_key(*natural_key)\n+            data[Model._meta.pk.attname] = Model._meta.pk.to_python(related_instance.pk)\n         except Model.DoesNotExist:\n             pass\n-    return Model(**data)\n+    obj = Model(**data)\n+    obj._state.db = db\n+    return obj\n def deserialize_m2m_values(field, field_value, using, handle_forward_references):\n     model = field.remote_field.model\n     if hasattr(model._default_manager, 'get_by_natural_key'):\n", "normalized_occurrence": 1}
