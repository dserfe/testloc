{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..5889cee 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,17 +233,31 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.relational import Relational\n+        \n+        # If either index is symbolic, we can't determine the block\n+        if isinstance(i, (Symbol, Relational)) or isinstance(j, (Symbol, Relational)):\n+            # Return an unevaluated indexed expression\n+            from sympy.matrices.expressions.matexpr import MatrixElement\n+            return MatrixElement(self, i, j)\n+            \n         # Find row entry\n+        orig_i, orig_j = i, j\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            i -= numrows\n+        else:\n+            raise IndexError(\"Row index %s out of bounds\" % orig_i)\n+            \n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            j -= numcols\n+        else:\n+            raise IndexError(\"Column index %s out of bounds\" % orig_j)\n+            \n         return self.blocks[row_block, col_block][i, j]\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..5121c36 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,16 +103,24 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy.core.symbol import Symbol\n+        from sympy.core.relational import Relational\n+        if isinstance(i, (Symbol, Relational)) or isinstance(j, (Symbol, Relational)):\n+            from sympy.matrices.expressions.matexpr import MatrixElement\n+            return MatrixElement(self, i, j)\n+        orig_i, orig_j = (i, j)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            if i < numrows:\n                 break\n-            else:\n-                i -= numrows\n+            i -= numrows\n+        else:\n+            raise IndexError('Row index %s out of bounds' % orig_i)\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            if j < numcols:\n                 break\n-            else:\n-                j -= numcols\n+            j -= numcols\n+        else:\n+            raise IndexError('Column index %s out of bounds' % orig_j)\n         return self.blocks[row_block, col_block][i, j]\n     @property\n     def is_Identity(self):\n", "normalized_occurrence": 1}
