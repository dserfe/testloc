{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..d75f9ca 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,8 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None and not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\"n_neighbors does not take float values, enter integer value\")\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -327,6 +329,8 @@ class KNeighborsMixin(object):\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\"n_neighbors does not take float values, enter integer value\")\n \n         if X is not None:\n             query_is_train = False\n", "occurrence": 2, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..779c2ec 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,6 +47,8 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n+        if n_neighbors is not None and (not isinstance(n_neighbors, (int, np.integer))):\n+            raise TypeError('n_neighbors does not take float values, enter integer value')\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -162,6 +164,8 @@ class KNeighborsMixin(object):\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError('n_neighbors does not take float values, enter integer value')\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n", "normalized_occurrence": 2}
