{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 4717cdb..0cd480c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -483,6 +483,11 @@ class QuerySet(AltersData):\n         return combined\n \n     def __xor__(self, other):\n+        \"\"\"\n+        Return the symmetric difference of two querysets using XOR.\n+        For databases without native XOR support, this ensures correct parity semantics\n+        (true when an odd number of operands are true).\n+        \"\"\"\n         self._check_operator_queryset(other, \"^\")\n         self._merge_sanity_check(other)\n         if isinstance(self, EmptyQuerySet):\n@@ -498,7 +503,27 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values(\"pk\"))\n-        combined.query.combine(other.query, sql.XOR)\n+        # Handle both native XOR and fallback parity checking\n+        if hasattr(combined.query.connection.ops, 'has_native_xor') and combined.query.connection.ops.has_native_xor():\n+            combined.query.combine(other.query, sql.XOR)\n+        else:\n+            # For databases without native XOR, implement parity checking:\n+            # (a AND NOT b) OR (NOT a AND b)\n+            left = query._chain()\n+            right = other._chain()\n+            \n+            # Create (a AND NOT b)\n+            left.query.combine(right.query, sql.AND, negate=True)\n+            \n+            # Create (NOT a AND b)\n+            not_left = query._chain()\n+            not_left.query.negate()\n+            not_right = other._chain()\n+            not_left.query.combine(not_right.query, sql.AND)\n+            \n+            # Combine with OR\n+            left.query.combine(not_left.query, sql.OR)\n+            combined = left\n         return combined\n \n     ####################################\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 2bec004..ca5c64c 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -269,7 +269,18 @@ class QuerySet(AltersData):\n         combined._merge_known_related_objects(other)\n         if not other.query.can_filter():\n             other = other.model._base_manager.filter(pk__in=other.values('pk'))\n-        combined.query.combine(other.query, sql.XOR)\n+        if hasattr(combined.query.connection.ops, 'has_native_xor') and combined.query.connection.ops.has_native_xor():\n+            combined.query.combine(other.query, sql.XOR)\n+        else:\n+            left = query._chain()\n+            right = other._chain()\n+            left.query.combine(right.query, sql.AND, negate=True)\n+            not_left = query._chain()\n+            not_left.query.negate()\n+            not_right = other._chain()\n+            not_left.query.combine(not_right.query, sql.AND)\n+            left.query.combine(not_left.query, sql.OR)\n+            combined = left\n         return combined\n     def _iterator(self, use_chunked_fetch, chunk_size):\n         iterable = self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size or 2000)\n", "normalized_occurrence": 1}
