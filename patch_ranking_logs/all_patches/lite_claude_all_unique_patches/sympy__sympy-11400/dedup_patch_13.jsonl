{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11400", "model_patch": "diff --git a/sympy/printing/ccode.py b/sympy/printing/ccode.py\nindex a3dbf34..8403d17 100644\n--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n@@ -15,6 +15,7 @@ from __future__ import print_function, division\n \n from sympy.core import S\n from sympy.core.compatibility import string_types, range\n+from sympy.functions import sin\n from sympy.codegen.ast import Assignment\n from sympy.printing.codeprinter import CodePrinter\n from sympy.printing.precedence import precedence\n@@ -251,6 +252,11 @@ class CCodePrinter(CodePrinter):\n     def _print_sign(self, func):\n         return '((({0}) > 0) - (({0}) < 0))'.format(self._print(func.args[0]))\n \n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise, Ne\n+        x = expr.args[0]\n+        return self._print(Piecewise((sin(x)/x, Ne(x, 0)), (1, True)))\n+\n     def indent_code(self, code):\n         \"\"\"Accepts a string of code or a list of code lines\"\"\"\n \n", "occurrence": 1, "normalized_patch": "--- a/sympy/printing/ccode.py\n+++ b/sympy/printing/ccode.py\n+from sympy.functions import sin\n+    def _print_sinc(self, expr):\n+        from sympy.functions import Piecewise, Ne\n+        x = expr.args[0]\n+        return self._print(Piecewise((sin(x) / x, Ne(x, 0)), (1, True)))", "normalized_occurrence": 1}
