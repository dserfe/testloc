{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-7114", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a7d6e52..4ec6521 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -85,9 +85,14 @@ def expand_modules(\n         if os.path.exists(something):\n             # this is a file or a directory\n             try:\n-                modname = \".\".join(\n-                    modutils.modpath_from_file(something, path=additional_search_path)\n-                )\n+                # Handle the case where module name matches directory name\n+                if (os.path.isfile(something) and\n+                    os.path.basename(os.path.dirname(something)) == os.path.splitext(basename)[0]):\n+                    modname = os.path.splitext(basename)[0]\n+                else:\n+                    modname = \".\".join(\n+                        modutils.modpath_from_file(something, path=additional_search_path)\n+                    )\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n             if os.path.isdir(something):\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex a1d3fbd..3c9fe56 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -38,7 +38,10 @@ def expand_modules(files_or_modules: Sequence[str], ignore_list: list[str], igno\n         additional_search_path = ['.', module_path] + path\n         if os.path.exists(something):\n             try:\n-                modname = '.'.join(modutils.modpath_from_file(something, path=additional_search_path))\n+                if os.path.isfile(something) and os.path.basename(os.path.dirname(something)) == os.path.splitext(basename)[0]:\n+                    modname = os.path.splitext(basename)[0]\n+                else:\n+                    modname = '.'.join(modutils.modpath_from_file(something, path=additional_search_path))\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n             if os.path.isdir(something):\n", "normalized_occurrence": 1}
