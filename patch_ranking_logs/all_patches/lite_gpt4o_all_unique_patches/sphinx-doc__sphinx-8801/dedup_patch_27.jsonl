{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8801", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 16f59c0..475071b 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -297,7 +297,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n             # annotation only member (ex. attr: int)\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n-                if name and name not in members:\n+                if name and name not in members and name not in obj_dict:\n                     members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n \n             # append instance attributes (cf. self.attr1) if analyzer knows\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 7792b8a..07c50b0 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -191,7 +191,7 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable) ->\n         for cls in getmro(subject):\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n-                if name and name not in members:\n+                if name and name not in members and (name not in obj_dict):\n                     members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n             try:\n                 modname = safe_getattr(cls, '__module__')\n", "normalized_occurrence": 1}
