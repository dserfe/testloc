{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..58f0c8f 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,13 +707,47 @@ class _EvaluatorPrinter(object):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n+        from sympy.core.symbol import Symbol\n \n         dummify = self._dummify\n \n         # Args of type Dummy can cause name collisions with args\n         # of type Symbol.  Force dummify of everything in this\n+        # context to avoid name collisions.\n+\n+        def make_dummy(arg, typ):\n+            d = Dummy('d')\n+            if isinstance(arg, MatrixSymbol):\n+                d = MatrixSymbol(d.name, arg.rows, arg.cols)\n+            return d\n+\n+        def replace_bad_ident(bad_name, argtype=None):\n+            if not self._is_safe_ident(bad_name):\n+                return make_dummy(argtype, type(argtype)) if argtype else Dummy()\n+            return None\n+\n+        new_args = []\n+        if not isinstance(args, (tuple, list)):\n+            args = [args]\n+        new_symbs = {}\n+        for i, a in enumerate(args):\n+            if isinstance(a, (Symbol, MatrixSymbol)):\n+                # If dummify is True or identifier is not safe, replace arg\n+                if dummify or not self._is_safe_ident(a.name):\n+                    dummy = make_dummy(a, a)\n+                    new_symbs[a] = dummy\n+                    new_args.append(dummy)\n+                    continue\n+            elif isinstance(a, (Function, DeferredVector)):\n+                # If dummify is True or identifier is not safe, replace arg\n+                if dummify or not self._is_safe_ident(a.name):\n+                    dummy = make_dummy(a, a)\n+                    new_symbs[a] = dummy\n+                    new_args.append(dummy)\n+                    continue\n+            new_args.append(a)\n         # situation.\n         if not dummify:\n             dummify = any(isinstance(arg, Dummy) for arg in flatten(args))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..6e3e65f 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -282,9 +282,37 @@ class _EvaluatorPrinter(object):\n         def _is_safe_ident(cls, ident):\n             return isinstance(ident, str) and cls._safe_ident_re.match(ident) and (not (keyword.iskeyword(ident) or ident == 'None'))\n     def _preprocess(self, args, expr):\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, flatten, MatrixSymbol\n         from sympy.matrices import DeferredVector\n+        from sympy.core.symbol import Symbol\n         dummify = self._dummify\n+        def make_dummy(arg, typ):\n+            d = Dummy('d')\n+            if isinstance(arg, MatrixSymbol):\n+                d = MatrixSymbol(d.name, arg.rows, arg.cols)\n+            return d\n+        def replace_bad_ident(bad_name, argtype=None):\n+            if not self._is_safe_ident(bad_name):\n+                return make_dummy(argtype, type(argtype)) if argtype else Dummy()\n+            return None\n+        new_args = []\n+        if not isinstance(args, (tuple, list)):\n+            args = [args]\n+        new_symbs = {}\n+        for i, a in enumerate(args):\n+            if isinstance(a, (Symbol, MatrixSymbol)):\n+                if dummify or not self._is_safe_ident(a.name):\n+                    dummy = make_dummy(a, a)\n+                    new_symbs[a] = dummy\n+                    new_args.append(dummy)\n+                    continue\n+            elif isinstance(a, (Function, DeferredVector)):\n+                if dummify or not self._is_safe_ident(a.name):\n+                    dummy = make_dummy(a, a)\n+                    new_symbs[a] = dummy\n+                    new_args.append(dummy)\n+                    continue\n+            new_args.append(a)\n         if not dummify:\n             dummify = any((isinstance(arg, Dummy) for arg in flatten(args)))\n         argstrs = []\n", "normalized_occurrence": 1}
