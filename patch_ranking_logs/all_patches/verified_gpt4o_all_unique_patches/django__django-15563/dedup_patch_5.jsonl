{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..1a8df08 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -987,7 +987,20 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        if self.model._meta.parents:\n+            for parent in self.model._meta.parents.keys():\n+                parent_query = self.query.chain(sql.UpdateQuery)\n+                parent_table = parent._meta.db_table\n+                parent_query.add_update_values({\n+                    parent._meta.get_field(field).attname: value\n+                    for field, value in kwargs.items()\n+                    if parent._meta.get_field(field) is not None\n+                })\n+                parent_query.set_table(parent_table)\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows = parent_query.get_compiler(self.db).execute_sql(CURSOR)\n+        else:\n+            query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..dfe9d0e 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -532,7 +532,16 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        if self.model._meta.parents:\n+            for parent in self.model._meta.parents.keys():\n+                parent_query = self.query.chain(sql.UpdateQuery)\n+                parent_table = parent._meta.db_table\n+                parent_query.add_update_values({parent._meta.get_field(field).attname: value for field, value in kwargs.items() if parent._meta.get_field(field) is not None})\n+                parent_query.set_table(parent_table)\n+                with transaction.mark_for_rollback_on_error(using=self.db):\n+                    rows = parent_query.get_compiler(self.db).execute_sql(CURSOR)\n+        else:\n+            query = self.query.chain(sql.UpdateQuery)\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "normalized_occurrence": 1}
