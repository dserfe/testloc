{"model_name_or_path": "agentless", "instance_id": "django__django-14238", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..5ea4b14 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2518,7 +2518,11 @@ class AutoFieldMeta(type):\n \n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        base_subclasses = (BigAutoField, SmallAutoField)\n+        subclasses = set(base_subclasses)\n+        for subclass in base_subclasses:\n+            subclasses.update(subclass.__subclasses__())\n+        return tuple(subclasses)\n \n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..f3359c1 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1309,7 +1309,11 @@ class AutoFieldMixin:\n class AutoFieldMeta(type):\n     @property\n     def _subclasses(self):\n-        return (BigAutoField, SmallAutoField)\n+        base_subclasses = (BigAutoField, SmallAutoField)\n+        subclasses = set(base_subclasses)\n+        for subclass in base_subclasses:\n+            subclasses.update(subclass.__subclasses__())\n+        return tuple(subclasses)\n     def __instancecheck__(self, instance):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n     def __subclasscheck__(self, subclass):\n", "normalized_occurrence": 1}
