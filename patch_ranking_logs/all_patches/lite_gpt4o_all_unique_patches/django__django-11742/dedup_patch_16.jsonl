{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..6009c74 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -239,7 +239,19 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                # Check if choices fit within max_length\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest choice.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        )\n+            return errors\n \n     def _check_choices(self):\n         if not self.choices:\n@@ -280,7 +292,19 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                # Check if choices fit within max_length\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest choice.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        )\n+            return errors\n \n         return [\n             checks.Error(\n@@ -301,7 +325,19 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                # Check if choices fit within max_length\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest choice.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        )\n+            return errors\n \n     def _check_null_allowed_for_primary_keys(self):\n         if (self.primary_key and self.null and\n@@ -319,7 +355,19 @@ class Field(RegisterLookupMixin):\n                 )\n             ]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                # Check if choices fit within max_length\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(\n+                            checks.Error(\n+                                \"'max_length' is too small to fit the longest choice.\",\n+                                obj=self,\n+                                id='fields.E009',\n+                            )\n+                        )\n+            return errors\n \n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..5b103e3 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -116,7 +116,12 @@ class Field(RegisterLookupMixin):\n         elif self.name == 'pk':\n             return [checks.Error(\"'pk' is a reserved word that cannot be used as a field name.\", obj=self, id='fields.E003')]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(checks.Error(\"'max_length' is too small to fit the longest choice.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_choices(self):\n         if not self.choices:\n             return []\n@@ -139,18 +144,33 @@ class Field(RegisterLookupMixin):\n             if isinstance(choices_group, str):\n                 break\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(checks.Error(\"'max_length' is too small to fit the longest choice.\", obj=self, id='fields.E009'))\n+            return errors\n         return [checks.Error(\"'choices' must be an iterable containing (actual value, human readable name) tuples.\", obj=self, id='fields.E005')]\n     def _check_db_index(self):\n         if self.db_index not in (None, True, False):\n             return [checks.Error(\"'db_index' must be None, True or False.\", obj=self, id='fields.E006')]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(checks.Error(\"'max_length' is too small to fit the longest choice.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_null_allowed_for_primary_keys(self):\n         if self.primary_key and self.null and (not connection.features.interprets_empty_strings_as_nulls):\n             return [checks.Error('Primary keys must not have null=True.', hint='Set null=False on the field, or remove primary_key=True argument.', obj=self, id='fields.E007')]\n         else:\n-            return []\n+            errors = []\n+            if self.max_length is not None:\n+                for choice, _ in self.flatchoices:\n+                    if len(str(choice)) > self.max_length:\n+                        errors.append(checks.Error(\"'max_length' is too small to fit the longest choice.\", obj=self, id='fields.E009'))\n+            return errors\n     def _check_backend_specific_checks(self, **kwargs):\n         app_label = self.model._meta.app_label\n         for db in connections:\n", "normalized_occurrence": 1}
