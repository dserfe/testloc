{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..fde773a 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -61,6 +61,8 @@ def get_candidate_relations_to_delete(opts):\n     )\n \n \n+from django.db.models import Q\n+\n class Collector:\n     def __init__(self, using):\n         self.using = using\n@@ -310,9 +312,29 @@ class Collector:\n                     )\n \n             # fast deletes\n+            # Group fast deletes by model\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                model = qs.model\n+                if model not in fast_deletes_by_model:\n+                    fast_deletes_by_model[model] = []\n+                fast_deletes_by_model[model].append(qs)\n+            \n+            # Process each model's fast deletes\n+            for model, querysets in fast_deletes_by_model.items():\n+                if len(querysets) == 1:\n+                    # Single queryset case - no need to combine\n+                    count = querysets[0]._raw_delete(using=self.using)\n+                else:\n+                    # Multiple querysets case - combine them using OR\n+                    combined_filter = Q()\n+                    for qs in querysets:\n+                        combined_filter |= qs.query.where\n+                    \n+                    combined_qs = model._base_manager.using(self.using).filter(combined_filter)\n+                    count = combined_qs._raw_delete(using=self.using)\n+                \n+                deleted_counter[model._meta.label] += count\n \n             # update fields\n             for model, instances_for_fieldvalues in self.field_updates.items():\n@@ -346,4 +368,4 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..93df6a3 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -30,6 +30,7 @@ def DO_NOTHING(collector, field, sub_objs, using):\n     pass\n def get_candidate_relations_to_delete(opts):\n     return (f for f in opts.get_fields(include_hidden=True) if f.auto_created and (not f.concrete) and (f.one_to_one or f.one_to_many))\n+from django.db.models import Q\n class Collector:\n     def __init__(self, using):\n         self.using = using\n@@ -156,9 +157,22 @@ class Collector:\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n                     signals.pre_delete.send(sender=model, instance=obj, using=self.using)\n+            fast_deletes_by_model = {}\n             for qs in self.fast_deletes:\n-                count = qs._raw_delete(using=self.using)\n-                deleted_counter[qs.model._meta.label] += count\n+                model = qs.model\n+                if model not in fast_deletes_by_model:\n+                    fast_deletes_by_model[model] = []\n+                fast_deletes_by_model[model].append(qs)\n+            for model, querysets in fast_deletes_by_model.items():\n+                if len(querysets) == 1:\n+                    count = querysets[0]._raw_delete(using=self.using)\n+                else:\n+                    combined_filter = Q()\n+                    for qs in querysets:\n+                        combined_filter |= qs.query.where\n+                    combined_qs = model._base_manager.using(self.using).filter(combined_filter)\n+                    count = combined_qs._raw_delete(using=self.using)\n+                deleted_counter[model._meta.label] += count\n             for model, instances_for_fieldvalues in self.field_updates.items():\n                 for (field, value), instances in instances_for_fieldvalues.items():\n                     query = sql.UpdateQuery(model)\n", "normalized_occurrence": 1}
