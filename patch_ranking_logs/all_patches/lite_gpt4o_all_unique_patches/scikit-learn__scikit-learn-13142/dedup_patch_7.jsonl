{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13142", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex a853e4a..233d5f4 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -371,7 +371,8 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n         \"\"\"\n         self._check_is_fitted()\n         X = _check_X(X, None, self.means_.shape[1])\n-        return self._estimate_weighted_log_prob(X).argmax(axis=1)\n+        _, log_resp = self._e_step(X)\n+        return log_resp.argmax(axis=1)\n \n     def predict_proba(self, X):\n         \"\"\"Predict posterior probability of each component given the data.\n", "occurrence": 4, "normalized_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex 9518b16..afc91b8 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -124,7 +124,8 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n     def predict(self, X):\n         self._check_is_fitted()\n         X = _check_X(X, None, self.means_.shape[1])\n-        return self._estimate_weighted_log_prob(X).argmax(axis=1)\n+        _, log_resp = self._e_step(X)\n+        return log_resp.argmax(axis=1)\n     def predict_proba(self, X):\n         self._check_is_fitted()\n         X = _check_X(X, None, self.means_.shape[1])\n", "normalized_occurrence": 5}
