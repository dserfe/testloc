{"model_name_or_path": "agentless", "instance_id": "django__django-11740", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 816737e..823021d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -184,6 +184,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -197,7 +198,16 @@ class MigrationAutodetector:\n \n         return self.migrations\n \n-    def _prepare_field_lists(self):\n+    def generate_foreign_key_dependencies(self):\n+        \"\"\"\n+        Generate dependencies for foreign key fields.\n+        \"\"\"\n+        for (app_label, model_name), model_state in sorted(self.kept_model_keys):\n+            for field_name, field in model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dependency in dependencies:\n+                        self.add_dependency(app_label, model_name, dependency[0], dependency[1])\n         \"\"\"\n         Prepare field lists and a list of the fields that used through models\n         in the old state so dependencies can be made from the through model\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 9fda64b..22c8644 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -98,6 +98,7 @@ class MigrationAutodetector:\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_foreign_key_dependencies()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n         self.generate_added_indexes()\n@@ -108,7 +109,14 @@ class MigrationAutodetector:\n         self._build_migration_list(graph)\n         self._optimize_migrations()\n         return self.migrations\n-    def _prepare_field_lists(self):\n+    def generate_foreign_key_dependencies(self):\n+        for (app_label, model_name), model_state in sorted(self.kept_model_keys):\n+            for field_name, field in model_state.fields.items():\n+                if isinstance(field, models.ForeignKey):\n+                    dependencies = self._get_dependencies_for_foreign_key(field)\n+                    for dependency in dependencies:\n+                        self.add_dependency(app_label, model_name, dependency[0], dependency[1])\n+        '\\n        Prepare field lists and a list of the fields that used through models\\n        in the old state so dependencies can be made from the through model\\n        deletion to the field that uses it.\\n        '\n         self.kept_model_keys = self.old_model_keys & self.new_model_keys\n         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys\n         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys\n", "normalized_occurrence": 1}
