{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11299", "model_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex 4b9cb31..2e719dc 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -37,7 +37,14 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n-        return sql % tuple(schema_editor.quote_value(p) for p in params)\n+        sql = sql % tuple(schema_editor.quote_value(p) for p in params)\n+        # Strip qualified table names from fields\n+        table_name = model._meta.db_table\n+        qualified_pattern = f'\"{table_name}\".'\n+        new_qualified_pattern = f'\"new__{table_name}\".'\n+        sql = sql.replace(qualified_pattern, '')\n+        sql = sql.replace(new_qualified_pattern, '')\n+        return sql\n \n     def constraint_sql(self, model, schema_editor):\n         check = self._get_check_sql(model, schema_editor)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py\nindex cc6f0d3..f93ce67 100644\n--- a/django/db/models/constraints.py\n+++ b/django/db/models/constraints.py\n@@ -26,7 +26,13 @@ class CheckConstraint(BaseConstraint):\n         where = query.build_where(self.check)\n         compiler = query.get_compiler(connection=schema_editor.connection)\n         sql, params = where.as_sql(compiler, schema_editor.connection)\n-        return sql % tuple((schema_editor.quote_value(p) for p in params))\n+        sql = sql % tuple((schema_editor.quote_value(p) for p in params))\n+        table_name = model._meta.db_table\n+        qualified_pattern = f'\"{table_name}\".'\n+        new_qualified_pattern = f'\"new__{table_name}\".'\n+        sql = sql.replace(qualified_pattern, '')\n+        sql = sql.replace(new_qualified_pattern, '')\n+        return sql\n     def constraint_sql(self, model, schema_editor):\n         check = self._get_check_sql(model, schema_editor)\n         return schema_editor._check_sql(self.name, check)\n", "normalized_occurrence": 1}
