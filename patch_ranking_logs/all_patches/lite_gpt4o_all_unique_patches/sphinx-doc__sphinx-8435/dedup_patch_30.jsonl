{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..569d236 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -24,15 +24,18 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n+        annotations = app.env.temp_data.setdefault('annotations', {})\n+        annotation = annotations.setdefault(name, OrderedDict())\n         if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n+        elif hasattr(obj, '__annotations__'):\n+            for var, var_type in obj.__annotations__.items():\n+                annotation[var] = typing.stringify(var_type)\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..99b3af0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -8,15 +8,18 @@ from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n     try:\n+        annotations = app.env.temp_data.setdefault('annotations', {})\n+        annotation = annotations.setdefault(name, OrderedDict())\n         if callable(obj):\n-            annotations = app.env.temp_data.setdefault('annotations', {})\n-            annotation = annotations.setdefault(name, OrderedDict())\n             sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n+        elif hasattr(obj, '__annotations__'):\n+            for var, var_type in obj.__annotations__.items():\n+                annotation[var] = typing.stringify(var_type)\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
