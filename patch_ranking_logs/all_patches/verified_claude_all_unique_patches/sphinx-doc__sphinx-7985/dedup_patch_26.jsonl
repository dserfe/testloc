{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..9bc4a2b 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,17 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if the local reference exists in the environment\n+                if ':' in uri:  # Cross-reference to another doc\n+                    docname, labelid = uri.split(':', 1)\n+                    if docname not in self.env.all_docs:\n+                        return 'broken', 'Document not found: ' + docname, 0\n+                    if labelid and labelid not in self.env.labels:\n+                        return 'broken', 'Label not found: ' + labelid, 0\n+                else:  # Reference within same document\n+                    if uri not in self.env.labels:\n+                        return 'broken', 'Label not found: ' + uri, 0\n+                return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..62cd980 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,15 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if ':' in uri:\n+                    docname, labelid = uri.split(':', 1)\n+                    if docname not in self.env.all_docs:\n+                        return ('broken', 'Document not found: ' + docname, 0)\n+                    if labelid and labelid not in self.env.labels:\n+                        return ('broken', 'Label not found: ' + labelid, 0)\n+                elif uri not in self.env.labels:\n+                    return ('broken', 'Label not found: ' + uri, 0)\n+                return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n", "normalized_occurrence": 1}
