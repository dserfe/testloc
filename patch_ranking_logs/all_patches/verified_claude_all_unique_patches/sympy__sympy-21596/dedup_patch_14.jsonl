{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..8d24766 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1389,6 +1389,13 @@ class Intersection(Set, LatticeOp):\n         raise NotImplementedError()\n \n     def _contains(self, other):\n+        # If any of the sets definitely doesn't contain other, return False\n+        for s in self.args:\n+            result = s.contains(other)\n+            if result is False:\n+                return False\n+        \n+        # Check containment in all sets\n         return And(*[set.contains(other) for set in self.args])\n \n     def __iter__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..c03f849 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -530,6 +530,10 @@ class Intersection(Set, LatticeOp):\n     def _sup(self):\n         raise NotImplementedError()\n     def _contains(self, other):\n+        for s in self.args:\n+            result = s.contains(other)\n+            if result is False:\n+                return False\n         return And(*[set.contains(other) for set in self.args])\n     def __iter__(self):\n         sets_sift = sift(self.args, lambda x: x.is_iterable)\n", "normalized_occurrence": 1}
