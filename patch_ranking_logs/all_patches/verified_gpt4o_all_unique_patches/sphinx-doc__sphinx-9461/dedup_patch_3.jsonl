{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..31d8b01 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1679,6 +1679,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+        if isinstance(self.object, property):\n+            self.object = self.object.fget\n         if self.doc_as_attr:\n             # Don't show the docstring of the class when it is an alias.\n             comment = self.get_variable_comment()\n@@ -2067,8 +2069,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     priority = 1  # must be more than FunctionDocumenter\n \n     @classmethod\n-    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n-                            ) -> bool:\n+    def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n+        if isinstance(member, (classmethod, staticmethod)):\n+            member = member.__func__\n         return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n@@ -2229,6 +2232,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             return None\n \n     def get_doc(self, ignore: int = None) -> Optional[List[List[str]]]:\n+        if isinstance(self.object, property):\n+            self.object = self.object.fget\n         if self.objpath[-1] == '__init__':\n             docstring = getdoc(self.object, self.get_attr,\n                                self.config.autodoc_inherit_docstrings,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..a99e588 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -959,6 +959,8 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n+        if isinstance(self.object, property):\n+            self.object = self.object.fget\n         if self.doc_as_attr:\n             comment = self.get_variable_comment()\n             if comment:\n@@ -1200,6 +1202,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n     priority = 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n+        if isinstance(member, (classmethod, staticmethod)):\n+            member = member.__func__\n         return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter))\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -1315,6 +1319,8 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n         else:\n             return None\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n+        if isinstance(self.object, property):\n+            self.object = self.object.fget\n         if self.objpath[-1] == '__init__':\n             docstring = getdoc(self.object, self.get_attr, self.config.autodoc_inherit_docstrings, self.parent, self.object_name)\n             if docstring is not None and (docstring == object.__init__.__doc__ or docstring.strip() == object.__init__.__doc__):\n", "normalized_occurrence": 1}
