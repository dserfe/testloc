{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..d83a228 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -403,6 +403,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     after = ['gens']\n \n     _re_realfield = re.compile(r\"^(R|RR)(_(\\d+))?$\")\n+    _re_real_poly = re.compile(r\"^(R|RR)\\[(.+)\\]$\")\n+    _re_real_frac = re.compile(r\"^(R|RR)\\((.+)\\)$\")\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n@@ -480,7 +482,19 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+            r = cls._re_real_poly.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+\n+            r = cls._re_real_frac.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.frac_field(*gens)\n+\n+        raise OptionError('expected a valid domain specification, got \"%s\"' % domain)\n \n     @classmethod\n     def postprocess(cls, options):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..fb56a5f 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -229,6 +229,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     excludes = ['field', 'greedy', 'split', 'gaussian', 'extension']\n     after = ['gens']\n     _re_realfield = re.compile('^(R|RR)(_(\\\\d+))?$')\n+    _re_real_poly = re.compile('^(R|RR)\\\\[(.+)\\\\]$')\n+    _re_real_frac = re.compile('^(R|RR)\\\\((.+)\\\\)$')\n     _re_complexfield = re.compile('^(C|CC)(_(\\\\d+))?$')\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n@@ -284,7 +286,15 @@ class Domain(with_metaclass(OptionType, Option)):\n             if r is not None:\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+            r = cls._re_real_poly.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+            r = cls._re_real_frac.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.frac_field(*gens)\n+        raise OptionError('expected a valid domain specification, got \"%s\"' % domain)\n     @classmethod\n     def postprocess(cls, options):\n         if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n", "normalized_occurrence": 1}
