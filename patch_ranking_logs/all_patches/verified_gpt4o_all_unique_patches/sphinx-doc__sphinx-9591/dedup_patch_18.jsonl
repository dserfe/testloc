{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..31ba6c4 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -31,7 +31,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n+            if sig.return_annotation is not sig.empty and app.config.autodoc_typehints in ('both', 'description'):\n+                if isinstance(sig.return_annotation, str):\n+                    annotation['return'] = sig.return_annotation\n+                else:\n+                    annotation['return'] = typing.stringify(sig.return_annotation, 'smart')\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..d09510c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -15,7 +15,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n-            if sig.return_annotation is not sig.empty:\n+            if sig.return_annotation is not sig.empty and app.config.autodoc_typehints in ('both', 'description'):\n+                if isinstance(sig.return_annotation, str):\n+                    annotation['return'] = sig.return_annotation\n+                else:\n+                    annotation['return'] = typing.stringify(sig.return_annotation, 'smart')\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n", "normalized_occurrence": 1}
