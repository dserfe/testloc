{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..6ce5b1b 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -292,6 +292,9 @@ def type_of_target(y, input_name=\"\"):\n         )\n \n     sparse_pandas = y.__class__.__name__ in [\"SparseSeries\", \"SparseArray\"]\n+    if hasattr(y, \"dtype\") and hasattr(y.dtype, \"name\"):\n+        if y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"]:\n+            y = np.asarray(y)\n     if sparse_pandas:\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..afeebc5 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -69,6 +69,9 @@ def type_of_target(y, input_name=''):\n     if not valid:\n         raise ValueError('Expected array-like (array or non-string sequence), got %r' % y)\n     sparse_pandas = y.__class__.__name__ in ['SparseSeries', 'SparseArray']\n+    if hasattr(y, 'dtype') and hasattr(y.dtype, 'name'):\n+        if y.dtype.name in ['Int64', 'Float64', 'boolean']:\n+            y = np.asarray(y)\n     if sparse_pandas:\n         raise ValueError(\"y cannot be class 'SparseSeries' or 'SparseArray'\")\n     if is_multilabel(y):\n", "normalized_occurrence": 1}
