{"model_name_or_path": "agentless", "instance_id": "django__django-15731", "model_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 768c26e..00c52b8 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -84,8 +84,10 @@ class BaseManager:\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n \n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n+            from functools import wraps\n+            @wraps(method)\n+            def manager_method(self, *args, **kwargs):\n+                return getattr(self.get_queryset(), name)(*args, **kwargs)\n             return manager_method\n \n         new_methods = {}\n", "occurrence": 6, "normalized_patch": "diff --git a/django/db/models/manager.py b/django/db/models/manager.py\nindex 3cbea33..3987237 100644\n--- a/django/db/models/manager.py\n+++ b/django/db/models/manager.py\n@@ -40,8 +40,10 @@ class BaseManager:\n         def create_method(name, method):\n             def manager_method(self, *args, **kwargs):\n                 return getattr(self.get_queryset(), name)(*args, **kwargs)\n-            manager_method.__name__ = method.__name__\n-            manager_method.__doc__ = method.__doc__\n+            from functools import wraps\n+            @wraps(method)\n+            def manager_method(self, *args, **kwargs):\n+                return getattr(self.get_queryset(), name)(*args, **kwargs)\n             return manager_method\n         new_methods = {}\n         for name, method in inspect.getmembers(queryset_class, predicate=inspect.isfunction):\n", "normalized_occurrence": 6}
