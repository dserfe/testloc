{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..e0017f4 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -410,7 +410,13 @@ class DimensionSystem(Basic, _QuantityMapper):\n                     else:\n                         raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n                 else:\n-                    if all(item == {} for item in dicts):\n+                    # Check if arguments are dimensionless either by empty dependencies\n+                    # or by dimension system evaluation\n+                    is_dimensionless = all(\n+                        item == {} or self.is_dimensionless(Dimension._from_dimensional_dependencies(item))\n+                        for item in dicts\n+                    )\n+                    if is_dimensionless:\n                         return {}\n                     else:\n                         raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..8f8d5e9 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -236,10 +236,12 @@ class DimensionSystem(Basic, _QuantityMapper):\n                         return {}\n                     else:\n                         raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n-                elif all((item == {} for item in dicts)):\n-                    return {}\n                 else:\n-                    raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n+                    is_dimensionless = all((item == {} or self.is_dimensionless(Dimension._from_dimensional_dependencies(item)) for item in dicts))\n+                    if is_dimensionless:\n+                        return {}\n+                    else:\n+                        raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n             else:\n                 return get_for_name(result)\n         raise TypeError('Type {} not implemented for get_dimensional_dependencies'.format(type(dimension.name)))\n", "normalized_occurrence": 1}
