{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 81d2785..77e83da 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -196,7 +196,8 @@ class _LocIndexer:\n             # expand the indexer so we can handle Ellipsis\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n             key = dict(zip(self.data_array.dims, labels))\n-        return self.data_array.sel(**key)\n+        sanitized_key = {k if k != \"method\" else \"_method\": v for k, v in key.items()}\n+        return self.data_array.sel(**sanitized_key)\n \n     def __setitem__(self, key, value) -> None:\n         if not utils.is_dict_like(key):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4be0f90..72c62fe 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -95,7 +95,8 @@ class _LocIndexer:\n         if not utils.is_dict_like(key):\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n             key = dict(zip(self.data_array.dims, labels))\n-        return self.data_array.sel(**key)\n+        sanitized_key = {k if k != 'method' else '_method': v for k, v in key.items()}\n+        return self.data_array.sel(**sanitized_key)\n     def __setitem__(self, key, value) -> None:\n         if not utils.is_dict_like(key):\n             labels = indexing.expanded_indexer(key, self.data_array.ndim)\n", "normalized_occurrence": 2}
