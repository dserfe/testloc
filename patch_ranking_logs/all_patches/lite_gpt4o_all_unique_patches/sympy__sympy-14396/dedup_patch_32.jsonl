{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..f675adb 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -405,7 +405,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_realfield = re.compile(r\"^(R|RR)(_(\\d+))?$\")\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n-    _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n+    _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ|R|RR|C|CC)\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n@@ -432,7 +432,10 @@ class Domain(with_metaclass(OptionType, Option)):\n \n                 if prec is None:\n                     return sympy.polys.domains.RR\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.RealField(int(prec))\n \n             r = cls._re_complexfield.match(domain)\n@@ -442,7 +445,10 @@ class Domain(with_metaclass(OptionType, Option)):\n \n                 if prec is None:\n                     return sympy.polys.domains.CC\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.ComplexField(int(prec))\n \n             r = cls._re_finitefield.match(domain)\n@@ -459,7 +465,10 @@ class Domain(with_metaclass(OptionType, Option)):\n \n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n \n             r = cls._re_fraction.match(domain)\n@@ -471,7 +480,10 @@ class Domain(with_metaclass(OptionType, Option)):\n \n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.frac_field(*gens)\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.QQ.frac_field(*gens)\n \n             r = cls._re_algebraic.match(domain)\n@@ -480,7 +492,7 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError('Expected a valid domain specification, got %s. Make sure the domain is an appropriate field such as ZZ, QQ, RR, CC, or a polynomial or fraction field, e.g., ZZ[x], QQ(x), RR[y,z].' % domain)\n \n     @classmethod\n     def postprocess(cls, options):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..3b2817a 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -231,7 +231,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_realfield = re.compile('^(R|RR)(_(\\\\d+))?$')\n     _re_complexfield = re.compile('^(C|CC)(_(\\\\d+))?$')\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n-    _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n+    _re_polynomial = re.compile('^(Z|ZZ|Q|QQ|R|RR|C|CC)\\\\[(.+)\\\\]$')\n     _re_fraction = re.compile('^(Z|ZZ|Q|QQ)\\\\((.+)\\\\)$')\n     _re_algebraic = re.compile('^(Q|QQ)\\\\<(.+)\\\\>$')\n     @classmethod\n@@ -252,14 +252,20 @@ class Domain(with_metaclass(OptionType, Option)):\n                 _, _, prec = r.groups()\n                 if prec is None:\n                     return sympy.polys.domains.RR\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.RealField(int(prec))\n             r = cls._re_complexfield.match(domain)\n             if r is not None:\n                 _, _, prec = r.groups()\n                 if prec is None:\n                     return sympy.polys.domains.CC\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.ComplexField(int(prec))\n             r = cls._re_finitefield.match(domain)\n             if r is not None:\n@@ -270,7 +276,10 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, gens.split(',')))\n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n             r = cls._re_fraction.match(domain)\n             if r is not None:\n@@ -278,13 +287,16 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, gens.split(',')))\n                 if ground in ['Z', 'ZZ']:\n                     return sympy.polys.domains.ZZ.frac_field(*gens)\n-                else:\n+                elif ground in ['R', 'RR']:\n+                    return sympy.polys.domains.RR.poly_ring(*gens)\n+                elif ground in ['C', 'CC']:\n+                    return sympy.polys.domains.CC.poly_ring(*gens)\n                     return sympy.polys.domains.QQ.frac_field(*gens)\n             r = cls._re_algebraic.match(domain)\n             if r is not None:\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError('Expected a valid domain specification, got %s. Make sure the domain is an appropriate field such as ZZ, QQ, RR, CC, or a polynomial or fraction field, e.g., ZZ[x], QQ(x), RR[y,z].' % domain)\n     @classmethod\n     def postprocess(cls, options):\n         if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n", "normalized_occurrence": 1}
