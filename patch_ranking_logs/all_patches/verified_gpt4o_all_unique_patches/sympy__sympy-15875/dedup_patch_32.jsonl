{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..d4d3c38 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -536,23 +536,17 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im = []\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n-                return\n-        if z == len(self.args):\n+                if a.is_real is None or a.is_imaginary is None:\n+                    return\n+                im.append(a)\n+        if z + len(im) == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n@@ -562,7 +556,7 @@ class Add(Expr, AssocOp):\n                 return True\n             if im and not im_or_z:\n                 return False\n-        if b.is_zero is False:\n+        if b.is_zero is False or (b.is_zero is None and im):\n             return False\n \n     def _eval_is_odd(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..381d028 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -290,23 +290,17 @@ class Add(Expr, AssocOp):\n             return\n         nz = []\n         z = 0\n-        im_or_z = False\n-        im = False\n+        im = []\n         for a in self.args:\n-            if a.is_real:\n-                if a.is_zero:\n-                    z += 1\n-                elif a.is_zero is False:\n-                    nz.append(a)\n-                else:\n-                    return\n-            elif a.is_imaginary:\n-                im = True\n-            elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+            if a.is_zero:\n+                z += 1\n+            elif a.is_zero is False:\n+                nz.append(a)\n             else:\n-                return\n-        if z == len(self.args):\n+                if a.is_real is None or a.is_imaginary is None:\n+                    return\n+                im.append(a)\n+        if z + len(im) == len(self.args):\n             return True\n         if len(nz) == len(self.args):\n             return None\n@@ -316,7 +310,7 @@ class Add(Expr, AssocOp):\n                 return True\n             if im and (not im_or_z):\n                 return False\n-        if b.is_zero is False:\n+        if b.is_zero is False or (b.is_zero is None and im):\n             return False\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n", "normalized_occurrence": 1}
