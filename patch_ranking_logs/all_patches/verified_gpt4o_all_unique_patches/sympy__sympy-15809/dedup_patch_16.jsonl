{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15809", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex bb765cc..807ec3d 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -438,12 +438,19 @@ class Function(Application, Expr):\n             # the exception and change NumPy to take advantage of this.\n             temp = ('%(name)s takes %(qual)s %(args)s '\n                    'argument%(plural)s (%(given)s given)')\n-            raise TypeError(temp % {\n-                'name': cls,\n-                'qual': 'exactly' if len(cls.nargs) == 1 else 'at least',\n-                'args': min(cls.nargs),\n-                'plural': 's'*(min(cls.nargs) != 1),\n-                'given': n})\n+            if cls.__name__ == 'Min' and n == 0:\n+                from sympy import oo\n+                return oo\n+            elif cls.__name__ == 'Max' and n == 0:\n+                from sympy import oo\n+                return -oo\n+            else:\n+                raise TypeError(temp % {\n+                    'name': cls,\n+                    'qual': 'exactly' if len(cls.nargs) == 1 else 'at least',\n+                    'args': min(cls.nargs),\n+                    'plural': 's'*(min(cls.nargs) != 1),\n+                    'given': n})\n \n         evaluate = options.get('evaluate', global_evaluate[0])\n         result = super(Function, cls).__new__(cls, *args, **options)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 653d499..20f639b 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -140,7 +140,14 @@ class Function(Application, Expr):\n         n = len(args)\n         if n not in cls.nargs:\n             temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n-            raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n+            if cls.__name__ == 'Min' and n == 0:\n+                from sympy import oo\n+                return oo\n+            elif cls.__name__ == 'Max' and n == 0:\n+                from sympy import oo\n+                return -oo\n+            else:\n+                raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n         evaluate = options.get('evaluate', global_evaluate[0])\n         result = super(Function, cls).__new__(cls, *args, **options)\n         if evaluate and isinstance(result, cls) and result.args:\n", "normalized_occurrence": 1}
