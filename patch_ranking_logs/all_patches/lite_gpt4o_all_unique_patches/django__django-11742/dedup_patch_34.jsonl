{"model_name_or_path": "agentless", "instance_id": "django__django-11742", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 16823e9..da6e26b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -245,6 +245,17 @@ class Field(RegisterLookupMixin):\n         if not self.choices:\n             return []\n \n+        if self.max_length is not None:\n+            max_choice_length = max((len(str(value)) for value, _ in self.flatchoices), default=0)\n+            if max_choice_length > self.max_length:\n+                return [\n+                    checks.Error(\n+                        \"'max_length' is too small to fit the longest choice value.\",\n+                        obj=self,\n+                        id='fields.E009',\n+                    )\n+                ]\n+\n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex adca252..424a9a6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -120,6 +120,10 @@ class Field(RegisterLookupMixin):\n     def _check_choices(self):\n         if not self.choices:\n             return []\n+        if self.max_length is not None:\n+            max_choice_length = max((len(str(value)) for value, _ in self.flatchoices), default=0)\n+            if max_choice_length > self.max_length:\n+                return [checks.Error(\"'max_length' is too small to fit the longest choice value.\", obj=self, id='fields.E009')]\n         def is_value(value, accept_promise=True):\n             return isinstance(value, (str, Promise) if accept_promise else str) or not is_iterable(value)\n         if is_value(self.choices, accept_promise=False):\n", "normalized_occurrence": 1}
