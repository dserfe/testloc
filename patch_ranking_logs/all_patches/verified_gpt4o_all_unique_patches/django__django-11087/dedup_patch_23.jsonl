{"model_name_or_path": "agentless", "instance_id": "django__django-11087", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 067de0d..8c2e92b 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -683,17 +683,9 @@ class QuerySet:\n         if self._fields is not None:\n             raise TypeError(\"Cannot call delete() after .values() or .values_list()\")\n \n-        del_query = self._chain()\n-\n-        # The delete is actually 2 queries - one to find related objects,\n-        # and one to delete. Make sure that the discovery of related\n-        # objects is performed on the same database as the deletion.\n-        del_query._for_write = True\n-\n-        # Disable non-supported fields.\n-        del_query.query.select_for_update = False\n-        del_query.query.select_related = False\n-        del_query.query.clear_ordering(force_empty=True)\n+        # Create a new QuerySet that only selects the primary key(s) to avoid\n+        # fetching unnecessary fields that might cause UnicodeDecodeErrors.\n+        del_query = self.values_list('pk', flat=True)._chain()\n \n         collector = Collector(using=del_query.db)\n         collector.collect(del_query)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 19f2cc6..f77c76a 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -416,11 +416,7 @@ class QuerySet:\n         assert self.query.can_filter(), \"Cannot use 'limit' or 'offset' with delete.\"\n         if self._fields is not None:\n             raise TypeError('Cannot call delete() after .values() or .values_list()')\n-        del_query = self._chain()\n-        del_query._for_write = True\n-        del_query.query.select_for_update = False\n-        del_query.query.select_related = False\n-        del_query.query.clear_ordering(force_empty=True)\n+        del_query = self.values_list('pk', flat=True)._chain()\n         collector = Collector(using=del_query.db)\n         collector.collect(del_query)\n         deleted, _rows_count = collector.delete()\n", "normalized_occurrence": 1}
