{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..9edecb2 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -270,6 +270,18 @@ JSONField.register_lookup(JSONExact)\n \n \n class KeyTransform(Transform):\n+    def process_rhs(self, compiler, connection, rhs=None):\n+        if rhs is None:\n+            rhs = self.rhs\n+        # Check if rhs is a list and handle it accordingly\n+        if isinstance(rhs, (list, tuple)):\n+            sql, params = [], []\n+            for value in rhs:\n+                part_sql, part_params = super().as_sql(compiler, connection)\n+                sql.append(part_sql)\n+                params.extend(part_params)\n+            return '(%s)' % ', '.join(sql), params\n+        return super().as_sql(compiler, connection)\n     postgres_operator = '->'\n     postgres_nested_operator = '#>'\n \n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n+    def process_rhs(self, compiler, connection, rhs=None):\n+        if rhs is None:\n+            rhs = self.rhs\n+        if isinstance(rhs, (list, tuple)):\n+            sql, params = ([], [])\n+            for value in rhs:\n+                part_sql, part_params = super().as_sql(compiler, connection)\n+                sql.append(part_sql)\n+                params.extend(part_params)\n+            return ('(%s)' % ', '.join(sql), params)\n+        return super().as_sql(compiler, connection)", "normalized_occurrence": 1}
