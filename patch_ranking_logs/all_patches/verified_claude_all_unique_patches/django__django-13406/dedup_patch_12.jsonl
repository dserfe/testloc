{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13406", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 3533127..64e15fd 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -238,7 +238,13 @@ class QuerySet:\n     def __getstate__(self):\n         # Force the cache to be fully populated.\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        # Preserve iterable class for values/values_list queries\n+        obj_dict = self.__dict__.copy()\n+        obj_dict[DJANGO_VERSION_PICKLE_KEY] = django.__version__\n+        if self._fields is not None:\n+            # If _fields is set, this is a values/values_list queryset\n+            obj_dict['_iterable_class'] = self._iterable_class\n+        return obj_dict\n \n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n", "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex fdf020d..028fe43 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -143,7 +143,11 @@ class QuerySet:\n         return obj\n     def __getstate__(self):\n         self._fetch_all()\n-        return {**self.__dict__, DJANGO_VERSION_PICKLE_KEY: django.__version__}\n+        obj_dict = self.__dict__.copy()\n+        obj_dict[DJANGO_VERSION_PICKLE_KEY] = django.__version__\n+        if self._fields is not None:\n+            obj_dict['_iterable_class'] = self._iterable_class\n+        return obj_dict\n     def __setstate__(self, state):\n         pickled_version = state.get(DJANGO_VERSION_PICKLE_KEY)\n         if pickled_version:\n", "normalized_occurrence": 1}
