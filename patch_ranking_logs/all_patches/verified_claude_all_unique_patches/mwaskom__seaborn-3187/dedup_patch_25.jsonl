{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..2e441d5 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -89,6 +89,28 @@ class DotBase(Mark):\n     ) -> Artist:\n \n         key = {v: value for v in variables}\n+        \n+        # If we have a numeric value and a formatter with an offset,\n+        # adjust the displayed value accordingly\n+        for var in variables:\n+            if var in scales and isinstance(value, (int, float)):\n+                scale = scales[var]\n+                if hasattr(scale, \"_label_params\"):\n+                    formatter = scale._get_formatter(\n+                        None,\n+                        scale._label_params.get(\"formatter\"),\n+                        scale._label_params.get(\"like\"),\n+                        scale._label_params.get(\"base\"),\n+                        scale._label_params.get(\"unit\")\n+                    )\n+                    if isinstance(formatter, ScalarFormatter):\n+                        # Force the formatter to process the value\n+                        formatter.create_dummy_axis()\n+                        formatter.set_locs([value])\n+                        if formatter.offset != 0:\n+                            # Adjust the value by the offset\n+                            key[var] = value / (10 ** formatter.orderOfMagnitude)\n+                            \n         res = self._resolve_properties(key, scales)\n \n         return mpl.collections.PathCollection(\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..14d01f2 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -40,6 +40,16 @@ class DotBase(Mark):\n             ax.add_collection(points)\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n+        for var in variables:\n+            if var in scales and isinstance(value, (int, float)):\n+                scale = scales[var]\n+                if hasattr(scale, '_label_params'):\n+                    formatter = scale._get_formatter(None, scale._label_params.get('formatter'), scale._label_params.get('like'), scale._label_params.get('base'), scale._label_params.get('unit'))\n+                    if isinstance(formatter, ScalarFormatter):\n+                        formatter.create_dummy_axis()\n+                        formatter.set_locs([value])\n+                        if formatter.offset != 0:\n+                            key[var] = value / 10 ** formatter.orderOfMagnitude\n         res = self._resolve_properties(key, scales)\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n", "normalized_occurrence": 1}
