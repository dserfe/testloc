{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-6528", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 6763a6f..3b2b092 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -742,6 +742,7 @@ class PyLinter(\n             self.config.ignore,\n             self.config.ignore_patterns,\n             self._ignore_paths,\n+            self.config.ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 16c7088..f7af379 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -298,7 +298,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr['basename'])\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n-        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths)\n+        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths, self.config.ignore_paths)\n         for error in errors:\n             message = modname = error['mod']\n             key = error['key']\n", "normalized_occurrence": 1}
