{"model_name_or_path": "agentless", "instance_id": "django__django-15388", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex dcf3cdd..eeb8865 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -285,6 +285,8 @@ class BaseReloader:\n             )\n             return\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n+        if not path.exists():\n+            logger.warning('Path %s does not exist and cannot be watched.', path)\n         self.directory_globs[path].add(glob)\n \n     def watched_files(self, include_globs=True):\n@@ -294,6 +296,10 @@ class BaseReloader:\n         \"\"\"\n         yield from iter_all_python_module_files()\n         yield from self.extra_files\n+        for dirs in settings.TEMPLATES[0].get('DIRS', []):\n+            if os.path.isdir(dirs):\n+                logger.debug('Watching template dir %s.', dirs)\n+                yield from Path(dirs).rglob('*')\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 4cc598a..c72a5e9 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -178,10 +178,16 @@ class BaseReloader:\n             logger.debug('Unable to watch directory %s as it cannot be resolved.', path, exc_info=True)\n             return\n         logger.debug('Watching dir %s with glob %s.', path, glob)\n+        if not path.exists():\n+            logger.warning('Path %s does not exist and cannot be watched.', path)\n         self.directory_globs[path].add(glob)\n     def watched_files(self, include_globs=True):\n         yield from iter_all_python_module_files()\n         yield from self.extra_files\n+        for dirs in settings.TEMPLATES[0].get('DIRS', []):\n+            if os.path.isdir(dirs):\n+                logger.debug('Watching template dir %s.', dirs)\n+                yield from Path(dirs).rglob('*')\n         if include_globs:\n             for directory, patterns in self.directory_globs.items():\n                 for pattern in patterns:\n", "normalized_occurrence": 1}
