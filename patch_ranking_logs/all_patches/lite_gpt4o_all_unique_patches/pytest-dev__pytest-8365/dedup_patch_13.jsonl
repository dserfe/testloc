{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-8365", "model_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex cae5caf..8ef9817 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = sanitize_user(get_user()) or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -159,7 +159,11 @@ def get_user() -> Optional[str]:\n         return None\n \n \n-def pytest_configure(config: Config) -> None:\n+def sanitize_user(user: Optional[str]) -> Optional[str]:\n+    \"\"\"Sanitize the username to remove invalid characters for directory names.\"\"\"\n+    if user is None:\n+        return None\n+    return \"\".join(char if char.isalnum() else \"_\" for char in user)\n     \"\"\"Create a TempdirFactory and attach it to the config object.\n \n     This is to comply with existing plugins which expect the handler to be\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 6f08c0a..372ee9a 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -57,7 +57,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get('PYTEST_DEBUG_TEMPROOT')\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or 'unknown'\n+            user = sanitize_user(get_user()) or 'unknown'\n             rootdir = temproot.joinpath(f'pytest-of-{user}')\n             rootdir.mkdir(exist_ok=True)\n             basetemp = make_numbered_dir_with_cleanup(prefix='pytest-', root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT)\n@@ -82,7 +82,10 @@ def get_user() -> Optional[str]:\n         return getpass.getuser()\n     except (ImportError, KeyError):\n         return None\n-def pytest_configure(config: Config) -> None:\n+def sanitize_user(user: Optional[str]) -> Optional[str]:\n+    if user is None:\n+        return None\n+    return ''.join((char if char.isalnum() else '_' for char in user))\n     mp = MonkeyPatch()\n     tmppath_handler = TempPathFactory.from_config(config, _ispytest=True)\n     t = TempdirFactory(tmppath_handler, _ispytest=True)\n", "normalized_occurrence": 1}
