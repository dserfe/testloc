{"model_name_or_path": "agentless", "instance_id": "django__django-11749", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex b670a73..a5a2397 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -132,9 +132,15 @@ def call_command(command_name, *args, **options):\n     parser_actions = list(get_actions(parser))\n     # Any required arguments which are passed in via **options must be passed\n     # to parse_args().\n+    # Include arguments of required mutually exclusive groups\n+    mutually_exclusive_required = set()\n+    for group in parser._mutually_exclusive_groups:\n+        if group.required:\n+            mutually_exclusive_required.update(action.dest for action in group._group_actions)\n+    \n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions if (opt.required or opt.dest in mutually_exclusive_required) and opt.dest in options\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex f9cfb8d..765bf0f 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -53,7 +53,11 @@ def call_command(command_name, *args, **options):\n             else:\n                 yield opt\n     parser_actions = list(get_actions(parser))\n-    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if opt.required and opt.dest in options]\n+    mutually_exclusive_required = set()\n+    for group in parser._mutually_exclusive_groups:\n+        if group.required:\n+            mutually_exclusive_required.update((action.dest for action in group._group_actions))\n+    parse_args += ['{}={}'.format(min(opt.option_strings), arg_options[opt.dest]) for opt in parser_actions if (opt.required or opt.dest in mutually_exclusive_required) and opt.dest in options]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\n     stealth_options = set(command.base_stealth_options + command.stealth_options)\n", "normalized_occurrence": 1}
