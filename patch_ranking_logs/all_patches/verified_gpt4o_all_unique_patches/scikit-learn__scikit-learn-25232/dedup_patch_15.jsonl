{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25232", "model_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 62cdd57..75f7763 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -289,6 +289,7 @@ class IterativeImputer(_BaseImputer):\n         \"max_value\": [None, Interval(Real, None, None, closed=\"both\"), \"array-like\"],\n         \"verbose\": [\"verbose\"],\n         \"random_state\": [\"random_state\"],\n+        \"fill_value\": [None, \"numeric\", StrOptions({\"nan\"})],\n     }\n \n     def __init__(\n@@ -302,6 +303,7 @@ class IterativeImputer(_BaseImputer):\n         n_nearest_features=None,\n         initial_strategy=\"mean\",\n         imputation_order=\"ascending\",\n+        fill_value=None,\n         skip_complete=False,\n         min_value=-np.inf,\n         max_value=np.inf,\n@@ -310,6 +312,8 @@ class IterativeImputer(_BaseImputer):\n         add_indicator=False,\n         keep_empty_features=False,\n     ):\n+        self.fill_value = fill_value\n+\n         super().__init__(\n             missing_values=missing_values,\n             add_indicator=add_indicator,\n@@ -614,6 +618,7 @@ class IterativeImputer(_BaseImputer):\n                 missing_values=self.missing_values,\n                 strategy=self.initial_strategy,\n                 keep_empty_features=self.keep_empty_features,\n+                fill_value=self.fill_value,\n             )\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n@@ -886,4 +891,4 @@ class IterativeImputer(_BaseImputer):\n         \"\"\"\n         input_features = _check_feature_names_in(self, input_features)\n         names = self.initial_imputer_.get_feature_names_out(input_features)\n-        return self._concatenate_indicator_feature_names_out(names, input_features)\n+        return self._concatenate_indicator_feature_names_out(names, input_features)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/impute/_iterative.py b/sklearn/impute/_iterative.py\nindex 2f5de89..52ef3f8 100644\n--- a/sklearn/impute/_iterative.py\n+++ b/sklearn/impute/_iterative.py\n@@ -22,8 +22,9 @@ def _assign_where(X1, X2, cond):\n     else:\n         X1[cond] = X2[cond]\n class IterativeImputer(_BaseImputer):\n-    _parameter_constraints: dict = {**_BaseImputer._parameter_constraints, 'estimator': [None, HasMethods(['fit', 'predict'])], 'sample_posterior': ['boolean'], 'max_iter': [Interval(Integral, 0, None, closed='left')], 'tol': [Interval(Real, 0, None, closed='left')], 'n_nearest_features': [None, Interval(Integral, 1, None, closed='left')], 'initial_strategy': [StrOptions({'mean', 'median', 'most_frequent', 'constant'})], 'imputation_order': [StrOptions({'ascending', 'descending', 'roman', 'arabic', 'random'})], 'skip_complete': ['boolean'], 'min_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'max_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'verbose': ['verbose'], 'random_state': ['random_state']}\n-    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False):\n+    _parameter_constraints: dict = {**_BaseImputer._parameter_constraints, 'estimator': [None, HasMethods(['fit', 'predict'])], 'sample_posterior': ['boolean'], 'max_iter': [Interval(Integral, 0, None, closed='left')], 'tol': [Interval(Real, 0, None, closed='left')], 'n_nearest_features': [None, Interval(Integral, 1, None, closed='left')], 'initial_strategy': [StrOptions({'mean', 'median', 'most_frequent', 'constant'})], 'imputation_order': [StrOptions({'ascending', 'descending', 'roman', 'arabic', 'random'})], 'skip_complete': ['boolean'], 'min_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'max_value': [None, Interval(Real, None, None, closed='both'), 'array-like'], 'verbose': ['verbose'], 'random_state': ['random_state'], 'fill_value': [None, 'numeric', StrOptions({'nan'})]}\n+    def __init__(self, estimator=None, *, missing_values=np.nan, sample_posterior=False, max_iter=10, tol=0.001, n_nearest_features=None, initial_strategy='mean', imputation_order='ascending', fill_value=None, skip_complete=False, min_value=-np.inf, max_value=np.inf, verbose=0, random_state=None, add_indicator=False, keep_empty_features=False):\n+        self.fill_value = fill_value\n         super().__init__(missing_values=missing_values, add_indicator=add_indicator, keep_empty_features=keep_empty_features)\n         self.estimator = estimator\n         self.sample_posterior = sample_posterior\n@@ -121,7 +122,7 @@ class IterativeImputer(_BaseImputer):\n         X_missing_mask = _get_mask(X, self.missing_values)\n         mask_missing_values = X_missing_mask.copy()\n         if self.initial_imputer_ is None:\n-            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, keep_empty_features=self.keep_empty_features)\n+            self.initial_imputer_ = SimpleImputer(missing_values=self.missing_values, strategy=self.initial_strategy, keep_empty_features=self.keep_empty_features, fill_value=self.fill_value)\n             X_filled = self.initial_imputer_.fit_transform(X)\n         else:\n             X_filled = self.initial_imputer_.transform(X)\n", "normalized_occurrence": 1}
