{"model_name_or_path": "agentless", "instance_id": "django__django-13448", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex d751f3a..9ad1cc5 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -118,7 +118,14 @@ class BaseDatabaseCreation:\n                             yield from queryset.iterator()\n         # Serialize to a string\n         out = StringIO()\n-        serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n+        try:\n+            serializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n+        except django.db.utils.ProgrammingError as e:\n+            if 'relation' in str(e) and 'does not exist' in str(e):\n+                # Skipping the missing table because migrations are not applied\n+                pass\n+            else:\n+                raise\n         return out.getvalue()\n \n     def deserialize_db_from_string(self, data):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 4f2d479..d680163 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -46,7 +46,13 @@ class BaseDatabaseCreation:\n                             queryset = model._default_manager.using(self.connection.alias).order_by(model._meta.pk.name)\n                             yield from queryset.iterator()\n         out = StringIO()\n-        serializers.serialize('json', get_objects(), indent=None, stream=out)\n+        try:\n+            serializers.serialize('json', get_objects(), indent=None, stream=out)\n+        except django.db.utils.ProgrammingError as e:\n+            if 'relation' in str(e) and 'does not exist' in str(e):\n+                pass\n+            else:\n+                raise\n         return out.getvalue()\n     def deserialize_db_from_string(self, data):\n         data = StringIO(data)\n", "normalized_occurrence": 1}
