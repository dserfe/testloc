{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..47fd55e 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -408,6 +408,24 @@ class BaseDatabaseSchemaEditor:\n             **constraint_kwargs\n         )\n         if len(constraint_names) != 1:\n+            # Check if there's one unique and one index constraint\n+            if len(constraint_names) == 2 and constraint_kwargs.get('unique') and constraint_kwargs.get('index'):\n+                unique_constraint = None\n+                index_constraint = None\n+                for name in constraint_names:\n+                    if '_uniq' in name:\n+                        unique_constraint = name\n+                    elif '_idx' in name:\n+                        index_constraint = name\n+                if unique_constraint and index_constraint:\n+                    # If we are deleting the index, remove only the index constraint\n+                    if constraint_kwargs.get('index'):\n+                        self.execute(self._delete_constraint_sql(sql, model, index_constraint))\n+                        return\n+                    # If we are deleting the unique constraint, remove only the unique constraint\n+                    if constraint_kwargs.get('unique'):\n+                        self.execute(self._delete_constraint_sql(sql, model, unique_constraint))\n+                        return\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..1fc939c 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -231,6 +231,21 @@ class BaseDatabaseSchemaEditor:\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n         if len(constraint_names) != 1:\n+            if len(constraint_names) == 2 and constraint_kwargs.get('unique') and constraint_kwargs.get('index'):\n+                unique_constraint = None\n+                index_constraint = None\n+                for name in constraint_names:\n+                    if '_uniq' in name:\n+                        unique_constraint = name\n+                    elif '_idx' in name:\n+                        index_constraint = name\n+                if unique_constraint and index_constraint:\n+                    if constraint_kwargs.get('index'):\n+                        self.execute(self._delete_constraint_sql(sql, model, index_constraint))\n+                        return\n+                    if constraint_kwargs.get('unique'):\n+                        self.execute(self._delete_constraint_sql(sql, model, unique_constraint))\n+                        return\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "normalized_occurrence": 1}
