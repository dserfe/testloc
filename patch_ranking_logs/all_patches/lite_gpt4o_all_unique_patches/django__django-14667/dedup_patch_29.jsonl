{"model_name_or_path": "agentless", "instance_id": "django__django-14667", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8635bf4..858aa8e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2080,6 +2080,7 @@ class Query(BaseExpression):\n         # format, so that we can use a set datastructure. We do the foo__bar\n         # splitting and handling when computing the SQL column names (as part of\n         # get_columns()).\n+        self.clear_deferred_loading()\n         existing, defer = self.deferred_loading\n         if defer:\n             # Add to existing deferred names.\n@@ -2098,6 +2099,7 @@ class Query(BaseExpression):\n         for immediate loading. (That is, immediate loading overrides any\n         existing immediate values, but respects existing deferrals.)\n         \"\"\"\n+        self.clear_deferred_loading()\n         existing, defer = self.deferred_loading\n         field_names = set(field_names)\n         if 'pk' in field_names:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a07bc15..ca6310c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1136,12 +1136,14 @@ class Query(BaseExpression):\n     def clear_deferred_loading(self):\n         self.deferred_loading = (frozenset(), True)\n     def add_deferred_loading(self, field_names):\n+        self.clear_deferred_loading()\n         existing, defer = self.deferred_loading\n         if defer:\n             self.deferred_loading = (existing.union(field_names), True)\n         else:\n             self.deferred_loading = (existing.difference(field_names), False)\n     def add_immediate_loading(self, field_names):\n+        self.clear_deferred_loading()\n         existing, defer = self.deferred_loading\n         field_names = set(field_names)\n         if 'pk' in field_names:\n", "normalized_occurrence": 1}
