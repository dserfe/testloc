{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..5e0a515 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -162,25 +162,37 @@ class BaseReport:\n         \"\"\"\n \n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-\n-            new_entries = []\n-            for entry in reprtraceback[\"reprentries\"]:\n-                entry_data = {\n-                    \"type\": type(entry).__name__,\n-                    \"data\": entry.__dict__.copy(),\n+            def serialize_traceback(exc_info):\n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+\n+                new_entries = []\n+                for entry in reprtraceback[\"reprentries\"]:\n+                    entry_data = {\n+                        \"type\": type(entry).__name__,\n+                        \"data\": entry.__dict__.copy(),\n+                    }\n+                    for key, value in entry_data[\"data\"].items():\n+                        if hasattr(value, \"__dict__\"):\n+                            entry_data[\"data\"][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+\n+                reprtraceback[\"reprentries\"] = new_entries\n+\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": exc_info.sections,\n                 }\n-                for key, value in entry_data[\"data\"].items():\n-                    if hasattr(value, \"__dict__\"):\n-                        entry_data[\"data\"][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n \n-            reprtraceback[\"reprentries\"] = new_entries\n+            chain = []\n+            current = rep.longrepr\n+            while current is not None:\n+                chain.append(serialize_traceback(current))\n+                current = getattr(current, 'cause', None)\n \n             return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n+                \"chain\": chain,\n                 \"sections\": rep.longrepr.sections,\n             }\n \n@@ -212,10 +224,7 @@ class BaseReport:\n         Experimental method.\n         \"\"\"\n         if reportdict[\"longrepr\"]:\n-            if (\n-                \"reprcrash\" in reportdict[\"longrepr\"]\n-                and \"reprtraceback\" in reportdict[\"longrepr\"]\n-            ):\n+            if \"chain\" in reportdict[\"longrepr\"]:\n \n                 reprtraceback = reportdict[\"longrepr\"][\"reprtraceback\"]\n                 reprcrash = reportdict[\"longrepr\"][\"reprcrash\"]\n@@ -250,14 +259,62 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback[\"reprentries\"] = unserialized_entries\n \n-                exception_info = ReprExceptionInfo(\n-                    reprtraceback=ReprTraceback(**reprtraceback),\n-                    reprcrash=ReprFileLocation(**reprcrash),\n-                )\n+                def deserialize_traceback(tb_dict):\n+                    reprtraceback = tb_dict[\"reprtraceback\"]\n+                    reprcrash = tb_dict[\"reprcrash\"]\n+\n+                    unserialized_entries = []\n+                    reprentry = None\n+                    for entry_data in reprtraceback[\"reprentries\"]:\n+                        data = entry_data[\"data\"]\n+                        entry_type = entry_data[\"type\"]\n+                        if entry_type == \"ReprEntry\":\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data[\"reprfuncargs\"]:\n+                                reprfuncargs = ReprFuncArgs(**data[\"reprfuncargs\"])\n+                            if data[\"reprfileloc\"]:\n+                                reprfileloc = ReprFileLocation(**data[\"reprfileloc\"])\n+                            if data[\"reprlocals\"]:\n+                                reprlocals = ReprLocals(data[\"reprlocals\"][\"lines\"])\n+\n+                            reprentry = ReprEntry(\n+                                lines=data[\"lines\"],\n+                                reprfuncargs=reprfuncargs,\n+                                reprlocals=reprlocals,\n+                                filelocrepr=reprfileloc,\n+                                style=data[\"style\"],\n+                            )\n+                        elif entry_type == \"ReprEntryNative\":\n+                            reprentry = ReprEntryNative(data[\"lines\"])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    reprtraceback[\"reprentries\"] = unserialized_entries\n+\n+                    exc_info = ReprExceptionInfo(\n+                        reprtraceback=ReprTraceback(**reprtraceback),\n+                        reprcrash=ReprFileLocation(**reprcrash),\n+                    )\n+\n+                    for section in tb_dict[\"sections\"]:\n+                        exc_info.addsection(*section)\n+                    return exc_info\n+\n+                chain = reportdict[\"longrepr\"][\"chain\"]\n+                if not chain:\n+                    reportdict[\"longrepr\"] = None\n+                    return\n+\n+                current = None\n+                for tb_dict in reversed(chain):\n+                    exc_info = deserialize_traceback(tb_dict)\n+                    if current is not None:\n+                        exc_info.cause = current\n+                    current = exc_info\n \n-                for section in reportdict[\"longrepr\"][\"sections\"]:\n-                    exception_info.addsection(*section)\n-                reportdict[\"longrepr\"] = exception_info\n+                reportdict[\"longrepr\"] = current\n \n         return cls(**reportdict)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..69d07ea 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -77,17 +77,24 @@ class BaseReport:\n         return verbose\n     def _to_json(self):\n         def disassembled_report(rep):\n-            reprtraceback = rep.longrepr.reprtraceback.__dict__.copy()\n-            reprcrash = rep.longrepr.reprcrash.__dict__.copy()\n-            new_entries = []\n-            for entry in reprtraceback['reprentries']:\n-                entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n-                for key, value in entry_data['data'].items():\n-                    if hasattr(value, '__dict__'):\n-                        entry_data['data'][key] = value.__dict__.copy()\n-                new_entries.append(entry_data)\n-            reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            def serialize_traceback(exc_info):\n+                reprtraceback = exc_info.reprtraceback.__dict__.copy()\n+                reprcrash = exc_info.reprcrash.__dict__.copy()\n+                new_entries = []\n+                for entry in reprtraceback['reprentries']:\n+                    entry_data = {'type': type(entry).__name__, 'data': entry.__dict__.copy()}\n+                    for key, value in entry_data['data'].items():\n+                        if hasattr(value, '__dict__'):\n+                            entry_data['data'][key] = value.__dict__.copy()\n+                    new_entries.append(entry_data)\n+                reprtraceback['reprentries'] = new_entries\n+                return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': exc_info.sections}\n+            chain = []\n+            current = rep.longrepr\n+            while current is not None:\n+                chain.append(serialize_traceback(current))\n+                current = getattr(current, 'cause', None)\n+            return {'chain': chain, 'sections': rep.longrepr.sections}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -105,7 +112,7 @@ class BaseReport:\n     @classmethod\n     def _from_json(cls, reportdict):\n         if reportdict['longrepr']:\n-            if 'reprcrash' in reportdict['longrepr'] and 'reprtraceback' in reportdict['longrepr']:\n+            if 'chain' in reportdict['longrepr']:\n                 reprtraceback = reportdict['longrepr']['reprtraceback']\n                 reprcrash = reportdict['longrepr']['reprcrash']\n                 unserialized_entries = []\n@@ -130,10 +137,46 @@ class BaseReport:\n                         _report_unserialization_failure(entry_type, cls, reportdict)\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n-                exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n-                for section in reportdict['longrepr']['sections']:\n-                    exception_info.addsection(*section)\n-                reportdict['longrepr'] = exception_info\n+                def deserialize_traceback(tb_dict):\n+                    reprtraceback = tb_dict['reprtraceback']\n+                    reprcrash = tb_dict['reprcrash']\n+                    unserialized_entries = []\n+                    reprentry = None\n+                    for entry_data in reprtraceback['reprentries']:\n+                        data = entry_data['data']\n+                        entry_type = entry_data['type']\n+                        if entry_type == 'ReprEntry':\n+                            reprfuncargs = None\n+                            reprfileloc = None\n+                            reprlocals = None\n+                            if data['reprfuncargs']:\n+                                reprfuncargs = ReprFuncArgs(**data['reprfuncargs'])\n+                            if data['reprfileloc']:\n+                                reprfileloc = ReprFileLocation(**data['reprfileloc'])\n+                            if data['reprlocals']:\n+                                reprlocals = ReprLocals(data['reprlocals']['lines'])\n+                            reprentry = ReprEntry(lines=data['lines'], reprfuncargs=reprfuncargs, reprlocals=reprlocals, filelocrepr=reprfileloc, style=data['style'])\n+                        elif entry_type == 'ReprEntryNative':\n+                            reprentry = ReprEntryNative(data['lines'])\n+                        else:\n+                            _report_unserialization_failure(entry_type, cls, reportdict)\n+                        unserialized_entries.append(reprentry)\n+                    reprtraceback['reprentries'] = unserialized_entries\n+                    exc_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                    for section in tb_dict['sections']:\n+                        exc_info.addsection(*section)\n+                    return exc_info\n+                chain = reportdict['longrepr']['chain']\n+                if not chain:\n+                    reportdict['longrepr'] = None\n+                    return\n+                current = None\n+                for tb_dict in reversed(chain):\n+                    exc_info = deserialize_traceback(tb_dict)\n+                    if current is not None:\n+                        exc_info.cause = current\n+                    current = exc_info\n+                reportdict['longrepr'] = current\n         return cls(**reportdict)\n def _report_unserialization_failure(type_name, report_class, reportdict):\n     url = 'https://github.com/pytest-dev/pytest/issues'\n", "normalized_occurrence": 1}
