{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..72fd636 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,23 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n+        if len(constraint_names) < 1:\n+            raise ValueError(\"Found no constraints for %s(%s)\" % (\n+                model._meta.db_table,\n+                \", \".join(columns),\n+            ))\n+        # Find the index name that matches our suffix pattern for indexes\n+        index_name = None\n+        for name in constraint_names:\n+            if name.endswith('_idx'):\n+                index_name = name\n+                break\n+        if index_name is None:\n+            raise ValueError(\"Found no index constraint for %s(%s)\" % (\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        self.execute(self._delete_constraint_sql(sql, model, index_name))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..a29d389 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,9 +230,16 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        if len(constraint_names) < 1:\n+            raise ValueError('Found no constraints for %s(%s)' % (model._meta.db_table, ', '.join(columns)))\n+        index_name = None\n+        for name in constraint_names:\n+            if name.endswith('_idx'):\n+                index_name = name\n+                break\n+        if index_name is None:\n+            raise ValueError('Found no index constraint for %s(%s)' % (model._meta.db_table, ', '.join(columns)))\n+        self.execute(self._delete_constraint_sql(sql, model, index_name))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n", "normalized_occurrence": 1}
