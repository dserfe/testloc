{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..e742508 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -437,6 +437,13 @@ class MatrixSymbol(MatrixExpr):\n         return self\n \n class Identity(MatrixExpr):\n+    def _eval_sum(self, axis=None):\n+        if axis is None:\n+            return self.rows  # Since the sum of all elements is equal to the number of rows (or columns)\n+        elif axis == 0:  # Sum over columns\n+            return Matrix([1]*self.rows)\n+        elif axis == 1:  # Sum over rows\n+            return Matrix([1]*self.cols)\n     \"\"\"The Matrix Identity I - multiplicative identity\n \n     >>> from sympy.matrices import Identity, MatrixSymbol\n", "occurrence": 1, "normalized_patch": "--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n+    def _eval_sum(self, axis=None):\n+        if axis is None:\n+            return self.rows\n+        elif axis == 0:\n+            return Matrix([1] * self.rows)\n+        elif axis == 1:\n+            return Matrix([1] * self.cols)\n+    \"The Matrix Identity I - multiplicative identity\\n\\n    >>> from sympy.matrices import Identity, MatrixSymbol\\n    >>> A = MatrixSymbol('A', 3, 5)\\n    >>> I = Identity(3)\\n    >>> I*A\\n    A\\n    \"", "normalized_occurrence": 2}
