{
  "instance_id": "sympy__sympy-20428",
  "container_id": "e6a22e979769173b99f85bc740bc90cbe64155a56410c44dad85d2536c92bdda",
  "regression": {
    "results": [
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_0.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_1.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_10.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_11.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_2.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_3.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_4.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_5.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_6.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_8.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 41,
        "failed": 1
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_7.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 26,
        "failed": 16
      },
      {
        "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_9.jsonl",
        "inst": "sympy__sympy-20428",
        "passed": 26,
        "failed": 16
      }
    ],
    "top_passed": 41,
    "top_subset_size": 10
  },
  "reproduction": {
    "sympy/polys/tests/test_polytools.py::test_Poly_rat_clear_denoms#1": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_clear_denoms#2": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_clear_denoms#3": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_clear_denoms#4": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_clear_denoms#5": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "sympy/polys/tests/test_polytools.py::test_Poly_clear_denoms#6": {
      "repro_fails_on_clean": false,
      "outcomes": []
    },
    "reproduce_bug_new_agentless.py": {
      "repro_fails_on_clean": true,
      "outcomes": [
        {
          "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_7.jsonl",
          "inst": "sympy__sympy-20428",
          "passed": true
        },
        {
          "patch_file": "all_patches/verified_claude_all_unique_patches/sympy__sympy-20428/dedup_patch_9.jsonl",
          "inst": "sympy__sympy-20428",
          "passed": true
        }
      ]
    },
    "none": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "planner": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "full": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "regression": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "patchLoc": {
      "repro_fails_on_clean": true,
      "outcomes": []
    },
    "testLoc": {
      "repro_fails_on_clean": true,
      "outcomes": []
    }
  }
}