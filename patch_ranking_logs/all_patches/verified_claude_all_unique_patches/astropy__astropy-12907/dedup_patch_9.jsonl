{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..61b1647 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -199,17 +199,30 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n-        # this does not work for more than 2 coordinates\n+    if isinstance(model, CompoundModel):\n+        # Handle compound models by recursively computing their separability\n+        mat = _separable(model)\n+        if pos == 'right':\n+            # Adjust the matrix position for right-hand components\n+            new_mat = np.zeros((noutp, model.n_inputs))\n+            new_mat[-model.n_outputs:, -model.n_inputs:] = mat\n+            mat = new_mat\n+        else:\n+            # Adjust the matrix position for left-hand components\n+            new_mat = np.zeros((noutp, model.n_inputs))\n+            new_mat[:model.n_outputs, :model.n_inputs] = mat\n+            mat = new_mat\n+    elif not model.separable:\n+        # Handle non-separable models\n         mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, : model.n_inputs] = 1\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n+        # Handle separable models\n         mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n+        for i in range(model.n_outputs):\n             mat[i, i] = 1\n         if pos == 'right':\n             mat = np.roll(mat, (noutp - model.n_outputs))\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..0b75df3 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -54,7 +54,17 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n-    if not model.separable:\n+    if isinstance(model, CompoundModel):\n+        mat = _separable(model)\n+        if pos == 'right':\n+            new_mat = np.zeros((noutp, model.n_inputs))\n+            new_mat[-model.n_outputs:, -model.n_inputs:] = mat\n+            mat = new_mat\n+        else:\n+            new_mat = np.zeros((noutp, model.n_inputs))\n+            new_mat[:model.n_outputs, :model.n_inputs] = mat\n+            mat = new_mat\n+    elif not model.separable:\n         mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, :model.n_inputs] = 1\n@@ -62,7 +72,7 @@ def _coord_matrix(model, pos, noutp):\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n         mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n+        for i in range(model.n_outputs):\n             mat[i, i] = 1\n         if pos == 'right':\n             mat = np.roll(mat, noutp - model.n_outputs)\n", "normalized_occurrence": 1}
