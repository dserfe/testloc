{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..820a89d 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -790,10 +790,8 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     copy = exprs\n     temp = []\n     for e in exprs:\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n-            temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n-            temp.append(Tuple(*e.todok().items()))\n+        if isinstance(e, MatrixBase):\n+            temp.append(e.as_mutable())\n         else:\n             temp.append(e)\n     exprs = temp\n@@ -843,7 +841,12 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n                 m = m.as_immutable()\n             reduced_exprs[i] = m\n \n+\n     if postprocess is None:\n+        # Convert MatrixBase types back into their original form\n+        for i, e in enumerate(copy):\n+            if isinstance(e, MatrixBase):\n+                reduced_exprs[i] = e.__class__(reduced_exprs[i])\n         return replacements, reduced_exprs\n \n     return postprocess(replacements, reduced_exprs)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..accb3ca 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -313,10 +313,8 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n     copy = exprs\n     temp = []\n     for e in exprs:\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n-            temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n-            temp.append(Tuple(*e.todok().items()))\n+        if isinstance(e, MatrixBase):\n+            temp.append(e.as_mutable())\n         else:\n             temp.append(e)\n     exprs = temp\n@@ -350,6 +348,9 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n                 m = m.as_immutable()\n             reduced_exprs[i] = m\n     if postprocess is None:\n+        for i, e in enumerate(copy):\n+            if isinstance(e, MatrixBase):\n+                reduced_exprs[i] = e.__class__(reduced_exprs[i])\n         return (replacements, reduced_exprs)\n     return postprocess(replacements, reduced_exprs)\n def _cse_homogeneous(exprs, **kwargs):\n", "normalized_occurrence": 1}
