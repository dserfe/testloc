{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..546ba76 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -805,6 +805,27 @@ class Piecewise(Function):\n         return self.func(*[(e**s, c) for e, c in self.args])\n \n     def _eval_subs(self, old, new):\n+        # If the substitution target is not in the conditions, use default substitution\n+        if not any(old in c.free_symbols for e, c in self.args):\n+            args = list(self.args)\n+            args_exist = False\n+            for i, (e, c) in enumerate(args):\n+                try:\n+                    c = c._subs(old, new)\n+                    if c != False:\n+                        args_exist = True\n+                        e = e._subs(old, new)\n+                    args[i] = (e, c)\n+                    if c == True:\n+                        break\n+                except Exception:\n+                    # If substitution fails, try parent class substitution\n+                    return super()._eval_subs(old, new)\n+            if not args_exist:\n+                args = ((Undefined, True),)\n+            return self.func(*args)\n+        # For condition substitutions, use parent class substitution\n+        return super()._eval_subs(old, new)\n         # this is strictly not necessary, but we can keep track\n         # of whether True or False conditions arise and be\n         # somewhat more efficient by avoiding other substitutions\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..40ee602 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,6 +441,24 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n+        if not any((old in c.free_symbols for e, c in self.args)):\n+            args = list(self.args)\n+            args_exist = False\n+            for i, (e, c) in enumerate(args):\n+                try:\n+                    c = c._subs(old, new)\n+                    if c != False:\n+                        args_exist = True\n+                        e = e._subs(old, new)\n+                    args[i] = (e, c)\n+                    if c == True:\n+                        break\n+                except Exception:\n+                    return super()._eval_subs(old, new)\n+            if not args_exist:\n+                args = ((Undefined, True),)\n+            return self.func(*args)\n+        return super()._eval_subs(old, new)\n         args = list(self.args)\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n", "normalized_occurrence": 1}
