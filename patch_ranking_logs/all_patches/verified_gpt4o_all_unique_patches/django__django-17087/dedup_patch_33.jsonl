{"model_name_or_path": "agentless", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..e7ea601 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -92,9 +92,24 @@ class DeconstructableSerializer(BaseSerializer):\n             arg_string, arg_imports = serializer_factory(arg).serialize()\n             strings.append(arg_string)\n             imports.update(arg_imports)\n+        def _serialize_nested_class_method(cls, method_path):\n+            parts = method_path.split(\".\")\n+            if len(parts) > 2:\n+                module = \".\".join(parts[:-2])\n+                class_name = parts[-2]\n+                method_name = parts[-1]\n+                imports = {\"import %s\" % module}\n+                name = f\"{module}.{class_name}.{method_name}\"\n+            else:\n+                name, imports = cls._serialize_path(method_path)\n+            return name, imports\n+\n         for kw, arg in sorted(kwargs.items()):\n             arg_string, arg_imports = serializer_factory(arg).serialize()\n             imports.update(arg_imports)\n+            if kw == \"default\" and isinstance(arg, str) and \".\" in arg:\n+                arg_string, arg_imports = self._serialize_nested_class_method(arg)\n+                imports.update(arg_imports)\n             strings.append(\"%s=%s\" % (kw, arg_string))\n         return \"%s(%s)\" % (name, \", \".join(strings)), imports\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..56b424a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -63,9 +63,23 @@ class DeconstructableSerializer(BaseSerializer):\n             arg_string, arg_imports = serializer_factory(arg).serialize()\n             strings.append(arg_string)\n             imports.update(arg_imports)\n+        def _serialize_nested_class_method(cls, method_path):\n+            parts = method_path.split('.')\n+            if len(parts) > 2:\n+                module = '.'.join(parts[:-2])\n+                class_name = parts[-2]\n+                method_name = parts[-1]\n+                imports = {'import %s' % module}\n+                name = f'{module}.{class_name}.{method_name}'\n+            else:\n+                name, imports = cls._serialize_path(method_path)\n+            return (name, imports)\n         for kw, arg in sorted(kwargs.items()):\n             arg_string, arg_imports = serializer_factory(arg).serialize()\n             imports.update(arg_imports)\n+            if kw == 'default' and isinstance(arg, str) and ('.' in arg):\n+                arg_string, arg_imports = self._serialize_nested_class_method(arg)\n+                imports.update(arg_imports)\n             strings.append('%s=%s' % (kw, arg_string))\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n", "normalized_occurrence": 1}
