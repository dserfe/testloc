{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..7bae088 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -144,6 +144,20 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+@_with_exception(Skipped)\n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the current module with the given message.\n+\n+    This is a convenience wrapper around skip(msg, allow_module_level=True).\n+    Use this function when you need to skip the entire module, for example\n+    when the module contains syntax or features only available in newer Python versions.\n+\n+    :param str msg: Message to display when the module is skipped.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    return skip(msg=msg, allow_module_level=True)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n", "occurrence": 1, "normalized_patch": "--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n+@_with_exception(Skipped)\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the current module with the given message.\n+\n+    This is a convenience wrapper around skip(msg, allow_module_level=True).\n+    Use this function when you need to skip the entire module, for example\n+    when the module contains syntax or features only available in newer Python versions.\n+\n+    :param str msg: Message to display when the module is skipped.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    return skip(msg=msg, allow_module_level=True)\n+", "normalized_occurrence": 1}
