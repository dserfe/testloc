{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..e2459ff 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -769,8 +769,12 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         def translate(s):\n             if s in greek_unicode:\n                 return greek_unicode.get(s)\n-            else:\n-                return s\n+            # Handle numeric suffixes by splitting into letter and number parts\n+            import re\n+            match = re.match(r'([a-zA-Z]+)(\\d+)', s)\n+            if match:\n+                return [match.group(1), match.group(2)]\n+            return s\n \n         name, supers, subs = split_super_sub(sym.name)\n         name = translate(name)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..f69faab 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -538,8 +538,11 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n         def translate(s):\n             if s in greek_unicode:\n                 return greek_unicode.get(s)\n-            else:\n-                return s\n+            import re\n+            match = re.match('([a-zA-Z]+)(\\\\d+)', s)\n+            if match:\n+                return [match.group(1), match.group(2)]\n+            return s\n         name, supers, subs = split_super_sub(sym.name)\n         name = translate(name)\n         supers = [translate(sup) for sup in supers]\n", "normalized_occurrence": 1}
