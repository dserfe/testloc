{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..7534e67 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -54,13 +54,12 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def shape(self):\n-        numrows = numcols = 0\n-        M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n-        return (numrows, numcols)\n+        if all(block.rows == 0 for block in self.args):\n+            return (0, sum(block.cols for block in self.args))\n+        if all(block.cols == 0 for block in self.args):\n+            return (sum(block.rows for block in self.args), 0)\n+        return (sum(block.rows for block in self.args),\n+                sum(block.cols for block in self.args))\n \n     @property\n     def blockshape(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..f809b93 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -24,13 +24,11 @@ class BlockMatrix(MatrixExpr):\n         return obj\n     @property\n     def shape(self):\n-        numrows = numcols = 0\n-        M = self.blocks\n-        for i in range(M.shape[0]):\n-            numrows += M[i, 0].shape[0]\n-        for i in range(M.shape[1]):\n-            numcols += M[0, i].shape[1]\n-        return (numrows, numcols)\n+        if all((block.rows == 0 for block in self.args)):\n+            return (0, sum((block.cols for block in self.args)))\n+        if all((block.cols == 0 for block in self.args)):\n+            return (sum((block.rows for block in self.args)), 0)\n+        return (sum((block.rows for block in self.args)), sum((block.cols for block in self.args)))\n     @property\n     def blockshape(self):\n         return self.blocks.shape\n", "normalized_occurrence": 1}
