{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..cfe4324 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,10 +403,15 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(\n+        \n+        # Get all matching constraints\n+        all_constraint_names = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n-            **constraint_kwargs\n         )\n+        \n+        # Filter for the specific type we want (unique or index)\n+        constraint_names = [name for name in all_constraint_names if self._constraint_matches_type(model, name, constraint_kwargs)]\n+        \n         if len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n@@ -415,6 +420,21 @@ class BaseDatabaseSchemaEditor:\n             ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n+    def _constraint_matches_type(self, model, constraint_name, constraint_kwargs):\n+        \"\"\"\n+        Check if the constraint matches the type we're looking for (unique or index)\n+        \"\"\"\n+        with self.connection.cursor() as cursor:\n+            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\n+            if constraint_name not in constraints:\n+                return False\n+            constraint = constraints[constraint_name]\n+            if 'unique' in constraint_kwargs:\n+                return constraint.get('unique', False)\n+            if 'index' in constraint_kwargs:\n+                return not constraint.get('unique', False)\n+            return False\n+\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n         if (old_db_table == new_db_table or\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..68ff843 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,10 +229,22 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        all_constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names)\n+        constraint_names = [name for name in all_constraint_names if self._constraint_matches_type(model, name, constraint_kwargs)]\n         if len(constraint_names) != 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+    def _constraint_matches_type(self, model, constraint_name, constraint_kwargs):\n+        with self.connection.cursor() as cursor:\n+            constraints = self.connection.introspection.get_constraints(cursor, model._meta.db_table)\n+            if constraint_name not in constraints:\n+                return False\n+            constraint = constraints[constraint_name]\n+            if 'unique' in constraint_kwargs:\n+                return constraint.get('unique', False)\n+            if 'index' in constraint_kwargs:\n+                return not constraint.get('unique', False)\n+            return False\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n", "normalized_occurrence": 1}
