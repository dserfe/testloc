{"model_name_or_path": "agentless", "instance_id": "django__django-15561", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 86692c3..29837b4 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -121,7 +121,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             super().alter_db_table(model, old_db_table, new_db_table)\n \n     def alter_field(self, model, old_field, new_field, strict=False):\n-        if not self._field_should_be_altered(old_field, new_field):\n+        if not self._field_should_be_altered(old_field, new_field) or old_field.choices != new_field.choices:\n             return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\n@@ -448,7 +448,9 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n                 )\n             )\n         # Alter by remaking table\n-        self._remake_table(model, alter_field=(old_field, new_field))\n+        # Only remake the table if choices are not the only thing being changed\n+        if old_field.choices != new_field.choices:\n+            self._remake_table(model, alter_field=(old_field, new_field))\n         # Rebuild tables with FKs pointing to this field.\n         if new_field.unique and old_type != new_type:\n             related_models = set()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 9a783c9..73f0c80 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -65,7 +65,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         else:\n             super().alter_db_table(model, old_db_table, new_db_table)\n     def alter_field(self, model, old_field, new_field, strict=False):\n-        if not self._field_should_be_altered(old_field, new_field):\n+        if not self._field_should_be_altered(old_field, new_field) or old_field.choices != new_field.choices:\n             return\n         old_field_name = old_field.name\n         table_name = model._meta.db_table\n@@ -179,7 +179,8 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def _alter_field(self, model, old_field, new_field, old_type, new_type, old_db_params, new_db_params, strict=False):\n         if self.connection.features.can_alter_table_rename_column and old_field.column != new_field.column and (self.column_sql(model, old_field) == self.column_sql(model, new_field)) and (not (old_field.remote_field and old_field.db_constraint or (new_field.remote_field and new_field.db_constraint))):\n             return self.execute(self._rename_field_sql(model._meta.db_table, old_field, new_field, new_type))\n-        self._remake_table(model, alter_field=(old_field, new_field))\n+        if old_field.choices != new_field.choices:\n+            self._remake_table(model, alter_field=(old_field, new_field))\n         if new_field.unique and old_type != new_type:\n             related_models = set()\n             opts = new_field.model._meta\n", "normalized_occurrence": 1}
