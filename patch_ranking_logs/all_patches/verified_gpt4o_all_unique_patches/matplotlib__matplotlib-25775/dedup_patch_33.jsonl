{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..e9d57dd 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -151,6 +151,7 @@ class Text(Artist):\n             rotation_mode=rotation_mode,\n         )\n         self.update(kwargs)\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n \n     def _reset_visual_defaults(\n         self,\n@@ -770,6 +771,21 @@ class Text(Artist):\n         renderer.close_group('text')\n         self.stale = False\n \n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiasing for the text.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n+\n     def get_color(self):\n         \"\"\"Return the color of the text.\"\"\"\n         return self._color\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..b990069 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -47,6 +47,7 @@ class Text(Artist):\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n         self.update(kwargs)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n@@ -391,6 +392,11 @@ class Text(Artist):\n         gc.restore()\n         renderer.close_group('text')\n         self.stale = False\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n     def get_color(self):\n         return self._color\n     def get_fontproperties(self):\n", "normalized_occurrence": 2}
