{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14531", "model_patch": "diff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 1c19fd6..963397c 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -50,6 +50,9 @@ def python(expr, **settings):\n     (can be passed to the exec() function without any modifications)\"\"\"\n \n     printer = PythonPrinter(settings)\n+    # First traverse the expression to collect all symbols\n+    printer.doprint(expr)\n+    # Then generate the actual expression string\n     exprp = printer.doprint(expr)\n \n     result = ''\n@@ -89,4 +92,4 @@ def python(expr, **settings):\n \n def print_python(expr, **settings):\n     \"\"\"Print output of python() function\"\"\"\n-    print(python(expr, **settings))\n+    print(python(expr, **settings))\ndiff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex 2f140fa..a4dd054 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -630,7 +630,7 @@ class StrPrinter(Printer):\n         }\n \n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n \n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)),\n                            self._relationals.get(expr.rel_op) or expr.rel_op,\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/str.py b/sympy/printing/str.py\nindex b15ce89..6fc5d19 100644\n--- a/sympy/printing/str.py\n+++ b/sympy/printing/str.py\n@@ -455,7 +455,7 @@ class StrPrinter(Printer):\n     def _print_Relational(self, expr):\n         charmap = {'==': 'Eq', '!=': 'Ne', ':=': 'Assignment', '+=': 'AddAugmentedAssignment', '-=': 'SubAugmentedAssignment', '*=': 'MulAugmentedAssignment', '/=': 'DivAugmentedAssignment', '%=': 'ModAugmentedAssignment'}\n         if expr.rel_op in charmap:\n-            return '%s(%s, %s)' % (charmap[expr.rel_op], expr.lhs, expr.rhs)\n+            return '%s(%s, %s)' % (charmap[expr.rel_op], self._print(expr.lhs), self._print(expr.rhs))\n         return '%s %s %s' % (self.parenthesize(expr.lhs, precedence(expr)), self._relationals.get(expr.rel_op) or expr.rel_op, self.parenthesize(expr.rhs, precedence(expr)))\n     def _print_ComplexRootOf(self, expr):\n         return 'CRootOf(%s, %d)' % (self._print_Add(expr.expr, order='lex'), expr.index)\ndiff --git a/sympy/printing/python.py b/sympy/printing/python.py\nindex 2a63937..8941b51 100644\n--- a/sympy/printing/python.py\n+++ b/sympy/printing/python.py\n@@ -28,6 +28,7 @@ class PythonPrinter(ReprPrinter, StrPrinter):\n         raise ValueError('Modules in the expression are unacceptable')\n def python(expr, **settings):\n     printer = PythonPrinter(settings)\n+    printer.doprint(expr)\n     exprp = printer.doprint(expr)\n     result = ''\n     renamings = {}\n", "normalized_occurrence": 1}
