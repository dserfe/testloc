{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..b443015 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -91,7 +91,14 @@ class ClassDiagram(Figure, FilterMixIn):\n         ):\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            if isinstance(associated_nodes, list) and associated_nodes:\n+                if isinstance(associated_nodes[0], astroid.AssignName) and associated_nodes[0].annotation:\n+                    annotation = associated_nodes[0].annotation.as_string()\n+                    node_name = f\"{node_name} : {annotation}\"\n+                else:\n+                    names = self.class_names(associated_nodes)\n+                    if names:\n+                        node_name = f\"{node_name} : {', '.join(names)}\"\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..f179bc4 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -60,7 +60,14 @@ class ClassDiagram(Figure, FilterMixIn):\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n-            names = self.class_names(associated_nodes)\n+            if isinstance(associated_nodes, list) and associated_nodes:\n+                if isinstance(associated_nodes[0], astroid.AssignName) and associated_nodes[0].annotation:\n+                    annotation = associated_nodes[0].annotation.as_string()\n+                    node_name = f'{node_name} : {annotation}'\n+                else:\n+                    names = self.class_names(associated_nodes)\n+                    if names:\n+                        node_name = f\"{node_name} : {', '.join(names)}\"\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n", "normalized_occurrence": 1}
