{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..324769d 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -111,7 +111,7 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y.dropna())) for y in ys))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n@@ -340,7 +340,7 @@ def type_of_target(y, input_name=\"\"):\n             return \"binary\"  # []\n         # 2-D empty array: [[]]\n         return \"unknown\"\n-    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], str):\n+    if not issparse(y) and y.dtype == object and not isinstance(y.flat[0], (str, bool, np.number)):\n         # [obj_1] and not [\"label_1\"]\n         return \"unknown\"\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..351ec19 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -34,7 +34,7 @@ def unique_labels(*ys):\n     if is_array_api:\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n-    ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y)) for y in ys)))\n+    ys_labels = set(chain.from_iterable(((i for i in _unique_labels(y.dropna())) for y in ys)))\n     if len(set((isinstance(label, str) for label in ys_labels))) > 1:\n         raise ValueError('Mix of label input types (string and number)')\n     return xp.asarray(sorted(ys_labels))\n@@ -91,7 +91,7 @@ def type_of_target(y, input_name=''):\n         if y.ndim == 1:\n             return 'binary'\n         return 'unknown'\n-    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], str)):\n+    if not issparse(y) and y.dtype == object and (not isinstance(y.flat[0], (str, bool, np.number))):\n         return 'unknown'\n     if y.ndim == 2 and y.shape[1] > 1:\n         suffix = '-multioutput'\n", "normalized_occurrence": 1}
