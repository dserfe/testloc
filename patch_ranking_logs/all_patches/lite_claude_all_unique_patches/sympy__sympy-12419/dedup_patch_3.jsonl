{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex b4a2caa..c679926 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -846,6 +846,9 @@ def telescopic(L, R, limits):\n def eval_sum(f, limits):\n     from sympy.concrete.delta import deltasummation, _has_simple_delta\n     from sympy.functions import KroneckerDelta\n+    from sympy.matrices.expressions import MatrixElement\n+    from sympy import ask, Q\n+    from sympy.core.singleton import S\n \n     (i, a, b) = limits\n     if f is S.Zero:\n@@ -867,6 +870,20 @@ def eval_sum(f, limits):\n                 newargs.append((newexpr, arg.cond))\n             return f.func(*newargs)\n \n+    # Special case for identity matrix elements\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if ask(Q.identity(matrix)):\n+            i, j = f.args[1:]\n+            if i == limits[0]:  # summation over rows\n+                if j in f.free_symbols:  # part of a nested sum\n+                    return KroneckerDelta(i, j)\n+                return S.One  # diagonal element\n+            if j == limits[0]:  # summation over columns\n+                if i in f.free_symbols:  # part of a nested sum\n+                    return KroneckerDelta(i, j)\n+                return S.One  # diagonal element\n+\n     if f.has(KroneckerDelta) and _has_simple_delta(f, limits[0]):\n         return deltasummation(f, limits)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 3200d91..f5d0bc1 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -325,6 +325,9 @@ def telescopic(L, R, limits):\n def eval_sum(f, limits):\n     from sympy.concrete.delta import deltasummation, _has_simple_delta\n     from sympy.functions import KroneckerDelta\n+    from sympy.matrices.expressions import MatrixElement\n+    from sympy import ask, Q\n+    from sympy.core.singleton import S\n     i, a, b = limits\n     if f is S.Zero:\n         return S.Zero\n@@ -341,6 +344,18 @@ def eval_sum(f, limits):\n                     return None\n                 newargs.append((newexpr, arg.cond))\n             return f.func(*newargs)\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if ask(Q.identity(matrix)):\n+            i, j = f.args[1:]\n+            if i == limits[0]:\n+                if j in f.free_symbols:\n+                    return KroneckerDelta(i, j)\n+                return S.One\n+            if j == limits[0]:\n+                if i in f.free_symbols:\n+                    return KroneckerDelta(i, j)\n+                return S.One\n     if f.has(KroneckerDelta) and _has_simple_delta(f, limits[0]):\n         return deltasummation(f, limits)\n     dif = b - a\n", "normalized_occurrence": 1}
