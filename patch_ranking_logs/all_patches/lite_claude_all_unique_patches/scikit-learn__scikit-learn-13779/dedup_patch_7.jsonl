{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..e9e0a91 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -91,9 +91,9 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              'required!')\n \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n-                delayed(_parallel_fit_estimator)(clone(clf), X, y,\n+                delayed(_parallel_fit_estimator)(clf, X, y,\n                                                  sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+                for clf in clfs if clf is not None and clone(clf))\n \n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..c96c8da 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -42,7 +42,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n         n_isnone = np.sum([clf is None for _, clf in self.estimators])\n         if n_isnone == len(self.estimators):\n             raise ValueError('All estimators are None. At least one is required!')\n-        self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clone(clf), X, y, sample_weight=sample_weight) for clf in clfs if clf is not None))\n+        self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clf, X, y, sample_weight=sample_weight) for clf in clfs if clf is not None and clone(clf)))\n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n             self.named_estimators_[k[0]] = e\n", "normalized_occurrence": 1}
