{"model_name_or_path": "agentless", "instance_id": "django__django-14787", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 9a57ac9..dc9dcae 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -19,6 +19,18 @@ def _update_method_wrapper(_wrapper, decorator):\n     update_wrapper(_wrapper, dummy)\n \n \n+from functools import partial, update_wrapper\n+\n+class _BoundMethodPartial(partial):\n+    \"\"\"\n+    A custom version of functools.partial that preserves the __name__,\n+    __module__, and other attributes expected by the wraps decorator.\n+    \"\"\"\n+    def __getattribute__(self, item):\n+        if item in ('__name__', '__module__', '__doc__'):\n+            return getattr(self.func, item)\n+        return super().__getattribute__(item)\n+\n def _multi_decorate(decorators, method):\n     \"\"\"\n     Decorate `method` with one or more function decorators. `decorators` can be\n@@ -37,7 +49,7 @@ def _multi_decorate(decorators, method):\n         # 'self' argument, but it's a closure over self so it can call\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = _BoundMethodPartial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 7f6be4d..4295927 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -9,13 +9,19 @@ def _update_method_wrapper(_wrapper, decorator):\n     def dummy(*args, **kwargs):\n         pass\n     update_wrapper(_wrapper, dummy)\n+from functools import partial, update_wrapper\n+class _BoundMethodPartial(partial):\n+    def __getattribute__(self, item):\n+        if item in ('__name__', '__module__', '__doc__'):\n+            return getattr(self.func, item)\n+        return super().__getattribute__(item)\n def _multi_decorate(decorators, method):\n     if hasattr(decorators, '__iter__'):\n         decorators = decorators[::-1]\n     else:\n         decorators = [decorators]\n     def _wrapper(self, *args, **kwargs):\n-        bound_method = partial(method.__get__(self, type(self)))\n+        bound_method = _BoundMethodPartial(method.__get__(self, type(self)))\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "normalized_occurrence": 1}
