{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..1f2705a 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -316,6 +316,8 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     None if (and only if) the name refers to a field.\n     \"\"\"\n     attr = None\n+    if name == 'password' and isinstance(getattr(model, name, None), ReadOnlyPasswordHashWidget):\n+        return (None, None) if return_attr else None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..9698765 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -180,6 +180,8 @@ def _get_non_gfk_field(opts, name):\n     return field\n def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n     attr = None\n+    if name == 'password' and isinstance(getattr(model, name, None), ReadOnlyPasswordHashWidget):\n+        return (None, None) if return_attr else None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n         try:\n", "normalized_occurrence": 1}
