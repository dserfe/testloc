{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-7080", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex 440e6fe..485f21b 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -597,12 +597,12 @@ class PyLinter(\n                         # Skip subtree of already discovered package.\n                         continue\n \n-                    if _is_ignored_file(\n+                    if self._is_ignored_file(\n                         root,\n                         self.config.ignore,\n                         self.config.ignore_patterns,\n                         self.config.ignore_paths,\n-                    ):\n+                    ) or any(re.search(pattern, root) for pattern in self.config.ignore_paths):\n                         skip_subtrees.append(root)\n                         continue\n \n@@ -775,7 +775,7 @@ class PyLinter(\n             modules,\n             self.config.ignore,\n             self.config.ignore_patterns,\n-            self._ignore_paths,\n+            self.config.ignore_paths,\n         )\n         for error in errors:\n             message = modname = error[\"mod\"]\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex afb1178..7b321fe 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -230,7 +230,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n                 for root, _, files in os.walk(something):\n                     if any((root.startswith(s) for s in skip_subtrees)):\n                         continue\n-                    if _is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths):\n+                    if self._is_ignored_file(root, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths) or any((re.search(pattern, root) for pattern in self.config.ignore_paths)):\n                         skip_subtrees.append(root)\n                         continue\n                     if '__init__.py' in files:\n@@ -306,7 +306,7 @@ class PyLinter(_ArgumentsManager, _MessageStateHandler, reporters.ReportsHandler\n             if self.should_analyze_file(name, filepath, is_argument=is_arg):\n                 yield FileItem(name, filepath, descr['basename'])\n     def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n-        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self._ignore_paths)\n+        result, errors = expand_modules(modules, self.config.ignore, self.config.ignore_patterns, self.config.ignore_paths)\n         for error in errors:\n             message = modname = error['mod']\n             key = error['key']\n", "normalized_occurrence": 1}
