{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..f7a6bf1 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,13 +408,58 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+import traceback\n+\n+def serialize_exception(exc):\n+    if exc is None:\n+        return None\n+    return {\n+        'type': type(exc).__name__,\n+        'args': exc.args,\n+        'message': str(exc),\n+        'cause': serialize_exception(exc.__cause__),\n+        'context': serialize_exception(exc.__context__)\n+    }\n+\n+def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data[\"_report_type\"] = report.__class__.__name__\n+        if 'longrepr' in data and isinstance(data['longrepr'], dict):\n+            data['longrepr'] = deserialize_exception(data['longrepr'])\n+        return data\n+\n+import traceback\n+\n+def serialize_exception(exc):\n+    if exc is None:\n+        return None\n+    return {\n+        'type': type(exc).__name__,\n+        'args': exc.args,\n+        'message': str(exc),\n+        'cause': serialize_exception(exc.__cause__),\n+        'context': serialize_exception(exc.__context__)\n+    }\n+\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data[\"_report_type\"] = report.__class__.__name__\n+        if isinstance(report.longrepr, Exception):\n+            data['longrepr'] = serialize_exception(report.longrepr)\n         return data\n \n \n+def deserialize_exception(data):\n+    if data is None:\n+        return None\n+    exc_type = globals()[data['type']]\n+    exc = exc_type(*data['args'])\n+    exc.__cause__ = deserialize_exception(data['cause'])\n+    exc.__context__ = deserialize_exception(data['context'])\n+    return exc\n+\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..a8ba376 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,11 +205,38 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+import traceback\n+def serialize_exception(exc):\n+    if exc is None:\n+        return None\n+    return {'type': type(exc).__name__, 'args': exc.args, 'message': str(exc), 'cause': serialize_exception(exc.__cause__), 'context': serialize_exception(exc.__context__)}\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n         data['_report_type'] = report.__class__.__name__\n+        if 'longrepr' in data and isinstance(data['longrepr'], dict):\n+            data['longrepr'] = deserialize_exception(data['longrepr'])\n         return data\n+import traceback\n+def serialize_exception(exc):\n+    if exc is None:\n+        return None\n+    return {'type': type(exc).__name__, 'args': exc.args, 'message': str(exc), 'cause': serialize_exception(exc.__cause__), 'context': serialize_exception(exc.__context__)}\n+def pytest_report_to_serializable(report):\n+    if isinstance(report, (TestReport, CollectReport)):\n+        data = report._to_json()\n+        data['_report_type'] = report.__class__.__name__\n+        if isinstance(report.longrepr, Exception):\n+            data['longrepr'] = serialize_exception(report.longrepr)\n+        return data\n+def deserialize_exception(data):\n+    if data is None:\n+        return None\n+    exc_type = globals()[data['type']]\n+    exc = exc_type(*data['args'])\n+    exc.__cause__ = deserialize_exception(data['cause'])\n+    exc.__context__ = deserialize_exception(data['context'])\n+    return exc\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n", "normalized_occurrence": 1}
