{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..afb03e9 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -348,7 +348,7 @@ class LogCaptureFixture:\n         self._initial_logger_levels = {}  # type: Dict[Optional[str], int]\n \n     def _finalize(self) -> None:\n-        \"\"\"Finalizes the fixture.\n+        \"\"\"Finalizes the fixture. \n \n         This restores the log levels changed by :meth:`set_level`.\n         \"\"\"\n@@ -356,6 +356,8 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        # restore handler level\n+        self.handler.setLevel(logging.NOTSET)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..80a0c1e 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -168,6 +168,7 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        self.handler.setLevel(logging.NOTSET)\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n", "normalized_occurrence": 5}
