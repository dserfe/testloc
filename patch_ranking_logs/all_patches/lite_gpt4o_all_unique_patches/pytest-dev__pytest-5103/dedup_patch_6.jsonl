{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..35c03bd 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -984,12 +984,46 @@ warn_explicit(\n             else:  # **args have `arg` keywords with an .arg of None\n                 arg_expls.append(\"**\" + expl)\n \n-        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n-        return res, outer_expl\n+        if isinstance(call.func, ast.Name) and call.func.id in {\"all\", \"any\"}:\n+            res_var = self.variable()\n+            iter_var = self.variable()\n+            body = []\n+            loop_body = []\n+            fail_body = []\n+            test_var = ast.Name(res_var, ast.Load())\n+            \n+            if call.func.id == \"all\":\n+                test = ast.UnaryOp(ast.Not(), test_var)\n+            else:\n+                test = test_var\n+            \n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(call.func.id == \"all\")))\n+            \n+            for arg in call.args:\n+                self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], arg))\n+                loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], self.visit(arg)[0]))\n+                loop_body.append(ast.If(test, fail_body, []))\n+                body.append(ast.For(ast.Name('item', ast.Store()), ast.Name(iter_var, ast.Load()), loop_body, []))\n+            \n+            fail_body.append(ast.Raise(\n+                ast.Call(\n+                    func=ast.Name(id='AssertionError', ctx=ast.Load()),\n+                    args=[ast.Str(s=f'{call.func.id} failed for item: %s' % test_var.id)],\n+                    keywords=[]\n+                ), None, None\n+            ))\n+            \n+            self.statements.extend(body)\n+            res = ast.Name(res_var, ast.Load())\n+            res_expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            return res, res_expl\n+        else:\n+            expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+            return res, outer_expl\n \n     def visit_Starred(self, starred):\n         # From Python 3.5, a Starred node can appear in a function call\n@@ -1081,4 +1115,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..2bd51a9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -559,12 +559,35 @@ class AssertionRewriter(ast.NodeVisitor):\n                 arg_expls.append(keyword.arg + '=' + expl)\n             else:\n                 arg_expls.append('**' + expl)\n-        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n-        new_call = ast.Call(new_func, new_args, new_kwargs)\n-        res = self.assign(new_call)\n-        res_expl = self.explanation_param(self.display(res))\n-        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n-        return (res, outer_expl)\n+        if isinstance(call.func, ast.Name) and call.func.id in {'all', 'any'}:\n+            res_var = self.variable()\n+            iter_var = self.variable()\n+            body = []\n+            loop_body = []\n+            fail_body = []\n+            test_var = ast.Name(res_var, ast.Load())\n+            if call.func.id == 'all':\n+                test = ast.UnaryOp(ast.Not(), test_var)\n+            else:\n+                test = test_var\n+            self.statements.append(ast.Assign([ast.Name(res_var, ast.Store())], ast.NameConstant(call.func.id == 'all')))\n+            for arg in call.args:\n+                self.statements.append(ast.Assign([ast.Name(iter_var, ast.Store())], arg))\n+                loop_body.append(ast.Assign([ast.Name(res_var, ast.Store())], self.visit(arg)[0]))\n+                loop_body.append(ast.If(test, fail_body, []))\n+                body.append(ast.For(ast.Name('item', ast.Store()), ast.Name(iter_var, ast.Load()), loop_body, []))\n+            fail_body.append(ast.Raise(ast.Call(func=ast.Name(id='AssertionError', ctx=ast.Load()), args=[ast.Str(s=f'{call.func.id} failed for item: %s' % test_var.id)], keywords=[]), None, None))\n+            self.statements.extend(body)\n+            res = ast.Name(res_var, ast.Load())\n+            res_expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            return (res, res_expl)\n+        else:\n+            expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+            new_call = ast.Call(new_func, new_args, new_kwargs)\n+            res = self.assign(new_call)\n+            res_expl = self.explanation_param(self.display(res))\n+            outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+            return (res, outer_expl)\n     def visit_Starred(self, starred):\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 1}
