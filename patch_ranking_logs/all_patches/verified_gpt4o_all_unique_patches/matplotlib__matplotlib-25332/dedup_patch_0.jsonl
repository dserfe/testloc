{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..2fa1eba 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,8 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Remove weakref objects from the state\n+        state = {k: v for k, v in state.items() if not isinstance(v, weakref.ReferenceType)}\n         return state\n \n     def __setstate__(self, state):\n@@ -763,7 +765,8 @@ class _AxesBase(martist.Artist):\n         twinned_siblings = state.pop(\"_twinned_axes\")\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n-        self.__dict__ = state\n+        # Restore the state while ignoring missing weak references\n+        self.__dict__.update({k: v for k, v in state.items() if not isinstance(v, weakref.ReferenceType)})\n         self._stale = True\n \n     def __repr__(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..9f16c31 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,6 +345,7 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        state = {k: v for k, v in state.items() if not isinstance(v, weakref.ReferenceType)}\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n@@ -353,7 +354,7 @@ class _AxesBase(martist.Artist):\n         twinned_siblings = state.pop('_twinned_axes')\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n-        self.__dict__ = state\n+        self.__dict__.update({k: v for k, v in state.items() if not isinstance(v, weakref.ReferenceType)})\n         self._stale = True\n     def __repr__(self):\n         fields = []\n", "normalized_occurrence": 1}
