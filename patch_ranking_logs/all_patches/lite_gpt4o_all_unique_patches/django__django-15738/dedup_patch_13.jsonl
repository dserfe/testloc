{"model_name_or_path": "agentless", "instance_id": "django__django-15738", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 95f06ff..7f3b6c5 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -187,13 +187,13 @@ class MigrationAutodetector:\n         # Generate field renaming operations.\n         self.generate_renamed_fields()\n         self.generate_renamed_indexes()\n-        # Generate removal of foo together.\n-        self.generate_removed_altered_unique_together()\n-        self.generate_removed_altered_index_together()\n         # Generate field operations.\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        # Generate removal of foo together.\n+        self.generate_removed_altered_unique_together()\n+        self.generate_removed_altered_index_together()\n         self.generate_altered_order_with_respect_to()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n@@ -1497,7 +1497,19 @@ class MigrationAutodetector:\n                 )\n \n     def generate_removed_altered_unique_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n+        for (app_label, model_name), model_state in self.from_state.models.items():\n+            if (app_label, model_name) not in self.to_state.models:\n+                continue\n+            old_value = model_state.options.get(\"unique_together\", set())\n+            new_value = self.to_state.models[app_label, model_name].options.get(\"unique_together\", set())\n+            if old_value != new_value:\n+                self.add_operation(\n+                    app_label,\n+                    operations.AlterUniqueTogether(\n+                        name=model_name,\n+                        unique_together=new_value,\n+                    ),\n+                )\n \n     def generate_removed_altered_index_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex a7b157c..13c7691 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -97,11 +97,11 @@ class MigrationAutodetector:\n         self.generate_removed_indexes()\n         self.generate_renamed_fields()\n         self.generate_renamed_indexes()\n-        self.generate_removed_altered_unique_together()\n-        self.generate_removed_altered_index_together()\n         self.generate_removed_fields()\n         self.generate_added_fields()\n         self.generate_altered_fields()\n+        self.generate_removed_altered_unique_together()\n+        self.generate_removed_altered_index_together()\n         self.generate_altered_order_with_respect_to()\n         self.generate_altered_unique_together()\n         self.generate_altered_index_together()\n@@ -607,7 +607,13 @@ class MigrationAutodetector:\n             if removal_value or old_value:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n     def generate_removed_altered_unique_together(self):\n-        self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n+        for (app_label, model_name), model_state in self.from_state.models.items():\n+            if (app_label, model_name) not in self.to_state.models:\n+                continue\n+            old_value = model_state.options.get('unique_together', set())\n+            new_value = self.to_state.models[app_label, model_name].options.get('unique_together', set())\n+            if old_value != new_value:\n+                self.add_operation(app_label, operations.AlterUniqueTogether(name=model_name, unique_together=new_value))\n     def generate_removed_altered_index_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n     def _generate_altered_foo_together(self, operation):\n", "normalized_occurrence": 1}
