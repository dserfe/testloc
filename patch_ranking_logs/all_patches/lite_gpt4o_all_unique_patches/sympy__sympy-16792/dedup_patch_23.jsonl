{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..81a1807 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -455,7 +455,7 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             shape = '(' + ','.join(self._string_var(i[1] + 1) for i in arg.dimensions) + ')'\n             return proto + \" = np.empty({shape})\".format(shape=shape)\n         else:\n-            return proto + \" = 0\"\n+            return proto\n \n     def _call_arg(self, arg):\n         if arg.dimensions:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..c133498 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -207,7 +207,7 @@ class CythonCodeWrapper(CodeWrapper):\n             shape = '(' + ','.join((self._string_var(i[1] + 1) for i in arg.dimensions)) + ')'\n             return proto + ' = np.empty({shape})'.format(shape=shape)\n         else:\n-            return proto + ' = 0'\n+            return proto\n     def _call_arg(self, arg):\n         if arg.dimensions:\n             t = arg.get_datatype('c')\n", "normalized_occurrence": 1}
