{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24539", "model_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 8995407..abbcddb 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -616,10 +616,10 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n             return new_ring.from_dict(self, self.ring.domain)\n \n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n+        elif len(symbols) != self.ring.ngens:\n+            raise ValueError(\"not enough symbols, expected %s got %s\" % (self.ring.ngens, len(symbols)))\n \n         return expr_from_dict(self.as_expr_dict(), *symbols)\n \n", "occurrence": 37, "normalized_patch": "diff --git a/sympy/polys/rings.py b/sympy/polys/rings.py\nindex 082d6a9..c4cb9b5 100644\n--- a/sympy/polys/rings.py\n+++ b/sympy/polys/rings.py\n@@ -337,10 +337,10 @@ class PolyElement(DomainElement, DefaultPrinting, CantSympify, dict):\n         else:\n             return new_ring.from_dict(self, self.ring.domain)\n     def as_expr(self, *symbols):\n-        if symbols and len(symbols) != self.ring.ngens:\n-            raise ValueError('not enough symbols, expected %s got %s' % (self.ring.ngens, len(symbols)))\n-        else:\n+        if not symbols:\n             symbols = self.ring.symbols\n+        elif len(symbols) != self.ring.ngens:\n+            raise ValueError('not enough symbols, expected %s got %s' % (self.ring.ngens, len(symbols)))\n         return expr_from_dict(self.as_expr_dict(), *symbols)\n     def as_expr_dict(self):\n         to_sympy = self.ring.domain.to_sympy\n", "normalized_occurrence": 37}
