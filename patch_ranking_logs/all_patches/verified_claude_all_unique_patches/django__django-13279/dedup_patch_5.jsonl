{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..20f33fd 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -103,7 +103,11 @@ class SessionBase:\n \n     def _hash(self, value):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n-        key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            # Use legacy salt format for backward compatibility\n+            key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n+        else:\n+            key_salt = self.key_salt\n         return salted_hmac(key_salt, value).hexdigest()\n \n     def encode(self, session_dict):\n@@ -374,4 +378,4 @@ class SessionBase:\n         NotImplementedError. If it isn't necessary, because the backend has\n         a built-in expiration mechanism, it should be a no-op.\n         \"\"\"\n-        raise NotImplementedError('This backend does not support clear_expired().')\n+        raise NotImplementedError('This backend does not support clear_expired().')\n", "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 25789fc..39e5679 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -61,7 +61,10 @@ class SessionBase:\n     def delete_test_cookie(self):\n         del self[self.TEST_COOKIE_NAME]\n     def _hash(self, value):\n-        key_salt = 'django.contrib.sessions' + self.__class__.__name__\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            key_salt = 'django.contrib.sessions' + self.__class__.__name__\n+        else:\n+            key_salt = self.key_salt\n         return salted_hmac(key_salt, value).hexdigest()\n     def encode(self, session_dict):\n         return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n", "normalized_occurrence": 1}
