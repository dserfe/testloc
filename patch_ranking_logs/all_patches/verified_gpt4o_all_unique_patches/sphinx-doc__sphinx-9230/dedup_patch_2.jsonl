{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..1eb0862 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -85,23 +85,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                # :param xxx:\n-                arg = arguments.setdefault(parts[1], {})\n-                arg['param'] = True\n-            elif len(parts) > 2:\n-                # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+        match = re.match(r'^(param|type) (.+)$', field_name)\n+        if match:\n+            directive, name = match.groups()\n+            if directive == 'param':\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n+                if 'type' not in arg:\n+                    arg['type'] = False\n+            elif directive == 'type':\n+                arg = arguments.setdefault(name, {})\n                 arg['type'] = True\n-        elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif field_name == 'rtype':\n             arguments['return'] = {'type': True}\n \n     for name, annotation in annotations.items():\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..eecb409 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -57,21 +57,18 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n         field_name = field[0].astext()\n-        parts = re.split(' +', field_name)\n-        if parts[0] == 'param':\n-            if len(parts) == 2:\n-                arg = arguments.setdefault(parts[1], {})\n-                arg['param'] = True\n-            elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+        match = re.match('^(param|type) (.+)$', field_name)\n+        if match:\n+            directive, name = match.groups()\n+            if directive == 'param':\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n+                if 'type' not in arg:\n+                    arg['type'] = False\n+            elif directive == 'type':\n+                arg = arguments.setdefault(name, {})\n                 arg['type'] = True\n-        elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n-            arg = arguments.setdefault(name, {})\n-            arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif field_name == 'rtype':\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n         if name == 'return':\n", "normalized_occurrence": 1}
