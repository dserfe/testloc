{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..3830ac9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -968,6 +968,60 @@ warn_explicit(\n         \"\"\"\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n+        # Special handling for all() and any() calls\n+        if (isinstance(call.func, ast.Name) and \n+            call.func.id in ('all', 'any') and \n+            len(call.args) == 1):\n+            \n+            # Handle generator expressions and list comprehensions\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                var_name = self.variable()\n+                res_name = self.variable()\n+                \n+                # Create result variable initialization\n+                init = ast.Assign(\n+                    [ast.Name(res_name, ast.Store())], \n+                    ast.NameConstant(call.func.id == 'all')  # True for all(), False for any()\n+                )\n+                self.statements.append(init)\n+                \n+                # Create the for loop\n+                target = arg.generators[0].target\n+                iter_expr = arg.generators[0].iter\n+                test_expr = arg.elt\n+                \n+                # Create loop body\n+                if call.func.id == 'all':\n+                    # if not expr: result = False; break\n+                    body = [\n+                        ast.If(\n+                            ast.UnaryOp(ast.Not(), test_expr),\n+                            [\n+                                ast.Assign([ast.Name(res_name, ast.Store())], ast.NameConstant(False)),\n+                                ast.Break()\n+                            ],\n+                            []\n+                        )\n+                    ]\n+                else:  # any\n+                    # if expr: result = True; break\n+                    body = [\n+                        ast.If(\n+                            test_expr,\n+                            [\n+                                ast.Assign([ast.Name(res_name, ast.Store())], ast.NameConstant(True)),\n+                                ast.Break()\n+                            ],\n+                            []\n+                        )\n+                    ]\n+                \n+                # Create and add the for loop\n+                loop = ast.For(target, iter_expr, body, [])\n+                self.statements.append(loop)\n+                \n+                return ast.Name(res_name, ast.Load()), \"{}({})\".format(call.func.id, test_expr)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n@@ -1081,4 +1135,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..4c204e5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,23 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any') and (len(call.args) == 1):\n+            arg = call.args[0]\n+            if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                var_name = self.variable()\n+                res_name = self.variable()\n+                init = ast.Assign([ast.Name(res_name, ast.Store())], ast.NameConstant(call.func.id == 'all'))\n+                self.statements.append(init)\n+                target = arg.generators[0].target\n+                iter_expr = arg.generators[0].iter\n+                test_expr = arg.elt\n+                if call.func.id == 'all':\n+                    body = [ast.If(ast.UnaryOp(ast.Not(), test_expr), [ast.Assign([ast.Name(res_name, ast.Store())], ast.NameConstant(False)), ast.Break()], [])]\n+                else:\n+                    body = [ast.If(test_expr, [ast.Assign([ast.Name(res_name, ast.Store())], ast.NameConstant(True)), ast.Break()], [])]\n+                loop = ast.For(target, iter_expr, body, [])\n+                self.statements.append(loop)\n+                return (ast.Name(res_name, ast.Load()), '{}({})'.format(call.func.id, test_expr))\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
