{"model_name_or_path": "agentless", "instance_id": "django__django-15957", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex dad7142..5d98e86 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -145,7 +145,21 @@ class ForwardManyToOneDescriptor:\n             }\n         else:\n             query = {\"%s__in\" % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        if queryset.query.low_mark == 0 and queryset.query.high_mark is None:\n+            queryset = queryset.filter(**query)\n+        else:\n+            # If the queryset is sliced, we need to fetch all related objects and then slice manually\n+            original_queryset = queryset.filter(**query)\n+            queryset = list(original_queryset)\n+            for instance in instances:\n+                instance_prefetch_cache_name = self.field.get_cache_name()\n+                instance._prefetched_objects_cache = getattr(\n+                    instance, '_prefetched_objects_cache', {}\n+                )\n+                related_objects = [\n+                    obj for obj in queryset if rel_obj_attr(obj) == instance_attr(instance)\n+                ][:original_queryset.query.high_mark]\n+                instance._prefetched_objects_cache[instance_prefetch_cache_name] = related_objects\n \n         # Since we're going to assign directly in the cache,\n         # we must manage the reverse relation cache manually.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 4910c4e..cf11e3d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -33,7 +33,16 @@ class ForwardManyToOneDescriptor:\n             query = {'%s__in' % related_field.name: {instance_attr(inst)[0] for inst in instances}}\n         else:\n             query = {'%s__in' % self.field.related_query_name(): instances}\n-        queryset = queryset.filter(**query)\n+        if queryset.query.low_mark == 0 and queryset.query.high_mark is None:\n+            queryset = queryset.filter(**query)\n+        else:\n+            original_queryset = queryset.filter(**query)\n+            queryset = list(original_queryset)\n+            for instance in instances:\n+                instance_prefetch_cache_name = self.field.get_cache_name()\n+                instance._prefetched_objects_cache = getattr(instance, '_prefetched_objects_cache', {})\n+                related_objects = [obj for obj in queryset if rel_obj_attr(obj) == instance_attr(instance)][:original_queryset.query.high_mark]\n+                instance._prefetched_objects_cache[instance_prefetch_cache_name] = related_objects\n         if not remote_field.multiple:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n", "normalized_occurrence": 1}
