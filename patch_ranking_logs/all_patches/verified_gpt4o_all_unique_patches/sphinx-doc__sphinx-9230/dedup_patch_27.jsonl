{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..b38c48c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,12 +93,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = parts[2]\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[1]\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -111,7 +111,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + parts[1])\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n@@ -143,11 +143,11 @@ def augment_descriptions_with_types(\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = parts[2]\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[1]\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n@@ -160,7 +160,7 @@ def augment_descriptions_with_types(\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + parts[1])\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..867f3e8 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -63,12 +63,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n                 arg = arguments.setdefault(parts[1], {})\n                 arg['param'] = True\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = parts[2]\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[1]\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n@@ -79,7 +79,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + parts[1])\n             field += nodes.field_body('', nodes.paragraph('', annotation))\n             node += field\n         if not arg.get('param'):\n@@ -103,11 +103,11 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             if len(parts) == 2:\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = parts[2]\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n-            name = ' '.join(parts[1:])\n+            name = parts[1]\n             has_type.add(name)\n         elif parts[0] == 'return':\n             has_description.add('return')\n@@ -118,7 +118,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n+            field += nodes.field_name('', 'type ' + parts[1])\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n     if 'return' in annotations:\n", "normalized_occurrence": 1}
