{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..cbf84d2 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -911,10 +911,10 @@ class Permutation(Basic):\n         if is_cycle:\n             # it's not necessarily canonical so we won't store\n             # it -- use the array form instead\n-            c = Cycle()\n+            aform = list(range(max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci)):\n+                    aform[ci[i-1]], aform[ci[i]] = aform[ci[i]], aform[ci[i-1]]\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..7990c9b 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -203,10 +203,10 @@ class Permutation(Basic):\n         if not is_cycle and any((i not in temp for i in range(len(temp)))):\n             raise ValueError('Integers 0 through %s must be present.' % max(temp))\n         if is_cycle:\n-            c = Cycle()\n+            aform = list(range(max(temp) + 1))\n             for ci in args:\n-                c = c(*ci)\n-            aform = c.list()\n+                for i in range(len(ci)):\n+                    aform[ci[i - 1]], aform[ci[i]] = (aform[ci[i]], aform[ci[i - 1]])\n         else:\n             aform = list(args)\n         if size and size > len(aform):\n", "normalized_occurrence": 1}
