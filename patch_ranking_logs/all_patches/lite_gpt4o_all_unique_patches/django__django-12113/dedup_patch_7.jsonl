{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..62decf0 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -274,7 +274,12 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         # transaction explicitly rather than simply disable autocommit.\n         return self.in_atomic_block\n \n-    def _set_autocommit(self, autocommit):\n+    def close(self):\n+        self.validate_thread_sharing()\n+        # Close the connection to ensure it doesn't stay open and lock the database.\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         if autocommit:\n             level = None\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..fa39346 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -131,7 +131,11 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n             BaseDatabaseWrapper.close(self)\n     def _savepoint_allowed(self):\n         return self.in_atomic_block\n-    def _set_autocommit(self, autocommit):\n+    def close(self):\n+        self.validate_thread_sharing()\n+        if self.connection is not None:\n+            self.connection.close()\n+            self.connection = None\n         if autocommit:\n             level = None\n         else:\n", "normalized_occurrence": 1}
