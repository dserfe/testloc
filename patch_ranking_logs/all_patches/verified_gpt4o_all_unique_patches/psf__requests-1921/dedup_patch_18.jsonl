{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..d1e114d 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -288,7 +288,7 @@ class Session(SessionRedirectMixin):\n             url=request.url,\n             files=request.files,\n             data=request.data,\n-            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n+            headers=self._remove_none_headers(merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict)),\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n@@ -296,6 +296,10 @@ class Session(SessionRedirectMixin):\n         )\n         return p\n \n+    def _remove_none_headers(self, headers):\n+        \"\"\"Remove headers that have None as their value.\"\"\"\n+        return CaseInsensitiveDict({k: v for k, v in headers.items() if v is not None})\n+\n     def request(self, method, url,\n         params=None,\n         data=None,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..de93600 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -113,8 +113,10 @@ class Session(SessionRedirectMixin):\n         if self.trust_env and (not auth) and (not self.auth):\n             auth = get_netrc_auth(request.url)\n         p = PreparedRequest()\n-        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n+        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=self._remove_none_headers(merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict)), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n         return p\n+    def _remove_none_headers(self, headers):\n+        return CaseInsensitiveDict({k: v for k, v in headers.items() if v is not None})\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):\n         method = builtin_str(method)\n         req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n", "normalized_occurrence": 1}
