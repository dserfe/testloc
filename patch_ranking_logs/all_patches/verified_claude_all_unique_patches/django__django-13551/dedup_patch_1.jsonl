{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13551", "model_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex 4505013..27c29c6 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -94,7 +94,8 @@ class PasswordResetTokenGenerator:\n         # Truncate microseconds so that tokens are consistent even if the\n         # database doesn't support microseconds.\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = '' if not hasattr(user, 'email') else user.email\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)\n \n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n@@ -104,4 +105,4 @@ class PasswordResetTokenGenerator:\n         return datetime.now()\n \n \n-default_token_generator = PasswordResetTokenGenerator()\n+default_token_generator = PasswordResetTokenGenerator()\n", "occurrence": 19, "normalized_patch": "diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py\nindex ce5598a..c5a7e55 100644\n--- a/django/contrib/auth/tokens.py\n+++ b/django/contrib/auth/tokens.py\n@@ -34,7 +34,8 @@ class PasswordResetTokenGenerator:\n         return '%s-%s' % (ts_b36, hash_string)\n     def _make_hash_value(self, user, timestamp):\n         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)\n-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)\n+        email = '' if not hasattr(user, 'email') else user.email\n+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + str(email)\n     def _num_seconds(self, dt):\n         return int((dt - datetime(2001, 1, 1)).total_seconds())\n     def _now(self):\n", "normalized_occurrence": 19}
