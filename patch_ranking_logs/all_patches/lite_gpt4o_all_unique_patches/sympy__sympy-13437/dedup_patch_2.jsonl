{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13437", "model_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 70a655c..1e3626f 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -442,6 +442,8 @@ class bell(Function):\n             else:\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n+        elif n == S.Infinity:\n+            return S.Infinity\n \n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n         from sympy import Sum\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py\nindex 12572d1..176cd54 100644\n--- a/sympy/functions/combinatorial/numbers.py\n+++ b/sympy/functions/combinatorial/numbers.py\n@@ -149,6 +149,8 @@ class bell(Function):\n             else:\n                 r = cls._bell_incomplete_poly(int(n), int(k_sym), symbols)\n                 return r\n+        elif n == S.Infinity:\n+            return S.Infinity\n     def _eval_rewrite_as_Sum(self, n, k_sym=None, symbols=None):\n         from sympy import Sum\n         if k_sym is not None or symbols is not None:\n", "normalized_occurrence": 1}
