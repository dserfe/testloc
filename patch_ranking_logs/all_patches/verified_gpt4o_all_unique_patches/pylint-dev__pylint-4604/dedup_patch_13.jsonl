{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 7e31505..888d781 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -542,6 +542,14 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n             if imported_module is None:\n                 continue\n \n+            # Check if the import is used in type comments\n+            if isinstance(node.scope(), astroid.Module):\n+                for annotation in node.root()._newstyle_annotations():\n+                    if name in annotation.as_string():\n+                        break\n+                else:\n+                    continue\n+\n             self._add_imported_module(node, imported_module.name)\n \n     @check_messages(*MSGS)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/imports.py b/pylint/checkers/imports.py\nindex 1045c62..f7db969 100644\n--- a/pylint/checkers/imports.py\n+++ b/pylint/checkers/imports.py\n@@ -183,6 +183,12 @@ class ImportsChecker(DeprecatedMixin, BaseChecker):\n                 self._record_import(node, imported_module)\n             if imported_module is None:\n                 continue\n+            if isinstance(node.scope(), astroid.Module):\n+                for annotation in node.root()._newstyle_annotations():\n+                    if name in annotation.as_string():\n+                        break\n+                else:\n+                    continue\n             self._add_imported_module(node, imported_module.name)\n     @check_messages(*MSGS)\n     def visit_importfrom(self, node):\n", "normalized_occurrence": 1}
