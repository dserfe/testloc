{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..c8a9095 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1932,9 +1932,9 @@ class FiniteSet(Set, EvalfMixin):\n \n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted(m for m in self.args if m.is_number)\n+            nums = sorted(m for m in self.args if m.is_number or m.is_number == S.true)\n             if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+                syms = [m for m in self.args if not m.is_number and not m.is_number == S.true]\n                 # Reals cannot contain elements other than numbers and symbols.\n \n                 intervals = []  # Build up a list of intervals between the elements\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..9b7e8d4 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -841,9 +841,9 @@ class FiniteSet(Set, EvalfMixin):\n         return self.__class__(*[el for el in self if el in other])\n     def _complement(self, other):\n         if isinstance(other, Interval):\n-            nums = sorted((m for m in self.args if m.is_number))\n+            nums = sorted((m for m in self.args if m.is_number or m.is_number == S.true))\n             if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+                syms = [m for m in self.args if not m.is_number and (not m.is_number == S.true)]\n                 intervals = []\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n", "normalized_occurrence": 1}
