{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..0d3a701 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,8 +416,8 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n-            mode += \"b\"\n+        if \"b\" in mode:\n+            mode = mode.replace(\"b\", \"\")\n         f = os.fdopen(newfd, mode, 0)  # no buffering\n     return EncodedFile(f, encoding or default_encoding)\n \n@@ -432,10 +432,8 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, \"replace\")\n-        elif _PY3:\n-            raise TypeError(\n-                \"write() argument must be str, not {}\".format(type(obj).__name__)\n-            )\n+        elif isinstance(obj, bytes):\n+            obj = obj.decode(self.encoding, \"replace\")\n         self.buffer.write(obj)\n \n     def writelines(self, linelist):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..6fcf184 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -241,8 +241,8 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if 'b' not in mode:\n-            mode += 'b'\n+        if 'b' in mode:\n+            mode = mode.replace('b', '')\n         f = os.fdopen(newfd, mode, 0)\n     return EncodedFile(f, encoding or default_encoding)\n class EncodedFile(object):\n@@ -253,8 +253,8 @@ class EncodedFile(object):\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n             obj = obj.encode(self.encoding, 'replace')\n-        elif _PY3:\n-            raise TypeError('write() argument must be str, not {}'.format(type(obj).__name__))\n+        elif isinstance(obj, bytes):\n+            obj = obj.decode(self.encoding, 'replace')\n         self.buffer.write(obj)\n     def writelines(self, linelist):\n         data = ''.join(linelist)\n", "normalized_occurrence": 2}
