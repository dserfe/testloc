{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-10356", "model_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex d345d83..2a863cc 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -356,10 +356,23 @@ class MarkDecorator:\n \n \n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    \"\"\"Obtain the unpacked marks that are stored on an object.\"\"\"\n-    mark_list = getattr(obj, \"pytestmark\", [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    \"\"\"Obtain the unpacked marks that are stored on an object and its MRO chain.\"\"\"\n+    mark_list = []\n+    \n+    # Handle regular marks on the object\n+    direct_marks = getattr(obj, \"pytestmark\", [])\n+    if not isinstance(direct_marks, list):\n+        direct_marks = [direct_marks]\n+    mark_list.extend(direct_marks)\n+    \n+    # If it's a class, collect marks from its MRO chain\n+    if inspect.isclass(obj):\n+        for base in obj.__mro__[1:]:  # Skip the class itself as we already processed it\n+            base_marks = getattr(base, \"pytestmark\", [])\n+            if not isinstance(base_marks, list):\n+                base_marks = [base_marks]\n+            mark_list.extend(base_marks)\n+    \n     return normalize_mark_list(mark_list)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/mark/structures.py b/src/_pytest/mark/structures.py\nindex c22bcf5..03be5a5 100644\n--- a/src/_pytest/mark/structures.py\n+++ b/src/_pytest/mark/structures.py\n@@ -161,9 +161,17 @@ class MarkDecorator:\n                 return func\n         return self.with_args(*args, **kwargs)\n def get_unpacked_marks(obj: object) -> Iterable[Mark]:\n-    mark_list = getattr(obj, 'pytestmark', [])\n-    if not isinstance(mark_list, list):\n-        mark_list = [mark_list]\n+    mark_list = []\n+    direct_marks = getattr(obj, 'pytestmark', [])\n+    if not isinstance(direct_marks, list):\n+        direct_marks = [direct_marks]\n+    mark_list.extend(direct_marks)\n+    if inspect.isclass(obj):\n+        for base in obj.__mro__[1:]:\n+            base_marks = getattr(base, 'pytestmark', [])\n+            if not isinstance(base_marks, list):\n+                base_marks = [base_marks]\n+            mark_list.extend(base_marks)\n     return normalize_mark_list(mark_list)\n def normalize_mark_list(mark_list: Iterable[Union[Mark, MarkDecorator]]) -> Iterable[Mark]:\n     for mark in mark_list:\n", "normalized_occurrence": 2}
