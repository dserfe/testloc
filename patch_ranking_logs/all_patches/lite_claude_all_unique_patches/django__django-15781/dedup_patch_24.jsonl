{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..ae3fdec 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -130,6 +130,31 @@ class DjangoHelpFormatter(HelpFormatter):\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n \n+    def format_help(self):\n+        \"\"\"\n+        Override format_help to preserve line breaks and indentation in the\n+        command's help text.\n+        \"\"\"\n+        help_text = super().format_help()\n+        parser = self._root_section._prog.split(' ')[-1]\n+        if parser != 'manage.py':\n+            # Only process help text for subcommands, not the main manage.py help\n+            return help_text\n+            \n+        # Split the help text into lines\n+        lines = help_text.splitlines()\n+        formatted_lines = []\n+        \n+        # Process each line\n+        for line in lines:\n+            if line.strip() and not any(arg in line for arg in self.show_last):\n+                # Preserve indentation for non-empty lines that aren't argument help\n+                formatted_lines.append(line)\n+            else:\n+                formatted_lines.append(line.rstrip())\n+                \n+        return '\\n'.join(formatted_lines)\n+\n \n class OutputWrapper(TextIOBase):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def format_help(self):\n+        help_text = super().format_help()\n+        parser = self._root_section._prog.split(' ')[-1]\n+        if parser != 'manage.py':\n+            return help_text\n+        lines = help_text.splitlines()\n+        formatted_lines = []\n+        for line in lines:\n+            if line.strip() and (not any((arg in line for arg in self.show_last))):\n+                formatted_lines.append(line)\n+            else:\n+                formatted_lines.append(line.rstrip())\n+        return '\\n'.join(formatted_lines)", "normalized_occurrence": 1}
