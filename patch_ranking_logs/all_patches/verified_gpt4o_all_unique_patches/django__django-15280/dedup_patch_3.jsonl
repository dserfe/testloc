{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..1170a77 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -185,6 +185,9 @@ class ForwardManyToOneDescriptor:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n+                # Ensure that deferred fields are not shared between querysets\n+                if hasattr(instance, '_deferred'):\n+                    rel_obj._deferred = False\n                 remote_field = self.field.remote_field\n                 # If this is a one-to-one relation, set the reverse accessor\n                 # cache on the related object to the current instance to avoid\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..1224b80 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -57,6 +57,8 @@ class ForwardManyToOneDescriptor:\n                 rel_obj = None\n             if rel_obj is None and has_value:\n                 rel_obj = self.get_object(instance)\n+                if hasattr(instance, '_deferred'):\n+                    rel_obj._deferred = False\n                 remote_field = self.field.remote_field\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n", "normalized_occurrence": 1}
