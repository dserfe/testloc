{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/utils.py b/pylint/checkers/utils.py\nindex ea94ca1..bea86f0 100644\n--- a/pylint/checkers/utils.py\n+++ b/pylint/checkers/utils.py\n@@ -1338,6 +1338,12 @@ def is_node_in_type_annotation_context(node: astroid.node_classes.NodeNG) -> boo\n             )\n             or isinstance(parent_node, astroid.FunctionDef)\n             and parent_node.returns == current_node\n+            or (\n+                isinstance(parent_node, astroid.Expr)\n+                and isinstance(parent_node.value, astroid.Const)\n+                and isinstance(parent_node.value.value, str)\n+                and \"type:\" in parent_node.value.value\n+            )\n         ):\n             return True\n         current_node, parent_node = parent_node, parent_node.parent\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/utils.py b/pylint/checkers/utils.py\nindex 25ab41a..f9ceff7 100644\n--- a/pylint/checkers/utils.py\n+++ b/pylint/checkers/utils.py\n@@ -826,7 +826,7 @@ def is_node_in_type_annotation_context(node: astroid.node_classes.NodeNG) -> boo\n     \"\"\"\n     current_node, parent_node = (node, node.parent)\n     while True:\n-        if isinstance(parent_node, astroid.AnnAssign) and parent_node.annotation == current_node or (isinstance(parent_node, astroid.Arguments) and current_node in (*parent_node.annotations, *parent_node.posonlyargs_annotations, *parent_node.kwonlyargs_annotations, parent_node.varargannotation, parent_node.kwargannotation)) or (isinstance(parent_node, astroid.FunctionDef) and parent_node.returns == current_node):\n+        if isinstance(parent_node, astroid.AnnAssign) and parent_node.annotation == current_node or (isinstance(parent_node, astroid.Arguments) and current_node in (*parent_node.annotations, *parent_node.posonlyargs_annotations, *parent_node.kwonlyargs_annotations, parent_node.varargannotation, parent_node.kwargannotation)) or (isinstance(parent_node, astroid.FunctionDef) and parent_node.returns == current_node) or (isinstance(parent_node, astroid.Expr) and isinstance(parent_node.value, astroid.Const) and isinstance(parent_node.value.value, str) and ('type:' in parent_node.value.value)):\n             return True\n         current_node, parent_node = (parent_node, parent_node.parent)\n         if isinstance(parent_node, astroid.Module):\n", "normalized_occurrence": 1}
