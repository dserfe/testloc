{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..7ded95d 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,7 +213,32 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n+                # Check if local reference exists\n+                if uri.startswith('#'):\n+                    # It's a reference to a section in the current document\n+                    anchor = uri[1:]\n+                    if anchor not in self.env.toc_secnumbers.get(docname, {}):\n+                        return 'broken', 'Section not found: ' + anchor, 0\n+                    return 'working', '', 0\n+                else:\n+                    # It's a reference to another document\n+                    if '#' in uri:\n+                        doc, anchor = uri.split('#', 1)\n+                    else:\n+                        doc, anchor = uri, ''\n+                    \n+                    # Remove .html extension if present\n+                    doc = doc.replace('.html', '')\n+                    \n+                    # Check if document exists\n+                    if doc not in self.env.all_docs:\n+                        return 'broken', 'Document not found: ' + doc, 0\n+                    \n+                    # If there's an anchor, check if it exists in the referenced document\n+                    if anchor and anchor not in self.env.toc_secnumbers.get(doc, {}):\n+                        return 'broken', 'Section not found: ' + anchor + ' in ' + doc, 0\n+                    \n+                    return 'working', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n             elif uri in self.broken:\n@@ -267,9 +292,8 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n+        elif status == 'working' and not uri.startswith(('http:', 'https:')):\n+            logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..83c9a1a 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,7 +133,22 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n+                if uri.startswith('#'):\n+                    anchor = uri[1:]\n+                    if anchor not in self.env.toc_secnumbers.get(docname, {}):\n+                        return ('broken', 'Section not found: ' + anchor, 0)\n+                    return ('working', '', 0)\n+                else:\n+                    if '#' in uri:\n+                        doc, anchor = uri.split('#', 1)\n+                    else:\n+                        doc, anchor = (uri, '')\n+                    doc = doc.replace('.html', '')\n+                    if doc not in self.env.all_docs:\n+                        return ('broken', 'Document not found: ' + doc, 0)\n+                    if anchor and anchor not in self.env.toc_secnumbers.get(doc, {}):\n+                        return ('broken', 'Section not found: ' + anchor + ' in ' + doc, 0)\n+                    return ('working', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n             elif uri in self.broken:\n@@ -178,9 +193,8 @@ class CheckExternalLinksBuilder(Builder):\n             else:\n                 logger.info(darkgray('-ignored- ') + uri)\n             self.write_linkstat(linkstat)\n-        elif status == 'local':\n-            logger.info(darkgray('-local-   ') + uri)\n-            self.write_entry('local', docname, filename, lineno, uri)\n+        elif status == 'working' and (not uri.startswith(('http:', 'https:'))):\n+            logger.info(darkgreen('ok        ') + uri + info)\n             self.write_linkstat(linkstat)\n         elif status == 'working':\n             logger.info(darkgreen('ok        ') + uri + info)\n", "normalized_occurrence": 1}
