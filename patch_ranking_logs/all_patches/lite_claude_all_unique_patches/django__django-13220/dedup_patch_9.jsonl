{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..4cd3afd 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,30 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        \n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+            \n+        if hasattr(self, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                if sorted(str(e) for e in self.error_dict[field]) != sorted(str(e) for e in other.error_dict[field]):\n+                    return False\n+            return True\n+        \n+        if hasattr(self, 'message'):\n+            return (\n+                self.message == other.message and\n+                self.code == other.code and\n+                self.params == other.params\n+            )\n+            \n+        return sorted(str(e) for e in self.error_list) == sorted(str(e) for e in other.error_list)\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +214,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return NotImplemented\n+        if hasattr(self, 'error_dict') != hasattr(other, 'error_dict'):\n+            return False\n+        if hasattr(self, 'error_dict'):\n+            if self.error_dict.keys() != other.error_dict.keys():\n+                return False\n+            for field in self.error_dict:\n+                if sorted((str(e) for e in self.error_dict[field])) != sorted((str(e) for e in other.error_dict[field])):\n+                    return False\n+            return True\n+        if hasattr(self, 'message'):\n+            return self.message == other.message and self.code == other.code and (self.params == other.params)\n+        return sorted((str(e) for e in self.error_list)) == sorted((str(e) for e in other.error_list))\n+", "normalized_occurrence": 1}
