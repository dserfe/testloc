{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5631", "model_patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex c84507d..60b6306 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -67,9 +67,10 @@ def num_mock_patch_args(function):\n     mock_modules = [sys.modules.get(\"mock\"), sys.modules.get(\"unittest.mock\")]\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n-        return len(\n-            [p for p in patchings if not p.attribute_name and p.new in sentinels]\n-        )\n+        return len([\n+            p for p in patchings \n+            if not p.attribute_name and any((p.new is sentinel) for sentinel in sentinels)\n+        ])\n     return len(patchings)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py\nindex cdde629..fb33262 100644\n--- a/src/_pytest/compat.py\n+++ b/src/_pytest/compat.py\n@@ -36,7 +36,7 @@ def num_mock_patch_args(function):\n     mock_modules = [sys.modules.get('mock'), sys.modules.get('unittest.mock')]\n     if any(mock_modules):\n         sentinels = [m.DEFAULT for m in mock_modules if m is not None]\n-        return len([p for p in patchings if not p.attribute_name and p.new in sentinels])\n+        return len([p for p in patchings if not p.attribute_name and any((p.new is sentinel for sentinel in sentinels))])\n     return len(patchings)\n def getfuncargnames(function, is_method=False, cls=None):\n     try:\n", "normalized_occurrence": 12}
