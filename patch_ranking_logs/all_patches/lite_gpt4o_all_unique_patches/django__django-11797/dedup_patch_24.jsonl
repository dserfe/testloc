{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..d3fd9ac 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -50,10 +50,10 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, having=self.having)\n         return extra_select, order_by, group_by\n \n-    def get_group_by(self, select, order_by):\n+    def get_group_by(self, select, order_by, having=None):\n         \"\"\"\n         Return a list of 2-tuples of form (sql, params).\n \n@@ -116,7 +116,7 @@ class SQLCompiler:\n             # select clause are already part of the group by.\n             if not expr.contains_aggregate and not is_ref:\n                 expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n+        having_group_by = having.get_group_by_cols() if having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n         result = []\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..dcdcd92 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -33,9 +33,9 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, having=self.having)\n         return (extra_select, order_by, group_by)\n-    def get_group_by(self, select, order_by):\n+    def get_group_by(self, select, order_by, having=None):\n         if self.query.group_by is None:\n             return []\n         expressions = []\n@@ -52,7 +52,7 @@ class SQLCompiler:\n         for expr, (sql, params, is_ref) in order_by:\n             if not expr.contains_aggregate and (not is_ref):\n                 expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n+        having_group_by = having.get_group_by_cols() if having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n         result = []\n", "normalized_occurrence": 1}
