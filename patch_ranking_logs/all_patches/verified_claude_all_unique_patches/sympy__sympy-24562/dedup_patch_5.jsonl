{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..3e0f0b3 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1609,11 +1609,20 @@ class Rational(Number):\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n                         p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n+                        if _literal_float(p):\n+                            fp = fractions.Fraction.from_decimal(decimal.Decimal(p))\n+                        else:\n+                            fp = fractions.Fraction(p)\n+                        if _literal_float(q):\n+                            fq = fractions.Fraction.from_decimal(decimal.Decimal(q))\n+                        else:\n+                            fq = fractions.Fraction(q)\n                         p = fp/fq\n                     try:\n-                        p = fractions.Fraction(p)\n+                        if _literal_float(p):\n+                            p = fractions.Fraction.from_decimal(decimal.Decimal(p))\n+                        else:\n+                            p = fractions.Fraction(p)\n                     except ValueError:\n                         pass  # error will raise below\n                     else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..7d9341c 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1395,11 +1395,20 @@ class Rational(Number):\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n                         p, q = pq\n-                        fp = fractions.Fraction(p)\n-                        fq = fractions.Fraction(q)\n+                        if _literal_float(p):\n+                            fp = fractions.Fraction.from_decimal(decimal.Decimal(p))\n+                        else:\n+                            fp = fractions.Fraction(p)\n+                        if _literal_float(q):\n+                            fq = fractions.Fraction.from_decimal(decimal.Decimal(q))\n+                        else:\n+                            fq = fractions.Fraction(q)\n                         p = fp / fq\n                     try:\n-                        p = fractions.Fraction(p)\n+                        if _literal_float(p):\n+                            p = fractions.Fraction.from_decimal(decimal.Decimal(p))\n+                        else:\n+                            p = fractions.Fraction(p)\n                     except ValueError:\n                         pass\n                     else:\n", "normalized_occurrence": 2}
