{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..57c7f0e 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -253,6 +253,7 @@ class ModelFormOptions:\n         self.help_texts = getattr(options, \"help_texts\", None)\n         self.error_messages = getattr(options, \"error_messages\", None)\n         self.field_classes = getattr(options, \"field_classes\", None)\n+        self.formfield_callback = getattr(options, \"formfield_callback\", None)\n \n \n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n@@ -263,6 +264,7 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n \n+        # Get formfield_callback from class level, falling back to base class Meta\n         formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n@@ -636,7 +638,11 @@ def modelform_factory(\n     class_name = model.__name__ + \"Form\"\n \n     # Class attributes for the new form class.\n-    form_class_attrs = {\"Meta\": Meta, \"formfield_callback\": formfield_callback}\n+    form_class_attrs = {\"Meta\": Meta}\n+    \n+    # Only set formfield_callback at class level if explicitly provided\n+    if formfield_callback is not None:\n+        form_class_attrs[\"formfield_callback\"] = formfield_callback\n \n     if getattr(Meta, \"fields\", None) is None and getattr(Meta, \"exclude\", None) is None:\n         raise ImproperlyConfigured(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..84d431d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -107,6 +107,7 @@ class ModelFormOptions:\n         self.help_texts = getattr(options, 'help_texts', None)\n         self.error_messages = getattr(options, 'error_messages', None)\n         self.field_classes = getattr(options, 'field_classes', None)\n+        self.formfield_callback = getattr(options, 'formfield_callback', None)\n class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n     def __new__(mcs, name, bases, attrs):\n         base_formfield_callback = None\n@@ -267,7 +268,9 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n     if formfield_callback:\n         Meta.formfield_callback = staticmethod(formfield_callback)\n     class_name = model.__name__ + 'Form'\n-    form_class_attrs = {'Meta': Meta, 'formfield_callback': formfield_callback}\n+    form_class_attrs = {'Meta': Meta}\n+    if formfield_callback is not None:\n+        form_class_attrs['formfield_callback'] = formfield_callback\n     if getattr(Meta, 'fields', None) is None and getattr(Meta, 'exclude', None) is None:\n         raise ImproperlyConfigured(\"Calling modelform_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     return type(form)(class_name, (form,), form_class_attrs)\n", "normalized_occurrence": 2}
