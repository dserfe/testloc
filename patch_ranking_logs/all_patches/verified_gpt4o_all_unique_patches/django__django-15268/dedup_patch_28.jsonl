{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex f01e0f5..c0e4c5f 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,6 @@\n+\n+from collections import defaultdict\n+\n class MigrationOptimizer:\n     \"\"\"\n     Power the optimization process, where you provide a list of Operations\n@@ -42,7 +45,28 @@ class MigrationOptimizer:\n         new_operations = []\n         for i, operation in enumerate(operations):\n             right = True  # Should we reduce on the right or on the left.\n-            # Compare it to each operation after it\n+            combined_operations = defaultdict(list)\n+            # Combine consecutive AlterUniqueTogether and AlterIndexTogether operations\n+            for j, other in enumerate(operations[i + 1:]):\n+                if (isinstance(operation, (migrations.AlterUniqueTogether, migrations.AlterIndexTogether)) and \n+                    isinstance(other, type(operation)) and \n+                    operation.name_lower == other.name_lower):\n+                    combined_operations[type(operation)].append(other)\n+                    operations[i + 1 + j] = None\n+                else:\n+                    break\n+            \n+            if combined_operations:\n+                for op_type, ops in combined_operations.items():\n+                    combined_values = set()\n+                    for op in ops:\n+                        combined_values.update(op.unique_together if isinstance(op, migrations.AlterUniqueTogether) \n+                                               else op.index_together)\n+                    if isinstance(operation, migrations.AlterUniqueTogether):\n+                        operation.unique_together.update(combined_values)\n+                    else:\n+                        operation.index_together.update(combined_values)\n+            # Continue comparing it to each operation after it\n             for j, other in enumerate(operations[i + 1:]):\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n@@ -66,4 +90,4 @@ class MigrationOptimizer:\n                     right = False\n             else:\n                 new_operations.append(operation)\n-        return new_operations\n+        return new_operations\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/optimizer.py b/django/db/migrations/optimizer.py\nindex 06fbfa5..253b3c3 100644\n--- a/django/db/migrations/optimizer.py\n+++ b/django/db/migrations/optimizer.py\n@@ -1,3 +1,4 @@\n+from collections import defaultdict\n class MigrationOptimizer:\n     def optimize(self, operations, app_label):\n         if app_label is None:\n@@ -13,6 +14,22 @@ class MigrationOptimizer:\n         new_operations = []\n         for i, operation in enumerate(operations):\n             right = True\n+            combined_operations = defaultdict(list)\n+            for j, other in enumerate(operations[i + 1:]):\n+                if isinstance(operation, (migrations.AlterUniqueTogether, migrations.AlterIndexTogether)) and isinstance(other, type(operation)) and (operation.name_lower == other.name_lower):\n+                    combined_operations[type(operation)].append(other)\n+                    operations[i + 1 + j] = None\n+                else:\n+                    break\n+            if combined_operations:\n+                for op_type, ops in combined_operations.items():\n+                    combined_values = set()\n+                    for op in ops:\n+                        combined_values.update(op.unique_together if isinstance(op, migrations.AlterUniqueTogether) else op.index_together)\n+                    if isinstance(operation, migrations.AlterUniqueTogether):\n+                        operation.unique_together.update(combined_values)\n+                    else:\n+                        operation.index_together.update(combined_values)\n             for j, other in enumerate(operations[i + 1:]):\n                 result = operation.reduce(other, app_label)\n                 if isinstance(result, list):\n", "normalized_occurrence": 1}
