{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..cc04ef9 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -56,6 +56,23 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers = None\n+\n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        self._subparsers = subparsers\n+        return subparsers\n+\n+    def add_parser(self, name, **kwargs):\n+        parser = super().add_parser(name, **kwargs)\n+        if self._subparsers:\n+            parser = CommandParser(\n+                **{k: v for k, v in self.__dict__.items() if k in [\n+                    'missing_args_message', 'called_from_command_line'\n+                ]}, **kwargs\n+            )\n+            self._subparsers._name_parser_map[name] = parser\n+        return parser\n \n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 14f4b26..2742133 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -20,6 +20,17 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers = None\n+    def add_subparsers(self, **kwargs):\n+        subparsers = super().add_subparsers(**kwargs)\n+        self._subparsers = subparsers\n+        return subparsers\n+    def add_parser(self, name, **kwargs):\n+        parser = super().add_parser(name, **kwargs)\n+        if self._subparsers:\n+            parser = CommandParser(**{k: v for k, v in self.__dict__.items() if k in ['missing_args_message', 'called_from_command_line']}, **kwargs)\n+            self._subparsers._name_parser_map[name] = parser\n+        return parser\n     def parse_args(self, args=None, namespace=None):\n         if self.missing_args_message and (not (args or any((not arg.startswith('-') for arg in args)))):\n             self.error(self.missing_args_message)\n", "normalized_occurrence": 1}
