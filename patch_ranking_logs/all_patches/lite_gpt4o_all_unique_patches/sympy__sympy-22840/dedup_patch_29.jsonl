{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22840", "model_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex fa99708..9fd8f38 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -773,7 +773,7 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     ([], x)\n     \"\"\"\n     from sympy.matrices import (MatrixBase, Matrix, ImmutableMatrix,\n-                                SparseMatrix, ImmutableSparseMatrix)\n+                                SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)\n \n     if not list:\n         return _cse_homogeneous(exprs,\n@@ -790,9 +790,9 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n     copy = exprs\n     temp = []\n     for e in exprs:\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n+        if isinstance(e, (Matrix, ImmutableMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.todok().items()))\n         else:\n             temp.append(e)\n@@ -831,11 +831,11 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None,\n \n     # Get the matrices back\n     for i, e in enumerate(exprs):\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n+        if isinstance(e, (Matrix, ImmutableMatrix, MatrixSymbol)):\n             reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n             if isinstance(e, ImmutableMatrix):\n                 reduced_exprs[i] = reduced_exprs[i].as_immutable()\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             m = SparseMatrix(e.rows, e.cols, {})\n             for k, v in reduced_exprs[i]:\n                 m[k] = v\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py\nindex d5cc8d7..5d42f16 100644\n--- a/sympy/simplify/cse_main.py\n+++ b/sympy/simplify/cse_main.py\n@@ -303,7 +303,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):\n         reduced_exprs.append(reduced_e)\n     return (replacements, reduced_exprs)\n def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canonical', ignore=(), list=True):\n-    from sympy.matrices import MatrixBase, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix\n+    from sympy.matrices import MatrixBase, Matrix, ImmutableMatrix, SparseMatrix, ImmutableSparseMatrix, MatrixSymbol\n     if not list:\n         return _cse_homogeneous(exprs, symbols=symbols, optimizations=optimizations, postprocess=postprocess, order=order, ignore=ignore)\n     if isinstance(exprs, (int, float)):\n@@ -313,9 +313,9 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n     copy = exprs\n     temp = []\n     for e in exprs:\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n+        if isinstance(e, (Matrix, ImmutableMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.flat()))\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             temp.append(Tuple(*e.todok().items()))\n         else:\n             temp.append(e)\n@@ -338,11 +338,11 @@ def cse(exprs, symbols=None, optimizations=None, postprocess=None, order='canoni\n         replacements[i] = (sym, subtree)\n     reduced_exprs = [postprocess_for_cse(e, optimizations) for e in reduced_exprs]\n     for i, e in enumerate(exprs):\n-        if isinstance(e, (Matrix, ImmutableMatrix)):\n+        if isinstance(e, (Matrix, ImmutableMatrix, MatrixSymbol)):\n             reduced_exprs[i] = Matrix(e.rows, e.cols, reduced_exprs[i])\n             if isinstance(e, ImmutableMatrix):\n                 reduced_exprs[i] = reduced_exprs[i].as_immutable()\n-        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix)):\n+        elif isinstance(e, (SparseMatrix, ImmutableSparseMatrix, MatrixSymbol)):\n             m = SparseMatrix(e.rows, e.cols, {})\n             for k, v in reduced_exprs[i]:\n                 m[k] = v\n", "normalized_occurrence": 1}
