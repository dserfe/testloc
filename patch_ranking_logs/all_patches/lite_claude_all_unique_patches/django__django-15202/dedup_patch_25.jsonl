{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..c21d81e 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -127,7 +127,11 @@ class URLValidator(RegexValidator):\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                netloc = urlsplit(value).netloc\n+            except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..463dc0a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -79,7 +79,11 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n-            host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n+            try:\n+                netloc = urlsplit(value).netloc\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', netloc)\n             if host_match:\n                 potential_ip = host_match[1]\n                 try:\n", "normalized_occurrence": 1}
