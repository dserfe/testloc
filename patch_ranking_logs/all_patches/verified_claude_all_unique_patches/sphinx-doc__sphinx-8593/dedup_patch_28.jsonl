{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8593", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c412096..ad271cd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1865,7 +1865,14 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin,\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        can_doc = isinstance(parent, ModuleDocumenter) and isattr\n+        if can_doc and membername.startswith('_'):\n+            # Check for :meta public: in docstring\n+            docstring = getattr(member, '__doc__', None)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+            return False\n+        return can_doc\n \n     def update_annotations(self, parent: Any) -> None:\n         \"\"\"Update __annotations__ to support type_comment and so on.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex f71844a..420dbdd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1047,7 +1047,13 @@ class DataDocumenter(GenericAliasMixin, NewTypeMixin, TypeVarMixin, Uninitialize\n     option_spec['no-value'] = bool_option\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return isinstance(parent, ModuleDocumenter) and isattr\n+        can_doc = isinstance(parent, ModuleDocumenter) and isattr\n+        if can_doc and membername.startswith('_'):\n+            docstring = getattr(member, '__doc__', None)\n+            if docstring and ':meta public:' in docstring:\n+                return True\n+            return False\n+        return can_doc\n     def update_annotations(self, parent: Any) -> None:\n         try:\n             annotations = dict(inspect.getannotations(parent))\n", "normalized_occurrence": 1}
