{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..19b9900 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -174,22 +174,7 @@ def check_dependencies(**kwargs):\n \n \n class BaseModelAdminChecks:\n-    def check(self, admin_obj, **kwargs):\n-        return [\n-            *self._check_autocomplete_fields(admin_obj),\n-            *self._check_raw_id_fields(admin_obj),\n-            *self._check_fields(admin_obj),\n-            *self._check_fieldsets(admin_obj),\n-            *self._check_exclude(admin_obj),\n-            *self._check_form(admin_obj),\n-            *self._check_filter_vertical(admin_obj),\n-            *self._check_filter_horizontal(admin_obj),\n-            *self._check_radio_fields(admin_obj),\n-            *self._check_prepopulated_fields(admin_obj),\n-            *self._check_view_on_site_url(admin_obj),\n-            *self._check_ordering(admin_obj),\n-            *self._check_readonly_fields(admin_obj),\n-        ]\n+\n \n     def _check_autocomplete_fields(self, obj):\n         \"\"\"\n@@ -787,6 +772,49 @@ class BaseModelAdminChecks:\n \n \n class ModelAdminChecks(BaseModelAdminChecks):\n+    def _check_list_display(self, obj):\n+        \"\"\"Check that list_display only contains fields or usable attributes.\"\"\"\n+        if not isinstance(obj.list_display, (list, tuple)):\n+            return must_be(\n+                \"a list or tuple\", option=\"list_display\", obj=obj, id=\"admin.E107\"\n+            )\n+        else:\n+            return list(\n+                chain.from_iterable(\n+                    self._check_list_display_item(obj, field_name, \"list_display[%d]\" % index)\n+                    for index, field_name in enumerate(obj.list_display)\n+                )\n+            )\n+\n+    def _check_list_display_item(self, obj, field_name, label):\n+        \"\"\"Check that list_display item refers to proper attribute or field.\"\"\"\n+        if callable(field_name):\n+            return []\n+        elif hasattr(obj, field_name):\n+            return []\n+        elif hasattr(obj.model, field_name):\n+            return []\n+        else:\n+            try:\n+                obj.model._meta.get_field(field_name)\n+            except FieldDoesNotExist:\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is not a callable, \"\n+                        \"an attribute of '%s', or an attribute of '%s.%s'.\"\n+                        % (\n+                            label,\n+                            field_name,\n+                            obj.__class__.__name__,\n+                            obj.model._meta.app_label,\n+                            obj.model._meta.object_name,\n+                        ),\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n+            return []\n+\n     def check(self, admin_obj, **kwargs):\n         return [\n             *super().check(admin_obj),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..996b178 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -66,8 +66,6 @@ def check_dependencies(**kwargs):\n         errors.append(checks.Error(\"'django.contrib.sessions.middleware.SessionMiddleware' must be in MIDDLEWARE in order to use the admin application.\", hint=\"Insert 'django.contrib.sessions.middleware.SessionMiddleware' before 'django.contrib.auth.middleware.AuthenticationMiddleware'.\", id='admin.E410'))\n     return errors\n class BaseModelAdminChecks:\n-    def check(self, admin_obj, **kwargs):\n-        return [*self._check_autocomplete_fields(admin_obj), *self._check_raw_id_fields(admin_obj), *self._check_fields(admin_obj), *self._check_fieldsets(admin_obj), *self._check_exclude(admin_obj), *self._check_form(admin_obj), *self._check_filter_vertical(admin_obj), *self._check_filter_horizontal(admin_obj), *self._check_radio_fields(admin_obj), *self._check_prepopulated_fields(admin_obj), *self._check_view_on_site_url(admin_obj), *self._check_ordering(admin_obj), *self._check_readonly_fields(admin_obj)]\n     def _check_autocomplete_fields(self, obj):\n         if not isinstance(obj.autocomplete_fields, (list, tuple)):\n             return must_be('a list or tuple', option='autocomplete_fields', obj=obj, id='admin.E036')\n@@ -296,6 +294,24 @@ class BaseModelAdminChecks:\n             else:\n                 return []\n class ModelAdminChecks(BaseModelAdminChecks):\n+    def _check_list_display(self, obj):\n+        if not isinstance(obj.list_display, (list, tuple)):\n+            return must_be('a list or tuple', option='list_display', obj=obj, id='admin.E107')\n+        else:\n+            return list(chain.from_iterable((self._check_list_display_item(obj, field_name, 'list_display[%d]' % index) for index, field_name in enumerate(obj.list_display))))\n+    def _check_list_display_item(self, obj, field_name, label):\n+        if callable(field_name):\n+            return []\n+        elif hasattr(obj, field_name):\n+            return []\n+        elif hasattr(obj.model, field_name):\n+            return []\n+        else:\n+            try:\n+                obj.model._meta.get_field(field_name)\n+            except FieldDoesNotExist:\n+                return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute of '%s.%s'.\" % (label, field_name, obj.__class__.__name__, obj.model._meta.app_label, obj.model._meta.object_name), obj=obj.__class__, id='admin.E108')]\n+            return []\n     def check(self, admin_obj, **kwargs):\n         return [*super().check(admin_obj), *self._check_save_as(admin_obj), *self._check_save_on_top(admin_obj), *self._check_inlines(admin_obj), *self._check_list_display(admin_obj), *self._check_list_display_links(admin_obj), *self._check_list_filter(admin_obj), *self._check_list_select_related(admin_obj), *self._check_list_per_page(admin_obj), *self._check_list_max_show_all(admin_obj), *self._check_list_editable(admin_obj), *self._check_search_fields(admin_obj), *self._check_date_hierarchy(admin_obj), *self._check_action_permission_methods(admin_obj), *self._check_actions_uniqueness(admin_obj)]\n     def _check_save_as(self, obj):\n", "normalized_occurrence": 1}
