{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16819", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 42f1c50..717f44d 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1229,23 +1229,7 @@ class MigrationAutodetector:\n             added_indexes = [idx for idx in new_indexes if idx not in old_indexes]\n             removed_indexes = [idx for idx in old_indexes if idx not in new_indexes]\n             renamed_indexes = []\n-            # Find renamed indexes.\n-            remove_from_added = []\n-            remove_from_removed = []\n-            for new_index in added_indexes:\n-                new_index_dec = new_index.deconstruct()\n-                new_index_name = new_index_dec[2].pop(\"name\")\n-                for old_index in removed_indexes:\n-                    old_index_dec = old_index.deconstruct()\n-                    old_index_name = old_index_dec[2].pop(\"name\")\n-                    # Indexes are the same except for the names.\n-                    if (\n-                        new_index_dec == old_index_dec\n-                        and new_index_name != old_index_name\n-                    ):\n-                        renamed_indexes.append((old_index_name, new_index_name, None))\n-                        remove_from_added.append(new_index)\n-                        remove_from_removed.append(old_index)\n+\n             # Find index_together changed to indexes.\n             for (\n                 old_value,\n@@ -1298,6 +1282,7 @@ class MigrationAutodetector:\n                         \"added_indexes\": added_indexes,\n                         \"removed_indexes\": removed_indexes,\n                         \"renamed_indexes\": renamed_indexes,\n+                        \"modified_indexes\": modified_indexes,\n                     }\n                 }\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex d5d6180..ac1929b 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -500,18 +500,6 @@ class MigrationAutodetector:\n             added_indexes = [idx for idx in new_indexes if idx not in old_indexes]\n             removed_indexes = [idx for idx in old_indexes if idx not in new_indexes]\n             renamed_indexes = []\n-            remove_from_added = []\n-            remove_from_removed = []\n-            for new_index in added_indexes:\n-                new_index_dec = new_index.deconstruct()\n-                new_index_name = new_index_dec[2].pop('name')\n-                for old_index in removed_indexes:\n-                    old_index_dec = old_index.deconstruct()\n-                    old_index_name = old_index_dec[2].pop('name')\n-                    if new_index_dec == old_index_dec and new_index_name != old_index_name:\n-                        renamed_indexes.append((old_index_name, new_index_name, None))\n-                        remove_from_added.append(new_index)\n-                        remove_from_removed.append(old_index)\n             for old_value, new_value, index_together_app_label, index_together_model_name, dependencies in self._get_altered_foo_together_operations(operations.AlterIndexTogether.option_name):\n                 if app_label != index_together_app_label or model_name != index_together_model_name:\n                     continue\n@@ -529,7 +517,7 @@ class MigrationAutodetector:\n                         self.renamed_index_together_values[index_together_app_label, index_together_model_name].append(removed_index_together)\n             added_indexes = [idx for idx in added_indexes if idx not in remove_from_added]\n             removed_indexes = [idx for idx in removed_indexes if idx not in remove_from_removed]\n-            self.altered_indexes.update({(app_label, model_name): {'added_indexes': added_indexes, 'removed_indexes': removed_indexes, 'renamed_indexes': renamed_indexes}})\n+            self.altered_indexes.update({(app_label, model_name): {'added_indexes': added_indexes, 'removed_indexes': removed_indexes, 'renamed_indexes': renamed_indexes, 'modified_indexes': modified_indexes}})\n     def generate_added_indexes(self):\n         for (app_label, model_name), alt_indexes in self.altered_indexes.items():\n             dependencies = self._get_dependencies_for_model(app_label, model_name)\n", "normalized_occurrence": 1}
