{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-21614", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 67e1797..6fc5677 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -217,7 +217,12 @@ class MatrixExpr(Expr):\n         # `x` is a scalar:\n         if self.has(x):\n             # See if there are other methods using it:\n-            return super()._eval_derivative(x)\n+            ret = super()._eval_derivative(x)\n+            if ret is not None:\n+                return ret\n+            # Return a Derivative with the same kind as self\n+            from sympy.core.function import Derivative\n+            return Derivative(self, x, evaluate=False)\n         else:\n             return ZeroMatrix(*self.shape)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 675bb56..25dd3bf 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -142,7 +142,11 @@ class MatrixExpr(Expr):\n         return Basic._eval_derivative_n_times(self, x, n)\n     def _eval_derivative(self, x):\n         if self.has(x):\n-            return super()._eval_derivative(x)\n+            ret = super()._eval_derivative(x)\n+            if ret is not None:\n+                return ret\n+            from sympy.core.function import Derivative\n+            return Derivative(self, x, evaluate=False)\n         else:\n             return ZeroMatrix(*self.shape)\n     @classmethod\n", "normalized_occurrence": 1}
