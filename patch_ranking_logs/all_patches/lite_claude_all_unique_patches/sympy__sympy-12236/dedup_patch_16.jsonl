{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..6c472e6 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -117,34 +117,7 @@ def apart(f, x=None, full=False, **options):\n                     pass\n             return f.xreplace(dict(reps))\n \n-    if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-\n-        raise NotImplementedError(\n-            \"multivariate partial fraction decomposition\")\n-\n-    common, P, Q = P.cancel(Q)\n-\n-    poly, P = P.div(Q, auto=True)\n-    P, Q = P.rat_clear_denoms(Q)\n \n-    if Q.degree() <= 1:\n-        partial = P/Q\n-    else:\n-        if not full:\n-            partial = apart_undetermined_coeffs(P, Q)\n-        else:\n-            partial = apart_full_decomposition(P, Q)\n-\n-    terms = S.Zero\n-\n-    for term in Add.make_args(partial):\n-        if term.has(RootSum):\n-            terms += term\n-        else:\n-            terms += factor(term)\n \n     return common*(poly.as_expr() + terms)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..197e343 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -54,26 +54,6 @@ def apart(f, x=None, full=False, **options):\n                 except NotImplementedError:\n                     pass\n             return f.xreplace(dict(reps))\n-    if P.is_multivariate:\n-        fc = f.cancel()\n-        if fc != f:\n-            return apart(fc, x=x, full=full, **_options)\n-        raise NotImplementedError('multivariate partial fraction decomposition')\n-    common, P, Q = P.cancel(Q)\n-    poly, P = P.div(Q, auto=True)\n-    P, Q = P.rat_clear_denoms(Q)\n-    if Q.degree() <= 1:\n-        partial = P / Q\n-    elif not full:\n-        partial = apart_undetermined_coeffs(P, Q)\n-    else:\n-        partial = apart_full_decomposition(P, Q)\n-    terms = S.Zero\n-    for term in Add.make_args(partial):\n-        if term.has(RootSum):\n-            terms += term\n-        else:\n-            terms += factor(term)\n     return common * (poly.as_expr() + terms)\n def apart_undetermined_coeffs(P, Q):\n     X = numbered_symbols(cls=Dummy)\n", "normalized_occurrence": 1}
