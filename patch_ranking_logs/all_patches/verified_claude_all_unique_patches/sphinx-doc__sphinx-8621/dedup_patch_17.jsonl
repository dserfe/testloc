{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 30db1c2..85fa1d8 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -494,8 +494,26 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            text = node.astext()\n+            # Split only on spaces to avoid treating -, + or ^ as separators\n+            keys = text.split()\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Handle each key or key combination\n+            for i, key_combo in enumerate(keys):\n+                if i > 0:  # Add space between key combinations\n+                    self.body.append(' ')\n+                if '-' in key_combo and not key_combo.startswith('-') and not key_combo.endswith('-'):\n+                    # Handle compound keys only if - is between characters\n+                    compound_keys = key_combo.split('-')\n+                    for j, key in enumerate(compound_keys):\n+                        if j > 0:  # Add separator between compound keys\n+                            self.body.append('-')\n+                        if key:  # Skip empty keys\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key)\n+                else:\n+                    # Handle single keys or keys with leading/trailing -, + or ^\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key_combo)\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -841,4 +859,4 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex d9975c6..ee3040c 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -445,8 +445,26 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n     # overwritten\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            text = node.astext()\n+            # Split only on spaces to avoid treating -, + or ^ as separators\n+            keys = text.split()\n             self.body.append(self.starttag(node, 'kbd', '',\n                                            CLASS='docutils literal notranslate'))\n+            # Handle each key or key combination\n+            for i, key_combo in enumerate(keys):\n+                if i > 0:  # Add space between key combinations\n+                    self.body.append(' ')\n+                if '-' in key_combo and not key_combo.startswith('-') and not key_combo.endswith('-'):\n+                    # Handle compound keys only if - is between characters\n+                    compound_keys = key_combo.split('-')\n+                    for j, key in enumerate(compound_keys):\n+                        if j > 0:  # Add separator between compound keys\n+                            self.body.append('-')\n+                        if key:  # Skip empty keys\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key)\n+                else:\n+                    # Handle single keys or keys with leading/trailing -, + or ^\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key_combo)\n         else:\n             self.body.append(self.starttag(node, 'code', '',\n                                            CLASS='docutils literal notranslate'))\n@@ -789,4 +807,4 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n             depart(self, node)\n \n     def unknown_visit(self, node: Node) -> None:\n-        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n+        raise NotImplementedError('Unknown node: ' + node.__class__.__name__)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/html.py b/sphinx/writers/html.py\nindex 12f2bc9..21e6191 100644\n--- a/sphinx/writers/html.py\n+++ b/sphinx/writers/html.py\n@@ -324,7 +324,21 @@ class HTMLTranslator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            text = node.astext()\n+            keys = text.split()\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            for i, key_combo in enumerate(keys):\n+                if i > 0:\n+                    self.body.append(' ')\n+                if '-' in key_combo and (not key_combo.startswith('-')) and (not key_combo.endswith('-')):\n+                    compound_keys = key_combo.split('-')\n+                    for j, key in enumerate(compound_keys):\n+                        if j > 0:\n+                            self.body.append('-')\n+                        if key:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key)\n+                else:\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key_combo)\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\ndiff --git a/sphinx/writers/html5.py b/sphinx/writers/html5.py\nindex 051e2d9..397fcb3 100644\n--- a/sphinx/writers/html5.py\n+++ b/sphinx/writers/html5.py\n@@ -297,7 +297,21 @@ class HTML5Translator(SphinxTranslator, BaseTranslator):\n         self.body.append('</div></blockquote>\\n')\n     def visit_literal(self, node: Element) -> None:\n         if 'kbd' in node['classes']:\n+            text = node.astext()\n+            keys = text.split()\n             self.body.append(self.starttag(node, 'kbd', '', CLASS='docutils literal notranslate'))\n+            for i, key_combo in enumerate(keys):\n+                if i > 0:\n+                    self.body.append(' ')\n+                if '-' in key_combo and (not key_combo.startswith('-')) and (not key_combo.endswith('-')):\n+                    compound_keys = key_combo.split('-')\n+                    for j, key in enumerate(compound_keys):\n+                        if j > 0:\n+                            self.body.append('-')\n+                        if key:\n+                            self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key)\n+                else:\n+                    self.body.append('<kbd class=\"compound-key\">%s</kbd>' % key_combo)\n         else:\n             self.body.append(self.starttag(node, 'code', '', CLASS='docutils literal notranslate'))\n             self.protect_literal_text += 1\n", "normalized_occurrence": 1}
