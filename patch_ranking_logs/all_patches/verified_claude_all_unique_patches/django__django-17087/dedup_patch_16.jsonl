{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..76cba8a 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,13 +100,19 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        module_path, name = path.rsplit(\".\", 1)\n+        if module_path == \"django.db.models\":\n             imports = {\"from django.db import models\"}\n             name = \"models.%s\" % name\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            # Split on first occurrence to separate module from class path\n+            try:\n+                module, class_path = module_path.split(\".\", 1)\n+                imports = {\"import %s\" % module}\n+                name = \"%s.%s.%s\" % (module, class_path, name)\n+            except ValueError:\n+                imports = {\"import %s\" % module_path}\n+                name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..6a9a6e7 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,13 +70,18 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        module_path, name = path.rsplit('.', 1)\n+        if module_path == 'django.db.models':\n             imports = {'from django.db import models'}\n             name = 'models.%s' % name\n         else:\n-            imports = {'import %s' % module}\n-            name = path\n+            try:\n+                module, class_path = module_path.split('.', 1)\n+                imports = {'import %s' % module}\n+                name = '%s.%s.%s' % (module, class_path, name)\n+            except ValueError:\n+                imports = {'import %s' % module_path}\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
