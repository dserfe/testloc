{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..69a070a 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -404,13 +404,15 @@ class DimensionSystem(Basic, _QuantityMapper):\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n+                # Check if the arguments are dimensionless after evaluation\n+                evaluated_dims = [self.get_dimensional_dependencies(arg) for arg in dimension.name.args]\n                 if isinstance(dimension.name, TrigonometricFunction):\n-                    if dicts[0] in ({}, {Dimension('angle'): 1}):\n+                    if evaluated_dims[0] in ({}, {Dimension('angle'): 1}):\n                         return {}\n                     else:\n                         raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n                 else:\n-                    if all(item == {} for item in dicts):\n+                    if all(dim == {} for dim in evaluated_dims):\n                         return {}\n                     else:\n                         raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..4716304 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -231,12 +231,13 @@ class DimensionSystem(Basic, _QuantityMapper):\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n+                evaluated_dims = [self.get_dimensional_dependencies(arg) for arg in dimension.name.args]\n                 if isinstance(dimension.name, TrigonometricFunction):\n-                    if dicts[0] in ({}, {Dimension('angle'): 1}):\n+                    if evaluated_dims[0] in ({}, {Dimension('angle'): 1}):\n                         return {}\n                     else:\n                         raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n-                elif all((item == {} for item in dicts)):\n+                elif all((dim == {} for dim in evaluated_dims)):\n                     return {}\n                 else:\n                     raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n", "normalized_occurrence": 1}
