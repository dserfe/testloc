{"model_name_or_path": "agentless", "instance_id": "django__django-12113", "model_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex 730e4b7..69c1f8a 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -197,6 +197,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n                 RuntimeWarning\n             )\n         kwargs.update({'check_same_thread': False, 'uri': True})\n+        kwargs.update({'timeout': 30})\n         return kwargs\n \n     @async_unsafe\n@@ -249,6 +250,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         conn.create_aggregate('VAR_POP', 1, list_aggregate(statistics.pvariance))\n         conn.create_aggregate('VAR_SAMP', 1, list_aggregate(statistics.variance))\n         conn.execute('PRAGMA foreign_keys = ON')\n+        conn.execute('PRAGMA busy_timeout = 30000')  # 30000ms = 30s\n         return conn\n \n     def init_connection_state(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py\nindex f4e71e4..820ec57 100644\n--- a/django/db/backends/sqlite3/base.py\n+++ b/django/db/backends/sqlite3/base.py\n@@ -68,6 +68,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         if 'check_same_thread' in kwargs and kwargs['check_same_thread']:\n             warnings.warn('The `check_same_thread` option was provided and set to True. It will be overridden with False. Use the `DatabaseWrapper.allow_thread_sharing` property instead for controlling thread shareability.', RuntimeWarning)\n         kwargs.update({'check_same_thread': False, 'uri': True})\n+        kwargs.update({'timeout': 30})\n         return kwargs\n     @async_unsafe\n     def get_new_connection(self, conn_params):\n@@ -119,6 +120,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):\n         conn.create_aggregate('VAR_POP', 1, list_aggregate(statistics.pvariance))\n         conn.create_aggregate('VAR_SAMP', 1, list_aggregate(statistics.variance))\n         conn.execute('PRAGMA foreign_keys = ON')\n+        conn.execute('PRAGMA busy_timeout = 30000')\n         return conn\n     def init_connection_state(self):\n         pass\n", "normalized_occurrence": 1}
