{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..4b9b8b4 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -62,7 +62,22 @@ class Q(tree.Node):\n \n         obj = self.create(connector=conn)\n         obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            new_children = []\n+            current_xor_children = []\n+            for child in obj.children + [other]:\n+                if isinstance(child, Q) and child.connector == self.XOR:\n+                    current_xor_children.extend(child.children)\n+                else:\n+                    if current_xor_children:\n+                        new_children.append(Q(*current_xor_children, _connector=self.XOR))\n+                        current_xor_children = []\n+                    new_children.append(child)\n+            if current_xor_children:\n+                new_children.append(Q(*current_xor_children, _connector=self.XOR))\n+            obj.children = new_children\n+        else:\n+            obj.add(other, conn)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..39bea6c 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -29,7 +29,22 @@ class Q(tree.Node):\n             return self.copy()\n         obj = self.create(connector=conn)\n         obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            new_children = []\n+            current_xor_children = []\n+            for child in obj.children + [other]:\n+                if isinstance(child, Q) and child.connector == self.XOR:\n+                    current_xor_children.extend(child.children)\n+                else:\n+                    if current_xor_children:\n+                        new_children.append(Q(*current_xor_children, _connector=self.XOR))\n+                        current_xor_children = []\n+                    new_children.append(child)\n+            if current_xor_children:\n+                new_children.append(Q(*current_xor_children, _connector=self.XOR))\n+            obj.children = new_children\n+        else:\n+            obj.add(other, conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
