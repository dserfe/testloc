{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex dfd3a82..c105c42 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -757,13 +757,22 @@ class Model(metaclass=ModelBase):\n         else:\n             context_manager = transaction.mark_for_rollback_on_error(using=using)\n         with context_manager:\n-            parent_inserted = False\n-            if not raw:\n-                parent_inserted = self._save_parents(cls, using, update_fields)\n+            # Save parent models\n+            parent_inserted = self._save_parents(cls, using, update_fields)\n+            # Save the current model\n             updated = self._save_table(\n                 raw, cls, force_insert or parent_inserted,\n                 force_update, using, update_fields,\n             )\n+\n+            # Update foreign key references for related models\n+            for field in self._meta.concrete_fields:\n+                if field.is_relation and field.is_cached(self):\n+                    related_instance = getattr(self, field.name)\n+                    if related_instance and related_instance.pk is None:\n+                        related_instance.save(using=using)\n+                        setattr(self, field.attname, related_instance.pk)\n+\n         # Store the database on which the object was saved\n         self._state.db = using\n         # Once saved, this is no longer a to-be-added instance.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e6ddd1a..252d7f2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -412,10 +412,14 @@ class Model(metaclass=ModelBase):\n         else:\n             context_manager = transaction.mark_for_rollback_on_error(using=using)\n         with context_manager:\n-            parent_inserted = False\n-            if not raw:\n-                parent_inserted = self._save_parents(cls, using, update_fields)\n+            parent_inserted = self._save_parents(cls, using, update_fields)\n             updated = self._save_table(raw, cls, force_insert or parent_inserted, force_update, using, update_fields)\n+            for field in self._meta.concrete_fields:\n+                if field.is_relation and field.is_cached(self):\n+                    related_instance = getattr(self, field.name)\n+                    if related_instance and related_instance.pk is None:\n+                        related_instance.save(using=using)\n+                        setattr(self, field.attname, related_instance.pk)\n         self._state.db = using\n         self._state.adding = False\n         if not meta.auto_created:\n", "normalized_occurrence": 1}
