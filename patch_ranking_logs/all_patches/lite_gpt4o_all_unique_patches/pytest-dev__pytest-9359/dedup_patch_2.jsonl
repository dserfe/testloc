{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..081b874 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -895,7 +895,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n             fmt = self.helper(\"_format_explanation\", err_msg)\n-            exc = ast.Call(err_name, [fmt], [])\n+            exc = ast.Call(err_name, [fmt], [], None, None)\n             raise_ = ast.Raise(exc, None)\n             statements_fail = []\n             statements_fail.extend(self.expl_stmts)\n@@ -944,7 +944,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             msg = self.pop_format_context(template)\n             fmt = self.helper(\"_format_explanation\", msg)\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n-            exc = ast.Call(err_name, [fmt], [])\n+            exc = ast.Call(err_name, [fmt], [], None, None)\n             raise_ = ast.Raise(exc, None)\n \n             body.append(raise_)\n@@ -955,9 +955,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n         # Fix locations (line numbers/column offsets).\n-        for stmt in self.statements:\n+        for i, stmt in enumerate(self.statements):\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                if i == 0:\n+                    ast.copy_location(node, assert_)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..885cfee 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -476,7 +476,7 @@ class AssertionRewriter(ast.NodeVisitor):\n             err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n             err_name = ast.Name('AssertionError', ast.Load())\n             fmt = self.helper('_format_explanation', err_msg)\n-            exc = ast.Call(err_name, [fmt], [])\n+            exc = ast.Call(err_name, [fmt], [], None, None)\n             raise_ = ast.Raise(exc, None)\n             statements_fail = []\n             statements_fail.extend(self.expl_stmts)\n@@ -505,16 +505,17 @@ class AssertionRewriter(ast.NodeVisitor):\n             msg = self.pop_format_context(template)\n             fmt = self.helper('_format_explanation', msg)\n             err_name = ast.Name('AssertionError', ast.Load())\n-            exc = ast.Call(err_name, [fmt], [])\n+            exc = ast.Call(err_name, [fmt], [], None, None)\n             raise_ = ast.Raise(exc, None)\n             body.append(raise_)\n         if self.variables:\n             variables = [ast.Name(name, ast.Store()) for name in self.variables]\n             clear = ast.Assign(variables, ast.NameConstant(None))\n             self.statements.append(clear)\n-        for stmt in self.statements:\n+        for i, stmt in enumerate(self.statements):\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                if i == 0:\n+                    ast.copy_location(node, assert_)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
