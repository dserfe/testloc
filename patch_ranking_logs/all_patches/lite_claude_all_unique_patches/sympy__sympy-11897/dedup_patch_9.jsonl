{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..5086cca 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -356,10 +356,16 @@ class LatexPrinter(Printer):\n         else:\n             tex = \"\"\n \n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        \n+        # Only use fraction if not already in a nice multiplicative form\n+        if not any(arg.is_Pow and arg.exp.is_negative for arg in expr.args):\n+            from sympy.simplify import fraction\n+            numer, denom = fraction(expr, exact=True)\n+        else:\n+            numer = expr\n+            denom = S.One\n \n         def convert(expr):\n             if not expr.is_Mul:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..30d03ce 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -165,10 +165,14 @@ class LatexPrinter(Printer):\n                 include_parens = True\n         else:\n             tex = ''\n-        from sympy.simplify import fraction\n-        numer, denom = fraction(expr, exact=True)\n         separator = self._settings['mul_symbol_latex']\n         numbersep = self._settings['mul_symbol_latex_numbers']\n+        if not any((arg.is_Pow and arg.exp.is_negative for arg in expr.args)):\n+            from sympy.simplify import fraction\n+            numer, denom = fraction(expr, exact=True)\n+        else:\n+            numer = expr\n+            denom = S.One\n         def convert(expr):\n             if not expr.is_Mul:\n                 return str(self._print(expr))\n", "normalized_occurrence": 1}
