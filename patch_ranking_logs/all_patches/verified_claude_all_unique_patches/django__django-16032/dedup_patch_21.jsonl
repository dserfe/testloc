{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16032", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 250c6ee..c520f6f 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1166,11 +1166,13 @@ class Query(BaseExpression):\n     def as_sql(self, compiler, connection):\n         # Some backends (e.g. Oracle) raise an error when a subquery contains\n         # unnecessary ORDER BY clause.\n-        if (\n-            self.subquery\n-            and not connection.features.ignores_unnecessary_order_by_in_subqueries\n-        ):\n-            self.clear_ordering(force=False)\n+        if self.subquery:\n+            if not connection.features.ignores_unnecessary_order_by_in_subqueries:\n+                self.clear_ordering(force=False)\n+            # Clear annotations and aliases for __in subqueries to avoid extra columns\n+            if getattr(self, 'is_in_subquery', False):\n+                self.annotations.clear()\n+                self.alias_map = {}\n             for query in self.combined_queries:\n                 query.clear_ordering(force=False)\n         sql, params = self.get_compiler(connection=connection).as_sql()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4a84de0..5e8e354 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -605,8 +605,12 @@ class Query(BaseExpression):\n             return [self]\n         return external_cols\n     def as_sql(self, compiler, connection):\n-        if self.subquery and (not connection.features.ignores_unnecessary_order_by_in_subqueries):\n-            self.clear_ordering(force=False)\n+        if self.subquery:\n+            if not connection.features.ignores_unnecessary_order_by_in_subqueries:\n+                self.clear_ordering(force=False)\n+            if getattr(self, 'is_in_subquery', False):\n+                self.annotations.clear()\n+                self.alias_map = {}\n             for query in self.combined_queries:\n                 query.clear_ordering(force=False)\n         sql, params = self.get_compiler(connection=connection).as_sql()\n", "normalized_occurrence": 1}
