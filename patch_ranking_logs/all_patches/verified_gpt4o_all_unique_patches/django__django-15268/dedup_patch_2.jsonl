{"model_name_or_path": "agentless", "instance_id": "django__django-15268", "model_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 6db1dcc..2c6e9bb 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -1176,8 +1176,8 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n+            removal_value = old_value.difference(new_value)\n+            if removal_value:\n                 self.add_operation(\n                     app_label,\n                     operation(name=model_name, **{operation.option_name: removal_value}),\n@@ -1198,8 +1198,7 @@ class MigrationAutodetector:\n             model_name,\n             dependencies,\n         ) in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n-            if new_value != removal_value:\n+            if new_value.difference(old_value):\n                 self.add_operation(\n                     app_label,\n                     operation(name=model_name, **{operation.option_name: new_value}),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex 1c56271..fbff28f 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -556,8 +556,8 @@ class MigrationAutodetector:\n                 yield (old_value, new_value, app_label, model_name, dependencies)\n     def _generate_removed_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n-            if removal_value or old_value:\n+            removal_value = old_value.difference(new_value)\n+            if removal_value:\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: removal_value}), dependencies=dependencies)\n     def generate_removed_altered_unique_together(self):\n         self._generate_removed_altered_foo_together(operations.AlterUniqueTogether)\n@@ -565,8 +565,7 @@ class MigrationAutodetector:\n         self._generate_removed_altered_foo_together(operations.AlterIndexTogether)\n     def _generate_altered_foo_together(self, operation):\n         for old_value, new_value, app_label, model_name, dependencies in self._get_altered_foo_together_operations(operation.option_name):\n-            removal_value = new_value.intersection(old_value)\n-            if new_value != removal_value:\n+            if new_value.difference(old_value):\n                 self.add_operation(app_label, operation(name=model_name, **{operation.option_name: new_value}), dependencies=dependencies)\n     def generate_altered_unique_together(self):\n         self._generate_altered_foo_together(operations.AlterUniqueTogether)\n", "normalized_occurrence": 1}
