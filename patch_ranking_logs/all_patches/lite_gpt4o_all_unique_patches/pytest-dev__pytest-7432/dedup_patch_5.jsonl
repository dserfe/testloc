{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1e94c70..19e7d49 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -274,8 +274,9 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         pass  # don't interfere\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n-        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n-        rep.outcome = \"skipped\"\n+        if not item.config.option.runxfail:  # Add this condition\n+            rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n+            rep.outcome = \"skipped\"\n     elif not rep.skipped and xfailed:\n         if call.excinfo:\n             raises = xfailed.raises\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 5f70c26..89f28b5 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -152,8 +152,9 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         pass\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n-        rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n-        rep.outcome = 'skipped'\n+        if not item.config.option.runxfail:\n+            rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n+            rep.outcome = 'skipped'\n     elif not rep.skipped and xfailed:\n         if call.excinfo:\n             raises = xfailed.raises\n", "normalized_occurrence": 1}
