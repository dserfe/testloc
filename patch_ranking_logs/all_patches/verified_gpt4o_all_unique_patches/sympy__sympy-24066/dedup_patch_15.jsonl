{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 4413d8e..94201a2 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -169,7 +169,9 @@ class UnitSystem(_QuantityMapper):\n             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n-            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n+            if self.get_dimension_system().is_dimensionless(exp_dim):\n+                exp_dim = 1\n+            return factor ** exp_factor, dim ** exp_factor\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -192,8 +194,10 @@ class UnitSystem(_QuantityMapper):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            factors, dimensions = zip(*fds)\n+            if all(self.get_dimension_system().is_dimensionless(d) for d in dimensions):\n+                return expr.func(*factors), Dimension(1)\n+            return expr.func(*factors), expr.func(*dimensions)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n@@ -203,4 +207,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 33c8d4e..73f8282 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -99,7 +99,9 @@ class UnitSystem(_QuantityMapper):\n             exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n             if self.get_dimension_system().is_dimensionless(exp_dim):\n                 exp_dim = 1\n-            return (factor ** exp_factor, dim ** (exp_factor * exp_dim))\n+            if self.get_dimension_system().is_dimensionless(exp_dim):\n+                exp_dim = 1\n+            return (factor ** exp_factor, dim ** exp_factor)\n         elif isinstance(expr, Add):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n@@ -117,7 +119,10 @@ class UnitSystem(_QuantityMapper):\n             return (factor, dim)\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)), *(d[1] for d in fds))\n+            factors, dimensions = zip(*fds)\n+            if all((self.get_dimension_system().is_dimensionless(d) for d in dimensions)):\n+                return (expr.func(*factors), Dimension(1))\n+            return (expr.func(*factors), expr.func(*dimensions))\n         elif isinstance(expr, Dimension):\n             return (S.One, expr)\n         else:\n", "normalized_occurrence": 1}
