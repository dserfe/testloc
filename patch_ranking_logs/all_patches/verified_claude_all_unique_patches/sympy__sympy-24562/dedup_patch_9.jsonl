{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..549b253 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1614,10 +1614,15 @@ class Rational(Number):\n                         p = fp/fq\n                     try:\n                         p = fractions.Fraction(p)\n+                        if q is not None:  # If we have a second argument\n+                            try:\n+                                q = fractions.Fraction(q)\n+                                p = p / q\n+                            except (TypeError, ValueError):\n+                                pass  # error will raise below\n+                        return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass  # error will raise below\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..20cc32c 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1400,10 +1400,15 @@ class Rational(Number):\n                         p = fp / fq\n                     try:\n                         p = fractions.Fraction(p)\n+                        if q is not None:\n+                            try:\n+                                q = fractions.Fraction(q)\n+                                p = p / q\n+                            except (TypeError, ValueError):\n+                                pass\n+                        return Rational(p.numerator, p.denominator, 1)\n                     except ValueError:\n                         pass\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n", "normalized_occurrence": 1}
