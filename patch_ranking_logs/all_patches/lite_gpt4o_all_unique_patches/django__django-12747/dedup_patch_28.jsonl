{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..e77d93f 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -442,4 +442,10 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        total_deleted = sum(deleted_counter.values())\n+        if total_deleted == 0:\n+            # Ensure consistency by including all models with zero deletions\n+            for model in self.data.keys():\n+                if model._meta.label not in deleted_counter:\n+                    deleted_counter[model._meta.label] = 0\n+        return total_deleted, dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..72831fb 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -234,4 +234,9 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return (sum(deleted_counter.values()), dict(deleted_counter))\n\\ No newline at end of file\n+        total_deleted = sum(deleted_counter.values())\n+        if total_deleted == 0:\n+            for model in self.data.keys():\n+                if model._meta.label not in deleted_counter:\n+                    deleted_counter[model._meta.label] = 0\n+        return (total_deleted, dict(deleted_counter))\n\\ No newline at end of file\n", "normalized_occurrence": 1}
