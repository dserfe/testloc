{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex 7b0ad01..64edbc7 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -150,7 +150,10 @@ class DenseMatrix(MatrixBase):\n     def _eval_add(self, other):\n         # we assume both arguments are dense matrices since\n         # sparse matrices have a higher priority\n-        mat = [a + b for a,b in zip(self._mat, other._mat)]\n+        if self.cols == 0 or other.cols == 0:\n+            mat = self._mat + other._mat\n+        else:\n+            mat = [a + b for a,b in zip(self._mat, other._mat)]\n         return classof(self, other)._new(self.rows, self.cols, mat, copy=False)\n \n     def _eval_extract(self, rowsList, colsList):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/dense.py b/sympy/matrices/dense.py\nindex edd691e..4e627a5 100644\n--- a/sympy/matrices/dense.py\n+++ b/sympy/matrices/dense.py\n@@ -77,7 +77,10 @@ class DenseMatrix(MatrixBase):\n     def _diagonal_solve(self, rhs):\n         return self._new(rhs.rows, rhs.cols, lambda i, j: rhs[i, j] / self[i, i])\n     def _eval_add(self, other):\n-        mat = [a + b for a, b in zip(self._mat, other._mat)]\n+        if self.cols == 0 or other.cols == 0:\n+            mat = self._mat + other._mat\n+        else:\n+            mat = [a + b for a, b in zip(self._mat, other._mat)]\n         return classof(self, other)._new(self.rows, self.cols, mat, copy=False)\n     def _eval_extract(self, rowsList, colsList):\n         mat = self._mat\n", "normalized_occurrence": 1}
