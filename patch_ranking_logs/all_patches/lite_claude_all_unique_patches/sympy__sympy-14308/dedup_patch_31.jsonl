{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..e4cd4c6 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -932,14 +932,13 @@ class PrettyPrinter(Printer):\n         lengths = []\n         strs = ['']\n         for i, partstr in enumerate(o1):\n-            # XXX: What is this hack?\n+            # Handle multiline expressions by ensuring vector components are properly aligned\n             if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n+                parts = partstr.split('\\n')\n+                # Keep the vector component only on the last line\n+                for j in range(len(parts)-1):\n+                    parts[j] = parts[j].replace(vectstrs[i], '')\n+                o1[i] = '\\n'.join(parts)\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n         for parts in o1:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..f10d479 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -671,10 +671,10 @@ class PrettyPrinter(Printer):\n         strs = ['']\n         for i, partstr in enumerate(o1):\n             if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\u239e', u'\u239e' + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n+                parts = partstr.split('\\n')\n+                for j in range(len(parts) - 1):\n+                    parts[j] = parts[j].replace(vectstrs[i], '')\n+                o1[i] = '\\n'.join(parts)\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n         for parts in o1:\n", "normalized_occurrence": 1}
