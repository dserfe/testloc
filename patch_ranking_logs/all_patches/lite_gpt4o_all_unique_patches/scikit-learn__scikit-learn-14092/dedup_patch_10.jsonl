{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..4c4007f 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -973,11 +973,17 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     \"\"\"\n \n     if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+        if isinstance(target_type, tuple):\n+            if not any(isinstance(x, t) for t in target_type):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'\n+                                .format(name, target_type, type(x)))\n+        else:\n+            if not isinstance(x, target_type):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'\n+                                .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..23a269d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -282,7 +282,11 @@ def check_non_negative(X, whom):\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n     if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+        if isinstance(target_type, tuple):\n+            if not any((isinstance(x, t) for t in target_type)):\n+                raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+        elif not isinstance(x, target_type):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n     if max_val is not None and x > max_val:\n", "normalized_occurrence": 1}
