{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16503", "model_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex 8f28fc5..71606c4 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -83,7 +83,7 @@ class stringPict(object):\n                 oneEmptyLine * (totalPadding - basePadding))\n \n         result = [''.join(lines) for lines in zip(*pictures)]\n-        return '\\n'.join(result), newBaseline\n+        return stringPict(result, newBaseline)\n \n     def right(self, *args):\n         r\"\"\"Put pictures next to this one.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/stringpict.py b/sympy/printing/pretty/stringpict.py\nindex 6dc45e7..1dec4c9 100644\n--- a/sympy/printing/pretty/stringpict.py\n+++ b/sympy/printing/pretty/stringpict.py\n@@ -35,7 +35,7 @@ class stringPict(object):\n             totalPadding = newHeight - obj.height()\n             pictures.append(oneEmptyLine * basePadding + obj.picture + oneEmptyLine * (totalPadding - basePadding))\n         result = [''.join(lines) for lines in zip(*pictures)]\n-        return ('\\n'.join(result), newBaseline)\n+        return stringPict(result, newBaseline)\n     def right(self, *args):\n         return stringPict.next(self, *args)\n     def left(self, *args):\n", "normalized_occurrence": 1}
