{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..c766605 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -361,11 +361,14 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         return (\n             key\n             for key in self._dataset._variables\n-            if key not in self._dataset._coord_names\n+            if key not in self._dataset._coord_names and key in self._dataset._variables\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return sum(\n+            1 for key in self._dataset._variables\n+            if key not in self._dataset._coord_names\n+        )\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex fa0ec48..9479d4a 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -161,9 +161,9 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     def __init__(self, dataset: Dataset):\n         self._dataset = dataset\n     def __iter__(self) -> Iterator[Hashable]:\n-        return (key for key in self._dataset._variables if key not in self._dataset._coord_names)\n+        return (key for key in self._dataset._variables if key not in self._dataset._coord_names and key in self._dataset._variables)\n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return sum((1 for key in self._dataset._variables if key not in self._dataset._coord_names))\n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n     def __getitem__(self, key: Hashable) -> DataArray:\n", "normalized_occurrence": 2}
