{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15498", "model_patch": "diff --git a/django/middleware/http.py b/django/middleware/http.py\nindex 2ea6e03..80da957 100644\n--- a/django/middleware/http.py\n+++ b/django/middleware/http.py\n@@ -24,11 +24,16 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n         last_modified = response.get(\"Last-Modified\")\n         last_modified = last_modified and parse_http_date_safe(last_modified)\n \n+        # Safely handle If-Modified-Since header by ignoring empty strings\n+        if_modified_since = request.META.get(\"HTTP_IF_MODIFIED_SINCE\", \"\")\n+        if_modified_since = if_modified_since and parse_http_date_safe(if_modified_since)\n+\n         if etag or last_modified:\n             return get_conditional_response(\n                 request,\n                 etag=etag,\n                 last_modified=last_modified,\n+                if_modified_since=if_modified_since,\n                 response=response,\n             )\n \n@@ -37,4 +42,4 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n     def needs_etag(self, response):\n         \"\"\"Return True if an ETag header should be added to response.\"\"\"\n         cache_control_headers = cc_delim_re.split(response.get(\"Cache-Control\", \"\"))\n-        return all(header.lower() != \"no-store\" for header in cache_control_headers)\n+        return all(header.lower() != \"no-store\" for header in cache_control_headers)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/middleware/http.py b/django/middleware/http.py\nindex c9afcfa..a2054db 100644\n--- a/django/middleware/http.py\n+++ b/django/middleware/http.py\n@@ -10,8 +10,10 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n         etag = response.get('ETag')\n         last_modified = response.get('Last-Modified')\n         last_modified = last_modified and parse_http_date_safe(last_modified)\n+        if_modified_since = request.META.get('HTTP_IF_MODIFIED_SINCE', '')\n+        if_modified_since = if_modified_since and parse_http_date_safe(if_modified_since)\n         if etag or last_modified:\n-            return get_conditional_response(request, etag=etag, last_modified=last_modified, response=response)\n+            return get_conditional_response(request, etag=etag, last_modified=last_modified, if_modified_since=if_modified_since, response=response)\n         return response\n     def needs_etag(self, response):\n         cache_control_headers = cc_delim_re.split(response.get('Cache-Control', ''))\n", "normalized_occurrence": 1}
