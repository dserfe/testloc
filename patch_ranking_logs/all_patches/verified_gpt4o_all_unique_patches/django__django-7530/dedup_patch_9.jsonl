{"model_name_or_path": "agentless", "instance_id": "django__django-7530", "model_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex bea18af..ad786dd 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -101,13 +101,14 @@ class Command(BaseCommand):\n         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n         for alias in sorted(aliases_to_check):\n             connection = connections[alias]\n-            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n-                    # At least one model must be migrated to the database.\n-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n-                    for app_label in consistency_check_labels\n-                    for model in apps.get_models(app_label)\n-            )):\n-                loader.check_consistent_history(connection)\n+            for app_label in consistency_check_labels:\n+                app_config = apps.get_app_config(app_label)\n+                if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(\n+                        # At least one model must be migrated to the database.\n+                        router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)\n+                        for model in app_config.get_models()\n+                )):\n+                    loader.check_consistent_history(connection)\n \n         # Before anything else, see if there's conflicting apps and drop out\n         # hard if there are any and they don't want to merge\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py\nindex c375091..b7bc8fd 100644\n--- a/django/core/management/commands/makemigrations.py\n+++ b/django/core/management/commands/makemigrations.py\n@@ -55,8 +55,10 @@ class Command(BaseCommand):\n         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]\n         for alias in sorted(aliases_to_check):\n             connection = connections[alias]\n-            if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for app_label in consistency_check_labels for model in apps.get_models(app_label))):\n-                loader.check_consistent_history(connection)\n+            for app_label in consistency_check_labels:\n+                app_config = apps.get_app_config(app_label)\n+                if connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any((router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name) for model in app_config.get_models())):\n+                    loader.check_consistent_history(connection)\n         conflicts = loader.detect_conflicts()\n         if app_labels:\n             conflicts = {app_label: conflict for app_label, conflict in iteritems(conflicts) if app_label in app_labels}\n", "normalized_occurrence": 1}
