{"model_name_or_path": "agentless", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..a2850c5 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -797,7 +797,7 @@ class Query(BaseExpression):\n         If 'create' is true, a new alias is always created. Otherwise, the\n         most recently created alias for the table (if one exists) is reused.\n         \"\"\"\n-        alias_list = self.table_map.get(table_name)\n+        alias_list = self.table_map.get(table_name) if filtered_relation is None else None\n         if not create and alias_list:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..8f97b43 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -425,7 +425,7 @@ class Query(BaseExpression):\n             for model, values in seen.items():\n                 callback(target, model, values)\n     def table_alias(self, table_name, create=False, filtered_relation=None):\n-        alias_list = self.table_map.get(table_name)\n+        alias_list = self.table_map.get(table_name) if filtered_relation is None else None\n         if not create and alias_list:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n", "normalized_occurrence": 1}
