{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..7a3faaf 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1609,15 +1609,28 @@ class Rational(Number):\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n                         p, q = pq\n+                        if _literal_float(p):\n+                            p = float(p)\n+                        if _literal_float(q):\n+                            q = float(q)\n                         fp = fractions.Fraction(p)\n                         fq = fractions.Fraction(q)\n                         p = fp/fq\n-                    try:\n-                        p = fractions.Fraction(p)\n-                    except ValueError:\n-                        pass  # error will raise below\n+                    elif _literal_float(p):\n+                        p = float(p)\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass  # error will raise below\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n                     else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass  # error will raise below\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..97af222 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1395,15 +1395,28 @@ class Rational(Number):\n                     pq = p.rsplit('/', 1)\n                     if len(pq) == 2:\n                         p, q = pq\n+                        if _literal_float(p):\n+                            p = float(p)\n+                        if _literal_float(q):\n+                            q = float(q)\n                         fp = fractions.Fraction(p)\n                         fq = fractions.Fraction(q)\n                         p = fp / fq\n-                    try:\n-                        p = fractions.Fraction(p)\n-                    except ValueError:\n-                        pass\n+                    elif _literal_float(p):\n+                        p = float(p)\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n                     else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        try:\n+                            p = fractions.Fraction(p)\n+                        except ValueError:\n+                            pass\n+                        else:\n+                            return Rational(p.numerator, p.denominator, 1)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n", "normalized_occurrence": 1}
