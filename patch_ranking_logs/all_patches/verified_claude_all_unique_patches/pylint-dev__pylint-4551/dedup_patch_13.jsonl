{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4551", "model_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex 0111bb1..73cc98f 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -84,6 +84,17 @@ class ClassDiagram(Figure, FilterMixIn):\n             for n, m in node.items()\n             if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)\n         ]\n+        \n+        # Get init method to check its annotations\n+        init = node.locals.get('__init__', [None])[0]\n+        init_annotations = {}\n+        if init and isinstance(init, astroid.FunctionDef) and init.args.annotations:\n+            init_annotations = {\n+                arg.name: anno\n+                for arg, anno in zip(init.args.args[1:], init.args.annotations[1:])  # Skip 'self'\n+                if anno is not None\n+            }\n+        \n         for node_name, associated_nodes in (\n             list(node.instance_attrs_type.items())\n             + list(node.locals_type.items())\n@@ -92,6 +103,13 @@ class ClassDiagram(Figure, FilterMixIn):\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n+            # Check for type annotation from __init__\n+            if not names and node_name in init_annotations:\n+                try:\n+                    anno_name = init_annotations[node_name].name\n+                    names = [anno_name]\n+                except AttributeError:\n+                    pass\n             if names:\n                 node_name = \"{} : {}\".format(node_name, \", \".join(names))\n             attrs.append(node_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/pyreverse/diagrams.py b/pylint/pyreverse/diagrams.py\nindex d9b60dc..8be17a3 100644\n--- a/pylint/pyreverse/diagrams.py\n+++ b/pylint/pyreverse/diagrams.py\n@@ -57,10 +57,20 @@ class ClassDiagram(Figure, FilterMixIn):\n         \"\"\"return visible attributes, possibly with class name\"\"\"\n         attrs = []\n         properties = [(n, m) for n, m in node.items() if isinstance(m, astroid.FunctionDef) and decorated_with_property(m)]\n+        init = node.locals.get('__init__', [None])[0]\n+        init_annotations = {}\n+        if init and isinstance(init, astroid.FunctionDef) and init.args.annotations:\n+            init_annotations = {arg.name: anno for arg, anno in zip(init.args.args[1:], init.args.annotations[1:]) if anno is not None}\n         for node_name, associated_nodes in list(node.instance_attrs_type.items()) + list(node.locals_type.items()) + properties:\n             if not self.show_attr(node_name):\n                 continue\n             names = self.class_names(associated_nodes)\n+            if not names and node_name in init_annotations:\n+                try:\n+                    anno_name = init_annotations[node_name].name\n+                    names = [anno_name]\n+                except AttributeError:\n+                    pass\n             if names:\n                 node_name = '{} : {}'.format(node_name, ', '.join(names))\n             attrs.append(node_name)\n", "normalized_occurrence": 1}
