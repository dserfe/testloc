{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..ce2c08d 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,28 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n         # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n+        row_block = 0\n+        row_offset = 0\n+        # Build up a piecewise expression for the result\n+        result = None\n+        running_offset = 0\n+        for block_i, numrows in enumerate(self.rowblocksizes):\n+            current_block = None\n+            # For each possible row block\n+            for block_j, numcols in enumerate(self.colblocksizes):\n+                entry = self.blocks[block_i, block_j][i - running_offset, j]\n+                if current_block is None:\n+                    current_block = entry\n+            # Add this row block's entry to the piecewise result\n+            cond = (i >= running_offset) & (i < running_offset + numrows)\n+            if result is None:\n+                result = Piecewise((current_block, cond))\n             else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+                result = Piecewise((current_block, cond), *result.args)\n+            running_offset += numrows\n+        return result\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..19f396b 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,24 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n+        from sympy import Piecewise\n+        row_block = 0\n+        row_offset = 0\n+        result = None\n+        running_offset = 0\n+        for block_i, numrows in enumerate(self.rowblocksizes):\n+            current_block = None\n+            for block_j, numcols in enumerate(self.colblocksizes):\n+                entry = self.blocks[block_i, block_j][i - running_offset, j]\n+                if current_block is None:\n+                    current_block = entry\n+            cond = (i >= running_offset) & (i < running_offset + numrows)\n+            if result is None:\n+                result = Piecewise((current_block, cond))\n             else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+                result = Piecewise((current_block, cond), *result.args)\n+            running_offset += numrows\n+        return result\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
