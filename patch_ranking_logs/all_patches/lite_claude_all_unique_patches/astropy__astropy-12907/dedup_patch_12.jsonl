{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..5f1e95f 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -207,12 +207,18 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n+        # Handle compound models by using their separability matrix if available\n+        if hasattr(model, '_separable_matrix'):\n+            base_mat = model._separable_matrix\n+        else:\n+            # For simple separable models, create diagonal matrix\n+            base_mat = np.eye(model.n_outputs, model.n_inputs, dtype=bool)\n+        \n         mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        if pos == 'left':\n+            mat[:model.n_outputs, :model.n_inputs] = base_mat\n+        else:\n+            mat[-model.n_outputs:, -model.n_inputs:] = base_mat\n     return mat\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..3ac0a74 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -61,11 +61,15 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n+        if hasattr(model, '_separable_matrix'):\n+            base_mat = model._separable_matrix\n+        else:\n+            base_mat = np.eye(model.n_outputs, model.n_inputs, dtype=bool)\n         mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+        if pos == 'left':\n+            mat[:model.n_outputs, :model.n_inputs] = base_mat\n+        else:\n+            mat[-model.n_outputs:, -model.n_inputs:] = base_mat\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n", "normalized_occurrence": 1}
