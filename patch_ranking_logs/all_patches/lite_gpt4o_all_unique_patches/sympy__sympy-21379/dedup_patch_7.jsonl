{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..10dab29 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -810,18 +810,19 @@ class Piecewise(Function):\n         # somewhat more efficient by avoiding other substitutions\n         # and avoiding invalid conditions that appear after a\n         # True condition\n-        args = list(self.args)\n+        args = []\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n+        for e, c in self.args:\n             c = c._subs(old, new)\n-            if c != False:\n-                args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            new_e = e._subs(old, new)\n+            new_c = c._subs(old, new)\n+            if new_c == True:\n+                args.append((new_e, new_c))\n                 break\n-        if not args_exist:\n-            args = ((Undefined, True),)\n+            elif new_c != False:\n+                args.append((new_e, new_c))\n+        if not args:\n+            args.append((Undefined, True))\n         return self.func(*args)\n \n     def _eval_transpose(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..ef9f167 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,18 +441,19 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n-        args = list(self.args)\n+        args = []\n         args_exist = False\n-        for i, (e, c) in enumerate(args):\n+        for e, c in self.args:\n             c = c._subs(old, new)\n-            if c != False:\n-                args_exist = True\n-                e = e._subs(old, new)\n-            args[i] = (e, c)\n-            if c == True:\n+            new_e = e._subs(old, new)\n+            new_c = c._subs(old, new)\n+            if new_c == True:\n+                args.append((new_e, new_c))\n                 break\n-        if not args_exist:\n-            args = ((Undefined, True),)\n+            elif new_c != False:\n+                args.append((new_e, new_c))\n+        if not args:\n+            args.append((Undefined, True))\n         return self.func(*args)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "normalized_occurrence": 1}
