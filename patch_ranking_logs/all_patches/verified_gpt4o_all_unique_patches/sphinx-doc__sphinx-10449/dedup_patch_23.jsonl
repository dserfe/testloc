{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..880f79a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -83,7 +83,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], is_constructor: bool = False) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -104,7 +104,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' and not self.is_constructor:\n             arguments['return'] = {'type': True}\n \n     for name, annotation in annotations.items():\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..aff9180 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -58,7 +58,7 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], is_constructor: bool=False) -> None:\n     arguments: Dict[str, Dict[str, bool]] = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -77,7 +77,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             name = ' '.join(parts[1:])\n             arg = arguments.setdefault(name, {})\n             arg['type'] = True\n-        elif parts[0] == 'rtype':\n+        elif parts[0] == 'rtype' and (not self.is_constructor):\n             arguments['return'] = {'type': True}\n     for name, annotation in annotations.items():\n         if name == 'return':\n", "normalized_occurrence": 1}
