{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..c488cb0 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -190,7 +190,13 @@ class Options:\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n \n-            # order_with_respect_and ordering are mutually exclusive.\n+            # If ordering is not set, inherit from parent if exists.\n+            if not self.ordering:\n+                for base in cls.__bases__:\n+                    if hasattr(base, '_meta') and base._meta.ordering:\n+                        self.ordering = base._meta.ordering\n+                        break\n+            # order_with_respect_to and ordering are mutually exclusive.\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n \n             # Any leftover attributes must be invalid.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..3bca52a 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -117,6 +117,11 @@ class Options:\n                     setattr(self, attr_name, self._format_names_with_class(cls, objs))\n             if self.verbose_name_plural is None:\n                 self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+            if not self.ordering:\n+                for base in cls.__bases__:\n+                    if hasattr(base, '_meta') and base._meta.ordering:\n+                        self.ordering = base._meta.ordering\n+                        break\n             self._ordering_clash = bool(self.ordering and self.order_with_respect_to)\n             if meta_attrs != {}:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n", "normalized_occurrence": 1}
