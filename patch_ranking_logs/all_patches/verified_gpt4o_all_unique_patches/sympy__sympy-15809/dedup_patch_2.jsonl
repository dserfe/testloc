{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15809", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex bb765cc..366f11e 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -430,7 +430,12 @@ class Function(Application, Expr):\n             return UndefinedFunction(*args, **options)\n \n         n = len(args)\n-        if n not in cls.nargs:\n+        if n == 0:\n+            if cls.__name__ == 'Min':\n+                return S.NegativeInfinity\n+            elif cls.__name__ == 'Max':\n+                return S.Infinity\n+        elif n not in cls.nargs:\n             # XXX: exception message must be in exactly this format to\n             # make it work with NumPy's functions like vectorize(). See,\n             # for example, https://github.com/numpy/numpy/issues/1697.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 653d499..810a4ee 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -138,7 +138,12 @@ class Function(Application, Expr):\n         if cls is Function:\n             return UndefinedFunction(*args, **options)\n         n = len(args)\n-        if n not in cls.nargs:\n+        if n == 0:\n+            if cls.__name__ == 'Min':\n+                return S.NegativeInfinity\n+            elif cls.__name__ == 'Max':\n+                return S.Infinity\n+        elif n not in cls.nargs:\n             temp = '%(name)s takes %(qual)s %(args)s argument%(plural)s (%(given)s given)'\n             raise TypeError(temp % {'name': cls, 'qual': 'exactly' if len(cls.nargs) == 1 else 'at least', 'args': min(cls.nargs), 'plural': 's' * (min(cls.nargs) != 1), 'given': n})\n         evaluate = options.get('evaluate', global_evaluate[0])\n", "normalized_occurrence": 1}
