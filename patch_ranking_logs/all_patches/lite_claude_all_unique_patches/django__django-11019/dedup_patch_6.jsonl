{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..3a39adf 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -124,7 +124,54 @@ class Media:\n         For static assets it can be important to have them included in the DOM\n         in a certain order. In JavaScript you may not be able to reference a\n         global or in CSS you might want to override a style.\n+\n+        The merge algorithm maintains relative ordering of files within each list\n+        while resolving any conflicts based on dependency order.\n         \"\"\"\n+        # Create a new list to store the merged result\n+        combined = []\n+        used = set()\n+        \n+        # Helper to add items maintaining their relative order\n+        def add_items(items, other_items):\n+            for item in items:\n+                if item not in used:\n+                    # Check if this item appears in the other list\n+                    try:\n+                        other_idx = other_items.index(item)\n+                        # Find all items that come before this in other list\n+                        for other_item in other_items[:other_idx]:\n+                            if other_item not in used:\n+                                combined.append(other_item)\n+                                used.add(other_item)\n+                    except ValueError:\n+                        pass\n+                    combined.append(item)\n+                    used.add(item)\n+\n+        # First pass: Add items from list_1 while respecting ordering in list_2\n+        add_items(list_1, list_2)\n+        \n+        # Second pass: Add remaining items from list_2\n+        add_items(list_2, list_1)\n+\n+        # Check for order conflicts\n+        for i, item in enumerate(combined):\n+            if item in list_1 and item in list_2:\n+                idx1 = list_1.index(item)\n+                idx2 = list_2.index(item)\n+                for j, other in enumerate(combined):\n+                    if j > i and other in list_1 and other in list_2:\n+                        other_idx1 = list_1.index(other)\n+                        other_idx2 = list_2.index(other)\n+                        if (idx1 < other_idx1) != (idx2 < other_idx2):\n+                            warnings.warn(\n+                                'Detected duplicate Media files in an opposite order:\\n'\n+                                '%s\\n%s' % (item, other),\n+                                MediaOrderConflictWarning,\n+                            )\n+        \n+        return combined\n         # Start with a copy of list_1.\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..cd699e9 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -63,6 +63,34 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n     def merge(list_1, list_2):\n+        combined = []\n+        used = set()\n+        def add_items(items, other_items):\n+            for item in items:\n+                if item not in used:\n+                    try:\n+                        other_idx = other_items.index(item)\n+                        for other_item in other_items[:other_idx]:\n+                            if other_item not in used:\n+                                combined.append(other_item)\n+                                used.add(other_item)\n+                    except ValueError:\n+                        pass\n+                    combined.append(item)\n+                    used.add(item)\n+        add_items(list_1, list_2)\n+        add_items(list_2, list_1)\n+        for i, item in enumerate(combined):\n+            if item in list_1 and item in list_2:\n+                idx1 = list_1.index(item)\n+                idx2 = list_2.index(item)\n+                for j, other in enumerate(combined):\n+                    if j > i and other in list_1 and (other in list_2):\n+                        other_idx1 = list_1.index(other)\n+                        other_idx2 = list_2.index(other)\n+                        if (idx1 < other_idx1) != (idx2 < other_idx2):\n+                            warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (item, other), MediaOrderConflictWarning)\n+        return combined\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n         for path in reversed(list_2):\n", "normalized_occurrence": 1}
