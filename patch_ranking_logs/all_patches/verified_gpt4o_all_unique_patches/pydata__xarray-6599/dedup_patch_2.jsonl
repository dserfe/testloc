{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 5a38507..8c7b74c 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1866,9 +1866,15 @@ def polyval(coord: Dataset, coeffs: Dataset, degree_dim: Hashable) -> Dataset:\n     ...\n \n \n+def _convert_timedelta64(coord: DataArray) -> DataArray:\n+    if np.issubdtype(coord.dtype, np.timedelta64):\n+        return coord.copy(data=duck_array_ops.np_timedelta64_to_float(coord.data, \"s\"))\n+    return coord\n+\n def polyval(\n     coord: Dataset | DataArray,\n     coeffs: Dataset | DataArray,\n+    coeffs: Dataset | DataArray,\n     degree_dim: Hashable = \"degree\",\n ) -> Dataset | DataArray:\n     \"\"\"Evaluate a polynomial at specific values\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 2633eea..31dcd7d 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -542,7 +542,11 @@ def polyval(coord: Dataset, coeffs: DataArray, degree_dim: Hashable) -> Dataset:\n @overload\n def polyval(coord: Dataset, coeffs: Dataset, degree_dim: Hashable) -> Dataset:\n     ...\n-def polyval(coord: Dataset | DataArray, coeffs: Dataset | DataArray, degree_dim: Hashable='degree') -> Dataset | DataArray:\n+def _convert_timedelta64(coord: DataArray) -> DataArray:\n+    if np.issubdtype(coord.dtype, np.timedelta64):\n+        return coord.copy(data=duck_array_ops.np_timedelta64_to_float(coord.data, 's'))\n+    return coord\n+def polyval(coord: Dataset | DataArray, coeffs: Dataset | DataArray, coeffs: Dataset | DataArray, degree_dim: Hashable='degree') -> Dataset | DataArray:\n     if degree_dim not in coeffs._indexes:\n         raise ValueError(f'Dimension `{degree_dim}` should be a coordinate variable with labels.')\n     if not np.issubdtype(coeffs[degree_dim].dtype, int):\n", "normalized_occurrence": 1}
