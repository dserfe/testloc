{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..ecf4e54 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,10 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = dict(zip(var, range(len(var))))\n+                base_sol = diophantine(eq, param)\n+                reordered_sol = {tuple([t[dict_sym_index[i]] for i in syms]) for t in base_sol}\n+                return reordered_sol\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n@@ -203,12 +204,9 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n         raise TypeError(filldedent('''\n     Equation should be a polynomial with Rational coefficients.'''))\n \n-    # permute only sign\n-    do_permute_signs = False\n-    # permute sign and values\n-    do_permute_signs_var = False\n-    # permute few signs\n-    permute_few_signs = False\n+    if syms and permute:\n+        dict_sym_index = dict(zip(var, range(len(var))))\n+        sols = {tuple([s[dict_sym_index[i]] for i in syms]) for s in sols}\n     try:\n         # if we know that factoring should not be attempted, skip\n         # the factoring step\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..ef969f9 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,10 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = dict(zip(var, range(len(var))))\n+                base_sol = diophantine(eq, param)\n+                reordered_sol = {tuple([t[dict_sym_index[i]] for i in syms]) for t in base_sol}\n+                return reordered_sol\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n@@ -91,9 +93,9 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n         assert eq.is_polynomial()\n     except (GeneratorsNeeded, AssertionError, AttributeError):\n         raise TypeError(filldedent('\\n    Equation should be a polynomial with Rational coefficients.'))\n-    do_permute_signs = False\n-    do_permute_signs_var = False\n-    permute_few_signs = False\n+    if syms and permute:\n+        dict_sym_index = dict(zip(var, range(len(var))))\n+        sols = {tuple([s[dict_sym_index[i]] for i in syms]) for s in sols}\n     try:\n         v, c, t = classify_diop(eq)\n         if permute:\n", "normalized_occurrence": 1}
