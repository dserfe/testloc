{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10435", "model_patch": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex 2dc462a..2bfc5a3 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1709,12 +1709,12 @@ class LaTeXTranslator(SphinxTranslator):\n             node.astext(), lang, opts=opts, location=node)\n         # TODO: Use nowrap option once LaTeX formatter supports it\n         # https://github.com/pygments/pygments/pull/1343\n-        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]',\n-                                r'\\sphinxcode{\\sphinxupquote{')\n-        # get consistent trailer\n+        hlcode = hlcode.replace(r'\\begin{Verbatim}[commandchars=\\\\\\{\\}]', r'')\n+        # get consistent trailer and avoid wrapping sphinxcode\n         hlcode = hlcode.rstrip()[:-14]  # strip \\end{Verbatim}\n+        self.body.append(r'\\sphinxcode{\\sphinxupquote{%')\n         self.body.append(hlcode)\n-        self.body.append('}}')\n+        self.body.append('%}}')\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/writers/latex.py b/sphinx/writers/latex.py\nindex edec328..a60ce75 100644\n--- a/sphinx/writers/latex.py\n+++ b/sphinx/writers/latex.py\n@@ -1452,10 +1452,11 @@ class LaTeXTranslator(SphinxTranslator):\n             return\n         opts = self.config.highlight_options.get(lang, {})\n         hlcode = self.highlighter.highlight_block(node.astext(), lang, opts=opts, location=node)\n-        hlcode = hlcode.replace('\\\\begin{Verbatim}[commandchars=\\\\\\\\\\\\{\\\\}]', '\\\\sphinxcode{\\\\sphinxupquote{')\n+        hlcode = hlcode.replace('\\\\begin{Verbatim}[commandchars=\\\\\\\\\\\\{\\\\}]', '')\n         hlcode = hlcode.rstrip()[:-14]\n+        self.body.append('\\\\sphinxcode{\\\\sphinxupquote{%')\n         self.body.append(hlcode)\n-        self.body.append('}}')\n+        self.body.append('%}}')\n         raise nodes.SkipNode\n \n     def depart_literal(self, node: Element) -> None:\n", "normalized_occurrence": 1}
