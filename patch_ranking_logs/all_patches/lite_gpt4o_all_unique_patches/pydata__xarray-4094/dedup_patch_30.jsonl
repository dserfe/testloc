{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 3a09d85..7cb2eff 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -627,7 +627,7 @@ def merge_core(\n \n def merge(\n     objects: Iterable[Union[\"DataArray\", \"CoercibleMapping\"]],\n-    compat: str = \"no_conflicts\",\n+    compat: str = \"override\",\n     join: str = \"outer\",\n     fill_value: object = dtypes.NA,\n     combine_attrs: str = \"drop\",\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/merge.py b/xarray/core/merge.py\nindex 0a5d6cd..7a03409 100644\n--- a/xarray/core/merge.py\n+++ b/xarray/core/merge.py\n@@ -435,7 +435,7 @@ def merge_core(objects: Iterable['CoercibleMapping'], compat: str='broadcast_equ\n     attrs = merge_attrs([var.attrs for var in coerced if isinstance(var, Dataset) or isinstance(var, DataArray)], combine_attrs)\n     return _MergeResult(variables, coord_names, dims, out_indexes, attrs)\n \n-def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str='no_conflicts', join: str='outer', fill_value: object=dtypes.NA, combine_attrs: str='drop') -> 'Dataset':\n+def merge(objects: Iterable[Union['DataArray', 'CoercibleMapping']], compat: str='override', join: str='outer', fill_value: object=dtypes.NA, combine_attrs: str='drop') -> 'Dataset':\n     \"\"\"Merge any number of xarray objects into a single Dataset as variables.\n \n     Parameters\n", "normalized_occurrence": 1}
