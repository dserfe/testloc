{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 2914fa8..007335b 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1304,9 +1304,14 @@ class Artist:\n             normed = self.norm(data)\n             if np.isfinite(normed):\n                 # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n+                if isinstance(self.norm, mpl.colors.BoundaryNorm):\n+                    # BoundaryNorm is not invertible; handle it differently\n+                    g_sig_digits = 3  # A default value, or some other handling code\n+                else:\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n                 g_sig_digits = cbook._g_sig_digits(data, delta)\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex a2cf16a..e1bcf7f 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -460,8 +460,12 @@ class Artist:\n                 return '[]'\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                neighbors = self.norm.inverse((int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n+                if isinstance(self.norm, mpl.colors.BoundaryNorm):\n+                    g_sig_digits = 3\n+                else:\n+                    neighbors = self.norm.inverse((int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n                 g_sig_digits = cbook._g_sig_digits(data, delta)\n             else:\n                 g_sig_digits = 3\n", "normalized_occurrence": 1}
