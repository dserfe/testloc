{"model_name_or_path": "agentless", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..54f4e41 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -416,7 +416,12 @@ class HTTPAdapter(BaseAdapter):\n \n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n+        proxy_headers = self.proxy_headers(proxies['https']) if 'https' in proxies else {}\n         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        \n+        # Ensure proxy headers are added to request\n+        for header, value in proxy_headers.items():\n+            request.headers[header] = value\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n@@ -535,4 +540,4 @@ class HTTPAdapter(BaseAdapter):\n             else:\n                 raise\n \n-        return self.build_response(request, resp)\n+        return self.build_response(request, resp)\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..081241f 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -166,7 +166,10 @@ class HTTPAdapter(BaseAdapter):\n             raise InvalidURL(e, request=request)\n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n+        proxy_headers = self.proxy_headers(proxies['https']) if 'https' in proxies else {}\n         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        for header, value in proxy_headers.items():\n+            request.headers[header] = value\n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n         if isinstance(timeout, tuple):\n             try:\n", "normalized_occurrence": 1}
