{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24213", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex f6b73be..30ab7b6 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -149,6 +149,12 @@ class UnitSystem(_QuantityMapper):\n             return self.get_quantity_dimension(expr).name\n         return S.One\n \n+    def is_consistent(self, dim1, dim2):\n+        \"\"\"\n+        Check if two dimensions are consistent (equivalent).\n+        \"\"\"\n+        return self.get_dimension_system().equivalent_dims(dim1, dim2)\n+        \n     def _collect_factor_and_dimension(self, expr):\n         \"\"\"\n         Return tuple with scale factor expression and dimension expression.\n@@ -175,7 +181,7 @@ class UnitSystem(_QuantityMapper):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if dim != addend_dim and not self.get_dimension_system().is_consistent(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n                         'but it should be {}'.format(\n@@ -202,4 +208,4 @@ class UnitSystem(_QuantityMapper):\n         \"\"\"\n         Return the units of the system that do not have a prefix.\n         \"\"\"\n-        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n+        return set(filter(lambda u: not u.is_prefixed and not u.is_physical_constant, self._units))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 212532e..f0b66bf 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -82,6 +82,8 @@ class UnitSystem(_QuantityMapper):\n         elif isinstance(expr, Quantity):\n             return self.get_quantity_dimension(expr).name\n         return S.One\n+    def is_consistent(self, dim1, dim2):\n+        return self.get_dimension_system().equivalent_dims(dim1, dim2)\n     def _collect_factor_and_dimension(self, expr):\n         from sympy.physics.units import Quantity\n         if isinstance(expr, Quantity):\n@@ -104,7 +106,7 @@ class UnitSystem(_QuantityMapper):\n             factor, dim = self._collect_factor_and_dimension(expr.args[0])\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if dim != addend_dim and (not self.get_dimension_system().is_consistent(dim, addend_dim)):\n                     raise ValueError('Dimension of \"{}\" is {}, but it should be {}'.format(addend, addend_dim, dim))\n                 factor += addend_factor\n             return (factor, dim)\n", "normalized_occurrence": 1}
