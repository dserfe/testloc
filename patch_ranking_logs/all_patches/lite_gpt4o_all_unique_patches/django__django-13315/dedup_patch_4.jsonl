{"model_name_or_path": "agentless", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex e59da5c..c4506b8 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1361,7 +1361,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                     code='invalid_pk_value',\n                     params={'pk': pk},\n                 )\n-        qs = self.queryset.filter(**{'%s__in' % key: value})\n+        qs = self.queryset.filter(**{'%s__in' % key: value}).distinct()\n         pks = {str(getattr(o, key)) for o in qs}\n         for val in value:\n             if str(val) not in pks:\n", "occurrence": 10, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex bdd2237..a011e15 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -706,7 +706,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n                 self.queryset.filter(**{key: pk})\n             except (ValueError, TypeError):\n                 raise ValidationError(self.error_messages['invalid_pk_value'], code='invalid_pk_value', params={'pk': pk})\n-        qs = self.queryset.filter(**{'%s__in' % key: value})\n+        qs = self.queryset.filter(**{'%s__in' % key: value}).distinct()\n         pks = {str(getattr(o, key)) for o in qs}\n         for val in value:\n             if str(val) not in pks:\n", "normalized_occurrence": 10}
