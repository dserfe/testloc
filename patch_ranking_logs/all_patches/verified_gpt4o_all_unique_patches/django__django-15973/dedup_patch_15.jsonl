{"model_name_or_path": "agentless", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..9c7792e 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1372,6 +1372,16 @@ class ManyToManyField(RelatedField):\n                 \"Cannot specify a db_table if an intermediary model is used.\"\n             )\n \n+        if isinstance(through, str):\n+            # Resolve string reference to the model\n+            from django.apps import apps\n+            through = apps.get_model(through, require_ready=False)\n+\n+        if isinstance(through, str):\n+            # Resolve string reference to the model\n+            from django.apps import apps\n+            through = apps.get_model(through, require_ready=False)\n+\n         kwargs[\"rel\"] = self.rel_class(\n             self,\n             to,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..5efe781 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -542,6 +542,12 @@ class ManyToManyField(RelatedField):\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n+        if isinstance(through, str):\n+            from django.apps import apps\n+            through = apps.get_model(through, require_ready=False)\n+        if isinstance(through, str):\n+            from django.apps import apps\n+            through = apps.get_model(through, require_ready=False)\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n", "normalized_occurrence": 1}
