{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7571", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 16efd55..0cf01fc 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -356,6 +356,8 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        # Restore the handler's log level to the initial value\n+        self.handler.setLevel(self._item._store.get(caplog_handler_key).level)\n \n     @property\n     def handler(self) -> LogCaptureHandler:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 862b163..c382ba9 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -168,6 +168,7 @@ class LogCaptureFixture:\n         for logger_name, level in self._initial_logger_levels.items():\n             logger = logging.getLogger(logger_name)\n             logger.setLevel(level)\n+        self.handler.setLevel(self._item._store.get(caplog_handler_key).level)\n     @property\n     def handler(self) -> LogCaptureHandler:\n         return self._item._store[caplog_handler_key]\n", "normalized_occurrence": 1}
