{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..699e71a 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1317,7 +1317,9 @@ class PairGrid(Grid):\n             utils.despine(fig=fig)\n         self.tight_layout(pad=layout_pad)\n \n-    def map(self, func, **kwargs):\n+    def map(self, func, hue=None, **kwargs):\n+        if hue is not None:\n+            kwargs['hue'] = hue\n         \"\"\"Plot with the same function in every subplot.\n \n         Parameters\n@@ -1565,7 +1567,7 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n+        if \"hue\" not in kwargs and self._hue_var is not None:\n             kwargs.update({\n                 \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n             })\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..6304fcf 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -604,7 +604,10 @@ class PairGrid(Grid):\n         if despine:\n             utils.despine(fig=fig)\n         self.tight_layout(pad=layout_pad)\n-    def map(self, func, **kwargs):\n+    def map(self, func, hue=None, **kwargs):\n+        if hue is not None:\n+            kwargs['hue'] = hue\n+        'Plot with the same function in every subplot.\\n\\n        Parameters\\n        ----------\\n        func : callable plotting function\\n            Must take x, y arrays as positional arguments and draw onto the\\n            \"currently active\" matplotlib Axes. Also needs to accept kwargs\\n            called ``color`` and  ``label``.\\n\\n        '\n         row_indices, col_indices = np.indices(self.axes.shape)\n         indices = zip(row_indices.flat, col_indices.flat)\n         self._map_bivariate(func, indices, **kwargs)\n@@ -747,7 +750,7 @@ class PairGrid(Grid):\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n+        if 'hue' not in kwargs and self._hue_var is not None:\n             kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n", "normalized_occurrence": 1}
