{"model_name_or_path": "agentless", "instance_id": "django__django-13590", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex cc286ae..fc0d558 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,10 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            return type(value)(*(\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n-            )\n+            ))\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "occurrence": 16, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 134360d..0be7c46 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -593,7 +593,7 @@ class Query(BaseExpression):\n         if hasattr(value, 'resolve_expression'):\n             value = value.resolve_expression(self, reuse=can_reuse, allow_joins=allow_joins)\n         elif isinstance(value, (list, tuple)):\n-            return type(value)((self.resolve_lookup_value(sub_value, can_reuse, allow_joins) for sub_value in value))\n+            return type(value)(*(self.resolve_lookup_value(sub_value, can_reuse, allow_joins) for sub_value in value))\n         return value\n     def solve_lookup_type(self, lookup):\n         lookup_splitted = lookup.split(LOOKUP_SEP)\n", "normalized_occurrence": 20}
