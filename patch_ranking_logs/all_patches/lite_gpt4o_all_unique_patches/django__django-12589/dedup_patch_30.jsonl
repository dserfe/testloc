{"model_name_or_path": "agentless", "instance_id": "django__django-12589", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 56581f2..d561ea7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -105,7 +105,10 @@ class SQLCompiler:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n-                    expressions.append(expr)\n+                    if hasattr(expr, 'get_group_by_cols'):\n+                        expressions.extend(expr.get_group_by_cols())\n+                    else:\n+                        expressions.append(expr)\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex aa7c887..4175033 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,6 +45,8 @@ class SQLCompiler:\n             for expr in self.query.group_by:\n                 if not hasattr(expr, 'as_sql'):\n                     expressions.append(self.query.resolve_ref(expr))\n+                elif hasattr(expr, 'get_group_by_cols'):\n+                    expressions.extend(expr.get_group_by_cols())\n                 else:\n                     expressions.append(expr)\n         ref_sources = {expr.source for expr in expressions if isinstance(expr, Ref)}\n", "normalized_occurrence": 1}
