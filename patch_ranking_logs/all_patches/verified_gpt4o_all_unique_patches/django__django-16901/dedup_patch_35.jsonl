{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..f34d875 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,7 +72,11 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if isinstance(other, Q):\n+            # Implement XOR logic to ensure correct parity behavior.\n+            combined = (self & ~other) | (~self & other)\n+            return combined\n+        raise TypeError(\"XOR operation requires Q objects\")\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..cf49768 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,10 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if isinstance(other, Q):\n+            combined = self & ~other | ~self & other\n+            return combined\n+        raise TypeError('XOR operation requires Q objects')\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
