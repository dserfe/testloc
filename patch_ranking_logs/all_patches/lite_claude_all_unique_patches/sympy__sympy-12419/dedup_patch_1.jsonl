{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex b4a2caa..6d8db56 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -870,6 +870,17 @@ def eval_sum(f, limits):\n     if f.has(KroneckerDelta) and _has_simple_delta(f, limits[0]):\n         return deltasummation(f, limits)\n \n+    # Special handling for identity matrix element sums\n+    from sympy.matrices.expressions import MatrixElement\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if matrix.is_Identity:\n+            if len(limits) == 1:\n+                # Single sum over diagonal elements\n+                if f.args[1] == f.args[2]:  # i == j\n+                    return matrix.shape[0]\n+            return matrix.shape[0]  # Total sum for identity matrix\n+\n     dif = b - a\n     definite = dif.is_Integer\n     # Doing it directly may be faster if there are very few terms.\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/summations.py b/sympy/concrete/summations.py\nindex 3200d91..102ecf4 100644\n--- a/sympy/concrete/summations.py\n+++ b/sympy/concrete/summations.py\n@@ -343,6 +343,14 @@ def eval_sum(f, limits):\n             return f.func(*newargs)\n     if f.has(KroneckerDelta) and _has_simple_delta(f, limits[0]):\n         return deltasummation(f, limits)\n+    from sympy.matrices.expressions import MatrixElement\n+    if isinstance(f, MatrixElement):\n+        matrix = f.args[0]\n+        if matrix.is_Identity:\n+            if len(limits) == 1:\n+                if f.args[1] == f.args[2]:\n+                    return matrix.shape[0]\n+            return matrix.shape[0]\n     dif = b - a\n     definite = dif.is_Integer\n     if definite and dif < 100:\n", "normalized_occurrence": 1}
