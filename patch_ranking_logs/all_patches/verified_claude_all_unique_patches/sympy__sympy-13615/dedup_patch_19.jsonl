{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..9560b18 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1725,6 +1725,27 @@ class Complement(Set, EvalfMixin):\n         if isinstance(B, Union):\n             return Intersection(s.complement(A) for s in B.args)\n \n+        # For FiniteSet complements, handle numeric and symbolic elements separately\n+        if isinstance(A, FiniteSet):\n+            numeric_elements = [e for e in A.args if not isinstance(e, Symbol)]\n+            symbolic_elements = [e for e in A.args if isinstance(e, Symbol)]\n+            \n+            if numeric_elements and symbolic_elements:\n+                numeric_set = FiniteSet(*numeric_elements)\n+                symbolic_set = FiniteSet(*symbolic_elements)\n+                \n+                # Handle the numeric part\n+                numeric_complement = B._complement(numeric_set)\n+                if numeric_complement == numeric_set:\n+                    # If no simplification possible for numeric part\n+                    return Complement(A, B, evaluate=False)\n+                \n+                # Combine with symbolic elements\n+                if numeric_complement == EmptySet():\n+                    return Complement(symbolic_set, B, evaluate=False)\n+                elif numeric_complement:\n+                    return Union(numeric_complement, Complement(symbolic_set, B, evaluate=False))\n+        \n         result = B._complement(A)\n         if result != None:\n             return result\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..8134b83 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -752,6 +752,19 @@ class Complement(Set, EvalfMixin):\n             return EmptySet()\n         if isinstance(B, Union):\n             return Intersection((s.complement(A) for s in B.args))\n+        if isinstance(A, FiniteSet):\n+            numeric_elements = [e for e in A.args if not isinstance(e, Symbol)]\n+            symbolic_elements = [e for e in A.args if isinstance(e, Symbol)]\n+            if numeric_elements and symbolic_elements:\n+                numeric_set = FiniteSet(*numeric_elements)\n+                symbolic_set = FiniteSet(*symbolic_elements)\n+                numeric_complement = B._complement(numeric_set)\n+                if numeric_complement == numeric_set:\n+                    return Complement(A, B, evaluate=False)\n+                if numeric_complement == EmptySet():\n+                    return Complement(symbolic_set, B, evaluate=False)\n+                elif numeric_complement:\n+                    return Union(numeric_complement, Complement(symbolic_set, B, evaluate=False))\n         result = B._complement(A)\n         if result != None:\n             return result\n", "normalized_occurrence": 1}
