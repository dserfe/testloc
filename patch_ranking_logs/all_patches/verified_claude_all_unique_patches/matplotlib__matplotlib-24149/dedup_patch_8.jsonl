{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 63a9e60..4efebce 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1738,7 +1738,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n                 pass\n             raise RuntimeError(\"matplotlib does not support generators \"\n                                \"as input\")\n-        return next(iter(obj))\n+        try:\n+            return obj[0]  # Try index access first\n+        except (TypeError, IndexError):\n+            return next(iter(obj))  # Fall back to iterator protocol\n     elif isinstance(obj, np.flatiter):\n         # TODO do the finite filtering on this\n         return obj[0]\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex d655165..7140930 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -744,7 +744,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n             except TypeError:\n                 pass\n             raise RuntimeError('matplotlib does not support generators as input')\n-        return next(iter(obj))\n+        try:\n+            return obj[0]\n+        except (TypeError, IndexError):\n+            return next(iter(obj))\n     elif isinstance(obj, np.flatiter):\n         return obj[0]\n     elif isinstance(obj, collections.abc.Iterator):\n", "normalized_occurrence": 1}
