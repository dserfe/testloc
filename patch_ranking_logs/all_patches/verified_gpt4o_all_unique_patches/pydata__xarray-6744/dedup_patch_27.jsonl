{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..d9e65dc 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,9 +270,15 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n+        if self.center[0]:\n+            mid = self.window[0] // 2\n+            stops = np.arange(mid + 1, len(self.window_labels) + mid + 1)\n+            starts = stops - self.window[0]\n+            starts[: self.window[0]] = 0\n+        else:\n+            stops = np.arange(1, len(self.window_labels) + 1)\n+            starts = stops - int(self.window[0])\n+            starts[: int(self.window[0])] = 0\n         for (label, start, stop) in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 870b974..aadc1cb 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -106,9 +106,15 @@ class DataArrayRolling(Rolling['DataArray']):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError('__iter__ is only supported for 1d-rolling')\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[:int(self.window[0])] = 0\n+        if self.center[0]:\n+            mid = self.window[0] // 2\n+            stops = np.arange(mid + 1, len(self.window_labels) + mid + 1)\n+            starts = stops - self.window[0]\n+            starts[:self.window[0]] = 0\n+        else:\n+            stops = np.arange(1, len(self.window_labels) + 1)\n+            starts = stops - int(self.window[0])\n+            starts[:int(self.window[0])] = 0\n         for label, start, stop in zip(self.window_labels, starts, stops):\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n             counts = window.count(dim=self.dim[0])\n", "normalized_occurrence": 1}
