{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..05c791c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -442,6 +442,10 @@ class SQLCompiler:\n                     # already added for all compound queries.\n                     elif not features.supports_slicing_ordering_in_compound:\n                         part_sql = '({})'.format(part_sql)\n+                # Ensure each part is wrapped in a subquery when ordering is present\n+                # and database doesn't support ordering in compounds\n+                elif not features.supports_slicing_ordering_in_compound and self.query.order_by:\n+                    part_sql = 'SELECT * FROM ({})'.format(part_sql)\n                 parts += ((part_sql, part_args),)\n             except EmptyResultSet:\n                 # Omit the empty queryset with UNION and with DIFFERENCE if the\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..d308679 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -249,6 +249,8 @@ class SQLCompiler:\n                         part_sql = 'SELECT * FROM ({})'.format(part_sql)\n                     elif not features.supports_slicing_ordering_in_compound:\n                         part_sql = '({})'.format(part_sql)\n+                elif not features.supports_slicing_ordering_in_compound and self.query.order_by:\n+                    part_sql = 'SELECT * FROM ({})'.format(part_sql)\n                 parts += ((part_sql, part_args),)\n             except EmptyResultSet:\n                 if combinator == 'union' or (combinator == 'difference' and parts):\n", "normalized_occurrence": 1}
