{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..438e8fe 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1218,6 +1218,8 @@ reduce these to 2 dimensions using the naxis kwarg.\n                 raise ValueError(\n                     \"Coordinate arrays are not broadcastable to each other\")\n \n+            if all(x.size == 0 for x in axes):\n+                return [np.array([]) for _ in range(len(axes))]\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n \n             if ra_dec_order and sky == 'input':\n@@ -1231,7 +1233,9 @@ reduce these to 2 dimensions using the naxis kwarg.\n                     for i in range(output.shape[1])]\n \n         def _return_single_array(xy, origin):\n-            if xy.shape[-1] != self.naxis:\n+            if xy.size == 0:\n+                return np.array([])\n+            elif xy.shape[-1] != self.naxis:\n                 raise ValueError(\n                     \"When providing two arguments, the array must be \"\n                     \"of shape (N, {0})\".format(self.naxis))\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..0cf8091 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -598,6 +598,8 @@ class WCS(WCSBase):\n                 axes = np.broadcast_arrays(*axes)\n             except ValueError:\n                 raise ValueError('Coordinate arrays are not broadcastable to each other')\n+            if all((x.size == 0 for x in axes)):\n+                return [np.array([]) for _ in range(len(axes))]\n             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n@@ -607,7 +609,9 @@ class WCS(WCSBase):\n                 return (output[:, 0].reshape(axes[0].shape), output[:, 1].reshape(axes[0].shape))\n             return [output[:, i].reshape(axes[0].shape) for i in range(output.shape[1])]\n         def _return_single_array(xy, origin):\n-            if xy.shape[-1] != self.naxis:\n+            if xy.size == 0:\n+                return np.array([])\n+            elif xy.shape[-1] != self.naxis:\n                 raise ValueError('When providing two arguments, the array must be of shape (N, {0})'.format(self.naxis))\n             if ra_dec_order and sky == 'input':\n                 xy = self._denormalize_sky(xy)\n", "normalized_occurrence": 1}
