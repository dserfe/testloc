{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..24ec05a 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -182,6 +182,7 @@ class Text(Artist):\n         self.set_rotation(rotation)\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None  # a FancyBboxPatch instance\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self._renderer = None\n         if linespacing is None:\n             linespacing = 1.2  # Maybe use rcParam later.\n@@ -567,7 +568,20 @@ class Text(Artist):\n         super().set_clip_on(b)\n         self._update_clip_properties()\n \n-    def get_wrap(self):\n+    def get_antialiased(self):\n+        \"\"\"Return whether text is anti-aliased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use anti-aliasing for text.\n+        \n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n         \"\"\"Return whether the text can be wrapped.\"\"\"\n         return self._wrap\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..c858500 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -60,6 +60,7 @@ class Text(Artist):\n         self.set_rotation(rotation)\n         self._transform_rotates_text = transform_rotates_text\n         self._bbox_patch = None\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self._renderer = None\n         if linespacing is None:\n             linespacing = 1.2\n@@ -279,7 +280,11 @@ class Text(Artist):\n     def set_clip_on(self, b):\n         super().set_clip_on(b)\n         self._update_clip_properties()\n-    def get_wrap(self):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         return self._wrap\n     def set_wrap(self, wrap):\n         self._wrap = wrap\n", "normalized_occurrence": 1}
