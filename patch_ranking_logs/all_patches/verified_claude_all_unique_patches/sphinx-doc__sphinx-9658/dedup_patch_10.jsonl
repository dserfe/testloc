{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..60abc2a 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -58,7 +58,9 @@ class _MockObject:\n         return _make_subclass(str(key), self.__display_name__, self.__class__)()\n \n     def __getattr__(self, key: str) -> \"_MockObject\":\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+        mock = _make_subclass(key, self.__display_name__, self.__class__)()\n+        mock.__qualname__ = key\n+        return mock\n \n     def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         call = self.__class__()\n@@ -66,6 +68,8 @@ class _MockObject:\n         return call\n \n     def __repr__(self) -> str:\n+        if hasattr(self, '__qualname__') and self.__qualname__:\n+            return self.__display_name__ + '.' + self.__qualname__\n         return self.__display_name__\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..017a168 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -31,12 +31,16 @@ class _MockObject:\n     def __getitem__(self, key: Any) -> '_MockObject':\n         return _make_subclass(str(key), self.__display_name__, self.__class__)()\n     def __getattr__(self, key: str) -> '_MockObject':\n-        return _make_subclass(key, self.__display_name__, self.__class__)()\n+        mock = _make_subclass(key, self.__display_name__, self.__class__)()\n+        mock.__qualname__ = key\n+        return mock\n     def __call__(self, *args: Any, **kwargs: Any) -> Any:\n         call = self.__class__()\n         call.__sphinx_decorator_args__ = args\n         return call\n     def __repr__(self) -> str:\n+        if hasattr(self, '__qualname__') and self.__qualname__:\n+            return self.__display_name__ + '.' + self.__qualname__\n         return self.__display_name__\n def _make_subclass(name: str, module: str, superclass: Any=_MockObject, attributes: Any=None, decorator_args: Tuple=()) -> Any:\n     attrs = {'__module__': module, '__display_name__': module + '.' + name, '__sphinx_decorator_args__': decorator_args}\n", "normalized_occurrence": 1}
