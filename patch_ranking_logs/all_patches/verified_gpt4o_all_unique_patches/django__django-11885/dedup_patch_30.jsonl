{"model_name_or_path": "agentless", "instance_id": "django__django-11885", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex da91f5e..ebc8c27 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -191,7 +191,13 @@ class Collector:\n         If 'keep_parents' is True, data of parent model's will be not deleted.\n         \"\"\"\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            # Combine fast delete queries by table to reduce roundtrips\n+            model = objs[0].__class__\n+            table_name = model._meta.db_table\n+            if table_name in self.fast_deletes:\n+                self.fast_deletes[table_name].extend(objs)\n+            else:\n+                self.fast_deletes[table_name] = list(objs)\n             return\n         new_objs = self.add(objs, source, nullable,\n                             reverse_dependency=reverse_dependency)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 97cb878..1f7917b 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -80,7 +80,12 @@ class Collector:\n             return [objs]\n     def collect(self, objs, source=None, nullable=False, collect_related=True, source_attr=None, reverse_dependency=False, keep_parents=False):\n         if self.can_fast_delete(objs):\n-            self.fast_deletes.append(objs)\n+            model = objs[0].__class__\n+            table_name = model._meta.db_table\n+            if table_name in self.fast_deletes:\n+                self.fast_deletes[table_name].extend(objs)\n+            else:\n+                self.fast_deletes[table_name] = list(objs)\n             return\n         new_objs = self.add(objs, source, nullable, reverse_dependency=reverse_dependency)\n         if not new_objs:\n", "normalized_occurrence": 1}
