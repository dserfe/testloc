{"model_name_or_path": "agentless", "instance_id": "django__django-12304", "model_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex ab625f8..9830926 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -69,6 +69,19 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n         return str(self.value)\n \n \n+class Choices(enum.Enum, metaclass=ChoicesMeta):\n+    \"\"\"Class for creating enumerated choices.\"\"\"\n+\n+    # Prevent Django templates from calling this class.\n+    do_not_call_in_templates = True\n+\n+    def __str__(self):\n+        \"\"\"\n+        Use value when cast to str, so that Choices set as model instance\n+        attributes are rendered as expected in templates and similar contexts.\n+        \"\"\"\n+        return str(self.value)\n+\n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n     pass\n@@ -78,4 +91,4 @@ class TextChoices(str, Choices):\n     \"\"\"Class for creating enumerated string choices.\"\"\"\n \n     def _generate_next_value_(name, start, count, last_values):\n-        return name\n+        return name\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex e323540..9191011 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -38,6 +38,10 @@ class ChoicesMeta(enum.EnumMeta):\n class Choices(enum.Enum, metaclass=ChoicesMeta):\n     def __str__(self):\n         return str(self.value)\n+class Choices(enum.Enum, metaclass=ChoicesMeta):\n+    do_not_call_in_templates = True\n+    def __str__(self):\n+        return str(self.value)\n class IntegerChoices(int, Choices):\n     pass\n class TextChoices(str, Choices):\n", "normalized_occurrence": 1}
