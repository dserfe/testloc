{"model_name_or_path": "agentless", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..dbc64bb 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1927,10 +1927,22 @@ class Query(BaseExpression):\n                 )\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n-        if ordering:\n-            self.order_by += ordering\n-        else:\n-            self.default_ordering = False\n+        for item in ordering:\n+            if isinstance(item, str) and item.startswith('-'):\n+                field_name = item[1:]\n+            else:\n+                field_name = item\n+\n+            if field_name in self.annotations:\n+                continue\n+\n+            if field_name in self.extra:\n+                continue\n+\n+            # Validate the lookup path\n+            self.names_to_path(field_name.split(LOOKUP_SEP), self.model._meta)\n+\n+        self.order_by = ordering or ()\n \n     def clear_ordering(self, force_empty):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..b4bf380 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1028,10 +1028,17 @@ class Query(BaseExpression):\n                 raise FieldError('Using an aggregate in order_by() without also including it in annotate() is not allowed: %s' % item)\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n-        if ordering:\n-            self.order_by += ordering\n-        else:\n-            self.default_ordering = False\n+        for item in ordering:\n+            if isinstance(item, str) and item.startswith('-'):\n+                field_name = item[1:]\n+            else:\n+                field_name = item\n+            if field_name in self.annotations:\n+                continue\n+            if field_name in self.extra:\n+                continue\n+            self.names_to_path(field_name.split(LOOKUP_SEP), self.model._meta)\n+        self.order_by = ordering or ()\n     def clear_ordering(self, force_empty):\n         self.order_by = ()\n         self.extra_order_by = ()\n", "normalized_occurrence": 1}
