{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..c6aa9cc 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -306,6 +306,12 @@ def _separable(transform):\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n+        if transform.op == '&':\n+            # For nested CompoundModels with '&' operator, we need to preserve\n+            # the separability information of each component\n+            left_matrix = _coord_matrix(transform.left, 'left', transform.left.n_outputs)\n+            right_matrix = _coord_matrix(transform.right, 'left', transform.right.n_outputs)\n+            return _operators[transform.op](left_matrix, right_matrix)\n         return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n@@ -314,4 +320,4 @@ def _separable(transform):\n # Maps modeling operators to a function computing and represents the\n # relationship of axes as an array of 0-es and 1-s\n _operators = {'&': _cstack, '|': _cdot, '+': _arith_oper, '-': _arith_oper,\n-              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n+              '*': _arith_oper, '/': _arith_oper, '**': _arith_oper}\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..5a6b404 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -101,6 +101,10 @@ def _separable(transform):\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n+        if transform.op == '&':\n+            left_matrix = _coord_matrix(transform.left, 'left', transform.left.n_outputs)\n+            right_matrix = _coord_matrix(transform.right, 'left', transform.right.n_outputs)\n+            return _operators[transform.op](left_matrix, right_matrix)\n         return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n", "normalized_occurrence": 1}
