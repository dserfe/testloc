{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..d9d0d5b 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2144,6 +2144,9 @@ class SpanSelector(_SelectorWidget):\n         else:\n             trans = ax.get_yaxis_transform()\n             w, h = 1, 0\n+        self.original_xlim = ax.get_xlim()\n+        self.original_ylim = ax.get_ylim()\n+\n         self._rect = Rectangle((0, 0), w, h,\n                                transform=trans,\n                                visible=False,\n@@ -2270,7 +2273,10 @@ class SpanSelector(_SelectorWidget):\n             if vmin > vmax:\n                 vmin, vmax = vmax, vmin\n \n-        self.extents = vmin, vmax\n+        if self._interactive:\n+            self.extents = max(vmin, self.original_xlim[0]), min(vmax, self.original_xlim[1])\n+        else:\n+            self.extents = vmin, vmax\n \n         if self.onmove_callback is not None:\n             self.onmove_callback(vmin, vmax)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..5b95252 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1760,6 +1760,8 @@ class SpanSelector(_SelectorWidget):\n         else:\n             trans = ax.get_yaxis_transform()\n             w, h = (1, 0)\n+        self.original_xlim = ax.get_xlim()\n+        self.original_ylim = ax.get_ylim()\n         self._rect = Rectangle((0, 0), w, h, transform=trans, visible=False, **self._rectprops)\n         self.ax.add_patch(self._rect)\n         if len(self.artists) > 0:\n@@ -1850,7 +1852,10 @@ class SpanSelector(_SelectorWidget):\n             vmin, vmax = (vpress, v)\n             if vmin > vmax:\n                 vmin, vmax = (vmax, vmin)\n-        self.extents = (vmin, vmax)\n+        if self._interactive:\n+            self.extents = (max(vmin, self.original_xlim[0]), min(vmax, self.original_xlim[1]))\n+        else:\n+            self.extents = (vmin, vmax)\n         if self.onmove_callback is not None:\n             self.onmove_callback(vmin, vmax)\n         return False\n", "normalized_occurrence": 1}
