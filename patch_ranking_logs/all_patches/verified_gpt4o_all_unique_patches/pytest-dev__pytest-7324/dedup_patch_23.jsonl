{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..b4952a0 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -28,7 +28,7 @@ def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n         modname, classname = value.split(\":\")\n     except ValueError:\n         raise argparse.ArgumentTypeError(\n-            \"{!r} is not in the format 'modname:classname'\".format(value)\n+            f\"{value!r} is not in the format 'modname:classname'\"\n         )\n     return (modname, classname)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..b544d2b 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -21,7 +21,7 @@ def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n     try:\n         modname, classname = value.split(':')\n     except ValueError:\n-        raise argparse.ArgumentTypeError(\"{!r} is not in the format 'modname:classname'\".format(value))\n+        raise argparse.ArgumentTypeError(f\"{value!r} is not in the format 'modname:classname'\")\n     return (modname, classname)\n def pytest_addoption(parser: Parser) -> None:\n     group = parser.getgroup('general')\n", "normalized_occurrence": 1}
