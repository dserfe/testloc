{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..1f16b8b 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,29 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def add_subparsers(self, **kwargs):\n+        # Keep track of parent parser's settings to propagate them to subparsers\n+        parent_settings = {\n+            'missing_args_message': self.missing_args_message,\n+            'called_from_command_line': self.called_from_command_line,\n+        }\n+        \n+        # Get the subparser action from parent class\n+        subparsers = super().add_subparsers(**kwargs)\n+        \n+        # Store the original add_parser method\n+        original_add_parser = subparsers.add_parser\n+        \n+        # Replace with wrapped version that includes parent settings\n+        def add_parser_with_settings(name, **sub_kwargs):\n+            # Ensure parent parser settings are included but can be overridden\n+            for key, value in parent_settings.items():\n+                sub_kwargs.setdefault(key, value)\n+            return original_add_parser(name, **sub_kwargs)\n+        \n+        subparsers.add_parser = add_parser_with_settings\n+        return subparsers\n+\n \n def handle_default_options(options):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def add_subparsers(self, **kwargs):\n+        parent_settings = {'missing_args_message': self.missing_args_message, 'called_from_command_line': self.called_from_command_line}\n+        subparsers = super().add_subparsers(**kwargs)\n+        original_add_parser = subparsers.add_parser\n+        def add_parser_with_settings(name, **sub_kwargs):\n+            for key, value in parent_settings.items():\n+                sub_kwargs.setdefault(key, value)\n+            return original_add_parser(name, **sub_kwargs)\n+        subparsers.add_parser = add_parser_with_settings\n+        return subparsers", "normalized_occurrence": 1}
