{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..92a669c 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,38 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise\n+        # For symbolic indices, we need to return a piecewise expression\n+        if i.is_number and j.is_number:\n+            # Original logic for numeric indices\n+            row_ind = i\n+            col_ind = j\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if row_ind < numrows:\n+                    break\n+                row_ind -= numrows\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if col_ind < numcols:\n+                    break\n+                col_ind -= numcols\n+            return self.blocks[row_block, col_block][row_ind, col_ind]\n+        else:\n+            # Build piecewise expression for symbolic indices\n+            result = []\n+            row_ind = i\n+            curr_row = 0\n+            # Iterate through row blocks\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                col_ind = j\n+                curr_col = 0\n+                # Iterate through column blocks\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    cond = (i >= curr_row) & (i < curr_row + numrows) & \\\n+                          (j >= curr_col) & (j < curr_col + numcols)\n+                    result.append((self.blocks[row_block, col_block][i - curr_row, j - curr_col], cond))\n+                    curr_col += numcols\n+                curr_row += numrows\n+            return Piecewise(*result)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..53e062a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,32 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n-        for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+        from sympy import Piecewise\n+        if i.is_number and j.is_number:\n+            row_ind = i\n+            col_ind = j\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                if row_ind < numrows:\n+                    break\n+                row_ind -= numrows\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                if col_ind < numcols:\n+                    break\n+                col_ind -= numcols\n+            return self.blocks[row_block, col_block][row_ind, col_ind]\n+        else:\n+            result = []\n+            row_ind = i\n+            curr_row = 0\n+            for row_block, numrows in enumerate(self.rowblocksizes):\n+                col_ind = j\n+                curr_col = 0\n+                for col_block, numcols in enumerate(self.colblocksizes):\n+                    cond = (i >= curr_row) & (i < curr_row + numrows) & (j >= curr_col) & (j < curr_col + numcols)\n+                    result.append((self.blocks[row_block, col_block][i - curr_row, j - curr_col], cond))\n+                    curr_col += numcols\n+                curr_row += numrows\n+            return Piecewise(*result)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
