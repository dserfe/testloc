{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16792", "model_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex 6b78c94..d524a22 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -463,8 +463,10 @@ setup(ext_modules=cythonize(ext_mods, **cy_opts))\n             return \"<{0}*> {1}.data\".format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return \"&{0}\".format(self._string_var(arg.name))\n-        else:\n+        elif not isinstance(arg, ResultBase):\n             return self._string_var(arg.name)\n+        else:\n+            return arg.get_datatype('c') + \" \" + self._string_var(arg.name)\n \n     def _string_var(self, var):\n         printer = self.generator.printer.doprint\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py\nindex da40c47..d7e93ce 100644\n--- a/sympy/utilities/autowrap.py\n+++ b/sympy/utilities/autowrap.py\n@@ -214,8 +214,10 @@ class CythonCodeWrapper(CodeWrapper):\n             return '<{0}*> {1}.data'.format(t, self._string_var(arg.name))\n         elif isinstance(arg, ResultBase):\n             return '&{0}'.format(self._string_var(arg.name))\n-        else:\n+        elif not isinstance(arg, ResultBase):\n             return self._string_var(arg.name)\n+        else:\n+            return arg.get_datatype('c') + ' ' + self._string_var(arg.name)\n     def _string_var(self, var):\n         printer = self.generator.printer.doprint\n         return printer(var)\n", "normalized_occurrence": 1}
