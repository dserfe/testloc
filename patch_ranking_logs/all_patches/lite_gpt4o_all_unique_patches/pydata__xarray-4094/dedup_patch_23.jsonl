{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..ef9f6cd 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3440,7 +3440,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         Dimensions without coordinates: x\n \n         \"\"\"\n-        stacking_dims = tuple(dim for dim in self.dims if dim not in sample_dims)\n+        stacking_dims = tuple(dim for dim in self.dims if dim not in sample_dims and any(dim in self[var].dims for var in self.data_vars))\n \n         for variable in self:\n             dims = self[variable].dims\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..072ddf5 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1139,7 +1139,7 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             result = result._stack_once(dims, new_dim)\n         return result\n     def to_stacked_array(self, new_dim: Hashable, sample_dims: Sequence[Hashable], variable_dim: str='variable', name: Hashable=None) -> 'DataArray':\n-        stacking_dims = tuple((dim for dim in self.dims if dim not in sample_dims))\n+        stacking_dims = tuple((dim for dim in self.dims if dim not in sample_dims and any((dim in self[var].dims for var in self.data_vars))))\n         for variable in self:\n             dims = self[variable].dims\n             dims_include_sample_dims = set(sample_dims) <= set(dims)\n", "normalized_occurrence": 1}
