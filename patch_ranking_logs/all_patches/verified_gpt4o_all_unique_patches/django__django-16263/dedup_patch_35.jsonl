{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..e8169c0 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,17 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # Remove all annotations that are not used in filters, other annotations, or ordering.\n+        if obj.annotations:\n+            annotations_to_keep = set()\n+            if obj.where:\n+                annotations_to_keep.update(obj.where.get_annotated_dependencies())\n+            if obj.order_by:\n+                annotations_to_keep.update(part[0] for part in obj.order_by if isinstance(part[0], str))\n+            if obj.group_by:\n+                annotations_to_keep.update(obj.group_by)\n+\n+            obj.annotations = {k: v for k, v in obj.annotations.items() if k in annotations_to_keep}\n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..a43b2a3 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,15 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        if obj.annotations:\n+            annotations_to_keep = set()\n+            if obj.where:\n+                annotations_to_keep.update(obj.where.get_annotated_dependencies())\n+            if obj.order_by:\n+                annotations_to_keep.update((part[0] for part in obj.order_by if isinstance(part[0], str)))\n+            if obj.group_by:\n+                annotations_to_keep.update(obj.group_by)\n+            obj.annotations = {k: v for k, v in obj.annotations.items() if k in annotations_to_keep}\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
