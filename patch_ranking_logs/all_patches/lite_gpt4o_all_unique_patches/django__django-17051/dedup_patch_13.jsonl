{"model_name_or_path": "agentless", "instance_id": "django__django-17051", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..a539831 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1772,22 +1772,17 @@ class SQLInsertCompiler(SQLCompiler):\n             (f.column for f in self.query.update_fields),\n             (f.column for f in self.query.unique_fields),\n         )\n-        if (\n-            self.returning_fields\n-            and self.connection.features.can_return_columns_from_insert\n+        if self.returning_fields and (\n+            self.connection.features.can_return_columns_from_insert or on_conflict_suffix_sql\n         ):\n             if self.connection.features.can_return_rows_from_bulk_insert:\n-                result.append(\n-                    self.connection.ops.bulk_insert_sql(fields, placeholder_rows)\n-                )\n+                result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n                 params = param_rows\n             else:\n                 result.append(\"VALUES (%s)\" % \", \".join(placeholder_rows[0]))\n                 params = [param_rows[0]]\n             if on_conflict_suffix_sql:\n                 result.append(on_conflict_suffix_sql)\n-            # Skip empty r_sql to allow subclasses to customize behavior for\n-            # 3rd party backends. Refs #19096.\n             r_sql, self.returning_params = self.connection.ops.return_insert_columns(\n                 self.returning_fields\n             )\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..11de0d6 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -875,7 +875,7 @@ class SQLInsertCompiler(SQLCompiler):\n         can_bulk = not self.returning_fields and self.connection.features.has_bulk_insert\n         placeholder_rows, param_rows = self.assemble_as_sql(fields, value_rows)\n         on_conflict_suffix_sql = self.connection.ops.on_conflict_suffix_sql(fields, self.query.on_conflict, (f.column for f in self.query.update_fields), (f.column for f in self.query.unique_fields))\n-        if self.returning_fields and self.connection.features.can_return_columns_from_insert:\n+        if self.returning_fields and (self.connection.features.can_return_columns_from_insert or on_conflict_suffix_sql):\n             if self.connection.features.can_return_rows_from_bulk_insert:\n                 result.append(self.connection.ops.bulk_insert_sql(fields, placeholder_rows))\n                 params = param_rows\n", "normalized_occurrence": 1}
