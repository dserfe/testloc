{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..9ec5d96 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -300,7 +300,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             )\n             if trans not in {\"passthrough\", \"drop\"}\n         )\n-        for trans in transformers:\n+        remainder_transformer = (\n+            [self.remainder] if self.remainder not in {\"passthrough\", \"drop\"} else []\n+        )\n+\n+        for trans in chain(transformers, remainder_transformer):\n             _safe_set_output(trans, transform=transform)\n \n         return self\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..05aa514 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -45,7 +45,8 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n     def set_output(self, *, transform=None):\n         super().set_output(transform=transform)\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n-        for trans in transformers:\n+        remainder_transformer = [self.remainder] if self.remainder not in {'passthrough', 'drop'} else []\n+        for trans in chain(transformers, remainder_transformer):\n             _safe_set_output(trans, transform=transform)\n         return self\n     def get_params(self, deep=True):\n", "normalized_occurrence": 1}
