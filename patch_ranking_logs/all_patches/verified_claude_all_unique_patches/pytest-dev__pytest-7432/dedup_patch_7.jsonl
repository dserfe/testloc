{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7432", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 1e94c70..8c5746e 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -270,8 +270,42 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n-    elif item.config.option.runxfail:\n-        pass  # don't interfere\n+    # Handle xfail cases\n+    if item.config.option.runxfail:\n+        pass  # don't interfere with xfail handling\n+    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+        assert call.excinfo.value.msg is not None\n+        rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n+        rep.outcome = \"skipped\"\n+    elif not rep.skipped and xfailed:\n+        if call.excinfo:\n+            raises = xfailed.raises\n+            if raises is not None and not isinstance(call.excinfo.value, raises):\n+                rep.outcome = \"failed\"\n+            else:\n+                rep.outcome = \"skipped\"\n+                rep.wasxfail = xfailed.reason\n+        elif call.when == \"call\":\n+            if xfailed.strict:\n+                rep.outcome = \"failed\"\n+                rep.longrepr = \"[XPASS(strict)] \" + xfailed.reason\n+            else:\n+                rep.outcome = \"passed\"\n+                rep.wasxfail = xfailed.reason\n+\n+    # Handle skip location reporting - moved outside xfail conditions\n+    if (\n+        item._store.get(skipped_by_mark_key, True)\n+        and rep.skipped\n+        and type(rep.longrepr) is tuple\n+    ):\n+        # skipped by mark.skipif; change the location of the failure\n+        # to point to the item definition, otherwise it will display\n+        # the location of where the skip exception was raised within pytest\n+        _, _, reason = rep.longrepr\n+        filename, line = item.reportinfo()[:2]\n+        assert line is not None\n+        rep.longrepr = str(filename), line + 1, reason\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n@@ -311,4 +345,4 @@ def pytest_report_teststatus(report: BaseReport) -> Optional[Tuple[str, str, str\n             return \"xfailed\", \"x\", \"XFAIL\"\n         elif report.passed:\n             return \"xpassed\", \"X\", \"XPASS\"\n-    return None\n+    return None\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 5f70c26..efc3ed8 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -148,7 +148,7 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n         else:\n             rep.longrepr = 'Unexpected success'\n         rep.outcome = 'failed'\n-    elif item.config.option.runxfail:\n+    if item.config.option.runxfail:\n         pass\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n@@ -169,6 +169,30 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             else:\n                 rep.outcome = 'passed'\n                 rep.wasxfail = xfailed.reason\n+    if item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n+        _, _, reason = rep.longrepr\n+        filename, line = item.reportinfo()[:2]\n+        assert line is not None\n+        rep.longrepr = (str(filename), line + 1, reason)\n+    elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n+        assert call.excinfo.value.msg is not None\n+        rep.wasxfail = 'reason: ' + call.excinfo.value.msg\n+        rep.outcome = 'skipped'\n+    elif not rep.skipped and xfailed:\n+        if call.excinfo:\n+            raises = xfailed.raises\n+            if raises is not None and (not isinstance(call.excinfo.value, raises)):\n+                rep.outcome = 'failed'\n+            else:\n+                rep.outcome = 'skipped'\n+                rep.wasxfail = xfailed.reason\n+        elif call.when == 'call':\n+            if xfailed.strict:\n+                rep.outcome = 'failed'\n+                rep.longrepr = '[XPASS(strict)] ' + xfailed.reason\n+            else:\n+                rep.outcome = 'passed'\n+                rep.wasxfail = xfailed.reason\n     elif item._store.get(skipped_by_mark_key, True) and rep.skipped and (type(rep.longrepr) is tuple):\n         _, _, reason = rep.longrepr\n         filename, line = item.reportinfo()[:2]\n", "normalized_occurrence": 1}
