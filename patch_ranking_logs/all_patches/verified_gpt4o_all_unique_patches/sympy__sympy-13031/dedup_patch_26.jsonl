{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13031", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex a79ab56..f17a5c6 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -54,6 +54,8 @@ class BlockMatrix(MatrixExpr):\n \n     @property\n     def shape(self):\n+        if not self.args:\n+            return (0, 0)\n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n@@ -218,6 +220,8 @@ class BlockDiagMatrix(BlockMatrix):\n     @property\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n+        if not self.args:\n+            return ImmutableDenseMatrix.zeros(0, 0)\n         mats = self.args\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols)\n                         for j in range(len(mats))]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex e9f8bf4..a16e22e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -24,6 +24,8 @@ class BlockMatrix(MatrixExpr):\n         return obj\n     @property\n     def shape(self):\n+        if not self.args:\n+            return (0, 0)\n         numrows = numcols = 0\n         M = self.blocks\n         for i in range(M.shape[0]):\n@@ -119,6 +121,8 @@ class BlockDiagMatrix(BlockMatrix):\n     @property\n     def blocks(self):\n         from sympy.matrices.immutable import ImmutableDenseMatrix\n+        if not self.args:\n+            return ImmutableDenseMatrix.zeros(0, 0)\n         mats = self.args\n         data = [[mats[i] if i == j else ZeroMatrix(mats[i].rows, mats[j].cols) for j in range(len(mats))] for i in range(len(mats))]\n         return ImmutableDenseMatrix(data)\n", "normalized_occurrence": 1}
