{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7910", "model_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex f48faa1..6c05ad5 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -127,7 +127,7 @@ def unwrap(obj: Any) -> Any:\n         return obj\n \n \n-def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n+def unwrap_all(obj: Any, *, stop: Callable = None, max_depth: int = 10) -> Any:\n     \"\"\"\n     Get an original object from wrapped object (unwrapping partials, wrapped\n     functions, and other decorators).\n@@ -137,8 +137,8 @@ def unwrap_all(obj: Any, *, stop: Callable = None) -> Any:\n             return obj\n         elif ispartial(obj):\n             obj = obj.func\n-        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__'):\n-            obj = obj.__wrapped__\n+        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__') and max_depth > 0:\n+            obj = unwrap_all(obj.__wrapped__, stop=stop, max_depth=max_depth-1)\n         elif isclassmethod(obj):\n             obj = obj.__func__\n         elif isstaticmethod(obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py\nindex 6e5e6c6..fb5dfc3 100644\n--- a/sphinx/util/inspect.py\n+++ b/sphinx/util/inspect.py\n@@ -69,14 +69,14 @@ def unwrap(obj: Any) -> Any:\n         return inspect.unwrap(obj)\n     except ValueError:\n         return obj\n-def unwrap_all(obj: Any, *, stop: Callable=None) -> Any:\n+def unwrap_all(obj: Any, *, stop: Callable=None, max_depth: int=10) -> Any:\n     while True:\n         if stop and stop(obj):\n             return obj\n         elif ispartial(obj):\n             obj = obj.func\n-        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__'):\n-            obj = obj.__wrapped__\n+        elif inspect.isroutine(obj) and hasattr(obj, '__wrapped__') and (max_depth > 0):\n+            obj = unwrap_all(obj.__wrapped__, stop=stop, max_depth=max_depth - 1)\n         elif isclassmethod(obj):\n             obj = obj.__func__\n         elif isstaticmethod(obj):\n", "normalized_occurrence": 1}
