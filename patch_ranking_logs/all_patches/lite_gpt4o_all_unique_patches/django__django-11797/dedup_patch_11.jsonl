{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..7d761f3 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -50,10 +50,10 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, with_col_aliases=True)\n         return extra_select, order_by, group_by\n \n-    def get_group_by(self, select, order_by):\n+    def get_group_by(self, select, order_by, with_col_aliases=False):\n         \"\"\"\n         Return a list of 2-tuples of form (sql, params).\n \n@@ -107,7 +107,10 @@ class SQLCompiler:\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n-        for expr, _, _ in select:\n+        for expr, _, col_alias in select:\n+            if with_col_aliases and col_alias is not None:\n+                expressions.append(self.query.resolve_ref(col_alias))\n+                continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..c1e7e6a 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -33,9 +33,9 @@ class SQLCompiler:\n         self.where, self.having = self.query.where.split_having()\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n-        group_by = self.get_group_by(self.select + extra_select, order_by)\n+        group_by = self.get_group_by(self.select + extra_select, order_by, with_col_aliases=True)\n         return (extra_select, order_by, group_by)\n-    def get_group_by(self, select, order_by):\n+    def get_group_by(self, select, order_by, with_col_aliases=False):\n         if self.query.group_by is None:\n             return []\n         expressions = []\n@@ -45,7 +45,10 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        for expr, _, _ in select:\n+        for expr, _, col_alias in select:\n+            if with_col_aliases and col_alias is not None:\n+                expressions.append(self.query.resolve_ref(col_alias))\n+                continue\n             cols = expr.get_group_by_cols()\n             for col in cols:\n                 expressions.append(col)\n", "normalized_occurrence": 1}
