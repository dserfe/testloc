{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..9268d2b 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1933,23 +1933,25 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted(m for m in self.args if m.is_number)\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n-                # Reals cannot contain elements other than numbers and symbols.\n-\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if other == S.Reals:\n+                # Handle pure symbolic case\n+                if nums == []:\n+                    if syms:\n+                        return Complement(S.Reals, FiniteSet(*syms), evaluate=False)\n+                    return S.Reals\n+                # Handle mixed case and pure numeric case\n                 intervals = []  # Build up a list of intervals between the elements\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n                     intervals.append(Interval(a, b, True, True))  # both open\n                 intervals.append(Interval(nums[-1], S.Infinity, True, True))\n \n-                if syms != []:\n+                if syms:\n                     return Complement(Union(intervals, evaluate=False),\n                             FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..c094a9c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -842,19 +842,21 @@ class FiniteSet(Set, EvalfMixin):\n     def _complement(self, other):\n         if isinstance(other, Interval):\n             nums = sorted((m for m in self.args if m.is_number))\n-            if other == S.Reals and nums != []:\n-                syms = [m for m in self.args if m.is_Symbol]\n+            syms = [m for m in self.args if m.is_Symbol]\n+            if other == S.Reals:\n+                if nums == []:\n+                    if syms:\n+                        return Complement(S.Reals, FiniteSet(*syms), evaluate=False)\n+                    return S.Reals\n                 intervals = []\n                 intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n                 for a, b in zip(nums[:-1], nums[1:]):\n                     intervals.append(Interval(a, b, True, True))\n                 intervals.append(Interval(nums[-1], S.Infinity, True, True))\n-                if syms != []:\n+                if syms:\n                     return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
