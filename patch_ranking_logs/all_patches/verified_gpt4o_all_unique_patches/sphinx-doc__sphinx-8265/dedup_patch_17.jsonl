{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8265", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0e8e503..e78f5d5 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1216,6 +1216,8 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n             sig = inspect.signature(self.object, follow_wrapped=True,\n                                     type_aliases=self.env.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n+            # Ensure that tuple arguments like color=(1, 1, 1) are properly formatted\n+            args = re.sub(r'(\\(.*?\\))', r'(\\1)', args)\n         except TypeError as exc:\n             logger.warning(__(\"Failed to get a function signature for %s: %s\"),\n                            self.fullname, exc)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 0ae2e22..f925f8f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -895,6 +895,7 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, follow_wrapped=True, type_aliases=self.env.config.autodoc_type_aliases)\n             args = stringify_signature(sig, **kwargs)\n+            args = re.sub('(\\\\(.*?\\\\))', '(\\\\1)', args)\n         except TypeError as exc:\n             logger.warning(__('Failed to get a function signature for %s: %s'), self.fullname, exc)\n             return None\n", "normalized_occurrence": 1}
