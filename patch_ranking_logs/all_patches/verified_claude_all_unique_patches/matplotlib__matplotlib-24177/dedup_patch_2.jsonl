{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..3931a0c 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6849,6 +6849,13 @@ such objects\n             # overriding this\n             fill = (histtype == 'stepfilled')\n \n+            # For step histograms, normalize by bin width here since it wasn't done\n+            # in the histogram computation\n+            if density and not stacked:\n+                db = np.diff(bins)\n+                for i in range(len(tops)):\n+                    tops[i] = tops[i] / db / tops[i].sum()\n+\n             xvals, yvals = [], []\n             for m in tops:\n                 if stacked:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..e211673 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2023,6 +2023,10 @@ class Axes(_AxesBase):\n             elif align == 'right':\n                 x += 0.5 * (bins[1] - bins[0])\n             fill = histtype == 'stepfilled'\n+            if density and (not stacked):\n+                db = np.diff(bins)\n+                for i in range(len(tops)):\n+                    tops[i] = tops[i] / db / tops[i].sum()\n             xvals, yvals = ([], [])\n             for m in tops:\n                 if stacked:\n", "normalized_occurrence": 1}
