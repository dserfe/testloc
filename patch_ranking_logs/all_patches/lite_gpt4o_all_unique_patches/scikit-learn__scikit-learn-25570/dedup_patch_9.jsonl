{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..67ca7f9 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -392,7 +392,12 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 elif trans == \"drop\":\n                     continue\n                 elif _is_empty_column_selection(columns):\n-                    continue\n+                    # Skip transformers that apply to zero features\n+                    if output_config[\"dense\"]:\n+                        continue\n+                    else:\n+                        Xs.append(pd.DataFrame(columns=[], index=np.arange(X.shape[0])))\n+                        continue\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..6f38f38 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -75,7 +75,11 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 elif trans == 'drop':\n                     continue\n                 elif _is_empty_column_selection(columns):\n-                    continue\n+                    if output_config['dense']:\n+                        continue\n+                    else:\n+                        Xs.append(pd.DataFrame(columns=[], index=np.arange(X.shape[0])))\n+                        continue\n             if column_as_strings:\n                 columns_is_scalar = np.isscalar(columns)\n                 indices = self._transformer_to_input_indices[name]\n", "normalized_occurrence": 1}
