{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..166dd24 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -57,7 +57,7 @@ class ExprCondPair(Tuple):\n     def _eval_simplify(self, **kwargs):\n         return self.func(*[a.simplify(**kwargs) for a in self.args])\n \n-class Piecewise(Function):\n+class Piecewise(Expr):\n     \"\"\"\n     Represents a piecewise function.\n \n@@ -117,7 +117,7 @@ class Piecewise(Function):\n     nargs = None\n     is_Piecewise = True\n \n-    def __new__(cls, *args, **options):\n+    def __new__(cls, *args, evaluate=True, **options):\n         if len(args) == 0:\n             raise TypeError(\"At least one (expr, cond) pair expected.\")\n         # (Try to) sympify args first\n@@ -799,7 +799,9 @@ class Piecewise(Function):\n \n     def _eval_nseries(self, x, n, logx, cdir=0):\n         args = [(ec.expr._eval_nseries(x, n, logx), ec.cond) for ec in self.args]\n-        return self.func(*args)\n+        if not args_exist:\n+            return self.func(*args)\n+        return Expr._subs(self, old, new)\n \n     def _eval_power(self, s):\n         return self.func(*[(e**s, c) for e, c in self.args])\n@@ -822,7 +824,9 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        if not args_exist:\n+            return self.func(*args)\n+        return Expr._subs(self, old, new)\n \n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..fff78ce 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -35,10 +35,10 @@ class ExprCondPair(Tuple):\n         yield self.cond\n     def _eval_simplify(self, **kwargs):\n         return self.func(*[a.simplify(**kwargs) for a in self.args])\n-class Piecewise(Function):\n+class Piecewise(Expr):\n     nargs = None\n     is_Piecewise = True\n-    def __new__(cls, *args, **options):\n+    def __new__(cls, *args, evaluate=True, **options):\n         if len(args) == 0:\n             raise TypeError('At least one (expr, cond) pair expected.')\n         newargs = []\n@@ -437,7 +437,9 @@ class Piecewise(Function):\n         return list(uniq(int_expr))\n     def _eval_nseries(self, x, n, logx, cdir=0):\n         args = [(ec.expr._eval_nseries(x, n, logx), ec.cond) for ec in self.args]\n-        return self.func(*args)\n+        if not args_exist:\n+            return self.func(*args)\n+        return Expr._subs(self, old, new)\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n@@ -453,7 +455,9 @@ class Piecewise(Function):\n                 break\n         if not args_exist:\n             args = ((Undefined, True),)\n-        return self.func(*args)\n+        if not args_exist:\n+            return self.func(*args)\n+        return Expr._subs(self, old, new)\n     def _eval_transpose(self):\n         return self.func(*[(e.transpose(), c) for e, c in self.args])\n     def _eval_template_is_attr(self, is_attr):\n", "normalized_occurrence": 1}
