{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..fd2a5c7 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -852,7 +852,12 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config(\"transform\", self)\n             if config[\"dense\"] == \"pandas\" and all(hasattr(X, \"iloc\") for X in Xs):\n                 pd = check_pandas_support(\"transform\")\n-                output = pd.concat(Xs, axis=1)\n+                # Filter out empty DataFrames before concatenation\n+                non_empty_Xs = [X for X in Xs if X.shape[1] > 0]\n+                if not non_empty_Xs:\n+                    # Return empty DataFrame if all transformers were empty\n+                    return pd.DataFrame()\n+                output = pd.concat(non_empty_Xs, axis=1)\n \n                 # If all transformers define `get_feature_names_out`, then transform\n                 # will adjust the column names to be consistent with\n@@ -862,10 +867,15 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                # Only include non-empty transformers\n+                transformer_feature_pairs = [\n+                    (t[0], X.columns)\n+                    for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs)\n+                    if X.shape[1] > 0\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                if not transformer_feature_pairs:\n+                    return output\n+                transformer_names, feature_names_outs = zip(*transformer_feature_pairs)\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..488b194 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -254,11 +254,16 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             config = _get_output_config('transform', self)\n             if config['dense'] == 'pandas' and all((hasattr(X, 'iloc') for X in Xs)):\n                 pd = check_pandas_support('transform')\n-                output = pd.concat(Xs, axis=1)\n+                non_empty_Xs = [X for X in Xs if X.shape[1] > 0]\n+                if not non_empty_Xs:\n+                    return pd.DataFrame()\n+                output = pd.concat(non_empty_Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n+                transformer_feature_pairs = [(t[0], X.columns) for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs) if X.shape[1] > 0]\n+                if not transformer_feature_pairs:\n+                    return output\n+                transformer_names, feature_names_outs = zip(*transformer_feature_pairs)\n                 names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n                 output.columns = names_out\n                 return output\n", "normalized_occurrence": 1}
