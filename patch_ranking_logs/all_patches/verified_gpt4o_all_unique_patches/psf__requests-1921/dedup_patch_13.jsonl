{"model_name_or_path": "agentless", "instance_id": "psf__requests-1921", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 4ec0f7c..a29c485 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -248,6 +248,17 @@ class Session(SessionRedirectMixin):\n \n         # Default connection adapters.\n         self.adapters = OrderedDict()\n+\n+    def _merge_headers(self, request_headers):\n+        \"\"\"Merge session headers with request headers, removing any that are None.\"\"\"\n+        merged_headers = CaseInsensitiveDict(self.headers)\n+        for key, value in request_headers.items():\n+            if value is None:\n+                if key in merged_headers:\n+                    del merged_headers[key]\n+            else:\n+                merged_headers[key] = value\n+        return merged_headers\n         self.mount('https://', HTTPAdapter())\n         self.mount('http://', HTTPAdapter())\n \n@@ -288,7 +299,7 @@ class Session(SessionRedirectMixin):\n             url=request.url,\n             files=request.files,\n             data=request.data,\n-            headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict),\n+            headers=self._merge_headers(request.headers),\n             params=merge_setting(request.params, self.params),\n             auth=merge_setting(auth, self.auth),\n             cookies=merged_cookies,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 1467bfc..f500abd 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -98,6 +98,15 @@ class Session(SessionRedirectMixin):\n         self.trust_env = True\n         self.cookies = cookiejar_from_dict({})\n         self.adapters = OrderedDict()\n+    def _merge_headers(self, request_headers):\n+        merged_headers = CaseInsensitiveDict(self.headers)\n+        for key, value in request_headers.items():\n+            if value is None:\n+                if key in merged_headers:\n+                    del merged_headers[key]\n+            else:\n+                merged_headers[key] = value\n+        return merged_headers\n         self.mount('https://', HTTPAdapter())\n         self.mount('http://', HTTPAdapter())\n     def __enter__(self):\n@@ -113,7 +122,7 @@ class Session(SessionRedirectMixin):\n         if self.trust_env and (not auth) and (not self.auth):\n             auth = get_netrc_auth(request.url)\n         p = PreparedRequest()\n-        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n+        p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=self._merge_headers(request.headers), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_hooks(request.hooks, self.hooks))\n         return p\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):\n         method = builtin_str(method)\n", "normalized_occurrence": 1}
