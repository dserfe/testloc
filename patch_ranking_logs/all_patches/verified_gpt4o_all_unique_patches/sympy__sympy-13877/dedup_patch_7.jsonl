{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..40dab67 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -170,10 +170,13 @@ class MatrixDeterminant(MatrixCommon):\n         minimal number of fractions. It means that less term\n         rewriting is needed on resulting formulae.\n \n-        TODO: Implement algorithm for sparse matrices (SFF),\n-        http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\n+        For matrices with symbolic entries, uses the Berkowitz algorithm\n+        instead to avoid numerical issues.\n         \"\"\"\n \n+        if any(isinstance(e, Symbol) for e in self):\n+            return self._eval_det_berkowitz()\n+\n         # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\n         def _find_pivot(l):\n             for pos,val in enumerate(l):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..a115924 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -63,6 +63,8 @@ class MatrixDeterminant(MatrixCommon):\n         submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()\n         return toeplitz * submat._eval_berkowitz_vector()\n     def _eval_det_bareiss(self):\n+        if any((isinstance(e, Symbol) for e in self)):\n+            return self._eval_det_berkowitz()\n         def _find_pivot(l):\n             for pos, val in enumerate(l):\n                 if val:\n", "normalized_occurrence": 1}
