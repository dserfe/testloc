{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..fd15a5c 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -508,9 +508,25 @@ def trigsimp(expr, **opts):\n         'combined': (lambda x: futrig(groebnersimp(x,\n                                polynomial=True, hints=[2, tan]))),\n         'old': lambda x: trigsimp_old(x, **opts),\n+        'exp_to_sin': lambda x: exp_to_sin(x),\n+        'exp_to_sinc': lambda x: exp_to_sinc(x),\n                    }[method]\n \n-    return trigsimpfunc(expr)\n+    if method == 'exp_to_sin':\n+        return exp_to_sin(expr)\n+    elif method == 'exp_to_sinc':\n+        return exp_to_sinc(expr)\n+    else:\n+        return trigsimpfunc(expr)\n+\n+def exp_to_sin(expr):\n+    from sympy import exp, I, sin\n+    return expr.replace(exp(I * expr), sin(expr))\n+\n+def exp_to_sinc(expr):\n+    from sympy import exp, I, sin, sinc\n+    expr = expr.replace(exp(I * expr), sin(expr))\n+    return expr / expr.args[1] if expr.args[1] != 0 else expr\n \n \n def exptrigsimp(expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..5ab93c4 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -170,8 +170,20 @@ def trigsimp(expr, **opts):\n         if not isinstance(new, Expr):\n             return new\n         return trigsimp_groebner(new, **opts)\n-    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts)}[method]\n-    return trigsimpfunc(expr)\n+    trigsimpfunc = {'fu': lambda x: fu(x, **opts), 'matching': lambda x: futrig(x), 'groebner': lambda x: groebnersimp(x, **opts), 'combined': lambda x: futrig(groebnersimp(x, polynomial=True, hints=[2, tan])), 'old': lambda x: trigsimp_old(x, **opts), 'exp_to_sin': lambda x: exp_to_sin(x), 'exp_to_sinc': lambda x: exp_to_sinc(x)}[method]\n+    if method == 'exp_to_sin':\n+        return exp_to_sin(expr)\n+    elif method == 'exp_to_sinc':\n+        return exp_to_sinc(expr)\n+    else:\n+        return trigsimpfunc(expr)\n+def exp_to_sin(expr):\n+    from sympy import exp, I, sin\n+    return expr.replace(exp(I * expr), sin(expr))\n+def exp_to_sinc(expr):\n+    from sympy import exp, I, sin, sinc\n+    expr = expr.replace(exp(I * expr), sin(expr))\n+    return expr / expr.args[1] if expr.args[1] != 0 else expr\n def exptrigsimp(expr):\n     from sympy.simplify.fu import hyper_as_trig, TR2i\n     from sympy.simplify.simplify import bottom_up\n", "normalized_occurrence": 1}
