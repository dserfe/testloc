{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..2bbf670 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2661,7 +2661,14 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        # Check both regular properties and class properties\n+        is_property = inspect.isproperty(member)\n+        # For class properties, we need to check the actual descriptor\n+        if hasattr(parent.object, membername):\n+            parent_member = getattr(parent.object, membername)\n+            if isinstance(parent_member, property):\n+                is_property = True\n+        return is_property and isinstance(parent, ClassDocumenter)\n \n     def document_members(self, all_members: bool = False) -> None:\n         pass\n@@ -2675,6 +2682,11 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):  #\n         sourcename = self.get_sourcename()\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n+        # Add classmethod directive if it's a class property\n+        if hasattr(self.parent.object, self.object_name):\n+            parent_member = getattr(self.parent.object, self.object_name)\n+            if isinstance(parent_member, property) and inspect.isclass(self.parent.object):\n+                self.add_line('   :classmethod:', sourcename)\n \n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..6d43cba 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1597,7 +1597,12 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n     priority = AttributeDocumenter.priority + 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isproperty(member) and isinstance(parent, ClassDocumenter)\n+        is_property = inspect.isproperty(member)\n+        if hasattr(parent.object, membername):\n+            parent_member = getattr(parent.object, membername)\n+            if isinstance(parent_member, property):\n+                is_property = True\n+        return is_property and isinstance(parent, ClassDocumenter)\n     def document_members(self, all_members: bool=False) -> None:\n         pass\n     def get_real_modname(self) -> str:\n@@ -1608,6 +1613,10 @@ class PropertyDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         sourcename = self.get_sourcename()\n         if inspect.isabstractmethod(self.object):\n             self.add_line('   :abstractmethod:', sourcename)\n+        if hasattr(self.parent.object, self.object_name):\n+            parent_member = getattr(self.parent.object, self.object_name)\n+            if isinstance(parent_member, property) and inspect.isclass(self.parent.object):\n+                self.add_line('   :classmethod:', sourcename)\n         if safe_getattr(self.object, 'fget', None) and self.config.autodoc_typehints != 'none':\n             try:\n                 signature = inspect.signature(self.object.fget, type_aliases=self.config.autodoc_type_aliases)\n", "normalized_occurrence": 1}
