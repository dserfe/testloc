{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10323", "model_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 2bf31d0..8a5f5ee 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -343,8 +343,16 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n-\n+            # Determine the minimum indentation of the existing lines\n+            min_indent = float('inf')\n+            for line in lines:\n+                stripped_line = line.lstrip()\n+                if stripped_line:\n+                    indent = len(line) - len(stripped_line)\n+                    min_indent = min(min_indent, indent)\n+            # Prepend with the appropriate indentation\n+            indent = ' ' * min_indent\n+            lines.insert(0, indent + prepend + '\\n')\n         return lines\n \n     def append_filter(self, lines: List[str], location: Tuple[str, int] = None) -> List[str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/directives/code.py b/sphinx/directives/code.py\nindex 15cdcaf..d83165a 100644\n--- a/sphinx/directives/code.py\n+++ b/sphinx/directives/code.py\n@@ -226,7 +226,14 @@ class LiteralIncludeReader:\n     def prepend_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         prepend = self.options.get('prepend')\n         if prepend:\n-            lines.insert(0, prepend + '\\n')\n+            min_indent = float('inf')\n+            for line in lines:\n+                stripped_line = line.lstrip()\n+                if stripped_line:\n+                    indent = len(line) - len(stripped_line)\n+                    min_indent = min(min_indent, indent)\n+            indent = ' ' * min_indent\n+            lines.insert(0, indent + prepend + '\\n')\n         return lines\n     def append_filter(self, lines: List[str], location: Tuple[str, int]=None) -> List[str]:\n         append = self.options.get('append')\n", "normalized_occurrence": 1}
