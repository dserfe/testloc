{"model_name_or_path": "agentless", "instance_id": "django__django-15499", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 111e13a..868bc05 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -290,6 +290,20 @@ class CreateModel(ModelOperation):\n                         managers=self.managers,\n                     ),\n                 ]\n+        if (\n+            isinstance(operation, AlterModelManagers)\n+            and self.name_lower == operation.name_lower\n+        ):\n+            managers = self.managers + operation.managers\n+            return [\n+                CreateModel(\n+                    self.name,\n+                    fields=self.fields,\n+                    options=self.options,\n+                    bases=self.bases,\n+                    managers=managers,\n+                ),\n+            ]\n         return super().reduce(operation, app_label)\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 184d7a0..01d2ce6 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -112,6 +112,9 @@ class CreateModel(ModelOperation):\n                 if order_with_respect_to == operation.old_name:\n                     options['order_with_respect_to'] = operation.new_name\n                 return [CreateModel(self.name, fields=[(operation.new_name if n == operation.old_name else n, v) for n, v in self.fields], options=options, bases=self.bases, managers=self.managers)]\n+        if isinstance(operation, AlterModelManagers) and self.name_lower == operation.name_lower:\n+            managers = self.managers + operation.managers\n+            return [CreateModel(self.name, fields=self.fields, options=self.options, bases=self.bases, managers=managers)]\n         return super().reduce(operation, app_label)\n class DeleteModel(ModelOperation):\n     def deconstruct(self):\n", "normalized_occurrence": 1}
