{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..a8cbe16 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -990,8 +990,9 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = [\"dictionary\"]\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n-                 transform_n_nonzero_coefs=None, transform_alpha=None,\n+                 transform_n_nonzero_coefs=None, transform_alpha=None, max_iter=1000,\n                  split_sign=False, n_jobs=None, positive_code=False):\n+        self.max_iter = max_iter\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n@@ -1018,6 +1019,27 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n         \"\"\"\n         return self\n \n+    def transform(self, X):\n+        \"\"\"Encode the data as a sparse combination of the dictionary atoms.\n+\n+        Parameters\n+        ----------\n+        X : array of shape (n_samples, n_features)\n+            Data matrix.\n+\n+        Returns\n+        -------\n+        code : array of shape (n_samples, n_components)\n+            The sparse codes.\n+        \"\"\"\n+        return sparse_encode(X, self.components_,\n+                             algorithm=self.transform_algorithm,\n+                             n_nonzero_coefs=self.transform_n_nonzero_coefs,\n+                             alpha=self.transform_alpha,\n+                             max_iter=self.max_iter,\n+                             n_jobs=self.n_jobs,\n+                             positive=self.positive_code)\n+\n \n class DictionaryLearning(BaseEstimator, SparseCodingMixin):\n     \"\"\"Dictionary learning\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..c506243 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -284,11 +284,14 @@ class SparseCodingMixin(TransformerMixin):\n         return code\n class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = ['dictionary']\n-    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False):\n+    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, max_iter=1000, split_sign=False, n_jobs=None, positive_code=False):\n+        self.max_iter = max_iter\n         self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n         self.components_ = dictionary\n     def fit(self, X, y=None):\n         return self\n+    def transform(self, X):\n+        return sparse_encode(X, self.components_, algorithm=self.transform_algorithm, n_nonzero_coefs=self.transform_n_nonzero_coefs, alpha=self.transform_alpha, max_iter=self.max_iter, n_jobs=self.n_jobs, positive=self.positive_code)\n class DictionaryLearning(BaseEstimator, SparseCodingMixin):\n     def __init__(self, n_components=None, alpha=1, max_iter=1000, tol=1e-08, fit_algorithm='lars', transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, n_jobs=None, code_init=None, dict_init=None, verbose=False, split_sign=False, random_state=None, positive_code=False, positive_dict=False):\n         self._set_sparse_coding_params(n_components, transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n", "normalized_occurrence": 1}
