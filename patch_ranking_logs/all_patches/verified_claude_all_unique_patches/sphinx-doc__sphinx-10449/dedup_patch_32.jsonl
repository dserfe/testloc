{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10449", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 671dde0..cb55450 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -40,6 +40,18 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n     if app.config.autodoc_typehints not in ('both', 'description'):\n         return\n \n+    # Skip return annotation for __init__ methods in classes\n+    if objtype == 'class':\n+        annotations = app.env.temp_data.get('annotations', {})\n+        for child in contentnode:\n+            if isinstance(child, addnodes.desc) and child.get('objtype') == 'method':\n+                fullname = child.get('fullname', '')\n+                if fullname.endswith('.__init__'):\n+                    # Remove return annotation for __init__ method\n+                    method_annotations = annotations.get(fullname, {})\n+                    if 'return' in method_annotations:\n+                        del method_annotations['return']\n+\n     try:\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n         if signature['module']:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 3ffed84..1531ee5 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -28,6 +28,15 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n         return\n     if app.config.autodoc_typehints not in ('both', 'description'):\n         return\n+    if objtype == 'class':\n+        annotations = app.env.temp_data.get('annotations', {})\n+        for child in contentnode:\n+            if isinstance(child, addnodes.desc) and child.get('objtype') == 'method':\n+                fullname = child.get('fullname', '')\n+                if fullname.endswith('.__init__'):\n+                    method_annotations = annotations.get(fullname, {})\n+                    if 'return' in method_annotations:\n+                        del method_annotations['return']\n     try:\n         signature = cast(addnodes.desc_signature, contentnode.parent[0])\n         if signature['module']:\n", "normalized_occurrence": 1}
