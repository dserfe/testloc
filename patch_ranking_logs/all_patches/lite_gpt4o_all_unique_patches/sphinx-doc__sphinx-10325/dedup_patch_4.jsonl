{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..2ebad5b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -110,11 +110,10 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n \n \n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\"\"\"\n     if arg in (None, True):\n-        return 'object'\n-    else:\n-        return arg\n+        return set()\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -1709,8 +1708,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                     logger.warning(__('missing attribute %s in object %s') %\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n-        elif self.options.inherited_members:\n-            return False, list(members.values())\n+        elif self.options.inherited_members is not True:\n+            ignored_classes = self.options.inherited_members or set()\n+            return False, [m for m in members.values() if m.class_ not in ignored_classes]\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..eda2711 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -57,9 +57,8 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n     return {x.strip() for x in arg.split(',') if x.strip()}\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n-        return 'object'\n-    else:\n-        return arg\n+        return set()\n+    return {x.strip() for x in arg.split(',') if x.strip()}\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -979,8 +978,9 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                 else:\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n-        elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+        elif self.options.inherited_members is not True:\n+            ignored_classes = self.options.inherited_members or set()\n+            return (False, [m for m in members.values() if m.class_ not in ignored_classes])\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
