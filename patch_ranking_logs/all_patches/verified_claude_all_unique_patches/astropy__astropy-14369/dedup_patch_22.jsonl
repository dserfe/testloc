{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14369", "model_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 761c4b8..a2d0a2d 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -182,12 +182,23 @@ class CDS(Base):\n         def p_division_of_units(p):\n             \"\"\"\n             division_of_units : DIVISION unit_expression\n-                              | unit_expression DIVISION combined_units\n+                              | unit_expression DIVISION unit_expression\n+                              | unit_expression DIVISION division_of_units\n             \"\"\"\n             if len(p) == 3:\n                 p[0] = p[2] ** -1\n             else:\n-                p[0] = p[1] / p[3]\n+                if len(p) == 4:\n+                    if isinstance(p[3], tuple):\n+                        # Handle chained divisions from right\n+                        p[0] = p[1] / p[3][0]\n+                        for unit in p[3][1:]:\n+                            p[0] = p[0] / unit\n+                    else:\n+                        # Simple division\n+                        p[0] = p[1] / p[3]\n+                        # Convert to tuple for chaining\n+                        p[0] = (p[0],)\n \n         def p_unit_expression(p):\n             \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/units/format/cds.py b/astropy/units/format/cds.py\nindex 829c8ad..f7d86a8 100644\n--- a/astropy/units/format/cds.py\n+++ b/astropy/units/format/cds.py\n@@ -81,8 +81,14 @@ class CDS(Base):\n         def p_division_of_units(p):\n             if len(p) == 3:\n                 p[0] = p[2] ** (-1)\n-            else:\n-                p[0] = p[1] / p[3]\n+            elif len(p) == 4:\n+                if isinstance(p[3], tuple):\n+                    p[0] = p[1] / p[3][0]\n+                    for unit in p[3][1:]:\n+                        p[0] = p[0] / unit\n+                else:\n+                    p[0] = p[1] / p[3]\n+                    p[0] = (p[0],)\n         def p_unit_expression(p):\n             if len(p) == 2:\n                 p[0] = p[1]\n", "normalized_occurrence": 1}
