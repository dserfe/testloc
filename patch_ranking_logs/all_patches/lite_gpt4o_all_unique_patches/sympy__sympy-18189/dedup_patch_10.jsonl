{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..595f437 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -179,7 +179,15 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                 raise TypeError(\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n+            if syms != var and permute:\n+                dict_sym_index = dict(zip(syms, range(len(syms))))\n+                result = {tuple([t[dict_sym_index[i]] for i in var])\n+                            for t in diophantine(eq, param)}\n+                permuted_results = set()\n+                for res in result:\n+                    permuted_results.update(signed_permutations(res))\n+                return permuted_results\n+            elif syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var])\n                             for t in diophantine(eq, param)}\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..14658ba 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -70,7 +70,14 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n             if not is_sequence(syms):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n-            if syms != var:\n+            if syms != var and permute:\n+                dict_sym_index = dict(zip(syms, range(len(syms))))\n+                result = {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                permuted_results = set()\n+                for res in result:\n+                    permuted_results.update(signed_permutations(res))\n+                return permuted_results\n+            elif syms != var:\n                 dict_sym_index = dict(zip(syms, range(len(syms))))\n                 return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n         n, d = eq.as_numer_denom()\n", "normalized_occurrence": 1}
