{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-13584", "model_patch": "diff --git a/sklearn/_config.py b/sklearn/_config.py\nindex a47026e..cb0eaa2 100644\n--- a/sklearn/_config.py\n+++ b/sklearn/_config.py\n@@ -1,12 +1,19 @@\n+\n \"\"\"Global configuration state and functions for management\n \"\"\"\n import os\n from contextlib import contextmanager as contextmanager\n \n+import numpy as np\n+\n _global_config = {\n     'assume_finite': bool(os.environ.get('SKLEARN_ASSUME_FINITE', False)),\n     'working_memory': int(os.environ.get('SKLEARN_WORKING_MEMORY', 1024)),\n     'print_changed_only': False,\n+    '_array_equal': lambda x, y: (\n+        np.array_equal(x, y) if isinstance(x, np.ndarray) and isinstance(y, np.ndarray)\n+        else x == y\n+    ),\n }\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/_config.py b/sklearn/_config.py\nindex 27fd0a9..f0e0744 100644\n--- a/sklearn/_config.py\n+++ b/sklearn/_config.py\n@@ -1,6 +1,7 @@\n import os\n from contextlib import contextmanager as contextmanager\n-_global_config = {'assume_finite': bool(os.environ.get('SKLEARN_ASSUME_FINITE', False)), 'working_memory': int(os.environ.get('SKLEARN_WORKING_MEMORY', 1024)), 'print_changed_only': False}\n+import numpy as np\n+_global_config = {'assume_finite': bool(os.environ.get('SKLEARN_ASSUME_FINITE', False)), 'working_memory': int(os.environ.get('SKLEARN_WORKING_MEMORY', 1024)), 'print_changed_only': False, '_array_equal': lambda x, y: np.array_equal(x, y) if isinstance(x, np.ndarray) and isinstance(y, np.ndarray) else x == y}\n def get_config():\n     return _global_config.copy()\n def set_config(assume_finite=None, working_memory=None, print_changed_only=None):\n", "normalized_occurrence": 1}
