{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-23191", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 4e979d2..a98eb27 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -1143,7 +1143,6 @@ class PrettyPrinter(Printer):\n             # XXX: What is this hack?\n             if '\\n' in partstr:\n                 tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n                 if '\\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction\n                     for paren in range(len(tempstr)):\n                         flag[i] = 1\n@@ -1160,6 +1159,7 @@ class PrettyPrinter(Printer):\n                     tempstr = tempstr.replace('\\N{RIGHT PARENTHESIS UPPER HOOK}',\n                                         '\\N{RIGHT PARENTHESIS UPPER HOOK}'\n                                         + ' ' + vectstrs[i])\n+                tempstr = tempstr.replace(vectstrs[i], '')\n                 o1[i] = tempstr\n \n         o1 = [x.split('\\n') for x in o1]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex b00c794..58fe9d4 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -833,7 +833,6 @@ class PrettyPrinter(Printer):\n             flag.append(0)\n             if '\\n' in partstr:\n                 tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n                 if '⎟' in tempstr:\n                     for paren in range(len(tempstr)):\n                         flag[i] = 1\n@@ -845,6 +844,7 @@ class PrettyPrinter(Printer):\n                     tempstr = tempstr.replace('⎠', '⎠' + ' ' + vectstrs[i])\n                 else:\n                     tempstr = tempstr.replace('⎞', '⎞' + ' ' + vectstrs[i])\n+                tempstr = tempstr.replace(vectstrs[i], '')\n                 o1[i] = tempstr\n         o1 = [x.split('\\n') for x in o1]\n         n_newlines = max([len(x) for x in o1])\n", "normalized_occurrence": 1}
