{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex 218f537..50f8e2c 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -810,7 +810,13 @@ class Piecewise(Function):\n         # somewhat more efficient by avoiding other substitutions\n         # and avoiding invalid conditions that appear after a\n         # True condition\n+        from sympy.polys.polyerrors import PolynomialError\n+        \n         args = list(self.args)\n+        try:\n+            poly_old = old.as_poly()\n+        except PolynomialError:\n+            poly_old = None\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/piecewise.py b/sympy/functions/elementary/piecewise.py\nindex e1c61a2..59ef394 100644\n--- a/sympy/functions/elementary/piecewise.py\n+++ b/sympy/functions/elementary/piecewise.py\n@@ -441,7 +441,12 @@ class Piecewise(Function):\n     def _eval_power(self, s):\n         return self.func(*[(e ** s, c) for e, c in self.args])\n     def _eval_subs(self, old, new):\n+        from sympy.polys.polyerrors import PolynomialError\n         args = list(self.args)\n+        try:\n+            poly_old = old.as_poly()\n+        except PolynomialError:\n+            poly_old = None\n         args_exist = False\n         for i, (e, c) in enumerate(args):\n             c = c._subs(old, new)\n", "normalized_occurrence": 1}
