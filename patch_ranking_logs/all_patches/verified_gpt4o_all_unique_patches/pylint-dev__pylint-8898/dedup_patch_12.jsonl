{"model_name_or_path": "agentless", "instance_id": "pylint-dev__pylint-8898", "model_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 58062ab..55848cd 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -114,8 +114,24 @@ def _regex_transformer(value: str) -> Pattern[str]:\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     \"\"\"Transforms a comma separated list of regular expressions.\"\"\"\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+\n+    # Split by comma only if it is not within parentheses\n+    pattern = ''\n+    paren_count = 0\n+    for char in value:\n+        if char == ',' and paren_count == 0:\n+            patterns.append(_regex_transformer(pattern))\n+            pattern = ''\n+        else:\n+            pattern += char\n+            if char == '(':\n+                paren_count += 1\n+            elif char == ')':\n+                paren_count -= 1\n+\n+    if pattern:\n         patterns.append(_regex_transformer(pattern))\n+\n     return patterns\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/config/argument.py b/pylint/config/argument.py\nindex 61d66ca..4b187c2 100644\n--- a/pylint/config/argument.py\n+++ b/pylint/config/argument.py\n@@ -55,7 +55,19 @@ def _regex_transformer(value: str) -> Pattern[str]:\n         raise argparse.ArgumentTypeError(msg) from e\n def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n     patterns: list[Pattern[str]] = []\n-    for pattern in _csv_transformer(value):\n+    pattern = ''\n+    paren_count = 0\n+    for char in value:\n+        if char == ',' and paren_count == 0:\n+            patterns.append(_regex_transformer(pattern))\n+            pattern = ''\n+        else:\n+            pattern += char\n+            if char == '(':\n+                paren_count += 1\n+            elif char == ')':\n+                paren_count -= 1\n+    if pattern:\n         patterns.append(_regex_transformer(pattern))\n     return patterns\n def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:\n", "normalized_occurrence": 1}
