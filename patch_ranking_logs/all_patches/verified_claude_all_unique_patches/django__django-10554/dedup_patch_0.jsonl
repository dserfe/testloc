{"model_name_or_path": "agentless_claude", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..0190de9 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -347,16 +347,28 @@ class SQLCompiler:\n                 # Relabel order by columns to raw numbers if this is a combined\n                 # query; necessary since the columns can't be referenced by the\n                 # fully qualified name and the simple column names may collide.\n-                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n-                        break\n+                if isinstance(src, RawSQL):\n+                    # Skip if it's already a RawSQL (meaning it's already been processed)\n+                    pass\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                        if is_ref and col_alias == src.refs:\n+                            src = src.source\n+                        elif col_alias:\n+                            continue\n+                        if src == sel_expr:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n+                    else:\n+                        # If we can't find the exact match, attempt to match by column name\n+                        # This handles cases where order_by() is called after UNION\n+                        for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                            if getattr(src, 'target', None) and getattr(sel_expr, 'target', None):\n+                                if src.target.column == sel_expr.target.column:\n+                                    resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                                    break\n+                        else:\n+                            raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..73c2ed1 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -183,16 +183,25 @@ class SQLCompiler:\n             resolved = expr.resolve_expression(self.query, allow_joins=True, reuse=None)\n             if self.query.combinator:\n                 src = resolved.get_source_expressions()[0]\n-                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n-                    if is_ref and col_alias == src.refs:\n-                        src = src.source\n-                    elif col_alias:\n-                        continue\n-                    if src == sel_expr:\n-                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n-                        break\n+                if isinstance(src, RawSQL):\n+                    pass\n                 else:\n-                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n+                    for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                        if is_ref and col_alias == src.refs:\n+                            src = src.source\n+                        elif col_alias:\n+                            continue\n+                        if src == sel_expr:\n+                            resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                            break\n+                    else:\n+                        for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                            if getattr(src, 'target', None) and getattr(sel_expr, 'target', None):\n+                                if src.target.column == sel_expr.target.column:\n+                                    resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                                    break\n+                        else:\n+                            raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n             without_ordering = self.ordering_parts.search(sql).group(1)\n             params_hash = make_hashable(params)\n", "normalized_occurrence": 1}
