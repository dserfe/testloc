{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..12ef167 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -403,13 +403,23 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(\n+        \n+        # Get all constraints for these columns\n+        all_constraints = self._constraint_names(\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n-            **constraint_kwargs\n         )\n+        \n+        # Filter to get only the type we want (index or unique)\n+        constraint_names = [name for name in all_constraints if \n+            bool(self._constraint_names(\n+                model, columns, [name], **constraint_kwargs\n+            ))\n+        ]\n+        \n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+            raise ValueError(\"Found wrong number (%s) of %s constraints for %s(%s)\" % (\n                 len(constraint_names),\n+                \"unique\" if constraint_kwargs.get('unique', False) else \"index\",\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..02f346d 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -229,9 +229,10 @@ class BaseDatabaseSchemaEditor:\n         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        all_constraints = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names)\n+        constraint_names = [name for name in all_constraints if bool(self._constraint_names(model, columns, [name], **constraint_kwargs))]\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+            raise ValueError('Found wrong number (%s) of %s constraints for %s(%s)' % (len(constraint_names), 'unique' if constraint_kwargs.get('unique', False) else 'index', model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n", "normalized_occurrence": 1}
