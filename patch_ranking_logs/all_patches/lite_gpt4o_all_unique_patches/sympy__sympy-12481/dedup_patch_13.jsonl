{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12481", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 4042fdb..6895ec3 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,13 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                resolved_cycle = []\n+                seen = set()\n+                for cycle in args:\n+                    new_cycle = [x for x in cycle if x not in seen]\n+                    resolved_cycle.extend(new_cycle)\n+                    seen.update(new_cycle)\n+                args = [resolved_cycle]\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 93057a0..4f7f6c7 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -196,7 +196,13 @@ class Permutation(Basic):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                resolved_cycle = []\n+                seen = set()\n+                for cycle in args:\n+                    new_cycle = [x for x in cycle if x not in seen]\n+                    resolved_cycle.extend(new_cycle)\n+                    seen.update(new_cycle)\n+                args = [resolved_cycle]\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "normalized_occurrence": 1}
