{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..43ad860 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -79,6 +79,12 @@ def apart(f, x=None, full=False, **options):\n \n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n+    if x is None:\n+        # Attempt to find a suitable variable\n+        x = P.free_symbols.pop() if P.free_symbols else None\n+        if x is None:\n+            raise ValueError(\"No variable specified for partial fraction decomposition\")\n+    \n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..9838d9a 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -18,6 +18,10 @@ def apart(f, x=None, full=False, **options):\n         P, Q = f.as_numer_denom()\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n+    if x is None:\n+        x = P.free_symbols.pop() if P.free_symbols else None\n+        if x is None:\n+            raise ValueError('No variable specified for partial fraction decomposition')\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n", "normalized_occurrence": 1}
