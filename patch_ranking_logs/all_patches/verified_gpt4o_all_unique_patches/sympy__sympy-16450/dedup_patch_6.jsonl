{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16450", "model_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9a1c686..60d73ef 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -232,7 +232,12 @@ class Symbol(AtomicExpr, Boolean):\n         # be strict about commutativity\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n         assumptions['commutative'] = is_commutative\n+        # Preserve specific assumptions such as is_finite\n         obj._assumptions = StdFactKB(assumptions)\n+        if 'finite' in tmp_asm_copy:\n+            obj._assumptions._generator['finite'] = tmp_asm_copy['finite']\n+        if 'infinite' in tmp_asm_copy:\n+            obj._assumptions._generator['infinite'] = tmp_asm_copy['infinite']\n         obj._assumptions._generator = tmp_asm_copy  # Issue #8873\n         return obj\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/symbol.py b/sympy/core/symbol.py\nindex 9bc1e52..73cdbc7 100644\n--- a/sympy/core/symbol.py\n+++ b/sympy/core/symbol.py\n@@ -79,6 +79,10 @@ class Symbol(AtomicExpr, Boolean):\n         is_commutative = fuzzy_bool(assumptions.get('commutative', True))\n         assumptions['commutative'] = is_commutative\n         obj._assumptions = StdFactKB(assumptions)\n+        if 'finite' in tmp_asm_copy:\n+            obj._assumptions._generator['finite'] = tmp_asm_copy['finite']\n+        if 'infinite' in tmp_asm_copy:\n+            obj._assumptions._generator['infinite'] = tmp_asm_copy['infinite']\n         obj._assumptions._generator = tmp_asm_copy\n         return obj\n     __xnew__ = staticmethod(__new_stage2__)\n", "normalized_occurrence": 1}
