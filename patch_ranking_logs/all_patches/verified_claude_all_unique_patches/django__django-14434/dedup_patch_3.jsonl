{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14434", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 941fcdc..2c295e4 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -1226,6 +1226,11 @@ class BaseDatabaseSchemaEditor:\n         self, model, columns, name=None, condition=None, deferrable=None,\n         include=None, opclasses=None, expressions=None,\n     ):\n+        # Convert any Table instances to their string column names\n+        columns = [\n+            col.column if hasattr(col, 'column') else col\n+            for col in columns\n+        ]\n         if (\n             (\n                 deferrable and\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d3e3875..ecc8129 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -574,6 +574,7 @@ class BaseDatabaseSchemaEditor:\n         constraint = self.sql_unique_constraint % {'columns': ', '.join(map(self.quote_name, fields)), 'deferrable': self._deferrable_constraint_sql(deferrable)}\n         return self.sql_constraint % {'name': self.quote_name(name), 'constraint': constraint}\n     def _create_unique_sql(self, model, columns, name=None, condition=None, deferrable=None, include=None, opclasses=None, expressions=None):\n+        columns = [col.column if hasattr(col, 'column') else col for col in columns]\n         if deferrable and (not self.connection.features.supports_deferrable_unique_constraints) or (condition and (not self.connection.features.supports_partial_indexes)) or (include and (not self.connection.features.supports_covering_indexes)) or (expressions and (not self.connection.features.supports_expression_indexes)):\n             return None\n         def create_unique_name(*args, **kwargs):\n", "normalized_occurrence": 1}
