{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13033", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex f5fd96c..33a9bdc 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1886,49 +1886,32 @@ class Query(BaseExpression):\n                 raise FieldError(\"Cannot resolve keyword %r into field. \"\n                                  \"Choices are: %s\" % (name, \", \".join(names)))\n \n-    def add_ordering(self, *ordering):\n-        \"\"\"\n-        Add items from the 'ordering' sequence to the query's \"order by\"\n-        clause. These items are either field names (not column names) --\n-        possibly with a direction prefix ('-' or '?') -- or OrderBy\n-        expressions.\n-\n-        If 'ordering' is empty, clear all ordering from the query.\n-        \"\"\"\n-        errors = []\n-        for item in ordering:\n-            if isinstance(item, str):\n-                if '.' in item:\n-                    warnings.warn(\n-                        'Passing column raw column aliases to order_by() is '\n-                        'deprecated. Wrap %r in a RawSQL expression before '\n-                        'passing it to order_by().' % item,\n-                        category=RemovedInDjango40Warning,\n-                        stacklevel=3,\n-                    )\n-                    continue\n-                if item == '?':\n-                    continue\n-                if item.startswith('-'):\n-                    item = item[1:]\n-                if item in self.annotations:\n-                    continue\n-                if self.extra and item in self.extra:\n-                    continue\n-                # names_to_path() validates the lookup. A descriptive\n-                # FieldError will be raise if it's not.\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n-            elif not hasattr(item, 'resolve_expression'):\n-                errors.append(item)\n-            if getattr(item, 'contains_aggregate', False):\n-                raise FieldError(\n-                    'Using an aggregate in order_by() without also including '\n-                    'it in annotate() is not allowed: %s' % item\n-                )\n+\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n         if ordering:\n-            self.order_by += ordering\n+            # Clear any existing ordering when explicit ordering is provided\n+            self.clear_ordering(force_empty=True)\n+            # For each order_by term, determine if it's a self-referencing FK\n+            processed_ordering = []\n+            for item in ordering:\n+                if isinstance(item, str):\n+                    # Handle descending prefix\n+                    descending = item.startswith('-')\n+                    name = item[1:] if descending else item\n+                    if LOOKUP_SEP in name:\n+                        # For field paths, ensure we're using the direct ID reference\n+                        parts = name.split(LOOKUP_SEP)\n+                        if parts[-1] == 'id' and len(parts) > 2:\n+                            # Convert record__root_id to record__root__id format\n+                            if parts[-2].endswith('_id'):\n+                                parts[-2] = parts[-2][:-3]\n+                                name = LOOKUP_SEP.join(parts)\n+                    processed_item = f\"-{name}\" if descending else name\n+                    processed_ordering.append(processed_item)\n+                else:\n+                    processed_ordering.append(item)\n+            self.order_by += tuple(processed_ordering)\n         else:\n             self.default_ordering = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5d74201..b46d273 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1006,30 +1006,26 @@ class Query(BaseExpression):\n             else:\n                 names = sorted([*get_field_names_from_opts(opts), *self.extra, *self.annotation_select, *self._filtered_relations])\n                 raise FieldError('Cannot resolve keyword %r into field. Choices are: %s' % (name, ', '.join(names)))\n-    def add_ordering(self, *ordering):\n-        errors = []\n-        for item in ordering:\n-            if isinstance(item, str):\n-                if '.' in item:\n-                    warnings.warn('Passing column raw column aliases to order_by() is deprecated. Wrap %r in a RawSQL expression before passing it to order_by().' % item, category=RemovedInDjango40Warning, stacklevel=3)\n-                    continue\n-                if item == '?':\n-                    continue\n-                if item.startswith('-'):\n-                    item = item[1:]\n-                if item in self.annotations:\n-                    continue\n-                if self.extra and item in self.extra:\n-                    continue\n-                self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)\n-            elif not hasattr(item, 'resolve_expression'):\n-                errors.append(item)\n-            if getattr(item, 'contains_aggregate', False):\n-                raise FieldError('Using an aggregate in order_by() without also including it in annotate() is not allowed: %s' % item)\n         if errors:\n             raise FieldError('Invalid order_by arguments: %s' % errors)\n         if ordering:\n-            self.order_by += ordering\n+            self.clear_ordering(force_empty=True)\n+            processed_ordering = []\n+            for item in ordering:\n+                if isinstance(item, str):\n+                    descending = item.startswith('-')\n+                    name = item[1:] if descending else item\n+                    if LOOKUP_SEP in name:\n+                        parts = name.split(LOOKUP_SEP)\n+                        if parts[-1] == 'id' and len(parts) > 2:\n+                            if parts[-2].endswith('_id'):\n+                                parts[-2] = parts[-2][:-3]\n+                                name = LOOKUP_SEP.join(parts)\n+                    processed_item = f'-{name}' if descending else name\n+                    processed_ordering.append(processed_item)\n+                else:\n+                    processed_ordering.append(item)\n+            self.order_by += tuple(processed_ordering)\n         else:\n             self.default_ordering = False\n     def clear_ordering(self, force_empty):\n", "normalized_occurrence": 1}
