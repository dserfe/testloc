{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-8707", "model_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex d23f312..09c1409 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -334,8 +334,8 @@ class Header:\n \n         Parameters\n         ----------\n-        data : str\n-           String containing the entire header.\n+        data : str or bytes\n+           String or bytes containing the entire header.\n \n         sep : str, optional\n             The string separating cards from each other, such as a newline.  By\n@@ -350,6 +350,9 @@ class Header:\n \n         cards = []\n \n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n+\n         # If the card separator contains characters that may validly appear in\n         # a card, the only way to unambiguously distinguish between cards is to\n         # require that they be Card.length long.  However, if the separator\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py\nindex a818589..2abf863 100644\n--- a/astropy/io/fits/header.py\n+++ b/astropy/io/fits/header.py\n@@ -162,6 +162,8 @@ class Header:\n     @classmethod\n     def fromstring(cls, data, sep=''):\n         cards = []\n+        if isinstance(data, bytes):\n+            data = data.decode('ascii')\n         require_full_cardlength = set(sep).issubset(VALID_HEADER_CHARS)\n         idx = 0\n         image = []\n", "normalized_occurrence": 2}
