{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15916", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 646bf68..2565dcd 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -263,7 +263,8 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n \n-        formfield_callback = attrs.pop(\"formfield_callback\", base_formfield_callback)\n+        # Don't pop formfield_callback from attrs yet - we need it to persist through super().__new__\n+        formfield_callback = attrs.get(\"formfield_callback\", base_formfield_callback)\n \n         new_class = super().__new__(mcs, name, bases, attrs)\n \n@@ -271,6 +272,10 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             return new_class\n \n         opts = new_class._meta = ModelFormOptions(getattr(new_class, \"Meta\", None))\n+        \n+        # If Meta has formfield_callback, it should take precedence\n+        if hasattr(opts, \"formfield_callback\"):\n+            formfield_callback = opts.formfield_callback\n \n         # We check if a string was passed to `fields` or `exclude`,\n         # which is likely to be a mistake where the user typed ('foo') instead\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7070e66..04e057b 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -114,11 +114,13 @@ class ModelFormMetaclass(DeclarativeFieldsMetaclass):\n             if hasattr(b, 'Meta') and hasattr(b.Meta, 'formfield_callback'):\n                 base_formfield_callback = b.Meta.formfield_callback\n                 break\n-        formfield_callback = attrs.pop('formfield_callback', base_formfield_callback)\n+        formfield_callback = attrs.get('formfield_callback', base_formfield_callback)\n         new_class = super().__new__(mcs, name, bases, attrs)\n         if bases == (BaseModelForm,):\n             return new_class\n         opts = new_class._meta = ModelFormOptions(getattr(new_class, 'Meta', None))\n+        if hasattr(opts, 'formfield_callback'):\n+            formfield_callback = opts.formfield_callback\n         for opt in ['fields', 'exclude', 'localized_fields']:\n             value = getattr(opts, opt)\n             if isinstance(value, str) and value != ALL_FIELDS:\n", "normalized_occurrence": 1}
