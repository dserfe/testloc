{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..6a2ba59 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -261,7 +261,9 @@ class Pow(Expr):\n                 e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n-                elif e.is_odd:\n+                else:\n+                    if b.is_integer and b.is_positive:\n+                        return Pow(S.NegativeOne, e) * Pow(abs(b), e)\n                     return -Pow(-b, e)\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..5298e89 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -104,7 +104,9 @@ class Pow(Expr):\n             elif (b.is_Symbol or b.is_number) and (e.is_Symbol or e.is_number) and e.is_integer and _coeff_isneg(b):\n                 if e.is_even:\n                     b = -b\n-                elif e.is_odd:\n+                else:\n+                    if b.is_integer and b.is_positive:\n+                        return Pow(S.NegativeOne, e) * Pow(abs(b), e)\n                     return -Pow(-b, e)\n             if S.NaN in (b, e):\n                 return S.NaN\n", "normalized_occurrence": 1}
