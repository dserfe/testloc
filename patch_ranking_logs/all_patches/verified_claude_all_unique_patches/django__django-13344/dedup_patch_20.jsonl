{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13344", "model_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex ed8f4af..9e504cc 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -291,24 +291,40 @@ class BaseHandler:\n \n     def check_response(self, response, callback, name=None):\n         \"\"\"\n-        Raise an error if the view returned None or an uncalled coroutine.\n+        Raise an error if the view returned None or handle coroutine response.\n         \"\"\"\n-        if not(response is None or asyncio.iscoroutine(response)):\n-            return\n-        if not name:\n-            if isinstance(callback, types.FunctionType):  # FBV\n-                name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n-            else:  # CBV\n-                name = 'The view %s.%s.__call__' % (\n-                    callback.__module__,\n-                    callback.__class__.__name__,\n-                )\n         if response is None:\n+            if not name:\n+                if isinstance(callback, types.FunctionType):  # FBV\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:  # CBV\n+                    name = 'The view %s.%s.__call__' % (\n+                        callback.__module__,\n+                        callback.__class__.__name__,\n+                    )\n             raise ValueError(\n                 \"%s didn't return an HttpResponse object. It returned None \"\n                 \"instead.\" % name\n             )\n-        elif asyncio.iscoroutine(response):\n+        \n+        # If it's not a coroutine, return as is\n+        if not asyncio.iscoroutine(response):\n+            return response\n+\n+        # If it's a coroutine, we need to await it\n+        if asyncio.iscoroutinefunction(self.get_response):\n+            # We're in an async context, so we can await\n+            return response\n+        else:\n+            # We're in a sync context, raise an error\n+            if not name:\n+                if isinstance(callback, types.FunctionType):  # FBV\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:  # CBV\n+                    name = 'The view %s.%s.__call__' % (\n+                        callback.__module__,\n+                        callback.__class__.__name__,\n+                    )\n             raise ValueError(\n                 \"%s didn't return an HttpResponse object. It returned an \"\n                 \"unawaited coroutine instead. You may need to add an 'await' \"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py\nindex a097649..edec198 100644\n--- a/django/core/handlers/base.py\n+++ b/django/core/handlers/base.py\n@@ -158,16 +158,23 @@ class BaseHandler:\n         request.resolver_match = resolver_match\n         return resolver_match\n     def check_response(self, response, callback, name=None):\n-        if not (response is None or asyncio.iscoroutine(response)):\n-            return\n-        if not name:\n-            if isinstance(callback, types.FunctionType):\n-                name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n-            else:\n-                name = 'The view %s.%s.__call__' % (callback.__module__, callback.__class__.__name__)\n         if response is None:\n+            if not name:\n+                if isinstance(callback, types.FunctionType):\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:\n+                    name = 'The view %s.%s.__call__' % (callback.__module__, callback.__class__.__name__)\n             raise ValueError(\"%s didn't return an HttpResponse object. It returned None instead.\" % name)\n-        elif asyncio.iscoroutine(response):\n+        if not asyncio.iscoroutine(response):\n+            return response\n+        if asyncio.iscoroutinefunction(self.get_response):\n+            return response\n+        else:\n+            if not name:\n+                if isinstance(callback, types.FunctionType):\n+                    name = 'The view %s.%s' % (callback.__module__, callback.__name__)\n+                else:\n+                    name = 'The view %s.%s.__call__' % (callback.__module__, callback.__class__.__name__)\n             raise ValueError(\"%s didn't return an HttpResponse object. It returned an unawaited coroutine instead. You may need to add an 'await' into your view.\" % name)\n     def make_view_atomic(self, view):\n         non_atomic_requests = getattr(view, '_non_atomic_requests', set())\n", "normalized_occurrence": 1}
