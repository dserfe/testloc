{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..5c0eba3 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -400,12 +400,19 @@ class LatexPrinter(Printer):\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n+                    and ldenom <= 2 and not \"^\" in sdenom and not sdenom.startswith(\"2\"):\n                 # handle short fractions\n                 if self._needs_mul_brackets(numer, last=False):\n                     tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n                 else:\n                     tex += r\"%s / %s\" % (snumer, sdenom)\n+            elif self._settings['fold_short_frac'] \\\n+                    and ldenom > 2 and sdenom.startswith(\"2\"):\n+                # handle cases like 1/(2*(x + y))\n+                if self._needs_mul_brackets(numer, last=False):\n+                    tex += r\"\\left(%s\\right) / \\left(%s\\right)\" % (snumer, sdenom)\n+                else:\n+                    tex += r\"%s / \\left(%s\\right)\" % (snumer, sdenom)\n             elif len(snumer.split()) > ratio*ldenom:\n                 # handle long fractions\n                 if self._needs_mul_brackets(numer, last=True):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..95292b6 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -196,11 +196,16 @@ class LatexPrinter(Printer):\n             sdenom = convert(denom)\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n+            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom) and (not sdenom.startswith('2')):\n                 if self._needs_mul_brackets(numer, last=False):\n                     tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n                 else:\n                     tex += '%s / %s' % (snumer, sdenom)\n+            elif self._settings['fold_short_frac'] and ldenom > 2 and sdenom.startswith('2'):\n+                if self._needs_mul_brackets(numer, last=False):\n+                    tex += '\\\\left(%s\\\\right) / \\\\left(%s\\\\right)' % (snumer, sdenom)\n+                else:\n+                    tex += '%s / \\\\left(%s\\\\right)' % (snumer, sdenom)\n             elif len(snumer.split()) > ratio * ldenom:\n                 if self._needs_mul_brackets(numer, last=True):\n                     tex += '\\\\frac{1}{%s}%s\\\\left(%s\\\\right)' % (sdenom, separator, snumer)\n", "normalized_occurrence": 1}
