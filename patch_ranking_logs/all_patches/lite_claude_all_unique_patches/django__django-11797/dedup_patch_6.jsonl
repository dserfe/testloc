{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..3a01f02 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -104,18 +104,19 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        # Note that even if the group_by is set, it is only the minimal\n-        # set to group by. So, we need to add cols in select, order_by, and\n-        # having into the select in any case.\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n-            # Skip References to the select clause, as all expressions in the\n-            # select clause are already part of the group by.\n-            if not expr.contains_aggregate and not is_ref:\n-                expressions.extend(expr.get_source_expressions())\n+        # Only add columns from select and order_by if group_by is True (automatic grouping).\n+        # If group_by is a list, it was explicitly set (e.g. through values() call)\n+        # and we should respect that exact grouping.\n+        if self.query.group_by is True:\n+            for expr, _, _ in select:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n+            for expr, (sql, params, is_ref) in order_by:\n+                # Skip References to the select clause, as all expressions in the\n+                # select clause are already part of the group by.\n+                if not expr.contains_aggregate and not is_ref:\n+                    expressions.extend(expr.get_source_expressions())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..f933cbb 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,13 +45,14 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n-            if not expr.contains_aggregate and (not is_ref):\n-                expressions.extend(expr.get_source_expressions())\n+        if self.query.group_by is True:\n+            for expr, _, _ in select:\n+                cols = expr.get_group_by_cols()\n+                for col in cols:\n+                    expressions.append(col)\n+            for expr, (sql, params, is_ref) in order_by:\n+                if not expr.contains_aggregate and (not is_ref):\n+                    expressions.extend(expr.get_source_expressions())\n         having_group_by = self.having.get_group_by_cols() if self.having else ()\n         for expr in having_group_by:\n             expressions.append(expr)\n", "normalized_occurrence": 2}
