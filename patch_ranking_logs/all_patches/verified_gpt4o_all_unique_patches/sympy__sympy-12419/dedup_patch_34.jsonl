{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..f648171 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -51,23 +51,29 @@ class MatMul(MatrixExpr):\n         if len(matrices) == 1:  # situation like 2*X, matmul is just X\n             return coeff * matrices[0][i, j]\n \n-        head, tail = matrices[0], matrices[1:]\n-        if len(tail) == 0:\n-            raise ValueError(\"lenth of tail cannot be 0\")\n-        X = head\n-        Y = MatMul(*tail)\n-\n-        from sympy.core.symbol import Dummy\n-        from sympy.concrete.summations import Sum\n-        from sympy.matrices import ImmutableMatrix\n-        k = Dummy('k', integer=True)\n-        if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n-            return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n-        result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n-            # Don't waste time in result.doit() if the sum bounds are symbolic\n-            expand = False\n-        return result.doit() if expand else result\n+        if len(matrices) == 2 and matrices[0] == matrices[1].T:\n+            if i == j:\n+                return coeff * S.One\n+            else:\n+                return coeff * S.Zero\n+        else:\n+            head, tail = matrices[0], matrices[1:]\n+            if len(tail) == 0:\n+                raise ValueError(\"length of tail cannot be 0\")\n+            X = head\n+            Y = MatMul(*tail)\n+\n+            from sympy.core.symbol import Dummy\n+            from sympy.concrete.summations import Sum\n+            from sympy.matrices import ImmutableMatrix\n+            k = Dummy('k', integer=True)\n+            if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n+                return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n+            result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n+            if not X.cols.is_number:\n+                # Don't waste time in result.doit() if the sum bounds are symbolic\n+                expand = False\n+            return result.doit() if expand else result\n \n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..8a44ee4 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -27,21 +27,27 @@ class MatMul(MatrixExpr):\n         coeff, matrices = self.as_coeff_matrices()\n         if len(matrices) == 1:\n             return coeff * matrices[0][i, j]\n-        head, tail = (matrices[0], matrices[1:])\n-        if len(tail) == 0:\n-            raise ValueError('lenth of tail cannot be 0')\n-        X = head\n-        Y = MatMul(*tail)\n-        from sympy.core.symbol import Dummy\n-        from sympy.concrete.summations import Sum\n-        from sympy.matrices import ImmutableMatrix\n-        k = Dummy('k', integer=True)\n-        if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n-            return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n-        result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n-            expand = False\n-        return result.doit() if expand else result\n+        if len(matrices) == 2 and matrices[0] == matrices[1].T:\n+            if i == j:\n+                return coeff * S.One\n+            else:\n+                return coeff * S.Zero\n+        else:\n+            head, tail = (matrices[0], matrices[1:])\n+            if len(tail) == 0:\n+                raise ValueError('length of tail cannot be 0')\n+            X = head\n+            Y = MatMul(*tail)\n+            from sympy.core.symbol import Dummy\n+            from sympy.concrete.summations import Sum\n+            from sympy.matrices import ImmutableMatrix\n+            k = Dummy('k', integer=True)\n+            if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n+                return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n+            result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n+            if not X.cols.is_number:\n+                expand = False\n+            return result.doit() if expand else result\n     def as_coeff_matrices(self):\n         scalars = [x for x in self.args if not x.is_Matrix]\n         matrices = [x for x in self.args if x.is_Matrix]\n", "normalized_occurrence": 1}
