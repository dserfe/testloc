{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..433a599 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,12 +368,26 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, use a NOT EXISTS to ensure the key doesn't exist at all\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        while isinstance(lhs, KeyTransform):\n+            key_transforms.insert(0, lhs.key_name)\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[0]).as_oracle(compiler, connection)\n+        return 'NOT ({})'.format(sql), params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, use a NOT EXISTS to ensure the key doesn't exist at all\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        while isinstance(lhs, KeyTransform):\n+            key_transforms.insert(0, lhs.key_name)\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[0]).as_sqlite(compiler, connection)\n+        return 'NOT ({})'.format(sql), params\n \n \n class KeyTransformIn(lookups.In):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..e61deea 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -241,11 +241,23 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        while isinstance(lhs, KeyTransform):\n+            key_transforms.insert(0, lhs.key_name)\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[0]).as_oracle(compiler, connection)\n+        return ('NOT ({})'.format(sql), params)\n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs = self.lhs.lhs\n+        key_transforms = [self.lhs.key_name]\n+        while isinstance(lhs, KeyTransform):\n+            key_transforms.insert(0, lhs.key_name)\n+            lhs = lhs.lhs\n+        sql, params = HasKey(lhs, key_transforms[0]).as_sqlite(compiler, connection)\n+        return ('NOT ({})'.format(sql), params)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n         sql, params = super().resolve_expression_parameter(compiler, connection, sql, param)\n", "normalized_occurrence": 1}
