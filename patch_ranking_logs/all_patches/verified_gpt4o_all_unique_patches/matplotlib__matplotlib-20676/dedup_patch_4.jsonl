{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..2daae00 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2180,14 +2180,9 @@ class SpanSelector(_SelectorWidget):\n         self._prev = self._get_data(event)\n \n         if self._active_handle is None:\n-            # when the press event outside the span, we initially set the\n-            # visibility to False and extents to (v, v)\n-            # update will be called when setting the extents\n-            self.visible = False\n+            # when the press event is outside the span, we initialize the\n+            # extents but avoid forcing autoscale to include zero\n             self.extents = v, v\n-            # We need to set the visibility back, so the span selector will be\n-            # drawn when necessary (span width > 0)\n-            self.visible = True\n         else:\n             self.set_visible(True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..05f91a1 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1783,9 +1783,7 @@ class SpanSelector(_SelectorWidget):\n         self._pressv = v\n         self._prev = self._get_data(event)\n         if self._active_handle is None:\n-            self.visible = False\n             self.extents = (v, v)\n-            self.visible = True\n         else:\n             self.set_visible(True)\n         return False\n", "normalized_occurrence": 1}
