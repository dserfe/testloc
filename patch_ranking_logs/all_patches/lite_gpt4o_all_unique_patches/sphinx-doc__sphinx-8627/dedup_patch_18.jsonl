{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..4d43528 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -30,9 +30,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    type_hint = param.annotation\n+                    if isinstance(type_hint, type) and type_hint.__module__ == 'struct' and type_hint.__name__ == 'Struct':\n+                        annotation[param.name] = 'struct.Struct'\n+                    else:\n+                        annotation[param.name] = typing.stringify(type_hint)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = sig.return_annotation\n+                if isinstance(return_annotation, type) and return_annotation.__module__ == 'struct' and return_annotation.__name__ == 'Struct':\n+                    annotation['return'] = 'struct.Struct'\n+                else:\n+                    annotation['return'] = typing.stringify(return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..31d0ca6 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,6 +1,6 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n@@ -14,9 +14,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    type_hint = param.annotation\n+                    if isinstance(type_hint, type) and type_hint.__module__ == 'struct' and (type_hint.__name__ == 'Struct'):\n+                        annotation[param.name] = 'struct.Struct'\n+                    else:\n+                        annotation[param.name] = typing.stringify(type_hint)\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = sig.return_annotation\n+                if isinstance(return_annotation, type) and return_annotation.__module__ == 'struct' and (return_annotation.__name__ == 'Struct'):\n+                    annotation['return'] = 'struct.Struct'\n+                else:\n+                    annotation['return'] = typing.stringify(return_annotation)\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
