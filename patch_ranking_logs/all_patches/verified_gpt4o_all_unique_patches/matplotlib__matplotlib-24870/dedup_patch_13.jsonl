{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24870", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 908a24f..6656528 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -967,7 +967,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n \n         Must set self.levels, self.zmin and self.zmax, and update axes limits.\n         \"\"\"\n-        self.levels = args[0]\n+        if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+            self.levels = [0.5]\n+        else:\n+            self.levels = args[0]\n         self.allsegs = args[1]\n         self.allkinds = args[2] if len(args) > 2 else None\n         self.zmax = np.max(self.levels)\n", "occurrence": 2, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 04dc867..1ead04e 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -392,7 +392,10 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):\n                 labels.append(f'${variable_name} = {level}$')\n         return (artists, labels)\n     def _process_args(self, *args, **kwargs):\n-        self.levels = args[0]\n+        if isinstance(args[0], np.ndarray) and args[0].dtype == bool:\n+            self.levels = [0.5]\n+        else:\n+            self.levels = args[0]\n         self.allsegs = args[1]\n         self.allkinds = args[2] if len(args) > 2 else None\n         self.zmax = np.max(self.levels)\n", "normalized_occurrence": 2}
