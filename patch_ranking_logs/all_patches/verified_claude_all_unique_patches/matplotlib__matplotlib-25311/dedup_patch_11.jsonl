{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex a038473..51a46d6 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -72,6 +72,21 @@ class DraggableLegend(DraggableOffsetBox):\n         self._update = update\n \n         super().__init__(legend, legend._legend_box, use_blit=use_blit)\n+        \n+    def __getstate__(self):\n+        # Return state without unpicklable Qt canvas references\n+        state = self.__dict__.copy()\n+        state['_cidpress'] = None\n+        state['_cidrelease'] = None\n+        state['_cidmotion'] = None\n+        return state\n+        \n+    def __setstate__(self, state):\n+        # Restore instance attributes\n+        self.__dict__.update(state)\n+        # Reconnect event handlers if legend is available\n+        if self.legend is not None:\n+            self.legend.set_draggable(True)\n \n     def finalize_offset(self):\n         if self._update == \"loc\":\n", "normalized_patch": "--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        state['_cidpress'] = None\n+        state['_cidrelease'] = None\n+        state['_cidmotion'] = None\n+        return state\n+    def __setstate__(self, state):\n+        self.__dict__.update(state)\n+        if self.legend is not None:\n+            self.legend.set_draggable(True)", "normalized_occurrence": 1}
