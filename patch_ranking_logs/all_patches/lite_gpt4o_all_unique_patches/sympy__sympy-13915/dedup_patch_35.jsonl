{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..f09bd38 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -727,6 +727,7 @@ class Basic(with_metaclass(ManagedProperties)):\n     def subs(self, *args, **kwargs):\n         \"\"\"\n         Substitutes old for new in an expression after sympifying args.\n+        It also checks for undefined expressions that may arise from the substitution.\n \n         `args` is either:\n           - two arguments, e.g. foo.subs(old, new)\n@@ -920,6 +921,9 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            # Check for undefined expressions (e.g., division by zero)\n+            if rv.has(zoo, nan):\n+                raise ValueError(\"Substitution results in an undefined expression\")\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..fb117a1 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -329,6 +329,8 @@ class Basic(with_metaclass(ManagedProperties)):\n                 rv = rv._subs(old, new, **kwargs)\n                 if not isinstance(rv, Basic):\n                     break\n+            if rv.has(zoo, nan):\n+                raise ValueError('Substitution results in an undefined expression')\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
