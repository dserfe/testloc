{"model_name_or_path": "agentless", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..e842a2a 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -362,6 +362,11 @@ class BaseModelForm(BaseForm, AltersData):\n         # It is False by default so overriding self.clean() and failing to call\n         # super will stop validate_unique from being called.\n         self._validate_unique = False\n+        # Ensure callable defaults are evaluated only once and set as initial values.\n+        for field_name, field in self.fields.items():\n+            if callable(getattr(field, 'initial', None)):\n+                self.initial[field_name] = field.initial()\n+        \n         super().__init__(\n             data,\n             files,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..ef3adc5 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -151,6 +151,9 @@ class BaseModelForm(BaseForm, AltersData):\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n+        for field_name, field in self.fields.items():\n+            if callable(getattr(field, 'initial', None)):\n+                self.initial[field_name] = field.initial()\n         super().__init__(data, files, auto_id, prefix, object_data, error_class, label_suffix, empty_permitted, use_required_attribute=use_required_attribute, renderer=renderer)\n         for formfield in self.fields.values():\n             apply_limit_choices_to_to_formfield(formfield)\n", "normalized_occurrence": 1}
