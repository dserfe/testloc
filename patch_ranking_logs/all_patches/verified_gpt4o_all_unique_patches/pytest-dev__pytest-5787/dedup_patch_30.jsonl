{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..ea878f1 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -408,9 +408,25 @@ class CollectErrorRepr(TerminalRepr):\n         out.line(self.longrepr, red=True)\n \n \n+import traceback\n+\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, Exception):\n+        return {\n+            \"repr\": str(longrepr),\n+            \"traceback\": traceback.format_exception(type(longrepr), longrepr, longrepr.__traceback__)\n+        }\n+    return longrepr\n+\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict) and \"repr\" in data and \"traceback\" in data:\n+        return Exception(data[\"repr\"])\n+    return data\n+\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n+        data[\"longrepr\"] = serialize_longrepr(report.longrepr)\n         data[\"_report_type\"] = report.__class__.__name__\n         return data\n \n@@ -418,9 +434,13 @@ def pytest_report_to_serializable(report):\n def pytest_report_from_serializable(data):\n     if \"_report_type\" in data:\n         if data[\"_report_type\"] == \"TestReport\":\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            report.longrepr = deserialize_longrepr(data[\"longrepr\"])\n+            return report\n         elif data[\"_report_type\"] == \"CollectReport\":\n-            return CollectReport._from_json(data)\n+            report = CollectReport._from_json(data)\n+            report.longrepr = deserialize_longrepr(data[\"longrepr\"])\n+            return report\n         assert False, \"Unknown report_type unserialize data: {}\".format(\n             data[\"_report_type\"]\n         )\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..b806b0d 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -205,15 +205,29 @@ class CollectErrorRepr(TerminalRepr):\n         self.longrepr = msg\n     def toterminal(self, out):\n         out.line(self.longrepr, red=True)\n+import traceback\n+def serialize_longrepr(longrepr):\n+    if isinstance(longrepr, Exception):\n+        return {'repr': str(longrepr), 'traceback': traceback.format_exception(type(longrepr), longrepr, longrepr.__traceback__)}\n+    return longrepr\n+def deserialize_longrepr(data):\n+    if isinstance(data, dict) and 'repr' in data and ('traceback' in data):\n+        return Exception(data['repr'])\n+    return data\n def pytest_report_to_serializable(report):\n     if isinstance(report, (TestReport, CollectReport)):\n         data = report._to_json()\n+        data['longrepr'] = serialize_longrepr(report.longrepr)\n         data['_report_type'] = report.__class__.__name__\n         return data\n def pytest_report_from_serializable(data):\n     if '_report_type' in data:\n         if data['_report_type'] == 'TestReport':\n-            return TestReport._from_json(data)\n+            report = TestReport._from_json(data)\n+            report.longrepr = deserialize_longrepr(data['longrepr'])\n+            return report\n         elif data['_report_type'] == 'CollectReport':\n-            return CollectReport._from_json(data)\n+            report = CollectReport._from_json(data)\n+            report.longrepr = deserialize_longrepr(data['longrepr'])\n+            return report\n         assert False, 'Unknown report_type unserialize data: {}'.format(data['_report_type'])\n\\ No newline at end of file\n", "normalized_occurrence": 1}
