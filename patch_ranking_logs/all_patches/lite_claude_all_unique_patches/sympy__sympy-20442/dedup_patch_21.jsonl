{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..855fd4d 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -21,6 +21,11 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n \n+    # First check that dimensions are compatible\n+    if expr_dim != Mul.fromiter(d**e for d, e in zip(target_dims, [1]*len(target_dims))):\n+        return None\n+\n+    # Then check that we have all needed base units\n     if not canon_expr_units.issubset(set(canon_dim_units)):\n         return None\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..f226467 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -12,6 +12,8 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):\n     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]\n     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]\n     canon_expr_units = {i for i in dim_dependencies}\n+    if expr_dim != Mul.fromiter((d ** e for d, e in zip(target_dims, [1] * len(target_dims)))):\n+        return None\n     if not canon_expr_units.issubset(set(canon_dim_units)):\n         return None\n     seen = set()\n", "normalized_occurrence": 1}
