{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..545ca80 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -252,7 +252,9 @@ class Product(ExprWithIntLimits):\n             return deltaproduct(term, limits)\n \n         dif = n - a\n-        if dif.is_Integer:\n+        if dif.is_Integer and term.has(n):\n+            from sympy import Product\n+            return Product(term, (k, a, n)).rewrite('Q').doit()\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n         elif term.is_polynomial(k):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..3e9b787 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -59,7 +59,9 @@ class Product(ExprWithIntLimits):\n         if term.has(KroneckerDelta) and _has_simple_delta(term, limits[0]):\n             return deltaproduct(term, limits)\n         dif = n - a\n-        if dif.is_Integer:\n+        if dif.is_Integer and term.has(n):\n+            from sympy import Product\n+            return Product(term, (k, a, n)).rewrite('Q').doit()\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n", "normalized_occurrence": 1}
