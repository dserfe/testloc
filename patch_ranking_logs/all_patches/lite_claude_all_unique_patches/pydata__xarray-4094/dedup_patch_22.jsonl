{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..72aa947 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1958,10 +1958,19 @@ class DataArray(AbstractArray, DataWithCoords):\n         variables = idx.levels[level_number]\n         variable_dim = idx.names[level_number]\n \n+        # Get the original stacking dimensions by removing the variable level\n+        stacking_dims = [name for name in idx.names if name != variable_dim]\n+\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Select the variable but keep stacking dimensions\n+            da = self.sel({variable_dim: k})\n+            # Only squeeze dims that weren't used in stacking\n+            squeeze_dims = [d for d in da.dims if d not in stacking_dims]\n+            if squeeze_dims:\n+                da = da.squeeze(dim=squeeze_dims)\n+            data_dict[k] = da\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..d83b85c 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -532,9 +532,14 @@ class DataArray(AbstractArray, DataWithCoords):\n         level_number = idx._get_level_number(level)\n         variables = idx.levels[level_number]\n         variable_dim = idx.names[level_number]\n+        stacking_dims = [name for name in idx.names if name != variable_dim]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            da = self.sel({variable_dim: k})\n+            squeeze_dims = [d for d in da.dims if d not in stacking_dims]\n+            if squeeze_dims:\n+                da = da.squeeze(dim=squeeze_dims)\n+            data_dict[k] = da\n         return Dataset(data_dict)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n", "normalized_occurrence": 1}
