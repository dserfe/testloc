{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..2e49794 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -762,6 +762,9 @@ class Query(BaseExpression):\n         # Create a new alias for this table.\n         if alias_list:\n             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            # Ensure alias does not conflict with change_map values\n+            while alias in change_map.values():\n+                alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n             # The first occurrence of a table uses the table name directly.\n@@ -846,6 +849,8 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n+        # Ensure that there are no intersections between change_map's keys and values.\n+        # This is to prevent an alias from being changed twice (e.g., first T4 -> T5, then T5 -> T6).\n         assert set(change_map).isdisjoint(change_map.values())\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..fa18df2 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -430,6 +430,8 @@ class Query(BaseExpression):\n             return (alias, False)\n         if alias_list:\n             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n+            while alias in change_map.values():\n+                alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n             alias = filtered_relation.alias if filtered_relation is not None else table_name\n", "normalized_occurrence": 1}
