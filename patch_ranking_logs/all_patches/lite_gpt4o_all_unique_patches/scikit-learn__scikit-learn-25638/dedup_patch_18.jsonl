{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..71689fe 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -74,11 +74,17 @@ def unique_labels(*ys):\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n     xp, is_array_api = get_namespace(*ys)\n+    \n+    # Convert nullable pandas dtypes to their respective numpy dtypes\n+    ys = [y.astype(np.int64) if y.dtype.name == \"Int64\" else y.astype(np.float64) if y.dtype.name == \"Float64\" else y.astype(np.bool_) if y.dtype.name == \"boolean\" else y for y in ys]\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n \n     ys_types = set(type_of_target(x) for x in ys)\n+    \n+    # Update ys_types to handle nullable pandas dtypes\n+    ys_types = {\"multiclass\" if t == \"unknown\" and hasattr(ys[0], \"dtype\") and ys[0].dtype.name in [\"Int64\", \"Float64\", \"boolean\"] else t for t in ys_types}\n     if ys_types == {\"binary\", \"multiclass\"}:\n         ys_types = {\"multiclass\"}\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..a35cc37 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -18,9 +18,11 @@ def _unique_indicator(y):\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n+    ys = [y.astype(np.int64) if y.dtype.name == 'Int64' else y.astype(np.float64) if y.dtype.name == 'Float64' else y.astype(np.bool_) if y.dtype.name == 'boolean' else y for y in ys]\n     if not ys:\n         raise ValueError('No argument has been passed.')\n     ys_types = set((type_of_target(x) for x in ys))\n+    ys_types = {'multiclass' if t == 'unknown' and hasattr(ys[0], 'dtype') and (ys[0].dtype.name in ['Int64', 'Float64', 'boolean']) else t for t in ys_types}\n     if ys_types == {'binary', 'multiclass'}:\n         ys_types = {'multiclass'}\n     if len(ys_types) > 1:\n", "normalized_occurrence": 1}
