{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..67d0833 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -178,11 +178,29 @@ class BaseReport:\n \n             reprtraceback[\"reprentries\"] = new_entries\n \n-            return {\n-                \"reprcrash\": reprcrash,\n-                \"reprtraceback\": reprtraceback,\n-                \"sections\": rep.longrepr.sections,\n-            }\n+            # Handle chained exceptions\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for entry in rep.longrepr.chain:\n+                    tb, exc, msg = entry\n+                    chain_entry = {\n+                        \"traceback\": tb.__dict__.copy() if hasattr(tb, \"__dict__\") else None,\n+                        \"excinfo\": exc.__dict__.copy() if hasattr(exc, \"__dict__\") else None,\n+                        \"msg\": msg,\n+                    }\n+                    chain.append(chain_entry)\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                    \"chain\": chain,\n+                }\n+            else:\n+                return {\n+                    \"reprcrash\": reprcrash,\n+                    \"reprtraceback\": reprtraceback,\n+                    \"sections\": rep.longrepr.sections,\n+                }\n \n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, \"toterminal\"):\n@@ -254,6 +272,17 @@ class BaseReport:\n                     reprtraceback=ReprTraceback(**reprtraceback),\n                     reprcrash=ReprFileLocation(**reprcrash),\n                 )\n+                \n+                # Restore chained exceptions if present\n+                if \"chain\" in reportdict[\"longrepr\"]:\n+                    chain = []\n+                    for entry in reportdict[\"longrepr\"][\"chain\"]:\n+                        if entry[\"traceback\"] is not None:\n+                            tb = ReprTraceback(**entry[\"traceback\"])\n+                        else:\n+                            tb = None\n+                        chain.append((tb, entry[\"excinfo\"], entry[\"msg\"]))\n+                    exception_info.chain = chain\n \n                 for section in reportdict[\"longrepr\"][\"sections\"]:\n                     exception_info.addsection(*section)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..5b05e0b 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -87,7 +87,15 @@ class BaseReport:\n                         entry_data['data'][key] = value.__dict__.copy()\n                 new_entries.append(entry_data)\n             reprtraceback['reprentries'] = new_entries\n-            return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n+            if hasattr(rep.longrepr, 'chain'):\n+                chain = []\n+                for entry in rep.longrepr.chain:\n+                    tb, exc, msg = entry\n+                    chain_entry = {'traceback': tb.__dict__.copy() if hasattr(tb, '__dict__') else None, 'excinfo': exc.__dict__.copy() if hasattr(exc, '__dict__') else None, 'msg': msg}\n+                    chain.append(chain_entry)\n+                return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections, 'chain': chain}\n+            else:\n+                return {'reprcrash': reprcrash, 'reprtraceback': reprtraceback, 'sections': rep.longrepr.sections}\n         d = self.__dict__.copy()\n         if hasattr(self.longrepr, 'toterminal'):\n             if hasattr(self.longrepr, 'reprtraceback') and hasattr(self.longrepr, 'reprcrash'):\n@@ -131,6 +139,15 @@ class BaseReport:\n                     unserialized_entries.append(reprentry)\n                 reprtraceback['reprentries'] = unserialized_entries\n                 exception_info = ReprExceptionInfo(reprtraceback=ReprTraceback(**reprtraceback), reprcrash=ReprFileLocation(**reprcrash))\n+                if 'chain' in reportdict['longrepr']:\n+                    chain = []\n+                    for entry in reportdict['longrepr']['chain']:\n+                        if entry['traceback'] is not None:\n+                            tb = ReprTraceback(**entry['traceback'])\n+                        else:\n+                            tb = None\n+                        chain.append((tb, entry['excinfo'], entry['msg']))\n+                    exception_info.chain = chain\n                 for section in reportdict['longrepr']['sections']:\n                     exception_info.addsection(*section)\n                 reportdict['longrepr'] = exception_info\n", "normalized_occurrence": 1}
