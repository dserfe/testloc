{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24443", "model_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex 0a601d4..51df5fc 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -333,14 +333,24 @@ def _check_homomorphism(domain, codomain, images):\n             # both indices\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    # For PermutationGroup, we need to map the element to a generator\n+                    elem = r[i]\n+                    # Check if it's an inverse of a generator\n+                    if elem in gens:\n+                        s = domain.generators[gens.index(elem)]\n+                    else:\n+                        # Check if it's an inverse\n+                        inv_elem = elem**-1\n+                        if inv_elem in gens:\n+                            s = domain.generators[gens.index(inv_elem)]\n+                            power = -power  # Adjust power for inverse\n+                        else:\n+                            s = elem\n                 else:\n                     s = r[i]\n                 if s in images:\n                     w = w*images[s]**power\n-                elif s**-1 in images:\n-                    w = w*images[s**-1]**power\n                 i += abs(power)\n                 j += 1\n             return w\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/combinatorics/homomorphisms.py b/sympy/combinatorics/homomorphisms.py\nindex c2fbe44..fd8e906 100644\n--- a/sympy/combinatorics/homomorphisms.py\n+++ b/sympy/combinatorics/homomorphisms.py\n@@ -202,14 +202,21 @@ def _check_homomorphism(domain, codomain, images):\n             j = 0\n             while i < len(r):\n                 power = r_arr[j][1]\n-                if isinstance(domain, PermutationGroup) and r[i] in gens:\n-                    s = domain.generators[gens.index(r[i])]\n+                if isinstance(domain, PermutationGroup):\n+                    elem = r[i]\n+                    if elem in gens:\n+                        s = domain.generators[gens.index(elem)]\n+                    else:\n+                        inv_elem = elem ** (-1)\n+                        if inv_elem in gens:\n+                            s = domain.generators[gens.index(inv_elem)]\n+                            power = -power\n+                        else:\n+                            s = elem\n                 else:\n                     s = r[i]\n                 if s in images:\n                     w = w * images[s] ** power\n-                elif s ** (-1) in images:\n-                    w = w * images[s ** (-1)] ** power\n                 i += abs(power)\n                 j += 1\n             return w\n", "normalized_occurrence": 1}
