{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2931", "model_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 7aa8a2f..e2c5cf0 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -683,11 +683,11 @@ def get_auth_from_url(url):\n     return auth\n \n \n-def to_native_string(string, encoding='ascii'):\n+def to_native_string(string, encoding='utf-8'):\n     \"\"\"\n     Given a string object, regardless of type, returns a representation of that\n     string in the native string type, encoding and decoding where necessary.\n-    This assumes ASCII unless told otherwise.\n+    This assumes UTF-8 unless told otherwise.\n     \"\"\"\n     out = None\n \n@@ -697,7 +697,10 @@ def to_native_string(string, encoding='ascii'):\n         if is_py2:\n             out = string.encode(encoding)\n         else:\n-            out = string.decode(encoding)\n+            if isinstance(string, bytes):\n+                out = string.decode(encoding)\n+            else:\n+                out = string\n \n     return out\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/utils.py b/requests/utils.py\nindex 69197df..3756295 100644\n--- a/requests/utils.py\n+++ b/requests/utils.py\n@@ -315,14 +315,16 @@ def get_auth_from_url(url):\n     except (AttributeError, TypeError):\n         auth = ('', '')\n     return auth\n-def to_native_string(string, encoding='ascii'):\n+def to_native_string(string, encoding='utf-8'):\n     out = None\n     if isinstance(string, builtin_str):\n         out = string\n     elif is_py2:\n         out = string.encode(encoding)\n-    else:\n+    elif isinstance(string, bytes):\n         out = string.decode(encoding)\n+    else:\n+        out = string\n     return out\n def urldefragauth(url):\n     scheme, netloc, path, params, query, fragment = urlparse(url)\n", "normalized_occurrence": 1}
