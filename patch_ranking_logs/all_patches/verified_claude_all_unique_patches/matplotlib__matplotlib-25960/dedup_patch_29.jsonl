{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25960", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex eeb18de..cc1d506 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1581,6 +1581,17 @@ default: %(va)s\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height.\n         \"\"\"\n+        # Get figure width and height\n+        width = self.get_figwidth()\n+        height = self.get_figheight()\n+\n+        # Calculate subfigure dimensions including spacing\n+        if wspace is None:\n+            wspace = rcParams['figure.subplot.wspace']\n+        if hspace is None:\n+            hspace = rcParams['figure.subplot.hspace']\n+\n+        # Create GridSpec with spacing\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self,\n                       wspace=wspace, hspace=hspace,\n                       width_ratios=width_ratios,\n@@ -1589,7 +1600,10 @@ default: %(va)s\n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                # Get the position that respects the spacing\n+                pos = gs[j, i].get_position(self)\n+                subfig_kwargs = {'bbox': pos, **kwargs}\n+                sfarr[j, i] = self.add_subfigure(gs[j, i], **subfig_kwargs)\n \n         if squeeze:\n             # Discarding unneeded dimensions that equal 1.  If we only have one\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 19ec421..cf932cb 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -410,11 +410,19 @@ class FigureBase(Artist):\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, **kwargs)\n         return gs\n     def subfigures(self, nrows=1, ncols=1, squeeze=True, wspace=None, hspace=None, width_ratios=None, height_ratios=None, **kwargs):\n+        width = self.get_figwidth()\n+        height = self.get_figheight()\n+        if wspace is None:\n+            wspace = rcParams['figure.subplot.wspace']\n+        if hspace is None:\n+            hspace = rcParams['figure.subplot.hspace']\n         gs = GridSpec(nrows=nrows, ncols=ncols, figure=self, wspace=wspace, hspace=hspace, width_ratios=width_ratios, height_ratios=height_ratios)\n         sfarr = np.empty((nrows, ncols), dtype=object)\n         for i in range(ncols):\n             for j in range(nrows):\n-                sfarr[j, i] = self.add_subfigure(gs[j, i], **kwargs)\n+                pos = gs[j, i].get_position(self)\n+                subfig_kwargs = {'bbox': pos, **kwargs}\n+                sfarr[j, i] = self.add_subfigure(gs[j, i], **subfig_kwargs)\n         if squeeze:\n             return sfarr.item() if sfarr.size == 1 else sfarr.squeeze()\n         else:\n", "normalized_occurrence": 1}
