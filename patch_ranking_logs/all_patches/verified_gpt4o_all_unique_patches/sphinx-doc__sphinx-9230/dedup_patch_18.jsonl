{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9230", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..6c93f46 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -93,7 +93,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n                 arg['param'] = True\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[1:])\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n@@ -111,8 +111,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_name('', f'type {name}')\n+            field += nodes.field_body('', nodes.paragraph('', f'({annotation})'))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -143,7 +143,7 @@ def augment_descriptions_with_types(\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n                 # :param xxx yyy:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[1:])\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n@@ -160,8 +160,8 @@ def augment_descriptions_with_types(\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_name('', f'type {name}')\n+            field += nodes.field_body('', nodes.paragraph('', f'({annotations[name]})'))\n             node += field\n \n     # Add 'rtype' if 'return' is present and 'rtype' isn't.\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..5f4d087 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -63,7 +63,7 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n                 arg = arguments.setdefault(parts[1], {})\n                 arg['param'] = True\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[1:])\n                 arg = arguments.setdefault(name, {})\n                 arg['param'] = True\n                 arg['type'] = True\n@@ -79,8 +79,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotation))\n+            field += nodes.field_name('', f'type {name}')\n+            field += nodes.field_body('', nodes.paragraph('', f'({annotation})'))\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n@@ -103,7 +103,7 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             if len(parts) == 2:\n                 has_description.add(parts[1])\n             elif len(parts) > 2:\n-                name = ' '.join(parts[2:])\n+                name = ' '.join(parts[1:])\n                 has_description.add(name)\n                 has_type.add(name)\n         elif parts[0] == 'type':\n@@ -118,8 +118,8 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             continue\n         if name in has_description and name not in has_type:\n             field = nodes.field()\n-            field += nodes.field_name('', 'type ' + name)\n-            field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n+            field += nodes.field_name('', f'type {name}')\n+            field += nodes.field_body('', nodes.paragraph('', f'({annotations[name]})'))\n             node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n", "normalized_occurrence": 1}
