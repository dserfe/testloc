{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24102", "model_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 3e3bc62..326a4c9 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -606,7 +606,7 @@ class MathematicaParser:\n         if self._regex_tokenizer is not None:\n             # Check if the regular expression has already been compiled:\n             return self._regex_tokenizer\n-        tokens = [self._literal, self._number]\n+        tokens = [r'[^\\W\\d_]', self._literal, self._number]  # Add Unicode letter pattern\n         tokens_escape = self._enclosure_open[:] + self._enclosure_close[:]\n         for typ, strat, symdict in self._mathematica_op_precedence:\n             for k in symdict:\n", "occurrence": 2, "normalized_patch": "diff --git a/sympy/parsing/mathematica.py b/sympy/parsing/mathematica.py\nindex 957d6fe..5310bde 100644\n--- a/sympy/parsing/mathematica.py\n+++ b/sympy/parsing/mathematica.py\n@@ -232,7 +232,7 @@ class MathematicaParser:\n     def _get_tokenizer(self):\n         if self._regex_tokenizer is not None:\n             return self._regex_tokenizer\n-        tokens = [self._literal, self._number]\n+        tokens = ['[^\\\\W\\\\d_]', self._literal, self._number]\n         tokens_escape = self._enclosure_open[:] + self._enclosure_close[:]\n         for typ, strat, symdict in self._mathematica_op_precedence:\n             for k in symdict:\n", "normalized_occurrence": 2}
