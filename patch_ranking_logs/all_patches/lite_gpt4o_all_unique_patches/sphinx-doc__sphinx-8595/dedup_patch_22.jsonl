{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8595", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 598a973..ce5768e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1073,8 +1073,8 @@ class ModuleDocumenter(Documenter):\n \n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n-        if want_all:\n-            if not self.__all__:\n+        if want_all and self.__all__ is not None:\n+            if len(self.__all__) == 0:\n                 # for implicit module members, check __module__ to avoid\n                 # documenting imported objects\n                 return True, list(members.values())\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex af206f1..f817260 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -574,8 +574,8 @@ class ModuleDocumenter(Documenter):\n         return members\n     def get_object_members(self, want_all: bool) -> Tuple[bool, ObjectMembers]:\n         members = self.get_module_members()\n-        if want_all:\n-            if not self.__all__:\n+        if want_all and self.__all__ is not None:\n+            if len(self.__all__) == 0:\n                 return (True, list(members.values()))\n             else:\n                 for member in members.values():\n", "normalized_occurrence": 1}
