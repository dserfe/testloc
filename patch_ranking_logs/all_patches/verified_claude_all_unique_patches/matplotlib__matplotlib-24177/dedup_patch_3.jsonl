{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24177", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 36d6e8e..395245b 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -6737,6 +6737,7 @@ such objects\n             hist_kwargs['range'] = bin_range\n \n         density = bool(density)\n+        manual_density_norm = density and not stacked and histtype.startswith('step')\n         if density and not stacked:\n             hist_kwargs['density'] = density\n \n@@ -6750,6 +6751,12 @@ such objects\n             tops.append(m)\n         tops = np.array(tops, float)  # causes problems later if it's an int\n         bins = np.array(bins, float)  # causes problems if float16\n+        \n+        # Manual density normalization for step histograms\n+        if manual_density_norm:\n+            db = np.diff(bins)\n+            for i in range(len(tops)):\n+                tops[i] = tops[i] / (tops[i].sum() * db)\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             # If a stacked density plot, normalize so the area of all the\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 63bfb92..cfc027d 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -1943,6 +1943,7 @@ class Axes(_AxesBase):\n         else:\n             hist_kwargs['range'] = bin_range\n         density = bool(density)\n+        manual_density_norm = density and (not stacked) and histtype.startswith('step')\n         if density and (not stacked):\n             hist_kwargs['density'] = density\n         tops = []\n@@ -1951,6 +1952,10 @@ class Axes(_AxesBase):\n             tops.append(m)\n         tops = np.array(tops, float)\n         bins = np.array(bins, float)\n+        if manual_density_norm:\n+            db = np.diff(bins)\n+            for i in range(len(tops)):\n+                tops[i] = tops[i] / (tops[i].sum() * db)\n         if stacked:\n             tops = tops.cumsum(axis=0)\n             if density:\n", "normalized_occurrence": 1}
