{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10297", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex c320acd..7aa4e6f 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1301,6 +1301,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n         weights inversely proportional to class frequencies in the input data\n         as ``n_samples / (n_classes * np.bincount(y))``\n \n+    store_cv_values : boolean, default=False\n+        If True, the cross-validation values are stored in the `cv_values_`\n+        attribute (see below). This flag is only compatible with `cv=None`\n+        (i.e., with Generalized Cross-Validation).\n+\n     Attributes\n     ----------\n     cv_values_ : array, shape = [n_samples, n_alphas] or \\\n@@ -1333,7 +1338,8 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None, store_cv_values=False):\n+        self.store_cv_values = store_cv_values\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n             scoring=scoring, cv=cv)\n@@ -1357,6 +1363,8 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n         Returns\n         -------\n         self : object\n+        if self.store_cv_values:\n+            self.cv_values_ = np.empty((X.shape[0], len(self.alphas)), dtype=np.float64)\n         \"\"\"\n         check_X_y(X, y, accept_sparse=['csr', 'csc', 'coo'],\n                   multi_output=True)\n@@ -1378,4 +1386,4 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n \n     @property\n     def classes_(self):\n-        return self._label_binarizer.classes_\n+        return self._label_binarizer.classes_\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex e8baf60..e0c8f59 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -415,7 +415,8 @@ class _BaseRidgeCV(LinearModel):\n class RidgeCV(_BaseRidgeCV, RegressorMixin):\n     pass\n class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n-    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True, normalize=False, scoring=None, cv=None, class_weight=None):\n+    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True, normalize=False, scoring=None, cv=None, class_weight=None, store_cv_values=False):\n+        self.store_cv_values = store_cv_values\n         super(RidgeClassifierCV, self).__init__(alphas=alphas, fit_intercept=fit_intercept, normalize=normalize, scoring=scoring, cv=cv)\n         self.class_weight = class_weight\n     def fit(self, X, y, sample_weight=None):\n", "normalized_occurrence": 1}
