{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e64dbc9..21d1ca3 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1211,13 +1211,17 @@ class Exists(Subquery):\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n+        # If the subquery is empty, return a SQL statement that always evaluates to False\n+        try:\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+        except EmptyResultSet:\n+            sql, params = '0 = 1', []\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return sql, params\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ee0d94d..2fdc41a 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -756,7 +756,10 @@ class Exists(Subquery):\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n         query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n+        try:\n+            sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n+        except EmptyResultSet:\n+            sql, params = ('0 = 1', [])\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n         return (sql, params)\n", "normalized_occurrence": 1}
