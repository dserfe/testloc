{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex d48a6e6..71b3a94 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,18 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            # Select the variable data\n+            selected = self.sel({variable_dim: k}, drop=True)\n+            \n+            # Get the remaining dimensions after selection\n+            remaining_dims = set(selected.dims) - {dim}\n+            \n+            # Remove any remaining NaN levels by dropping them\n+            for level_name in idx.names:\n+                if level_name != variable_dim and level_name not in remaining_dims:\n+                    selected = selected.dropna(level_name)\n+            \n+            data_dict[k] = selected.squeeze()\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 3d86f26..7c3692f 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -534,7 +534,12 @@ class DataArray(AbstractArray, DataWithCoords):\n         variable_dim = idx.names[level_number]\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            selected = self.sel({variable_dim: k}, drop=True)\n+            remaining_dims = set(selected.dims) - {dim}\n+            for level_name in idx.names:\n+                if level_name != variable_dim and level_name not in remaining_dims:\n+                    selected = selected.dropna(level_name)\n+            data_dict[k] = selected.squeeze()\n         return Dataset(data_dict)\n     def transpose(self, *dims: Hashable, transpose_coords: bool=True) -> 'DataArray':\n         if dims:\n", "normalized_occurrence": 1}
