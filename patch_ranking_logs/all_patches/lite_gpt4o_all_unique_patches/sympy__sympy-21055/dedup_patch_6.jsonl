{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21055", "model_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex a2076bf..38a1ef6 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -1,3 +1,4 @@\n+\n from typing import Dict, Callable\n \n from sympy.core import S, Add, Expr, Basic, Mul\n@@ -54,6 +55,15 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n+    if isinstance(expr, Piecewise):\n+        new_args = []\n+        for e, c in expr.args:\n+            new_cond = refine(c, assumptions)\n+            if new_cond == True:\n+                return refine(e, assumptions)\n+            new_args.append((refine(e, assumptions), new_cond))\n+        return expr.func(*new_args)\n+\n     name = expr.__class__.__name__\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/assumptions/refine.py b/sympy/assumptions/refine.py\nindex 6dc9fb1..4dd6d25 100644\n--- a/sympy/assumptions/refine.py\n+++ b/sympy/assumptions/refine.py\n@@ -12,6 +12,14 @@ def refine(expr, assumptions=True):\n         ref_expr = expr._eval_refine(assumptions)\n         if ref_expr is not None:\n             return ref_expr\n+    if isinstance(expr, Piecewise):\n+        new_args = []\n+        for e, c in expr.args:\n+            new_cond = refine(c, assumptions)\n+            if new_cond == True:\n+                return refine(e, assumptions)\n+            new_args.append((refine(e, assumptions), new_cond))\n+        return expr.func(*new_args)\n     name = expr.__class__.__name__\n     handler = handlers_dict.get(name, None)\n     if handler is None:\n", "normalized_occurrence": 1}
