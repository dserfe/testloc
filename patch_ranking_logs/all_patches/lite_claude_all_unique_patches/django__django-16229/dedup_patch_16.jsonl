{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..fb2bfb7 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -517,17 +517,23 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n-        if callable(value):\n-            value = value()\n-        # If this is an auto-generated default date, nix the microseconds\n-        # for standardized handling. See #22502.\n-        if (\n-            isinstance(value, (datetime.datetime, datetime.time))\n-            and not field.widget.supports_microseconds\n-        ):\n-            value = value.replace(microsecond=0)\n-        return value\n+        if field_name not in self._bound_callable_initial:\n+            value = self.initial.get(field_name, field.initial)\n+            if callable(value):\n+                value = value()\n+                # Cache the evaluated callable for consistency\n+                self._bound_callable_initial[field_name] = value\n+            # If this is an auto-generated default date, nix the microseconds\n+            # for standardized handling. See #22502.\n+            if (\n+                isinstance(value, (datetime.datetime, datetime.time))\n+                and not field.widget.supports_microseconds\n+            ):\n+                value = value.replace(microsecond=0)\n+            if field_name not in self._bound_callable_initial:\n+                self._bound_callable_initial[field_name] = value\n+            return value\n+        return self._bound_callable_initial[field_name]\n \n \n class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n@@ -536,4 +542,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..60972c8 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -367,12 +367,17 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n-        if callable(value):\n-            value = value()\n-        if isinstance(value, (datetime.datetime, datetime.time)) and (not field.widget.supports_microseconds):\n-            value = value.replace(microsecond=0)\n-        return value\n+        if field_name not in self._bound_callable_initial:\n+            value = self.initial.get(field_name, field.initial)\n+            if callable(value):\n+                value = value()\n+                self._bound_callable_initial[field_name] = value\n+            if isinstance(value, (datetime.datetime, datetime.time)) and (not field.widget.supports_microseconds):\n+                value = value.replace(microsecond=0)\n+            if field_name not in self._bound_callable_initial:\n+                self._bound_callable_initial[field_name] = value\n+            return value\n+        return self._bound_callable_initial[field_name]\n \n class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     \"\"\"A collection of Fields, plus their associated data.\"\"\"\n\\ No newline at end of file\n", "normalized_occurrence": 1}
