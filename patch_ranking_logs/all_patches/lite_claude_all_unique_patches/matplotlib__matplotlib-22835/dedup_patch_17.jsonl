{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 1878dd6..05d165b 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1903,13 +1903,37 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Compute an approximate inverse of the normalization.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            Array of values between 0 and 1 to convert to boundaries.\n+\n+        Returns\n+        -------\n+        array-like\n+            The approximate boundary values corresponding to the normalized values.\n+            For values corresponding to a region, returns the center of that region.\n         \"\"\"\n-        raise ValueError(\"BoundaryNorm is not invertible\")\n+        # Convert value to array\n+        value = np.asarray(value)\n+        \n+        # Scale from [0, 1] to boundary indices\n+        x = value * (len(self.boundaries) - 1)\n+        x = np.clip(x, 0, len(self.boundaries) - 2)\n+        \n+        # Get indices of regions\n+        indices = x.astype(int)\n+        \n+        # Return middle points of regions\n+        result = (self.boundaries[indices] + self.boundaries[indices + 1]) / 2\n+        \n+        # Handle scalar input\n+        if np.ndim(value) == 0:\n+            result = float(result)\n+            \n+        return result\n \n \n class NoNorm(Normalize):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b4a7c6b..ab1f929 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1631,13 +1631,27 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Compute an approximate inverse of the normalization.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            Array of values between 0 and 1 to convert to boundaries.\n+\n+        Returns\n+        -------\n+        array-like\n+            The approximate boundary values corresponding to the normalized values.\n+            For values corresponding to a region, returns the center of that region.\n         \"\"\"\n-        raise ValueError('BoundaryNorm is not invertible')\n+        value = np.asarray(value)\n+        x = value * (len(self.boundaries) - 1)\n+        x = np.clip(x, 0, len(self.boundaries) - 2)\n+        indices = x.astype(int)\n+        result = (self.boundaries[indices] + self.boundaries[indices + 1]) / 2\n+        if np.ndim(value) == 0:\n+            result = float(result)\n+        return result\n \n class NoNorm(Normalize):\n     \"\"\"\n", "normalized_occurrence": 1}
