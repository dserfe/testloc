{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18698", "model_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex fbdbcb2..47c0cfc 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -324,8 +324,22 @@ def dup_sqf_list(f, K, all=False):\n         if not h:\n             result.append((p, i))\n             break\n+            break\n+\n+        while True:\n+            g, p, q = dup_inner_gcd(p, h, K)\n+\n+            if all or dup_degree(g) > 0:\n+                result.append((g, i))\n+\n+            i += 1\n+\n+            d = dup_diff(p, 1, K)\n+            h = dup_sub(q, d, K)\n \n-        g, p, q = dup_inner_gcd(p, h, K)\n+            if not h:\n+                result.append((p, i))\n+                break\n \n         if all or dup_degree(g) > 0:\n             result.append((g, i))\n@@ -335,7 +349,7 @@ def dup_sqf_list(f, K, all=False):\n     return coeff, result\n \n \n-def dup_sqf_list_include(f, K, all=False):\n+def dup_sqf_list_include(f, K, all=True):\n     \"\"\"\n     Return square-free decomposition of a polynomial in ``K[x]``.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/sqfreetools.py b/sympy/polys/sqfreetools.py\nindex 09fb2b6..0df0c27 100644\n--- a/sympy/polys/sqfreetools.py\n+++ b/sympy/polys/sqfreetools.py\n@@ -113,12 +113,22 @@ def dup_sqf_list(f, K, all=False):\n         if not h:\n             result.append((p, i))\n             break\n-        g, p, q = dup_inner_gcd(p, h, K)\n+            break\n+        while True:\n+            g, p, q = dup_inner_gcd(p, h, K)\n+            if all or dup_degree(g) > 0:\n+                result.append((g, i))\n+            i += 1\n+            d = dup_diff(p, 1, K)\n+            h = dup_sub(q, d, K)\n+            if not h:\n+                result.append((p, i))\n+                break\n         if all or dup_degree(g) > 0:\n             result.append((g, i))\n         i += 1\n     return (coeff, result)\n-def dup_sqf_list_include(f, K, all=False):\n+def dup_sqf_list_include(f, K, all=True):\n     coeff, factors = dup_sqf_list(f, K, all=all)\n     if factors and factors[0][1] == 1:\n         g = dup_mul_ground(factors[0][0], coeff, K)\n", "normalized_occurrence": 1}
