{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-15535", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex be26d08..1b9de9c 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -457,7 +457,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         if all(isinstance(dtype, np.dtype) for dtype in dtypes_orig):\n             dtype_orig = np.result_type(*array.dtypes)\n \n-    if dtype_numeric:\n+    if dtype_numeric and dtype_orig.kind == \"O\" and not np.issubdtype(dtype_orig, np.number):\n+        # If input is an object with non-numeric data, leave dtype as is.\n+        dtype = None\n+    elif dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n             # if input is object, convert to float.\n             dtype = np.float64\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 8ce0584..1fb8211 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -135,7 +135,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         dtypes_orig = np.array(array.dtypes)\n         if all((isinstance(dtype, np.dtype) for dtype in dtypes_orig)):\n             dtype_orig = np.result_type(*array.dtypes)\n-    if dtype_numeric:\n+    if dtype_numeric and dtype_orig.kind == 'O' and (not np.issubdtype(dtype_orig, np.number)):\n+        dtype = None\n+    elif dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == 'O':\n             dtype = np.float64\n         else:\n", "normalized_occurrence": 1}
