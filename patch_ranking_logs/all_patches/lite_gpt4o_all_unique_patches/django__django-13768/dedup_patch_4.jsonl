{"model_name_or_path": "agentless", "instance_id": "django__django-13768", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..3a08fb1 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -204,7 +204,13 @@ class Signal:\n         # Call each receiver with whatever arguments it can accept.\n         # Return a list of tuple pairs [(receiver, response), ... ].\n         responses = []\n+        import logging\n+        logger = logging.getLogger(__name__)\n         for receiver in self._live_receivers(sender):\n+            try:\n+                response = receiver(signal=self, sender=sender, **named)\n+            except Exception as err:\n+                logger.exception(\"Error calling receiver %s\", receiver)\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex 0417315..84a0524 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -67,7 +67,13 @@ class Signal:\n         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:\n             return []\n         responses = []\n+        import logging\n+        logger = logging.getLogger(__name__)\n         for receiver in self._live_receivers(sender):\n+            try:\n+                response = receiver(signal=self, sender=sender, **named)\n+            except Exception as err:\n+                logger.exception('Error calling receiver %s', receiver)\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n", "normalized_occurrence": 1}
