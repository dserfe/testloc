{"model_name_or_path": "agentless", "instance_id": "django__django-14016", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex ce7aa22..14d9d1f 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -44,6 +44,10 @@ class Q(tree.Node):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n \n+        # Convert non-pickleable types to pickleable types\n+        self._make_pickleable()\n+        other._make_pickleable()\n+\n         # If the other Q() is empty, ignore it and just use `self`.\n         if not other:\n             return copy.deepcopy(self)\n@@ -69,6 +73,11 @@ class Q(tree.Node):\n         obj.negate()\n         return obj\n \n+    def _make_pickleable(self):\n+        for i, (key, value) in enumerate(self.children):\n+            if hasattr(value, 'keys'):\n+                self.children[i] = (key, list(value))\n+\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         # We must promote any new joins to left outer joins so that when Q is\n         # used as an expression, rows aren't filtered due to joins.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex d1b043f..b23aa22 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -20,6 +20,8 @@ class Q(tree.Node):\n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n             raise TypeError(other)\n+        self._make_pickleable()\n+        other._make_pickleable()\n         if not other:\n             return copy.deepcopy(self)\n         elif not self:\n@@ -38,6 +40,10 @@ class Q(tree.Node):\n         obj.add(self, self.AND)\n         obj.negate()\n         return obj\n+    def _make_pickleable(self):\n+        for i, (key, value) in enumerate(self.children):\n+            if hasattr(value, 'keys'):\n+                self.children[i] = (key, list(value))\n     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False, for_save=False):\n         clause, joins = query._add_q(self, reuse, allow_joins=allow_joins, split_subq=False, check_filterable=False)\n         query.promote_joins(joins)\n", "normalized_occurrence": 1}
