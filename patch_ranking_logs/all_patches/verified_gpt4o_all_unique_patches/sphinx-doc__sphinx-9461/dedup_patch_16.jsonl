{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9461", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 00b90de..901736c 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -2057,7 +2057,7 @@ class NewTypeDataDocumenter(DataDocumenter):\n         return inspect.isNewType(member) and isattr\n \n \n-class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type: ignore\n+class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter, PropertyDocumenter):  # type: ignore\n     \"\"\"\n     Specialized Documenter subclass for methods (normal, static and class).\n     \"\"\"\n@@ -2069,7 +2069,7 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n-        return inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)\n+        return (inspect.isroutine(member) and not isinstance(parent, ModuleDocumenter)) or (inspect.isclassmethod(member) and inspect.isproperty(member))\n \n     def import_object(self, raiseerror: bool = False) -> bool:\n         ret = super().import_object(raiseerror)\n@@ -2130,7 +2130,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isproperty(obj) and inspect.isclassmethod(obj):\n+            self.add_line('   :classmethod-property:', sourcename)\n+        elif inspect.isclassmethod(obj):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ee3bdad..38d5b3e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1193,14 +1193,14 @@ class NewTypeDataDocumenter(DataDocumenter):\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n         return inspect.isNewType(member) and isattr\n-class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n+class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter, PropertyDocumenter):\n     objtype = 'method'\n     directivetype = 'method'\n     member_order = 50\n     priority = 1\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any) -> bool:\n-        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter))\n+        return inspect.isroutine(member) and (not isinstance(parent, ModuleDocumenter)) or (inspect.isclassmethod(member) and inspect.isproperty(member))\n     def import_object(self, raiseerror: bool=False) -> bool:\n         ret = super().import_object(raiseerror)\n         if not ret:\n@@ -1241,7 +1241,9 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):\n             self.add_line('   :abstractmethod:', sourcename)\n         if inspect.iscoroutinefunction(obj):\n             self.add_line('   :async:', sourcename)\n-        if inspect.isclassmethod(obj):\n+        if inspect.isproperty(obj) and inspect.isclassmethod(obj):\n+            self.add_line('   :classmethod-property:', sourcename)\n+        elif inspect.isclassmethod(obj):\n             self.add_line('   :classmethod:', sourcename)\n         if inspect.isstaticmethod(obj, cls=self.parent, name=self.object_name):\n             self.add_line('   :staticmethod:', sourcename)\n", "normalized_occurrence": 1}
