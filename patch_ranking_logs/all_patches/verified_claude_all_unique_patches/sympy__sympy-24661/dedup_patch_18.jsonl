{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..0297339 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -945,6 +945,16 @@ def parse_expr(s: str, local_dict: Optional[DICT] = None,\n     ========\n \n     >>> from sympy.parsing.sympy_parser import parse_expr\n+\n+# Mapping of comparison operators to SymPy classes\n+_comp_ops = {\n+    '<': 'Lt',\n+    '>': 'Gt',\n+    '<=': 'Le',\n+    '>=': 'Ge',\n+    '==': 'Eq',\n+    '!=': 'Ne'\n+}\n     >>> parse_expr(\"1/2\")\n     1/2\n     >>> type(_)\n@@ -1091,6 +1101,8 @@ def evaluateFalse(s: str):\n     \"\"\"\n     Replaces operators with the SymPy equivalent and sets evaluate=False.\n     \"\"\"\n+    # Add evaluate=False parameter to all comparison operations\n+    s = re.sub(r'([<>]=?|==|!=)', lambda m: f'sympy.core.relational.{_comp_ops[m.group()]}(evaluate=False)', s)\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     # node is a Module, we want an Expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..7a28fc3 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -522,6 +522,7 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n             local_dict[i] = null\n         raise e from ValueError(f'Error from parse_expr with transformed code: {code!r}')\n def evaluateFalse(s: str):\n+    s = re.sub('([<>]=?|==|!=)', lambda m: f'sympy.core.relational.{_comp_ops[m.group()]}(evaluate=False)', s)\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n", "normalized_occurrence": 1}
