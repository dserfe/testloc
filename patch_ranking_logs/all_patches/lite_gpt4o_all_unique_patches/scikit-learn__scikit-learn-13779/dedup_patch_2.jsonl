{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13779", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 858d868..12540e0 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -29,7 +29,9 @@ from ..utils import Bunch\n \n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n     \"\"\"Private function used to fit an estimator within a job.\"\"\"\n-    if sample_weight is not None:\n+    if estimator is None:\n+        return None\n+    elif sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n         estimator.fit(X, y)\n@@ -91,9 +93,9 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n                              'required!')\n \n         self.estimators_ = Parallel(n_jobs=self.n_jobs)(\n-                delayed(_parallel_fit_estimator)(clone(clf), X, y,\n-                                                 sample_weight=sample_weight)\n-                for clf in clfs if clf is not None)\n+            delayed(_parallel_fit_estimator)(clone(clf) if clf is not None else None, X, y,\n+                                             sample_weight=sample_weight)\n+            for clf in clfs)\n \n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex c17361f..f39493f 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -10,7 +10,9 @@ from ..utils.validation import has_fit_parameter, check_is_fitted\n from ..utils.metaestimators import _BaseComposition\n from ..utils import Bunch\n def _parallel_fit_estimator(estimator, X, y, sample_weight=None):\n-    if sample_weight is not None:\n+    if estimator is None:\n+        return None\n+    elif sample_weight is not None:\n         estimator.fit(X, y, sample_weight=sample_weight)\n     else:\n         estimator.fit(X, y)\n@@ -42,7 +44,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n         n_isnone = np.sum([clf is None for _, clf in self.estimators])\n         if n_isnone == len(self.estimators):\n             raise ValueError('All estimators are None. At least one is required!')\n-        self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clone(clf), X, y, sample_weight=sample_weight) for clf in clfs if clf is not None))\n+        self.estimators_ = Parallel(n_jobs=self.n_jobs)((delayed(_parallel_fit_estimator)(clone(clf) if clf is not None else None, X, y, sample_weight=sample_weight) for clf in clfs))\n         self.named_estimators_ = Bunch()\n         for k, e in zip(self.estimators, self.estimators_):\n             self.named_estimators_[k[0]] = e\n", "normalized_occurrence": 1}
