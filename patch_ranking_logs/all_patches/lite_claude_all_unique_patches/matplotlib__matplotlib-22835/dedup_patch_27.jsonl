{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-22835", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 1878dd6..fbbec13 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1903,13 +1903,26 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Compute an approximate inverse of the normalization.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            Array of normalized values between 0 and 1.\n+\n+        Returns\n+        -------\n+        scalar or array-like\n+            The approximate inverse of the normalization. For values between\n+            boundaries, returns the midpoint of the corresponding interval.\n         \"\"\"\n-        raise ValueError(\"BoundaryNorm is not invertible\")\n+        # Convert from [0, 1] to boundary indices\n+        value = np.asarray(value)\n+        x = value * (len(self.boundaries) - 1)\n+        x = np.clip(x.astype(int), 0, len(self.boundaries) - 2)\n+        \n+        # Return midpoint of the corresponding interval\n+        return (self.boundaries[x] + self.boundaries[x + 1]) / 2\n \n \n class NoNorm(Normalize):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex b4a7c6b..ee3d507 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1631,13 +1631,23 @@ class BoundaryNorm(Normalize):\n \n     def inverse(self, value):\n         \"\"\"\n-        Raises\n-        ------\n-        ValueError\n-            BoundaryNorm is not invertible, so calling this method will always\n-            raise an error\n+        Compute an approximate inverse of the normalization.\n+\n+        Parameters\n+        ----------\n+        value : array-like\n+            Array of normalized values between 0 and 1.\n+\n+        Returns\n+        -------\n+        scalar or array-like\n+            The approximate inverse of the normalization. For values between\n+            boundaries, returns the midpoint of the corresponding interval.\n         \"\"\"\n-        raise ValueError('BoundaryNorm is not invertible')\n+        value = np.asarray(value)\n+        x = value * (len(self.boundaries) - 1)\n+        x = np.clip(x.astype(int), 0, len(self.boundaries) - 2)\n+        return (self.boundaries[x] + self.boundaries[x + 1]) / 2\n \n class NoNorm(Normalize):\n     \"\"\"\n", "normalized_occurrence": 1}
