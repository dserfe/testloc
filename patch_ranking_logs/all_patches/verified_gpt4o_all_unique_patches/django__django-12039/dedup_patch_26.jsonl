{"model_name_or_path": "agentless", "instance_id": "django__django-12039", "model_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 1e5b986..f297909 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -84,7 +84,10 @@ class Columns(TableColumns):\n     def __str__(self):\n         def col_str(column, idx):\n             try:\n-                return self.quote_name(column) + self.col_suffixes[idx]\n+                suffix = self.col_suffixes[idx]\n+                if suffix:\n+                    return self.quote_name(column) + ' ' + suffix\n+                return self.quote_name(column)\n             except IndexError:\n                 return self.quote_name(column)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py\nindex 285a76a..a932b18 100644\n--- a/django/db/backends/ddl_references.py\n+++ b/django/db/backends/ddl_references.py\n@@ -41,7 +41,10 @@ class Columns(TableColumns):\n     def __str__(self):\n         def col_str(column, idx):\n             try:\n-                return self.quote_name(column) + self.col_suffixes[idx]\n+                suffix = self.col_suffixes[idx]\n+                if suffix:\n+                    return self.quote_name(column) + ' ' + suffix\n+                return self.quote_name(column)\n             except IndexError:\n                 return self.quote_name(column)\n         return ', '.join((col_str(column, idx) for idx, column in enumerate(self.columns)))\n", "normalized_occurrence": 1}
