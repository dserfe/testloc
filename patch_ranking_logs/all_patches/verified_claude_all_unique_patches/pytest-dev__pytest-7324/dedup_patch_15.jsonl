{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ec70dcc..926cb36 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -933,6 +933,9 @@ class AssertionRewriter(ast.NodeVisitor):\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n+        # Special handling for True, False, None which are names but actually constants\n+        if name.id in ('True', 'False', 'None'):\n+            return name, name.id\n         # Display the repr of the name if it's a local variable or\n         # _should_repr_global_name() thinks it's acceptable.\n         locs = ast.Call(self.builtin(\"locals\"), [], [])\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 824bf26..c9283cf 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -489,6 +489,8 @@ class AssertionRewriter(ast.NodeVisitor):\n             set_location(stmt, assert_.lineno, assert_.col_offset)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n+        if name.id in ('True', 'False', 'None'):\n+            return (name, name.id)\n         locs = ast.Call(self.builtin('locals'), [], [])\n         inlocs = ast.Compare(ast.Str(name.id), [ast.In()], [locs])\n         dorepr = self.helper('_should_repr_global_name', name)\n", "normalized_occurrence": 24}
