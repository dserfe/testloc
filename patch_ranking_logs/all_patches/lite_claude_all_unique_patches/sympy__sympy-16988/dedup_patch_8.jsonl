{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..817e4a0 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1261,6 +1261,9 @@ class Intersection(Set, LatticeOp):\n \n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n+        \n+        # Remove duplicates early by converting to set and back to list\n+        args = list(OrderedDict.fromkeys(args))\n \n         # Reduce sets using known rules\n         if evaluate:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..c620b43 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -474,6 +474,7 @@ class Intersection(Set, LatticeOp):\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n         args = _sympify(args)\n+        args = list(OrderedDict.fromkeys(args))\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n             return simplify_intersection(args)\n", "normalized_occurrence": 1}
