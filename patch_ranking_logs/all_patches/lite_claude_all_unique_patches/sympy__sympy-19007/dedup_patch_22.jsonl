{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..8918542 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,23 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy import Piecewise\n+        # For symbolic indices, we need to return a Piecewise expression\n+        curr_row = 0\n+        result = None\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            curr_col = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                cond = ((curr_row <= i) & (i < curr_row + numrows) &\n+                       (curr_col <= j) & (j < curr_col + numcols))\n+                entry = self.blocks[row_block, col_block][i - curr_row, j - curr_col]\n+                result = entry if result is None else Piecewise(\n+                    (entry, cond),\n+                    (result, True)\n+                )\n+                curr_col += numcols\n+            curr_row += numrows\n+        return result\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..2d6acaa 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,18 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n+        curr_row = 0\n+        result = None\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n-        for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            curr_col = 0\n+            for col_block, numcols in enumerate(self.colblocksizes):\n+                cond = (curr_row <= i) & (i < curr_row + numrows) & (curr_col <= j) & (j < curr_col + numcols)\n+                entry = self.blocks[row_block, col_block][i - curr_row, j - curr_col]\n+                result = entry if result is None else Piecewise((entry, cond), (result, True))\n+                curr_col += numcols\n+            curr_row += numrows\n+        return result\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
