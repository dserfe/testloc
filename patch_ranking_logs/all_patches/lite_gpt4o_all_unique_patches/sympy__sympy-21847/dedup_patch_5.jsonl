{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21847", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 9019221..71751bd 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -119,17 +119,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n         # Force to list in case of passed tuple or other incompatible collection\n         variables = list(variables) + [S.One]\n         if all(variable.is_commutative for variable in variables):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in combinations_with_replacement(variables, degree):\n+                    yield Mul(*item)\n         else:\n             monomials_list_non_comm = []\n             for item in product(variables, repeat=max_degree):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 7c8de23..5f5f8ce 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -41,17 +41,9 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n             return\n         variables = list(variables) + [S.One]\n         if all((variable.is_commutative for variable in variables)):\n-            monomials_list_comm = []\n-            for item in combinations_with_replacement(variables, max_degree):\n-                powers = dict()\n-                for variable in variables:\n-                    powers[variable] = 0\n-                for variable in item:\n-                    if variable != 1:\n-                        powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n-                    monomials_list_comm.append(Mul(*item))\n-            yield from set(monomials_list_comm)\n+            for degree in range(min_degree, max_degree + 1):\n+                for item in combinations_with_replacement(variables, degree):\n+                    yield Mul(*item)\n         else:\n             monomials_list_non_comm = []\n             for item in product(variables, repeat=max_degree):\n", "normalized_occurrence": 1}
