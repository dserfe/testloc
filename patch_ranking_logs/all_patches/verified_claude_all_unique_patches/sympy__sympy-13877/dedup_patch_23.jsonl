{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..d4af989 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -380,7 +380,7 @@ class MatrixDeterminant(MatrixCommon):\n         return self._new(self.rows, self.cols,\n                          lambda i, j: self.cofactor(i, j, method))\n \n-    def det(self, method=\"bareiss\"):\n+    def det(self, method=\"berkowitz\"):\n         \"\"\"Computes the determinant of a matrix.  If the matrix\n         is at most 3x3, a hard-coded formula is used.\n         Otherwise, the determinant using the method `method`.\n@@ -390,6 +390,12 @@ class MatrixDeterminant(MatrixCommon):\n           bareis\n           berkowitz\n           lu\n+\n+        Notes\n+        =====\n+        The Berkowitz algorithm is the default because it is the most\n+        general purpose - working efficiently for both sparse and dense symbolic\n+        matrices. The Bareiss algorithm is only valid for integer matrices.\n         \"\"\"\n \n         # sanitize `method`\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..48cfbdd 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -118,7 +118,7 @@ class MatrixDeterminant(MatrixCommon):\n         if self.rows != self.cols or self.rows < 1:\n             raise NonSquareMatrixError()\n         return self._new(self.rows, self.cols, lambda i, j: self.cofactor(i, j, method))\n-    def det(self, method='bareiss'):\n+    def det(self, method='berkowitz'):\n         method = method.lower()\n         if method == 'bareis':\n             method = 'bareiss'\n", "normalized_occurrence": 4}
