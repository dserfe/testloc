{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9258", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..87e339a 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -30,9 +30,17 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation_str = typing.stringify(param.annotation)\n+                    # Handle union types with | operator\n+                    if hasattr(param.annotation, '__origin__') and param.annotation.__origin__ is Union:\n+                        annotation_str = ' | '.join(typing.stringify(arg) for arg in param.annotation.__args__)\n+                    annotation[param.name] = annotation_str\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = sig.return_annotation\n+                if hasattr(return_annotation, '__origin__') and return_annotation.__origin__ is Union:\n+                    annotation['return'] = ' | '.join(typing.stringify(arg) for arg in return_annotation.__args__)\n+                else:\n+                    annotation['return'] = typing.stringify(return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..4419724 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -14,9 +14,16 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n             sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n-                    annotation[param.name] = typing.stringify(param.annotation)\n+                    annotation_str = typing.stringify(param.annotation)\n+                    if hasattr(param.annotation, '__origin__') and param.annotation.__origin__ is Union:\n+                        annotation_str = ' | '.join((typing.stringify(arg) for arg in param.annotation.__args__))\n+                    annotation[param.name] = annotation_str\n             if sig.return_annotation is not sig.empty:\n-                annotation['return'] = typing.stringify(sig.return_annotation)\n+                return_annotation = sig.return_annotation\n+                if hasattr(return_annotation, '__origin__') and return_annotation.__origin__ is Union:\n+                    annotation['return'] = ' | '.join((typing.stringify(arg) for arg in return_annotation.__args__))\n+                else:\n+                    annotation['return'] = typing.stringify(return_annotation)\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n", "normalized_occurrence": 1}
