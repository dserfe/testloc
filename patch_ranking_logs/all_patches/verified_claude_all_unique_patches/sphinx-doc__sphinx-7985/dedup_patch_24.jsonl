{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..8d3b804 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -212,10 +212,23 @@ class CheckExternalLinksBuilder(Builder):\n             # check for various conditions without bothering the network\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n-            elif not uri.startswith(('http:', 'https:')):\n-                return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n+            # Handle local links by checking if they exist in the documentation\n+            elif not uri.startswith(('http:', 'https:')):\n+                # Check if the target exists in the documentation\n+                try:\n+                    # Get the actual path by joining with the documentation root\n+                    doc_path = path.join(self.env.srcdir, uri)\n+                    if path.exists(doc_path):\n+                        self.good.add(uri)\n+                        return 'working', '', 0\n+                    else:\n+                        self.broken[uri] = 'Document not found'\n+                        return 'broken', 'Document not found', 0\n+                except Exception as err:\n+                    self.broken[uri] = str(err)\n+                    return 'broken', str(err), 0\n             elif uri in self.broken:\n                 return 'broken', self.broken[uri], 0\n             elif uri in self.redirected:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..4c0ffb3 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -132,10 +132,20 @@ class CheckExternalLinksBuilder(Builder):\n         def check() -> Tuple[str, str, int]:\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n-            elif not uri.startswith(('http:', 'https:')):\n-                return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n+            elif not uri.startswith(('http:', 'https:')):\n+                try:\n+                    doc_path = path.join(self.env.srcdir, uri)\n+                    if path.exists(doc_path):\n+                        self.good.add(uri)\n+                        return ('working', '', 0)\n+                    else:\n+                        self.broken[uri] = 'Document not found'\n+                        return ('broken', 'Document not found', 0)\n+                except Exception as err:\n+                    self.broken[uri] = str(err)\n+                    return ('broken', str(err), 0)\n             elif uri in self.broken:\n                 return ('broken', self.broken[uri], 0)\n             elif uri in self.redirected:\n", "normalized_occurrence": 1}
