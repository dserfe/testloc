{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10325", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 53e783e..eecf67b 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -110,11 +110,19 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n \n \n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n-    \"\"\"Used to convert the :members: option to auto directives.\"\"\"\n+    \"\"\"Used to convert the :inherited-members: option to auto directives.\n+    \n+    Returns:\n+        - 'object' if arg is None or True (inherit from all classes)\n+        - set of class names to inherit from if arg is a string\n+        - empty set if arg is False\n+    \"\"\"\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return set()\n     else:\n-        return arg\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n \n \n def member_order_option(arg: Any) -> Optional[str]:\n@@ -1710,7 +1718,21 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # type:\n                                    (name, self.fullname), type='autodoc')\n             return False, selected\n         elif self.options.inherited_members:\n-            return False, list(members.values())\n+            if self.options.inherited_members == 'object':\n+                return False, list(members.values())\n+            else:\n+                # Filter members based on their class inheritance\n+                selected = []\n+                for member in members.values():\n+                    if member.class_ == self.object:\n+                        selected.append(member)\n+                        continue\n+                    # Include member if its class's bases are in the allowed set\n+                    if isinstance(member.class_, type):\n+                        bases = [b.__name__ for b in member.class_.__bases__]\n+                        if any(base in self.options.inherited_members for base in bases):\n+                            selected.append(member)\n+                return False, selected\n         else:\n             return False, [m for m in members.values() if m.class_ == self.object]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex ef486fb..b2a4adc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -58,8 +58,10 @@ def exclude_members_option(arg: Any) -> Union[object, Set[str]]:\n def inherited_members_option(arg: Any) -> Union[object, Set[str]]:\n     if arg in (None, True):\n         return 'object'\n+    elif arg is False:\n+        return set()\n     else:\n-        return arg\n+        return {x.strip() for x in arg.split(',') if x.strip()}\n def member_order_option(arg: Any) -> Optional[str]:\n     if arg in (None, True):\n         return None\n@@ -980,7 +982,19 @@ class ClassDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n                     logger.warning(__('missing attribute %s in object %s') % (name, self.fullname), type='autodoc')\n             return (False, selected)\n         elif self.options.inherited_members:\n-            return (False, list(members.values()))\n+            if self.options.inherited_members == 'object':\n+                return (False, list(members.values()))\n+            else:\n+                selected = []\n+                for member in members.values():\n+                    if member.class_ == self.object:\n+                        selected.append(member)\n+                        continue\n+                    if isinstance(member.class_, type):\n+                        bases = [b.__name__ for b in member.class_.__bases__]\n+                        if any((base in self.options.inherited_members for base in bases)):\n+                            selected.append(member)\n+                return (False, selected)\n         else:\n             return (False, [m for m in members.values() if m.class_ == self.object])\n     def get_doc(self, ignore: int=None) -> Optional[List[List[str]]]:\n", "normalized_occurrence": 1}
