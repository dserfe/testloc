{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..5aa769f 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -37,7 +37,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         pass\n \n \n-def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+def apply_type_aliases(aliases, annotation):\n+    for alias, replacement in aliases.items():\n+        annotation = annotation.replace(alias, replacement)\n+    return annotation\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints != 'description':\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..48da84c 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -19,7 +19,10 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n-def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n+def apply_type_aliases(aliases, annotation):\n+    for alias, replacement in aliases.items():\n+        annotation = annotation.replace(alias, replacement)\n+    return annotation\n     if domain != 'py':\n         return\n     if app.config.autodoc_typehints != 'description':\n", "normalized_occurrence": 1}
