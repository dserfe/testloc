{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-6744", "model_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex eae2351..feaf415 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -270,10 +270,23 @@ class DataArrayRolling(Rolling[\"DataArray\"]):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError(\"__iter__ is only supported for 1d-rolling\")\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[: int(self.window[0])] = 0\n-        for (label, start, stop) in zip(self.window_labels, starts, stops):\n+        \n+        window_size = int(self.window[0])\n+        n = len(self.window_labels)\n+        \n+        if self.center:\n+            offset = (window_size - 1) // 2\n+            stops = np.arange(window_size, n + 1)\n+            starts = stops - window_size\n+            result_indices = range(offset, n - offset)\n+        else:\n+            stops = np.arange(1, n + 1)\n+            starts = stops - window_size\n+            starts[: window_size] = 0\n+            result_indices = range(n)\n+            \n+        for i, (start, stop) in zip(result_indices, zip(starts, stops)):\n+            label = self.window_labels[i]\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n \n             counts = window.count(dim=self.dim[0])\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py\nindex 870b974..461e9c0 100644\n--- a/xarray/core/rolling.py\n+++ b/xarray/core/rolling.py\n@@ -106,10 +106,20 @@ class DataArrayRolling(Rolling['DataArray']):\n     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:\n         if self.ndim > 1:\n             raise ValueError('__iter__ is only supported for 1d-rolling')\n-        stops = np.arange(1, len(self.window_labels) + 1)\n-        starts = stops - int(self.window[0])\n-        starts[:int(self.window[0])] = 0\n-        for label, start, stop in zip(self.window_labels, starts, stops):\n+        window_size = int(self.window[0])\n+        n = len(self.window_labels)\n+        if self.center:\n+            offset = (window_size - 1) // 2\n+            stops = np.arange(window_size, n + 1)\n+            starts = stops - window_size\n+            result_indices = range(offset, n - offset)\n+        else:\n+            stops = np.arange(1, n + 1)\n+            starts = stops - window_size\n+            starts[:window_size] = 0\n+            result_indices = range(n)\n+        for i, (start, stop) in zip(result_indices, zip(starts, stops)):\n+            label = self.window_labels[i]\n             window = self.obj.isel({self.dim[0]: slice(start, stop)})\n             counts = window.count(dim=self.dim[0])\n             window = window.where(counts >= self.min_periods)\n", "normalized_occurrence": 1}
