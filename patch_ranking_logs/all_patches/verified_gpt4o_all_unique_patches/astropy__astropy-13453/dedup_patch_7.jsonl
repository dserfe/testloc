{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-13453", "model_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 1220930..3c1ae41 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -343,6 +343,9 @@ class HTML(core.BaseReader):\n         \"\"\"\n         Return data in ``table`` converted to HTML as a list of strings.\n         \"\"\"\n+        # Initialize formats attribute\n+        self.formats = {}\n+        \n         # Check that table has only 1-d or 2-d columns. Above that fails.\n         self._check_multidim_table(table)\n \n@@ -437,7 +440,12 @@ class HTML(core.BaseReader):\n                                     new_cols.append(new_col)\n                             else:\n \n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                # Apply custom formatting if provided\n+                                if col.info.name in self.formats:\n+                                    formatter = self.formats[col.info.name]\n+                                    col_iter_str_vals = (formatter(val) for val in col)\n+                                else:\n+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n \n                                 new_cols_escaped.append(col_escaped)\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py\nindex 45fa153..52b55f8 100644\n--- a/astropy/io/ascii/html.py\n+++ b/astropy/io/ascii/html.py\n@@ -150,6 +150,7 @@ class HTML(core.BaseReader):\n         self.outputter = HTMLOutputter()\n         return super().read(table)\n     def write(self, table):\n+        self.formats = {}\n         self._check_multidim_table(table)\n         cols = list(table.columns.values())\n         self.data.header.cols = cols\n@@ -217,7 +218,11 @@ class HTML(core.BaseReader):\n                                     new_cols_escaped.append(col_escaped)\n                                     new_cols.append(new_col)\n                             else:\n-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n+                                if col.info.name in self.formats:\n+                                    formatter = self.formats[col.info.name]\n+                                    col_iter_str_vals = (formatter(val) for val in col)\n+                                else:\n+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())\n                                 col_str_iters.append(col_iter_str_vals)\n                                 new_cols_escaped.append(col_escaped)\n                     for row in zip(*col_str_iters):\n", "normalized_occurrence": 1}
