{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-22865", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 5ebeaf9..e7e9e95 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -648,11 +648,17 @@ class Colorbar:\n             self.solids = self.ax.pcolormesh(\n                 X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha,\n                 edgecolors='none', shading='flat')\n-            if not self.drawedges:\n+            if self.drawedges:\n+                edges = np.dstack([X, Y])\n+                if self._extend_lower():\n+                    edges = np.insert(edges, 1, edges[0, :, :], axis=0)\n+                if self._extend_upper():\n+                    edges = np.append(edges, edges[-1, :, :], axis=0)\n+                self.dividers.set_segments(edges)\n+            else:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(\n-            np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+                self.dividers.set_segments([])\n \n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)  # Have enough hatches.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex eb4d80e..7d3a025 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -259,10 +259,17 @@ class Colorbar:\n             self._add_solids_patches(X, Y, C, mappable)\n         else:\n             self.solids = self.ax.pcolormesh(X, Y, C, cmap=self.cmap, norm=self.norm, alpha=self.alpha, edgecolors='none', shading='flat')\n-            if not self.drawedges:\n+            if self.drawedges:\n+                edges = np.dstack([X, Y])\n+                if self._extend_lower():\n+                    edges = np.insert(edges, 1, edges[0, :, :], axis=0)\n+                if self._extend_upper():\n+                    edges = np.append(edges, edges[-1, :, :], axis=0)\n+                self.dividers.set_segments(edges)\n+            else:\n                 if len(self._y) >= self.n_rasterize:\n                     self.solids.set_rasterized(True)\n-        self.dividers.set_segments(np.dstack([X, Y])[1:-1] if self.drawedges else [])\n+                self.dividers.set_segments([])\n     def _add_solids_patches(self, X, Y, C, mappable):\n         hatches = mappable.hatches * len(C)\n         patches = []\n", "normalized_occurrence": 1}
