{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 2c937f2..30d2272 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -37,13 +37,18 @@ def dispatch_hook(key, hooks, hook_data):\n     if key in hooks:\n         hooks = hooks.get(key)\n \n+        # Convert single hook function to a list of hooks\n         if hasattr(hooks, '__call__'):\n             hooks = [hooks]\n+        # Handle case where hooks is already a list of hooks\n+        elif not isinstance(hooks, (list, tuple)):\n+            hooks = [hooks]\n \n         for hook in hooks:\n-            _hook_data = hook(hook_data)\n-            if _hook_data is not None:\n-                hook_data = _hook_data\n+            if hook is not None and hasattr(hook, '__call__'):\n+                _hook_data = hook(hook_data)\n+                if _hook_data is not None:\n+                    hook_data = _hook_data\n \n \n-    return hook_data\n+    return hook_data\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/hooks.py b/requests/hooks.py\nindex 7057710..aa90b0f 100644\n--- a/requests/hooks.py\n+++ b/requests/hooks.py\n@@ -5,8 +5,11 @@ def dispatch_hook(key, hooks, hook_data):\n         hooks = hooks.get(key)\n         if hasattr(hooks, '__call__'):\n             hooks = [hooks]\n+        elif not isinstance(hooks, (list, tuple)):\n+            hooks = [hooks]\n         for hook in hooks:\n-            _hook_data = hook(hook_data)\n-            if _hook_data is not None:\n-                hook_data = _hook_data\n+            if hook is not None and hasattr(hook, '__call__'):\n+                _hook_data = hook(hook_data)\n+                if _hook_data is not None:\n+                    hook_data = _hook_data\n     return hook_data\n\\ No newline at end of file\n", "normalized_occurrence": 1}
