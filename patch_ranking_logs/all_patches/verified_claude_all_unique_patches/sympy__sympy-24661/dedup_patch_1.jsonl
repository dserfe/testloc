{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex c35b72b..1b0b8d0 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -833,7 +833,7 @@ class _Inequality(Relational):\n             return cls._eval_relation(lhs, rhs, **options)\n \n         # make a \"non-evaluated\" Expr for the inequality\n-        return Relational.__new__(cls, lhs, rhs, **options)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=False, **options)\n \n     @classmethod\n     def _eval_relation(cls, lhs, rhs, **options):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/relational.py b/sympy/core/relational.py\nindex 6f6b8fe..32196e3 100644\n--- a/sympy/core/relational.py\n+++ b/sympy/core/relational.py\n@@ -355,7 +355,7 @@ class _Inequality(Relational):\n                 if me is S.NaN:\n                     raise TypeError('Invalid NaN comparison')\n             return cls._eval_relation(lhs, rhs, **options)\n-        return Relational.__new__(cls, lhs, rhs, **options)\n+        return Relational.__new__(cls, lhs, rhs, evaluate=False, **options)\n     @classmethod\n     def _eval_relation(cls, lhs, rhs, **options):\n         val = cls._eval_fuzzy_relation(lhs, rhs)\n", "normalized_occurrence": 1}
