{"model_name_or_path": "agentless", "instance_id": "django__django-11138", "model_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex 3337c6c..f4515aa 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -68,21 +68,24 @@ class DatabaseOperations(BaseDatabaseOperations):\n         else:\n             return \"DATE(%s)\" % (field_name)\n \n-    def _convert_field_to_tz(self, field_name, tzname):\n+    def _convert_field_to_tz(self, field_name, tzname, db_tzname=None):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            if db_tzname is None or db_tzname == tzname:\n+                field_name = \"%s\" % field_name\n+            else:\n+                field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, db_tzname, tzname)\n         return field_name\n \n-    def datetime_cast_date_sql(self, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_cast_date_sql(self, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return \"DATE(%s)\" % field_name\n \n-    def datetime_cast_time_sql(self, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_cast_time_sql(self, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return \"TIME(%s)\" % field_name\n \n-    def datetime_extract_sql(self, lookup_type, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_extract_sql(self, lookup_type, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return self.date_extract_sql(lookup_type, field_name)\n \n     def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py\nindex ef0aad3..e10759d 100644\n--- a/django/db/backends/mysql/operations.py\n+++ b/django/db/backends/mysql/operations.py\n@@ -29,18 +29,21 @@ class DatabaseOperations(BaseDatabaseOperations):\n             return 'DATE_SUB(%s, INTERVAL WEEKDAY(%s) DAY)' % (field_name, field_name)\n         else:\n             return 'DATE(%s)' % field_name\n-    def _convert_field_to_tz(self, field_name, tzname):\n+    def _convert_field_to_tz(self, field_name, tzname, db_tzname=None):\n         if settings.USE_TZ:\n-            field_name = \"CONVERT_TZ(%s, 'UTC', '%s')\" % (field_name, tzname)\n+            if db_tzname is None or db_tzname == tzname:\n+                field_name = '%s' % field_name\n+            else:\n+                field_name = \"CONVERT_TZ(%s, '%s', '%s')\" % (field_name, db_tzname, tzname)\n         return field_name\n-    def datetime_cast_date_sql(self, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_cast_date_sql(self, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return 'DATE(%s)' % field_name\n-    def datetime_cast_time_sql(self, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_cast_time_sql(self, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return 'TIME(%s)' % field_name\n-    def datetime_extract_sql(self, lookup_type, field_name, tzname):\n-        field_name = self._convert_field_to_tz(field_name, tzname)\n+    def datetime_extract_sql(self, lookup_type, field_name, tzname, db_tzname=None):\n+        field_name = self._convert_field_to_tz(field_name, tzname, db_tzname)\n         return self.date_extract_sql(lookup_type, field_name)\n     def datetime_trunc_sql(self, lookup_type, field_name, tzname):\n         field_name = self._convert_field_to_tz(field_name, tzname)\n", "normalized_occurrence": 1}
