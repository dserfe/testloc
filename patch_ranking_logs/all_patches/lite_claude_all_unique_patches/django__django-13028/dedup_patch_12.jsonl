{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13028", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex a6a3e97..6d3a9ef 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1124,12 +1124,13 @@ class Query(BaseExpression):\n \n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n         if hasattr(expression, 'get_source_expressions'):\n+            # Only check filterable on query expressions, not model instances\n+            if not getattr(expression, 'filterable', True):\n+                raise NotSupportedError(\n+                    expression.__class__.__name__ + ' is disallowed in the filter '\n+                    'clause.'\n+                )\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 5b98027..677376b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -611,9 +611,9 @@ class Query(BaseExpression):\n                 for v in value:\n                     self.check_query_object_type(v, opts, field)\n     def check_filterable(self, expression):\n-        if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(expression.__class__.__name__ + ' is disallowed in the filter clause.')\n         if hasattr(expression, 'get_source_expressions'):\n+            if not getattr(expression, 'filterable', True):\n+                raise NotSupportedError(expression.__class__.__name__ + ' is disallowed in the filter clause.')\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n     def build_lookup(self, lookups, lhs, rhs):\n", "normalized_occurrence": 5}
