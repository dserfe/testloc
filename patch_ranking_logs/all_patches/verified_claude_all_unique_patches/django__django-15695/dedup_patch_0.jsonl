{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15695", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex b086232..0aaf1ca 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -966,8 +966,22 @@ class RenameIndex(IndexOperation):\n         schema_editor.rename_index(model, old_index, new_index)\n \n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+            return\n+\n         if self.old_fields:\n-            # Backward operation with unnamed index is a no-op.\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            # Get the old auto-generated name\n+            columns = [\n+                to_model._meta.get_field(field).column for field in self.old_fields\n+            ]\n+            old_name = schema_editor._constraint_names(\n+                to_model, column_names=columns, index=True\n+            )[0]\n+            old_index = models.Index(fields=self.old_fields, name=old_name)\n+            new_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            schema_editor.rename_index(model, new_index, old_index)\n             return\n \n         self.new_name_lower, self.old_name_lower = (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 87ad28e..2aebe1e 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -435,7 +435,16 @@ class RenameIndex(IndexOperation):\n         new_index = to_model_state.get_index_by_name(self.new_name)\n         schema_editor.rename_index(model, old_index, new_index)\n     def database_backwards(self, app_label, schema_editor, from_state, to_state):\n+        model = from_state.apps.get_model(app_label, self.model_name)\n+        if not self.allow_migrate_model(schema_editor.connection.alias, model):\n+            return\n         if self.old_fields:\n+            to_model = to_state.apps.get_model(app_label, self.model_name)\n+            columns = [to_model._meta.get_field(field).column for field in self.old_fields]\n+            old_name = schema_editor._constraint_names(to_model, column_names=columns, index=True)[0]\n+            old_index = models.Index(fields=self.old_fields, name=old_name)\n+            new_index = models.Index(fields=self.old_fields, name=self.new_name)\n+            schema_editor.rename_index(model, new_index, old_index)\n             return\n         self.new_name_lower, self.old_name_lower = (self.old_name_lower, self.new_name_lower)\n         self.new_name, self.old_name = (self.old_name, self.new_name)\n", "normalized_occurrence": 1}
