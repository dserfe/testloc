{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..f9f2c49 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -115,6 +115,10 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n         self.metric_params = metric_params\n         self.p = p\n         self.n_jobs = n_jobs\n+\n+        if self.n_neighbors is not None and not isinstance(self.n_neighbors, (int, np.integer)):\n+            raise TypeError(\"n_neighbors must be an integer, got %s\" % type(self.n_neighbors).__name__)\n+\n         self._check_algorithm_metric()\n \n     def _check_algorithm_metric(self):\n@@ -327,6 +331,8 @@ class KNeighborsMixin(object):\n \n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError(\"n_neighbors must be an integer, got %s\" % type(n_neighbors).__name__)\n \n         if X is not None:\n             query_is_train = False\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..f9aa94d 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -55,6 +55,8 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n         self.metric_params = metric_params\n         self.p = p\n         self.n_jobs = n_jobs\n+        if self.n_neighbors is not None and (not isinstance(self.n_neighbors, (int, np.integer))):\n+            raise TypeError('n_neighbors must be an integer, got %s' % type(self.n_neighbors).__name__)\n         self._check_algorithm_metric()\n     def _check_algorithm_metric(self):\n         if self.algorithm not in ['auto', 'brute', 'kd_tree', 'ball_tree']:\n@@ -162,6 +164,8 @@ class KNeighborsMixin(object):\n         check_is_fitted(self, '_fit_method')\n         if n_neighbors is None:\n             n_neighbors = self.n_neighbors\n+        elif not isinstance(n_neighbors, (int, np.integer)):\n+            raise TypeError('n_neighbors must be an integer, got %s' % type(n_neighbors).__name__)\n         if X is not None:\n             query_is_train = False\n             X = check_array(X, accept_sparse='csr')\n", "normalized_occurrence": 1}
