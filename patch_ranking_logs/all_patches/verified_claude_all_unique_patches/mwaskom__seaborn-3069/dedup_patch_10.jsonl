{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..29cf12c 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,23 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set up locators and formatters\n+                major_locator = new._get_locators(**new._tick_params)[0]\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                axis.set_major_locator(major_locator)\n+                axis.set_major_formatter(major_formatter)\n+                \n+                # Handle categorical-style behavior\n+                axis.grid(False)  # Disable grid\n+                \n+                # Set the view limits to extend +/- 0.5 beyond data range\n+                if hasattr(axis, 'get_view_interval'):\n+                    vmin, vmax = axis.get_view_interval()\n+                    axis.set_view_interval(vmin - 0.5, vmax + 0.5)\n+                \n+                # Invert y-axis if this is a y-axis scale\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.set_inverted(True)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..796c1ec 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,7 +90,16 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                major_locator = new._get_locators(**new._tick_params)[0]\n+                major_formatter = new._get_formatter(major_locator, **new._label_params)\n+                axis.set_major_locator(major_locator)\n+                axis.set_major_formatter(major_formatter)\n+                axis.grid(False)\n+                if hasattr(axis, 'get_view_interval'):\n+                    vmin, vmax = axis.get_view_interval()\n+                    axis.set_view_interval(vmin - 0.5, vmax + 0.5)\n+                if isinstance(axis, mpl.axis.YAxis):\n+                    axis.set_inverted(True)\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n", "normalized_occurrence": 1}
