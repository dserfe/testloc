{"model_name_or_path": "agentless_claude", "instance_id": "pylint-dev__pylint-4604", "model_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex 8c0035f..77f5c13 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -1844,9 +1844,19 @@ class VariablesChecker(BaseChecker):\n \n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n-        if not type_annotation:\n-            return\n-        self._store_type_annotation_node(node.type_annotation)\n+        if type_annotation:\n+            self._store_type_annotation_node(type_annotation)\n+        \n+        # Also check type comment if present\n+        type_comment = node.type_comment\n+        if type_comment:\n+            if isinstance(type_comment, astroid.Name):\n+                self._type_annotation_names.append(type_comment.name)\n+            else:\n+                self._type_annotation_names.extend(\n+                    annotation.name\n+                    for annotation in type_comment.nodes_of_class(astroid.Name)\n+                )\n \n     def _check_self_cls_assign(self, node):\n         \"\"\"Check that self/cls don't get assigned\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py\nindex c661a56..c5e2d3d 100644\n--- a/pylint/checkers/variables.py\n+++ b/pylint/checkers/variables.py\n@@ -690,9 +690,14 @@ class VariablesChecker(BaseChecker):\n         self._type_annotation_names.extend((annotation.name for annotation in type_annotation.nodes_of_class(astroid.Name)))\n     def _store_type_annotation_names(self, node):\n         type_annotation = node.type_annotation\n-        if not type_annotation:\n-            return\n-        self._store_type_annotation_node(node.type_annotation)\n+        if type_annotation:\n+            self._store_type_annotation_node(type_annotation)\n+        type_comment = node.type_comment\n+        if type_comment:\n+            if isinstance(type_comment, astroid.Name):\n+                self._type_annotation_names.append(type_comment.name)\n+            else:\n+                self._type_annotation_names.extend((annotation.name for annotation in type_comment.nodes_of_class(astroid.Name)))\n     def _check_self_cls_assign(self, node):\n         assign_names = {target.name for target in node.targets if isinstance(target, astroid.AssignName)}\n         scope = node.scope()\n", "normalized_occurrence": 1}
