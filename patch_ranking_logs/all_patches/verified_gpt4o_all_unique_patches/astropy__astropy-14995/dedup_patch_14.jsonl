{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py\nindex 496df38..1cdc746 100644\n--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n@@ -69,4 +69,58 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):\n     are sliced.\n     \"\"\"\n \n-    pass\n+    def _arithmetic_mask_handling(self, other_mask, handle_mask):\n+        \"\"\"\n+        Handles the mask propagation during arithmetic operations.\n+        \n+        Parameters\n+        ----------\n+        other_mask : `numpy.ndarray` or `None`\n+            The mask of the other operand.\n+        handle_mask : callable or `None`\n+            The function to handle the mask. If None, no mask handling is done.\n+        \n+        Returns\n+        -------\n+        result_mask : `numpy.ndarray` or `None`\n+            The resulting mask after applying the handle_mask function.\n+        \"\"\"\n+        if handle_mask is None:\n+            return None\n+\n+        if self.mask is None and other_mask is None:\n+            return None\n+        elif self.mask is None:\n+            return other_mask\n+        elif other_mask is None:\n+            return self.mask\n+\n+        return handle_mask(self.mask, other_mask)\n+\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result = super().multiply(operand)\n+        result_mask = self._arithmetic_mask_handling(\n+            getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+\n+    def add(self, operand, handle_mask=np.bitwise_or):\n+        result = super().add(operand)\n+        result_mask = self._arithmetic_mask_handling(\n+            getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+\n+    def subtract(self, operand, handle_mask=np.bitwise_or):\n+        result = super().subtract(operand)\n+        result_mask = self._arithmetic_mask_handling(\n+            getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+\n+    def divide(self, operand, handle_mask=np.bitwise_or):\n+        result = super().divide(operand)\n+        result_mask = self._arithmetic_mask_handling(\n+            getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n", "occurrence": 1, "normalized_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _arithmetic_mask_handling(self, other_mask, handle_mask):\n+        if handle_mask is None:\n+            return None\n+        if self.mask is None and other_mask is None:\n+            return None\n+        elif self.mask is None:\n+            return other_mask\n+        elif other_mask is None:\n+            return self.mask\n+        return handle_mask(self.mask, other_mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        result = super().multiply(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def add(self, operand, handle_mask=np.bitwise_or):\n+        result = super().add(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def subtract(self, operand, handle_mask=np.bitwise_or):\n+        result = super().subtract(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result\n+    def divide(self, operand, handle_mask=np.bitwise_or):\n+        result = super().divide(operand)\n+        result_mask = self._arithmetic_mask_handling(getattr(operand, 'mask', None), handle_mask)\n+        result.mask = result_mask\n+        return result", "normalized_occurrence": 1}
