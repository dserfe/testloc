{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-863", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex bc1c443..0ba1bff 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -461,9 +461,16 @@ class Request(object):\n         return ''.join(url)\n \n     def register_hook(self, event, hook):\n-        \"\"\"Properly register a hook.\"\"\"\n-\n-        self.hooks[event].append(hook)\n+        \"\"\"Properly register a hook.\n+        \n+        Args:\n+            event: The name of the event to hook.\n+            hook: A callable, or list of callables, that will be called\n+                when the event occurs.\n+        \"\"\"\n+        if hasattr(hook, '__call__'):\n+            hook = [hook]\n+        self.hooks[event].extend(hook)\n \n     def deregister_hook(self, event, hook):\n         \"\"\"Deregister a previously registered hook.\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex ec9ed1c..e60bb5f 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -231,7 +231,9 @@ class Request(object):\n             url.append(query)\n         return ''.join(url)\n     def register_hook(self, event, hook):\n-        self.hooks[event].append(hook)\n+        if hasattr(hook, '__call__'):\n+            hook = [hook]\n+        self.hooks[event].extend(hook)\n     def deregister_hook(self, event, hook):\n         try:\n             self.hooks[event].remove(hook)\n", "normalized_occurrence": 1}
