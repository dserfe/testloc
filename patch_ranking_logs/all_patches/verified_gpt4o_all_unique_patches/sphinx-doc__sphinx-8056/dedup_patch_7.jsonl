{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..14d3437 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1083,7 +1083,8 @@ class NumpyDocstring(GoogleDocstring):\n         func = super()._escape_args_and_kwargs\n \n         if \", \" in name:\n-            return \", \".join(func(param) for param in name.split(\", \"))\n+            params = [param.strip() for param in name.split(\",\")]\n+            return \", \".join(func(param) for param in params)\n         else:\n             return func(name)\n \n@@ -1091,10 +1092,10 @@ class NumpyDocstring(GoogleDocstring):\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n+            _name, _type, _desc = self._partition_field_on_colon(line)\n         else:\n-            _name, _type = line, ''\n-        _name, _type = _name.strip(), _type.strip()\n+            _name, _type, _desc = line, '', ''\n+        _name, _type, _desc = _name.strip(), _type.strip(), _desc.strip()\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(\n             _type,\n@@ -1105,8 +1106,11 @@ class NumpyDocstring(GoogleDocstring):\n         if prefer_type and not _type:\n             _type, _name = _name, _type\n         indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n+        _desc_block = self._dedent(self._consume_indented_block(indent))\n+        if _desc:\n+            _desc = [_desc] + self.__class__(_desc_block, self._config).lines()\n+        else:\n+            _desc = self.__class__(_desc_block, self._config).lines()\n         return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..8ba4758 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -655,23 +655,27 @@ class NumpyDocstring(GoogleDocstring):\n     def _escape_args_and_kwargs(self, name: str) -> str:\n         func = super()._escape_args_and_kwargs\n         if ', ' in name:\n-            return ', '.join((func(param) for param in name.split(', ')))\n+            params = [param.strip() for param in name.split(',')]\n+            return ', '.join((func(param) for param in params))\n         else:\n             return func(name)\n     def _consume_field(self, parse_type: bool=True, prefer_type: bool=False) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n         if parse_type:\n-            _name, _, _type = self._partition_field_on_colon(line)\n+            _name, _type, _desc = self._partition_field_on_colon(line)\n         else:\n-            _name, _type = (line, '')\n-        _name, _type = (_name.strip(), _type.strip())\n+            _name, _type, _desc = (line, '', '')\n+        _name, _type, _desc = (_name.strip(), _type.strip(), _desc.strip())\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n-        _desc = self._dedent(self._consume_indented_block(indent))\n-        _desc = self.__class__(_desc, self._config).lines()\n+        _desc_block = self._dedent(self._consume_indented_block(indent))\n+        if _desc:\n+            _desc = [_desc] + self.__class__(_desc_block, self._config).lines()\n+        else:\n+            _desc = self.__class__(_desc_block, self._config).lines()\n         return (_name, _type, _desc)\n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n", "normalized_occurrence": 1}
