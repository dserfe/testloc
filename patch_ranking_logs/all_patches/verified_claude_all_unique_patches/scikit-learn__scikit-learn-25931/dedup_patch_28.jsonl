{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..63ba5a6 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -288,14 +288,14 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             Fitted estimator.\n         \"\"\"\n         self._validate_params()\n-        X = self._validate_data(X, accept_sparse=[\"csc\"], dtype=tree_dtype)\n-        if issparse(X):\n+        self._fit_X = self._validate_data(X, accept_sparse=[\"csc\"], dtype=tree_dtype)\n+        if issparse(self._fit_X):\n             # Pre-sort indices to avoid that each individual tree of the\n             # ensemble sorts the indices.\n-            X.sort_indices()\n+            self._fit_X.sort_indices()\n \n         rnd = check_random_state(self.random_state)\n-        y = rnd.uniform(size=X.shape[0])\n+        y = rnd.uniform(size=self._fit_X.shape[0])\n \n         # ensure that max_sample is in [1, n_samples]:\n         n_samples = X.shape[0]\n@@ -345,8 +345,12 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n-\n+        # Use the already validated data to avoid feature names warning\n+        self.offset_ = np.percentile(self.score_samples(self._fit_X), 100.0 * self.contamination)\n+        \n+        # Clean up\n+        del self._fit_X\n+        \n         return self\n \n     def predict(self, X):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..02e5c1d 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -23,11 +23,11 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         return {'prefer': 'threads'}\n     def fit(self, X, y=None, sample_weight=None):\n         self._validate_params()\n-        X = self._validate_data(X, accept_sparse=['csc'], dtype=tree_dtype)\n-        if issparse(X):\n-            X.sort_indices()\n+        self._fit_X = self._validate_data(X, accept_sparse=['csc'], dtype=tree_dtype)\n+        if issparse(self._fit_X):\n+            self._fit_X.sort_indices()\n         rnd = check_random_state(self.random_state)\n-        y = rnd.uniform(size=X.shape[0])\n+        y = rnd.uniform(size=self._fit_X.shape[0])\n         n_samples = X.shape[0]\n         if isinstance(self.max_samples, str) and self.max_samples == 'auto':\n             max_samples = min(256, n_samples)\n@@ -46,7 +46,8 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        self.offset_ = np.percentile(self.score_samples(self._fit_X), 100.0 * self.contamination)\n+        del self._fit_X\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
