{"model_name_or_path": "agentless", "instance_id": "django__django-15525", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex ee234a8..54549ec 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -165,7 +165,7 @@ class ForwardManyToOneDescriptor:\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n         # Assuming the database enforces foreign keys, this won't fail.\n-        return qs.get(self.field.get_reverse_related_filter(instance))\n+        return qs.using(instance._state.db).get(self.field.get_reverse_related_filter(instance))\n \n     def __get__(self, instance, cls=None):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 9a2fbb3..ee9c96c 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -41,7 +41,7 @@ class ForwardManyToOneDescriptor:\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n-        return qs.get(self.field.get_reverse_related_filter(instance))\n+        return qs.using(instance._state.db).get(self.field.get_reverse_related_filter(instance))\n     def __get__(self, instance, cls=None):\n         if instance is None:\n             return self\n", "normalized_occurrence": 1}
