{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16400", "model_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex c21d9d7..bfb9e39 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -76,8 +76,9 @@ def create_permissions(\n     for klass in app_config.get_models():\n         # Force looking up the content types in the current database\n         # before creating foreign keys to them.\n+        # Ensure get_for_model uses the correct database\n         ctype = ContentType.objects.db_manager(using).get_for_model(\n-            klass, for_concrete_model=False\n+            klass, for_concrete_model=False, for_concrete_model_only=False, using=using\n         )\n \n         ctypes.add(ctype)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py\nindex eb43af8..c0a3442 100644\n--- a/django/contrib/auth/management/__init__.py\n+++ b/django/contrib/auth/management/__init__.py\n@@ -28,7 +28,7 @@ def create_permissions(app_config, verbosity=2, interactive=True, using=DEFAULT_\n     searched_perms = []\n     ctypes = set()\n     for klass in app_config.get_models():\n-        ctype = ContentType.objects.db_manager(using).get_for_model(klass, for_concrete_model=False)\n+        ctype = ContentType.objects.db_manager(using).get_for_model(klass, for_concrete_model=False, for_concrete_model_only=False, using=using)\n         ctypes.add(ctype)\n         for perm in _get_all_permissions(klass._meta):\n             searched_perms.append((ctype, perm))\n", "normalized_occurrence": 1}
