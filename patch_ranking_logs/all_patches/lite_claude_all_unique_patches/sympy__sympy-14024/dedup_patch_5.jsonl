{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..2dcf763 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -319,6 +319,11 @@ class Pow(Expr):\n         b, e = self.as_base_exp()\n         if b is S.NaN:\n             return (b**e)**other  # let __new__ handle it\n+            \n+        # Handle case where base is negative and exponent is related to original exponent\n+        if getattr(b, 'is_negative', None) and e.is_Integer and other == -e:\n+            # For case (-a)**x * a**(-x), return (-1)**x\n+            return S.NegativeOne**e\n \n         s = None\n         if other.is_integer:\n@@ -1640,4 +1645,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..12ba189 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -154,6 +154,8 @@ class Pow(Expr):\n         b, e = self.as_base_exp()\n         if b is S.NaN:\n             return (b ** e) ** other\n+        if getattr(b, 'is_negative', None) and e.is_Integer and (other == -e):\n+            return S.NegativeOne ** e\n         s = None\n         if other.is_integer:\n             s = 1\n", "normalized_occurrence": 1}
