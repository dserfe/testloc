{"model_name_or_path": "agentless", "instance_id": "django__django-13964", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex b13a962..1ae3d4f 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -254,7 +254,8 @@ class ForwardManyToOneDescriptor:\n         # Set the values of the related field.\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                # Use the primary key if available, else use the related field's attribute\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname) or value.pk)\n \n         # Set the related instance cache used by __get__ to avoid an SQL query\n         # when accessing the attribute we just set.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 11b8ac6..740ff14 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -84,7 +84,7 @@ class ForwardManyToOneDescriptor:\n                 setattr(instance, lh_field.attname, None)\n         else:\n             for lh_field, rh_field in self.field.related_fields:\n-                setattr(instance, lh_field.attname, getattr(value, rh_field.attname))\n+                setattr(instance, lh_field.attname, getattr(value, rh_field.attname) or value.pk)\n         self.field.set_cached_value(instance, value)\n         if value is not None and (not remote_field.multiple):\n             remote_field.set_cached_value(value, instance)\n", "normalized_occurrence": 1}
