{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 594e72b..d794267 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -516,9 +516,20 @@ class Session(SessionRedirectMixin):\n \n         proxies = proxies or {}\n \n+        # Get proxy authentication if provided\n+        proxy_auth = None\n+        if proxies and auth:\n+            for scheme in ('http', 'https'):\n+                if scheme in proxies:\n+                    proxy_auth = auth\n+\n         settings = self.merge_environment_settings(\n             prep.url, proxies, stream, verify, cert\n         )\n+        \n+        # Add proxy auth to settings if present\n+        if proxy_auth:\n+            settings['proxy_auth'] = proxy_auth\n \n         # Send the request.\n         send_kwargs = {\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 65aa332..af9fbbe 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -182,7 +182,14 @@ class Session(SessionRedirectMixin):\n         req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, json=json, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n         prep = self.prepare_request(req)\n         proxies = proxies or {}\n+        proxy_auth = None\n+        if proxies and auth:\n+            for scheme in ('http', 'https'):\n+                if scheme in proxies:\n+                    proxy_auth = auth\n         settings = self.merge_environment_settings(prep.url, proxies, stream, verify, cert)\n+        if proxy_auth:\n+            settings['proxy_auth'] = proxy_auth\n         send_kwargs = {'timeout': timeout, 'allow_redirects': allow_redirects}\n         send_kwargs.update(settings)\n         resp = self.send(prep, **send_kwargs)\n", "normalized_occurrence": 1}
