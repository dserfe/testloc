{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-12907", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex d6e9246..d3a7d98 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -199,20 +199,21 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n+    mat = np.zeros((noutp, model.n_inputs))\n     if not model.separable:\n         # this does not work for more than 2 coordinates\n-        mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, : model.n_inputs] = 1\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n     else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-\n-        for i in range(model.n_inputs):\n-            mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, (noutp - model.n_outputs))\n+        # For separable models, create a diagonal matrix for the appropriate slice\n+        if pos == 'left':\n+            for i in range(model.n_outputs):\n+                mat[i, i] = 1\n+        else:\n+            for i in range(model.n_outputs):\n+                mat[-(model.n_outputs-i), -(model.n_inputs-i)] = 1\n     return mat\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex 198a838..a097a9c 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -54,18 +54,18 @@ def _coord_matrix(model, pos, noutp):\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = m\n         return mat\n+    mat = np.zeros((noutp, model.n_inputs))\n     if not model.separable:\n-        mat = np.zeros((noutp, model.n_inputs))\n         if pos == 'left':\n             mat[:model.n_outputs, :model.n_inputs] = 1\n         else:\n             mat[-model.n_outputs:, -model.n_inputs:] = 1\n-    else:\n-        mat = np.zeros((noutp, model.n_inputs))\n-        for i in range(model.n_inputs):\n+    elif pos == 'left':\n+        for i in range(model.n_outputs):\n             mat[i, i] = 1\n-        if pos == 'right':\n-            mat = np.roll(mat, noutp - model.n_outputs)\n+    else:\n+        for i in range(model.n_outputs):\n+            mat[-(model.n_outputs - i), -(model.n_inputs - i)] = 1\n     return mat\n def _cstack(left, right):\n     noutp = _compute_n_outputs(left, right)\n", "normalized_occurrence": 1}
