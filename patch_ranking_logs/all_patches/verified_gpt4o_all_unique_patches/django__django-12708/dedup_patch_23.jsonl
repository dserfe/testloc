{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..9d8ca0d 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -400,19 +400,33 @@ class BaseDatabaseSchemaEditor:\n             self.execute(self._create_index_sql(model, fields, suffix=\"_idx\"))\n \n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n-        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_constraints_and_indexes = set()\n+        for constraint in model._meta.constraints:\n+            meta_constraints_and_indexes.add(constraint.name)\n+        for index in model._meta.indexes:\n+            meta_constraints_and_indexes.add(index.name)\n+        \n         columns = [model._meta.get_field(field).column for field in fields]\n+        \n         constraint_names = self._constraint_names(\n-            model, columns, exclude=meta_constraint_names | meta_index_names,\n+            model, columns, exclude=meta_constraints_and_indexes,\n             **constraint_kwargs\n         )\n+        \n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n+            constraint_type = \"unique\" if constraint_kwargs.get('unique') else \"index\"\n+            relevant_constraints = [\n+                name for name in constraint_names \n+                if constraint_type in name\n+            ]  # Filter only the relevant constraints\n+            if len(relevant_constraints) != 1:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(relevant_constraints),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n+            constraint_names = relevant_constraints\n+\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..f89e36a 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -226,12 +226,19 @@ class BaseDatabaseSchemaEditor:\n             fields = [model._meta.get_field(field) for field in field_names]\n             self.execute(self._create_index_sql(model, fields, suffix='_idx'))\n     def _delete_composed_index(self, model, fields, constraint_kwargs, sql):\n-        meta_constraint_names = {constraint.name for constraint in model._meta.constraints}\n-        meta_index_names = {constraint.name for constraint in model._meta.indexes}\n+        meta_constraints_and_indexes = set()\n+        for constraint in model._meta.constraints:\n+            meta_constraints_and_indexes.add(constraint.name)\n+        for index in model._meta.indexes:\n+            meta_constraints_and_indexes.add(index.name)\n         columns = [model._meta.get_field(field).column for field in fields]\n-        constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n+        constraint_names = self._constraint_names(model, columns, exclude=meta_constraints_and_indexes, **constraint_kwargs)\n         if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+            constraint_type = 'unique' if constraint_kwargs.get('unique') else 'index'\n+            relevant_constraints = [name for name in constraint_names if constraint_type in name]\n+            if len(relevant_constraints) != 1:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(relevant_constraints), model._meta.db_table, ', '.join(columns)))\n+            constraint_names = relevant_constraints\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n", "normalized_occurrence": 1}
