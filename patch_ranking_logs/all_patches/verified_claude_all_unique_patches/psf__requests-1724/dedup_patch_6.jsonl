{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1724", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 2a182e9..7ee3e51 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -307,6 +307,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n         \"\"\"Prepares the given HTTP method.\"\"\"\n         self.method = method\n         if self.method is not None:\n+            if isinstance(self.method, unicode):\n+                self.method = self.method.encode('ascii')\n             self.method = self.method.upper()\n \n     def prepare_url(self, url, params):\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex e1a79e6..6553d3d 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -310,6 +310,9 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n         # Create the Request.\n+        # Ensure method is ASCII str before upper()\n+        if isinstance(method, unicode):\n+            method = method.encode('ascii')\n         req = Request(\n             method = method.upper(),\n             url = url,\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/models.py b/requests/models.py\nindex 69b69af..23cd4cc 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -151,6 +151,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):\n     def prepare_method(self, method):\n         self.method = method\n         if self.method is not None:\n+            if isinstance(self.method, unicode):\n+                self.method = self.method.encode('ascii')\n             self.method = self.method.upper()\n     def prepare_url(self, url, params):\n         try:\ndiff --git a/requests/sessions.py b/requests/sessions.py\nindex 2ecfd84..77a59c0 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -102,6 +102,8 @@ class Session(SessionRedirectMixin):\n         p.prepare(method=request.method.upper(), url=request.url, files=request.files, data=request.data, headers=merge_setting(request.headers, self.headers, dict_class=CaseInsensitiveDict), params=merge_setting(request.params, self.params), auth=merge_setting(auth, self.auth), cookies=merged_cookies, hooks=merge_setting(request.hooks, self.hooks))\n         return p\n     def request(self, method, url, params=None, data=None, headers=None, cookies=None, files=None, auth=None, timeout=None, allow_redirects=True, proxies=None, hooks=None, stream=None, verify=None, cert=None):\n+        if isinstance(method, unicode):\n+            method = method.encode('ascii')\n         req = Request(method=method.upper(), url=url, headers=headers, files=files, data=data or {}, params=params or {}, auth=auth, cookies=cookies, hooks=hooks)\n         prep = self.prepare_request(req)\n         self.cookies = cookiejar_from_dict(cookies, cookiejar=self.cookies, overwrite=False)\n", "normalized_occurrence": 1}
