{"model_name_or_path": "agentless", "instance_id": "django__django-12965", "model_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex b3d1d61..baf84f7 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -15,7 +15,16 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n \n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if not self.query.where and not self.single_alias:\n+            # If there are no conditions and multiple tables are involved, use simple DELETE FROM table\n+            result = [\n+                'DELETE FROM %s' % self.quote_name_unless_alias(\n+                    self.query.get_initial_alias()\n+                )\n+            ]\n+            from_sql, from_params = self.get_from_clause()\n+            result.extend(from_sql)\n+            return ' '.join(result), tuple(from_params)\n             return super().as_sql()\n         # MySQL and MariaDB < 10.3.2 doesn't support deletion with a subquery\n         # which is what the default implementation of SQLDeleteCompiler uses\n@@ -40,4 +49,4 @@ class SQLUpdateCompiler(compiler.SQLUpdateCompiler, SQLCompiler):\n \n \n class SQLAggregateCompiler(compiler.SQLAggregateCompiler, SQLCompiler):\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/mysql/compiler.py b/django/db/backends/mysql/compiler.py\nindex b3ead15..739f776 100644\n--- a/django/db/backends/mysql/compiler.py\n+++ b/django/db/backends/mysql/compiler.py\n@@ -9,7 +9,11 @@ class SQLInsertCompiler(compiler.SQLInsertCompiler, SQLCompiler):\n     pass\n class SQLDeleteCompiler(compiler.SQLDeleteCompiler, SQLCompiler):\n     def as_sql(self):\n-        if self.connection.features.update_can_self_select or self.single_alias:\n+        if not self.query.where and (not self.single_alias):\n+            result = ['DELETE FROM %s' % self.quote_name_unless_alias(self.query.get_initial_alias())]\n+            from_sql, from_params = self.get_from_clause()\n+            result.extend(from_sql)\n+            return (' '.join(result), tuple(from_params))\n             return super().as_sql()\n         result = ['DELETE %s FROM' % self.quote_name_unless_alias(self.query.get_initial_alias())]\n         from_sql, from_params = self.get_from_clause()\n", "normalized_occurrence": 1}
