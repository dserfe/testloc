{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..4cd3bc3 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1948,8 +1948,19 @@ class FiniteSet(Set, EvalfMixin):\n                             FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            if nums == []:\n+                return self\n+            syms = [m for m in self.args if not m.is_number]\n+            intervals = []\n+            if nums:\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+            if syms:\n+                return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+            else:\n+                return Union(intervals, evaluate=False)\n \n         elif isinstance(other, FiniteSet):\n             unk = []\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..737f861 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -853,8 +853,19 @@ class FiniteSet(Set, EvalfMixin):\n                     return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n                 else:\n                     return Union(intervals, evaluate=False)\n-            elif nums == []:\n-                return None\n+            if nums == []:\n+                return self\n+            syms = [m for m in self.args if not m.is_number]\n+            intervals = []\n+            if nums:\n+                intervals += [Interval(S.NegativeInfinity, nums[0], True, True)]\n+                for a, b in zip(nums[:-1], nums[1:]):\n+                    intervals.append(Interval(a, b, True, True))\n+                intervals.append(Interval(nums[-1], S.Infinity, True, True))\n+            if syms:\n+                return Complement(Union(intervals, evaluate=False), FiniteSet(*syms), evaluate=False)\n+            else:\n+                return Union(intervals, evaluate=False)\n         elif isinstance(other, FiniteSet):\n             unk = []\n             for i in self:\n", "normalized_occurrence": 1}
