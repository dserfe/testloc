{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..171af05 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -574,6 +574,18 @@ class Query(BaseExpression):\n \n         # Work out how to relabel the rhs aliases, if necessary.\n         change_map = {}\n+\n+        def ensure_disjoint_alias(alias, existing_aliases):\n+            \"\"\"\n+            Ensure that the new alias does not conflict with existing aliases.\n+            If it does, increment the suffix until it is unique.\n+            \"\"\"\n+            original_alias = alias\n+            suffix = 1\n+            while alias in existing_aliases:\n+                alias = f\"{original_alias}_{suffix}\"\n+                suffix += 1\n+            return alias\n         conjunction = (connector == AND)\n \n         # Determine which existing joins can be reused. When combining the\n@@ -604,7 +616,7 @@ class Query(BaseExpression):\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n             join = join.relabeled_clone(change_map)\n-            new_alias = self.join(join, reuse=reuse)\n+            new_alias = ensure_disjoint_alias(self.join(join, reuse=reuse), change_map.values())\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             # We can't reuse the same join again in the query. If we have two\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..afa5585 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -326,6 +326,13 @@ class Query(BaseExpression):\n         if self.distinct_fields != rhs.distinct_fields:\n             raise TypeError('Cannot combine queries with different distinct fields.')\n         change_map = {}\n+        def ensure_disjoint_alias(alias, existing_aliases):\n+            original_alias = alias\n+            suffix = 1\n+            while alias in existing_aliases:\n+                alias = f'{original_alias}_{suffix}'\n+                suffix += 1\n+            return alias\n         conjunction = connector == AND\n         reuse = set() if conjunction else set(self.alias_map)\n         self.get_initial_alias()\n@@ -336,7 +343,7 @@ class Query(BaseExpression):\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n-            new_alias = self.join(join, reuse=reuse)\n+            new_alias = ensure_disjoint_alias(self.join(join, reuse=reuse), change_map.values())\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n", "normalized_occurrence": 1}
