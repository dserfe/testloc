{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..82d052e 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1396,7 +1396,7 @@ class Variable(\n         return expanded_var.transpose(*dims)\n \n     def _stack_once(self, dims, new_dim):\n-        if not set(dims) <= set(self.dims):\n+        if not set(dims).issubset(set(self.dims)):\n             raise ValueError(\"invalid existing dimensions: %s\" % dims)\n \n         if new_dim in self.dims:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..5171f0e 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1061,7 +1061,7 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         return expanded_var.transpose(*dims)\n \n     def _stack_once(self, dims, new_dim):\n-        if not set(dims) <= set(self.dims):\n+        if not set(dims).issubset(set(self.dims)):\n             raise ValueError('invalid existing dimensions: %s' % dims)\n         if new_dim in self.dims:\n             raise ValueError('cannot create a new dimension with the same name as an existing dimension')\n", "normalized_occurrence": 1}
