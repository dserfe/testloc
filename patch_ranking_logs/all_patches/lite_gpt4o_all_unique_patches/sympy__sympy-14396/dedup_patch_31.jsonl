{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..f586f92 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -407,6 +407,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n+    _re_rr_polynomial = re.compile(r\"^(RR)\\[(.+)\\]$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n     @classmethod\n@@ -450,7 +451,11 @@ class Domain(with_metaclass(OptionType, Option)):\n             if r is not None:\n                 return sympy.polys.domains.FF(int(r.groups()[1]))\n \n-            r = cls._re_polynomial.match(domain)\n+            r = cls._re_rr_polynomial.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n \n             if r is not None:\n                 ground, gens = r.groups()\n@@ -480,7 +485,7 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError('Expected a valid domain specification, got \"%s\". Please check the domain format.' % domain)\n \n     @classmethod\n     def postprocess(cls, options):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..0a63aa0 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -233,6 +233,7 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n     _re_fraction = re.compile('^(Z|ZZ|Q|QQ)\\\\((.+)\\\\)$')\n+    _re_rr_polynomial = re.compile('^(RR)\\\\[(.+)\\\\]$')\n     _re_algebraic = re.compile('^(Q|QQ)\\\\<(.+)\\\\>$')\n     @classmethod\n     def preprocess(cls, domain):\n@@ -264,7 +265,10 @@ class Domain(with_metaclass(OptionType, Option)):\n             r = cls._re_finitefield.match(domain)\n             if r is not None:\n                 return sympy.polys.domains.FF(int(r.groups()[1]))\n-            r = cls._re_polynomial.match(domain)\n+            r = cls._re_rr_polynomial.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n             if r is not None:\n                 ground, gens = r.groups()\n                 gens = list(map(sympify, gens.split(',')))\n@@ -284,7 +288,7 @@ class Domain(with_metaclass(OptionType, Option)):\n             if r is not None:\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError('Expected a valid domain specification, got \"%s\". Please check the domain format.' % domain)\n     @classmethod\n     def postprocess(cls, options):\n         if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n", "normalized_occurrence": 1}
