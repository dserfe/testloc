{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9281", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 7192ab0..64ff213 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1288,6 +1288,19 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n \n+        from enum import Enum\n+        def stringify_annotation(annotation):\n+            if isinstance(annotation, Enum):\n+                return f\"{annotation.__class__.__name__}.{annotation.name}\"\n+            return repr(annotation)\n+\n+        def stringify_signature(sig, **kwargs):\n+            return str(sig.replace(parameters=[\n+                param.replace(default=stringify_annotation(param.default))\n+                if param.default is not param.empty else param\n+                for param in sig.parameters.values()\n+            ]))\n+\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 2bf2bdb..761517f 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -704,6 +704,13 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):\n     def format_args(self, **kwargs: Any) -> str:\n         if self.config.autodoc_typehints in ('none', 'description'):\n             kwargs.setdefault('show_annotation', False)\n+        from enum import Enum\n+        def stringify_annotation(annotation):\n+            if isinstance(annotation, Enum):\n+                return f'{annotation.__class__.__name__}.{annotation.name}'\n+            return repr(annotation)\n+        def stringify_signature(sig, **kwargs):\n+            return str(sig.replace(parameters=[param.replace(default=stringify_annotation(param.default)) if param.default is not param.empty else param for param in sig.parameters.values()]))\n         try:\n             self.env.app.emit('autodoc-before-process-signature', self.object, False)\n             sig = inspect.signature(self.object, type_aliases=self.config.autodoc_type_aliases)\n", "normalized_occurrence": 1}
