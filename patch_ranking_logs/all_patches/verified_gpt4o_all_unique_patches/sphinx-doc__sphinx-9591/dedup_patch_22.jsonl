{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..66ecae9 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -27,7 +27,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n@@ -164,7 +164,23 @@ def augment_descriptions_with_types(\n             field += nodes.field_body('', nodes.paragraph('', annotations[name]))\n             node += field\n \n-    # Add 'rtype' if 'return' is present and 'rtype' isn't.\n+    # Add 'rtype' if 'return' is present and 'rtype' isn't. Also process properties correctly.\n+    if 'return' in annotations:\n+        if 'return' in has_description and 'return' not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'rtype')\n+            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            node += field\n+        elif 'return' not in has_description and 'return' not in has_type:\n+            # Look for property type annotations\n+            if isinstance(node.parent, nodes.field_list):\n+                for field in node.parent:\n+                    if isinstance(field, nodes.field) and field[0].astext() == 'rtype':\n+                        return\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+                node += field\n     if 'return' in annotations:\n         if 'return' in has_description and 'return' not in has_type:\n             field = nodes.field()\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..b2b9e42 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -11,7 +11,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            sig = inspect.signature(obj)\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n@@ -127,6 +127,21 @@ def augment_descriptions_with_types(node: nodes.field_list, annotations: Dict[st\n             field += nodes.field_name('', 'rtype')\n             field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n             node += field\n+        elif 'return' not in has_description and 'return' not in has_type:\n+            if isinstance(node.parent, nodes.field_list):\n+                for field in node.parent:\n+                    if isinstance(field, nodes.field) and field[0].astext() == 'rtype':\n+                        return\n+                field = nodes.field()\n+                field += nodes.field_name('', 'rtype')\n+                field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+                node += field\n+    if 'return' in annotations:\n+        if 'return' in has_description and 'return' not in has_type:\n+            field = nodes.field()\n+            field += nodes.field_name('', 'rtype')\n+            field += nodes.field_body('', nodes.paragraph('', annotations['return']))\n+            node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n     app.connect('object-description-transform', merge_typehints)\n", "normalized_occurrence": 1}
