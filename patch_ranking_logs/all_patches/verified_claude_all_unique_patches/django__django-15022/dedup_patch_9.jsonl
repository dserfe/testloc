{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15022", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex ff74678..6b4cfa8 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1031,14 +1031,15 @@ class ModelAdmin(BaseModelAdmin):\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field))\n                            for search_field in search_fields]\n+            or_queries = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(\n+                or_queries |= models.Q(\n                     *((orm_lookup, bit) for orm_lookup in orm_lookups),\n                     _connector=models.Q.OR,\n                 )\n-                queryset = queryset.filter(or_queries)\n+            queryset = queryset.filter(or_queries)\n             may_have_duplicates |= any(\n                 lookup_spawns_duplicates(self.opts, search_spec)\n                 for search_spec in orm_lookups\n", "occurrence": 2, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 329a2c1..9154c30 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -490,11 +490,12 @@ class ModelAdmin(BaseModelAdmin):\n         search_fields = self.get_search_fields(request)\n         if search_fields and search_term:\n             orm_lookups = [construct_search(str(search_field)) for search_field in search_fields]\n+            or_queries = models.Q()\n             for bit in smart_split(search_term):\n                 if bit.startswith(('\"', \"'\")) and bit[0] == bit[-1]:\n                     bit = unescape_string_literal(bit)\n-                or_queries = models.Q(*((orm_lookup, bit) for orm_lookup in orm_lookups), _connector=models.Q.OR)\n-                queryset = queryset.filter(or_queries)\n+                or_queries |= models.Q(*((orm_lookup, bit) for orm_lookup in orm_lookups), _connector=models.Q.OR)\n+            queryset = queryset.filter(or_queries)\n             may_have_duplicates |= any((lookup_spawns_duplicates(self.opts, search_spec) for search_spec in orm_lookups))\n         return (queryset, may_have_duplicates)\n     def get_preserved_filters(self, request):\n", "normalized_occurrence": 4}
