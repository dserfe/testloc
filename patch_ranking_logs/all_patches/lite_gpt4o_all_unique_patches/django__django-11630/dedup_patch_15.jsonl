{"model_name_or_path": "agentless", "instance_id": "django__django-11630", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex c5f3683..401add0 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -203,9 +203,13 @@ class Options:\n         del self.meta\n \n         # If the db_table wasn't provided, use the app_label + model_name.\n+        # Ensure unique table names across different apps and models.\n         if not self.db_table:\n-            self.db_table = \"%s_%s\" % (self.app_label, self.model_name)\n-            self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            unique_table_name = \"%s_%s\" % (self.app_label, self.model_name)\n+            self.db_table = truncate_name(unique_table_name, connection.ops.max_name_length())\n+            if apps.get_model(self.app_label, self.model_name):\n+                raise ValueError(\"The table name '%s' is already used by another model: %s.%s\"\n+                                 % (self.db_table, self.app_label, self.model_name))\n \n     def _format_names_with_class(self, cls, objs):\n         \"\"\"App label/class name interpolation for object names.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex dbc5560..a753806 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -126,8 +126,10 @@ class Options:\n             self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n         del self.meta\n         if not self.db_table:\n-            self.db_table = '%s_%s' % (self.app_label, self.model_name)\n-            self.db_table = truncate_name(self.db_table, connection.ops.max_name_length())\n+            unique_table_name = '%s_%s' % (self.app_label, self.model_name)\n+            self.db_table = truncate_name(unique_table_name, connection.ops.max_name_length())\n+            if apps.get_model(self.app_label, self.model_name):\n+                raise ValueError(\"The table name '%s' is already used by another model: %s.%s\" % (self.db_table, self.app_label, self.model_name))\n     def _format_names_with_class(self, cls, objs):\n         new_objs = []\n         for obj in objs:\n", "normalized_occurrence": 1}
