{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..5165dbf 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -270,7 +270,13 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             'unique_together': unique_together,\n             'index_together': index_together,\n             'indexes': indexes,\n-            'constraints': constraints,\n+            'constraints': [\n+                constraint for constraint in constraints\n+                if not (\n+                    isinstance(constraint, UniqueConstraint) and\n+                    any(isinstance(expr, F) for expr in getattr(constraint, 'expressions', []))\n+                )\n+            ],\n             'apps': apps,\n         }\n         meta = type(\"Meta\", (), meta_contents)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..1b52d6e 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -136,7 +136,7 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         body_copy['__module__'] = model.__module__\n         type(model._meta.object_name, model.__bases__, body_copy)\n         body_copy = copy.deepcopy(body)\n-        meta_contents = {'app_label': model._meta.app_label, 'db_table': 'new__%s' % strip_quotes(model._meta.db_table), 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': constraints, 'apps': apps}\n+        meta_contents = {'app_label': model._meta.app_label, 'db_table': 'new__%s' % strip_quotes(model._meta.db_table), 'unique_together': unique_together, 'index_together': index_together, 'indexes': indexes, 'constraints': [constraint for constraint in constraints if not (isinstance(constraint, UniqueConstraint) and any((isinstance(expr, F) for expr in getattr(constraint, 'expressions', []))))], 'apps': apps}\n         meta = type('Meta', (), meta_contents)\n         body_copy['Meta'] = meta\n         body_copy['__module__'] = model.__module__\n", "normalized_occurrence": 1}
