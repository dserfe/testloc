{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-4493", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 8003c0d..7cf72b1 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3907,6 +3907,12 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             dataset.\n         \"\"\"\n         merge_result = dataset_update_method(self, other)\n+        # Preserve chunking by avoiding unnecessary computation\n+        variables = {\n+            k: v.chunk(v.chunks) if hasattr(v, 'chunks') else v \n+            for k, v in merge_result.variables.items()\n+        }\n+        merge_result = merge_result._replace(variables=variables)\n         return self._replace(inplace=True, **merge_result._asdict())\n \n     def merge(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 5bd37a8..dfd5694 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1254,6 +1254,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n         return result\n     def update(self, other: 'CoercibleMapping') -> 'Dataset':\n         merge_result = dataset_update_method(self, other)\n+        variables = {k: v.chunk(v.chunks) if hasattr(v, 'chunks') else v for k, v in merge_result.variables.items()}\n+        merge_result = merge_result._replace(variables=variables)\n         return self._replace(inplace=True, **merge_result._asdict())\n     def merge(self, other: Union['CoercibleMapping', 'DataArray'], overwrite_vars: Union[Hashable, Iterable[Hashable]]=frozenset(), compat: str='no_conflicts', join: str='outer', fill_value: Any=dtypes.NA) -> 'Dataset':\n         other = other.to_dataset() if isinstance(other, xr.DataArray) else other\n", "normalized_occurrence": 1}
