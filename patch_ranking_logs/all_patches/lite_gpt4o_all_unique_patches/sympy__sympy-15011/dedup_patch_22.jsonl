{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..bfc5547 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -741,6 +741,10 @@ class _EvaluatorPrinter(object):\n             else:\n                 argstrs.append(str(arg))\n \n+        if dummify:\n+            # Re-evaluate expr to catch any remaining non-standard names\n+            expr = self._subexpr(expr, {arg: Dummy(str(arg)) for arg in flatten(args) if not self._is_safe_ident(self._argrepr(arg))})\n+\n         return argstrs, expr\n \n     def _subexpr(self, expr, dummies_dict):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..815da1c 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -308,6 +308,8 @@ class _EvaluatorPrinter(object):\n                 expr = self._subexpr(expr, {arg: dummy})\n             else:\n                 argstrs.append(str(arg))\n+        if dummify:\n+            expr = self._subexpr(expr, {arg: Dummy(str(arg)) for arg in flatten(args) if not self._is_safe_ident(self._argrepr(arg))})\n         return (argstrs, expr)\n     def _subexpr(self, expr, dummies_dict):\n         from sympy.matrices import DeferredVector\n", "normalized_occurrence": 1}
