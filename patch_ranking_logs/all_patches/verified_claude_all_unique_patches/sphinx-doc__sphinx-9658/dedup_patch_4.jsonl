{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-9658", "model_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 281da6f..292b35d 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -66,7 +66,12 @@ class _MockObject:\n         return call\n \n     def __repr__(self) -> str:\n-        return self.__display_name__\n+        # Include the full mock path including any class name\n+        name = self.__display_name__\n+        if '.' in name and not name.endswith('.'): \n+            return name\n+        # If it's just a module path ending in dot, strip the trailing dot\n+        return name.rstrip('.')\n \n \n def _make_subclass(name: str, module: str, superclass: Any = _MockObject,\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/mock.py b/sphinx/ext/autodoc/mock.py\nindex 8db72bb..f0b9e35 100644\n--- a/sphinx/ext/autodoc/mock.py\n+++ b/sphinx/ext/autodoc/mock.py\n@@ -37,7 +37,10 @@ class _MockObject:\n         call.__sphinx_decorator_args__ = args\n         return call\n     def __repr__(self) -> str:\n-        return self.__display_name__\n+        name = self.__display_name__\n+        if '.' in name and (not name.endswith('.')):\n+            return name\n+        return name.rstrip('.')\n def _make_subclass(name: str, module: str, superclass: Any=_MockObject, attributes: Any=None, decorator_args: Tuple=()) -> Any:\n     attrs = {'__module__': module, '__display_name__': module + '.' + name, '__sphinx_decorator_args__': decorator_args}\n     attrs.update(attributes or {})\n", "normalized_occurrence": 1}
