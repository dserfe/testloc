{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 639ff43..479aa70 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -64,8 +64,8 @@ class MatMul(MatrixExpr):\n         if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n             return coeff*Add(*[X[i, k]*Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff*X[i, k]*Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n-            # Don't waste time in result.doit() if the sum bounds are symbolic\n+        if not X.cols.is_number or (isinstance(result, Sum) and any(isinstance(arg, Sum) for arg in result.args)):\n+            # Don't waste time in result.doit() if the sum bounds are symbolic or if the result is already a Sum\n             expand = False\n         return result.doit() if expand else result\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 5b270b9..8b90290 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -39,7 +39,7 @@ class MatMul(MatrixExpr):\n         if X.has(ImmutableMatrix) or Y.has(ImmutableMatrix):\n             return coeff * Add(*[X[i, k] * Y[k, j] for k in range(X.cols)])\n         result = Sum(coeff * X[i, k] * Y[k, j], (k, 0, X.cols - 1))\n-        if not X.cols.is_number:\n+        if not X.cols.is_number or (isinstance(result, Sum) and any((isinstance(arg, Sum) for arg in result.args))):\n             expand = False\n         return result.doit() if expand else result\n     def as_coeff_matrices(self):\n", "normalized_occurrence": 1}
