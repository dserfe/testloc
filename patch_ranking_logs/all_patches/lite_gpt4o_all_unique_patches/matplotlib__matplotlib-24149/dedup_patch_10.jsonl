{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-24149", "model_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5af9d96..bae2cfe 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -2178,15 +2178,11 @@ class Axes(_AxesBase):\n             # We can't just cast x0 and dx to numpy arrays because that\n             # removes the units from unit packages like `pint` that\n             # wrap numpy arrays.\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n+            x0 = cbook._safe_first_finite(x0)\n+            x = cbook._safe_first_finite(xconv)\n \n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n-                x = xconv\n+            if x0 is np.nan or x is np.nan:\n+                raise ValueError(\"Cannot convert width/position: input contains all NaN values\")\n \n             delist = False\n             if not np.iterable(dx):\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py\nindex 5336f05..a6e0e78 100644\n--- a/lib/matplotlib/axes/_axes.py\n+++ b/lib/matplotlib/axes/_axes.py\n@@ -455,14 +455,10 @@ class Axes(_AxesBase):\n         if xconv.size == 0:\n             return convert(dx)\n         try:\n-            try:\n-                x0 = cbook._safe_first_finite(x0)\n-            except (TypeError, IndexError, KeyError):\n-                pass\n-            try:\n-                x = cbook._safe_first_finite(xconv)\n-            except (TypeError, IndexError, KeyError):\n-                x = xconv\n+            x0 = cbook._safe_first_finite(x0)\n+            x = cbook._safe_first_finite(xconv)\n+            if x0 is np.nan or x is np.nan:\n+                raise ValueError('Cannot convert width/position: input contains all NaN values')\n             delist = False\n             if not np.iterable(dx):\n                 dx = [dx]\n", "normalized_occurrence": 1}
