{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-12682", "model_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8cfbe5f..e63b9f0 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -32,7 +32,7 @@ def _check_positive_coding(method, positive):\n def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars',\n                    regularization=None, copy_cov=True,\n                    init=None, max_iter=1000, check_input=True, verbose=0,\n-                   positive=False):\n+                   positive=False, **lasso_kwargs):\n     \"\"\"Generic sparse coding\n \n     Each column of the result is the solution to a Lasso problem.\n@@ -141,7 +141,7 @@ def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars',\n         # argument that we could pass in from Lasso.\n         clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False,\n                     precompute=gram, max_iter=max_iter, warm_start=True,\n-                    positive=positive)\n+                    positive=positive, **lasso_kwargs)\n \n         if init is not None:\n             clf.coef_ = init\n@@ -991,12 +991,14 @@ class SparseCoder(BaseEstimator, SparseCodingMixin):\n \n     def __init__(self, dictionary, transform_algorithm='omp',\n                  transform_n_nonzero_coefs=None, transform_alpha=None,\n-                 split_sign=False, n_jobs=None, positive_code=False):\n+                 split_sign=False, n_jobs=None, positive_code=False,\n+                 **lasso_kwargs):\n         self._set_sparse_coding_params(dictionary.shape[0],\n                                        transform_algorithm,\n                                        transform_n_nonzero_coefs,\n                                        transform_alpha, split_sign, n_jobs,\n                                        positive_code)\n+        self.lasso_kwargs = lasso_kwargs\n         self.components_ = dictionary\n \n     def fit(self, X, y=None):\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/decomposition/dict_learning.py b/sklearn/decomposition/dict_learning.py\nindex 8a206a7..44148ad 100644\n--- a/sklearn/decomposition/dict_learning.py\n+++ b/sklearn/decomposition/dict_learning.py\n@@ -13,7 +13,7 @@ from ..linear_model import Lasso, orthogonal_mp_gram, LassoLars, Lars\n def _check_positive_coding(method, positive):\n     if positive and method in ['omp', 'lars']:\n         raise ValueError(\"Positive constraint not supported for '{}' coding method.\".format(method))\n-def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars', regularization=None, copy_cov=True, init=None, max_iter=1000, check_input=True, verbose=0, positive=False):\n+def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars', regularization=None, copy_cov=True, init=None, max_iter=1000, check_input=True, verbose=0, positive=False, **lasso_kwargs):\n     if X.ndim == 1:\n         X = X[:, np.newaxis]\n     n_samples, n_features = X.shape\n@@ -35,7 +35,7 @@ def _sparse_encode(X, dictionary, gram, cov=None, algorithm='lasso_lars', regula\n             np.seterr(**err_mgt)\n     elif algorithm == 'lasso_cd':\n         alpha = float(regularization) / n_features\n-        clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False, precompute=gram, max_iter=max_iter, warm_start=True, positive=positive)\n+        clf = Lasso(alpha=alpha, fit_intercept=False, normalize=False, precompute=gram, max_iter=max_iter, warm_start=True, positive=positive, **lasso_kwargs)\n         if init is not None:\n             clf.coef_ = init\n         clf.fit(dictionary.T, X.T, check_input=check_input)\n@@ -284,8 +284,9 @@ class SparseCodingMixin(TransformerMixin):\n         return code\n class SparseCoder(BaseEstimator, SparseCodingMixin):\n     _required_parameters = ['dictionary']\n-    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False):\n+    def __init__(self, dictionary, transform_algorithm='omp', transform_n_nonzero_coefs=None, transform_alpha=None, split_sign=False, n_jobs=None, positive_code=False, **lasso_kwargs):\n         self._set_sparse_coding_params(dictionary.shape[0], transform_algorithm, transform_n_nonzero_coefs, transform_alpha, split_sign, n_jobs, positive_code)\n+        self.lasso_kwargs = lasso_kwargs\n         self.components_ = dictionary\n     def fit(self, X, y=None):\n         return self\n", "normalized_occurrence": 1}
