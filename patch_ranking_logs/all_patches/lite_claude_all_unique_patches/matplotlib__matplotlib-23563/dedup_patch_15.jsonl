{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-23563", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex fa869c7..7366a9e 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -166,7 +166,19 @@ class Line3D(lines.Line2D):\n         Keyword arguments are passed onto :func:`~matplotlib.lines.Line2D`.\n         \"\"\"\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = xs, ys, zs\n+        try:\n+            # Convert inputs to numpy arrays and ensure they're 1D\n+            xs = np.asarray(xs).ravel()\n+            ys = np.asarray(ys).ravel()\n+            zs = np.asarray(zs).ravel()\n+            # Ensure all arrays have the same length\n+            if not (len(xs) == len(ys) == len(zs)):\n+                raise ValueError(\"All input arrays must have the same length\")\n+            self._verts3d = xs, ys, zs\n+        except Exception as e:\n+            # Ensure _verts3d is always initialized even if there's an error\n+            self._verts3d = [], [], []\n+            raise e\n \n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex e39ff0d..e9d5c47 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -64,7 +64,16 @@ def text_2d_to_3d(obj, z=0, zdir='z'):\n class Line3D(lines.Line2D):\n     def __init__(self, xs, ys, zs, *args, **kwargs):\n         super().__init__([], [], *args, **kwargs)\n-        self._verts3d = (xs, ys, zs)\n+        try:\n+            xs = np.asarray(xs).ravel()\n+            ys = np.asarray(ys).ravel()\n+            zs = np.asarray(zs).ravel()\n+            if not len(xs) == len(ys) == len(zs):\n+                raise ValueError('All input arrays must have the same length')\n+            self._verts3d = (xs, ys, zs)\n+        except Exception as e:\n+            self._verts3d = ([], [], [])\n+            raise e\n     def set_3d_properties(self, zs=0, zdir='z'):\n         xs = self.get_xdata()\n         ys = self.get_ydata()\n", "normalized_occurrence": 1}
