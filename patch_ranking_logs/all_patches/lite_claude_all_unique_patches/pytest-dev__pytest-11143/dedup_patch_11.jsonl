{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..df527f2 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -676,6 +676,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 expect_docstring\n                 and isinstance(item, ast.Expr)\n                 and isinstance(item.value, ast.Constant)\n+                and isinstance(item.value.value, str)\n             ):\n                 doc = item.value.value\n                 if self.is_rewrite_disabled(doc):\n@@ -743,6 +744,8 @@ class AssertionRewriter(ast.NodeVisitor):\n \n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..46eec1c 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -361,7 +361,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         pos = 0\n         item = None\n         for item in mod.body:\n-            if expect_docstring and isinstance(item, ast.Expr) and isinstance(item.value, ast.Constant):\n+            if expect_docstring and isinstance(item, ast.Expr) and isinstance(item.value, ast.Constant) and isinstance(item.value.value, str):\n                 doc = item.value.value\n                 if self.is_rewrite_disabled(doc):\n                     return\n@@ -399,6 +399,8 @@ class AssertionRewriter(ast.NodeVisitor):\n                     nodes.append(field)\n     @staticmethod\n     def is_rewrite_disabled(docstring: str) -> bool:\n+        if not isinstance(docstring, str):\n+            return False\n         return 'PYTEST_DONT_REWRITE' in docstring\n     def variable(self) -> str:\n         name = '@py_assert' + str(next(self.variable_counter))\n", "normalized_occurrence": 1}
