{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13773", "model_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex 13b44f5..f3e2425 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -31,7 +31,8 @@ class MatMul(MatrixExpr):\n     def __new__(cls, *args, **kwargs):\n         check = kwargs.get('check', True)\n \n-        args = list(map(sympify, args))\n+        from sympy import MatrixBase\n+        args = [arg if isinstance(arg, MatrixBase) else sympify(arg) for arg in args]\n         obj = Basic.__new__(cls, *args)\n         factor, matrices = obj.as_coeff_matrices()\n         if check:\n@@ -135,7 +136,10 @@ class MatMul(MatrixExpr):\n \n def validate(*matrices):\n     \"\"\" Checks for valid shapes for args of MatMul \"\"\"\n-    for i in range(len(matrices)-1):\n+    from sympy import MatrixBase\n+    for i, matrix in enumerate(matrices):\n+        if not isinstance(matrix, MatrixBase):\n+            raise ValueError(f\"Argument {i+1} is not a matrix\")\n         A, B = matrices[i:i+2]\n         if A.cols != B.rows:\n             raise ShapeError(\"Matrices %s and %s are not aligned\"%(A, B))\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py\nindex c9124f3..876e13a 100644\n--- a/sympy/matrices/expressions/matmul.py\n+++ b/sympy/matrices/expressions/matmul.py\n@@ -11,7 +11,8 @@ class MatMul(MatrixExpr):\n     is_MatMul = True\n     def __new__(cls, *args, **kwargs):\n         check = kwargs.get('check', True)\n-        args = list(map(sympify, args))\n+        from sympy import MatrixBase\n+        args = [arg if isinstance(arg, MatrixBase) else sympify(arg) for arg in args]\n         obj = Basic.__new__(cls, *args)\n         factor, matrices = obj.as_coeff_matrices()\n         if check:\n@@ -86,7 +87,10 @@ class MatMul(MatrixExpr):\n         coeff_c, coeff_nc = coeff.args_cnc(**kwargs)\n         return (coeff_c, coeff_nc + matrices)\n def validate(*matrices):\n-    for i in range(len(matrices) - 1):\n+    from sympy import MatrixBase\n+    for i, matrix in enumerate(matrices):\n+        if not isinstance(matrix, MatrixBase):\n+            raise ValueError(f'Argument {i + 1} is not a matrix')\n         A, B = matrices[i:i + 2]\n         if A.cols != B.rows:\n             raise ShapeError('Matrices %s and %s are not aligned' % (A, B))\n", "normalized_occurrence": 1}
