{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..96a9806 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -392,7 +392,9 @@ class Set(Basic):\n         # XXX: We shouldn't do this. A query like this should be handled\n         # without evaluating new Set objects. It should be the other way round\n         # so that the intersect method uses is_subset for evaluation.\n-        if self.intersect(other) == self:\n+        #\n+        # Check if intersection equals self and self's complement with other is empty\n+        if self.intersect(other) == self and (self - other).is_empty:\n             return True\n \n     def _eval_is_subset(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..e6a521f 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,7 +137,7 @@ class Set(Basic):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n-        if self.intersect(other) == self:\n+        if self.intersect(other) == self and (self - other).is_empty:\n             return True\n     def _eval_is_subset(self, other):\n         return None\n", "normalized_occurrence": 1}
