{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23950", "model_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 0b1e933..b1cc587 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -1,3 +1,4 @@\n+\n from sympy.core import S\n from sympy.core.relational import Eq, Ne\n from sympy.logic.boolalg import BooleanFunction\n@@ -45,4 +46,25 @@ class Contains(BooleanFunction):\n             isinstance(i, (Eq, Ne))])\n \n     def as_set(self):\n-        raise NotImplementedError()\n+        \"\"\"\n+        Returns the set-theoretic representation of this Contains object.\n+        \n+        Examples\n+        ========\n+        \n+        >>> from sympy import Contains, S\n+        >>> Contains(2, S.Reals).as_set()\n+        {2}\n+        >>> Contains(2, S.Integers).as_set()\n+        {2}\n+        \"\"\"\n+        x, s = self.args\n+        ret = self.eval(x, s)\n+        if ret is True:\n+            from sympy.sets.sets import FiniteSet\n+            return FiniteSet(x)\n+        if ret is False:\n+            from sympy.sets.sets import EmptySet\n+            return EmptySet\n+        from sympy.sets.sets import Intersection, FiniteSet\n+        return Intersection(FiniteSet(x), s)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/contains.py b/sympy/sets/contains.py\nindex 2fd72c0..1f555d0 100644\n--- a/sympy/sets/contains.py\n+++ b/sympy/sets/contains.py\n@@ -15,4 +15,13 @@ class Contains(BooleanFunction):\n     def binary_symbols(self):\n         return set().union(*[i.binary_symbols for i in self.args[1].args if i.is_Boolean or i.is_Symbol or isinstance(i, (Eq, Ne))])\n     def as_set(self):\n-        raise NotImplementedError()\n\\ No newline at end of file\n+        x, s = self.args\n+        ret = self.eval(x, s)\n+        if ret is True:\n+            from sympy.sets.sets import FiniteSet\n+            return FiniteSet(x)\n+        if ret is False:\n+            from sympy.sets.sets import EmptySet\n+            return EmptySet\n+        from sympy.sets.sets import Intersection, FiniteSet\n+        return Intersection(FiniteSet(x), s)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
