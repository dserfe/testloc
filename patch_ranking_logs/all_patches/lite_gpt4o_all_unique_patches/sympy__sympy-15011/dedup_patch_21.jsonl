{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15011", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 48d6783..bbd6d8d 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -423,17 +423,22 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True,\n     # Grab the callers frame, for getting the names by inspection (if needed)\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n-        if hasattr(var, 'name'):\n+        if isinstance(var, Symbol):\n+            names.append(var.name)\n+        elif isinstance(var, MatrixSymbol):\n             names.append(var.name)\n         else:\n-            # It's an iterable. Try to get name by inspection of calling frame.\n-            name_list = [var_name for var_name, var_val in callers_local_vars\n-                    if var_val is var]\n-            if len(name_list) == 1:\n-                names.append(name_list[0])\n+            if hasattr(var, 'name'):\n+                names.append(var.name)\n             else:\n-                # Cannot infer name with certainty. arg_# will have to do.\n-                names.append('arg_' + str(n))\n+                # It's an iterable. Try to get name by inspection of calling frame.\n+                name_list = [var_name for var_name, var_val in callers_local_vars\n+                        if var_val is var]\n+                if len(name_list) == 1:\n+                    names.append(name_list[0])\n+                else:\n+                    # Cannot infer name with certainty. arg_# will have to do.\n+                    names.append('arg_' + str(n))\n \n     imp_mod_lines = []\n     for mod, keys in (getattr(printer, 'module_imports', None) or {}).items():\n@@ -620,7 +625,7 @@ def lambdastr(args, expr, printer=None, dummify=False):\n         if isinstance(expr, str):\n             pass\n         else:\n-            expr = sub_expr(expr, dummies_dict)\n+            expr = self._subexpr(expr, dummies_dict)\n     expr = lambdarepr(expr)\n     return \"lambda %s: (%s)\" % (args, expr)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex 9997e01..955a8d5 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -109,7 +109,11 @@ def lambdify(args, expr, modules=None, printer=None, use_imps=True, dummify=Fals\n     names = []\n     callers_local_vars = inspect.currentframe().f_back.f_locals.items()\n     for n, var in enumerate(args):\n-        if hasattr(var, 'name'):\n+        if isinstance(var, Symbol):\n+            names.append(var.name)\n+        elif isinstance(var, MatrixSymbol):\n+            names.append(var.name)\n+        elif hasattr(var, 'name'):\n             names.append(var.name)\n         else:\n             name_list = [var_name for var_name, var_val in callers_local_vars if var_val is var]\n@@ -231,7 +235,7 @@ def lambdastr(args, expr, printer=None, dummify=False):\n         if isinstance(expr, str):\n             pass\n         else:\n-            expr = sub_expr(expr, dummies_dict)\n+            expr = self._subexpr(expr, dummies_dict)\n     expr = lambdarepr(expr)\n     return 'lambda %s: (%s)' % (args, expr)\n class _EvaluatorPrinter(object):\n", "normalized_occurrence": 1}
