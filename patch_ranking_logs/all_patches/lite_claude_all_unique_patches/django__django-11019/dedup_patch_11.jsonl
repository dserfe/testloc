{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11019", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex b9c8e61..6159c68 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -115,6 +115,52 @@ class Media:\n         raise KeyError('Unknown media type \"%s\"' % name)\n \n     @staticmethod\n+    def merge(list_1, list_2):\n+        \"\"\"\n+        Merge two lists while trying to keep the relative order of the elements.\n+        Warn if the lists have elements whose relative order conflicts between\n+        the two lists.\n+\n+        For static assets it can be important to have them included in the DOM\n+        in a certain order. In JavaScript you may not be able to reference a\n+        global or in CSS you might want to override a style.\n+        \"\"\"\n+        # Build a graph of dependencies\n+        before = {}  # path -> set of paths that must come before it\n+        for lst in (list_1, list_2):\n+            for i, path in enumerate(lst):\n+                if path not in before:\n+                    before[path] = set()\n+                for j in range(i):\n+                    before[path].add(lst[j])\n+\n+        # Check for conflicts and build the result\n+        result = []\n+        seen = set()\n+        \n+        def add_path(path):\n+            if path in seen:\n+                return\n+            # First add all paths that must come before this one\n+            for preceding in before[path]:\n+                if preceding not in seen:\n+                    # Check if this would create a cycle\n+                    if path in before[preceding]:\n+                        warnings.warn(\n+                            'Detected duplicate Media files in an opposite order:\\n'\n+                            '%s\\n%s' % (preceding, path),\n+                            MediaOrderConflictWarning,\n+                        )\n+                    add_path(preceding)\n+            result.append(path)\n+            seen.add(path)\n+\n+        # Process all paths\n+        for path in list_1 + list_2:\n+            if path not in seen:\n+                add_path(path)\n+\n+        return result\n     def merge(list_1, list_2):\n         \"\"\"\n         Merge two lists while trying to keep the relative order of the elements.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex cd0e6f4..c0712d8 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -62,6 +62,30 @@ class Media:\n             return Media(**{str(name): getattr(self, '_' + name)})\n         raise KeyError('Unknown media type \"%s\"' % name)\n     @staticmethod\n+    def merge(list_1, list_2):\n+        before = {}\n+        for lst in (list_1, list_2):\n+            for i, path in enumerate(lst):\n+                if path not in before:\n+                    before[path] = set()\n+                for j in range(i):\n+                    before[path].add(lst[j])\n+        result = []\n+        seen = set()\n+        def add_path(path):\n+            if path in seen:\n+                return\n+            for preceding in before[path]:\n+                if preceding not in seen:\n+                    if path in before[preceding]:\n+                        warnings.warn('Detected duplicate Media files in an opposite order:\\n%s\\n%s' % (preceding, path), MediaOrderConflictWarning)\n+                    add_path(preceding)\n+            result.append(path)\n+            seen.add(path)\n+        for path in list_1 + list_2:\n+            if path not in seen:\n+                add_path(path)\n+        return result\n     def merge(list_1, list_2):\n         combined_list = list(list_1)\n         last_insert_index = len(list_1)\n", "normalized_occurrence": 1}
