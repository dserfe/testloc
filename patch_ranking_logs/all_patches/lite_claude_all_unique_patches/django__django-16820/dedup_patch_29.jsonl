{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16820", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex cffcd20..51353ce 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -647,6 +647,26 @@ class AlterIndexTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, index_together):\n         super().__init__(name, index_together)\n \n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterIndexTogether):\n+            # If the next operation is also AlterIndexTogether, combine them\n+            if self.name == operation.name:\n+                new_indexes = operation.index_together\n+                return [\n+                    AlterIndexTogether(self.name, new_indexes),\n+                ]\n+            return super().reduce(operation, app_label)\n+        if isinstance(operation, AddIndex):\n+            # Convert index_together to an AddIndex operation if possible\n+            if self.index_together:\n+                from django.db.models import Index\n+                indexes = []\n+                for fields in self.index_together:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    indexes.append(AddIndex(self.name, index))\n+                return indexes\n+        return super().reduce(operation, app_label)\n+\n \n class AlterOrderWithRespectTo(ModelOptionOperation):\n     \"\"\"Represent a change with the order_with_respect_to option.\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def reduce(self, operation, app_label):\n+        if isinstance(operation, AlterIndexTogether):\n+            if self.name == operation.name:\n+                new_indexes = operation.index_together\n+                return [AlterIndexTogether(self.name, new_indexes)]\n+            return super().reduce(operation, app_label)\n+        if isinstance(operation, AddIndex):\n+            if self.index_together:\n+                from django.db.models import Index\n+                indexes = []\n+                for fields in self.index_together:\n+                    index = Index(fields=list(fields), name=f\"idx_{'_'.join(fields)}\")\n+                    indexes.append(AddIndex(self.name, index))\n+                return indexes\n+        return super().reduce(operation, app_label)", "normalized_occurrence": 1}
