{"model_name_or_path": "agentless", "instance_id": "django__django-12915", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex f289230..791f487 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -42,10 +42,20 @@ class StaticFilesHandlerMixin:\n         relative_url = url[len(self.base_url[2]):]\n         return url2pathname(relative_url)\n \n+    async def serve_async(self, request):\n+        \"\"\"Serve the request path asynchronously.\"\"\"\n+        return await serve(request, self.file_path(request.path), insecure=True)\n+\n     def serve(self, request):\n         \"\"\"Serve the request path.\"\"\"\n         return serve(request, self.file_path(request.path), insecure=True)\n \n+    async def get_response_async(self, request):\n+        try:\n+            return await self.serve_async(request)\n+        except Http404 as e:\n+            return await response_for_exception(request, e)\n+\n     def get_response(self, request):\n         try:\n             return self.serve(request)\n@@ -85,4 +95,4 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n             # (the one thing super() doesn't do is __call__, apparently)\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n-        return await self.application(scope, receive, send)\n+        return await self.application(scope, receive, send)\n", "occurrence": 1, "normalized_patch": "--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n+    async def serve_async(self, request):\n+        return await serve(request, self.file_path(request.path), insecure=True)\n+    async def get_response_async(self, request):\n+        try:\n+            return await self.serve_async(request)\n+        except Http404 as e:\n+            return await response_for_exception(request, e)", "normalized_occurrence": 1}
