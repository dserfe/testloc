{"model_name_or_path": "agentless", "instance_id": "django__django-10554", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex ab425fb..3ebae55 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -358,11 +358,21 @@ class SQLCompiler:\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n-            # Don't add the same column twice, but the order direction is\n-            # not taken into account so we strip it. When this entire method\n-            # is refactored into expressions, then we can check each part as we\n-            # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            # Ensure columns used in ORDER BY are in select clause\n+            if self.query.combinator:\n+                ref_expressions = [\n+                    expr.get_source_expressions()[0]\n+                    for expr in resolved.get_source_expressions()\n+                ]\n+                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                    if sel_expr in ref_expressions:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+            # Don't add the same column twice, but the order direction is not taken into account\n+            # so we strip it. When this entire method is refactored into expressions, then we can\n+            # check each part as we generate it.\n+            without_ordering = self.ordering_parts.search(sql)\n+            without_ordering = without_ordering.group(1) if without_ordering else sql\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n@@ -432,7 +442,7 @@ class SQLCompiler:\n                         *self.query.values_select,\n                         *self.query.annotation_select,\n                     ))\n-                part_sql, part_args = compiler.as_sql()\n+                part_sql, part_args = compiler.as_sql(with_limits=False)\n                 if compiler.query.combinator:\n                     # Wrap in a subquery if wrapping in parentheses isn't\n                     # supported.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 0a7444d..eccedb8 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -194,7 +194,14 @@ class SQLCompiler:\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            if self.query.combinator:\n+                ref_expressions = [expr.get_source_expressions()[0] for expr in resolved.get_source_expressions()]\n+                for idx, (sel_expr, _, col_alias) in enumerate(self.select):\n+                    if sel_expr in ref_expressions:\n+                        resolved.set_source_expressions([RawSQL('%d' % (idx + 1), ())])\n+                        break\n+            without_ordering = self.ordering_parts.search(sql)\n+            without_ordering = without_ordering.group(1) if without_ordering else sql\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n@@ -243,7 +250,7 @@ class SQLCompiler:\n                 if not compiler.query.values_select and self.query.values_select:\n                     compiler.query = compiler.query.clone()\n                     compiler.query.set_values((*self.query.extra_select, *self.query.values_select, *self.query.annotation_select))\n-                part_sql, part_args = compiler.as_sql()\n+                part_sql, part_args = compiler.as_sql(with_limits=False)\n                 if compiler.query.combinator:\n                     if not features.supports_parentheses_in_compound:\n                         part_sql = 'SELECT * FROM ({})'.format(part_sql)\n", "normalized_occurrence": 1}
