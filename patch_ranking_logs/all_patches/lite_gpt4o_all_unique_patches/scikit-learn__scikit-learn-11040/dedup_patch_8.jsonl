{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-11040", "model_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex 01d85d0..416ec05 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -107,6 +107,9 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n                  algorithm='auto', leaf_size=30, metric='minkowski',\n                  p=2, metric_params=None, n_jobs=1):\n \n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(f\"n_neighbors must be an integer, got {type(n_neighbors)}\")\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -325,7 +328,9 @@ class KNeighborsMixin(object):\n         \"\"\"\n         check_is_fitted(self, \"_fit_method\")\n \n-        if n_neighbors is None:\n+        if n_neighbors is not None:\n+            n_neighbors = int(n_neighbors)\n+        else:\n             n_neighbors = self.n_neighbors\n \n         if X is not None:\n@@ -464,7 +469,9 @@ class KNeighborsMixin(object):\n         --------\n         NearestNeighbors.radius_neighbors_graph\n         \"\"\"\n-        if n_neighbors is None:\n+        if n_neighbors is not None:\n+            n_neighbors = int(n_neighbors)\n+        else:\n             n_neighbors = self.n_neighbors\n \n         # kneighbors does the None handling.\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py\nindex ddfefae..5d32f60 100644\n--- a/sklearn/neighbors/base.py\n+++ b/sklearn/neighbors/base.py\n@@ -47,6 +47,9 @@ def _get_weights(dist, weights):\n class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n     @abstractmethod\n     def __init__(self, n_neighbors=None, radius=None, algorithm='auto', leaf_size=30, metric='minkowski', p=2, metric_params=None, n_jobs=1):\n+        if n_neighbors is not None:\n+            if not isinstance(n_neighbors, int):\n+                raise ValueError(f'n_neighbors must be an integer, got {type(n_neighbors)}')\n         self.n_neighbors = n_neighbors\n         self.radius = radius\n         self.algorithm = algorithm\n@@ -160,7 +163,9 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):\n class KNeighborsMixin(object):\n     def kneighbors(self, X=None, n_neighbors=None, return_distance=True):\n         check_is_fitted(self, '_fit_method')\n-        if n_neighbors is None:\n+        if n_neighbors is not None:\n+            n_neighbors = int(n_neighbors)\n+        else:\n             n_neighbors = self.n_neighbors\n         if X is not None:\n             query_is_train = False\n@@ -217,7 +222,9 @@ class KNeighborsMixin(object):\n                 return (dist, neigh_ind)\n             return neigh_ind\n     def kneighbors_graph(self, X=None, n_neighbors=None, mode='connectivity'):\n-        if n_neighbors is None:\n+        if n_neighbors is not None:\n+            n_neighbors = int(n_neighbors)\n+        else:\n             n_neighbors = self.n_neighbors\n         if X is not None:\n             X = check_array(X, accept_sparse='csr')\n", "normalized_occurrence": 1}
