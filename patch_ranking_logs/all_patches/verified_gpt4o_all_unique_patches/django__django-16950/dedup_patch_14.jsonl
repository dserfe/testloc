{"model_name_or_path": "agentless", "instance_id": "django__django-16950", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex f9e6a6e..6ffc582 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -225,7 +225,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 return db_field.formfield(**kwargs)\n \n         # For any other type of field, just call its formfield() method.\n-        return db_field.formfield(**kwargs)\n+        formfield = db_field.formfield(**kwargs)\n+        # If the field has a callable default, use it to set the initial value.\n+        if callable(db_field.default):\n+            formfield.initial = db_field.default()\n+        return formfield\n \n     def formfield_for_choice_field(self, db_field, request, **kwargs):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 7be1ef7..e2f5c97 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -100,7 +100,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             if klass in self.formfield_overrides:\n                 kwargs = {**copy.deepcopy(self.formfield_overrides[klass]), **kwargs}\n                 return db_field.formfield(**kwargs)\n-        return db_field.formfield(**kwargs)\n+        formfield = db_field.formfield(**kwargs)\n+        if callable(db_field.default):\n+            formfield.initial = db_field.default()\n+        return formfield\n     def formfield_for_choice_field(self, db_field, request, **kwargs):\n         if db_field.name in self.radio_fields:\n             if 'widget' not in kwargs:\n", "normalized_occurrence": 1}
