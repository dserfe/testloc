{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21596", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 78d756e..f7d1556 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -132,7 +132,14 @@ class Set(Basic, EvalfMixin):\n         EmptySet\n \n         \"\"\"\n-        return Intersection(self, other)\n+        intersection_result = Intersection(self, other)\n+        # Check for the special case when intersecting with Reals\n+        if isinstance(intersection_result, Intersection):\n+            if self == S.Integers and other == S.Reals:\n+                return FiniteSet(*[x for x in self if x.is_real])\n+            elif other == S.Integers and self == S.Reals:\n+                return FiniteSet(*[x for x in other if x.is_real])\n+        return intersection_result\n \n     def intersection(self, other):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 09f6d6f..a871d92 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -54,7 +54,13 @@ class Set(Basic, EvalfMixin):\n     def union(self, other):\n         return Union(self, other)\n     def intersect(self, other):\n-        return Intersection(self, other)\n+        intersection_result = Intersection(self, other)\n+        if isinstance(intersection_result, Intersection):\n+            if self == S.Integers and other == S.Reals:\n+                return FiniteSet(*[x for x in self if x.is_real])\n+            elif other == S.Integers and self == S.Reals:\n+                return FiniteSet(*[x for x in other if x.is_real])\n+        return intersection_result\n     def intersection(self, other):\n         return self.intersect(other)\n     def is_disjoint(self, other):\n", "normalized_occurrence": 1}
