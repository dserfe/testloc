{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..2b35f1d 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -127,13 +127,17 @@ class URLValidator(RegexValidator):\n                 raise\n         else:\n             # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n-                    validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                netloc = urlsplit(value).netloc\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n+                    try:\n+                        validate_ipv6_address(potential_ip)\n+                    except ValidationError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..e071031 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -79,13 +79,17 @@ class URLValidator(RegexValidator):\n             else:\n                 raise\n         else:\n-            host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n-                    validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            try:\n+                netloc = urlsplit(value).netloc\n+                host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n+                    try:\n+                        validate_ipv6_address(potential_ip)\n+                    except ValidationError:\n+                        raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n         if len(urlsplit(value).hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n", "normalized_occurrence": 1}
