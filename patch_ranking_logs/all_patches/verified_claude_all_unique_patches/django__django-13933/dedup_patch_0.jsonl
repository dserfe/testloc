{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13933", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 72ffbcc..108da1d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):\n     # This class is a subclass of ChoiceField for purity, but it doesn't\n     # actually use any of ChoiceField's implementation.\n     default_error_messages = {\n-        'invalid_choice': _('Select a valid choice. That choice is not one of'\n+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'\n                             ' the available choices.'),\n     }\n     iterator = ModelChoiceIterator\n@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(\n+                self.error_messages['invalid_choice'],\n+                code='invalid_choice',\n+                params={'value': value},\n+            )\n         return value\n \n     def validate(self, value):\n", "occurrence": 39, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4f560a1..385d732 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -615,7 +615,7 @@ class ModelChoiceIterator:\n     def choice(self, obj):\n         return (ModelChoiceIteratorValue(self.field.prepare_value(obj), obj), self.field.label_from_instance(obj))\n class ModelChoiceField(ChoiceField):\n-    default_error_messages = {'invalid_choice': _('Select a valid choice. That choice is not one of the available choices.')}\n+    default_error_messages = {'invalid_choice': _('Select a valid choice. %(value)s is not one of the available choices.')}\n     iterator = ModelChoiceIterator\n     def __init__(self, queryset, *, empty_label='---------', required=True, widget=None, label=None, initial=None, help_text='', to_field_name=None, limit_choices_to=None, blank=False, **kwargs):\n         Field.__init__(self, required=required, widget=widget, label=label, initial=initial, help_text=help_text, **kwargs)\n@@ -664,7 +664,7 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice', params={'value': value})\n         return value\n     def validate(self, value):\n         return Field.validate(self, value)\n", "normalized_occurrence": 39}
