{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24066", "model_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex d505a16..dbaa261 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -395,12 +395,16 @@ class DimensionSystem(Basic, _QuantityMapper):\n                 raise TypeError(\"The exponent for the power operator must be a Symbol or dimensionless.\")\n \n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+\n+            # First check if arguments are dimensionless\n+            if all(item == {} for item in dicts):\n+                return {}\n+\n             args = (Dimension._from_dimensional_dependencies(\n                 get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n \n-            dicts = [get_for_name(i) for i in dimension.name.args]\n-\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n@@ -410,10 +414,7 @@ class DimensionSystem(Basic, _QuantityMapper):\n                     else:\n                         raise TypeError(\"The input argument for the function {} must be dimensionless or have dimensions of angle.\".format(dimension.func))\n                 else:\n-                    if all(item == {} for item in dicts):\n-                        return {}\n-                    else:\n-                        raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n+                    raise TypeError(\"The input arguments for the function {} must be dimensionless.\".format(dimension.func))\n             else:\n                 return get_for_name(result)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/dimensions.py b/sympy/physics/units/dimensions.py\nindex 14cb605..87dc22b 100644\n--- a/sympy/physics/units/dimensions.py\n+++ b/sympy/physics/units/dimensions.py\n@@ -225,9 +225,11 @@ class DimensionSystem(Basic, _QuantityMapper):\n             else:\n                 raise TypeError('The exponent for the power operator must be a Symbol or dimensionless.')\n         if dimension.name.is_Function:\n+            dicts = [get_for_name(i) for i in dimension.name.args]\n+            if all((item == {} for item in dicts)):\n+                return {}\n             args = (Dimension._from_dimensional_dependencies(get_for_name(arg)) for arg in dimension.name.args)\n             result = dimension.name.func(*args)\n-            dicts = [get_for_name(i) for i in dimension.name.args]\n             if isinstance(result, Dimension):\n                 return self.get_dimensional_dependencies(result)\n             elif result.func == dimension.name.func:\n@@ -236,8 +238,6 @@ class DimensionSystem(Basic, _QuantityMapper):\n                         return {}\n                     else:\n                         raise TypeError('The input argument for the function {} must be dimensionless or have dimensions of angle.'.format(dimension.func))\n-                elif all((item == {} for item in dicts)):\n-                    return {}\n                 else:\n                     raise TypeError('The input arguments for the function {} must be dimensionless.'.format(dimension.func))\n             else:\n", "normalized_occurrence": 1}
