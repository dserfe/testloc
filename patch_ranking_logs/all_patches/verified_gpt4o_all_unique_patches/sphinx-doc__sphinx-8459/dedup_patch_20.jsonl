{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8459", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..f21f079 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -79,7 +79,10 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     return field_list\n \n \n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], app: Sphinx) -> None:\n+    type_aliases = app.config.autodoc_type_aliases\n+    def resolve_alias(annotation):\n+        return type_aliases.get(annotation, annotation)\n     arguments = {}  # type: Dict[str, Dict[str, bool]]\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -103,7 +106,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n \n-    for name, annotation in annotations.items():\n+    for name, annotation_value in annotations.items():\n+        annotation_value = resolve_alias(annotation_value)\n         if name == 'return':\n             continue\n \n@@ -122,13 +126,13 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotation_value))\n         node += field\n \n \n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n-    app.connect('object-description-transform', merge_typehints)\n+    app.connect('object-description-transform', lambda app, domain, objtype, contentnode: merge_typehints(app, domain, objtype, contentnode, app))\n \n     return {\n         'version': 'builtin',\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..83d3556 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -51,7 +51,10 @@ def insert_field_list(node: Element) -> nodes.field_list:\n     else:\n         node += field_list\n     return field_list\n-def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> None:\n+def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], app: Sphinx) -> None:\n+    type_aliases = app.config.autodoc_type_aliases\n+    def resolve_alias(annotation):\n+        return type_aliases.get(annotation, annotation)\n     arguments = {}\n     fields = cast(Iterable[nodes.field], node)\n     for field in fields:\n@@ -72,7 +75,8 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n             arg['type'] = True\n         elif parts[0] == 'rtype':\n             arguments['return'] = {'type': True}\n-    for name, annotation in annotations.items():\n+    for name, annotation_value in annotations.items():\n+        annotation_value = resolve_alias(annotation_value)\n         if name == 'return':\n             continue\n         arg = arguments.get(name, {})\n@@ -89,9 +93,9 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str]) -> No\n     if 'return' in annotations and 'return' not in arguments:\n         field = nodes.field()\n         field += nodes.field_name('', 'rtype')\n-        field += nodes.field_body('', nodes.paragraph('', annotation))\n+        field += nodes.field_body('', nodes.paragraph('', annotation_value))\n         node += field\n def setup(app: Sphinx) -> Dict[str, Any]:\n     app.connect('autodoc-process-signature', record_typehints)\n-    app.connect('object-description-transform', merge_typehints)\n+    app.connect('object-description-transform', lambda app, domain, objtype, contentnode: merge_typehints(app, domain, objtype, contentnode, app))\n     return {'version': 'builtin', 'parallel_read_safe': True, 'parallel_write_safe': True}\n\\ No newline at end of file\n", "normalized_occurrence": 1}
