{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..cd9e51d 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -51,6 +51,11 @@ class SQLCompiler:\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n+\n+        # Ensure that group_by respects the original query's fields\n+        if self.query.group_by is not None and self.query.group_by is not True:\n+            group_by = [self.query.resolve_ref(expr) if not hasattr(expr, 'as_sql') else expr for expr in self.query.group_by]\n+\n         return extra_select, order_by, group_by\n \n     def get_group_by(self, select, order_by):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..c08eeea 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -34,6 +34,8 @@ class SQLCompiler:\n         extra_select = self.get_extra_select(order_by, self.select)\n         self.has_extra_select = bool(extra_select)\n         group_by = self.get_group_by(self.select + extra_select, order_by)\n+        if self.query.group_by is not None and self.query.group_by is not True:\n+            group_by = [self.query.resolve_ref(expr) if not hasattr(expr, 'as_sql') else expr for expr in self.query.group_by]\n         return (extra_select, order_by, group_by)\n     def get_group_by(self, select, order_by):\n         if self.query.group_by is None:\n", "normalized_occurrence": 1}
