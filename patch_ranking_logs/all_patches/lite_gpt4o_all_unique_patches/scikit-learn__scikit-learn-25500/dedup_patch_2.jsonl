{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25500", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex c8818cd..1d3aa2d 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -752,7 +752,10 @@ class _CalibratedClassifier:\n         label_encoder = LabelEncoder().fit(self.classes)\n         pos_class_indices = label_encoder.transform(self.estimator.classes_)\n \n-        proba = np.zeros((_num_samples(X), n_classes))\n+        if get_config()['transform_output'] == 'pandas':\n+            proba = pd.DataFrame(np.zeros((_num_samples(X), n_classes)))\n+        else:\n+            proba = np.zeros((_num_samples(X), n_classes))\n         for class_idx, this_pred, calibrator in zip(\n             pos_class_indices, predictions.T, self.calibrators\n         ):\n@@ -760,7 +763,10 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            prediction = calibrator.predict(this_pred)\n+            if get_config()['transform_output'] == 'pandas' and isinstance(prediction, pd.DataFrame):\n+                prediction = prediction.to_numpy().flatten()\n+            proba[:, class_idx] = prediction\n \n         # Normalize the probabilities\n         if n_classes == 2:\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 209d57c..106f3a3 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -166,11 +166,17 @@ class _CalibratedClassifier:\n         predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n         label_encoder = LabelEncoder().fit(self.classes)\n         pos_class_indices = label_encoder.transform(self.estimator.classes_)\n-        proba = np.zeros((_num_samples(X), n_classes))\n+        if get_config()['transform_output'] == 'pandas':\n+            proba = pd.DataFrame(np.zeros((_num_samples(X), n_classes)))\n+        else:\n+            proba = np.zeros((_num_samples(X), n_classes))\n         for class_idx, this_pred, calibrator in zip(pos_class_indices, predictions.T, self.calibrators):\n             if n_classes == 2:\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            prediction = calibrator.predict(this_pred)\n+            if get_config()['transform_output'] == 'pandas' and isinstance(prediction, pd.DataFrame):\n+                prediction = prediction.to_numpy().flatten()\n+            proba[:, class_idx] = prediction\n         if n_classes == 2:\n             proba[:, 0] = 1.0 - proba[:, 1]\n         else:\n", "normalized_occurrence": 1}
