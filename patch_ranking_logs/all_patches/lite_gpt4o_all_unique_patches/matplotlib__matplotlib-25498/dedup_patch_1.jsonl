{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25498", "model_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 6151185..135d03f 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -1101,13 +1101,13 @@ class Colorbar:\n             b = np.hstack((b, b[-1] + 1))\n \n         # transform from 0-1 to vmin-vmax:\n-        if not self.norm.scaled():\n-            self.norm.vmin = 0\n-            self.norm.vmax = 1\n+        # Ensure vmin and vmax are set and valid before using them\n         self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(\n             self.norm.vmin, self.norm.vmax, expander=0.1)\n-        if (not isinstance(self.norm, colors.BoundaryNorm) and\n-                (self.boundaries is None)):\n+        if not self.norm.scaled():\n+            self.norm.vmin = min(self.norm.vmin, self.norm.vmax)\n+            self.norm.vmax = max(self.norm.vmin, self.norm.vmax)\n+        if not isinstance(self.norm, colors.BoundaryNorm) and self.boundaries is None:\n             b = self.norm.inverse(b)\n \n         self._boundaries = np.asarray(b, dtype=float)\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py\nindex 45aa167..7687fc4 100644\n--- a/lib/matplotlib/colorbar.py\n+++ b/lib/matplotlib/colorbar.py\n@@ -490,10 +490,10 @@ class Colorbar:\n             b = np.hstack((b[0] - 1, b))\n         if self._extend_upper():\n             b = np.hstack((b, b[-1] + 1))\n-        if not self.norm.scaled():\n-            self.norm.vmin = 0\n-            self.norm.vmax = 1\n         self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(self.norm.vmin, self.norm.vmax, expander=0.1)\n+        if not self.norm.scaled():\n+            self.norm.vmin = min(self.norm.vmin, self.norm.vmax)\n+            self.norm.vmax = max(self.norm.vmin, self.norm.vmax)\n         if not isinstance(self.norm, colors.BoundaryNorm) and self.boundaries is None:\n             b = self.norm.inverse(b)\n         self._boundaries = np.asarray(b, dtype=float)\n", "normalized_occurrence": 1}
