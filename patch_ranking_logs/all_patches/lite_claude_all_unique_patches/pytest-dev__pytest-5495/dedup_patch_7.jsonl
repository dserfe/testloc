{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5495", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ff9064f..7234b36 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -873,7 +873,19 @@ warn_explicit(\n             results.append(next_res)\n             sym = binop_map[op.__class__]\n             syms.append(ast.Str(sym))\n-            expl = \"{} {} {}\".format(left_expl, sym, next_expl)\n+            # Check if we're comparing byte strings\n+            is_bytes = (\n+                isinstance(comp.left, ast.Bytes) or\n+                (isinstance(comp.left, ast.Constant) and isinstance(comp.left.value, bytes))\n+            ) and (\n+                isinstance(next_operand, ast.Bytes) or\n+                (isinstance(next_operand, ast.Constant) and isinstance(next_operand.value, bytes))\n+            )\n+            if is_bytes:\n+                # For byte strings, use repr() to show readable byte string representation\n+                expl = \"repr({}) {} repr({})\".format(left_expl, sym, next_expl)\n+            else:\n+                expl = \"{} {} {}\".format(left_expl, sym, next_expl)\n             expls.append(ast.Str(expl))\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n@@ -890,4 +902,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex c715f90..f735624 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -484,7 +484,11 @@ class AssertionRewriter(ast.NodeVisitor):\n             results.append(next_res)\n             sym = binop_map[op.__class__]\n             syms.append(ast.Str(sym))\n-            expl = '{} {} {}'.format(left_expl, sym, next_expl)\n+            is_bytes = (isinstance(comp.left, ast.Bytes) or (isinstance(comp.left, ast.Constant) and isinstance(comp.left.value, bytes))) and (isinstance(next_operand, ast.Bytes) or (isinstance(next_operand, ast.Constant) and isinstance(next_operand.value, bytes)))\n+            if is_bytes:\n+                expl = 'repr({}) {} repr({})'.format(left_expl, sym, next_expl)\n+            else:\n+                expl = '{} {} {}'.format(left_expl, sym, next_expl)\n             expls.append(ast.Str(expl))\n             res_expr = ast.Compare(left_res, [op], [next_res])\n             self.statements.append(ast.Assign([store_names[i]], res_expr))\n", "normalized_occurrence": 1}
