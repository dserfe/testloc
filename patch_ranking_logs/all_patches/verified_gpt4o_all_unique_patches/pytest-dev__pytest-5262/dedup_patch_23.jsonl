{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..f83f368 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -419,13 +419,15 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n         if \"b\" not in mode:\n             mode += \"b\"\n         f = os.fdopen(newfd, mode, 0)  # no buffering\n-    return EncodedFile(f, encoding or default_encoding)\n+    text_mode = mode.replace('b', '')  # Ensure mode does not include 'b' for text files\n+    return EncodedFile(f, encoding or default_encoding, mode=text_mode)\n \n \n class EncodedFile(object):\n     errors = \"strict\"  # possibly needed by py3 code (issue555)\n \n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode):\n+        self.mode = mode  # Set the mode attribute\n         self.buffer = buffer\n         self.encoding = encoding\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..f3d6886 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -244,10 +244,12 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n         if 'b' not in mode:\n             mode += 'b'\n         f = os.fdopen(newfd, mode, 0)\n-    return EncodedFile(f, encoding or default_encoding)\n+    text_mode = mode.replace('b', '')\n+    return EncodedFile(f, encoding or default_encoding, mode=text_mode)\n class EncodedFile(object):\n     errors = 'strict'\n-    def __init__(self, buffer, encoding):\n+    def __init__(self, buffer, encoding, mode):\n+        self.mode = mode\n         self.buffer = buffer\n         self.encoding = encoding\n     def write(self, obj):\n", "normalized_occurrence": 1}
