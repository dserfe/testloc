{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..e549395 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -115,6 +115,7 @@ class Text(Artist):\n                  wrap=False,\n                  transform_rotates_text=False,\n                  parse_math=None,    # defaults to rcParams['text.parse_math']\n+                 antialiased=None,   # defaults to rcParams['text.antialiased']\n                  **kwargs\n                  ):\n         \"\"\"\n@@ -149,6 +150,7 @@ class Text(Artist):\n             transform_rotates_text=transform_rotates_text,\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n+            antialiased=antialiased,\n         )\n         self.update(kwargs)\n \n@@ -167,6 +169,7 @@ class Text(Artist):\n         transform_rotates_text=False,\n         linespacing=None,\n         rotation_mode=None,\n+        antialiased=None,\n     ):\n         self.set_text(text)\n         self.set_color(\n@@ -187,6 +190,7 @@ class Text(Artist):\n             linespacing = 1.2  # Maybe use rcParam later.\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n+        self._antialiased = 1 if antialiased is None else int(bool(antialiased))\n \n     def update(self, kwargs):\n         # docstring inherited\n@@ -1317,6 +1321,15 @@ class Text(Artist):\n         \"\"\"Return whether mathtext parsing is considered for this `Text`.\"\"\"\n         return self._parse_math\n \n+    def set_antialiased(self, b):\n+        \"\"\"Set whether to use antialiased rendering.\"\"\"\n+        self._antialiased = int(bool(b))\n+        self.stale = True\n+\n+    def get_antialiased(self):\n+        \"\"\"Return whether text is antialiased.\"\"\"\n+        return bool(self._antialiased)\n+\n     def set_fontname(self, fontname):\n         \"\"\"\n         Alias for `set_family`.\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..99af405 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -41,13 +41,13 @@ class Text(Artist):\n     _charsize_cache = dict()\n     def __repr__(self):\n         return f'Text({self._x}, {self._y}, {self._text!r})'\n-    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, **kwargs):\n+    def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, antialiased=None, **kwargs):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n-        self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode, antialiased=antialiased)\n         self.update(kwargs)\n-    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n+    def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None, antialiased=None):\n         self.set_text(text)\n         self.set_color(color if color is not None else mpl.rcParams['text.color'])\n         self.set_fontproperties(fontproperties)\n@@ -65,6 +65,7 @@ class Text(Artist):\n             linespacing = 1.2\n         self.set_linespacing(linespacing)\n         self.set_rotation_mode(rotation_mode)\n+        self._antialiased = 1 if antialiased is None else int(bool(antialiased))\n     def update(self, kwargs):\n         kwargs = cbook.normalize_kwargs(kwargs, Text)\n         sentinel = object()\n@@ -546,6 +547,11 @@ class Text(Artist):\n         self._parse_math = bool(parse_math)\n     def get_parse_math(self):\n         return self._parse_math\n+    def set_antialiased(self, b):\n+        self._antialiased = int(bool(b))\n+        self.stale = True\n+    def get_antialiased(self):\n+        return bool(self._antialiased)\n     def set_fontname(self, fontname):\n         return self.set_family(fontname)\n class OffsetFrom:\n", "normalized_occurrence": 1}
