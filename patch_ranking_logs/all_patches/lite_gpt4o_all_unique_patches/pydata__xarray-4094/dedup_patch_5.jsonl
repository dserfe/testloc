{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..37d5fba 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3462,10 +3462,11 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n+            stack_dims = (variable_dim,) + stacking_dims if stacking_dims else (variable_dim,)\n             return (\n                 val.assign_coords(**assign_coords)\n                 .expand_dims(expand_dims)\n-                .stack({new_dim: (variable_dim,) + stacking_dims})\n+                .stack({new_dim: stack_dims})\n             )\n \n         # concatenate the arrays\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..24c9061 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1153,7 +1153,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n             expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n-            return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n+            stack_dims = (variable_dim,) + stacking_dims if stacking_dims else (variable_dim,)\n+            return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: stack_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n         data_array = xr.concat(stackable_vars, dim=new_dim)\n         idx = data_array.indexes[new_dim]\n", "normalized_occurrence": 1}
