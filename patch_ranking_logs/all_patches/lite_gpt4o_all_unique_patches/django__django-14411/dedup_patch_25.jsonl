{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..a81ae6d 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -318,11 +318,15 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n-        try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            # field is likely a ForeignObjectRel\n-            label = field.related_model._meta.verbose_name\n+        if name == 'password' and model.__name__ == 'User' and model_admin.__class__.__name__ == 'UserAdmin':\n+            # Special case for ReadOnlyPasswordHashWidget\n+            label = \"Password\"\n+        else:\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                # field is likely a ForeignObjectRel\n+                label = field.related_model._meta.verbose_name\n     except FieldDoesNotExist:\n         if name == \"__str__\":\n             label = str(model._meta.verbose_name)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..f5ad071 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -182,10 +182,13 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     attr = None\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n-        try:\n-            label = field.verbose_name\n-        except AttributeError:\n-            label = field.related_model._meta.verbose_name\n+        if name == 'password' and model.__name__ == 'User' and (model_admin.__class__.__name__ == 'UserAdmin'):\n+            label = 'Password'\n+        else:\n+            try:\n+                label = field.verbose_name\n+            except AttributeError:\n+                label = field.related_model._meta.verbose_name\n     except FieldDoesNotExist:\n         if name == '__str__':\n             label = str(model._meta.verbose_name)\n", "normalized_occurrence": 1}
