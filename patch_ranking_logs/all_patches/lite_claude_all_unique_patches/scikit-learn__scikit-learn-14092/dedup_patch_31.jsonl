{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-14092", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex f879e2e..da8568a 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -972,12 +972,31 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):\n         If the parameter's value violates the given bounds.\n     \"\"\"\n \n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'\n-                        .format(name, target_type, type(x)))\n+    # Convert numpy types or numbers to the appropriate target type\n+    if isinstance(target_type, tuple):\n+        # If target_type is a tuple of types, try converting to each\n+        success = False\n+        for t in target_type:\n+            try:\n+                converted_x = t(x)\n+                x = converted_x\n+                success = True\n+                break\n+            except (TypeError, ValueError):\n+                continue\n+        if not success:\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                            .format(name, target_type, type(x)))\n+    else:\n+        try:\n+            converted_x = target_type(x)\n+            x = converted_x\n+        except (TypeError, ValueError):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'\n+                            .format(name, target_type, type(x)))\n \n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n \n     if max_val is not None and x > max_val:\n-        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n+        raise ValueError('`{}`= {}, must be <= {}.'.format(name, x, max_val))\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 0183d03..7fc3f40 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -281,8 +281,24 @@ def check_non_negative(X, whom):\n     if X_min < 0:\n         raise ValueError('Negative values in data passed to %s' % whom)\n def check_scalar(x, name, target_type, min_val=None, max_val=None):\n-    if not isinstance(x, target_type):\n-        raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    if isinstance(target_type, tuple):\n+        success = False\n+        for t in target_type:\n+            try:\n+                converted_x = t(x)\n+                x = converted_x\n+                success = True\n+                break\n+            except (TypeError, ValueError):\n+                continue\n+        if not success:\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n+    else:\n+        try:\n+            converted_x = target_type(x)\n+            x = converted_x\n+        except (TypeError, ValueError):\n+            raise TypeError('`{}` must be an instance of {}, not {}.'.format(name, target_type, type(x)))\n     if min_val is not None and x < min_val:\n         raise ValueError('`{}`= {}, must be >= {}.'.format(name, x, min_val))\n     if max_val is not None and x > max_val:\n", "normalized_occurrence": 1}
