{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-18869", "model_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 320d1a7..37c10ae 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -148,6 +148,24 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        return tuple(map(int, __version__.split('.')[:3]))\n+        import setuptools_scm\n+        global __version__  # cache it.\n+        # Only shell out to a git subprocess if really needed, and not on a\n+        # shallow clone, such as those used by CI, as the latter would trigger\n+        # a warning from setuptools_scm.\n+        root = Path(__file__).resolve().parents[2]\n+        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n+            __version__ = setuptools_scm.get_version(\n+                root=root,\n+                version_scheme=\"post-release\",\n+                local_scheme=\"node-and-date\",\n+                fallback_version=_version.version,\n+            )\n+        else:  # Get the version from the _version.py setuptools_scm file.\n+            __version__ = _version.version\n+        return __version__\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex 4b4b135..318ee63 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -35,6 +35,16 @@ def __getattr__(name):\n         else:\n             __version__ = _version.version\n         return __version__\n+    elif name == 'version_info':\n+        return tuple(map(int, __version__.split('.')[:3]))\n+        import setuptools_scm\n+        global __version__\n+        root = Path(__file__).resolve().parents[2]\n+        if (root / '.git').exists() and (not (root / '.git/shallow').exists()):\n+            __version__ = setuptools_scm.get_version(root=root, version_scheme='post-release', local_scheme='node-and-date', fallback_version=_version.version)\n+        else:\n+            __version__ = _version.version\n+        return __version__\n     raise AttributeError(f'module {__name__!r} has no attribute {name!r}')\n def _check_versions():\n     from . import ft2font\n", "normalized_occurrence": 1}
