{"model_name_or_path": "agentless", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex e64dbc9..1e857db 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1210,7 +1210,10 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        query = self.query.exists(using=connection.alias)\n+        if self.query.is_empty():\n+            sql, params = '0 = 1', ()\n+        else:\n+            query = self.query.exists(using=connection.alias)\n         sql, params = super().as_sql(\n             compiler,\n             connection,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ee0d94d..fa2c903 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -755,7 +755,10 @@ class Exists(Subquery):\n         clone.negated = not self.negated\n         return clone\n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        query = self.query.exists(using=connection.alias)\n+        if self.query.is_empty():\n+            sql, params = ('0 = 1', ())\n+        else:\n+            query = self.query.exists(using=connection.alias)\n         sql, params = super().as_sql(compiler, connection, template=template, query=query, **extra_context)\n         if self.negated:\n             sql = 'NOT {}'.format(sql)\n", "normalized_occurrence": 1}
