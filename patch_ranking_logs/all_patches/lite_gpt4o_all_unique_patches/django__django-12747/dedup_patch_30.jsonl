{"model_name_or_path": "agentless", "instance_id": "django__django-12747", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 5788d19..fc355a6 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -397,6 +397,10 @@ class Collector:\n                 setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n+        # Initialize the deleted_counter with all models and zero counts\n+        for model in self.data.keys():\n+            deleted_counter[model._meta.label] = 0\n+\n         with transaction.atomic(using=self.using, savepoint=False):\n             # send pre_delete signals\n             for model, obj in self.instances_with_model():\n@@ -442,4 +446,9 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n-        return sum(deleted_counter.values()), dict(deleted_counter)\n+        # Ensure all models are represented in the counter, even if no objects were deleted\n+        for model in self.data.keys():\n+            if model._meta.label not in deleted_counter:\n+                deleted_counter[model._meta.label] = 0\n+\n+        return sum(deleted_counter.values()), dict(deleted_counter)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex b347a60..0ffa038 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -206,6 +206,8 @@ class Collector:\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n                 setattr(instance, model._meta.pk.attname, None)\n                 return (count, {model._meta.label: count})\n+        for model in self.data.keys():\n+            deleted_counter[model._meta.label] = 0\n         with transaction.atomic(using=self.using, savepoint=False):\n             for model, obj in self.instances_with_model():\n                 if not model._meta.auto_created:\n@@ -234,4 +236,7 @@ class Collector:\n         for model, instances in self.data.items():\n             for instance in instances:\n                 setattr(instance, model._meta.pk.attname, None)\n+        for model in self.data.keys():\n+            if model._meta.label not in deleted_counter:\n+                deleted_counter[model._meta.label] = 0\n         return (sum(deleted_counter.values()), dict(deleted_counter))\n\\ No newline at end of file\n", "normalized_occurrence": 1}
