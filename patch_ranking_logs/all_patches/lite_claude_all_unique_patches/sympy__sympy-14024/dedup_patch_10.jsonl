{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..721cec6 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -323,6 +323,10 @@ class Pow(Expr):\n         s = None\n         if other.is_integer:\n             s = 1\n+        elif b.is_negative and e.is_real and not e.is_integer:\n+            # Handle the case when base is negative and exponent is not integer\n+            # This ensures consistent phase handling for expressions like (-a)**x * a**(-x)\n+            return (-1)**(e*other) * ((-b)**e)**other\n         elif b.is_polar:  # e.g. exp_polar, besselj, var('p', polar=True)...\n             s = 1\n         elif e.is_real is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..148157d 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -157,6 +157,8 @@ class Pow(Expr):\n         s = None\n         if other.is_integer:\n             s = 1\n+        elif b.is_negative and e.is_real and (not e.is_integer):\n+            return (-1) ** (e * other) * ((-b) ** e) ** other\n         elif b.is_polar:\n             s = 1\n         elif e.is_real is not None:\n", "normalized_occurrence": 1}
