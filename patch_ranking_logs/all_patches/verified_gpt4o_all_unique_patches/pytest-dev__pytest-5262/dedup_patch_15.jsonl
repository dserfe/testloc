{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5262", "model_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 6b2d076..b5c39c8 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -416,7 +416,7 @@ def safe_text_dupfile(f, mode, default_encoding=\"UTF8\"):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if \"b\" not in mode:\n+        if \"b\" not in mode and \"b\" not in getattr(f, \"mode\", \"\"):\n             mode += \"b\"\n         f = os.fdopen(newfd, mode, 0)  # no buffering\n     return EncodedFile(f, encoding or default_encoding)\n@@ -427,6 +427,7 @@ class EncodedFile(object):\n \n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n+        self.mode = 'w'\n         self.encoding = encoding\n \n     def write(self, obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/capture.py b/src/_pytest/capture.py\nindex 01fcdcd..19fcb44 100644\n--- a/src/_pytest/capture.py\n+++ b/src/_pytest/capture.py\n@@ -241,7 +241,7 @@ def safe_text_dupfile(f, mode, default_encoding='UTF8'):\n             return f\n     else:\n         newfd = os.dup(fd)\n-        if 'b' not in mode:\n+        if 'b' not in mode and 'b' not in getattr(f, 'mode', ''):\n             mode += 'b'\n         f = os.fdopen(newfd, mode, 0)\n     return EncodedFile(f, encoding or default_encoding)\n@@ -249,6 +249,7 @@ class EncodedFile(object):\n     errors = 'strict'\n     def __init__(self, buffer, encoding):\n         self.buffer = buffer\n+        self.mode = 'w'\n         self.encoding = encoding\n     def write(self, obj):\n         if isinstance(obj, six.text_type):\n", "normalized_occurrence": 1}
