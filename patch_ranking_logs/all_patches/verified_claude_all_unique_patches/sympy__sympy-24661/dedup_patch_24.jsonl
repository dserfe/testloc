{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24661", "model_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 2ec3cf6..8d5dd3e 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -1091,6 +1091,21 @@ def evaluateFalse(s: str):\n     \"\"\"\n     Replaces operators with the SymPy equivalent and sets evaluate=False.\n     \"\"\"\n+    # Pre-process relational operators to ensure evaluate=False is included\n+    relations = {\n+        ' < ': 'Lt(',\n+        ' > ': 'Gt(',\n+        ' <= ': 'Le(',\n+        ' >= ': 'Ge(',\n+        ' == ': 'Eq(',\n+        ' != ': 'Ne('\n+    }\n+    for rel, func in relations.items():\n+        if rel in s:\n+            parts = s.split(rel)\n+            if len(parts) == 2:\n+                s = f\"{func}{parts[0]}, {parts[1]}, evaluate=False)\"\n+    \n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     # node is a Module, we want an Expression\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py\nindex 0c06cf1..17e672f 100644\n--- a/sympy/parsing/sympy_parser.py\n+++ b/sympy/parsing/sympy_parser.py\n@@ -522,6 +522,12 @@ def parse_expr(s: str, local_dict: Optional[DICT]=None, transformations: tUnion[\n             local_dict[i] = null\n         raise e from ValueError(f'Error from parse_expr with transformed code: {code!r}')\n def evaluateFalse(s: str):\n+    relations = {' < ': 'Lt(', ' > ': 'Gt(', ' <= ': 'Le(', ' >= ': 'Ge(', ' == ': 'Eq(', ' != ': 'Ne('}\n+    for rel, func in relations.items():\n+        if rel in s:\n+            parts = s.split(rel)\n+            if len(parts) == 2:\n+                s = f'{func}{parts[0]}, {parts[1]}, evaluate=False)'\n     node = ast.parse(s)\n     transformed_node = EvaluateFalseTransformer().visit(node)\n     transformed_node = ast.Expression(transformed_node.body[0].value)\n", "normalized_occurrence": 1}
