{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e0d8d05..5662b66 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -997,6 +997,9 @@ class QuerySet:\n         return clone\n \n     def union(self, *other_qs, all=False):\n+        # If any queryset is empty and it's a direct none() call, return empty\n+        if getattr(self, '_none', False) or any(getattr(qs, '_none', False) for qs in other_qs):\n+            return self.none()\n         # If the query is an EmptyQuerySet, combine all nonempty querysets.\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex be3ebe2..51b5d03 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -587,6 +587,8 @@ class QuerySet:\n         clone.query.combinator_all = all\n         return clone\n     def union(self, *other_qs, all=False):\n+        if getattr(self, '_none', False) or any((getattr(qs, '_none', False) for qs in other_qs)):\n+            return self.none()\n         if isinstance(self, EmptyQuerySet):\n             qs = [q for q in other_qs if not isinstance(q, EmptyQuerySet)]\n             return qs[0]._combinator_query('union', *qs[1:], all=all) if qs else self\n", "normalized_occurrence": 1}
