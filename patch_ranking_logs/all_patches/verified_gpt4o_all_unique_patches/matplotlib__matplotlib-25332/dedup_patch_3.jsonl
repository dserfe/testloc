{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..b8491b9 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,8 +753,15 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Handle weakref issue\n+        state[\"_label_align_groups\"] = {k: list(v) for k, v in self._label_align_groups.items()}\n         return state\n \n+    def __setstate__(self, state):\n+        if \"_label_align_groups\" in state:\n+            state[\"_label_align_groups\"] = {k: weakref.WeakSet(v) for k, v in state[\"_label_align_groups\"].items()}\n+        super().__setstate__(state)\n+\n     def __setstate__(self, state):\n         # Merge the grouping info back into the global groupers.\n         shared_axes = state.pop(\"_shared_axes\")\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..0a23bc5 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,7 +345,12 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        state['_label_align_groups'] = {k: list(v) for k, v in self._label_align_groups.items()}\n         return state\n+    def __setstate__(self, state):\n+        if '_label_align_groups' in state:\n+            state['_label_align_groups'] = {k: weakref.WeakSet(v) for k, v in state['_label_align_groups'].items()}\n+        super().__setstate__(state)\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n         for name, shared_siblings in shared_axes.items():\n", "normalized_occurrence": 1}
