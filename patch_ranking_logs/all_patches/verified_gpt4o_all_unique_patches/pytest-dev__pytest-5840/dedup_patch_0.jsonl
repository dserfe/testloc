{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5840", "model_patch": "diff --git a/src/_pytest/config/findpaths.py b/src/_pytest/config/findpaths.py\nindex 4f3d3eb..00354ce 100644\n--- a/src/_pytest/config/findpaths.py\n+++ b/src/_pytest/config/findpaths.py\n@@ -74,6 +74,10 @@ def get_common_ancestor(paths):\n         common_ancestor = py.path.local()\n     elif common_ancestor.isfile():\n         common_ancestor = common_ancestor.dirpath()\n+\n+    # Ensure path normalization for case-insensitive file systems\n+    if sys.platform == \"win32\":\n+        common_ancestor = common_ancestor.realpath().normcase()\n     return common_ancestor\n \n \n@@ -81,6 +85,12 @@ def get_dirs_from_args(args):\n     def is_option(x):\n         return str(x).startswith(\"-\")\n \n+    # Normalize paths to lower case on Windows for case-insensitive comparison\n+    if sys.platform == \"win32\":\n+        args = [py.path.local(arg).realpath().normcase() for arg in args if not is_option(arg)]\n+    else:\n+        args = [py.path.local(arg) for arg in args if not is_option(arg)]\n+\n     def get_file_part_from_node_id(x):\n         return str(x).split(\"::\")[0]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/config/findpaths.py b/src/_pytest/config/findpaths.py\nindex 5511bd8..2371f6b 100644\n--- a/src/_pytest/config/findpaths.py\n+++ b/src/_pytest/config/findpaths.py\n@@ -50,10 +50,16 @@ def get_common_ancestor(paths):\n         common_ancestor = py.path.local()\n     elif common_ancestor.isfile():\n         common_ancestor = common_ancestor.dirpath()\n+    if sys.platform == 'win32':\n+        common_ancestor = common_ancestor.realpath().normcase()\n     return common_ancestor\n def get_dirs_from_args(args):\n     def is_option(x):\n         return str(x).startswith('-')\n+    if sys.platform == 'win32':\n+        args = [py.path.local(arg).realpath().normcase() for arg in args if not is_option(arg)]\n+    else:\n+        args = [py.path.local(arg) for arg in args if not is_option(arg)]\n     def get_file_part_from_node_id(x):\n         return str(x).split('::')[0]\n     def get_dir_from_path(path):\n", "normalized_occurrence": 1}
