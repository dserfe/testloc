{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..3a51b83 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -957,7 +957,11 @@ class AssertionRewriter(ast.NodeVisitor):\n         # Fix locations (line numbers/column offsets).\n         for stmt in self.statements:\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                # Ensure correct line number is assigned to the assertion error\n+                if isinstance(node, ast.Raise):\n+                    ast.copy_location(node, assert_)\n+                else:\n+                    ast.fix_missing_locations(node)\n         return self.statements\n \n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..e34c6fd 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -514,7 +514,10 @@ class AssertionRewriter(ast.NodeVisitor):\n             self.statements.append(clear)\n         for stmt in self.statements:\n             for node in traverse_node(stmt):\n-                ast.copy_location(node, assert_)\n+                if isinstance(node, ast.Raise):\n+                    ast.copy_location(node, assert_)\n+                else:\n+                    ast.fix_missing_locations(node)\n         return self.statements\n     def visit_Name(self, name: ast.Name) -> Tuple[ast.Name, str]:\n         locs = ast.Call(self.builtin('locals'), [], [])\n", "normalized_occurrence": 1}
