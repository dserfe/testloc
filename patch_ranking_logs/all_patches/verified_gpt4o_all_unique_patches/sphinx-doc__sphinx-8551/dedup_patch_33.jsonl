{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..e831c8c 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -92,7 +92,8 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n         kwargs = {}\n \n     return pending_xref('', nodes.Text(text),\n-                        refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+                        refdomain='py', reftype=reftype, reftarget=text,\n+                        refexplicit=False, refwarn=True, **kwargs)\n \n \n def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Node]:\n@@ -1294,7 +1295,7 @@ class PythonDomain(Domain):\n                      ) -> Element:\n         modname = node.get('py:module')\n         clsname = node.get('py:class')\n-        searchmode = 1 if node.hasattr('refspecific') else 0\n+        searchmode = 1 if node.hasattr('refspecific') else 2\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..4fb90c1 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -43,7 +43,7 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n         kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n     else:\n         kwargs = {}\n-    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n+    return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, refexplicit=False, refwarn=True, **kwargs)\n def _parse_annotation(annotation: str, env: BuildEnvironment=None) -> List[Node]:\n     def unparse(node: ast.AST) -> List[Node]:\n         if isinstance(node, ast.Attribute):\n@@ -782,7 +782,7 @@ class PythonDomain(Domain):\n     def resolve_xref(self, env: BuildEnvironment, fromdocname: str, builder: Builder, type: str, target: str, node: pending_xref, contnode: Element) -> Element:\n         modname = node.get('py:module')\n         clsname = node.get('py:class')\n-        searchmode = 1 if node.hasattr('refspecific') else 0\n+        searchmode = 1 if node.hasattr('refspecific') else 2\n         matches = self.find_obj(env, modname, clsname, target, type, searchmode)\n         if not matches and type == 'attr':\n             matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n", "normalized_occurrence": 1}
