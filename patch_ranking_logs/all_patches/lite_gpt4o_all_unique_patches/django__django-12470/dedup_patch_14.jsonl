{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..6188387 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -198,6 +198,11 @@ class Options:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n         else:\n             self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+        if self.ordering:\n+            # Apply ordering from the parent model if not set in the child model\n+            for parent in self.parents:\n+                if parent._meta.ordering and not self.ordering:\n+                    self.ordering = parent._meta.ordering\n         del self.meta\n \n         # If the db_table wasn't provided, use the app_label + model_name.\n@@ -858,4 +863,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..e4345e2 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -122,6 +122,10 @@ class Options:\n                 raise TypeError(\"'class Meta' got invalid attribute(s): %s\" % ','.join(meta_attrs))\n         else:\n             self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n+        if self.ordering:\n+            for parent in self.parents:\n+                if parent._meta.ordering and (not self.ordering):\n+                    self.ordering = parent._meta.ordering\n         del self.meta\n         if not self.db_table:\n             self.db_table = '%s_%s' % (self.app_label, self.model_name)\n", "normalized_occurrence": 1}
