{"model_name_or_path": "agentless", "instance_id": "django__django-11797", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 946e695..03225af 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -107,18 +107,20 @@ class SQLCompiler:\n         # Note that even if the group_by is set, it is only the minimal\n         # set to group by. So, we need to add cols in select, order_by, and\n         # having into the select in any case.\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n-            # Skip References to the select clause, as all expressions in the\n-            # select clause are already part of the group by.\n-            if not expr.contains_aggregate and not is_ref:\n-                expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n+        # Ensure that the GROUP BY clause includes any necessary columns\n+        # from the select, order_by, and having clauses.\n+        if select:\n+            for expr, _, _ in select:\n+                expressions.extend(expr.get_group_by_cols())\n+        if order_by:\n+            for expr, (sql, params, is_ref) in order_by:\n+                # Skip References to the select clause, as all expressions in the\n+                # select clause are already part of the group by.\n+                if not expr.contains_aggregate and not is_ref:\n+                    expressions.extend(expr.get_source_expressions())\n+        if self.having:\n+            for expr in self.having.get_group_by_cols():\n+                expressions.append(expr)\n         result = []\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a6b66a9..4e6434f 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -45,16 +45,16 @@ class SQLCompiler:\n                     expressions.append(self.query.resolve_ref(expr))\n                 else:\n                     expressions.append(expr)\n-        for expr, _, _ in select:\n-            cols = expr.get_group_by_cols()\n-            for col in cols:\n-                expressions.append(col)\n-        for expr, (sql, params, is_ref) in order_by:\n-            if not expr.contains_aggregate and (not is_ref):\n-                expressions.extend(expr.get_source_expressions())\n-        having_group_by = self.having.get_group_by_cols() if self.having else ()\n-        for expr in having_group_by:\n-            expressions.append(expr)\n+        if select:\n+            for expr, _, _ in select:\n+                expressions.extend(expr.get_group_by_cols())\n+        if order_by:\n+            for expr, (sql, params, is_ref) in order_by:\n+                if not expr.contains_aggregate and (not is_ref):\n+                    expressions.extend(expr.get_source_expressions())\n+        if self.having:\n+            for expr in self.having.get_group_by_cols():\n+                expressions.append(expr)\n         result = []\n         seen = set()\n         expressions = self.collapse_group_by(expressions, having_group_by)\n", "normalized_occurrence": 1}
