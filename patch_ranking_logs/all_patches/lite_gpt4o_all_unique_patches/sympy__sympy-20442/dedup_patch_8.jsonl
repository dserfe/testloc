{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..248624c 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -91,6 +91,10 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n \n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n+    \n+    # Ensure the dimensions are compatible\n+    if Dimension(expr) != Dimension(target_units):\n+        raise ValueError(\"Incompatible dimensions for conversion.\")\n \n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..28b0d69 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -30,6 +30,8 @@ def convert_to(expr, target_units, unit_system='SI'):\n     expr = sympify(expr)\n     if not isinstance(expr, Quantity) and expr.has(Quantity):\n         expr = expr.replace(lambda x: isinstance(x, Quantity), lambda x: x.convert_to(target_units, unit_system))\n+    if Dimension(expr) != Dimension(target_units):\n+        raise ValueError('Incompatible dimensions for conversion.')\n     def get_total_scale_factor(expr):\n         if isinstance(expr, Mul):\n             return reduce(lambda x, y: x * y, [get_total_scale_factor(i) for i in expr.args])\n", "normalized_occurrence": 1}
