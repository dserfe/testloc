{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18189", "model_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex b9f5e3f..0607b40 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -180,9 +180,16 @@ def diophantine(eq, param=symbols(\"t\", integer=True), syms=None,\n                     'syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var])\n-                            for t in diophantine(eq, param)}\n+                dict_sym_index = dict(zip(var, range(len(var))))\n+                reverse_dict_index = {v: k for k, v in dict_sym_index.items()}\n+                new_solutions = set()\n+                base_solutions = diophantine(eq, param)\n+                for sol in base_solutions:\n+                    reordered_sol = [sol[dict_sym_index[sym]] for sym in syms]\n+                    new_solutions.add(tuple(reordered_sol))\n+                return new_solutions if not permute else {\n+                    tuple(perm) for sol in new_solutions for perm in permute_signs(sol)\n+                }\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/solvers/diophantine.py b/sympy/solvers/diophantine.py\nindex 6132016..f685826 100644\n--- a/sympy/solvers/diophantine.py\n+++ b/sympy/solvers/diophantine.py\n@@ -71,8 +71,14 @@ def diophantine(eq, param=symbols('t', integer=True), syms=None, permute=False):\n                 raise TypeError('syms should be given as a sequence, e.g. a list')\n             syms = [i for i in syms if i in var]\n             if syms != var:\n-                dict_sym_index = dict(zip(syms, range(len(syms))))\n-                return {tuple([t[dict_sym_index[i]] for i in var]) for t in diophantine(eq, param)}\n+                dict_sym_index = dict(zip(var, range(len(var))))\n+                reverse_dict_index = {v: k for k, v in dict_sym_index.items()}\n+                new_solutions = set()\n+                base_solutions = diophantine(eq, param)\n+                for sol in base_solutions:\n+                    reordered_sol = [sol[dict_sym_index[sym]] for sym in syms]\n+                    new_solutions.add(tuple(reordered_sol))\n+                return new_solutions if not permute else {tuple(perm) for sol in new_solutions for perm in permute_signs(sol)}\n         n, d = eq.as_numer_denom()\n         if n.is_number:\n             return set()\n", "normalized_occurrence": 1}
