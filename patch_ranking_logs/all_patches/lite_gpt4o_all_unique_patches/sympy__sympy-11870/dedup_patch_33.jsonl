{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11870", "model_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex bd243c1..c980795 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -539,7 +539,24 @@ def exptrigsimp(expr):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n         return min(*choices, key=count_ops)\n-    newexpr = bottom_up(expr, exp_trig)\n+    def sin_exp_transform(e):\n+        if not e.is_Mul:\n+            return e\n+        coeff, exp_term = e.as_coeff_Mul()\n+        if exp_term == -I*exp(I*expr) + I*exp(-I*expr):\n+            return sin(expr)\n+        return e\n+\n+    def sinc_exp_transform(e):\n+        if not e.is_Mul:\n+            return e\n+        coeff, exp_term = e.as_coeff_Mul()\n+        if exp_term == -I*exp(I*expr) + I*exp(-I*expr):\n+            return sinc(expr)\n+        return e\n+\n+    newexpr = bottom_up(expr, sin_exp_transform)\n+    newexpr = bottom_up(newexpr, sinc_exp_transform)\n \n     def f(rv):\n         if not rv.is_Mul:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py\nindex 8c4936d..95788ff 100644\n--- a/sympy/simplify/trigsimp.py\n+++ b/sympy/simplify/trigsimp.py\n@@ -181,7 +181,22 @@ def exptrigsimp(expr):\n             choices.append(e.rewrite(exp))\n         choices.append(e.rewrite(cos))\n         return min(*choices, key=count_ops)\n-    newexpr = bottom_up(expr, exp_trig)\n+    def sin_exp_transform(e):\n+        if not e.is_Mul:\n+            return e\n+        coeff, exp_term = e.as_coeff_Mul()\n+        if exp_term == -I * exp(I * expr) + I * exp(-I * expr):\n+            return sin(expr)\n+        return e\n+    def sinc_exp_transform(e):\n+        if not e.is_Mul:\n+            return e\n+        coeff, exp_term = e.as_coeff_Mul()\n+        if exp_term == -I * exp(I * expr) + I * exp(-I * expr):\n+            return sinc(expr)\n+        return e\n+    newexpr = bottom_up(expr, sin_exp_transform)\n+    newexpr = bottom_up(newexpr, sinc_exp_transform)\n     def f(rv):\n         if not rv.is_Mul:\n             return rv\n", "normalized_occurrence": 1}
