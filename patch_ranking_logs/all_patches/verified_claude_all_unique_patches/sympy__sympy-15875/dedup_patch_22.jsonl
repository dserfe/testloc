{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15875", "model_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 1046af8..93d92a6 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -534,36 +534,52 @@ class Add(Expr, AssocOp):\n             # issue 10528: there is no way to know if a nc symbol\n             # is zero or not\n             return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+\n+        # Split terms into real and imaginary parts\n+        real_terms = []\n+        imag_terms = []\n+        \n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    real_terms.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                if a.is_zero:\n+                    continue\n+                imag_terms.append(a)\n             elif (S.ImaginaryUnit*a).is_real:\n-                im_or_z = True\n+                if a.is_zero:\n+                    continue\n+                imag_terms.append(a)\n             else:\n                 return\n-        if z == len(self.args):\n+\n+        # If no terms remain after removing zeros, the expression is zero\n+        if not real_terms and not imag_terms:\n             return True\n-        if len(nz) == len(self.args):\n+\n+        # Check real and imaginary parts separately\n+        real_sum = self.func(*real_terms) if real_terms else S.Zero\n+        imag_sum = self.func(*imag_terms) if imag_terms else S.Zero\n+\n+        # If either part's zero status is unknown, we can't determine\n+        if real_sum.is_zero is None or imag_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and not im:\n-                return True\n-            if im and not im_or_z:\n-                return False\n-        if b.is_zero is False:\n+\n+        # Expression is zero only if both parts are zero\n+        if real_sum.is_zero and imag_sum.is_zero:\n+            return True\n+        \n+        # If either part is definitely non-zero, the sum is non-zero\n+        if real_sum.is_zero is False or imag_sum.is_zero is False:\n             return False\n+            \n+        # If we can't determine, return None\n+        return None\n \n     def _eval_is_odd(self):\n         l = [f for f in self.args if not (f.is_even is True)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/add.py b/sympy/core/add.py\nindex 63cb816..e7e6690 100644\n--- a/sympy/core/add.py\n+++ b/sympy/core/add.py\n@@ -288,36 +288,37 @@ class Add(Expr, AssocOp):\n     def _eval_is_zero(self):\n         if self.is_commutative is False:\n             return\n-        nz = []\n-        z = 0\n-        im_or_z = False\n-        im = False\n+        real_terms = []\n+        imag_terms = []\n         for a in self.args:\n             if a.is_real:\n                 if a.is_zero:\n-                    z += 1\n+                    continue\n                 elif a.is_zero is False:\n-                    nz.append(a)\n+                    real_terms.append(a)\n                 else:\n                     return\n             elif a.is_imaginary:\n-                im = True\n+                if a.is_zero:\n+                    continue\n+                imag_terms.append(a)\n             elif (S.ImaginaryUnit * a).is_real:\n-                im_or_z = True\n+                if a.is_zero:\n+                    continue\n+                imag_terms.append(a)\n             else:\n                 return\n-        if z == len(self.args):\n+        if not real_terms and (not imag_terms):\n             return True\n-        if len(nz) == len(self.args):\n+        real_sum = self.func(*real_terms) if real_terms else S.Zero\n+        imag_sum = self.func(*imag_terms) if imag_terms else S.Zero\n+        if real_sum.is_zero is None or imag_sum.is_zero is None:\n             return None\n-        b = self.func(*nz)\n-        if b.is_zero:\n-            if not im_or_z and (not im):\n-                return True\n-            if im and (not im_or_z):\n-                return False\n-        if b.is_zero is False:\n+        if real_sum.is_zero and imag_sum.is_zero:\n+            return True\n+        if real_sum.is_zero is False or imag_sum.is_zero is False:\n             return False\n+        return None\n     def _eval_is_odd(self):\n         l = [f for f in self.args if not f.is_even is True]\n         if not l:\n", "normalized_occurrence": 1}
