{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-11143", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 13debe8..d7bad0c 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -742,7 +742,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                     nodes.append(field)\n \n     @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n+    def is_rewrite_disabled(docstring: Optional[str]) -> bool:\n         return \"PYTEST_DONT_REWRITE\" in docstring\n \n     def variable(self) -> str:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex ee7c041..16e2483 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -398,7 +398,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 elif isinstance(field, ast.AST) and (not isinstance(field, ast.expr)):\n                     nodes.append(field)\n     @staticmethod\n-    def is_rewrite_disabled(docstring: str) -> bool:\n+    def is_rewrite_disabled(docstring: Optional[str]) -> bool:\n         return 'PYTEST_DONT_REWRITE' in docstring\n     def variable(self) -> str:\n         name = '@py_assert' + str(next(self.variable_counter))\n", "normalized_occurrence": 1}
