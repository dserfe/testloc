{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..cdf0384 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -299,9 +299,10 @@ class sin(TrigonometricFunction):\n         if arg.could_extract_minus_sign():\n             return -cls(-arg)\n \n-        i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n-        if i_coeff is not None:\n-            return S.ImaginaryUnit * sinh(i_coeff)\n+        # Handle complex arguments separately\n+        if arg.is_real is False:  # explicitly check for non-real args\n+            re, im = arg.as_real_imag()\n+            return sin(re) * cosh(im) + S.ImaginaryUnit * cos(re) * sinh(im)\n \n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n@@ -573,9 +574,10 @@ class cos(TrigonometricFunction):\n         if arg.could_extract_minus_sign():\n             return cls(-arg)\n \n-        i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n-        if i_coeff is not None:\n-            return cosh(i_coeff)\n+        # Handle complex arguments separately\n+        if arg.is_real is False:  # explicitly check for non-real args\n+            re, im = arg.as_real_imag()\n+            return cos(re) * cosh(im) - S.ImaginaryUnit * sin(re) * sinh(im)\n \n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..75e9635 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -159,9 +159,9 @@ class sin(TrigonometricFunction):\n             return arg._eval_func(cls)\n         if arg.could_extract_minus_sign():\n             return -cls(-arg)\n-        i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n-        if i_coeff is not None:\n-            return S.ImaginaryUnit * sinh(i_coeff)\n+        if arg.is_real is False:\n+            re, im = arg.as_real_imag()\n+            return sin(re) * cosh(im) + S.ImaginaryUnit * cos(re) * sinh(im)\n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n             if pi_coeff.is_integer:\n@@ -333,9 +333,9 @@ class cos(TrigonometricFunction):\n             return arg._eval_func(cls)\n         if arg.could_extract_minus_sign():\n             return cls(-arg)\n-        i_coeff = arg.as_coefficient(S.ImaginaryUnit)\n-        if i_coeff is not None:\n-            return cosh(i_coeff)\n+        if arg.is_real is False:\n+            re, im = arg.as_real_imag()\n+            return cos(re) * cosh(im) - S.ImaginaryUnit * sin(re) * sinh(im)\n         pi_coeff = _pi_coeff(arg)\n         if pi_coeff is not None:\n             if pi_coeff.is_integer:\n", "normalized_occurrence": 1}
