{"model_name_or_path": "agentless", "instance_id": "django__django-16263", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ab02d72..589f330 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -550,6 +550,18 @@ class Query(BaseExpression):\n         Perform a COUNT() query using the current filter constraints.\n         \"\"\"\n         obj = self.clone()\n+        # Remove annotations not referenced by filters, other annotations, or ordering\n+        if self.annotations:\n+            referenced_annotations = set()\n+            if self.where:\n+                referenced_annotations |= self.where.get_referenced_annotations()\n+            if self.order_by:\n+                referenced_annotations |= {col[0] for col in self.order_by if isinstance(col[0], str) and col[0] in self.annotations}\n+            if self.annotation_select:\n+                referenced_annotations |= set(self.annotation_select.keys())\n+            annotations_to_keep = {alias: annotation for alias, annotation in self.annotations.items() if alias in referenced_annotations}\n+            obj.annotations = annotations_to_keep\n+        \n         obj.add_annotation(Count(\"*\"), alias=\"__count\", is_summary=True)\n         return obj.get_aggregation(using, [\"__count\"])[\"__count\"]\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 8207ea2..9d21a26 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -289,6 +289,16 @@ class Query(BaseExpression):\n         return dict(zip(outer_query.annotation_select, result))\n     def get_count(self, using):\n         obj = self.clone()\n+        if self.annotations:\n+            referenced_annotations = set()\n+            if self.where:\n+                referenced_annotations |= self.where.get_referenced_annotations()\n+            if self.order_by:\n+                referenced_annotations |= {col[0] for col in self.order_by if isinstance(col[0], str) and col[0] in self.annotations}\n+            if self.annotation_select:\n+                referenced_annotations |= set(self.annotation_select.keys())\n+            annotations_to_keep = {alias: annotation for alias, annotation in self.annotations.items() if alias in referenced_annotations}\n+            obj.annotations = annotations_to_keep\n         obj.add_annotation(Count('*'), alias='__count', is_summary=True)\n         return obj.get_aggregation(using, ['__count'])['__count']\n     def has_filters(self):\n", "normalized_occurrence": 1}
