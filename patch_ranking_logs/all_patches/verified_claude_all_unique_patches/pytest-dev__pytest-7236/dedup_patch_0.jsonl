{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-7236", "model_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 28ce115..083a71d 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -210,6 +210,13 @@ class TestCaseFunction(Function):\n \n         maybe_wrap_pytest_function_for_tracing(self)\n \n+        # Check if the test is marked as skipped\n+        skip_marker = getattr(self.obj, \"__unittest_skip__\", False)\n+        if skip_marker:\n+            # For skipped tests, we shouldn't run the test or tearDown\n+            self._testcase(result=self)\n+            return\n+\n         # let the unittest framework handle async functions\n         if is_async_function(self.obj):\n             self._testcase(self)\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py\nindex 4eb682f..d961d5f 100644\n--- a/src/_pytest/unittest.py\n+++ b/src/_pytest/unittest.py\n@@ -149,6 +149,10 @@ class TestCaseFunction(Function):\n     def runtest(self):\n         from _pytest.debugging import maybe_wrap_pytest_function_for_tracing\n         maybe_wrap_pytest_function_for_tracing(self)\n+        skip_marker = getattr(self.obj, '__unittest_skip__', False)\n+        if skip_marker:\n+            self._testcase(result=self)\n+            return\n         if is_async_function(self.obj):\n             self._testcase(self)\n         else:\n", "normalized_occurrence": 1}
