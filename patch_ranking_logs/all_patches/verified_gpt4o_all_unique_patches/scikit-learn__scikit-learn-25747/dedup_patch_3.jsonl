{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25747", "model_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 52acc1f..1b263a4 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -1,3 +1,4 @@\n+\n from functools import wraps\n \n from scipy.sparse import issparse\n@@ -54,7 +55,13 @@ def _wrap_in_pandas_container(\n \n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n-            data_to_wrap.columns = columns\n+            if len(data_to_wrap.columns) == len(columns):\n+                data_to_wrap.columns = columns\n+            else:\n+                raise ValueError(\n+                    f\"Length mismatch: Expected axis has {len(data_to_wrap.columns)} elements, new \"\n+                    f\"values have {len(columns)} elements\"\n+                )\n         if index is not None:\n             data_to_wrap.index = index\n         return data_to_wrap\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py\nindex 386f312..8ee9eb6 100644\n--- a/sklearn/utils/_set_output.py\n+++ b/sklearn/utils/_set_output.py\n@@ -14,7 +14,10 @@ def _wrap_in_pandas_container(data_to_wrap, *, columns, index=None):\n     pd = check_pandas_support(\"Setting output container to 'pandas'\")\n     if isinstance(data_to_wrap, pd.DataFrame):\n         if columns is not None:\n-            data_to_wrap.columns = columns\n+            if len(data_to_wrap.columns) == len(columns):\n+                data_to_wrap.columns = columns\n+            else:\n+                raise ValueError(f'Length mismatch: Expected axis has {len(data_to_wrap.columns)} elements, new values have {len(columns)} elements')\n         if index is not None:\n             data_to_wrap.index = index\n         return data_to_wrap\n", "normalized_occurrence": 1}
