{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..d4c2f67 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -19,6 +19,8 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n+\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -45,12 +47,26 @@ class ResolverMatch:\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n \n-        if not hasattr(func, '__name__'):\n-            # A class-based view\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+        # Handle partial functions\n+        if isinstance(func, functools.partial):\n+            inner_func = func.func\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords or {}\n+            if not hasattr(inner_func, '__name__'):\n+                # A class-based view\n+                self._func_path = inner_func.__class__.__module__ + '.' + inner_func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = inner_func.__module__ + '.' + inner_func.__name__\n         else:\n-            # A function-based view\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._partial_args = ()\n+            self._partial_keywords = {}\n+            if not hasattr(func, '__name__'):\n+                # A class-based view\n+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            else:\n+                # A function-based view\n+                self._func_path = func.__module__ + '.' + func.__name__\n \n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n@@ -59,8 +75,12 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n-        return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+        if self._partial_args or self._partial_keywords:\n+            partial_info = f\" [partial args={self._partial_args} keywords={self._partial_keywords}]\"\n+        else:\n+            partial_info = \"\"\n+        return \"ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n+            self._func_path, partial_info, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..a1d78b8 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -10,6 +10,7 @@ from django.core.checks import Error, Warning\n from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n+import functools\n from django.utils.functional import cached_property\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n@@ -29,16 +30,31 @@ class ResolverMatch:\n         self.app_name = ':'.join(self.app_names)\n         self.namespaces = [x for x in namespaces if x] if namespaces else []\n         self.namespace = ':'.join(self.namespaces)\n-        if not hasattr(func, '__name__'):\n-            self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+        if isinstance(func, functools.partial):\n+            inner_func = func.func\n+            self._partial_args = func.args\n+            self._partial_keywords = func.keywords or {}\n+            if not hasattr(inner_func, '__name__'):\n+                self._func_path = inner_func.__class__.__module__ + '.' + inner_func.__class__.__name__\n+            else:\n+                self._func_path = inner_func.__module__ + '.' + inner_func.__name__\n         else:\n-            self._func_path = func.__module__ + '.' + func.__name__\n+            self._partial_args = ()\n+            self._partial_keywords = {}\n+            if not hasattr(func, '__name__'):\n+                self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__\n+            else:\n+                self._func_path = func.__module__ + '.' + func.__name__\n         view_path = url_name or self._func_path\n         self.view_name = ':'.join(self.namespaces + [view_path])\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        if self._partial_args or self._partial_keywords:\n+            partial_info = f' [partial args={self._partial_args} keywords={self._partial_keywords}]'\n+        else:\n+            partial_info = ''\n+        return 'ResolverMatch(func=%s%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, partial_info, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
