{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..e86d10a 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -400,7 +400,7 @@ class LatexPrinter(Printer):\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n             if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n+                    and ldenom <= 2 and not \"^\" in sdenom and not denom.is_Add:\n                 # handle short fractions\n                 if self._needs_mul_brackets(numer, last=False):\n                     tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n@@ -1245,7 +1245,7 @@ class LatexPrinter(Printer):\n             if expr.p < 0:\n                 sign = \"- \"\n                 p = -p\n-            if self._settings['fold_short_frac']:\n+            if self._settings['fold_short_frac'] and expr.q != 2:\n                 return r\"%s%d / %d\" % (sign, p, expr.q)\n             return r\"%s\\frac{%d}{%d}\" % (sign, p, expr.q)\n         else:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..2ea68b5 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -196,7 +196,7 @@ class LatexPrinter(Printer):\n             sdenom = convert(denom)\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n+            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom) and (not denom.is_Add):\n                 if self._needs_mul_brackets(numer, last=False):\n                     tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n                 else:\n@@ -799,7 +799,7 @@ class LatexPrinter(Printer):\n             if expr.p < 0:\n                 sign = '- '\n                 p = -p\n-            if self._settings['fold_short_frac']:\n+            if self._settings['fold_short_frac'] and expr.q != 2:\n                 return '%s%d / %d' % (sign, p, expr.q)\n             return '%s\\\\frac{%d}{%d}' % (sign, p, expr.q)\n         else:\n", "normalized_occurrence": 1}
