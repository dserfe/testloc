{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-17655", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex a708f18..1caf548 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -213,6 +213,18 @@ class Point(GeometryEntity):\n         sympy.geometry.point.Point.translate\n \n         \"\"\"\n+        if isinstance(other, Mul):\n+            # Extract the Point and multiplier from the Mul object\n+            point = None\n+            factor = None\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                else:\n+                    factor = arg\n+            if point and factor:\n+                other = point * factor\n+\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex e45d95f..aa9b8ed 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -62,6 +62,16 @@ class Point(GeometryEntity):\n         origin = Point([0] * len(self))\n         return Point.distance(origin, self)\n     def __add__(self, other):\n+        if isinstance(other, Mul):\n+            point = None\n+            factor = None\n+            for arg in other.args:\n+                if isinstance(arg, Point):\n+                    point = arg\n+                else:\n+                    factor = arg\n+            if point and factor:\n+                other = point * factor\n         try:\n             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))\n         except TypeError:\n", "normalized_occurrence": 1}
