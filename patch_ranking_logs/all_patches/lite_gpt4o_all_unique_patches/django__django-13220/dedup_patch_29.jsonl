{"model_name_or_path": "agentless", "instance_id": "django__django-13220", "model_patch": "diff --git a/django/core/exceptions.py b/django/core/exceptions.py\nindex 7969d41..ca88485 100644\n--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n@@ -174,6 +174,27 @@ class ValidationError(Exception):\n                     message %= error.params\n                 yield str(message)\n \n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._compare_error_dicts(other)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self._get_error_messages()) == sorted(other._get_error_messages())\n+        return False\n+\n+    def _compare_error_dicts(self, other):\n+        return (\n+            self.error_dict.keys() == other.error_dict.keys() and\n+            all(\n+                sorted(self.error_dict[key]) == sorted(other.error_dict[key])\n+                for key in self.error_dict\n+            )\n+        )\n+\n+    def _get_error_messages(self):\n+        return [str(message) for message in self]\n+\n     def __str__(self):\n         if hasattr(self, 'error_dict'):\n             return repr(dict(self))\n@@ -190,4 +211,4 @@ class EmptyResultSet(Exception):\n \n class SynchronousOnlyOperation(Exception):\n     \"\"\"The user tried to call a sync-only function from an async context.\"\"\"\n-    pass\n+    pass\n", "occurrence": 1, "normalized_patch": "--- a/django/core/exceptions.py\n+++ b/django/core/exceptions.py\n+    def __eq__(self, other):\n+        if not isinstance(other, ValidationError):\n+            return False\n+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):\n+            return self._compare_error_dicts(other)\n+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):\n+            return sorted(self._get_error_messages()) == sorted(other._get_error_messages())\n+        return False\n+\n+    def _compare_error_dicts(self, other):\n+        return self.error_dict.keys() == other.error_dict.keys() and all((sorted(self.error_dict[key]) == sorted(other.error_dict[key]) for key in self.error_dict))\n+\n+    def _get_error_messages(self):\n+        return [str(message) for message in self]\n+", "normalized_occurrence": 1}
