{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8269", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 8266583..085f028 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -168,10 +168,9 @@ class CheckExternalLinksBuilder(Builder):\n                                             auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n \n-                    if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n                     try:\n+                        if not found:\n+                            raise Exception(__(\"Anchor '%s' not found\") % anchor)\n                         # try a HEAD request first, which should be easier on\n                         # the server and the network\n                         response = requests.head(req_url, config=self.app.config,\n@@ -195,6 +194,8 @@ class CheckExternalLinksBuilder(Builder):\n             except Exception as err:\n                 if is_ssl_error(err):\n                     return 'ignored', str(err), 0\n+                elif isinstance(err, requests.RequestException):\n+                    return 'broken', str(err), 0\n                 else:\n                     return 'broken', str(err), 0\n             if response.url.rstrip('/') == req_url.rstrip('/'):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex ace1ed3..2f6fc5e 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -98,10 +98,9 @@ class CheckExternalLinksBuilder(Builder):\n                 if anchor and self.app.config.linkcheck_anchors:\n                     response = requests.get(req_url, stream=True, config=self.app.config, auth=auth_info, **kwargs)\n                     found = check_anchor(response, unquote(anchor))\n-                    if not found:\n-                        raise Exception(__(\"Anchor '%s' not found\") % anchor)\n-                else:\n                     try:\n+                        if not found:\n+                            raise Exception(__(\"Anchor '%s' not found\") % anchor)\n                         response = requests.head(req_url, config=self.app.config, auth=auth_info, **kwargs)\n                         response.raise_for_status()\n                     except HTTPError:\n@@ -117,6 +116,8 @@ class CheckExternalLinksBuilder(Builder):\n             except Exception as err:\n                 if is_ssl_error(err):\n                     return ('ignored', str(err), 0)\n+                elif isinstance(err, requests.RequestException):\n+                    return ('broken', str(err), 0)\n                 else:\n                     return ('broken', str(err), 0)\n             if response.url.rstrip('/') == req_url.rstrip('/'):\n", "normalized_occurrence": 1}
