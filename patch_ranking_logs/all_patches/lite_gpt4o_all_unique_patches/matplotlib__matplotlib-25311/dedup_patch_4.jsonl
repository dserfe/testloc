{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25311", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 08e0049..9e29a13 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,10 +3174,21 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove draggable state from legends to make the figure pickleable\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend._draggable is not None:\n+                    legend._draggable = None\n         return state\n \n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n+\n+        # Restore draggable state for legends\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if hasattr(legend, '_draggable') and legend._draggable is None:\n+                    legend.set_draggable(True)\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n \n         if version != mpl.__version__:\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..d7d75cf 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,9 +951,17 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if legend._draggable is not None:\n+                    legend._draggable = None\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n+        for ax in self.axes:\n+            for legend in ax.legends:\n+                if hasattr(legend, '_draggable') and legend._draggable is None:\n+                    legend.set_draggable(True)\n         restore_to_pylab = state.pop('_restore_to_pylab', False)\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n", "normalized_occurrence": 1}
