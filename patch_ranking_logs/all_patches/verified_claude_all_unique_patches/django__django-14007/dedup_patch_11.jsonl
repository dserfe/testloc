{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..84fe0a8 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -748,6 +748,24 @@ class Field(RegisterLookupMixin):\n             return [self.from_db_value]\n         return []\n \n+    def to_python(self, value):\n+        \"\"\"\n+        Convert the input value into the expected Python data type, raising\n+        django.core.exceptions.ValidationError if the data can't be converted.\n+        Return the converted value. Subclasses should override this.\n+        \"\"\"\n+        return value\n+\n+    def _convert_value(self, value, connection):\n+        \"\"\"\n+        Convert value through all converters defined for this field.\n+        Used for both query results and inserted values.\n+        \"\"\"\n+        converters = self.get_db_converters(connection)\n+        for converter in converters:\n+            value = converter(value, None, connection)\n+        return value\n+\n     @property\n     def unique(self):\n         return self._unique or self.primary_key\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n+    def to_python(self, value):\n+        return value\n+    def _convert_value(self, value, connection):\n+        converters = self.get_db_converters(connection)\n+        for converter in converters:\n+            value = converter(value, None, connection)\n+        return value", "normalized_occurrence": 1}
