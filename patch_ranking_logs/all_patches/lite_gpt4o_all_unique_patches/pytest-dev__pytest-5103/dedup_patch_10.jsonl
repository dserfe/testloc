{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..4a57e3d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -696,7 +696,12 @@ class AssertionRewriter(ast.NodeVisitor):\n             ):\n                 lineno = item.lineno\n                 break\n-            pos += 1\n+            if isinstance(item, ast.Assert):\n+                new_stmts = self.visit(item)\n+                mod.body[pos:pos+1] = new_stmts\n+                pos += len(new_stmts)\n+            else:\n+                pos += 1\n         else:\n             lineno = item.lineno\n         imports = [\n@@ -1081,4 +1086,4 @@ warn_explicit(\n             res = ast.BoolOp(ast.And(), load_names)\n         else:\n             res = load_names[0]\n-        return res, self.explanation_param(self.pop_format_context(expl_call))\n+        return res, self.explanation_param(self.pop_format_context(expl_call))\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..ede9c6f 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -385,7 +385,12 @@ class AssertionRewriter(ast.NodeVisitor):\n             elif not isinstance(item, ast.ImportFrom) or item.level > 0 or item.module != '__future__':\n                 lineno = item.lineno\n                 break\n-            pos += 1\n+            if isinstance(item, ast.Assert):\n+                new_stmts = self.visit(item)\n+                mod.body[pos:pos + 1] = new_stmts\n+                pos += len(new_stmts)\n+            else:\n+                pos += 1\n         else:\n             lineno = item.lineno\n         imports = [ast.Import([alias], lineno=lineno, col_offset=0) for alias in aliases]\n", "normalized_occurrence": 1}
