{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13915", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 0977e81..592b000 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -898,6 +898,9 @@ class Basic(with_metaclass(ManagedProperties)):\n                 sequence = sorted([(k, v) for (k, v) in sequence.items()],\n                                   key=default_sort_key)\n \n+        from sympy.core.function import Undefined\n+        from sympy import limit\n+\n         if kwargs.pop('simultaneous', False):  # XXX should this be the default for dict subs?\n             reps = {}\n             rv = self\n@@ -917,9 +920,14 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                except ZeroDivisionError:\n+                    rv = rv.limit(old, new)\n                 if not isinstance(rv, Basic):\n                     break\n+            if rv.has(Undefined):\n+                return rv.limit(old, new)\n             return rv\n \n     @cacheit\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 782db85..17602cf 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -310,6 +310,8 @@ class Basic(with_metaclass(ManagedProperties)):\n                 del newseq, d\n             else:\n                 sequence = sorted([(k, v) for k, v in sequence.items()], key=default_sort_key)\n+        from sympy.core.function import Undefined\n+        from sympy import limit\n         if kwargs.pop('simultaneous', False):\n             reps = {}\n             rv = self\n@@ -326,9 +328,14 @@ class Basic(with_metaclass(ManagedProperties)):\n         else:\n             rv = self\n             for old, new in sequence:\n-                rv = rv._subs(old, new, **kwargs)\n+                try:\n+                    rv = rv._subs(old, new, **kwargs)\n+                except ZeroDivisionError:\n+                    rv = rv.limit(old, new)\n                 if not isinstance(rv, Basic):\n                     break\n+            if rv.has(Undefined):\n+                return rv.limit(old, new)\n             return rv\n     @cacheit\n     def _subs(self, old, new, **hints):\n", "normalized_occurrence": 1}
