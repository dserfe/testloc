{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 7838e8d..272726a 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1457,7 +1457,7 @@ class Variable(\n         if old_dim not in self.dims:\n             raise ValueError(\"invalid existing dimension: %s\" % old_dim)\n \n-        if set(new_dim_names).intersection(self.dims):\n+        if set(new_dim_names).intersection(set(self.dims)):\n             raise ValueError(\n                 \"cannot create a new dimension with the same \"\n                 \"name as an existing dimension\"\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/variable.py b/xarray/core/variable.py\nindex 44b3a8e..d41dccf 100644\n--- a/xarray/core/variable.py\n+++ b/xarray/core/variable.py\n@@ -1111,7 +1111,7 @@ class Variable(common.AbstractArray, arithmetic.SupportsArithmetic, utils.NdimSi\n         new_dim_sizes = tuple(dims.values())\n         if old_dim not in self.dims:\n             raise ValueError('invalid existing dimension: %s' % old_dim)\n-        if set(new_dim_names).intersection(self.dims):\n+        if set(new_dim_names).intersection(set(self.dims)):\n             raise ValueError('cannot create a new dimension with the same name as an existing dimension')\n         if np.prod(new_dim_sizes) != self.sizes[old_dim]:\n             raise ValueError('the product of the new dimension sizes must equal the size of the old dimension')\n", "normalized_occurrence": 1}
