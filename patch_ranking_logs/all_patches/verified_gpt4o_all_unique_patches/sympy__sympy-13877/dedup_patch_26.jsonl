{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..f5f9ff7 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -208,12 +208,16 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val*tmp_mat[i, j + 1] - mat[pivot_pos, j + 1]*tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n \n             return sign*bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n \n-        return cancel(bareiss(self))\n+        try:\n+            return cancel(bareiss(self))\n+        except TypeError:\n+            # Fallback to Berkowitz if Bareiss fails\n+            return self._eval_det_berkowitz()\n \n     def _eval_det_berkowitz(self):\n         \"\"\" Use the Berkowitz algorithm to compute the determinant.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..449eed2 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -83,10 +83,13 @@ class MatrixDeterminant(MatrixCommon):\n             def entry(i, j):\n                 ret = (pivot_val * tmp_mat[i, j + 1] - mat[pivot_pos, j + 1] * tmp_mat[i, 0]) / cumm\n                 if not ret.is_Atom:\n-                    cancel(ret)\n+                    ret = cancel(ret)\n                 return ret\n             return sign * bareiss(self._new(mat.rows - 1, mat.cols - 1, entry), pivot_val)\n-        return cancel(bareiss(self))\n+        try:\n+            return cancel(bareiss(self))\n+        except TypeError:\n+            return self._eval_det_berkowitz()\n     def _eval_det_berkowitz(self):\n         berk_vector = self._eval_berkowitz_vector()\n         return (-1) ** (len(berk_vector) - 1) * berk_vector[-1]\n", "normalized_occurrence": 1}
