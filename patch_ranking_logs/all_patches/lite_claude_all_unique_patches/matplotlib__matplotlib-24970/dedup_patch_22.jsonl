{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24970", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex bd73e56..ecdeef5 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1166,6 +1166,17 @@ class ListedColormap(Colormap):\n         self._isinit = True\n         self._set_extremes()\n \n+    def _set_extremes(self):\n+        # Define indices for the special colors\n+        i_over = np.array([self.N]).astype(np.uint8)  # 256 -> N\n+        i_under = np.array([self.N + 1]).astype(np.uint8)  # 257 -> N + 1\n+        i_bad = np.array([self.N + 2]).astype(np.uint8)  # 258 -> N + 2\n+        \n+        # Set the special colors\n+        self._i_over = int(i_over)\n+        self._i_under = int(i_under)\n+        self._i_bad = int(i_bad)\n+\n     def resampled(self, lutsize):\n         \"\"\"Return a new colormap with *lutsize* entries.\"\"\"\n         colors = self(np.linspace(0, 1, lutsize))\n", "occurrence": 1, "normalized_patch": "--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n+    def _set_extremes(self):\n+        i_over = np.array([self.N]).astype(np.uint8)\n+        i_under = np.array([self.N + 1]).astype(np.uint8)\n+        i_bad = np.array([self.N + 2]).astype(np.uint8)\n+        self._i_over = int(i_over)\n+        self._i_under = int(i_under)\n+        self._i_bad = int(i_bad)\n+", "normalized_occurrence": 1}
