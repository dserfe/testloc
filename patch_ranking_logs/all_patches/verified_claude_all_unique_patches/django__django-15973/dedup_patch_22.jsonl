{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15973", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 19949c1..ef67200 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1910,13 +1910,18 @@ class ManyToManyField(RelatedField):\n         #  3) The class owning the m2m field has been swapped out.\n         if not cls._meta.abstract:\n             if self.remote_field.through:\n-\n-                def resolve_through_model(_, model, field):\n-                    field.remote_field.through = model\n-\n-                lazy_related_operation(\n-                    resolve_through_model, cls, self.remote_field.through, field=self\n-                )\n+                # Resolve string references to the through model\n+                # Defer the import of the through model to avoid circular imports\n+                if isinstance(self.remote_field.through, str):\n+                    def resolve_through_model(_, model, field):\n+                        field.remote_field.through = model\n+\n+                    lazy_related_operation(\n+                        resolve_through_model, cls, self.remote_field.through, field=self\n+                    )\n+                # If it's already a model class, use it directly\n+                else:\n+                    self.remote_field.through = self.remote_field.through\n             elif not cls._meta.swapped:\n                 self.remote_field.through = create_many_to_many_intermediary_model(\n                     self, cls\n@@ -1990,4 +1995,4 @@ class ManyToManyField(RelatedField):\n         return None\n \n     def db_parameters(self, connection):\n-        return {\"type\": None, \"check\": None}\n+        return {\"type\": None, \"check\": None}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 676e47f..8bdff77 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -751,9 +751,12 @@ class ManyToManyField(RelatedField):\n         super().contribute_to_class(cls, name, **kwargs)\n         if not cls._meta.abstract:\n             if self.remote_field.through:\n-                def resolve_through_model(_, model, field):\n-                    field.remote_field.through = model\n-                lazy_related_operation(resolve_through_model, cls, self.remote_field.through, field=self)\n+                if isinstance(self.remote_field.through, str):\n+                    def resolve_through_model(_, model, field):\n+                        field.remote_field.through = model\n+                    lazy_related_operation(resolve_through_model, cls, self.remote_field.through, field=self)\n+                else:\n+                    self.remote_field.through = self.remote_field.through\n             elif not cls._meta.swapped:\n                 self.remote_field.through = create_many_to_many_intermediary_model(self, cls)\n         setattr(cls, self.name, ManyToManyDescriptor(self.remote_field, reverse=False))\n", "normalized_occurrence": 1}
