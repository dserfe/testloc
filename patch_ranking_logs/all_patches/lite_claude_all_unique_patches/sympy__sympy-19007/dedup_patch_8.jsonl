{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..2b3888e 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,37 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n-        # Find row entry\n+        from sympy import Piecewise\n+        # For each block, we'll build conditions for when the index falls in that block\n+        row_conditions = []\n+        current_row = 0\n+        \n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n+            row_end = current_row + numrows\n+            # If i falls within this block's rows\n+            condition = (current_row <= i) & (i < row_end)\n+            row_conditions.append((row_block, condition, current_row))\n+            current_row = row_end\n+            \n+        col_conditions = []\n+        current_col = 0\n+        \n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_end = current_col + numcols\n+            # If j falls within this block's columns\n+            condition = (current_col <= j) & (j < col_end)\n+            col_conditions.append((col_block, condition, current_col))\n+            current_col = col_end\n+            \n+        # Build piecewise expression for all possible combinations\n+        pieces = []\n+        for row_block, row_cond, row_offset in row_conditions:\n+            for col_block, col_cond, col_offset in col_conditions:\n+                # The element from this block with adjusted indices\n+                element = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                pieces.append((element, row_cond & col_cond))\n+                \n+        return Piecewise(*pieces)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..5096bf8 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,27 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Piecewise\n+        row_conditions = []\n+        current_row = 0\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n-                break\n-            else:\n-                i -= numrows\n+            row_end = current_row + numrows\n+            condition = (current_row <= i) & (i < row_end)\n+            row_conditions.append((row_block, condition, current_row))\n+            current_row = row_end\n+        col_conditions = []\n+        current_col = 0\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n-                break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            col_end = current_col + numcols\n+            condition = (current_col <= j) & (j < col_end)\n+            col_conditions.append((col_block, condition, current_col))\n+            current_col = col_end\n+        pieces = []\n+        for row_block, row_cond, row_offset in row_conditions:\n+            for col_block, col_cond, col_offset in col_conditions:\n+                element = self.blocks[row_block, col_block][i - row_offset, j - col_offset]\n+                pieces.append((element, row_cond & col_cond))\n+        return Piecewise(*pieces)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
