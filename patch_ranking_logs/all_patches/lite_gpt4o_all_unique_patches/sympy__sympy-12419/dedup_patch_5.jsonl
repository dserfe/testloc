{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..48c205b 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -428,13 +428,12 @@ class MatrixSymbol(MatrixExpr):\n \n     def doit(self, **hints):\n         if hints.get('deep', True):\n-            return type(self)(self.name, self.args[1].doit(**hints),\n-                    self.args[2].doit(**hints))\n+            return type(self)(*map(lambda x: x.doit(**hints) if isinstance(x, MatrixExpr) else x, self.args))\n         else:\n             return self\n \n     def _eval_simplify(self, **kwargs):\n-        return self\n+        return self.doit(**kwargs)\n \n class Identity(MatrixExpr):\n     \"\"\"The Matrix Identity I - multiplicative identity\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 9ec3ea5..e5d081a 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -254,11 +254,11 @@ class MatrixSymbol(MatrixExpr):\n         return set((self,))\n     def doit(self, **hints):\n         if hints.get('deep', True):\n-            return type(self)(self.name, self.args[1].doit(**hints), self.args[2].doit(**hints))\n+            return type(self)(*map(lambda x: x.doit(**hints) if isinstance(x, MatrixExpr) else x, self.args))\n         else:\n             return self\n     def _eval_simplify(self, **kwargs):\n-        return self\n+        return self.doit(**kwargs)\n class Identity(MatrixExpr):\n     is_Identity = True\n     def __new__(cls, n):\n", "normalized_occurrence": 1}
