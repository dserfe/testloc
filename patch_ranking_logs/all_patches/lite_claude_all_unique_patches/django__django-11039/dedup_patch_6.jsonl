{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11039", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex e8d2c40..75aaad9 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,11 +55,12 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and databases that support DDL rollback\n+        connection = connections[options.get('database', DEFAULT_DB_ALIAS)]\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\n         sql_statements = executor.collect_sql(plan)\n-        return '\\n'.join(sql_statements)\n+        return '\\n'.join(sql_statements)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex a0048fc..9e30b9d 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -31,7 +31,8 @@ class Command(BaseCommand):\n         except KeyError:\n             raise CommandError(\"Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?\" % (migration_name, app_label))\n         targets = [(app_label, migration.name)]\n-        self.output_transaction = migration.atomic\n+        connection = connections[options.get('database', DEFAULT_DB_ALIAS)]\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n         plan = [(executor.loader.graph.nodes[targets[0]], options['backwards'])]\n         sql_statements = executor.collect_sql(plan)\n         return '\\n'.join(sql_statements)\n\\ No newline at end of file\n", "normalized_occurrence": 1}
