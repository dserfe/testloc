{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7985", "model_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex 4e6b0df..39821aa 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -213,6 +213,23 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return 'unchecked', '', 0\n             elif not uri.startswith(('http:', 'https:')):\n+                # Check if the local reference exists in the environment\n+                if '#' in uri:\n+                    docname, hashid = uri.split('#', 1)\n+                else:\n+                    docname, hashid = uri, ''\n+                \n+                # Remove any file extension\n+                docname = docname.rsplit('.', 1)[0]\n+                \n+                # Check if document exists\n+                if docname and docname not in self.env.all_docs:\n+                    return 'broken', 'document not found', 0\n+                elif hashid:\n+                    # If there's a hash, check if the target exists\n+                    if docname not in self.env.toc_secnumbers and docname not in self.env.toc_fignumbers:\n+                        return 'broken', 'section not found', 0\n+                \n                 return 'local', '', 0\n             elif uri in self.good:\n                 return 'working', 'old', 0\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py\nindex f6c8f65..fcc7b53 100644\n--- a/sphinx/builders/linkcheck.py\n+++ b/sphinx/builders/linkcheck.py\n@@ -133,6 +133,16 @@ class CheckExternalLinksBuilder(Builder):\n             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):\n                 return ('unchecked', '', 0)\n             elif not uri.startswith(('http:', 'https:')):\n+                if '#' in uri:\n+                    docname, hashid = uri.split('#', 1)\n+                else:\n+                    docname, hashid = (uri, '')\n+                docname = docname.rsplit('.', 1)[0]\n+                if docname and docname not in self.env.all_docs:\n+                    return ('broken', 'document not found', 0)\n+                elif hashid:\n+                    if docname not in self.env.toc_secnumbers and docname not in self.env.toc_fignumbers:\n+                        return ('broken', 'section not found', 0)\n                 return ('local', '', 0)\n             elif uri in self.good:\n                 return ('working', 'old', 0)\n", "normalized_occurrence": 1}
