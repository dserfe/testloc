{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8435", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 6f90bd7..0fdc5fc 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,7 +10,7 @@\n \n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n \n from docutils import nodes\n from docutils.nodes import Element\n@@ -22,6 +22,25 @@ from sphinx.util import inspect, typing\n \n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                      options: Dict, args: str, retann: str) -> None:\n+    \"\"\"Record type hints and apply type aliases to env object.\"\"\"\n+    try:\n+        if callable(obj):\n+            annotations = app.env.temp_data.setdefault('annotations', {})\n+            annotation = annotations.setdefault(name, OrderedDict())\n+            sig = inspect.signature(obj)\n+            for param in sig.parameters.values():\n+                if param.annotation is not param.empty:\n+                    annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n+            if sig.return_annotation is not sig.empty:\n+                annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n+        else:\n+            type_hints = get_type_hints(obj, globalns={}, localns=app.config.autodoc_type_aliases)\n+            for var, hint in type_hints.items():\n+                annotations = app.env.temp_data.setdefault('annotations', {})\n+                annotation = annotations.setdefault(name, OrderedDict())\n+                annotation[var] = typing.stringify(hint, type_aliases=app.config.autodoc_type_aliases)\n+    except (TypeError, ValueError):\n+        pass\n     \"\"\"Record type hints to env object.\"\"\"\n     try:\n         if callable(obj):\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 377d0c5..3f05161 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,12 +1,31 @@\n import re\n from collections import OrderedDict\n-from typing import Any, Dict, Iterable, cast\n+from typing import Any, Dict, Iterable, cast, get_type_hints\n from docutils import nodes\n from docutils.nodes import Element\n from sphinx import addnodes\n from sphinx.application import Sphinx\n from sphinx.util import inspect, typing\n def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Dict, args: str, retann: str) -> None:\n+    try:\n+        if callable(obj):\n+            annotations = app.env.temp_data.setdefault('annotations', {})\n+            annotation = annotations.setdefault(name, OrderedDict())\n+            sig = inspect.signature(obj)\n+            for param in sig.parameters.values():\n+                if param.annotation is not param.empty:\n+                    annotation[param.name] = typing.stringify(param.annotation, type_aliases=app.config.autodoc_type_aliases)\n+            if sig.return_annotation is not sig.empty:\n+                annotation['return'] = typing.stringify(sig.return_annotation, type_aliases=app.config.autodoc_type_aliases)\n+        else:\n+            type_hints = get_type_hints(obj, globalns={}, localns=app.config.autodoc_type_aliases)\n+            for var, hint in type_hints.items():\n+                annotations = app.env.temp_data.setdefault('annotations', {})\n+                annotation = annotations.setdefault(name, OrderedDict())\n+                annotation[var] = typing.stringify(hint, type_aliases=app.config.autodoc_type_aliases)\n+    except (TypeError, ValueError):\n+        pass\n+    'Record type hints to env object.'\n     try:\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n", "normalized_occurrence": 1}
