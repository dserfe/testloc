{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15161", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 626b8ab..d67ca88 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -658,6 +658,11 @@ class Func(SQLiteNumericMixin, Expression):\n     arg_joiner = ', '\n     arity = None  # The number of arguments the function accepts.\n \n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Func'\n+        return path, args, kwargs\n+\n     def __init__(self, *expressions, output_field=None, **extra):\n         if self.arity is not None and len(expressions) != self.arity:\n             raise TypeError(\n@@ -737,6 +742,11 @@ class Value(SQLiteNumericMixin, Expression):\n     # instances to be compiled until a decision is taken in #25425.\n     for_save = False\n \n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Value'\n+        return path, args, kwargs\n+\n     def __init__(self, value, output_field=None):\n         \"\"\"\n         Arguments:\n@@ -990,6 +1000,11 @@ class When(Expression):\n     # This isn't a complete conditional expression, must be used in Case().\n     conditional = False\n \n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.When'\n+        return path, args, kwargs\n+\n     def __init__(self, condition=None, then=None, **lookups):\n         if lookups:\n             if condition is None:\n@@ -1064,6 +1079,11 @@ class Case(SQLiteNumericMixin, Expression):\n             ELSE 'zero'\n         END\n     \"\"\"\n+\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Case'\n+        return path, args, kwargs\n     template = 'CASE %(cases)s ELSE %(default)s END'\n     case_joiner = ' '\n \n@@ -1316,6 +1336,11 @@ class Window(SQLiteNumericMixin, Expression):\n     contains_over_clause = True\n     filterable = False\n \n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Window'\n+        return path, args, kwargs\n+\n     def __init__(self, expression, partition_by=None, order_by=None, frame=None, output_field=None):\n         self.partition_by = partition_by\n         self.order_by = order_by\n", "occurrence": 1, "normalized_patch": "--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Func'\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Value'\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.When'\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Case'\n+        return (path, args, kwargs)\n+    def deconstruct(self):\n+        path, args, kwargs = super().deconstruct()\n+        path = 'django.db.models.Window'\n+        return (path, args, kwargs)", "normalized_occurrence": 1}
