{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5787", "model_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex ba95b0e..414f10c 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -366,6 +366,9 @@ class TestReport(BaseReport):\n                     )\n         for rwhen, key, content in item._report_sections:\n             sections.append((\"Captured {} {}\".format(key, rwhen), content))\n+        if isinstance(longrepr, ExceptionInfo):\n+            longrepr = longrepr.getrepr(style=item.config.getoption(\"tbstyle\", \"auto\"))\n+\n         return cls(\n             item.nodeid,\n             item.location,\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/reports.py b/src/_pytest/reports.py\nindex 3292df7..8c71f5c 100644\n--- a/src/_pytest/reports.py\n+++ b/src/_pytest/reports.py\n@@ -185,6 +185,8 @@ class TestReport(BaseReport):\n                 longrepr = item._repr_failure_py(excinfo, style=item.config.getoption('tbstyle', 'auto'))\n         for rwhen, key, content in item._report_sections:\n             sections.append(('Captured {} {}'.format(key, rwhen), content))\n+        if isinstance(longrepr, ExceptionInfo):\n+            longrepr = longrepr.getrepr(style=item.config.getoption('tbstyle', 'auto'))\n         return cls(item.nodeid, item.location, keywords, outcome, longrepr, when, sections, duration, user_properties=item.user_properties)\n class CollectReport(BaseReport):\n     when = 'collect'\n", "normalized_occurrence": 1}
