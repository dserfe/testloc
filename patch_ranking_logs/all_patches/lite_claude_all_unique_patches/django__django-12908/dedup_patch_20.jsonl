{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..82bdf47 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -501,6 +501,18 @@ class SQLCompiler:\n                 if not getattr(features, 'supports_select_{}'.format(combinator)):\n                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))\n                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)\n+                # When DISTINCT ON is used with a combinator, wrap the combinator query in a subquery\n+                if self.query.distinct and distinct_fields:\n+                    wrapped_sql = ['SELECT']\n+                    distinct_result, distinct_params = self.connection.ops.distinct_sql(\n+                        distinct_fields,\n+                        distinct_params,\n+                    )\n+                    wrapped_sql.extend(distinct_result)\n+                    wrapped_sql.append('* FROM (')\n+                    wrapped_sql.extend(result)\n+                    wrapped_sql.append(') AS wrapped_q')\n+                    return wrapped_sql, params + distinct_params\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 # This must come after 'select', 'ordering', and 'distinct'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..49865ef 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -284,6 +284,14 @@ class SQLCompiler:\n                 if not getattr(features, 'supports_select_{}'.format(combinator)):\n                     raise NotSupportedError('{} is not supported on this database backend.'.format(combinator))\n                 result, params = self.get_combinator_sql(combinator, self.query.combinator_all)\n+                if self.query.distinct and distinct_fields:\n+                    wrapped_sql = ['SELECT']\n+                    distinct_result, distinct_params = self.connection.ops.distinct_sql(distinct_fields, distinct_params)\n+                    wrapped_sql.extend(distinct_result)\n+                    wrapped_sql.append('* FROM (')\n+                    wrapped_sql.extend(result)\n+                    wrapped_sql.append(') AS wrapped_q')\n+                    return (wrapped_sql, params + distinct_params)\n             else:\n                 distinct_fields, distinct_params = self.get_distinct()\n                 from_, f_params = self.get_from_clause()\n", "normalized_occurrence": 1}
