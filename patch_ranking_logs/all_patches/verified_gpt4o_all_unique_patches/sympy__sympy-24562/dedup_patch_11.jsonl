{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..5c7a122 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1603,11 +1603,21 @@ class Rational(Number):\n                     except (SympifyError, SyntaxError):\n                         pass  # error will raise below\n                 else:\n-                    if p.count('/') > 1:\n+                    try:\n+                        if p.count('/') > 1:\n+                            raise TypeError('invalid input: %s' % p)\n+                        p = p.replace(' ', '')\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            p = Rational(p)\n+                            q = Integer(q)\n+                        else:\n+                            # Handle decimal strings properly\n+                            if '.' in p:\n+                                return Rational(*_as_integer_ratio(float(p)))\n+                    except ValueError:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n                         p, q = pq\n                         fp = fractions.Fraction(p)\n                         fq = fractions.Fraction(q)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..8c8650f 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1389,11 +1389,19 @@ class Rational(Number):\n                     except (SympifyError, SyntaxError):\n                         pass\n                 else:\n-                    if p.count('/') > 1:\n+                    try:\n+                        if p.count('/') > 1:\n+                            raise TypeError('invalid input: %s' % p)\n+                        p = p.replace(' ', '')\n+                        pq = p.rsplit('/', 1)\n+                        if len(pq) == 2:\n+                            p, q = pq\n+                            p = Rational(p)\n+                            q = Integer(q)\n+                        elif '.' in p:\n+                            return Rational(*_as_integer_ratio(float(p)))\n+                    except ValueError:\n                         raise TypeError('invalid input: %s' % p)\n-                    p = p.replace(' ', '')\n-                    pq = p.rsplit('/', 1)\n-                    if len(pq) == 2:\n                         p, q = pq\n                         fp = fractions.Fraction(p)\n                         fq = fractions.Fraction(q)\n", "normalized_occurrence": 1}
