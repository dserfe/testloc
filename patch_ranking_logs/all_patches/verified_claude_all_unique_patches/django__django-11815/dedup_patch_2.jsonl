{"model_name_or_path": "agentless_claude", "instance_id": "django__django-11815", "model_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex 36f0ec3..3ce988a 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -115,6 +115,18 @@ class OperationWriter:\n         return '\\n'.join(self.buff)\n \n \n+class EnumSerializer(BaseSerializer):\n+    \"\"\"\n+    Serializer for Enum types that uses the enum member name instead of its value.\n+    \"\"\"\n+    def serialize(self):\n+        imports = {\"import enum\"}\n+        if hasattr(self.value, '_name_'):  # Check if it's an enum member\n+            enum_class = self.value.__class__\n+            enum_name = self.value._name_\n+            return \"%s['%s']\" % (enum_class.__name__, enum_name), imports\n+        return repr(self.value), imports\n+\n class MigrationWriter:\n     \"\"\"\n     Take a Migration instance and is able to produce the contents\n@@ -125,6 +137,8 @@ class MigrationWriter:\n         self.migration = migration\n         self.include_header = include_header\n         self.needs_manual_porting = False\n+        # Register the EnumSerializer for enum.Enum types\n+        self.register_serializer(enum.Enum, EnumSerializer)\n \n     def as_string(self):\n         \"\"\"Return a string of the file contents.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/writer.py b/django/db/migrations/writer.py\nindex acf3688..e5327a5 100644\n--- a/django/db/migrations/writer.py\n+++ b/django/db/migrations/writer.py\n@@ -91,11 +91,20 @@ class OperationWriter:\n         self.buff.append(' ' * (self.indentation * 4) + line)\n     def render(self):\n         return '\\n'.join(self.buff)\n+class EnumSerializer(BaseSerializer):\n+    def serialize(self):\n+        imports = {'import enum'}\n+        if hasattr(self.value, '_name_'):\n+            enum_class = self.value.__class__\n+            enum_name = self.value._name_\n+            return (\"%s['%s']\" % (enum_class.__name__, enum_name), imports)\n+        return (repr(self.value), imports)\n class MigrationWriter:\n     def __init__(self, migration, include_header=True):\n         self.migration = migration\n         self.include_header = include_header\n         self.needs_manual_porting = False\n+        self.register_serializer(enum.Enum, EnumSerializer)\n     def as_string(self):\n         items = {'replaces_str': '', 'initial_str': ''}\n         imports = set()\n", "normalized_occurrence": 1}
