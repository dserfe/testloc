{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-15976", "model_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 85af872..2064020 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -772,33 +772,57 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n             else:\n                 return s\n \n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n-\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n+        # First check if the symbol name contains numbers at the end\n+        import re\n+        match = re.match(r'([a-zA-Z]+)([0-9]+)$', sym.name)\n+        \n+        if match:\n+            # If we have a number suffix, treat it as a subscript\n+            base_name = match.group(1)\n+            number = match.group(2)\n+            \n+            base_name = translate(base_name)\n+            \n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(base_name))\n+            \n+            msub = self.dom.createElement('msub')\n+            msub.appendChild(mname)\n+            \n+            mnum = self.dom.createElement('mn')\n+            mnum.appendChild(self.dom.createTextNode(number))\n+            msub.appendChild(mnum)\n+            \n+            x.appendChild(msub)\n         else:\n-            if len(subs) == 0:\n-                msup = self.dom.createElement('msup')\n-                msup.appendChild(mname)\n-                msup.appendChild(join(supers))\n-                x.appendChild(msup)\n+            # Handle normal cases without number suffixes\n+            name, supers, subs = split_super_sub(sym.name)\n+            name = translate(name)\n+            supers = [translate(sup) for sup in supers]\n+            subs = [translate(sub) for sub in subs]\n+\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n+            if len(supers) == 0:\n+                if len(subs) == 0:\n+                    x.appendChild(self.dom.createTextNode(name))\n+                else:\n+                    msub = self.dom.createElement('msub')\n+                    msub.appendChild(mname)\n+                    msub.appendChild(join(subs))\n+                    x.appendChild(msub)\n             else:\n-                msubsup = self.dom.createElement('msubsup')\n-                msubsup.appendChild(mname)\n-                msubsup.appendChild(join(subs))\n-                msubsup.appendChild(join(supers))\n-                x.appendChild(msubsup)\n+                if len(subs) == 0:\n+                    msup = self.dom.createElement('msup')\n+                    msup.appendChild(mname)\n+                    msup.appendChild(join(supers))\n+                    x.appendChild(msup)\n+                else:\n+                    msubsup = self.dom.createElement('msubsup')\n+                    msubsup.appendChild(mname)\n+                    msubsup.appendChild(join(subs))\n+                    msubsup.appendChild(join(supers))\n+                    x.appendChild(msubsup)\n         return x\n \n     def _print_MatrixSymbol(self, sym):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py\nindex 28d3e1a..74d8495 100644\n--- a/sympy/printing/mathml.py\n+++ b/sympy/printing/mathml.py\n@@ -540,31 +540,46 @@ class MathMLPresentationPrinter(MathMLPrinterBase):\n                 return greek_unicode.get(s)\n             else:\n                 return s\n-        name, supers, subs = split_super_sub(sym.name)\n-        name = translate(name)\n-        supers = [translate(sup) for sup in supers]\n-        subs = [translate(sub) for sub in subs]\n-        mname = self.dom.createElement('mi')\n-        mname.appendChild(self.dom.createTextNode(name))\n-        if len(supers) == 0:\n-            if len(subs) == 0:\n-                x.appendChild(self.dom.createTextNode(name))\n-            else:\n-                msub = self.dom.createElement('msub')\n-                msub.appendChild(mname)\n-                msub.appendChild(join(subs))\n-                x.appendChild(msub)\n-        elif len(subs) == 0:\n-            msup = self.dom.createElement('msup')\n-            msup.appendChild(mname)\n-            msup.appendChild(join(supers))\n-            x.appendChild(msup)\n+        import re\n+        match = re.match('([a-zA-Z]+)([0-9]+)$', sym.name)\n+        if match:\n+            base_name = match.group(1)\n+            number = match.group(2)\n+            base_name = translate(base_name)\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(base_name))\n+            msub = self.dom.createElement('msub')\n+            msub.appendChild(mname)\n+            mnum = self.dom.createElement('mn')\n+            mnum.appendChild(self.dom.createTextNode(number))\n+            msub.appendChild(mnum)\n+            x.appendChild(msub)\n         else:\n-            msubsup = self.dom.createElement('msubsup')\n-            msubsup.appendChild(mname)\n-            msubsup.appendChild(join(subs))\n-            msubsup.appendChild(join(supers))\n-            x.appendChild(msubsup)\n+            name, supers, subs = split_super_sub(sym.name)\n+            name = translate(name)\n+            supers = [translate(sup) for sup in supers]\n+            subs = [translate(sub) for sub in subs]\n+            mname = self.dom.createElement('mi')\n+            mname.appendChild(self.dom.createTextNode(name))\n+            if len(supers) == 0:\n+                if len(subs) == 0:\n+                    x.appendChild(self.dom.createTextNode(name))\n+                else:\n+                    msub = self.dom.createElement('msub')\n+                    msub.appendChild(mname)\n+                    msub.appendChild(join(subs))\n+                    x.appendChild(msub)\n+            elif len(subs) == 0:\n+                msup = self.dom.createElement('msup')\n+                msup.appendChild(mname)\n+                msup.appendChild(join(supers))\n+                x.appendChild(msup)\n+            else:\n+                msubsup = self.dom.createElement('msubsup')\n+                msubsup.appendChild(mname)\n+                msubsup.appendChild(join(subs))\n+                msubsup.appendChild(join(supers))\n+                x.appendChild(msubsup)\n         return x\n     def _print_MatrixSymbol(self, sym):\n         return self._print_Symbol(sym, style=self._settings['mat_symbol_style'])\n", "normalized_occurrence": 1}
