{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-5221", "model_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 400ae0b..de2e9d3 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -620,7 +620,7 @@ class TerminalReporter(object):\n                 for rep in self.stats.get(\"failed\"):\n                     rep.toterminal(self._tw)\n \n-    def _printcollecteditems(self, items):\n+    def _printcollecteditems(self, items, fixtures):\n         # to print out items and their parent collectors\n         # we take care to leave out Instances aka ()\n         # because later versions are going to get rid of them anyway\n@@ -638,7 +638,12 @@ class TerminalReporter(object):\n             return\n         stack = []\n         indent = \"\"\n-        for item in items:\n+        for item in items:    \n+            if item.fixturenames:\n+                for name in item.fixturenames:\n+                    fixturedef = fixtures.getfixturedefs(name, item.nodeid)[0]\n+                    scope = fixturedef.scope                    \n+                    self._tw.line(f\"Fixture: {name}, Scope: {scope}\")\n             needed_collectors = item.listchain()[1:]  # strip root node\n             while stack:\n                 if stack == needed_collectors[: len(stack)]:\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/terminal.py b/src/_pytest/terminal.py\nindex 17fce8c..7d2ff6e 100644\n--- a/src/_pytest/terminal.py\n+++ b/src/_pytest/terminal.py\n@@ -396,7 +396,7 @@ class TerminalReporter(object):\n                 self._tw.sep('!', 'collection failures')\n                 for rep in self.stats.get('failed'):\n                     rep.toterminal(self._tw)\n-    def _printcollecteditems(self, items):\n+    def _printcollecteditems(self, items, fixtures):\n         if self.config.option.verbose < 0:\n             if self.config.option.verbose < -1:\n                 counts = {}\n@@ -412,6 +412,11 @@ class TerminalReporter(object):\n         stack = []\n         indent = ''\n         for item in items:\n+            if item.fixturenames:\n+                for name in item.fixturenames:\n+                    fixturedef = fixtures.getfixturedefs(name, item.nodeid)[0]\n+                    scope = fixturedef.scope\n+                    self._tw.line(f'Fixture: {name}, Scope: {scope}')\n             needed_collectors = item.listchain()[1:]\n             while stack:\n                 if stack == needed_collectors[:len(stack)]:\n", "normalized_occurrence": 1}
