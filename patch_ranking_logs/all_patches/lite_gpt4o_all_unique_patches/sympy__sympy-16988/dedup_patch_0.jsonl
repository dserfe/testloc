{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..01e972c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1260,7 +1260,7 @@ class Intersection(Set, LatticeOp):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n \n         # flatten inputs to merge intersections and iterables\n-        args = _sympify(args)\n+        args = list(set(_sympify(args)))\n \n         # Reduce sets using known rules\n         if evaluate:\n@@ -1321,6 +1321,7 @@ class Intersection(Set, LatticeOp):\n             binary=True)\n         if not fs_args:\n             return\n+        fs_args = list(set(fs_args))\n         fs_args.sort(key=len)\n         s = fs_args[0]\n         fs_args = fs_args[1:]\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..278892c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -473,7 +473,7 @@ class Intersection(Set, LatticeOp):\n         return S.EmptySet\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n-        args = _sympify(args)\n+        args = list(set(_sympify(args)))\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n             return simplify_intersection(args)\n@@ -520,6 +520,7 @@ class Intersection(Set, LatticeOp):\n         fs_args, other = sift(args, lambda x: x.is_FiniteSet, binary=True)\n         if not fs_args:\n             return\n+        fs_args = list(set(fs_args))\n         fs_args.sort(key=len)\n         s = fs_args[0]\n         fs_args = fs_args[1:]\n", "normalized_occurrence": 1}
