{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..bb5983f 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -144,6 +144,28 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n \n+def skip_module(msg: str = \"\") -> \"NoReturn\":\n+    \"\"\"Skip the rest of the current module.\n+\n+    This is a convenience function that should be used when you need to skip\n+    an entire module, particularly useful when the module contains syntax or\n+    imports that are only valid in certain Python versions.\n+\n+    Example::\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            skip_module(\"Requires Python >= 3.8\")\n+\n+        # The rest of the module will be skipped in Python < 3.8\n+        # Import statements with 3.8+ syntax can safely follow\n+\n+    This is equivalent to calling ``skip(msg, allow_module_level=True)``.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+\n+\n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n     \"\"\"Explicitly fail an executing test with the given message.\n", "occurrence": 1, "normalized_patch": "--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n+def skip_module(msg: str='') -> 'NoReturn':\n+    \"\"\"Skip the rest of the current module.\n+\n+    This is a convenience function that should be used when you need to skip\n+    an entire module, particularly useful when the module contains syntax or\n+    imports that are only valid in certain Python versions.\n+\n+    Example::\n+\n+        import sys\n+        if sys.version_info < (3, 8):\n+            skip_module(\"Requires Python >= 3.8\")\n+\n+        # The rest of the module will be skipped in Python < 3.8\n+        # Import statements with 3.8+ syntax can safely follow\n+\n+    This is equivalent to calling ``skip(msg, allow_module_level=True)``.\n+    \"\"\"\n+    __tracebackhide__ = True\n+    raise Skipped(msg=msg, allow_module_level=True)\n+", "normalized_occurrence": 1}
