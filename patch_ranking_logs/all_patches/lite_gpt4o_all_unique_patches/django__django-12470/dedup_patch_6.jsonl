{"model_name_or_path": "agentless", "instance_id": "django__django-12470", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 69e5965..316eb89 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -177,6 +177,10 @@ class Options:\n                     self.original_attrs[attr_name] = getattr(self, attr_name)\n \n             self.unique_together = normalize_together(self.unique_together)\n+            \n+            # Ensure parent model ordering is inherited\n+            if not self.ordering and hasattr(meta, 'ordering'):\n+                self.ordering = meta.ordering\n             self.index_together = normalize_together(self.index_together)\n             # App label/class name interpolation for names of constraints and\n             # indexes.\n@@ -858,4 +862,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 0edba5f..7e9bf29 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -110,6 +110,8 @@ class Options:\n                     setattr(self, attr_name, getattr(self.meta, attr_name))\n                     self.original_attrs[attr_name] = getattr(self, attr_name)\n             self.unique_together = normalize_together(self.unique_together)\n+            if not self.ordering and hasattr(meta, 'ordering'):\n+                self.ordering = meta.ordering\n             self.index_together = normalize_together(self.index_together)\n             if not getattr(cls._meta, 'abstract', False):\n                 for attr_name in {'constraints', 'indexes'}:\n", "normalized_occurrence": 1}
