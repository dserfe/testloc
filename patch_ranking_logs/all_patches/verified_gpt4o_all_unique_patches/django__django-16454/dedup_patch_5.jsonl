{"model_name_or_path": "agentless", "instance_id": "django__django-16454", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex f221176..2a77d69 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -56,6 +56,23 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers_action = None\n+\n+    def add_subparsers(self, **kwargs):\n+        self._subparsers_action = super().add_subparsers(**kwargs)\n+\n+        # Wrap the original add_parser method to pass down custom arguments\n+        add_parser_original = self._subparsers_action.add_parser\n+\n+        def add_parser_wrapper(name, **kwargs):\n+            if self.missing_args_message:\n+                kwargs.setdefault(\"missing_args_message\", self.missing_args_message)\n+            if self.called_from_command_line:\n+                kwargs.setdefault(\"called_from_command_line\", self.called_from_command_line)\n+            return add_parser_original(name, **kwargs)\n+\n+        self._subparsers_action.add_parser = add_parser_wrapper\n+        return self._subparsers_action\n \n     def parse_args(self, args=None, namespace=None):\n         # Catch missing argument for a better error message\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 14f4b26..019dcc1 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -20,6 +20,18 @@ class CommandParser(ArgumentParser):\n         self.missing_args_message = missing_args_message\n         self.called_from_command_line = called_from_command_line\n         super().__init__(**kwargs)\n+        self._subparsers_action = None\n+    def add_subparsers(self, **kwargs):\n+        self._subparsers_action = super().add_subparsers(**kwargs)\n+        add_parser_original = self._subparsers_action.add_parser\n+        def add_parser_wrapper(name, **kwargs):\n+            if self.missing_args_message:\n+                kwargs.setdefault('missing_args_message', self.missing_args_message)\n+            if self.called_from_command_line:\n+                kwargs.setdefault('called_from_command_line', self.called_from_command_line)\n+            return add_parser_original(name, **kwargs)\n+        self._subparsers_action.add_parser = add_parser_wrapper\n+        return self._subparsers_action\n     def parse_args(self, args=None, namespace=None):\n         if self.missing_args_message and (not (args or any((not arg.startswith('-') for arg in args)))):\n             self.error(self.missing_args_message)\n", "normalized_occurrence": 1}
