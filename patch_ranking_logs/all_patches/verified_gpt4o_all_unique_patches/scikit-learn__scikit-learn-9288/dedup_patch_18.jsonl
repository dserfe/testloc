{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-9288", "model_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex 915d041..8332ff9 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -391,6 +391,20 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++',\n         # Get results with the lowest inertia\n         labels, inertia, centers, n_iters = zip(*results)\n         best = np.argmin(inertia)\n+        # Ensure centers and labels are deterministic by using the same random seed\n+        random_state = check_random_state(random_state)\n+        best_labels, best_inertia, best_centers = None, None, None\n+        for i in range(n_init):\n+            labels, inertia, centers, n_iter_ = kmeans_single(\n+                X, sample_weight, n_clusters, max_iter=max_iter, init=init,\n+                verbose=verbose, precompute_distances=precompute_distances,\n+                tol=tol, x_squared_norms=x_squared_norms,\n+                random_state=random_state)\n+            if best_inertia is None or inertia < best_inertia:\n+                best_labels = labels.copy()\n+                best_centers = centers.copy()\n+                best_inertia = inertia\n+                best_n_iter = n_iter_\n         best_labels = labels[best]\n         best_inertia = inertia[best]\n         best_centers = centers[best]\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/cluster/k_means_.py b/sklearn/cluster/k_means_.py\nindex abcc315..eaf09d2 100644\n--- a/sklearn/cluster/k_means_.py\n+++ b/sklearn/cluster/k_means_.py\n@@ -119,6 +119,15 @@ def k_means(X, n_clusters, sample_weight=None, init='k-means++', precompute_dist\n         results = Parallel(n_jobs=n_jobs, verbose=0)((delayed(kmeans_single)(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, tol=tol, precompute_distances=precompute_distances, x_squared_norms=x_squared_norms, random_state=seed) for seed in seeds))\n         labels, inertia, centers, n_iters = zip(*results)\n         best = np.argmin(inertia)\n+        random_state = check_random_state(random_state)\n+        best_labels, best_inertia, best_centers = (None, None, None)\n+        for i in range(n_init):\n+            labels, inertia, centers, n_iter_ = kmeans_single(X, sample_weight, n_clusters, max_iter=max_iter, init=init, verbose=verbose, precompute_distances=precompute_distances, tol=tol, x_squared_norms=x_squared_norms, random_state=random_state)\n+            if best_inertia is None or inertia < best_inertia:\n+                best_labels = labels.copy()\n+                best_centers = centers.copy()\n+                best_inertia = inertia\n+                best_n_iter = n_iter_\n         best_labels = labels[best]\n         best_inertia = inertia[best]\n         best_centers = centers[best]\n", "normalized_occurrence": 1}
