{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13877", "model_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex 3216a40..cded08d 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -166,13 +166,15 @@ class MatrixDeterminant(MatrixCommon):\n         \"\"\"Compute matrix determinant using Bareiss' fraction-free\n         algorithm which is an extension of the well known Gaussian\n         elimination method. This approach is best suited for dense\n-        symbolic matrices and will result in a determinant with\n-        minimal number of fractions. It means that less term\n-        rewriting is needed on resulting formulae.\n+        numeric matrices. For matrices with symbolic entries, the\n+        Berkowitz algorithm is used instead.\n \n         TODO: Implement algorithm for sparse matrices (SFF),\n         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.\n         \"\"\"\n+        # Check if matrix contains symbolic entries\n+        if any(not i.is_number for i in self):\n+            return self._eval_det_berkowitz()\n \n         # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead\n         def _find_pivot(l):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py\nindex be48f5f..63d52d4 100644\n--- a/sympy/matrices/matrices.py\n+++ b/sympy/matrices/matrices.py\n@@ -63,6 +63,8 @@ class MatrixDeterminant(MatrixCommon):\n         submat, toeplitz = self._eval_berkowitz_toeplitz_matrix()\n         return toeplitz * submat._eval_berkowitz_vector()\n     def _eval_det_bareiss(self):\n+        if any((not i.is_number for i in self)):\n+            return self._eval_det_berkowitz()\n         def _find_pivot(l):\n             for pos, val in enumerate(l):\n                 if val:\n", "normalized_occurrence": 4}
