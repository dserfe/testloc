{"model_name_or_path": "agentless", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex e895f59..513ecea 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1286,7 +1286,17 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        results = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if returning_fields:\n+            converters = [\n+                (field, field.from_db_value)\n+                for field in returning_fields\n+                if hasattr(field, 'from_db_value')\n+            ]\n+            for result in results:\n+                for field, converter in converters:\n+                    result[field.attname] = converter(result[field.attname], None, connection)\n+        return results\n     _insert.alters_data = True\n     _insert.queryset_only = False\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 371b7bd..f79fc46 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -773,7 +773,13 @@ class QuerySet:\n             using = self.db\n         query = sql.InsertQuery(self.model, ignore_conflicts=ignore_conflicts)\n         query.insert_values(fields, objs, raw=raw)\n-        return query.get_compiler(using=using).execute_sql(returning_fields)\n+        results = query.get_compiler(using=using).execute_sql(returning_fields)\n+        if returning_fields:\n+            converters = [(field, field.from_db_value) for field in returning_fields if hasattr(field, 'from_db_value')]\n+            for result in results:\n+                for field, converter in converters:\n+                    result[field.attname] = converter(result[field.attname], None, connection)\n+        return results\n     _insert.alters_data = True\n     _insert.queryset_only = False\n     def _batched_insert(self, objs, fields, batch_size, ignore_conflicts=False):\n", "normalized_occurrence": 1}
