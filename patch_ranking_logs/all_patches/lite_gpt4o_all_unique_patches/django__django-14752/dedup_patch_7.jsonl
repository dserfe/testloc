{"model_name_or_path": "agentless", "instance_id": "django__django-14752", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex cbda0a6..43691ea 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,8 +26,7 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n@@ -38,6 +37,12 @@ class AutocompleteJsonView(BaseListView):\n \n     def get_queryset(self):\n         \"\"\"Return queryset based on ModelAdmin.get_search_results().\"\"\"\n+\n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Convert the object to a dictionary representation for the JSON response.\n+        \"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         qs = self.model_admin.get_queryset(self.request)\n         qs = qs.complex_filter(self.source_field.get_limit_choices_to())\n         qs, search_use_distinct = self.model_admin.get_search_results(self.request, qs, self.term)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 62aa579..6409b4c 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -21,7 +21,7 @@ class AutocompleteJsonView(BaseListView):\n             raise PermissionDenied\n         self.object_list = self.get_queryset()\n         context = self.get_context_data()\n-        return JsonResponse({'results': [{'id': str(getattr(obj, to_field_name)), 'text': str(obj)} for obj in context['object_list']], 'pagination': {'more': context['page_obj'].has_next()}})\n+        return JsonResponse({'results': [self.serialize_result(obj, to_field_name) for obj in context['object_list']], 'pagination': {'more': context['page_obj'].has_next()}})\n \n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n@@ -29,6 +29,12 @@ class AutocompleteJsonView(BaseListView):\n \n     def get_queryset(self):\n         \"\"\"Return queryset based on ModelAdmin.get_search_results().\"\"\"\n+\n+    def serialize_result(self, obj, to_field_name):\n+        \"\"\"\n+        Convert the object to a dictionary representation for the JSON response.\n+        \"\"\"\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n         qs = self.model_admin.get_queryset(self.request)\n         qs = qs.complex_filter(self.source_field.get_limit_choices_to())\n         qs, search_use_distinct = self.model_admin.get_search_results(self.request, qs, self.term)\n", "normalized_occurrence": 1}
