{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..d93a56b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -507,6 +507,10 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # dtype to the function converts complex to real dtype,\n         # thereby passing the test made in the lines following the scope\n         # of warnings context manager.\n+        # Get dtype for pandas DataFrame or Series\n+        if hasattr(array, 'dtype') and array.dtype is not None:\n+            dtype_orig = array.dtype\n+        \n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..3fd38ca 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,6 +152,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if hasattr(array, 'dtype') and array.dtype is not None:\n+            dtype_orig = array.dtype\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n", "normalized_occurrence": 1}
