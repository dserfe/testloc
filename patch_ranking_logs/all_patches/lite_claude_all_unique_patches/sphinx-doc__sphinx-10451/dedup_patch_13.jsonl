{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10451", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex c6bab1b..7cecaf3 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -115,6 +115,21 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n         if name == 'return':\n             continue\n \n+        # Skip if we already have both param and type for *args and **kwargs\n+        if name in ('args', 'kwargs'):\n+            has_param = False\n+            has_type = False\n+            for field in fields:\n+                field_name = field[0].astext()\n+                if field_name.startswith('param') and (\n+                    f'*{name}' in field_name if name == 'args' else f'**{name}' in field_name\n+                ):\n+                    has_param = True\n+                elif field_name.startswith('type') and name in field_name:\n+                    has_type = True\n+            if has_param and has_type:\n+                continue\n+\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n@@ -123,7 +138,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str],\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            param_name = name\n+            if name == 'args':\n+                param_name = '*' + name\n+            elif name == 'kwargs':\n+                param_name = '**' + name\n+            field += nodes.field_name('', 'param ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5da2ea8..1a3d8b0 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -85,6 +85,17 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n     for name, annotation in annotations.items():\n         if name == 'return':\n             continue\n+        if name in ('args', 'kwargs'):\n+            has_param = False\n+            has_type = False\n+            for field in fields:\n+                field_name = field[0].astext()\n+                if field_name.startswith('param') and (f'*{name}' in field_name if name == 'args' else f'**{name}' in field_name):\n+                    has_param = True\n+                elif field_name.startswith('type') and name in field_name:\n+                    has_type = True\n+            if has_param and has_type:\n+                continue\n         arg = arguments.get(name, {})\n         if not arg.get('type'):\n             field = nodes.field()\n@@ -93,7 +104,12 @@ def modify_field_list(node: nodes.field_list, annotations: Dict[str, str], suppr\n             node += field\n         if not arg.get('param'):\n             field = nodes.field()\n-            field += nodes.field_name('', 'param ' + name)\n+            param_name = name\n+            if name == 'args':\n+                param_name = '*' + name\n+            elif name == 'kwargs':\n+                param_name = '**' + name\n+            field += nodes.field_name('', 'param ' + param_name)\n             field += nodes.field_body('', nodes.paragraph('', ''))\n             node += field\n     if 'return' in annotations and 'return' not in arguments:\n", "normalized_occurrence": 1}
