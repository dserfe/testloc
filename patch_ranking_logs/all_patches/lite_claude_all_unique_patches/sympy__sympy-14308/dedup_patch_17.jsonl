{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14308", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 81d644a..7093cd6 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -916,52 +916,19 @@ class PrettyPrinter(Printer):\n                 #For a general expr\n                 else:\n                     #We always wrap the measure numbers in\n-                    #parentheses\n-                    arg_str = self._print(\n-                        v).parens()[0]\n-\n-                    o1.append(arg_str + ' ' + k._pretty_form)\n+                    #parentheses, except if they are already parenthesized\n+                    arg_pform = self._print(v)\n+                    if not arg_pform.binding:\n+                        arg_pform = prettyForm(*arg_pform.parens())\n+                    o1.append(prettyForm(*arg_pform.right(' ' + k._pretty_form)))\n                 vectstrs.append(k._pretty_form)\n \n-        #outstr = u(\"\").join(o1)\n-        if o1[0].startswith(u\" + \"):\n-            o1[0] = o1[0][3:]\n-        elif o1[0].startswith(\" \"):\n-            o1[0] = o1[0][1:]\n-        #Fixing the newlines\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            # XXX: What is this hack?\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\\N{RIGHT PARENTHESIS UPPER HOOK}',\n-                                          u'\\N{RIGHT PARENTHESIS UPPER HOOK}'\n-                                          + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j+1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' '*(lengths[-1] -\n-                                                   len(parts[j])+\n-                                                   3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) +\n-                                           3*(len(lengths)-1)))\n-                    strs[j] += ' '*(lengths[-1]+3)\n+        # Combine terms with proper alignment\n+        result = o1[0]\n+        for i in range(1, len(o1)):\n+            result = prettyForm(*result.right(' + ' + o1[i]))\n \n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+        return result\n \n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 35c3eb3..a2be832 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -660,38 +660,15 @@ class PrettyPrinter(Printer):\n                 elif v == -1:\n                     o1.append(u'(-1) ' + k._pretty_form)\n                 else:\n-                    arg_str = self._print(v).parens()[0]\n-                    o1.append(arg_str + ' ' + k._pretty_form)\n+                    arg_pform = self._print(v)\n+                    if not arg_pform.binding:\n+                        arg_pform = prettyForm(*arg_pform.parens())\n+                    o1.append(prettyForm(*arg_pform.right(' ' + k._pretty_form)))\n                 vectstrs.append(k._pretty_form)\n-        if o1[0].startswith(u' + '):\n-            o1[0] = o1[0][3:]\n-        elif o1[0].startswith(' '):\n-            o1[0] = o1[0][1:]\n-        lengths = []\n-        strs = ['']\n-        for i, partstr in enumerate(o1):\n-            if '\\n' in partstr:\n-                tempstr = partstr\n-                tempstr = tempstr.replace(vectstrs[i], '')\n-                tempstr = tempstr.replace(u'\u239e', u'\u239e' + ' ' + vectstrs[i])\n-                o1[i] = tempstr\n-        o1 = [x.split('\\n') for x in o1]\n-        n_newlines = max([len(x) for x in o1])\n-        for parts in o1:\n-            lengths.append(len(parts[0]))\n-            for j in range(n_newlines):\n-                if j + 1 <= len(parts):\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    if j == 0:\n-                        strs[0] += parts[0] + ' + '\n-                    else:\n-                        strs[j] += parts[j] + ' ' * (lengths[-1] - len(parts[j]) + 3)\n-                else:\n-                    if j >= len(strs):\n-                        strs.append(' ' * (sum(lengths[:-1]) + 3 * (len(lengths) - 1)))\n-                    strs[j] += ' ' * (lengths[-1] + 3)\n-        return prettyForm(u'\\n'.join([s[:-3] for s in strs]))\n+        result = o1[0]\n+        for i in range(1, len(o1)):\n+            result = prettyForm(*result.right(' + ' + o1[i]))\n+        return result\n     def _print_NDimArray(self, expr):\n         from sympy import ImmutableMatrix\n         if expr.rank() == 0:\n", "normalized_occurrence": 1}
