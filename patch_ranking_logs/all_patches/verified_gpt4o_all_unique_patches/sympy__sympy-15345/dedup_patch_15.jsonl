{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-15345", "model_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 7ecda40..94ad044 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -31,6 +31,7 @@ known_functions = {\n     \"asech\": [(lambda x: True, \"ArcSech\")],\n     \"acsch\": [(lambda x: True, \"ArcCsch\")],\n     \"conjugate\": [(lambda x: True, \"Conjugate\")],\n+    \"Max\": [(lambda x: True, \"Max\")],\n \n }\n \n@@ -99,6 +100,9 @@ class MCodePrinter(CodePrinter):\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n                     return \"%s[%s]\" % (mfunc, self.stringify(expr.args, \", \"))\n+        # Special handling for Max\n+        if expr.func.__name__ == \"Max\":\n+            return \"Max[%s]\" % self.stringify(expr.args, \", \")\n         return expr.func.__name__ + \"[%s]\" % self.stringify(expr.args, \", \")\n \n     def _print_Integral(self, expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py\nindex 7dcf2f7..2d926c7 100644\n--- a/sympy/printing/mathematica.py\n+++ b/sympy/printing/mathematica.py\n@@ -2,7 +2,7 @@ from __future__ import print_function, division\n from sympy.printing.codeprinter import CodePrinter\n from sympy.printing.str import StrPrinter\n from sympy.printing.precedence import precedence\n-known_functions = {'exp': [(lambda x: True, 'Exp')], 'log': [(lambda x: True, 'Log')], 'sin': [(lambda x: True, 'Sin')], 'cos': [(lambda x: True, 'Cos')], 'tan': [(lambda x: True, 'Tan')], 'cot': [(lambda x: True, 'Cot')], 'asin': [(lambda x: True, 'ArcSin')], 'acos': [(lambda x: True, 'ArcCos')], 'atan': [(lambda x: True, 'ArcTan')], 'sinh': [(lambda x: True, 'Sinh')], 'cosh': [(lambda x: True, 'Cosh')], 'tanh': [(lambda x: True, 'Tanh')], 'coth': [(lambda x: True, 'Coth')], 'sech': [(lambda x: True, 'Sech')], 'csch': [(lambda x: True, 'Csch')], 'asinh': [(lambda x: True, 'ArcSinh')], 'acosh': [(lambda x: True, 'ArcCosh')], 'atanh': [(lambda x: True, 'ArcTanh')], 'acoth': [(lambda x: True, 'ArcCoth')], 'asech': [(lambda x: True, 'ArcSech')], 'acsch': [(lambda x: True, 'ArcCsch')], 'conjugate': [(lambda x: True, 'Conjugate')]}\n+known_functions = {'exp': [(lambda x: True, 'Exp')], 'log': [(lambda x: True, 'Log')], 'sin': [(lambda x: True, 'Sin')], 'cos': [(lambda x: True, 'Cos')], 'tan': [(lambda x: True, 'Tan')], 'cot': [(lambda x: True, 'Cot')], 'asin': [(lambda x: True, 'ArcSin')], 'acos': [(lambda x: True, 'ArcCos')], 'atan': [(lambda x: True, 'ArcTan')], 'sinh': [(lambda x: True, 'Sinh')], 'cosh': [(lambda x: True, 'Cosh')], 'tanh': [(lambda x: True, 'Tanh')], 'coth': [(lambda x: True, 'Coth')], 'sech': [(lambda x: True, 'Sech')], 'csch': [(lambda x: True, 'Csch')], 'asinh': [(lambda x: True, 'ArcSinh')], 'acosh': [(lambda x: True, 'ArcCosh')], 'atanh': [(lambda x: True, 'ArcTanh')], 'acoth': [(lambda x: True, 'ArcCoth')], 'asech': [(lambda x: True, 'ArcSech')], 'acsch': [(lambda x: True, 'ArcCsch')], 'conjugate': [(lambda x: True, 'Conjugate')], 'Max': [(lambda x: True, 'Max')]}\n class MCodePrinter(CodePrinter):\n     printmethod = '_mcode'\n     _default_settings = {'order': None, 'full_prec': 'auto', 'precision': 15, 'user_functions': {}, 'human': True, 'allow_unknown_functions': False}\n@@ -44,6 +44,8 @@ class MCodePrinter(CodePrinter):\n             for cond, mfunc in cond_mfunc:\n                 if cond(*expr.args):\n                     return '%s[%s]' % (mfunc, self.stringify(expr.args, ', '))\n+        if expr.func.__name__ == 'Max':\n+            return 'Max[%s]' % self.stringify(expr.args, ', ')\n         return expr.func.__name__ + '[%s]' % self.stringify(expr.args, ', ')\n     def _print_Integral(self, expr):\n         if len(expr.variables) == 1 and (not expr.limits[0][1:]):\n", "normalized_occurrence": 1}
