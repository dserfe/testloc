{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..437f701 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -307,7 +307,7 @@ def _get_non_gfk_field(opts, name):\n     return field\n \n \n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, field_is_readonly=False):\n     \"\"\"\n     Return a sensible label for a field name. The name can be a callable,\n     property (but not created with @property decorator), or the name of an\n@@ -316,6 +316,10 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n     None if (and only if) the name refers to a field.\n     \"\"\"\n     attr = None\n+\n+    # Check if the field is a ReadOnlyPasswordHashWidget\n+    if field_is_readonly:\n+        return pretty_name(name)\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n         try:\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..ff8ae4c 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -178,8 +178,10 @@ def _get_non_gfk_field(opts, name):\n     if field.is_relation and (not field.many_to_many) and hasattr(field, 'attname') and (field.attname == name):\n         raise FieldIsAForeignKeyColumnName()\n     return field\n-def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n+def label_for_field(name, model, model_admin=None, return_attr=False, form=None, field_is_readonly=False):\n     attr = None\n+    if field_is_readonly:\n+        return pretty_name(name)\n     try:\n         field = _get_non_gfk_field(model._meta, name)\n         try:\n", "normalized_occurrence": 1}
