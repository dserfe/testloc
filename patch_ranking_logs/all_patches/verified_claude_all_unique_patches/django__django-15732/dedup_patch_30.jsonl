{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15732", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 42e02c2..a05262d 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -606,6 +606,28 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):\n     def __init__(self, name, unique_together):\n         super().__init__(name, unique_together)\n \n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            # Get the old and new unique_together values\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            \n+            # Filter out single-field unique constraints that might conflict with existing unique fields\n+            old_value = {\n+                tuple(name for name in item)\n+                for item in old_value\n+                if len(item) > 1 or not new_model._meta.get_field(item[0]).unique\n+            }\n+            new_value = {\n+                tuple(name for name in item)\n+                for item in new_value\n+                if len(item) > 1 or not new_model._meta.get_field(item[0]).unique\n+            }\n+            \n+            schema_editor.alter_unique_together(new_model, old_value, new_value)\n+\n \n class AlterIndexTogether(AlterTogetherOptionOperation):\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n+    def database_forwards(self, app_label, schema_editor, from_state, to_state):\n+        new_model = to_state.apps.get_model(app_label, self.name)\n+        if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n+            old_model = from_state.apps.get_model(app_label, self.name)\n+            old_value = getattr(old_model._meta, self.option_name, set())\n+            new_value = getattr(new_model._meta, self.option_name, set())\n+            old_value = {tuple((name for name in item)) for item in old_value if len(item) > 1 or not new_model._meta.get_field(item[0]).unique}\n+            new_value = {tuple((name for name in item)) for item in new_value if len(item) > 1 or not new_model._meta.get_field(item[0]).unique}\n+            schema_editor.alter_unique_together(new_model, old_value, new_value)", "normalized_occurrence": 1}
