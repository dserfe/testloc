{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13895", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 53e26ca..8b0c2f3 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -204,6 +204,9 @@ class Pow(Expr):\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+            elif _coeff_isneg(b) and not e.is_integer:\n+                # Don't simplify powers of negative numbers with non-integer exponents\n+                return None\n             if S.NaN in (b, e):  # XXX S.NaN**x -> S.NaN under assumption that x != 0\n                 return S.NaN\n             elif b is S.One:\n@@ -1581,4 +1584,4 @@ class Pow(Expr):\n from .add import Add\n from .numbers import Integer\n from .mul import Mul, _keep_coeff\n-from .symbol import Symbol, Dummy, symbols\n+from .symbol import Symbol, Dummy, symbols\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 7698f23..c5a4998 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -77,6 +77,8 @@ class Pow(Expr):\n                     b = -b\n                 elif e.is_odd:\n                     return -Pow(-b, e)\n+            elif _coeff_isneg(b) and (not e.is_integer):\n+                return None\n             if S.NaN in (b, e):\n                 return S.NaN\n             elif b is S.One:\n", "normalized_occurrence": 1}
