{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8621", "model_patch": "diff --git a/sphinx/roles.py b/sphinx/roles.py\nindex 307975f..c48979f 100644\n--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n@@ -35,7 +35,7 @@ if False:\n generic_docroles = {\n     'command': addnodes.literal_strong,\n     'dfn': nodes.emphasis,\n-    'kbd': nodes.literal,\n+    'kbd': addnodes.literal,\n     'mailheader': addnodes.literal_emphasis,\n     'makevar': addnodes.literal_strong,\n     'manpage': addnodes.manpage,\n@@ -46,6 +46,31 @@ generic_docroles = {\n }\n \n \n+def process_kbd(text):\n+    # Split the text on compound-key separators, but keep the separators in the result\n+    parts = re.split(r'([+\\-^])', text)\n+    # Filter out empty parts and wrap each part in <kbd> tags\n+    kbd_parts = [f\"<kbd>{part}</kbd>\" if part not in '+-^' else part for part in parts if part]\n+    return ''.join(kbd_parts)\n+\n+\n+class KbdRole:\n+    def __init__(self, rawtext, text, lineno, inliner, options={}, content=[]):\n+        self.rawtext = rawtext\n+        self.text = text\n+        self.lineno = lineno\n+        self.inliner = inliner\n+        self.options = options\n+        self.content = content\n+\n+    def run(self):\n+        processed_text = process_kbd(self.text)\n+        node = nodes.raw('', processed_text, format='html')\n+        return [node], []\n+\n+roles.register_local_role('kbd', KbdRole)\n+\n+\n # -- generic cross-reference role ----------------------------------------------\n \n class XRefRole(ReferenceRole):\n", "occurrence": 1, "normalized_patch": "--- a/sphinx/roles.py\n+++ b/sphinx/roles.py\n-generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': nodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+generic_docroles = {'command': addnodes.literal_strong, 'dfn': nodes.emphasis, 'kbd': addnodes.literal, 'mailheader': addnodes.literal_emphasis, 'makevar': addnodes.literal_strong, 'manpage': addnodes.manpage, 'mimetype': addnodes.literal_emphasis, 'newsgroup': addnodes.literal_emphasis, 'program': addnodes.literal_strong, 'regexp': nodes.literal}\n+def process_kbd(text):\n+    parts = re.split('([+\\\\-^])', text)\n+    kbd_parts = [f'<kbd>{part}</kbd>' if part not in '+-^' else part for part in parts if part]\n+    return ''.join(kbd_parts)\n+class KbdRole:\n+    def __init__(self, rawtext, text, lineno, inliner, options={}, content=[]):\n+        self.rawtext = rawtext\n+        self.text = text\n+        self.lineno = lineno\n+        self.inliner = inliner\n+        self.options = options\n+        self.content = content\n+    def run(self):\n+        processed_text = process_kbd(self.text)\n+        node = nodes.raw('', processed_text, format='html')\n+        return ([node], [])\n+roles.register_local_role('kbd', KbdRole)", "normalized_occurrence": 1}
