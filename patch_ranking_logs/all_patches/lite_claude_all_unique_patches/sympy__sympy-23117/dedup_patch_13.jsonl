{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-23117", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 76cf2dd..fbbe843 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -193,6 +193,10 @@ class NDimArray(Printable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n+            \n+            # Handle empty iterable case\n+            if not pointer:\n+                return [], (0,)\n \n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex b843491..97515bb 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -70,6 +70,8 @@ class NDimArray(Printable):\n         def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return ([pointer], ())\n+            if not pointer:\n+                return ([], (0,))\n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n", "normalized_occurrence": 14}
