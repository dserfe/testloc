{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-22456", "model_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 7a7d795..1e82d3b 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -246,7 +246,7 @@ class Token(CodegenAST):\n             val for attr, val in zip(cls.__slots__, attrvals)\n             if attr not in cls.not_in_args\n         ]\n-        obj = CodegenAST.__new__(cls, *basic_args)\n+        obj = CodegenAST.__new__(cls, *(basic_args + [kwargs.get('text', None)]))\n \n         # Set attributes\n         for attr, arg in zip(cls.__slots__, attrvals):\n@@ -895,7 +895,7 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n+    # Ensure 'text' is passed as an argument to maintain argument invariance\n     is_Atom = True\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/codegen/ast.py b/sympy/codegen/ast.py\nindex 41490eb..e33c767 100644\n--- a/sympy/codegen/ast.py\n+++ b/sympy/codegen/ast.py\n@@ -219,7 +219,7 @@ class Token(CodegenAST):\n         if kwargs:\n             raise ValueError('Unknown keyword arguments: %s' % ' '.join(kwargs))\n         basic_args = [val for attr, val in zip(cls.__slots__, attrvals) if attr not in cls.not_in_args]\n-        obj = CodegenAST.__new__(cls, *basic_args)\n+        obj = CodegenAST.__new__(cls, *basic_args + [kwargs.get('text', None)])\n         for attr, arg in zip(cls.__slots__, attrvals):\n             setattr(obj, attr, arg)\n         return obj\n@@ -774,7 +774,6 @@ class String(Token):\n \n     \"\"\"\n     __slots__ = ('text',)\n-    not_in_args = ['text']\n     is_Atom = True\n \n     @classmethod\n", "normalized_occurrence": 1}
