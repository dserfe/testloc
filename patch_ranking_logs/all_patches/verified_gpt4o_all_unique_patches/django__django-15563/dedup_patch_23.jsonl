{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..91976a7 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -988,6 +988,12 @@ class QuerySet:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n+        # Ensure the update targets the correct model in the case of multi-table inheritance\n+        if self.model._meta.parents:\n+            for parent in self.model._meta.get_parent_list():\n+                if parent in self.query.model._meta.get_parent_list():\n+                    continue\n+                kwargs.update({f.attname: getattr(self.query.model, f.attname) for f in parent._meta.local_fields})\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..8e02710 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -533,6 +533,11 @@ class QuerySet:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n         query = self.query.chain(sql.UpdateQuery)\n+        if self.model._meta.parents:\n+            for parent in self.model._meta.get_parent_list():\n+                if parent in self.query.model._meta.get_parent_list():\n+                    continue\n+                kwargs.update({f.attname: getattr(self.query.model, f.attname) for f in parent._meta.local_fields})\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "normalized_occurrence": 1}
