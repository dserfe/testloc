{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex f9408ce..5b9e66e 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -209,9 +209,10 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable,\n         try:\n             value = attrgetter(subject, name)\n             directly_defined = name in obj_dict\n+            namespace = '.'.join(objpath + [name])\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                members[name] = Attribute(namespace + '.' + name, directly_defined, value)\n         except AttributeError:\n             continue\n \n@@ -308,4 +309,4 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n     except AttributeError:\n         pass\n \n-    return members\n+    return members\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex bf1ee33..a6c7851 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -136,9 +136,10 @@ def get_object_members(subject: Any, objpath: List[str], attrgetter: Callable, a\n         try:\n             value = attrgetter(subject, name)\n             directly_defined = name in obj_dict\n+            namespace = '.'.join(objpath + [name])\n             name = unmangle(subject, name)\n             if name and name not in members:\n-                members[name] = Attribute(name, directly_defined, value)\n+                members[name] = Attribute(namespace + '.' + name, directly_defined, value)\n         except AttributeError:\n             continue\n     for i, cls in enumerate(getmro(subject)):\n", "normalized_occurrence": 1}
