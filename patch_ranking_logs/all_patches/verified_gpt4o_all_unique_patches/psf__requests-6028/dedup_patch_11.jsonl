{"model_name_or_path": "agentless", "instance_id": "psf__requests-6028", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex d47134b..c903ffb 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -417,6 +417,14 @@ class HTTPAdapter(BaseAdapter):\n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        if proxies and 'http' in proxies:\n+            proxy = proxies['http']\n+            proxy_headers = self.proxy_headers(proxy)\n+            request.headers.update(proxy_headers)\n+        if proxies and 'https' in proxies:\n+            proxy = proxies['https']\n+            proxy_headers = self.proxy_headers(proxy)\n+            request.headers.update(proxy_headers)\n \n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n \n@@ -535,4 +543,4 @@ class HTTPAdapter(BaseAdapter):\n             else:\n                 raise\n \n-        return self.build_response(request, resp)\n+        return self.build_response(request, resp)\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 8bf110e..d612e4e 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -167,6 +167,14 @@ class HTTPAdapter(BaseAdapter):\n         self.cert_verify(conn, request.url, verify, cert)\n         url = self.request_url(request, proxies)\n         self.add_headers(request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies)\n+        if proxies and 'http' in proxies:\n+            proxy = proxies['http']\n+            proxy_headers = self.proxy_headers(proxy)\n+            request.headers.update(proxy_headers)\n+        if proxies and 'https' in proxies:\n+            proxy = proxies['https']\n+            proxy_headers = self.proxy_headers(proxy)\n+            request.headers.update(proxy_headers)\n         chunked = not (request.body is None or 'Content-Length' in request.headers)\n         if isinstance(timeout, tuple):\n             try:\n", "normalized_occurrence": 1}
