{"model_name_or_path": "agentless", "instance_id": "django__django-14730", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex d685b12..e832abe 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1185,6 +1185,11 @@ class ManyToManyField(RelatedField):\n                 'Cannot specify a db_table if an intermediary model is used.'\n             )\n \n+        if symmetrical and related_name is not None:\n+            raise ValueError(\n+                'Cannot specify a related_name if the relationship is symmetrical.'\n+            )\n+\n         kwargs['rel'] = self.rel_class(\n             self, to,\n             related_name=related_name,\n", "occurrence": 2, "normalized_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 6fd437b..0717ba9 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -529,6 +529,8 @@ class ManyToManyField(RelatedField):\n             symmetrical = to == RECURSIVE_RELATIONSHIP_CONSTANT\n         if through is not None and db_table is not None:\n             raise ValueError('Cannot specify a db_table if an intermediary model is used.')\n+        if symmetrical and related_name is not None:\n+            raise ValueError('Cannot specify a related_name if the relationship is symmetrical.')\n         kwargs['rel'] = self.rel_class(self, to, related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, symmetrical=symmetrical, through=through, through_fields=through_fields, db_constraint=db_constraint)\n         self.has_null_arg = 'null' in kwargs\n         super().__init__(related_name=related_name, related_query_name=related_query_name, limit_choices_to=limit_choices_to, **kwargs)\n", "normalized_occurrence": 3}
