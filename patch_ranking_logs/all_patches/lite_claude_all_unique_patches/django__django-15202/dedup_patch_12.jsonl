{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..4b4d2f2 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -139,7 +139,10 @@ class URLValidator(RegexValidator):\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n         # one byte for the length of the name and one byte for the trailing dot\n         # that's used to indicate absolute names in DNS.\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..4d6fa8e 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -86,7 +86,10 @@ class URLValidator(RegexValidator):\n                     validate_ipv6_address(potential_ip)\n                 except ValidationError:\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n-        if len(urlsplit(value).hostname) > 253:\n+        try:\n+            if len(urlsplit(value).hostname) > 253:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+        except ValueError:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n def validate_integer(value):\n", "normalized_occurrence": 1}
