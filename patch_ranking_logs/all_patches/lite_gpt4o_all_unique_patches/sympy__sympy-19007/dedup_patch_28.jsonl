{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-19007", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 0612235..c46c28a 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -233,18 +233,23 @@ class BlockMatrix(MatrixExpr):\n         return self._eval_transpose()\n \n     def _entry(self, i, j, **kwargs):\n+        from sympy import Integer\n         # Find row entry\n+        current_row = Integer(0)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            current_row_end = current_row + numrows\n+            if current_row <= i < current_row_end:\n+                i = i - current_row\n                 break\n-            else:\n-                i -= numrows\n+            current_row = current_row_end\n+        current_col = Integer(0)\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            current_col_end = current_col + numcols\n+            if current_col <= j < current_col_end:\n+                j = j - current_col\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            current_col = current_col_end\n+        return self.blocks[row_block, col_block]._entry(i, j, **kwargs)\n \n     @property\n     def is_Identity(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 4517bd0..39a3b04 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -103,17 +103,22 @@ class BlockMatrix(MatrixExpr):\n     def transpose(self):\n         return self._eval_transpose()\n     def _entry(self, i, j, **kwargs):\n+        from sympy import Integer\n+        current_row = Integer(0)\n         for row_block, numrows in enumerate(self.rowblocksizes):\n-            if (i < numrows) != False:\n+            current_row_end = current_row + numrows\n+            if current_row <= i < current_row_end:\n+                i = i - current_row\n                 break\n-            else:\n-                i -= numrows\n+            current_row = current_row_end\n+        current_col = Integer(0)\n         for col_block, numcols in enumerate(self.colblocksizes):\n-            if (j < numcols) != False:\n+            current_col_end = current_col + numcols\n+            if current_col <= j < current_col_end:\n+                j = j - current_col\n                 break\n-            else:\n-                j -= numcols\n-        return self.blocks[row_block, col_block][i, j]\n+            current_col = current_col_end\n+        return self.blocks[row_block, col_block]._entry(i, j, **kwargs)\n     @property\n     def is_Identity(self):\n         if self.blockshape[0] != self.blockshape[1]:\n", "normalized_occurrence": 1}
