{"model_name_or_path": "agentless", "instance_id": "django__django-15278", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex be6e066..067d067 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -329,6 +329,13 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         # ALTER TABLE.\n         if not field.null or self.effective_default(field) is not None:\n             self._remake_table(model, create_field=field)\n+        elif field.unique:\n+            # Add the field without the unique constraint\n+            field._unique = False\n+            self._remake_table(model, create_field=field)\n+            field._unique = True\n+            # Add the unique constraint separately\n+            self.deferred_sql.append(self._create_unique_sql(model, [field.column]))\n         else:\n             super().add_field(model, field)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex fd5121f..e347f73 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -163,6 +163,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n     def add_field(self, model, field):\n         if not field.null or self.effective_default(field) is not None:\n             self._remake_table(model, create_field=field)\n+        elif field.unique:\n+            field._unique = False\n+            self._remake_table(model, create_field=field)\n+            field._unique = True\n+            self.deferred_sql.append(self._create_unique_sql(model, [field.column]))\n         else:\n             super().add_field(model, field)\n     def remove_field(self, model, field):\n", "normalized_occurrence": 1}
