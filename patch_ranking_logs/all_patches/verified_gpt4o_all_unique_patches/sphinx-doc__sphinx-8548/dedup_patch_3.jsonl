{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8548", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 60d49fe..3234ba3 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -648,8 +648,13 @@ class Documenter:\n         elif self.options.inherited_members:\n             return False, [(m.name, m.value) for m in members.values()]\n         else:\n+            inherited_members = []\n+            for cls in self.object.__mro__[1:]:\n+                base_members = self.get_attr(cls, '__dict__', {}).items()\n+                inherited_members.extend((name, value) for name, value in base_members)\n+\n             return False, [(m.name, m.value) for m in members.values()\n-                           if m.directly_defined]\n+                           if m.directly_defined] + inherited_members\n \n     def filter_members(self, members: ObjectMembers, want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex c754f31..e5a3781 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -338,7 +338,11 @@ class Documenter:\n         elif self.options.inherited_members:\n             return (False, [(m.name, m.value) for m in members.values()])\n         else:\n-            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined])\n+            inherited_members = []\n+            for cls in self.object.__mro__[1:]:\n+                base_members = self.get_attr(cls, '__dict__', {}).items()\n+                inherited_members.extend(((name, value) for name, value in base_members))\n+            return (False, [(m.name, m.value) for m in members.values() if m.directly_defined] + inherited_members)\n     def filter_members(self, members: ObjectMembers, want_all: bool) -> List[Tuple[str, Any, bool]]:\n         def is_filtered_inherited_member(name: str) -> bool:\n             if inspect.isclass(self.object):\n", "normalized_occurrence": 1}
