{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14007", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex c552973..7a11172 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -748,6 +748,15 @@ class Field(RegisterLookupMixin):\n             return [self.from_db_value]\n         return []\n \n+    def to_python(self, value):\n+        \"\"\"\n+        Convert the input value into the expected Python data type.\n+        Also ensures consistency with from_db_value for insert operations.\n+        \"\"\"\n+        if hasattr(self, 'from_db_value'):\n+            return self.from_db_value(value, None, None)\n+        return value\n+\n     @property\n     def unique(self):\n         return self._unique or self.primary_key\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 607ab50..521c109 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -329,6 +329,10 @@ class Field(RegisterLookupMixin):\n         if hasattr(self, 'from_db_value'):\n             return [self.from_db_value]\n         return []\n+    def to_python(self, value):\n+        if hasattr(self, 'from_db_value'):\n+            return self.from_db_value(value, None, None)\n+        return value\n     @property\n     def unique(self):\n         return self._unique or self.primary_key\n", "normalized_occurrence": 1}
