{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-7746", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 369cdd2..76643c9 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -1349,9 +1349,12 @@ reduce these to 2 dimensions using the naxis kwarg.\n     def wcs_pix2world(self, *args, **kwargs):\n         if self.wcs is None:\n             raise ValueError(\"No basic WCS settings were created.\")\n-        return self._array_converter(\n-            lambda xy, o: self.wcs.p2s(xy, o)['world'],\n-            'output', *args, **kwargs)\n+        if len(args) > 0 and all(len(arg) == 0 for arg in args if isinstance(arg, (list, np.ndarray))):\n+            return [np.array([]) for _ in range(self.naxis)]\n+        else:\n+            return self._array_converter(\n+                lambda xy, o: self.wcs.p2s(xy, o)['world'],\n+                'output', *args, **kwargs)\n     wcs_pix2world.__doc__ = \"\"\"\n         Transforms pixel coordinates to world coordinates by doing\n         only the basic `wcslib`_ transformation.\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex 3d9c35a..34e8f1d 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -641,7 +641,10 @@ class WCS(WCSBase):\n     def wcs_pix2world(self, *args, **kwargs):\n         if self.wcs is None:\n             raise ValueError('No basic WCS settings were created.')\n-        return self._array_converter(lambda xy, o: self.wcs.p2s(xy, o)['world'], 'output', *args, **kwargs)\n+        if len(args) > 0 and all((len(arg) == 0 for arg in args if isinstance(arg, (list, np.ndarray)))):\n+            return [np.array([]) for _ in range(self.naxis)]\n+        else:\n+            return self._array_converter(lambda xy, o: self.wcs.p2s(xy, o)['world'], 'output', *args, **kwargs)\n     wcs_pix2world.__doc__ = '\\n        Transforms pixel coordinates to world coordinates by doing\\n        only the basic `wcslib`_ transformation.\\n\\n        No `SIP`_ or `distortion paper`_ table lookup correction is\\n        applied.  To perform distortion correction, see\\n        `~astropy.wcs.WCS.all_pix2world`,\\n        `~astropy.wcs.WCS.sip_pix2foc`, `~astropy.wcs.WCS.p4_pix2foc`,\\n        or `~astropy.wcs.WCS.pix2foc`.\\n\\n        Parameters\\n        ----------\\n        {0}\\n\\n            For a transformation that is not two-dimensional, the\\n            two-argument form must be used.\\n\\n        {1}\\n\\n        Returns\\n        -------\\n\\n        {2}\\n\\n        Raises\\n        ------\\n        MemoryError\\n            Memory allocation failed.\\n\\n        SingularMatrixError\\n            Linear transformation matrix is singular.\\n\\n        InconsistentAxisTypesError\\n            Inconsistent or unrecognized coordinate axis types.\\n\\n        ValueError\\n            Invalid parameter value.\\n\\n        ValueError\\n            Invalid coordinate transformation parameters.\\n\\n        ValueError\\n            x- and y-coordinate arrays are not the same size.\\n\\n        InvalidTransformError\\n            Invalid coordinate transformation parameters.\\n\\n        InvalidTransformError\\n            Ill-conditioned coordinate transformation parameters.\\n\\n        Notes\\n        -----\\n        The order of the axes for the result is determined by the\\n        ``CTYPEia`` keywords in the FITS header, therefore it may not\\n        always be of the form (*ra*, *dec*).  The\\n        `~astropy.wcs.Wcsprm.lat`, `~astropy.wcs.Wcsprm.lng`,\\n        `~astropy.wcs.Wcsprm.lattyp` and `~astropy.wcs.Wcsprm.lngtyp`\\n        members can be used to determine the order of the axes.\\n\\n        '.format(__.TWO_OR_MORE_ARGS('naxis', 8), __.RA_DEC_ORDER(8), __.RETURNS('world coordinates, in degrees', 8))\n     def _all_world2pix(self, world, origin, tolerance, maxiter, adaptive, detect_divergence, quiet):\n         pix0 = self.wcs_world2pix(world, origin)\n", "normalized_occurrence": 1}
