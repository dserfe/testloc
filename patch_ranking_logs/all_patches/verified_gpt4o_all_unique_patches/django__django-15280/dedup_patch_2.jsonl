{"model_name_or_path": "agentless", "instance_id": "django__django-15280", "model_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex 2a14012..090f996 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -146,6 +146,10 @@ class ForwardManyToOneDescriptor:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n+                # Merge deferred fields from the related instance\n+                rel_obj._meta.get_field(self.field.name).set_cached_value(\n+                    instance, rel_obj\n+                )\n         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False\n \n     def get_object(self, instance):\n@@ -192,6 +196,9 @@ class ForwardManyToOneDescriptor:\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n             self.field.set_cached_value(instance, rel_obj)\n+            # If there are deferred fields on the related object, merge them\n+            if rel_obj is not None:\n+                instance._deferred_fields.update(rel_obj._deferred_fields)\n \n         if rel_obj is None and not self.field.null:\n             raise self.RelatedObjectDoesNotExist(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py\nindex bb07c3d..841eb2d 100644\n--- a/django/db/models/fields/related_descriptors.py\n+++ b/django/db/models/fields/related_descriptors.py\n@@ -38,6 +38,7 @@ class ForwardManyToOneDescriptor:\n             for rel_obj in queryset:\n                 instance = instances_dict[rel_obj_attr(rel_obj)]\n                 remote_field.set_cached_value(rel_obj, instance)\n+                rel_obj._meta.get_field(self.field.name).set_cached_value(instance, rel_obj)\n         return (queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False)\n     def get_object(self, instance):\n         qs = self.get_queryset(instance=instance)\n@@ -61,6 +62,8 @@ class ForwardManyToOneDescriptor:\n                 if not remote_field.multiple:\n                     remote_field.set_cached_value(rel_obj, instance)\n             self.field.set_cached_value(instance, rel_obj)\n+            if rel_obj is not None:\n+                instance._deferred_fields.update(rel_obj._deferred_fields)\n         if rel_obj is None and (not self.field.null):\n             raise self.RelatedObjectDoesNotExist('%s has no %s.' % (self.field.model.__name__, self.field.name))\n         else:\n", "normalized_occurrence": 1}
