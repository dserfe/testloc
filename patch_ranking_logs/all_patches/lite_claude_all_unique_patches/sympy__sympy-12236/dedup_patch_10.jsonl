{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..3e981bc 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -125,10 +125,10 @@ def apart(f, x=None, full=False, **options):\n         raise NotImplementedError(\n             \"multivariate partial fraction decomposition\")\n \n-    common, P, Q = P.cancel(Q)\n-\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n+    \n+    common, P, Q = P.cancel(Q)\n \n     if Q.degree() <= 1:\n         partial = P/Q\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..3a178f1 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -59,9 +59,9 @@ def apart(f, x=None, full=False, **options):\n         if fc != f:\n             return apart(fc, x=x, full=full, **_options)\n         raise NotImplementedError('multivariate partial fraction decomposition')\n-    common, P, Q = P.cancel(Q)\n     poly, P = P.div(Q, auto=True)\n     P, Q = P.rat_clear_denoms(Q)\n+    common, P, Q = P.cancel(Q)\n     if Q.degree() <= 1:\n         partial = P / Q\n     elif not full:\n", "normalized_occurrence": 2}
