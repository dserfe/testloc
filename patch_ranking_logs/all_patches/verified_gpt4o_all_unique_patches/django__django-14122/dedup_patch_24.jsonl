{"model_name_or_path": "agentless", "instance_id": "django__django-14122", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 325a36c..f1e5874 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -2035,7 +2035,9 @@ class Query(BaseExpression):\n                     alias = None\n                 group_by_cols = annotation.get_group_by_cols(alias=alias)\n                 group_by.extend(group_by_cols)\n-        self.group_by = tuple(group_by)\n+        # Exclude Meta.ordering fields from group_by\n+        ordering = self.order_by if self.order_by else []\n+        self.group_by = tuple(col for col in group_by if col not in ordering)\n \n     def add_select_related(self, fields):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9216162..1173315 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1102,7 +1102,8 @@ class Query(BaseExpression):\n                     alias = None\n                 group_by_cols = annotation.get_group_by_cols(alias=alias)\n                 group_by.extend(group_by_cols)\n-        self.group_by = tuple(group_by)\n+        ordering = self.order_by if self.order_by else []\n+        self.group_by = tuple((col for col in group_by if col not in ordering))\n     def add_select_related(self, fields):\n         if isinstance(self.select_related, bool):\n             field_dict = {}\n", "normalized_occurrence": 1}
