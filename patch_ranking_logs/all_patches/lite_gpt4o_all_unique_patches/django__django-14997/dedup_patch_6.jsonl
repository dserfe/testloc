{"model_name_or_path": "agentless", "instance_id": "django__django-14997", "model_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex 6d9014e..2f281f5 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -278,8 +278,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         body_copy['__module__'] = model.__module__\n         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)\n \n+        # Filter out any constraints that SQLite cannot handle\n+        valid_constraints = [\n+            constraint for constraint in constraints\n+            if not (isinstance(constraint, UniqueConstraint) and isinstance(constraint.condition, models.expressions.F))\n+        ]\n+\n         # Create a new table with the updated schema.\n-        self.create_model(new_model)\n+        self.create_model(new_model, constraints=valid_constraints)\n \n         # Copy data from the old table into the new table\n         self.execute(\"INSERT INTO %s (%s) SELECT %s FROM %s\" % (\n@@ -298,6 +304,11 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n             disable_constraints=False,\n         )\n \n+        # Re-add any constraints that were filtered out earlier\n+        for constraint in constraints:\n+            if isinstance(constraint, UniqueConstraint) and isinstance(constraint.condition, models.expressions.F):\n+                self.add_constraint(model, constraint)\n+\n         # Run deferred SQL on correct table\n         for sql in self.deferred_sql:\n             self.execute(sql)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py\nindex d5f020b..27daeeb 100644\n--- a/django/db/backends/sqlite3/schema.py\n+++ b/django/db/backends/sqlite3/schema.py\n@@ -141,10 +141,14 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):\n         body_copy['Meta'] = meta\n         body_copy['__module__'] = model.__module__\n         new_model = type('New%s' % model._meta.object_name, model.__bases__, body_copy)\n-        self.create_model(new_model)\n+        valid_constraints = [constraint for constraint in constraints if not (isinstance(constraint, UniqueConstraint) and isinstance(constraint.condition, models.expressions.F))]\n+        self.create_model(new_model, constraints=valid_constraints)\n         self.execute('INSERT INTO %s (%s) SELECT %s FROM %s' % (self.quote_name(new_model._meta.db_table), ', '.join((self.quote_name(x) for x in mapping)), ', '.join(mapping.values()), self.quote_name(model._meta.db_table)))\n         self.delete_model(model, handle_autom2m=False)\n         self.alter_db_table(new_model, new_model._meta.db_table, model._meta.db_table, disable_constraints=False)\n+        for constraint in constraints:\n+            if isinstance(constraint, UniqueConstraint) and isinstance(constraint.condition, models.expressions.F):\n+                self.add_constraint(model, constraint)\n         for sql in self.deferred_sql:\n             self.execute(sql)\n         self.deferred_sql = []\n", "normalized_occurrence": 1}
