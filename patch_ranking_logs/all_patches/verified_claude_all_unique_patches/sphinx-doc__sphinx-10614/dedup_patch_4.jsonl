{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-10614", "model_patch": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex 5f0da13..8870ee2 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -412,13 +412,22 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     pending_xrefs = cast(Iterable[addnodes.pending_xref], node)\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n+            # For SVG, we need to make the URLs relative to the SVG file's location\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = \"../\" + child.get('refuri')\n+                from os.path import dirname, relpath\n+                current_dir = dirname(current_filename)\n+                target_uri = child.get('refuri')\n+                if current_dir:\n+                    # If we're in a subdirectory, calculate the correct relative path\n+                    urls[child['reftitle']] = relpath(target_uri, current_dir)\n+                else:\n+                    # If we're at root level, keep the target URI as is\n+                    urls[child['reftitle']] = target_uri\n             else:\n                 urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                urls[child['reftitle']] = current_filename + '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py\nindex f0d9745..f51fc7f 100644\n--- a/sphinx/ext/inheritance_diagram.py\n+++ b/sphinx/ext/inheritance_diagram.py\n@@ -199,12 +199,18 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag\n     for child in pending_xrefs:\n         if child.get('refuri') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + child.get('refuri')\n+                from os.path import dirname, relpath\n+                current_dir = dirname(current_filename)\n+                target_uri = child.get('refuri')\n+                if current_dir:\n+                    urls[child['reftitle']] = relpath(target_uri, current_dir)\n+                else:\n+                    urls[child['reftitle']] = target_uri\n             else:\n                 urls[child['reftitle']] = child.get('refuri')\n         elif child.get('refid') is not None:\n             if graphviz_output_format == 'SVG':\n-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')\n+                urls[child['reftitle']] = current_filename + '#' + child.get('refid')\n             else:\n                 urls[child['reftitle']] = '#' + child.get('refid')\n     dotcode = graph.generate_dot(name, urls, env=self.builder.env)\n", "normalized_occurrence": 1}
