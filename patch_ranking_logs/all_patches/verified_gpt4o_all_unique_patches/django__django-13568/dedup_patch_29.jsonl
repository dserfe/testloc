{"model_name_or_path": "agentless", "instance_id": "django__django-13568", "model_patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 2983afb..c2ec65f 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -1,3 +1,4 @@\n+\n from itertools import chain\n from types import MethodType\n \n@@ -53,28 +54,35 @@ def check_user_model(app_configs=None, **kwargs):\n \n     # Check that the username field is unique\n     if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n-        if (settings.AUTHENTICATION_BACKENDS ==\n-                ['django.contrib.auth.backends.ModelBackend']):\n-            errors.append(\n-                checks.Error(\n-                    \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n-                        cls._meta.object_name, cls.USERNAME_FIELD\n-                    ),\n-                    obj=cls,\n-                    id='auth.E003',\n+        # Check if USERNAME_FIELD is part of a unique constraint\n+        unique_constraint_exists = any(\n+            isinstance(constraint, models.UniqueConstraint) and\n+            cls.USERNAME_FIELD in constraint.fields\n+            for constraint in cls._meta.constraints\n+        )\n+        if not unique_constraint_exists:\n+            if (settings.AUTHENTICATION_BACKENDS ==\n+                    ['django.contrib.auth.backends.ModelBackend']):\n+                errors.append(\n+                    checks.Error(\n+                        \"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (\n+                            cls._meta.object_name, cls.USERNAME_FIELD\n+                        ),\n+                        obj=cls,\n+                        id='auth.E003',\n+                    )\n                 )\n-            )\n-        else:\n-            errors.append(\n-                checks.Warning(\n-                    \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n-                        cls._meta.object_name, cls.USERNAME_FIELD\n-                    ),\n-                    hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n-                    obj=cls,\n-                    id='auth.W004',\n+            else:\n+                errors.append(\n+                    checks.Warning(\n+                        \"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (\n+                            cls._meta.object_name, cls.USERNAME_FIELD\n+                        ),\n+                        hint='Ensure that your authentication backend(s) can handle non-unique usernames.',\n+                        obj=cls,\n+                        id='auth.W004',\n+                    )\n                 )\n-            )\n \n     if isinstance(cls().is_anonymous, MethodType):\n         errors.append(\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/checks.py b/django/contrib/auth/checks.py\nindex 0dc9c25..cb6c7b2 100644\n--- a/django/contrib/auth/checks.py\n+++ b/django/contrib/auth/checks.py\n@@ -21,10 +21,12 @@ def check_user_model(app_configs=None, **kwargs):\n     if cls.USERNAME_FIELD in cls.REQUIRED_FIELDS:\n         errors.append(checks.Error(\"The field named as the 'USERNAME_FIELD' for a custom user model must not be included in 'REQUIRED_FIELDS'.\", hint=\"The 'USERNAME_FIELD' is currently set to '%s', you should remove '%s' from the 'REQUIRED_FIELDS'.\" % (cls.USERNAME_FIELD, cls.USERNAME_FIELD), obj=cls, id='auth.E002'))\n     if not cls._meta.get_field(cls.USERNAME_FIELD).unique:\n-        if settings.AUTHENTICATION_BACKENDS == ['django.contrib.auth.backends.ModelBackend']:\n-            errors.append(checks.Error(\"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (cls._meta.object_name, cls.USERNAME_FIELD), obj=cls, id='auth.E003'))\n-        else:\n-            errors.append(checks.Warning(\"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (cls._meta.object_name, cls.USERNAME_FIELD), hint='Ensure that your authentication backend(s) can handle non-unique usernames.', obj=cls, id='auth.W004'))\n+        unique_constraint_exists = any((isinstance(constraint, models.UniqueConstraint) and cls.USERNAME_FIELD in constraint.fields for constraint in cls._meta.constraints))\n+        if not unique_constraint_exists:\n+            if settings.AUTHENTICATION_BACKENDS == ['django.contrib.auth.backends.ModelBackend']:\n+                errors.append(checks.Error(\"'%s.%s' must be unique because it is named as the 'USERNAME_FIELD'.\" % (cls._meta.object_name, cls.USERNAME_FIELD), obj=cls, id='auth.E003'))\n+            else:\n+                errors.append(checks.Warning(\"'%s.%s' is named as the 'USERNAME_FIELD', but it is not unique.\" % (cls._meta.object_name, cls.USERNAME_FIELD), hint='Ensure that your authentication backend(s) can handle non-unique usernames.', obj=cls, id='auth.W004'))\n     if isinstance(cls().is_anonymous, MethodType):\n         errors.append(checks.Critical('%s.is_anonymous must be an attribute or property rather than a method. Ignoring this is a security issue as anonymous users will be treated as authenticated!' % cls, obj=cls, id='auth.C009'))\n     if isinstance(cls().is_authenticated, MethodType):\n", "normalized_occurrence": 1}
