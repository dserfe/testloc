{"model_name_or_path": "agentless", "instance_id": "django__django-13346", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex a0dea96..70ce5de 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -266,6 +266,7 @@ JSONField.register_lookup(ContainedBy)\n JSONField.register_lookup(HasKey)\n JSONField.register_lookup(HasKeys)\n JSONField.register_lookup(HasAnyKeys)\n+JSONField.register_lookup(KeyTransform)\n JSONField.register_lookup(JSONExact)\n \n \n@@ -296,7 +297,18 @@ class KeyTransform(Transform):\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n-    def as_oracle(self, compiler, connection):\n+    def as_in(self, compiler, connection):\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+\n+        if connection.vendor == 'mysql':\n+            return '%s IN (JSON_UNQUOTE(JSON_EXTRACT(%s, %%s)))' % (lhs, lhs), tuple(params) + (json_path,)\n+        elif connection.vendor == 'oracle':\n+            return '%s IN (SELECT value FROM JSON_TABLE(%s, \\'%s\\'))' % (lhs, lhs, json_path), tuple(params)\n+        elif connection.vendor == 'sqlite':\n+            return '%s IN (JSON_EXTRACT(%s, %%s))' % (lhs, lhs), tuple(params) + (json_path,)\n+        else:\n+            raise NotImplementedError('IN lookup not implemented for this database backend.')\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return (\n@@ -319,6 +331,14 @@ class KeyTransform(Transform):\n         json_path = compile_json_path(key_transforms)\n         return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n \n+    def as_sql(self, compiler, connection):\n+        if self.lookup_name == 'in':\n+            return self.as_in(compiler, connection)\n+        return super().as_sql(compiler, connection)\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        return 'JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,)\n+\n \n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex 781245e..8de0fe6 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -180,6 +180,7 @@ JSONField.register_lookup(ContainedBy)\n JSONField.register_lookup(HasKey)\n JSONField.register_lookup(HasKeys)\n JSONField.register_lookup(HasAnyKeys)\n+JSONField.register_lookup(KeyTransform)\n JSONField.register_lookup(JSONExact)\n class KeyTransform(Transform):\n     postgres_operator = '->'\n@@ -203,7 +204,17 @@ class KeyTransform(Transform):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n-    def as_oracle(self, compiler, connection):\n+    def as_in(self, compiler, connection):\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        if connection.vendor == 'mysql':\n+            return ('%s IN (JSON_UNQUOTE(JSON_EXTRACT(%s, %%s)))' % (lhs, lhs), tuple(params) + (json_path,))\n+        elif connection.vendor == 'oracle':\n+            return (\"%s IN (SELECT value FROM JSON_TABLE(%s, '%s'))\" % (lhs, lhs, json_path), tuple(params))\n+        elif connection.vendor == 'sqlite':\n+            return ('%s IN (JSON_EXTRACT(%s, %%s))' % (lhs, lhs), tuple(params) + (json_path,))\n+        else:\n+            raise NotImplementedError('IN lookup not implemented for this database backend.')\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return (\"COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))\" % ((lhs, json_path) * 2), tuple(params) * 2)\n@@ -220,6 +231,13 @@ class KeyTransform(Transform):\n         lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n         json_path = compile_json_path(key_transforms)\n         return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n+    def as_sql(self, compiler, connection):\n+        if self.lookup_name == 'in':\n+            return self.as_in(compiler, connection)\n+        return super().as_sql(compiler, connection)\n+        lhs, params, key_transforms = self.preprocess_lhs(compiler, connection)\n+        json_path = compile_json_path(key_transforms)\n+        return ('JSON_EXTRACT(%s, %%s)' % lhs, tuple(params) + (json_path,))\n class KeyTextTransform(KeyTransform):\n     postgres_operator = '->>'\n     postgres_nested_operator = '#>>'\n", "normalized_occurrence": 1}
