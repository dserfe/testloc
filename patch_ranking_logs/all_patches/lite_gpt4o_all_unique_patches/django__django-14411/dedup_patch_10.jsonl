{"model_name_or_path": "agentless", "instance_id": "django__django-14411", "model_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex ab619c1..3371adf 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -304,7 +304,10 @@ def _get_non_gfk_field(opts, name):\n     if field.is_relation and not field.many_to_many and hasattr(field, 'attname') and field.attname == name:\n         raise FieldIsAForeignKeyColumnName()\n \n-    return field\n+    if field.get_internal_type() == 'ReadOnlyPasswordHashWidget':\n+        return None  # No labelable field for this widget\n+    else:\n+        return field\n \n \n def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n@@ -362,8 +365,12 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         attr = name\n \n     if return_attr:\n+        if name == \"password\" and isinstance(attr, ReadOnlyPasswordHashWidget):\n+            return (label, None)\n         return (label, attr)\n     else:\n+        if name == \"password\" and isinstance(attr, ReadOnlyPasswordHashWidget):\n+            return label\n         return label\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex 2428fd0..53db168 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -177,7 +177,10 @@ def _get_non_gfk_field(opts, name):\n         raise FieldDoesNotExist()\n     if field.is_relation and (not field.many_to_many) and hasattr(field, 'attname') and (field.attname == name):\n         raise FieldIsAForeignKeyColumnName()\n-    return field\n+    if field.get_internal_type() == 'ReadOnlyPasswordHashWidget':\n+        return None\n+    else:\n+        return field\n def label_for_field(name, model, model_admin=None, return_attr=False, form=None):\n     attr = None\n     try:\n@@ -221,8 +224,12 @@ def label_for_field(name, model, model_admin=None, return_attr=False, form=None)\n         label = pretty_name(name)\n         attr = name\n     if return_attr:\n+        if name == 'password' and isinstance(attr, ReadOnlyPasswordHashWidget):\n+            return (label, None)\n         return (label, attr)\n     else:\n+        if name == 'password' and isinstance(attr, ReadOnlyPasswordHashWidget):\n+            return label\n         return label\n def help_text_for_field(name, model):\n     help_text = ''\n", "normalized_occurrence": 1}
