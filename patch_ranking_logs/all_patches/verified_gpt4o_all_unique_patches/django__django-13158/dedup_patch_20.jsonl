{"model_name_or_path": "agentless", "instance_id": "django__django-13158", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 56fc5f8..b74f1e0 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1323,7 +1323,8 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and not value:\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and not value:\n-            return self.queryset.none()\n+            # Ensure that none() works correctly even with combined queries\n+            return self.queryset.model.objects.filter(pk__in=self.queryset.none())\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(\n                 self.error_messages['invalid_list'],\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 4e65eaf..c605760 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -689,7 +689,7 @@ class ModelMultipleChoiceField(ModelChoiceField):\n         if self.required and (not value):\n             raise ValidationError(self.error_messages['required'], code='required')\n         elif not self.required and (not value):\n-            return self.queryset.none()\n+            return self.queryset.model.objects.filter(pk__in=self.queryset.none())\n         if not isinstance(value, (list, tuple)):\n             raise ValidationError(self.error_messages['invalid_list'], code='invalid_list')\n         qs = self._check_values(value)\n", "normalized_occurrence": 1}
