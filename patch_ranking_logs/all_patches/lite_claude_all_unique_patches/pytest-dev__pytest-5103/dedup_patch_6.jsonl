{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..42543d8 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -969,6 +969,79 @@ warn_explicit(\n         visit `ast.Call` nodes on Python3.5 and after\n         \"\"\"\n         new_func, func_expl = self.visit(call.func)\n+        \n+        # Check if this is a call to all() or any()\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                arg = call.args[0]\n+                # Handle generator expressions and list comprehensions\n+                if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                    # Extract the components of the comprehension\n+                    elt = arg.elt\n+                    for_loops = arg.generators\n+                    \n+                    # Create a compound statement equivalent to:\n+                    # for x in iterator:\n+                    #     assert predicate(x)  # for all()\n+                    # or\n+                    # for x in iterator:\n+                    #     if predicate(x):\n+                    #         break           # for any()\n+                    # else:\n+                    #     assert False        # for any()\n+                    \n+                    # Build the assertion to check each element\n+                    test = elt\n+                    if call.func.id == 'all':\n+                        new_node = ast.Assert(test, None)\n+                    else:  # any()\n+                        new_node = ast.If(\n+                            test=test,\n+                            body=[ast.Break()],\n+                            orelse=[]\n+                        )\n+                        new_node = ast.For(\n+                            target=for_loops[0].target,\n+                            iter=for_loops[0].iter,\n+                            body=[new_node],\n+                            orelse=[ast.Assert(ast.Name(id='False', ctx=ast.Load()), None)]\n+                        )\n+                        return new_node, ''\n+                    \n+                    # Wrap it in the necessary for loops\n+                    for comp in reversed(for_loops):\n+                        new_node = ast.For(\n+                            target=comp.target,\n+                            iter=comp.iter,\n+                            body=[new_node],\n+                            orelse=[]\n+                        )\n+                    \n+                    return new_node, ''\n+        \n+        # Original implementation for other cases\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n+        new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n         new_kwargs = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..9ca508d 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -544,6 +544,43 @@ class AssertionRewriter(ast.NodeVisitor):\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n     def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):\n+            if len(call.args) == 1:\n+                arg = call.args[0]\n+                if isinstance(arg, (ast.GeneratorExp, ast.ListComp)):\n+                    elt = arg.elt\n+                    for_loops = arg.generators\n+                    test = elt\n+                    if call.func.id == 'all':\n+                        new_node = ast.Assert(test, None)\n+                    else:\n+                        new_node = ast.If(test=test, body=[ast.Break()], orelse=[])\n+                        new_node = ast.For(target=for_loops[0].target, iter=for_loops[0].iter, body=[new_node], orelse=[ast.Assert(ast.Name(id='False', ctx=ast.Load()), None)])\n+                        return (new_node, '')\n+                    for comp in reversed(for_loops):\n+                        new_node = ast.For(target=comp.target, iter=comp.iter, body=[new_node], orelse=[])\n+                    return (new_node, '')\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
