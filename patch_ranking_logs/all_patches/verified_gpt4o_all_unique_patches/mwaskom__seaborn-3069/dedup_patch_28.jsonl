{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/categorical.py b/seaborn/categorical.py\nindex ec4f4c2..fa06a82 100644\n--- a/seaborn/categorical.py\n+++ b/seaborn/categorical.py\n@@ -198,7 +198,7 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         # But two reasons not to do that:\n         # - If it happens before plotting, autoscaling messes up the plot limits\n         # - It would change existing plots from other seaborn functions\n-        if self.var_types[axis] != \"categorical\":\n+        if self.var_types[axis] not in [\"categorical\", \"nominal\"]:\n             return\n \n         # If both x/y data are empty, the correct way to set up the plot is\n@@ -215,12 +215,14 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         # the state from previous categorical calls (see GH2516 for context)\n         n = len(getattr(ax, f\"get_{axis}ticks\")())\n \n+        if self.var_types[axis] == \"nominal\":\n+            ax.grid(False)\n+\n         if axis == \"x\":\n-            ax.xaxis.grid(False)\n             ax.set_xlim(-.5, n - .5, auto=None)\n         else:\n-            ax.yaxis.grid(False)\n-            # Note limits that correspond to previously-inverted y axis\n+            if self.var_types[axis] == \"nominal\":\n+                ax.invert_yaxis()\n             ax.set_ylim(n - .5, -.5, auto=None)\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/categorical.py b/seaborn/categorical.py\nindex 7d6d43d..24b2d6a 100644\n--- a/seaborn/categorical.py\n+++ b/seaborn/categorical.py\n@@ -94,16 +94,18 @@ class _CategoricalPlotterNew(_RelationalPlotter):\n         lum = min(light_vals) * 0.6\n         return (lum, lum, lum)\n     def _adjust_cat_axis(self, ax, axis):\n-        if self.var_types[axis] != 'categorical':\n+        if self.var_types[axis] not in ['categorical', 'nominal']:\n             return\n         if self.plot_data[axis].empty:\n             return\n         n = len(getattr(ax, f'get_{axis}ticks')())\n+        if self.var_types[axis] == 'nominal':\n+            ax.grid(False)\n         if axis == 'x':\n-            ax.xaxis.grid(False)\n             ax.set_xlim(-0.5, n - 0.5, auto=None)\n         else:\n-            ax.yaxis.grid(False)\n+            if self.var_types[axis] == 'nominal':\n+                ax.invert_yaxis()\n             ax.set_ylim(n - 0.5, -0.5, auto=None)\n     @property\n     def _native_width(self):\n", "normalized_occurrence": 1}
