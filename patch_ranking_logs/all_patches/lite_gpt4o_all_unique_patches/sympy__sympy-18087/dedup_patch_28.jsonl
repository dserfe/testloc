{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..d135a98 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -371,6 +371,11 @@ class sin(TrigonometricFunction):\n             x = arg.args[0]\n             return sqrt(1 - 1 / x**2)\n \n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and arg.args[0].exp == 2:\n+            base = arg.args[0].base\n+            if base.func == sin or base.func == cos:\n+                return abs(base)\n+\n     @staticmethod\n     @cacheit\n     def taylor_term(n, x, *previous_terms):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..61f6b63 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -213,6 +213,10 @@ class sin(TrigonometricFunction):\n         if isinstance(arg, asec):\n             x = arg.args[0]\n             return sqrt(1 - 1 / x ** 2)\n+        if isinstance(arg, sqrt) and arg.args[0].is_Pow and (arg.args[0].exp == 2):\n+            base = arg.args[0].base\n+            if base.func == sin or base.func == cos:\n+                return abs(base)\n     @staticmethod\n     @cacheit\n     def taylor_term(n, x, *previous_terms):\n", "normalized_occurrence": 1}
