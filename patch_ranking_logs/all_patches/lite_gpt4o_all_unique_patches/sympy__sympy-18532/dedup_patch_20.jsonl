{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18532", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 97eb81a..96d6ac1 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -500,15 +500,14 @@ class Basic(metaclass=ManagedProperties):\n         {I*pi, 2*sin(y + I*pi)}\n \n         \"\"\"\n-        if types:\n-            types = tuple(\n-                [t if isinstance(t, type) else type(t) for t in types])\n+        if not types:\n+            result = set(expr for expr in preorder_traversal(self) if not expr.args)\n         else:\n-            types = (Atom,)\n-        result = set()\n-        for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n+            types = tuple(t if isinstance(t, type) else type(t) for t in types)\n+            result = set()\n+            for expr in preorder_traversal(self):\n+                if isinstance(expr, types):\n+                    result.add(expr)\n         return result\n \n     @property\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex eec7295..b02db6d 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -184,14 +184,14 @@ class Basic(metaclass=ManagedProperties):\n         return '$\\\\displaystyle %s$' % s\n     _repr_latex_orig = _repr_latex_\n     def atoms(self, *types):\n-        if types:\n-            types = tuple([t if isinstance(t, type) else type(t) for t in types])\n+        if not types:\n+            result = set((expr for expr in preorder_traversal(self) if not expr.args))\n         else:\n-            types = (Atom,)\n-        result = set()\n-        for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n-                result.add(expr)\n+            types = tuple((t if isinstance(t, type) else type(t) for t in types))\n+            result = set()\n+            for expr in preorder_traversal(self):\n+                if isinstance(expr, types):\n+                    result.add(expr)\n         return result\n     @property\n     def free_symbols(self):\n", "normalized_occurrence": 1}
