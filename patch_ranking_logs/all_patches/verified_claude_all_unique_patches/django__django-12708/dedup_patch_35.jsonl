{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..ec2ffcf 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,13 +407,34 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n+        if not constraint_names:\n+            raise ValueError(\"Found no constraints for %s(%s)\" % (\n+                model._meta.db_table,\n+                \", \".join(columns),\n+            ))\n+        constraint_name = None\n+        if len(constraint_names) == 1:\n+            constraint_name = constraint_names[0]\n+        else:\n+            # If we're dealing with an index deletion and we find multiple constraints,\n+            # look for the one that's specifically an index\n+            if constraint_kwargs.get('index'):\n+                for name in constraint_names:\n+                    if name.endswith('_idx'):\n+                        constraint_name = name\n+                        break\n+            # For unique constraint deletion, look for the one that's specifically unique\n+            elif constraint_kwargs.get('unique'):\n+                for name in constraint_names:\n+                    if name.endswith('_uniq'):\n+                        constraint_name = name\n+                        break\n+        if constraint_name is None:\n+            raise ValueError(\"Could not find the correct constraint for %s(%s)\" % (\n                 model._meta.db_table,\n                 \", \".join(columns),\n             ))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n         \"\"\"Rename the table a model points to.\"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..35fc414 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,9 +230,24 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n-            raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n-        self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n+        if not constraint_names:\n+            raise ValueError('Found no constraints for %s(%s)' % (model._meta.db_table, ', '.join(columns)))\n+        constraint_name = None\n+        if len(constraint_names) == 1:\n+            constraint_name = constraint_names[0]\n+        elif constraint_kwargs.get('index'):\n+            for name in constraint_names:\n+                if name.endswith('_idx'):\n+                    constraint_name = name\n+                    break\n+        elif constraint_kwargs.get('unique'):\n+            for name in constraint_names:\n+                if name.endswith('_uniq'):\n+                    constraint_name = name\n+                    break\n+        if constraint_name is None:\n+            raise ValueError('Could not find the correct constraint for %s(%s)' % (model._meta.db_table, ', '.join(columns)))\n+        self.execute(self._delete_constraint_sql(sql, model, constraint_name))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n         if old_db_table == new_db_table or (self.connection.features.ignores_table_name_case and old_db_table.lower() == new_db_table.lower()):\n             return\n", "normalized_occurrence": 1}
