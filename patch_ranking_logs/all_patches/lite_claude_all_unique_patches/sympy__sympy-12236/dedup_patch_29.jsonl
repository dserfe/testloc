{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..cd1b30d 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -76,6 +76,18 @@ def apart(f, x=None, full=False, **options):\n         return f\n     else:\n         P, Q = f.as_numer_denom()\n+        if P.is_Mul:\n+            # Extract any symbolic coefficients that shouldn't be decomposed\n+            coeff = S.One\n+            newP = S.One\n+            for arg in P.args:\n+                if arg.is_number or (arg.is_Symbol and x and not arg.has(x)):\n+                    coeff *= arg\n+                else:\n+                    newP *= arg\n+            if coeff != S.One:\n+                return coeff * apart(newP/Q, x, full=full, **options)\n+        P, Q = f.as_numer_denom()\n \n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..7d53675 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -16,6 +16,17 @@ def apart(f, x=None, full=False, **options):\n         return f\n     else:\n         P, Q = f.as_numer_denom()\n+        if P.is_Mul:\n+            coeff = S.One\n+            newP = S.One\n+            for arg in P.args:\n+                if arg.is_number or (arg.is_Symbol and x and (not arg.has(x))):\n+                    coeff *= arg\n+                else:\n+                    newP *= arg\n+            if coeff != S.One:\n+                return coeff * apart(newP / Q, x, full=full, **options)\n+        P, Q = f.as_numer_denom()\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n     try:\n", "normalized_occurrence": 1}
