{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-26342", "model_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex db3f45f..90a83a3 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -1083,6 +1083,17 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n         self._maxs = points.max(axis=0)\n \n         # Each entry in (allsegs, allkinds) is a list of (segs, kinds): segs is a list\n+\n+    def set_paths(self, paths):\n+        \"\"\"\n+        Set the paths of the contour set to the given paths.\n+        \n+        Parameters\n+        ----------\n+        paths : list of `~matplotlib.path.Path`\n+            The new paths to set.\n+        \"\"\"\n+        self._paths = paths\n         # of (N, 2) arrays of xy coordinates, kinds is a list of arrays of corresponding\n         # pathcodes.  However, kinds can also be None; in which case all paths in that\n         # list are codeless (this case is normalized above).  These lists are used to\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py\nindex 992f0d3..ef625bd 100644\n--- a/lib/matplotlib/contour.py\n+++ b/lib/matplotlib/contour.py\n@@ -459,6 +459,8 @@ class ContourSet(ContourLabeler, mcoll.Collection):\n         points = np.concatenate(flatseglist, axis=0)\n         self._mins = points.min(axis=0)\n         self._maxs = points.max(axis=0)\n+    def set_paths(self, paths):\n+        self._paths = paths\n         self._paths = [Path.make_compound_path(*map(Path, segs, kinds)) for segs, kinds in zip(allsegs, allkinds)]\n         return kwargs\n     def _make_paths_from_contour_generator(self):\n", "normalized_occurrence": 1}
