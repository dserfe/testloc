{"model_name_or_path": "agentless", "instance_id": "django__django-13212", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 1b74a94..aa70662 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -48,7 +48,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n \n     def __eq__(self, other):\n         return (\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex 7587523..f0dc3c5 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -36,7 +36,7 @@ class RegexValidator:\n         regex_matches = self.regex.search(str(value))\n         invalid_input = regex_matches if self.inverse_match else not regex_matches\n         if invalid_input:\n-            raise ValidationError(self.message, code=self.code)\n+            raise ValidationError(self.message, code=self.code, params={'value': value})\n     def __eq__(self, other):\n         return isinstance(other, RegexValidator) and self.regex.pattern == other.regex.pattern and (self.regex.flags == other.regex.flags) and (self.message == other.message) and (self.code == other.code) and (self.inverse_match == other.inverse_match)\n @deconstructible\n", "normalized_occurrence": 1}
