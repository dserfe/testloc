{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25931", "model_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex d995c25..4738999 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -345,7 +345,12 @@ class IsolationForest(OutlierMixin, BaseBagging):\n             return self\n \n         # else, define offset_ wrt contamination parameter\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        # Convert X back to DataFrame with original feature names if it was one\n+        if hasattr(self, 'feature_names_in_'):\n+            X_score = pd.DataFrame(X, columns=self.feature_names_in_)\n+        else:\n+            X_score = X\n+        self.offset_ = np.percentile(self.score_samples(X_score), 100.0 * self.contamination)\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/ensemble/_iforest.py b/sklearn/ensemble/_iforest.py\nindex f9e64b9..432d37e 100644\n--- a/sklearn/ensemble/_iforest.py\n+++ b/sklearn/ensemble/_iforest.py\n@@ -46,7 +46,11 @@ class IsolationForest(OutlierMixin, BaseBagging):\n         if self.contamination == 'auto':\n             self.offset_ = -0.5\n             return self\n-        self.offset_ = np.percentile(self.score_samples(X), 100.0 * self.contamination)\n+        if hasattr(self, 'feature_names_in_'):\n+            X_score = pd.DataFrame(X, columns=self.feature_names_in_)\n+        else:\n+            X_score = X\n+        self.offset_ = np.percentile(self.score_samples(X_score), 100.0 * self.contamination)\n         return self\n     def predict(self, X):\n         check_is_fitted(self)\n", "normalized_occurrence": 1}
