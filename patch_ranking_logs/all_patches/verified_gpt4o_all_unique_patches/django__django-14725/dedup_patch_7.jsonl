{"model_name_or_path": "agentless", "instance_id": "django__django-14725", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 2db5c72..44475eb 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -573,9 +573,10 @@ class BaseModelFormSet(BaseFormSet):\n     unique_fields = set()\n \n     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n-                 queryset=None, *, initial=None, **kwargs):\n+                 queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new_objects = allow_new_objects\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n \n     def initial_form_count(self):\n@@ -621,7 +622,7 @@ class BaseModelFormSet(BaseFormSet):\n                         kwargs['instance'] = self._existing_object(pk)\n             else:\n                 kwargs['instance'] = self.get_queryset()[i]\n-        elif self.initial_extra:\n+        elif self.initial_extra and self.allow_new_objects:\n             # Set initial values for extra forms\n             try:\n                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n@@ -676,7 +677,10 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        else:\n+            return self.save_existing_objects(commit)\n \n     save.alters_data = True\n \n@@ -874,7 +878,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n                          can_order=False, max_num=None, fields=None, exclude=None,\n                          widgets=None, validate_max=False, localized_fields=None,\n                          labels=None, help_texts=None, error_messages=None,\n-                         min_num=None, validate_min=False, field_classes=None,\n+                         min_num=None, validate_min=False, field_classes=None, allow_new_objects=True,\n                          absolute_max=None, can_delete_extra=True, renderer=None):\n     \"\"\"Return a FormSet class for the given Django model class.\"\"\"\n     meta = getattr(form, 'Meta', None)\n@@ -893,7 +897,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,\n     FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num,\n                               can_order=can_order, can_delete=can_delete,\n                               validate_min=validate_min, validate_max=validate_max,\n-                              absolute_max=absolute_max, can_delete_extra=can_delete_extra,\n+                              absolute_max=absolute_max, can_delete_extra=can_delete_extra, allow_new_objects=allow_new_objects,\n                               renderer=renderer)\n     FormSet.model = model\n     return FormSet\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 7024f2a..4d7e88e 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -273,9 +273,10 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None, formfiel\n class BaseModelFormSet(BaseFormSet):\n     model = None\n     unique_fields = set()\n-    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, **kwargs):\n+    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None, queryset=None, *, initial=None, allow_new_objects=True, **kwargs):\n         self.queryset = queryset\n         self.initial_extra = initial\n+        self.allow_new_objects = allow_new_objects\n         super().__init__(**{'data': data, 'files': files, 'auto_id': auto_id, 'prefix': prefix, **kwargs})\n     def initial_form_count(self):\n         if not self.is_bound:\n@@ -308,7 +309,7 @@ class BaseModelFormSet(BaseFormSet):\n                         kwargs['instance'] = self._existing_object(pk)\n             else:\n                 kwargs['instance'] = self.get_queryset()[i]\n-        elif self.initial_extra:\n+        elif self.initial_extra and self.allow_new_objects:\n             try:\n                 kwargs['initial'] = self.initial_extra[i - self.initial_form_count()]\n             except IndexError:\n@@ -341,7 +342,10 @@ class BaseModelFormSet(BaseFormSet):\n                 for form in self.saved_forms:\n                     form.save_m2m()\n             self.save_m2m = save_m2m\n-        return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        if self.allow_new_objects:\n+            return self.save_existing_objects(commit) + self.save_new_objects(commit)\n+        else:\n+            return self.save_existing_objects(commit)\n     save.alters_data = True\n     def clean(self):\n         self.validate_unique()\n@@ -454,12 +458,12 @@ class BaseModelFormSet(BaseFormSet):\n                 widget = HiddenInput\n             form.fields[self._pk_field.name] = ModelChoiceField(qs, initial=pk_value, required=False, widget=widget)\n         super().add_fields(form, index)\n-def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, absolute_max=None, can_delete_extra=True, renderer=None):\n+def modelformset_factory(model, form=ModelForm, formfield_callback=None, formset=BaseModelFormSet, extra=1, can_delete=False, can_order=False, max_num=None, fields=None, exclude=None, widgets=None, validate_max=False, localized_fields=None, labels=None, help_texts=None, error_messages=None, min_num=None, validate_min=False, field_classes=None, allow_new_objects=True, absolute_max=None, can_delete_extra=True, renderer=None):\n     meta = getattr(form, 'Meta', None)\n     if getattr(meta, 'fields', fields) is None and getattr(meta, 'exclude', exclude) is None:\n         raise ImproperlyConfigured(\"Calling modelformset_factory without defining 'fields' or 'exclude' explicitly is prohibited.\")\n     form = modelform_factory(model, form=form, fields=fields, exclude=exclude, formfield_callback=formfield_callback, widgets=widgets, localized_fields=localized_fields, labels=labels, help_texts=help_texts, error_messages=error_messages, field_classes=field_classes)\n-    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, renderer=renderer)\n+    FormSet = formset_factory(form, formset, extra=extra, min_num=min_num, max_num=max_num, can_order=can_order, can_delete=can_delete, validate_min=validate_min, validate_max=validate_max, absolute_max=absolute_max, can_delete_extra=can_delete_extra, allow_new_objects=allow_new_objects, renderer=renderer)\n     FormSet.model = model\n     return FormSet\n class BaseInlineFormSet(BaseModelFormSet):\n", "normalized_occurrence": 1}
