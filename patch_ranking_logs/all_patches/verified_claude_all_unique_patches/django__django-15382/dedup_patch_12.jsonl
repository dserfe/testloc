{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15382", "model_patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 7a540c9..4c08f3a 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -93,10 +93,22 @@ class WhereNode(tree.Node):\n             # Now, check if this node is full/empty using the\n             # counts.\n             if empty_needed == 0:\n-                if self.negated:\n-                    return '', []\n-                else:\n+                if len(self.children) == 1:\n+                    # If we have only one condition and it's impossible, then the whole WHERE\n+                    # can be determined\n+                    if self.negated:\n+                        return '', []\n+                    else:\n+                        raise EmptyResultSet\n+                elif full_needed == len(self.children):\n+                    # If we still need all conditions to be full, keep processing\n+                    continue\n+                elif self.connector == AND:\n+                    # If we're AND-ing and any condition is impossible, short circuit\n                     raise EmptyResultSet\n+                else:\n+                    # If we're OR-ing and any condition is impossible, ignore it\n+                    continue\n             if full_needed == 0:\n                 if self.negated:\n                     raise EmptyResultSet\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py\nindex 7f5e30d..4ace1a5 100644\n--- a/django/db/models/sql/where.py\n+++ b/django/db/models/sql/where.py\n@@ -49,10 +49,17 @@ class WhereNode(tree.Node):\n                 else:\n                     full_needed -= 1\n             if empty_needed == 0:\n-                if self.negated:\n-                    return ('', [])\n-                else:\n+                if len(self.children) == 1:\n+                    if self.negated:\n+                        return ('', [])\n+                    else:\n+                        raise EmptyResultSet\n+                elif full_needed == len(self.children):\n+                    continue\n+                elif self.connector == AND:\n                     raise EmptyResultSet\n+                else:\n+                    continue\n             if full_needed == 0:\n                 if self.negated:\n                     raise EmptyResultSet\n", "normalized_occurrence": 1}
