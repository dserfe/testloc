{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5264b71..0ad9783 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -356,6 +356,16 @@ class BaseModelForm(BaseForm, AltersData):\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n         # if initial was provided, it should override the values from instance\n+        # Get default values from fields with callable defaults\n+        for field_name, field in self.fields.items():\n+            if field_name not in object_data:\n+                model_field = opts.model._meta.get_field(field_name)\n+                if getattr(model_field, 'default', None):\n+                    if callable(model_field.default):\n+                        object_data[field_name] = model_field.default()\n+                    else:\n+                        object_data[field_name] = model_field.default\n+\n         if initial is not None:\n             object_data.update(initial)\n         # self._validate_unique will be set to True by BaseModelForm.clean().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex a9413ca..74e6831 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -148,6 +148,14 @@ class BaseModelForm(BaseForm, AltersData):\n         else:\n             self.instance = instance\n             object_data = model_to_dict(instance, opts.fields, opts.exclude)\n+        for field_name, field in self.fields.items():\n+            if field_name not in object_data:\n+                model_field = opts.model._meta.get_field(field_name)\n+                if getattr(model_field, 'default', None):\n+                    if callable(model_field.default):\n+                        object_data[field_name] = model_field.default()\n+                    else:\n+                        object_data[field_name] = model_field.default\n         if initial is not None:\n             object_data.update(initial)\n         self._validate_unique = False\n", "normalized_occurrence": 1}
