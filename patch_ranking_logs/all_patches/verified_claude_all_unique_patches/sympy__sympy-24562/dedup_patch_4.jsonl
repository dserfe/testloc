{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-24562", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 1c28b44..259ce9a 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1597,12 +1597,7 @@ class Rational(Number):\n                 if isinstance(p, (float, Float)):\n                     return Rational(*_as_integer_ratio(p))\n \n-                if not isinstance(p, str):\n-                    try:\n-                        p = sympify(p)\n-                    except (SympifyError, SyntaxError):\n-                        pass  # error will raise below\n-                else:\n+                if isinstance(p, str):\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n                     p = p.replace(' ', '')\n@@ -1615,9 +1610,12 @@ class Rational(Number):\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n-                        pass  # error will raise below\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        raise TypeError('invalid input: %s' % p)\n+                else:\n+                    try:\n+                        p = sympify(p)\n+                    except (SympifyError, SyntaxError):\n+                        raise TypeError('invalid input: %s' % p)\n \n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n@@ -1632,7 +1630,14 @@ class Rational(Number):\n         else:\n             p = int(p)\n \n-        if not isinstance(q, SYMPY_INTS):\n+        if isinstance(q, str):\n+            try:\n+                q = fractions.Fraction(q)\n+                p = p * q.denominator\n+                q = q.numerator\n+            except ValueError:\n+                raise TypeError('invalid input: %s' % q)\n+        elif not isinstance(q, SYMPY_INTS):\n             q = Rational(q)\n             p *= q.q\n             q = q.p\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex c0e7188..a44c919 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1383,12 +1383,7 @@ class Rational(Number):\n             else:\n                 if isinstance(p, (float, Float)):\n                     return Rational(*_as_integer_ratio(p))\n-                if not isinstance(p, str):\n-                    try:\n-                        p = sympify(p)\n-                    except (SympifyError, SyntaxError):\n-                        pass\n-                else:\n+                if isinstance(p, str):\n                     if p.count('/') > 1:\n                         raise TypeError('invalid input: %s' % p)\n                     p = p.replace(' ', '')\n@@ -1401,9 +1396,12 @@ class Rational(Number):\n                     try:\n                         p = fractions.Fraction(p)\n                     except ValueError:\n-                        pass\n-                    else:\n-                        return Rational(p.numerator, p.denominator, 1)\n+                        raise TypeError('invalid input: %s' % p)\n+                else:\n+                    try:\n+                        p = sympify(p)\n+                    except (SympifyError, SyntaxError):\n+                        raise TypeError('invalid input: %s' % p)\n                 if not isinstance(p, Rational):\n                     raise TypeError('invalid input: %s' % p)\n             q = 1\n@@ -1414,7 +1412,14 @@ class Rational(Number):\n             p = p.p\n         else:\n             p = int(p)\n-        if not isinstance(q, SYMPY_INTS):\n+        if isinstance(q, str):\n+            try:\n+                q = fractions.Fraction(q)\n+                p = p * q.denominator\n+                q = q.numerator\n+            except ValueError:\n+                raise TypeError('invalid input: %s' % q)\n+        elif not isinstance(q, SYMPY_INTS):\n             q = Rational(q)\n             p *= q.q\n             q = q.p\n", "normalized_occurrence": 1}
