{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-9359", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9657da0..07d71d5 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -1040,8 +1040,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = f\"{res_expl}\\n{{{res_expl} = {expl}\\n}}\"\n-        return res, outer_expl\n+        return res, res_expl\n \n     def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n         # A Starred node can appear in a function call.\n", "occurrence": 2, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 9f4da3b..3415be9 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -587,8 +587,7 @@ class AssertionRewriter(ast.NodeVisitor):\n         new_call = ast.Call(new_func, new_args, new_kwargs)\n         res = self.assign(new_call)\n         res_expl = self.explanation_param(self.display(res))\n-        outer_expl = f'{res_expl}\\n{{{res_expl} = {expl}\\n}}'\n-        return (res, outer_expl)\n+        return (res, res_expl)\n     def visit_Starred(self, starred: ast.Starred) -> Tuple[ast.Starred, str]:\n         res, expl = self.visit(starred.value)\n         new_starred = ast.Starred(res, starred.ctx)\n", "normalized_occurrence": 2}
