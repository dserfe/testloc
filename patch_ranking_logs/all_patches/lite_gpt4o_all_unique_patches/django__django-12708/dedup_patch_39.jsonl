{"model_name_or_path": "agentless", "instance_id": "django__django-12708", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex d7d8448..e586eab 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -407,7 +407,27 @@ class BaseDatabaseSchemaEditor:\n             model, columns, exclude=meta_constraint_names | meta_index_names,\n             **constraint_kwargs\n         )\n-        if len(constraint_names) != 1:\n+        # Check if we have both unique and index constraints and handle accordingly\n+        if len(constraint_names) > 1:\n+            unique_constraint_names = self._constraint_names(\n+                model, columns, exclude=meta_constraint_names | meta_index_names,\n+                unique=True\n+            )\n+            index_constraint_names = self._constraint_names(\n+                model, columns, exclude=meta_constraint_names | meta_index_names,\n+                index=True\n+            )\n+            if constraint_kwargs.get('unique') and len(unique_constraint_names) == 1:\n+                constraint_names = unique_constraint_names\n+            elif constraint_kwargs.get('index') and len(index_constraint_names) == 1:\n+                constraint_names = index_constraint_names\n+            else:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n+        elif len(constraint_names) != 1:\n             raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n                 len(constraint_names),\n                 model._meta.db_table,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 7b679d7..2033da5 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -230,7 +230,16 @@ class BaseDatabaseSchemaEditor:\n         meta_index_names = {constraint.name for constraint in model._meta.indexes}\n         columns = [model._meta.get_field(field).column for field in fields]\n         constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, **constraint_kwargs)\n-        if len(constraint_names) != 1:\n+        if len(constraint_names) > 1:\n+            unique_constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, unique=True)\n+            index_constraint_names = self._constraint_names(model, columns, exclude=meta_constraint_names | meta_index_names, index=True)\n+            if constraint_kwargs.get('unique') and len(unique_constraint_names) == 1:\n+                constraint_names = unique_constraint_names\n+            elif constraint_kwargs.get('index') and len(index_constraint_names) == 1:\n+                constraint_names = index_constraint_names\n+            else:\n+                raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n+        elif len(constraint_names) != 1:\n             raise ValueError('Found wrong number (%s) of constraints for %s(%s)' % (len(constraint_names), model._meta.db_table, ', '.join(columns)))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "normalized_occurrence": 1}
