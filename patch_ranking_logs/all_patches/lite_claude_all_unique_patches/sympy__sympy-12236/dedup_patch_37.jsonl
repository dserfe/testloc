{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12236", "model_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 03af2f5..f2be8fb 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -77,6 +77,20 @@ def apart(f, x=None, full=False, **options):\n     else:\n         P, Q = f.as_numer_denom()\n \n+    # Extract common coefficient before polynomial conversion\n+    coeff = S.One\n+    if P.is_Mul:\n+        coeff_terms = []\n+        other_terms = []\n+        for term in P.args:\n+            if term.is_number or (not term.has(x) if x else term.is_symbol):\n+                coeff_terms.append(term)\n+            else:\n+                other_terms.append(term)\n+        if coeff_terms:\n+            coeff = Mul(*coeff_terms)\n+            P = Mul(*other_terms) if other_terms else S.One\n+\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n     try:\n@@ -146,7 +160,7 @@ def apart(f, x=None, full=False, **options):\n         else:\n             terms += factor(term)\n \n-    return common*(poly.as_expr() + terms)\n+    return common*coeff*(poly.as_expr() + terms)\n \n \n def apart_undetermined_coeffs(P, Q):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 21c4bd7..7f27343 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -16,6 +16,18 @@ def apart(f, x=None, full=False, **options):\n         return f\n     else:\n         P, Q = f.as_numer_denom()\n+    coeff = S.One\n+    if P.is_Mul:\n+        coeff_terms = []\n+        other_terms = []\n+        for term in P.args:\n+            if term.is_number or (not term.has(x) if x else term.is_symbol):\n+                coeff_terms.append(term)\n+            else:\n+                other_terms.append(term)\n+        if coeff_terms:\n+            coeff = Mul(*coeff_terms)\n+            P = Mul(*other_terms) if other_terms else S.One\n     _options = options.copy()\n     options = set_defaults(options, extension=True)\n     try:\n@@ -74,7 +86,7 @@ def apart(f, x=None, full=False, **options):\n             terms += term\n         else:\n             terms += factor(term)\n-    return common * (poly.as_expr() + terms)\n+    return common * coeff * (poly.as_expr() + terms)\n def apart_undetermined_coeffs(P, Q):\n     X = numbered_symbols(cls=Dummy)\n     partial, symbols = ([], [])\n", "normalized_occurrence": 1}
