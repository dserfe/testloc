{"model_name_or_path": "agentless", "instance_id": "django__django-16910", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 364ef3b..19d3f11 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1210,7 +1210,7 @@ class SQLCompiler:\n \n             if not select_related_descend(f, restricted, requested, select_mask):\n                 continue\n-            related_select_mask = select_mask.get(f) or {}\n+            related_select_mask = select_mask.get(f.name) or {}\n             klass_info = {\n                 \"model\": f.remote_field.model,\n                 \"field\": f,\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 802130c..3165e98 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -610,7 +610,7 @@ class SQLCompiler:\n                 next = False\n             if not select_related_descend(f, restricted, requested, select_mask):\n                 continue\n-            related_select_mask = select_mask.get(f) or {}\n+            related_select_mask = select_mask.get(f.name) or {}\n             klass_info = {'model': f.remote_field.model, 'field': f, 'reverse': False, 'local_setter': f.set_cached_value, 'remote_setter': f.remote_field.set_cached_value if f.unique else lambda x, y: None, 'from_parent': False}\n             related_klass_infos.append(klass_info)\n             select_fields = []\n", "normalized_occurrence": 1}
