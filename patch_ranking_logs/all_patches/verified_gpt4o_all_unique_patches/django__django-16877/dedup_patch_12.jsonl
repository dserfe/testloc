{"model_name_or_path": "agentless", "instance_id": "django__django-16877", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 693c70d..5cdec37 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -572,6 +572,15 @@ def dictsortreversed(value, arg):\n         return \"\"\n \n \n+@register.filter(is_safe=False)\n+def escapeseq(value, autoescape=True):\n+    \"\"\"Escape each item in a list.\"\"\"\n+    if not isinstance(value, (list, tuple)):\n+        return value\n+    if autoescape:\n+        return [conditional_escape(item) for item in value]\n+    return [str(item) for item in value]\n+\n @register.filter(is_safe=False)\n def first(value):\n     \"\"\"Return the first item in a list.\"\"\"\n@@ -580,7 +589,6 @@ def first(value):\n     except IndexError:\n         return \"\"\n \n-\n @register.filter(is_safe=True, needs_autoescape=True)\n def join(value, arg, autoescape=True):\n     \"\"\"Join a list with a string, like Python's ``str.join(list)``.\"\"\"\n", "occurrence": 1, "normalized_patch": "--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n+def escapeseq(value, autoescape=True):\n+    if not isinstance(value, (list, tuple)):\n+        return value\n+    if autoescape:\n+        return [conditional_escape(item) for item in value]\n+    return [str(item) for item in value]\n+@register.filter(is_safe=False)", "normalized_occurrence": 1}
