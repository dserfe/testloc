{"model_name_or_path": "agentless", "instance_id": "django__django-16661", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 20a301b..b0b0fcd 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -490,7 +490,11 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n             else:\n                 valid_lookups.add(filter_item)\n \n-        # Is it a valid relational lookup?\n+        # Check if it's a valid relational lookup, including handling foreign keys as primary keys.\n+        while relation_parts:\n+            if LOOKUP_SEP.join(relation_parts + [part]) in valid_lookups:\n+                return True\n+            relation_parts.pop()\n         return not {\n             LOOKUP_SEP.join(relation_parts),\n             LOOKUP_SEP.join(relation_parts + [part]),\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 061e1b9..f08deb0 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -221,6 +221,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):\n                 valid_lookups.add(filter_item[0])\n             else:\n                 valid_lookups.add(filter_item)\n+        while relation_parts:\n+            if LOOKUP_SEP.join(relation_parts + [part]) in valid_lookups:\n+                return True\n+            relation_parts.pop()\n         return not {LOOKUP_SEP.join(relation_parts), LOOKUP_SEP.join(relation_parts + [part])}.isdisjoint(valid_lookups)\n     def to_field_allowed(self, request, to_field):\n         try:\n", "normalized_occurrence": 1}
