{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6599", "model_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 3ef7ed0..0da9f7a 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -447,7 +447,7 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n         # Convert to specified timedelta units.\n         if datetime_unit:\n             array = array / np.timedelta64(1, datetime_unit)\n-        return np.where(isnull(array), np.nan, array.astype(dtype))\n+        return np.where(isnull(array), np.nan, array / np.timedelta64(1, datetime_unit)).astype(dtype)\n \n \n def timedelta_to_numeric(value, datetime_unit=\"ns\", dtype=float):\n@@ -485,7 +485,10 @@ def timedelta_to_numeric(value, datetime_unit=\"ns\", dtype=float):\n             f\"Expected value of type str, pandas.Timedelta, datetime.timedelta \"\n             f\"or numpy.timedelta64, but received {type(value).__name__}\"\n         )\n-    return out.astype(dtype)\n+    if isinstance(out, np.ndarray):\n+        return out.astype(dtype)\n+    else:\n+        return np.array(out, dtype=dtype)\n \n \n def _to_pytimedelta(array, unit=\"us\"):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/duck_array_ops.py b/xarray/core/duck_array_ops.py\nindex 003b4fa..8158e3d 100644\n--- a/xarray/core/duck_array_ops.py\n+++ b/xarray/core/duck_array_ops.py\n@@ -239,7 +239,7 @@ def datetime_to_numeric(array, offset=None, datetime_unit=None, dtype=float):\n     elif array.dtype.kind in 'mM':\n         if datetime_unit:\n             array = array / np.timedelta64(1, datetime_unit)\n-        return np.where(isnull(array), np.nan, array.astype(dtype))\n+        return np.where(isnull(array), np.nan, array / np.timedelta64(1, datetime_unit)).astype(dtype)\n def timedelta_to_numeric(value, datetime_unit='ns', dtype=float):\n     import datetime as dt\n     if isinstance(value, dt.timedelta):\n@@ -256,7 +256,10 @@ def timedelta_to_numeric(value, datetime_unit='ns', dtype=float):\n         return py_timedelta_to_float(a, datetime_unit)\n     else:\n         raise TypeError(f'Expected value of type str, pandas.Timedelta, datetime.timedelta or numpy.timedelta64, but received {type(value).__name__}')\n-    return out.astype(dtype)\n+    if isinstance(out, np.ndarray):\n+        return out.astype(dtype)\n+    else:\n+        return np.array(out, dtype=dtype)\n def _to_pytimedelta(array, unit='us'):\n     return array.astype(f'timedelta64[{unit}]').astype(datetime.timedelta)\n def np_timedelta64_to_float(array, datetime_unit):\n", "normalized_occurrence": 1}
