{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13615", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex e78d679..4b612ae 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -217,7 +217,13 @@ class Set(Basic):\n             return S.EmptySet\n \n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            not_in_self = [el for el in other if self.contains(el) != True]\n+            if isinstance(self, FiniteSet):\n+                syms_in_self = [el for el in self if el.is_symbol]\n+                syms_in_other = [el for el in other if el.is_symbol]\n+                syms_to_keep = [el for el in syms_in_self if el not in syms_in_other]\n+                return FiniteSet(*(not_in_self + syms_to_keep))\n+            return FiniteSet(*not_in_self)\n \n     def symmetric_difference(self, other):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex be9090d..d3653dd 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -70,7 +70,13 @@ class Set(Basic):\n         elif isinstance(other, EmptySet):\n             return S.EmptySet\n         elif isinstance(other, FiniteSet):\n-            return FiniteSet(*[el for el in other if self.contains(el) != True])\n+            not_in_self = [el for el in other if self.contains(el) != True]\n+            if isinstance(self, FiniteSet):\n+                syms_in_self = [el for el in self if el.is_symbol]\n+                syms_in_other = [el for el in other if el.is_symbol]\n+                syms_to_keep = [el for el in syms_in_self if el not in syms_in_other]\n+                return FiniteSet(*not_in_self + syms_to_keep)\n+            return FiniteSet(*not_in_self)\n     def symmetric_difference(self, other):\n         return SymmetricDifference(self, other)\n     def _symmetric_difference(self, other):\n", "normalized_occurrence": 1}
