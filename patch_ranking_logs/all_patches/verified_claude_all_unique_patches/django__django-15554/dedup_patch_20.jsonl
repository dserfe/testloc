{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..fb210da 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -794,11 +794,12 @@ class Query(BaseExpression):\n         Return a table alias for the given table_name and whether this is a\n         new alias or not.\n \n-        If 'create' is true, a new alias is always created. Otherwise, the\n-        most recently created alias for the table (if one exists) is reused.\n+        If 'create' is true or filtered_relation is provided, a new alias is always\n+        created. Otherwise, the most recently created alias for the table\n+        (if one exists) is reused.\n         \"\"\"\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and not filtered_relation and alias_list:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return alias, False\n", "occurrence": 10, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..6227338 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -426,7 +426,7 @@ class Query(BaseExpression):\n                 callback(target, model, values)\n     def table_alias(self, table_name, create=False, filtered_relation=None):\n         alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if not create and (not filtered_relation) and alias_list:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n", "normalized_occurrence": 26}
