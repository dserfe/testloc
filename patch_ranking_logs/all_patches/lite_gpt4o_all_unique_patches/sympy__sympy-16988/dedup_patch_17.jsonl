{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-16988", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 693f641..95941e6 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1262,10 +1262,19 @@ class Intersection(Set, LatticeOp):\n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n \n+        # Remove duplicates\n+        args = list(set(args))\n+        \n         # Reduce sets using known rules\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n-            return simplify_intersection(args)\n+            result = simplify_intersection(args)\n+            if isinstance(result, FiniteSet) and any(isinstance(arg, ConditionSet) for arg in args):\n+                # Handle the specific case with duplicates involving ConditionSet\n+                from sympy import Eq, Piecewise\n+                conditions = [Eq(arg, 1) for arg in args if isinstance(arg, ConditionSet)]\n+                return Piecewise((result, *conditions), (S.EmptySet, True))\n+            return result\n \n         args = list(ordered(args, Set._infimum_key))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 42d5bd8..7cb5b6c 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -474,9 +474,15 @@ class Intersection(Set, LatticeOp):\n     def __new__(cls, *args, **kwargs):\n         evaluate = kwargs.get('evaluate', global_evaluate[0])\n         args = _sympify(args)\n+        args = list(set(args))\n         if evaluate:\n             args = list(cls._new_args_filter(args))\n-            return simplify_intersection(args)\n+            result = simplify_intersection(args)\n+            if isinstance(result, FiniteSet) and any((isinstance(arg, ConditionSet) for arg in args)):\n+                from sympy import Eq, Piecewise\n+                conditions = [Eq(arg, 1) for arg in args if isinstance(arg, ConditionSet)]\n+                return Piecewise((result, *conditions), (S.EmptySet, True))\n+            return result\n         args = list(ordered(args, Set._infimum_key))\n         obj = Basic.__new__(cls, *args)\n         obj._argset = frozenset(args)\n", "normalized_occurrence": 1}
