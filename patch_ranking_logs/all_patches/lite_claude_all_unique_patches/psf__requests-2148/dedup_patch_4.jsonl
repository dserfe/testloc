{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-2148", "model_patch": "diff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 3c3e4e5..6726963 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -142,6 +142,8 @@ class HTTPResponse(io.IOBase):\n         Similar to :meth:`httplib.HTTPResponse.read`, but with two additional\n         parameters: ``decode_content`` and ``cache_content``.\n \n+        :raises ProtocolError: If a socket error occurs during reading.\n+\n         :param amt:\n             How much of the content to read. If specified, caching is skipped\n             because it doesn't make sense to cache partial content as the full\n@@ -210,6 +212,10 @@ class HTTPResponse(io.IOBase):\n                 # This includes IncompleteRead.\n                 raise ProtocolError('Connection broken: %r' % e, e)\n \n+            except socket.error as e:\n+                # Catch socket errors like connection reset and convert to ProtocolError\n+                raise ProtocolError('Connection broken: %r' % e, e)\n+\n             self._fp_bytes_read += len(data)\n \n             try:\n", "occurrence": 1, "normalized_patch": "diff --git a/requests/packages/urllib3/response.py b/requests/packages/urllib3/response.py\nindex 5140382..c25e481 100644\n--- a/requests/packages/urllib3/response.py\n+++ b/requests/packages/urllib3/response.py\n@@ -101,6 +101,8 @@ class HTTPResponse(io.IOBase):\n                 raise ReadTimeoutError(self._pool, None, 'Read timed out.')\n             except HTTPException as e:\n                 raise ProtocolError('Connection broken: %r' % e, e)\n+            except socket.error as e:\n+                raise ProtocolError('Connection broken: %r' % e, e)\n             self._fp_bytes_read += len(data)\n             try:\n                 if decode_content and self._decoder:\n", "normalized_occurrence": 26}
