{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3187", "model_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 8945d3d..13ecaea 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -91,6 +91,17 @@ class DotBase(Mark):\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n \n+        # Handle offset for numeric variables if using ScalarFormatter\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], \"formatter\"):\n+                formatter = scales[var].formatter\n+                if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                    # Get the offset value if it exists\n+                    if hasattr(formatter, \"offset\") and formatter.offset != 0:\n+                        # Adjust the size based on the formatter's offset\n+                        if \"size\" in res and var in key:\n+                            res[\"size\"] = res[\"size\"] * (10 ** -formatter.orderOfMagnitude)\n+\n         return mpl.collections.PathCollection(\n             paths=[res[\"path\"]],\n             sizes=[res[\"size\"]],\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_marks/dot.py b/seaborn/_marks/dot.py\nindex 7ed7459..78b0f26 100644\n--- a/seaborn/_marks/dot.py\n+++ b/seaborn/_marks/dot.py\n@@ -41,6 +41,13 @@ class DotBase(Mark):\n     def _legend_artist(self, variables: list[str], value: Any, scales: dict[str, Scale]) -> Artist:\n         key = {v: value for v in variables}\n         res = self._resolve_properties(key, scales)\n+        for var in variables:\n+            if var in scales and hasattr(scales[var], 'formatter'):\n+                formatter = scales[var].formatter\n+                if isinstance(formatter, mpl.ticker.ScalarFormatter):\n+                    if hasattr(formatter, 'offset') and formatter.offset != 0:\n+                        if 'size' in res and var in key:\n+                            res['size'] = res['size'] * 10 ** (-formatter.orderOfMagnitude)\n         return mpl.collections.PathCollection(paths=[res['path']], sizes=[res['size']], facecolors=[res['facecolor']], edgecolors=[res['edgecolor']], linewidths=[res['linewidth']], linestyles=[res['edgestyle']], transform=mpl.transforms.IdentityTransform(), **self.artist_kws)\n @document_properties\n @dataclass\n", "normalized_occurrence": 1}
