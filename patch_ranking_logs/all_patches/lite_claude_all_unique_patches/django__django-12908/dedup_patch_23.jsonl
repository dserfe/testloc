{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12908", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex a26bee7..9209b0c 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -475,11 +475,22 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n-        return result, params\n+            \n+        # If we have distinct_fields, wrap the combined query to apply DISTINCT ON\n+        if hasattr(self.query, 'distinct_fields') and self.query.distinct_fields:\n+            distinct_fields = ', '.join(\n+                self.quote_name_unless_alias(field)\n+                for field in self.query.distinct_fields\n+            )\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS combined_query'.format(\n+                distinct_fields, combined_sql\n+            )\n+            \n+        return [combined_sql], params\n \n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex e6a07a3..1e715d7 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -267,11 +267,14 @@ class SQLCompiler:\n             combinator_sql += ' ALL'\n         braces = '({})' if features.supports_slicing_ordering_in_compound else '{}'\n         sql_parts, args_parts = zip(*((braces.format(sql), args) for sql, args in parts))\n-        result = [' {} '.format(combinator_sql).join(sql_parts)]\n+        combined_sql = ' {} '.format(combinator_sql).join(sql_parts)\n         params = []\n         for part in args_parts:\n             params.extend(part)\n-        return (result, params)\n+        if hasattr(self.query, 'distinct_fields') and self.query.distinct_fields:\n+            distinct_fields = ', '.join((self.quote_name_unless_alias(field) for field in self.query.distinct_fields))\n+            combined_sql = 'SELECT DISTINCT ON ({}) * FROM ({}) AS combined_query'.format(distinct_fields, combined_sql)\n+        return ([combined_sql], params)\n     def as_sql(self, with_limits=True, with_col_aliases=False):\n         refcounts_before = self.query.alias_refcount.copy()\n         try:\n", "normalized_occurrence": 1}
