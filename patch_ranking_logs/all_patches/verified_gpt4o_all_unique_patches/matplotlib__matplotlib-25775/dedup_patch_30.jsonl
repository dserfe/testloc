{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..e104856 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -513,7 +513,7 @@ class Text(Artist):\n         else:\n             self._bbox_patch = None\n \n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n \n     def get_bbox_patch(self):\n         \"\"\"\n@@ -555,17 +555,17 @@ class Text(Artist):\n     def set_clip_box(self, clipbox):\n         # docstring inherited.\n         super().set_clip_box(clipbox)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n \n     def set_clip_path(self, path, transform=None):\n         # docstring inherited.\n         super().set_clip_path(path, transform)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n \n     def set_clip_on(self, b):\n         # docstring inherited.\n         super().set_clip_on(b)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n \n     def get_wrap(self):\n         \"\"\"Return whether the text can be wrapped.\"\"\"\n@@ -944,7 +944,7 @@ class Text(Artist):\n         else:\n             self._bbox_patch.update(dict(facecolor=color))\n \n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.stale = True\n \n     def set_color(self, color):\n@@ -1146,7 +1146,20 @@ class Text(Artist):\n         self._fontproperties.set_stretch(stretch)\n         self.stale = True\n \n-    def set_position(self, xy):\n+    def get_antialiased(self):\n+        \"\"\"Return whether the text is antialiased.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, b):\n+        \"\"\"\n+        Set whether to use antialiasing for the text.\n+\n+        Parameters\n+        ----------\n+        b : bool\n+        \"\"\"\n+        self._antialiased = bool(b)\n+        self.stale = True\n         \"\"\"\n         Set the (*x*, *y*) position of the text.\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..643652e 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -253,7 +253,7 @@ class Text(Artist):\n             self._bbox_patch = FancyBboxPatch((0, 0), 1, 1, boxstyle=boxstyle, transform=IdentityTransform(), **props)\n         else:\n             self._bbox_patch = None\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def get_bbox_patch(self):\n         return self._bbox_patch\n     def update_bbox_position_size(self, renderer):\n@@ -272,13 +272,13 @@ class Text(Artist):\n             self._bbox_patch.update(clipprops)\n     def set_clip_box(self, clipbox):\n         super().set_clip_box(clipbox)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def set_clip_path(self, path, transform=None):\n         super().set_clip_path(path, transform)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def set_clip_on(self, b):\n         super().set_clip_on(b)\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n     def get_wrap(self):\n         return self._wrap\n     def set_wrap(self, wrap):\n@@ -447,7 +447,7 @@ class Text(Artist):\n             self.set_bbox(dict(facecolor=color, edgecolor=color))\n         else:\n             self._bbox_patch.update(dict(facecolor=color))\n-        self._update_clip_properties()\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.stale = True\n     def set_color(self, color):\n         if not cbook._str_equal(color, 'auto'):\n@@ -488,7 +488,11 @@ class Text(Artist):\n     def set_fontstretch(self, stretch):\n         self._fontproperties.set_stretch(stretch)\n         self.stale = True\n-    def set_position(self, xy):\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, b):\n+        self._antialiased = bool(b)\n+        self.stale = True\n         self.set_x(xy[0])\n         self.set_y(xy[1])\n     def set_x(self, x):\n", "normalized_occurrence": 1}
