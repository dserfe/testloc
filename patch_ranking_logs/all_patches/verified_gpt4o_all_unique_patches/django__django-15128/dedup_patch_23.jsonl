{"model_name_or_path": "agentless", "instance_id": "django__django-15128", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 782e26e..9ef41f9 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -599,12 +599,17 @@ class Query(BaseExpression):\n         # Now, add the joins from rhs query into the new query (skipping base\n         # table).\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(self.alias_map.values())\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             # If the left side of the join was already relabeled, use the\n             # updated alias.\n             join = join.relabeled_clone(change_map)\n+            # Ensure the new alias does not conflict with existing aliases\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join.relabeled_clone({alias: new_alias}), reuse=reuse)\n+            existing_aliases.add(new_alias)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             # We can't reuse the same join again in the query. If we have two\n@@ -846,7 +851,10 @@ class Query(BaseExpression):\n         relabelling any references to them in select columns and the where\n         clause.\n         \"\"\"\n-        assert set(change_map).isdisjoint(change_map.values())\n+        # Ensure no alias is mapped to another that is already being used\n+        assert set(change_map).isdisjoint(change_map.values()), (\n+            \"change_map has intersecting keys and values. This means an alias might be changed twice.\"\n+        )\n \n         # 1. Update references in \"select\" (normal columns plus aliases),\n         # \"group by\" and \"where\".\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex c6ee433..70f833e 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -333,10 +333,14 @@ class Query(BaseExpression):\n         joinpromoter.add_votes((j for j in self.alias_map if self.alias_map[j].join_type == INNER))\n         rhs_votes = set()\n         rhs_tables = list(rhs.alias_map)[1:]\n+        existing_aliases = set(self.alias_map.values())\n         for alias in rhs_tables:\n             join = rhs.alias_map[alias]\n             join = join.relabeled_clone(change_map)\n             new_alias = self.join(join, reuse=reuse)\n+            while new_alias in existing_aliases:\n+                new_alias = self.join(join.relabeled_clone({alias: new_alias}), reuse=reuse)\n+            existing_aliases.add(new_alias)\n             if join.join_type == INNER:\n                 rhs_votes.add(new_alias)\n             reuse.discard(new_alias)\n@@ -467,7 +471,7 @@ class Query(BaseExpression):\n             unref_amount = cur_refcount - to_counts.get(alias, 0)\n             self.unref_alias(alias, unref_amount)\n     def change_aliases(self, change_map):\n-        assert set(change_map).isdisjoint(change_map.values())\n+        assert set(change_map).isdisjoint(change_map.values()), 'change_map has intersecting keys and values. This means an alias might be changed twice.'\n         self.where.relabel_aliases(change_map)\n         if isinstance(self.group_by, tuple):\n             self.group_by = tuple([col.relabeled_clone(change_map) for col in self.group_by])\n", "normalized_occurrence": 1}
