{"model_name_or_path": "agentless", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..1e13831 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -125,7 +125,18 @@ class DjangoHelpFormatter(HelpFormatter):\n         )\n \n     def add_usage(self, usage, actions, *args, **kwargs):\n-        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+        super().add_usage(usage, actions, *args, **kwargs)\n+\n+    def format_help(self):\n+        return self._format_help()\n+\n+    def _format_help(self):\n+        help_text = super().format_help()\n+        formatted_help = \"\\n\".join(\n+            line if not line.startswith(\"Example usage:\") else \"\\n\".join(textwrap.wrap(line, width=80))\n+            for line in help_text.splitlines()\n+        )\n+        return formatted_help\n \n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 2883dc3..2815415 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -51,7 +51,13 @@ class DjangoHelpFormatter(HelpFormatter):\n     def _reordered_actions(self, actions):\n         return sorted(actions, key=lambda a: set(a.option_strings) & self.show_last != set())\n     def add_usage(self, usage, actions, *args, **kwargs):\n-        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+        super().add_usage(usage, actions, *args, **kwargs)\n+    def format_help(self):\n+        return self._format_help()\n+    def _format_help(self):\n+        help_text = super().format_help()\n+        formatted_help = '\\n'.join((line if not line.startswith('Example usage:') else '\\n'.join(textwrap.wrap(line, width=80)) for line in help_text.splitlines()))\n+        return formatted_help\n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n class OutputWrapper(TextIOBase):\n", "normalized_occurrence": 1}
