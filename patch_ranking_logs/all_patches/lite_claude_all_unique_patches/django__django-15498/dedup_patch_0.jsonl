{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15498", "model_patch": "diff --git a/django/middleware/http.py b/django/middleware/http.py\nindex 2ea6e03..0feed78 100644\n--- a/django/middleware/http.py\n+++ b/django/middleware/http.py\n@@ -25,6 +25,11 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n         last_modified = last_modified and parse_http_date_safe(last_modified)\n \n         if etag or last_modified:\n+            # Convert empty If-Modified-Since to None to maintain backwards compatibility\n+            if_modified_since = request.META.get('HTTP_IF_MODIFIED_SINCE')\n+            if if_modified_since == '':\n+                request.META['HTTP_IF_MODIFIED_SINCE'] = None\n+            \n             return get_conditional_response(\n                 request,\n                 etag=etag,\n@@ -37,4 +42,4 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n     def needs_etag(self, response):\n         \"\"\"Return True if an ETag header should be added to response.\"\"\"\n         cache_control_headers = cc_delim_re.split(response.get(\"Cache-Control\", \"\"))\n-        return all(header.lower() != \"no-store\" for header in cache_control_headers)\n+        return all(header.lower() != \"no-store\" for header in cache_control_headers)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/middleware/http.py b/django/middleware/http.py\nindex c9afcfa..d066e97 100644\n--- a/django/middleware/http.py\n+++ b/django/middleware/http.py\n@@ -11,6 +11,9 @@ class ConditionalGetMiddleware(MiddlewareMixin):\n         last_modified = response.get('Last-Modified')\n         last_modified = last_modified and parse_http_date_safe(last_modified)\n         if etag or last_modified:\n+            if_modified_since = request.META.get('HTTP_IF_MODIFIED_SINCE')\n+            if if_modified_since == '':\n+                request.META['HTTP_IF_MODIFIED_SINCE'] = None\n             return get_conditional_response(request, etag=etag, last_modified=last_modified, response=response)\n         return response\n     def needs_etag(self, response):\n", "normalized_occurrence": 1}
