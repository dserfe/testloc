{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15554", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b69bf1f..0c3fd02 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -796,9 +796,19 @@ class Query(BaseExpression):\n \n         If 'create' is true, a new alias is always created. Otherwise, the\n         most recently created alias for the table (if one exists) is reused.\n+\n+        If filtered_relation is provided, always create a new alias to ensure\n+        different filters get different aliases.\n         \"\"\"\n-        alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        # For filtered relations, use a combination of table name and filtered relation alias\n+        # as the key to ensure unique aliases for different filters\n+        if filtered_relation is not None:\n+            table_key = (table_name, filtered_relation.alias)\n+        else:\n+            table_key = table_name\n+\n+        alias_list = self.table_map.get(table_key)\n+        if not create and alias_list and filtered_relation is None:\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return alias, False\n@@ -808,11 +818,13 @@ class Query(BaseExpression):\n             alias = \"%s%d\" % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n-            # The first occurrence of a table uses the table name directly.\n-            alias = (\n-                filtered_relation.alias if filtered_relation is not None else table_name\n-            )\n-            self.table_map[table_name] = [alias]\n+            # The first occurrence of a table uses the table name directly,\n+            # unless it's a filtered relation\n+            if filtered_relation is not None:\n+                alias = filtered_relation.alias\n+            else:\n+                alias = table_name\n+            self.table_map[table_key] = [alias]\n         self.alias_refcount[alias] = 1\n         return alias, True\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex b4ac641..a7c294c 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -425,8 +425,12 @@ class Query(BaseExpression):\n             for model, values in seen.items():\n                 callback(target, model, values)\n     def table_alias(self, table_name, create=False, filtered_relation=None):\n-        alias_list = self.table_map.get(table_name)\n-        if not create and alias_list:\n+        if filtered_relation is not None:\n+            table_key = (table_name, filtered_relation.alias)\n+        else:\n+            table_key = table_name\n+        alias_list = self.table_map.get(table_key)\n+        if not create and alias_list and (filtered_relation is None):\n             alias = alias_list[0]\n             self.alias_refcount[alias] += 1\n             return (alias, False)\n@@ -434,8 +438,11 @@ class Query(BaseExpression):\n             alias = '%s%d' % (self.alias_prefix, len(self.alias_map) + 1)\n             alias_list.append(alias)\n         else:\n-            alias = filtered_relation.alias if filtered_relation is not None else table_name\n-            self.table_map[table_name] = [alias]\n+            if filtered_relation is not None:\n+                alias = filtered_relation.alias\n+            else:\n+                alias = table_name\n+            self.table_map[table_key] = [alias]\n         self.alias_refcount[alias] = 1\n         return (alias, True)\n     def ref_alias(self, alias):\n", "normalized_occurrence": 1}
