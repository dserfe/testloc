{"model_name_or_path": "agentless", "instance_id": "django__django-15252", "model_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex cf1aec2..575225e 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -1,3 +1,4 @@\n+\n from django.apps.registry import Apps\n from django.db import DatabaseError, models\n from django.utils.functional import classproperty\n@@ -58,6 +59,9 @@ class MigrationRecorder:\n \n     def ensure_schema(self):\n         \"\"\"Ensure the table exists and has the correct schema.\"\"\"\n+        # Check if migrations are allowed on this database\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         # If the table's there, that's fine - we've never changed its schema\n         # in the codebase.\n         if self.has_table():\n@@ -93,4 +97,4 @@ class MigrationRecorder:\n \n     def flush(self):\n         \"\"\"Delete all migration records. Useful for testing migrations.\"\"\"\n-        self.migration_qs.all().delete()\n+        self.migration_qs.all().delete()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py\nindex c1743b4..f023495 100644\n--- a/django/db/migrations/recorder.py\n+++ b/django/db/migrations/recorder.py\n@@ -30,6 +30,8 @@ class MigrationRecorder:\n             tables = self.connection.introspection.table_names(cursor)\n         return self.Migration._meta.db_table in tables\n     def ensure_schema(self):\n+        if not router.allow_migrate(self.connection.alias, self.Migration):\n+            return\n         if self.has_table():\n             return\n         try:\n", "normalized_occurrence": 3}
