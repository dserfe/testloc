{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..05f4919 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1095,12 +1095,17 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n+        _names = [_name.strip() for _name in _name.split(\",\")]\n+        _types = _convert_numpy_type_spec(\n             _type,\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n         )\n+        _name = \", \".join(self._escape_args_and_kwargs(_name) for _name in _names)\n+        if \"optional\" in _type:\n+            _type = f\"{_types}, optional\"\n+        else:\n+            _type = _types\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..214b30f 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -665,8 +665,13 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        _names = [_name.strip() for _name in _name.split(',')]\n+        _types = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        _name = ', '.join((self._escape_args_and_kwargs(_name) for _name in _names))\n+        if 'optional' in _type:\n+            _type = f'{_types}, optional'\n+        else:\n+            _type = _types\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n", "normalized_occurrence": 1}
