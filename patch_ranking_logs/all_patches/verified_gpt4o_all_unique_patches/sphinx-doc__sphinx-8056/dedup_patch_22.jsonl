{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..5cd0dfd 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1090,11 +1090,16 @@ class NumpyDocstring(GoogleDocstring):\n     def _consume_field(self, parse_type: bool = True, prefer_type: bool = False\n                        ) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n+        # Split the line on ':', but keep the original line intact for further processing\n+        original_line = line\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n+\n+        # Split names if multiple names are provided\n+        names = _name.split(\", \")\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(\n             _type,\n@@ -1104,9 +1109,17 @@ class NumpyDocstring(GoogleDocstring):\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n-        indent = self._get_indent(line) + 1\n+        indent = self._get_indent(original_line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+\n+        # If there are multiple names, return a combined description\n+        if len(names) > 1:\n+            combined_desc = []\n+            for name in names:\n+                combined_desc.append(f\"{name} {_type} - {' '.join(_desc)}\")\n+            return \"\\n\".join(combined_desc), _type, _desc\n+\n         return _name, _type, _desc\n \n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..3f0fedc 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -660,18 +660,25 @@ class NumpyDocstring(GoogleDocstring):\n             return func(name)\n     def _consume_field(self, parse_type: bool=True, prefer_type: bool=False) -> Tuple[str, str, List[str]]:\n         line = next(self._line_iter)\n+        original_line = line\n         if parse_type:\n             _name, _, _type = self._partition_field_on_colon(line)\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n+        names = _name.split(', ')\n         _name = self._escape_args_and_kwargs(_name)\n         _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n-        indent = self._get_indent(line) + 1\n+        indent = self._get_indent(original_line) + 1\n         _desc = self._dedent(self._consume_indented_block(indent))\n         _desc = self.__class__(_desc, self._config).lines()\n+        if len(names) > 1:\n+            combined_desc = []\n+            for name in names:\n+                combined_desc.append(f\"{name} {_type} - {' '.join(_desc)}\")\n+            return ('\\n'.join(combined_desc), _type, _desc)\n         return (_name, _type, _desc)\n     def _consume_returns_section(self) -> List[Tuple[str, str, List[str]]]:\n         return self._consume_fields(prefer_type=True)\n", "normalized_occurrence": 1}
