{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14995", "model_patch": "diff --git a/astropy/nddata/nddata_withmixins.py b/astropy/nddata/nddata_withmixins.py\nindex 496df38..326947a 100644\n--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n@@ -69,4 +69,40 @@ class NDDataRef(NDArithmeticMixin, NDIOMixin, NDSlicingMixin, NDData):\n     are sliced.\n     \"\"\"\n \n-    pass\n+    def _arithmetic_mask(self, operation, operand, handle_mask):\n+        \"\"\"\n+        Handle the propagation of masks for arithmetic operations.\n+        \n+        Parameters\n+        ----------\n+        operation : callable\n+            The arithmetic operation to be performed.\n+        operand : `NDDataRef` or `numpy.ndarray`\n+            The operand for the arithmetic operation.\n+        handle_mask : callable\n+            The function to handle the masks.\n+            \n+        Returns\n+        -------\n+        mask : `numpy.ndarray` or None\n+            The resulting mask after the arithmetic operation.\n+        \"\"\"\n+        if self.mask is None and getattr(operand, 'mask', None) is None:\n+            return None\n+        elif self.mask is not None and getattr(operand, 'mask', None) is None:\n+            return self.mask\n+        elif self.mask is None and getattr(operand, 'mask', None) is not None:\n+            return operand.mask\n+        \n+        return handle_mask(self.mask, operand.mask)\n+    \n+    # Overriding the multiply method to include mask handling\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        if isinstance(operand, NDDataRef):\n+            result_data = self.data * operand.data\n+        else:\n+            result_data = self.data * operand\n+        \n+        result_mask = self._arithmetic_mask(np.multiply, operand, handle_mask)\n+        \n+        return NDDataRef(result_data, mask=result_mask, uncertainty=None, wcs=None, unit=None)\n", "occurrence": 1, "normalized_patch": "--- a/astropy/nddata/nddata_withmixins.py\n+++ b/astropy/nddata/nddata_withmixins.py\n-    pass\n+    def _arithmetic_mask(self, operation, operand, handle_mask):\n+        if self.mask is None and getattr(operand, 'mask', None) is None:\n+            return None\n+        elif self.mask is not None and getattr(operand, 'mask', None) is None:\n+            return self.mask\n+        elif self.mask is None and getattr(operand, 'mask', None) is not None:\n+            return operand.mask\n+        return handle_mask(self.mask, operand.mask)\n+    def multiply(self, operand, handle_mask=np.bitwise_or):\n+        if isinstance(operand, NDDataRef):\n+            result_data = self.data * operand.data\n+        else:\n+            result_data = self.data * operand\n+        result_mask = self._arithmetic_mask(np.multiply, operand, handle_mask)\n+        return NDDataRef(result_data, mask=result_mask, uncertainty=None, wcs=None, unit=None)", "normalized_occurrence": 1}
