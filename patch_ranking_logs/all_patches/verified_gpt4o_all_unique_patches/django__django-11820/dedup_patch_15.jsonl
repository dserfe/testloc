{"model_name_or_path": "agentless", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex d3ae0cf..d459e51 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -564,7 +564,17 @@ class Options:\n         try:\n             # In order to avoid premature loading of the relation tree\n             # (expensive) we prefer checking if the field is a forward field.\n-            return self._forward_fields_map[field_name]\n+            field = self._forward_fields_map.get(field_name)\n+            if field:\n+                return field\n+            if LOOKUP_SEP in field_name:\n+                parts = field_name.split(LOOKUP_SEP)\n+                if parts[-1] == 'pk':\n+                    try:\n+                        field = self.get_field(LOOKUP_SEP.join(parts[:-1]))\n+                        return field.related_model._meta.pk\n+                    except FieldDoesNotExist:\n+                        pass\n         except KeyError:\n             # If the app registry is not ready, reverse fields are\n             # unavailable, therefore we throw a FieldDoesNotExist exception.\n@@ -852,4 +862,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 3b361a9..95dd978 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -314,7 +314,17 @@ class Options:\n         return res\n     def get_field(self, field_name):\n         try:\n-            return self._forward_fields_map[field_name]\n+            field = self._forward_fields_map.get(field_name)\n+            if field:\n+                return field\n+            if LOOKUP_SEP in field_name:\n+                parts = field_name.split(LOOKUP_SEP)\n+                if parts[-1] == 'pk':\n+                    try:\n+                        field = self.get_field(LOOKUP_SEP.join(parts[:-1]))\n+                        return field.related_model._meta.pk\n+                    except FieldDoesNotExist:\n+                        pass\n         except KeyError:\n             if not self.apps.models_ready:\n                 raise FieldDoesNotExist(\"%s has no field named '%s'. The app cache isn't ready yet, so if this is an auto-created related field, it won't be available yet.\" % (self.object_name, field_name))\n", "normalized_occurrence": 1}
