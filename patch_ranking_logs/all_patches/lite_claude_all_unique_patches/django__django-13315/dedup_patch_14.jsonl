{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13315", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex e59da5c..4c4ea0f 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1154,7 +1154,7 @@ class ModelChoiceIterator:\n     def __iter__(self):\n         if self.field.empty_label is not None:\n             yield (\"\", self.field.empty_label)\n-        queryset = self.queryset\n+        queryset = self.queryset.distinct()  # Ensure distinct results\n         # Can't use iterator() when queryset uses prefetch_related()\n         if not queryset._prefetch_related_lookups:\n             queryset = queryset.iterator()\n@@ -1165,7 +1165,7 @@ class ModelChoiceIterator:\n         # count() adds a query but uses less memory since the QuerySet results\n         # won't be cached. In most cases, the choices will only be iterated on,\n         # and __len__() won't be called.\n-        return self.queryset.count() + (1 if self.field.empty_label is not None else 0)\n+        return self.queryset.distinct().count() + (1 if self.field.empty_label is not None else 0)\n \n     def __bool__(self):\n         return self.field.empty_label is not None or self.queryset.exists()\n", "normalized_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex bdd2237..53a556e 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -600,13 +600,13 @@ class ModelChoiceIterator:\n     def __iter__(self):\n         if self.field.empty_label is not None:\n             yield ('', self.field.empty_label)\n-        queryset = self.queryset\n+        queryset = self.queryset.distinct()\n         if not queryset._prefetch_related_lookups:\n             queryset = queryset.iterator()\n         for obj in queryset:\n             yield self.choice(obj)\n     def __len__(self):\n-        return self.queryset.count() + (1 if self.field.empty_label is not None else 0)\n+        return self.queryset.distinct().count() + (1 if self.field.empty_label is not None else 0)\n     def __bool__(self):\n         return self.field.empty_label is not None or self.queryset.exists()\n     def choice(self, obj):\n", "normalized_occurrence": 1}
