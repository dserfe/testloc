{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-7229", "model_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex 33e341b..6934bb0 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -1858,9 +1858,12 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n     if keep_attrs is True:\n-        # keep the attributes of x, the second parameter, by default to\n-        # be consistent with the `where` method of `DataArray` and `Dataset`\n-        keep_attrs = lambda attrs, context: getattr(x, \"attrs\", {})\n+        # Preserve original attributes when they exist, otherwise use x's attributes\n+        def _keep_attrs(attrs, context):\n+            if attrs:  # If the original object has attributes, keep them\n+                return attrs\n+            return getattr(x, \"attrs\", {})  # Fallback to x's attributes\n+        keep_attrs = _keep_attrs\n \n     # alignment for three arguments is complicated, so don't support it yet\n     return apply_ufunc(\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/computation.py b/xarray/core/computation.py\nindex efa4478..bba5d70 100644\n--- a/xarray/core/computation.py\n+++ b/xarray/core/computation.py\n@@ -531,7 +531,11 @@ def where(cond, x, y, keep_attrs=None):\n     if keep_attrs is None:\n         keep_attrs = _get_keep_attrs(default=False)\n     if keep_attrs is True:\n-        keep_attrs = lambda attrs, context: getattr(x, 'attrs', {})\n+        def _keep_attrs(attrs, context):\n+            if attrs:\n+                return attrs\n+            return getattr(x, 'attrs', {})\n+        keep_attrs = _keep_attrs\n     return apply_ufunc(duck_array_ops.where, cond, x, y, join='exact', dataset_join='exact', dask='allowed', keep_attrs=keep_attrs)\n @overload\n def polyval(coord: DataArray, coeffs: DataArray, degree_dim: Hashable='degree') -> DataArray:\n", "normalized_occurrence": 1}
