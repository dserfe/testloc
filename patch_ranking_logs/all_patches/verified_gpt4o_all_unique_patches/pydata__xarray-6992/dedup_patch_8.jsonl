{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-6992", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1a9b7a7..62acb84 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -365,7 +365,7 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         )\n \n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return sum(1 for key in self._dataset._variables if key not in self._dataset._coord_names)\n \n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n@@ -376,7 +376,7 @@ class DataVariables(Mapping[Any, \"DataArray\"]):\n         raise KeyError(key)\n \n     def __repr__(self) -> str:\n-        return formatting.data_vars_repr(self)\n+        return formatting.data_vars_repr(self.variables)\n \n     @property\n     def variables(self) -> Mapping[Hashable, Variable]:\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex fa0ec48..f545aad 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -163,7 +163,7 @@ class DataVariables(Mapping[Any, 'DataArray']):\n     def __iter__(self) -> Iterator[Hashable]:\n         return (key for key in self._dataset._variables if key not in self._dataset._coord_names)\n     def __len__(self) -> int:\n-        return len(self._dataset._variables) - len(self._dataset._coord_names)\n+        return sum((1 for key in self._dataset._variables if key not in self._dataset._coord_names))\n     def __contains__(self, key: Hashable) -> bool:\n         return key in self._dataset._variables and key not in self._dataset._coord_names\n     def __getitem__(self, key: Hashable) -> DataArray:\n@@ -171,7 +171,7 @@ class DataVariables(Mapping[Any, 'DataArray']):\n             return cast('DataArray', self._dataset[key])\n         raise KeyError(key)\n     def __repr__(self) -> str:\n-        return formatting.data_vars_repr(self)\n+        return formatting.data_vars_repr(self.variables)\n     @property\n     def variables(self) -> Mapping[Hashable, Variable]:\n         all_variables = self._dataset.variables\n", "normalized_occurrence": 1}
