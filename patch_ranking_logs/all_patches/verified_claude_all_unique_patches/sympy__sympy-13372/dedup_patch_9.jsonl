{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13372", "model_patch": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex d47040b..ef64718 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1283,6 +1283,8 @@ def _create_evalf_table():\n \n def evalf(x, prec, options):\n     from sympy import re as re_, im as im_\n+    # Initialize reprec and imprec to None to avoid UnboundLocalError\n+    reprec = imprec = None\n     try:\n         rf = evalf_table[x.func]\n         r = rf(x, prec, options)\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex b36b650..5e3e5c2 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -770,6 +770,7 @@ def _create_evalf_table():\n     evalf_table = {Symbol: evalf_symbol, Dummy: evalf_symbol, Float: lambda x, prec, options: (x._mpf_, None, prec, None), Rational: lambda x, prec, options: (from_rational(x.p, x.q, prec), None, prec, None), Integer: lambda x, prec, options: (from_int(x.p, prec), None, prec, None), Zero: lambda x, prec, options: (None, None, prec, None), One: lambda x, prec, options: (fone, None, prec, None), Half: lambda x, prec, options: (fhalf, None, prec, None), Pi: lambda x, prec, options: (mpf_pi(prec), None, prec, None), Exp1: lambda x, prec, options: (mpf_e(prec), None, prec, None), ImaginaryUnit: lambda x, prec, options: (None, fone, None, prec), NegativeOne: lambda x, prec, options: (fnone, None, prec, None), NaN: lambda x, prec, options: (fnan, None, prec, None), exp: lambda x, prec, options: evalf_pow(Pow(S.Exp1, x.args[0], evaluate=False), prec, options), cos: evalf_trig, sin: evalf_trig, Add: evalf_add, Mul: evalf_mul, Pow: evalf_pow, log: evalf_log, atan: evalf_atan, Abs: evalf_abs, re: evalf_re, im: evalf_im, floor: evalf_floor, ceiling: evalf_ceiling, Integral: evalf_integral, Sum: evalf_sum, Product: evalf_prod, Piecewise: evalf_piecewise, bernoulli: evalf_bernoulli}\n def evalf(x, prec, options):\n     from sympy import re as re_, im as im_\n+    reprec = imprec = None\n     try:\n         rf = evalf_table[x.func]\n         r = rf(x, prec, options)\n", "normalized_occurrence": 1}
