{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..2b8d26d 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -106,7 +106,11 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n         return expr\n \n     expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n+    try:\n+        result = expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n+    except TypeError:\n+        return expr  # If conversion is not possible, return the original expression\n+    return result\n \n \n def quantity_simplify(expr):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..056fcff 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -42,7 +42,11 @@ def convert_to(expr, target_units, unit_system='SI'):\n     if depmat is None:\n         return expr\n     expr_scale_factor = get_total_scale_factor(expr)\n-    return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n+    try:\n+        result = expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n+    except TypeError:\n+        return expr\n+    return result\n def quantity_simplify(expr):\n     if expr.is_Atom or not expr.has(Prefix, Quantity):\n         return expr\n", "normalized_occurrence": 1}
