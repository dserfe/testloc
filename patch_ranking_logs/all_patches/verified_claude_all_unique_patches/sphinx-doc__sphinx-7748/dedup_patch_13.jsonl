{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-7748", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 5ead82c..6fe8603 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1037,14 +1037,14 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str = None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is \"\n                           \"deprecated.\" % self.__class__.__name__,\n                           RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             # no lines in docstring, no match\n             if not doclines:\n@@ -1066,7 +1066,7 @@ class DocstringSignatureMixin:\n             tab_width = self.directive.state.document.settings.tab_width  # type: ignore\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]),\n                                                         tabsize=tab_width)\n-            result = args, retann\n+            results.append((args, retann))\n             # don't look any further\n             break\n         return result\n@@ -1085,9 +1085,13 @@ class DocstringSignatureMixin:\n         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore\n             # only act if a signature is not explicitly given already, and if\n             # the feature is enabled\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = args, retann\n+                    signatures.append(super().format_signature(**kwargs))  # type: ignore\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)  # type: ignore\n \n \n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 4087d22..88014d7 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -754,12 +754,12 @@ class DocstringSignatureMixin:\n     feature of reading the signature from the docstring.\n     \"\"\"\n \n-    def _find_signature(self, encoding: str=None) -> Tuple[str, str]:\n+    def _find_signature(self, encoding: str=None) -> List[Tuple[str, str]]:\n         if encoding is not None:\n             warnings.warn(\"The 'encoding' argument to autodoc.%s._find_signature() is deprecated.\" % self.__class__.__name__, RemovedInSphinx40Warning, stacklevel=2)\n         docstrings = self.get_doc()\n         self._new_docstrings = docstrings[:]\n-        result = None\n+        results = []\n         for i, doclines in enumerate(docstrings):\n             if not doclines:\n                 continue\n@@ -776,7 +776,7 @@ class DocstringSignatureMixin:\n                 continue\n             tab_width = self.directive.state.document.settings.tab_width\n             self._new_docstrings[i] = prepare_docstring('\\n'.join(doclines[1:]), tabsize=tab_width)\n-            result = (args, retann)\n+            results.append((args, retann))\n             break\n         return result\n \n@@ -790,9 +790,13 @@ class DocstringSignatureMixin:\n \n     def format_signature(self, **kwargs: Any) -> str:\n         if self.args is None and self.env.config.autodoc_docstring_signature:\n-            result = self._find_signature()\n-            if result is not None:\n-                self.args, self.retann = result\n+            results = self._find_signature()\n+            if results:\n+                signatures = []\n+                for args, retann in results:\n+                    self.args, self.retann = (args, retann)\n+                    signatures.append(super().format_signature(**kwargs))\n+                return '\\n'.join(signatures)\n         return super().format_signature(**kwargs)\n \n class DocstringStripSignatureMixin(DocstringSignatureMixin):\n", "normalized_occurrence": 1}
