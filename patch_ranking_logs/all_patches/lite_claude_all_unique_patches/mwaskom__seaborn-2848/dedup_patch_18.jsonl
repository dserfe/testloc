{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-2848", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 21c0562..7a63a7e 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1565,10 +1565,19 @@ class PairGrid(Grid):\n         else:\n             hue = data.get(self._hue_var)\n \n-        if \"hue\" not in kwargs:\n-            kwargs.update({\n-                \"hue\": hue, \"hue_order\": self._hue_order, \"palette\": self._orig_palette,\n-            })\n+        if \"hue\" in kwargs:\n+            if isinstance(kwargs[\"hue\"], (pd.Series, pd.DataFrame)):\n+                if len(kwargs[\"hue\"]) != len(x):\n+                    raise ValueError(\"hue data must be same length as x and y\")\n+                hue = kwargs[\"hue\"]\n+            else:\n+                hue = kwargs[\"hue\"]\n+        \n+        kwargs.update({\n+            \"hue\": hue,\n+            \"hue_order\": kwargs.get(\"hue_order\", self._hue_order),\n+            \"palette\": kwargs.get(\"palette\", self._orig_palette),\n+        })\n         func(x=x, y=y, **kwargs)\n \n         self._update_legend_data(ax)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 0807052..543ea4f 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -747,8 +747,14 @@ class PairGrid(Grid):\n             hue = None\n         else:\n             hue = data.get(self._hue_var)\n-        if 'hue' not in kwargs:\n-            kwargs.update({'hue': hue, 'hue_order': self._hue_order, 'palette': self._orig_palette})\n+        if 'hue' in kwargs:\n+            if isinstance(kwargs['hue'], (pd.Series, pd.DataFrame)):\n+                if len(kwargs['hue']) != len(x):\n+                    raise ValueError('hue data must be same length as x and y')\n+                hue = kwargs['hue']\n+            else:\n+                hue = kwargs['hue']\n+        kwargs.update({'hue': hue, 'hue_order': kwargs.get('hue_order', self._hue_order), 'palette': kwargs.get('palette', self._orig_palette)})\n         func(x=x, y=y, **kwargs)\n         self._update_legend_data(ax)\n     def _plot_bivariate_iter_hue(self, x_var, y_var, ax, func, **kwargs):\n", "normalized_occurrence": 1}
