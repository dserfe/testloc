{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 5b43615..249d15a 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -1631,10 +1631,39 @@ class Plotter:\n             ax = sub[\"ax\"]\n             for axis in \"xy\":\n                 axis_key = sub[axis]\n+                axis_obj = getattr(ax, f\"{axis}axis\")\n \n-                # Axis limits\n-                if axis_key in p._limits:\n-                    convert_units = getattr(ax, f\"{axis}axis\").convert_units\n+                # Check if this is a nominal scale\n+                scale = p._scales.get(axis_key)\n+                is_nominal = hasattr(scale, \"_is_nominal\") if scale is not None else False\n+\n+                # Handle nominal scale behaviors\n+                if is_nominal:\n+                    # Hide grid for nominal scales\n+                    ax.grid(False, axis=axis)\n+                    \n+                    # Invert y axis for nominal scales\n+                    if axis == \"y\":\n+                        ax.invert_yaxis()\n+\n+                    # Set limits with +/- 0.5 padding\n+                    convert_units = axis_obj.convert_units\n+                    if axis_key in p._limits:\n+                        a, b = p._limits[axis_key]\n+                        lo = a if a is None else convert_units(a)\n+                        hi = b if b is None else convert_units(b)\n+                    else:\n+                        # Get current limits if not explicitly set\n+                        lo, hi = getattr(ax, f\"get_{axis}lim\")()\n+                    \n+                    # Add padding for nominal scales\n+                    lo = cast(float, lo) - 0.5\n+                    hi = cast(float, hi) + 0.5\n+                    ax.set(**{f\"{axis}lim\": (lo, hi)})\n+                    \n+                # Handle normal limit setting for non-nominal scales\n+                elif axis_key in p._limits:\n+                    convert_units = axis_obj.convert_units\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n@@ -1646,4 +1675,4 @@ class Plotter:\n \n         engine_default = None if p._target is not None else \"tight\"\n         layout_engine = p._layout_spec.get(\"engine\", engine_default)\n-        set_layout_engine(self._figure, layout_engine)\n+        set_layout_engine(self._figure, layout_engine)\ndiff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..bc412d4 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -155,6 +155,9 @@ class Nominal(Scale):\n             new = new.tick()\n         if new._label_params is None:\n             new = new.label()\n+            \n+        # Mark this as a nominal scale for later use\n+        new._is_nominal = True\n \n         # TODO flexibility over format() which isn't great for numbers / dates\n         stringify = np.vectorize(format)\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..7353a34 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -85,6 +85,7 @@ class Nominal(Scale):\n             new = new.tick()\n         if new._label_params is None:\n             new = new.label()\n+        new._is_nominal = True\n         stringify = np.vectorize(format)\n         units_seed = categorical_order(data, new.order)\n         class CatScale(mpl.scale.LinearScale):\ndiff --git a/seaborn/_core/plot.py b/seaborn/_core/plot.py\nindex 860ca1c..aa9a134 100644\n--- a/seaborn/_core/plot.py\n+++ b/seaborn/_core/plot.py\n@@ -749,8 +749,25 @@ class Plotter:\n             ax = sub['ax']\n             for axis in 'xy':\n                 axis_key = sub[axis]\n-                if axis_key in p._limits:\n-                    convert_units = getattr(ax, f'{axis}axis').convert_units\n+                axis_obj = getattr(ax, f'{axis}axis')\n+                scale = p._scales.get(axis_key)\n+                is_nominal = hasattr(scale, '_is_nominal') if scale is not None else False\n+                if is_nominal:\n+                    ax.grid(False, axis=axis)\n+                    if axis == 'y':\n+                        ax.invert_yaxis()\n+                    convert_units = axis_obj.convert_units\n+                    if axis_key in p._limits:\n+                        a, b = p._limits[axis_key]\n+                        lo = a if a is None else convert_units(a)\n+                        hi = b if b is None else convert_units(b)\n+                    else:\n+                        lo, hi = getattr(ax, f'get_{axis}lim')()\n+                    lo = cast(float, lo) - 0.5\n+                    hi = cast(float, hi) + 0.5\n+                    ax.set(**{f'{axis}lim': (lo, hi)})\n+                elif axis_key in p._limits:\n+                    convert_units = axis_obj.convert_units\n                     a, b = p._limits[axis_key]\n                     lo = a if a is None else convert_units(a)\n                     hi = b if b is None else convert_units(b)\n", "normalized_occurrence": 1}
