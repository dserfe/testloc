{"model_name_or_path": "agentless", "instance_id": "django__django-15902", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex de2af81..145bca7 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -134,6 +134,7 @@ class BaseFormSet(RenderableFormMixin):\n                 and not self._non_form_errors\n                 and not any(form_errors for form_errors in self._errors)\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n         return \"<%s: bound=%s valid=%s total_forms=%s>\" % (\n             self.__class__.__qualname__,\n             self.is_bound,\n@@ -151,6 +152,7 @@ class BaseFormSet(RenderableFormMixin):\n                 prefix=self.prefix,\n                 renderer=self.renderer,\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n             form.full_clean()\n         else:\n             form = ManagementForm(\n@@ -164,6 +166,7 @@ class BaseFormSet(RenderableFormMixin):\n                 },\n                 renderer=self.renderer,\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n         return form\n \n     def total_form_count(self):\n@@ -176,6 +179,7 @@ class BaseFormSet(RenderableFormMixin):\n             return min(\n                 self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n         else:\n             initial_forms = self.initial_form_count()\n             total_forms = max(initial_forms, self.min_num) + self.extra\n@@ -275,6 +279,7 @@ class BaseFormSet(RenderableFormMixin):\n             raise AttributeError(\n                 \"'%s' object has no attribute 'cleaned_data'\" % self.__class__.__name__\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n         return [form.cleaned_data for form in self.forms]\n \n     @property\n@@ -304,6 +309,7 @@ class BaseFormSet(RenderableFormMixin):\n             raise AttributeError(\n                 \"'%s' object has no attribute 'ordered_forms'\" % self.__class__.__name__\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n         # Construct _ordering, which is a list of (form_index, order_field_value)\n         # tuples. After constructing this list, we'll sort it by order_field_value\n         # so we have a way to get to the form indexes in the order specified\n@@ -415,6 +421,7 @@ class BaseFormSet(RenderableFormMixin):\n                 },\n                 code=\"missing_management_form\",\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n             self._non_form_errors.append(error)\n \n         for i, form in enumerate(self.forms):\n@@ -457,6 +464,7 @@ class BaseFormSet(RenderableFormMixin):\n                 error_class=\"nonform\",\n                 renderer=self.renderer,\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n \n     def clean(self):\n         \"\"\"\n@@ -495,6 +503,7 @@ class BaseFormSet(RenderableFormMixin):\n                 required=False,\n                 widget=self.get_deletion_widget(),\n             )\n+            form.template_name = \"django/forms/management_form.html\"\n \n     def add_prefix(self, index):\n         return \"%s-%s\" % (self.prefix, index)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 93e6290..93ce15c 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -64,18 +64,22 @@ class BaseFormSet(RenderableFormMixin):\n             is_valid = 'Unknown'\n         else:\n             is_valid = self.is_bound and (not self._non_form_errors) and (not any((form_errors for form_errors in self._errors)))\n+            form.template_name = 'django/forms/management_form.html'\n         return '<%s: bound=%s valid=%s total_forms=%s>' % (self.__class__.__qualname__, self.is_bound, is_valid, self.total_form_count())\n     @cached_property\n     def management_form(self):\n         if self.is_bound:\n             form = ManagementForm(self.data, auto_id=self.auto_id, prefix=self.prefix, renderer=self.renderer)\n+            form.template_name = 'django/forms/management_form.html'\n             form.full_clean()\n         else:\n             form = ManagementForm(auto_id=self.auto_id, prefix=self.prefix, initial={TOTAL_FORM_COUNT: self.total_form_count(), INITIAL_FORM_COUNT: self.initial_form_count(), MIN_NUM_FORM_COUNT: self.min_num, MAX_NUM_FORM_COUNT: self.max_num}, renderer=self.renderer)\n+            form.template_name = 'django/forms/management_form.html'\n         return form\n     def total_form_count(self):\n         if self.is_bound:\n             return min(self.management_form.cleaned_data[TOTAL_FORM_COUNT], self.absolute_max)\n+            form.template_name = 'django/forms/management_form.html'\n         else:\n             initial_forms = self.initial_form_count()\n             total_forms = max(initial_forms, self.min_num) + self.extra\n@@ -126,6 +130,7 @@ class BaseFormSet(RenderableFormMixin):\n     def cleaned_data(self):\n         if not self.is_valid():\n             raise AttributeError(\"'%s' object has no attribute 'cleaned_data'\" % self.__class__.__name__)\n+            form.template_name = 'django/forms/management_form.html'\n         return [form.cleaned_data for form in self.forms]\n     @property\n     def deleted_forms(self):\n@@ -143,6 +148,7 @@ class BaseFormSet(RenderableFormMixin):\n     def ordered_forms(self):\n         if not self.is_valid() or not self.can_order:\n             raise AttributeError(\"'%s' object has no attribute 'ordered_forms'\" % self.__class__.__name__)\n+            form.template_name = 'django/forms/management_form.html'\n         if not hasattr(self, '_ordering'):\n             self._ordering = []\n             for i, form in enumerate(self.forms):\n@@ -193,6 +199,7 @@ class BaseFormSet(RenderableFormMixin):\n             return\n         if not self.management_form.is_valid():\n             error = ValidationError(self.error_messages['missing_management_form'], params={'field_names': ', '.join((self.management_form.add_prefix(field_name) for field_name in self.management_form.errors))}, code='missing_management_form')\n+            form.template_name = 'django/forms/management_form.html'\n             self._non_form_errors.append(error)\n         for i, form in enumerate(self.forms):\n             if not form.has_changed() and i >= self.initial_form_count():\n@@ -209,6 +216,7 @@ class BaseFormSet(RenderableFormMixin):\n             self.clean()\n         except ValidationError as e:\n             self._non_form_errors = self.error_class(e.error_list, error_class='nonform', renderer=self.renderer)\n+            form.template_name = 'django/forms/management_form.html'\n     def clean(self):\n         pass\n     def has_changed(self):\n@@ -222,6 +230,7 @@ class BaseFormSet(RenderableFormMixin):\n                 form.fields[ORDERING_FIELD_NAME] = IntegerField(label=_('Order'), required=False, widget=self.get_ordering_widget())\n         if self.can_delete and (self.can_delete_extra or index < initial_form_count):\n             form.fields[DELETION_FIELD_NAME] = BooleanField(label=_('Delete'), required=False, widget=self.get_deletion_widget())\n+            form.template_name = 'django/forms/management_form.html'\n     def add_prefix(self, index):\n         return '%s-%s' % (self.prefix, index)\n     def is_multipart(self):\n", "normalized_occurrence": 1}
