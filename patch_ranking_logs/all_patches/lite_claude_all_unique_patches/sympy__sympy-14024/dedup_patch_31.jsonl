{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-14024", "model_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex 0a340d5..edbf6c2 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -325,6 +325,11 @@ class Pow(Expr):\n             s = 1\n         elif b.is_polar:  # e.g. exp_polar, besselj, var('p', polar=True)...\n             s = 1\n+        elif b.is_negative and other.is_real and not e.is_integer:\n+            # For negative bases with non-integer exponent, handle with care\n+            # to maintain consistent branch cuts\n+            base = -b\n+            return (-1)**(e*other) * Pow(base, e*other)\n         elif e.is_real is not None:\n             # helper functions ===========================\n             def _half(e):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/power.py b/sympy/core/power.py\nindex f12eb85..82fee20 100644\n--- a/sympy/core/power.py\n+++ b/sympy/core/power.py\n@@ -159,6 +159,9 @@ class Pow(Expr):\n             s = 1\n         elif b.is_polar:\n             s = 1\n+        elif b.is_negative and other.is_real and (not e.is_integer):\n+            base = -b\n+            return (-1) ** (e * other) * Pow(base, e * other)\n         elif e.is_real is not None:\n             def _half(e):\n                 if getattr(e, 'q', None) == 2:\n", "normalized_occurrence": 1}
