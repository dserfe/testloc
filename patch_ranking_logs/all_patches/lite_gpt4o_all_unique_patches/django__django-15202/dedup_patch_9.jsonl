{"model_name_or_path": "agentless", "instance_id": "django__django-15202", "model_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex bd1f78e..9954526 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -115,25 +115,25 @@ class URLValidator(RegexValidator):\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:  # for example, \"Invalid IPv6 URL\"\n+                except (ValueError, UnicodeError):  # for example, \"Invalid IPv6 URL\" or invalid domain part\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n-                try:\n+                else:\n                     netloc = punycode(netloc)  # IDN -> ACE\n-                except UnicodeError:  # invalid domain part\n-                    raise e\n-                url = urlunsplit((scheme, netloc, path, query, fragment))\n-                super().__call__(url)\n+                    url = urlunsplit((scheme, netloc, path, query, fragment))\n+                    super().__call__(url)\n             else:\n-                raise\n+                raise e\n         else:\n-            # Now verify IPv6 in the netloc part\n-            host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n+            try:\n+                # Now verify IPv6 in the netloc part\n+                host_match = re.search(r'^\\[(.+)\\](?::\\d{1,5})?$', urlsplit(value).netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n                     validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValueError: # for example, \"Invalid IPv6 URL\"\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValidationError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n \n         # The maximum length of a full host name is 253 characters per RFC 1034\n         # section 3.1. It's defined to be 255 bytes or less, but this includes\n", "occurrence": 1, "normalized_patch": "diff --git a/django/core/validators.py b/django/core/validators.py\nindex debbb3b..0a67c4a 100644\n--- a/django/core/validators.py\n+++ b/django/core/validators.py\n@@ -68,24 +68,24 @@ class URLValidator(RegexValidator):\n             if value:\n                 try:\n                     scheme, netloc, path, query, fragment = urlsplit(value)\n-                except ValueError:\n+                except (ValueError, UnicodeError):\n                     raise ValidationError(self.message, code=self.code, params={'value': value})\n-                try:\n+                else:\n                     netloc = punycode(netloc)\n-                except UnicodeError:\n-                    raise e\n-                url = urlunsplit((scheme, netloc, path, query, fragment))\n-                super().__call__(url)\n+                    url = urlunsplit((scheme, netloc, path, query, fragment))\n+                    super().__call__(url)\n             else:\n-                raise\n+                raise e\n         else:\n-            host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n-            if host_match:\n-                potential_ip = host_match[1]\n-                try:\n+            try:\n+                host_match = re.search('^\\\\[(.+)\\\\](?::\\\\d{1,5})?$', urlsplit(value).netloc)\n+                if host_match:\n+                    potential_ip = host_match[1]\n                     validate_ipv6_address(potential_ip)\n-                except ValidationError:\n-                    raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValueError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n+            except ValidationError:\n+                raise ValidationError(self.message, code=self.code, params={'value': value})\n         if len(urlsplit(value).hostname) > 253:\n             raise ValidationError(self.message, code=self.code, params={'value': value})\n integer_validator = RegexValidator(_lazy_re_compile('^-?\\\\d+\\\\Z'), message=_('Enter a valid integer.'), code='invalid')\n", "normalized_occurrence": 1}
