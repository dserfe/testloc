{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3407", "model_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 29c361e..51bf74d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1258,8 +1258,8 @@ class PairGrid(Grid):\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n \n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+        self.x_vars = x_vars = list(map(lambda x: \"_\".join(map(str, x)) if isinstance(x, tuple) else x, x_vars))\n+        self.y_vars = y_vars = list(map(lambda x: \"_\".join(map(str, x)) if isinstance(x, tuple) else x, y_vars))\n         self.square_grid = self.x_vars == self.y_vars\n \n         if not x_vars:\n@@ -1291,7 +1291,8 @@ class PairGrid(Grid):\n \n         self._figure = fig\n         self.axes = axes\n-        self.data = data\n+        self.data = data.copy()\n+        self.data.columns = [\"_\".join(map(str, col)) if isinstance(col, tuple) else col for col in self.data.columns]\n \n         # Save what we are going to do with the diagonal\n         self.diag_sharey = diag_sharey\n", "occurrence": 1, "normalized_patch": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 039b44a..318f7e8 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -548,8 +548,8 @@ class PairGrid(Grid):\n             x_vars = [x_vars]\n         if np.isscalar(y_vars):\n             y_vars = [y_vars]\n-        self.x_vars = x_vars = list(x_vars)\n-        self.y_vars = y_vars = list(y_vars)\n+        self.x_vars = x_vars = list(map(lambda x: '_'.join(map(str, x)) if isinstance(x, tuple) else x, x_vars))\n+        self.y_vars = y_vars = list(map(lambda x: '_'.join(map(str, x)) if isinstance(x, tuple) else x, y_vars))\n         self.square_grid = self.x_vars == self.y_vars\n         if not x_vars:\n             raise ValueError('No variables found for grid columns.')\n@@ -567,7 +567,8 @@ class PairGrid(Grid):\n                 axes[i, j] = None\n         self._figure = fig\n         self.axes = axes\n-        self.data = data\n+        self.data = data.copy()\n+        self.data.columns = ['_'.join(map(str, col)) if isinstance(col, tuple) else col for col in self.data.columns]\n         self.diag_sharey = diag_sharey\n         self.diag_vars = None\n         self.diag_axes = None\n", "normalized_occurrence": 1}
