{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13757", "model_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex e95085e..1bbcf8e 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -368,12 +368,20 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, need to check the key doesn't exist\n+        lhs, lhs_params = self.lhs.preprocess_lhs(compiler, connection)\n+        if connection.settings_dict['ENGINE'] != 'django.db.backends.oracle':\n+            return super().as_sql(compiler, connection)\n+        sql = \"NOT EXISTS (SELECT 1 FROM JSON_TABLE(%s, '$' COLUMNS (%s PATH '$.%s')) WHERE %s IS NOT NULL)\"\n+        return sql % (self.lhs.lhs.field.column, self.lhs.key_name, self.lhs.key_name, self.lhs.key_name), lhs_params\n \n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        # For isnull=True, need to check the key doesn't exist\n+        lhs, lhs_params = self.lhs.preprocess_lhs(compiler, connection)\n+        sql = \"NOT json_type(%s, '$.%s') IS NOT NULL\"\n+        return sql % (lhs, self.lhs.key_name), lhs_params\n \n \n class KeyTransformIn(lookups.In):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py\nindex f589080..00c73bc 100644\n--- a/django/db/models/fields/json.py\n+++ b/django/db/models/fields/json.py\n@@ -241,11 +241,17 @@ class KeyTransformIsNull(lookups.IsNull):\n     def as_oracle(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_oracle(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs, lhs_params = self.lhs.preprocess_lhs(compiler, connection)\n+        if connection.settings_dict['ENGINE'] != 'django.db.backends.oracle':\n+            return super().as_sql(compiler, connection)\n+        sql = \"NOT EXISTS (SELECT 1 FROM JSON_TABLE(%s, '$' COLUMNS (%s PATH '$.%s')) WHERE %s IS NOT NULL)\"\n+        return (sql % (self.lhs.lhs.field.column, self.lhs.key_name, self.lhs.key_name, self.lhs.key_name), lhs_params)\n     def as_sqlite(self, compiler, connection):\n         if not self.rhs:\n             return HasKey(self.lhs.lhs, self.lhs.key_name).as_sqlite(compiler, connection)\n-        return super().as_sql(compiler, connection)\n+        lhs, lhs_params = self.lhs.preprocess_lhs(compiler, connection)\n+        sql = \"NOT json_type(%s, '$.%s') IS NOT NULL\"\n+        return (sql % (lhs, self.lhs.key_name), lhs_params)\n class KeyTransformIn(lookups.In):\n     def resolve_expression_parameter(self, compiler, connection, sql, param):\n         sql, params = super().resolve_expression_parameter(compiler, connection, sql, param)\n", "normalized_occurrence": 1}
