{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18087", "model_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex 5205b6e..81d0652 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -344,7 +344,11 @@ class sin(TrigonometricFunction):\n         if arg.is_zero:\n             return S.Zero\n \n-        if isinstance(arg, asin):\n+        if isinstance(arg, sqrt):\n+            base = arg.args[0]\n+            if isinstance(base, sin):\n+                return Abs(base)\n+        elif isinstance(arg, asin):\n             return arg.args[0]\n \n         if isinstance(arg, atan):\n@@ -672,7 +676,11 @@ class cos(TrigonometricFunction):\n             y, x = arg.args\n             return x / sqrt(x**2 + y**2)\n \n-        if isinstance(arg, asin):\n+        if isinstance(arg, sqrt):\n+            base = arg.args[0]\n+            if isinstance(base, sin):\n+                return Abs(base)\n+        elif isinstance(arg, asin):\n             x = arg.args[0]\n             return sqrt(1 - x ** 2)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/functions/elementary/trigonometric.py b/sympy/functions/elementary/trigonometric.py\nindex bfdabb3..8ae31d5 100644\n--- a/sympy/functions/elementary/trigonometric.py\n+++ b/sympy/functions/elementary/trigonometric.py\n@@ -193,7 +193,11 @@ class sin(TrigonometricFunction):\n                 return sin(m) * cos(x) + cos(m) * sin(x)\n         if arg.is_zero:\n             return S.Zero\n-        if isinstance(arg, asin):\n+        if isinstance(arg, sqrt):\n+            base = arg.args[0]\n+            if isinstance(base, sin):\n+                return Abs(base)\n+        elif isinstance(arg, asin):\n             return arg.args[0]\n         if isinstance(arg, atan):\n             x = arg.args[0]\n@@ -393,7 +397,11 @@ class cos(TrigonometricFunction):\n         if isinstance(arg, atan2):\n             y, x = arg.args\n             return x / sqrt(x ** 2 + y ** 2)\n-        if isinstance(arg, asin):\n+        if isinstance(arg, sqrt):\n+            base = arg.args[0]\n+            if isinstance(base, sin):\n+                return Abs(base)\n+        elif isinstance(arg, asin):\n             x = arg.args[0]\n             return sqrt(1 - x ** 2)\n         if isinstance(arg, acot):\n", "normalized_occurrence": 1}
