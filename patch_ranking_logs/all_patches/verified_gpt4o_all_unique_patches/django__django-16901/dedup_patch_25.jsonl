{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..c0bada3 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -61,8 +61,14 @@ class Q(tree.Node):\n             return self.copy()\n \n         obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            # XOR operation should be true if an odd number of arguments are true\n+            existing_children = self.children if self.connector == self.XOR else [self]\n+            new_children = other.children if other.connector == self.XOR else [other]\n+            obj.children = existing_children + new_children\n+        else:\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n \n     def __or__(self, other):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..74e3a57 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -28,8 +28,13 @@ class Q(tree.Node):\n         if not other and isinstance(other, Q):\n             return self.copy()\n         obj = self.create(connector=conn)\n-        obj.add(self, conn)\n-        obj.add(other, conn)\n+        if conn == self.XOR:\n+            existing_children = self.children if self.connector == self.XOR else [self]\n+            new_children = other.children if other.connector == self.XOR else [other]\n+            obj.children = existing_children + new_children\n+        else:\n+            obj.add(self, conn)\n+            obj.add(other, conn)\n         return obj\n     def __or__(self, other):\n         return self._combine(other, self.OR)\n", "normalized_occurrence": 1}
