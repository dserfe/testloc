{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-25638", "model_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex db3f82e..1bd75f6 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -48,6 +48,7 @@ def unique_labels(*ys):\n         - mix of multilabel and multiclass (single label) targets\n         - mix of label indicator matrix and anything else,\n           because there are no explicit labels)\n+        - mix of nullable pandas dtypes and other dtypes\n         - mix of label indicator matrices of different sizes\n         - mix of string and integer labels\n \n@@ -74,6 +75,14 @@ def unique_labels(*ys):\n     array([ 1,  2,  5, 10, 11])\n     \"\"\"\n     xp, is_array_api = get_namespace(*ys)\n+    \n+    # Convert nullable pandas dtypes to their non-nullable counterparts\n+    ys = [\n+        y.astype(\"float64\" if y.dtype.name == \"Float64\" else \"int64\" if y.dtype.name == \"Int64\" else \"bool\")\n+        if hasattr(y, \"dtype\") and y.dtype.name in [\"Int64\", \"Float64\", \"boolean\"]\n+        else y\n+        for y in ys\n+    ]\n     if not ys:\n         raise ValueError(\"No argument has been passed.\")\n     # Check that we don't mix label format\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex dee4b2a..9c3faa1 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -18,6 +18,7 @@ def _unique_indicator(y):\n _FN_UNIQUE_LABELS = {'binary': _unique_multiclass, 'multiclass': _unique_multiclass, 'multilabel-indicator': _unique_indicator}\n def unique_labels(*ys):\n     xp, is_array_api = get_namespace(*ys)\n+    ys = [y.astype('float64' if y.dtype.name == 'Float64' else 'int64' if y.dtype.name == 'Int64' else 'bool') if hasattr(y, 'dtype') and y.dtype.name in ['Int64', 'Float64', 'boolean'] else y for y in ys]\n     if not ys:\n         raise ValueError('No argument has been passed.')\n     ys_types = set((type_of_target(x) for x in ys))\n", "normalized_occurrence": 1}
