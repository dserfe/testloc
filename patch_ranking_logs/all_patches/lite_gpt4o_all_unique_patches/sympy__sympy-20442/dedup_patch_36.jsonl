{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-20442", "model_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex f42b6a4..e39328f 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -105,6 +105,14 @@ def convert_to(expr, target_units, unit_system=\"SI\"):\n     if depmat is None:\n         return expr\n \n+    # Check if the units are orthogonal\n+    expr_dim = unit_system.get_dimensional_dependencies(expr, mark_dimensionless=True)\n+    target_dims = [unit_system.get_dimensional_dependencies(u, mark_dimensionless=True) for u in target_units]\n+\n+    # If any dimension in expr is not in target_dims, return the original expression\n+    if any(expr_dim.get(dim, 0) != 0 and all(target_dim.get(dim, 0) == 0 for target_dim in target_dims) for dim in expr_dim):\n+        return expr\n+\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter((1/get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat))\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py\nindex 8deb785..8028f94 100644\n--- a/sympy/physics/units/util.py\n+++ b/sympy/physics/units/util.py\n@@ -41,6 +41,10 @@ def convert_to(expr, target_units, unit_system='SI'):\n     depmat = _get_conversion_matrix_for_expr(expr, target_units, unit_system)\n     if depmat is None:\n         return expr\n+    expr_dim = unit_system.get_dimensional_dependencies(expr, mark_dimensionless=True)\n+    target_dims = [unit_system.get_dimensional_dependencies(u, mark_dimensionless=True) for u in target_units]\n+    if any((expr_dim.get(dim, 0) != 0 and all((target_dim.get(dim, 0) == 0 for target_dim in target_dims)) for dim in expr_dim)):\n+        return expr\n     expr_scale_factor = get_total_scale_factor(expr)\n     return expr_scale_factor * Mul.fromiter(((1 / get_total_scale_factor(u) * u) ** p for u, p in zip(target_units, depmat)))\n def quantity_simplify(expr):\n", "normalized_occurrence": 1}
