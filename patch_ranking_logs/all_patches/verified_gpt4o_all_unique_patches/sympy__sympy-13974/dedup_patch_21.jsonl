{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-13974", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 153c783..bbcc91f 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -239,6 +239,12 @@ class TensorProduct(Expr):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n \n     def _eval_expand_tensorproduct(self, **hints):\n+        from sympy import Pow\n+\n+        if isinstance(self, Pow):\n+            base = self.base._eval_expand_tensorproduct(**hints)\n+            exp = self.exp\n+            return Pow(base, exp)._eval_expand_tensorproduct(**hints)\n         \"\"\"Distribute TensorProducts across addition.\"\"\"\n         args = self.args\n         add_args = []\n@@ -346,6 +352,9 @@ def tensor_product_simp_Mul(e):\n \n \n def tensor_product_simp(e, **hints):\n+    if isinstance(e, Pow) and isinstance(e.base, TensorProduct):\n+        base = tensor_product_simp(e.base)\n+        return TensorProduct(*[arg**e.exp for arg in base.args])\n     \"\"\"Try to simplify and combine TensorProducts.\n \n     In general this will try to pull expressions inside of ``TensorProducts``.\n@@ -390,4 +399,4 @@ def tensor_product_simp(e, **hints):\n     elif isinstance(e, AntiCommutator):\n         return AntiCommutator(*[tensor_product_simp(arg) for arg in e.args])\n     else:\n-        return e\n+        return e\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex e23a275..1941fdf 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -109,6 +109,12 @@ class TensorProduct(Expr):\n     def doit(self, **hints):\n         return TensorProduct(*[item.doit(**hints) for item in self.args])\n     def _eval_expand_tensorproduct(self, **hints):\n+        from sympy import Pow\n+        if isinstance(self, Pow):\n+            base = self.base._eval_expand_tensorproduct(**hints)\n+            exp = self.exp\n+            return Pow(base, exp)._eval_expand_tensorproduct(**hints)\n+        'Distribute TensorProducts across addition.'\n         args = self.args\n         add_args = []\n         stop = False\n@@ -158,6 +164,10 @@ def tensor_product_simp_Mul(e):\n     else:\n         return e\n def tensor_product_simp(e, **hints):\n+    if isinstance(e, Pow) and isinstance(e.base, TensorProduct):\n+        base = tensor_product_simp(e.base)\n+        return TensorProduct(*[arg ** e.exp for arg in base.args])\n+    \"Try to simplify and combine TensorProducts.\\n\\n    In general this will try to pull expressions inside of ``TensorProducts``.\\n    It currently only works for relatively simple cases where the products have\\n    only scalars, raw ``TensorProducts``, not ``Add``, ``Pow``, ``Commutators``\\n    of ``TensorProducts``. It is best to see what it does by showing examples.\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy.physics.quantum import tensor_product_simp\\n    >>> from sympy.physics.quantum import TensorProduct\\n    >>> from sympy import Symbol\\n    >>> A = Symbol('A',commutative=False)\\n    >>> B = Symbol('B',commutative=False)\\n    >>> C = Symbol('C',commutative=False)\\n    >>> D = Symbol('D',commutative=False)\\n\\n    First see what happens to products of tensor products:\\n\\n    >>> e = TensorProduct(A,B)*TensorProduct(C,D)\\n    >>> e\\n    AxB*CxD\\n    >>> tensor_product_simp(e)\\n    (A*C)x(B*D)\\n\\n    This is the core logic of this function, and it works inside, powers, sums,\\n    commutators and anticommutators as well:\\n\\n    >>> tensor_product_simp(e**2)\\n    (A*C)x(B*D)**2\\n\\n    \"\n     if isinstance(e, Add):\n         return Add(*[tensor_product_simp(arg) for arg in e.args])\n     elif isinstance(e, Pow):\n", "normalized_occurrence": 1}
