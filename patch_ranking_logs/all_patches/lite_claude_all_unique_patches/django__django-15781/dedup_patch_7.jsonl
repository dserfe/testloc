{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..3908a7d 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -129,6 +129,25 @@ class DjangoHelpFormatter(HelpFormatter):\n \n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n+        \n+    def _split_lines(self, text, width):\n+        \"\"\"\n+        Preserve newlines in help text while still wrapping when necessary.\n+        \"\"\"\n+        text = self._whitespace_matcher.sub(' ', text).strip()\n+        # Preserve newlines but remove excessive whitespace\n+        lines = [line.strip() for line in text.splitlines()]\n+        # Wrap each line individually to respect newlines\n+        wrapped_lines = []\n+        for line in lines:\n+            # If line is empty, preserve it\n+            if not line:\n+                wrapped_lines.append('')\n+                continue\n+            # Wrap the line if it's longer than width\n+            wrapped = textwrap._wrap_chunks(textwrap.wrap(line, width), width)\n+            wrapped_lines.extend(wrapped)\n+        return wrapped_lines\n \n \n class OutputWrapper(TextIOBase):\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def _split_lines(self, text, width):\n+        text = self._whitespace_matcher.sub(' ', text).strip()\n+        lines = [line.strip() for line in text.splitlines()]\n+        wrapped_lines = []\n+        for line in lines:\n+            if not line:\n+                wrapped_lines.append('')\n+                continue\n+            wrapped = textwrap._wrap_chunks(textwrap.wrap(line, width), width)\n+            wrapped_lines.extend(wrapped)\n+        return wrapped_lines", "normalized_occurrence": 1}
