{"model_name_or_path": "agentless", "instance_id": "django__django-15563", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex df46b1e..a0f50b8 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -969,7 +969,8 @@ class QuerySet:\n         query. No signals are sent and there is no protection for cascades.\n         \"\"\"\n         query = self.query.clone()\n-        query.__class__ = sql.DeleteQuery\n+        query.__class__ = sql.UpdateQuery\n+        query.add_update_values(values)\n         cursor = query.get_compiler(using).execute_sql(CURSOR)\n         if cursor:\n             with cursor:\n@@ -987,7 +988,7 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError(\"Cannot update a query once a slice has been taken.\")\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        query = self.query.chain(sql.UpdateQuery, self.model)\n         query.add_update_values(kwargs)\n         # Clear any annotations so that they won't be present in subqueries.\n         query.annotations = {}\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 1c22d92..d9499fd 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -520,7 +520,8 @@ class QuerySet:\n     delete.queryset_only = True\n     def _raw_delete(self, using):\n         query = self.query.clone()\n-        query.__class__ = sql.DeleteQuery\n+        query.__class__ = sql.UpdateQuery\n+        query.add_update_values(values)\n         cursor = query.get_compiler(using).execute_sql(CURSOR)\n         if cursor:\n             with cursor:\n@@ -532,7 +533,7 @@ class QuerySet:\n         if self.query.is_sliced:\n             raise TypeError('Cannot update a query once a slice has been taken.')\n         self._for_write = True\n-        query = self.query.chain(sql.UpdateQuery)\n+        query = self.query.chain(sql.UpdateQuery, self.model)\n         query.add_update_values(kwargs)\n         query.annotations = {}\n         with transaction.mark_for_rollback_on_error(using=self.db):\n", "normalized_occurrence": 1}
