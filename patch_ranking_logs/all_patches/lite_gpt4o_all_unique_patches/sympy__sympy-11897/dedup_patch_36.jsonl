{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-11897", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 6f6ac51..f1ee6d8 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -399,13 +399,11 @@ class LatexPrinter(Printer):\n             sdenom = convert(denom)\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] \\\n-                    and ldenom <= 2 and not \"^\" in sdenom:\n-                # handle short fractions\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += r\"\\left(%s\\right) / %s\" % (snumer, sdenom)\n-                else:\n-                    tex += r\"%s / %s\" % (snumer, sdenom)\n+            if self._settings['fold_short_frac'] and \\\n+                    (ldenom <= 2 and not \"^\" in sdenom and \\\n+                     len(snumer.split()) <= 2 and not \"^\" in snumer):\n+                # handle short fractions symmetrically\n+                tex += r\"%s / %s\" % (snumer, sdenom)\n             elif len(snumer.split()) > ratio*ldenom:\n                 # handle long fractions\n                 if self._needs_mul_brackets(numer, last=True):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex df1a5c2..fcd3ec8 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -196,11 +196,8 @@ class LatexPrinter(Printer):\n             sdenom = convert(denom)\n             ldenom = len(sdenom.split())\n             ratio = self._settings['long_frac_ratio']\n-            if self._settings['fold_short_frac'] and ldenom <= 2 and (not '^' in sdenom):\n-                if self._needs_mul_brackets(numer, last=False):\n-                    tex += '\\\\left(%s\\\\right) / %s' % (snumer, sdenom)\n-                else:\n-                    tex += '%s / %s' % (snumer, sdenom)\n+            if self._settings['fold_short_frac'] and (ldenom <= 2 and (not '^' in sdenom) and (len(snumer.split()) <= 2) and (not '^' in snumer)):\n+                tex += '%s / %s' % (snumer, sdenom)\n             elif len(snumer.split()) > ratio * ldenom:\n                 if self._needs_mul_brackets(numer, last=True):\n                     tex += '\\\\frac{1}{%s}%s\\\\left(%s\\\\right)' % (sdenom, separator, snumer)\n", "normalized_occurrence": 1}
