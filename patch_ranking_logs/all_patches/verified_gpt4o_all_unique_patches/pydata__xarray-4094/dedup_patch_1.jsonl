{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4094", "model_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 1e17b93..3e63e27 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -3458,7 +3458,9 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                     assign_coords[dim] = None\n \n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            # Avoid adding variable_dim if stacking_dims is empty\n+            if stacking_dims:\n+                expand_dims.add(variable_dim)\n             # must be list for .expand_dims\n             expand_dims = list(expand_dims)\n \n@@ -3490,7 +3492,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n     def _unstack_once(self, dim: Hashable, fill_value, sparse) -> \"Dataset\":\n         index = self.get_index(dim)\n         index = remove_unused_levels_categories(index)\n-        full_idx = pd.MultiIndex.from_product(index.levels, names=index.names)\n+        if len(index.levels) > 1:\n+            full_idx = pd.MultiIndex.from_product(index.levels, names=index.names)\n+        else:\n+            full_idx = index\n \n         # take a shortcut in case the MultiIndex was not modified.\n         if index.equals(full_idx):\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py\nindex 21ef2a4..abcb412 100644\n--- a/xarray/core/dataset.py\n+++ b/xarray/core/dataset.py\n@@ -1151,7 +1151,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n                 if dim not in val.dims:\n                     assign_coords[dim] = None\n             expand_dims = set(stacking_dims).difference(set(val.dims))\n-            expand_dims.add(variable_dim)\n+            if stacking_dims:\n+                expand_dims.add(variable_dim)\n             expand_dims = list(expand_dims)\n             return val.assign_coords(**assign_coords).expand_dims(expand_dims).stack({new_dim: (variable_dim,) + stacking_dims})\n         stackable_vars = [ensure_stackable(self[key]) for key in self.data_vars]\n@@ -1166,7 +1167,10 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):\n     def _unstack_once(self, dim: Hashable, fill_value, sparse) -> 'Dataset':\n         index = self.get_index(dim)\n         index = remove_unused_levels_categories(index)\n-        full_idx = pd.MultiIndex.from_product(index.levels, names=index.names)\n+        if len(index.levels) > 1:\n+            full_idx = pd.MultiIndex.from_product(index.levels, names=index.names)\n+        else:\n+            full_idx = index\n         if index.equals(full_idx):\n             obj = self\n         else:\n", "normalized_occurrence": 1}
