{"model_name_or_path": "agentless_claude", "instance_id": "django__django-12284", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 77c04dd..29a9bb2 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,7 +945,18 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        # Use model's field choices rather than field.flatchoices to handle inheritance\n+        choices = getattr(self.__class__, field.name).field.choices\n+        if choices is None:\n+            return force_str(value, strings_only=True)\n+        choices_dict = {}\n+        for choice in choices:\n+            if isinstance(choice[1], (list, tuple)):\n+                # This is an optgroup, so look inside the group for options\n+                for option in choice[1]:\n+                    choices_dict[make_hashable(option[0])] = option[1]\n+            else:\n+                choices_dict[make_hashable(choice[0])] = choice[1]\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 0ae5317..b33dcf3 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -502,7 +502,16 @@ class Model(metaclass=ModelBase):\n     delete.alters_data = True\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        choices = getattr(self.__class__, field.name).field.choices\n+        if choices is None:\n+            return force_str(value, strings_only=True)\n+        choices_dict = {}\n+        for choice in choices:\n+            if isinstance(choice[1], (list, tuple)):\n+                for option in choice[1]:\n+                    choices_dict[make_hashable(option[0])] = option[1]\n+            else:\n+                choices_dict[make_hashable(choice[0])] = choice[1]\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n         if not self.pk:\n", "normalized_occurrence": 1}
