{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8551", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex f44a82b..bc0c7ed 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -86,8 +86,15 @@ def type_to_xref(text: str, env: BuildEnvironment = None) -> addnodes.pending_xr\n         reftype = 'class'\n \n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'),\n-                  'py:class': env.ref_context.get('py:class')}\n+        current_module = env.ref_context.get('py:module')\n+        current_class = env.ref_context.get('py:class')\n+        kwargs = {'py:module': current_module,\n+                  'py:class': current_class}\n+        # Adjust text to include current module and class if not qualified\n+        if current_module and not '.' in text:\n+            text = f\"{current_module}.{text}\"\n+        if current_class and not '.' in text:\n+            text = f\"{current_class}.{text}\"\n     else:\n         kwargs = {}\n \n@@ -1298,9 +1305,16 @@ class PythonDomain(Domain):\n         matches = self.find_obj(env, modname, clsname, target,\n                                 type, searchmode)\n \n-        if not matches and type == 'attr':\n-            # fallback to meth (for property)\n-            matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n+        if not matches:\n+            # Try to resolve within the current module context first\n+            if modname:\n+                matches = self.find_obj(env, None, None, f\"{modname}.{target}\", type, searchmode)\n+            if not matches and clsname:\n+                matches = self.find_obj(env, None, None, f\"{clsname}.{target}\", type, searchmode)\n+            if not matches:\n+                if type == 'attr':\n+                    # fallback to meth (for property)\n+                    matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n \n         if not matches:\n             return None\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 2ce105a..9aad851 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -40,7 +40,13 @@ def type_to_xref(text: str, env: BuildEnvironment=None) -> addnodes.pending_xref\n     else:\n         reftype = 'class'\n     if env:\n-        kwargs = {'py:module': env.ref_context.get('py:module'), 'py:class': env.ref_context.get('py:class')}\n+        current_module = env.ref_context.get('py:module')\n+        current_class = env.ref_context.get('py:class')\n+        kwargs = {'py:module': current_module, 'py:class': current_class}\n+        if current_module and (not '.' in text):\n+            text = f'{current_module}.{text}'\n+        if current_class and (not '.' in text):\n+            text = f'{current_class}.{text}'\n     else:\n         kwargs = {}\n     return pending_xref('', nodes.Text(text), refdomain='py', reftype=reftype, reftarget=text, **kwargs)\n@@ -784,8 +790,14 @@ class PythonDomain(Domain):\n         clsname = node.get('py:class')\n         searchmode = 1 if node.hasattr('refspecific') else 0\n         matches = self.find_obj(env, modname, clsname, target, type, searchmode)\n-        if not matches and type == 'attr':\n-            matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n+        if not matches:\n+            if modname:\n+                matches = self.find_obj(env, None, None, f'{modname}.{target}', type, searchmode)\n+            if not matches and clsname:\n+                matches = self.find_obj(env, None, None, f'{clsname}.{target}', type, searchmode)\n+            if not matches:\n+                if type == 'attr':\n+                    matches = self.find_obj(env, modname, clsname, target, 'meth', searchmode)\n         if not matches:\n             return None\n         elif len(matches) > 1:\n", "normalized_occurrence": 1}
