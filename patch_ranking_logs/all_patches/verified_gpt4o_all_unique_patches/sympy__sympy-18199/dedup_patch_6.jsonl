{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-18199", "model_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex 632624f..70476aa 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -770,6 +770,13 @@ def nthroot_mod(a, n, p, all_roots=False):\n     a, n, p = as_int(a), as_int(n), as_int(p)\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n+    # check if a % p == 0 and add 0 to the results if so\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        else:\n+            return 0\n+\n     # see Hackman \"Elementary Number Theory\" (2009), page 76\n     if not is_nthpow_residue(a, n, p):\n         return None\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/ntheory/residue_ntheory.py b/sympy/ntheory/residue_ntheory.py\nindex abeb252..f763a71 100644\n--- a/sympy/ntheory/residue_ntheory.py\n+++ b/sympy/ntheory/residue_ntheory.py\n@@ -458,6 +458,11 @@ def nthroot_mod(a, n, p, all_roots=False):\n     a, n, p = (as_int(a), as_int(n), as_int(p))\n     if n == 2:\n         return sqrt_mod(a, p, all_roots)\n+    if a % p == 0:\n+        if all_roots:\n+            return [0]\n+        else:\n+            return 0\n     if not is_nthpow_residue(a, n, p):\n         return None\n     if not isprime(p):\n", "normalized_occurrence": 2}
