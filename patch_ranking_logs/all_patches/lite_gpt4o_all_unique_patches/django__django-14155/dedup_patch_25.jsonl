{"model_name_or_path": "agentless", "instance_id": "django__django-14155", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 43e675a..a581e7d 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -20,6 +20,7 @@ from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n+import functools\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n from django.utils.translation import get_language\n@@ -32,6 +33,10 @@ from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n         self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + tuple(args)\n+            self.kwargs = {**func.keywords, **kwargs}\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -59,8 +64,11 @@ class ResolverMatch:\n         return (self.func, self.args, self.kwargs)[index]\n \n     def __repr__(self):\n+        func_path = self._func_path\n+        if isinstance(self.func, functools.partial):\n+            func_path = self.func.func.__module__ + '.' + self.func.func.__name__\n         return \"ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)\" % (\n-            self._func_path, self.args, self.kwargs, self.url_name,\n+            func_path, self.args, self.kwargs, self.url_name,\n             self.app_names, self.namespaces, self.route,\n         )\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 8f64f28..7a20e94 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -11,6 +11,7 @@ from django.core.checks.urls import check_resolver\n from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist\n from django.utils.datastructures import MultiValueDict\n from django.utils.functional import cached_property\n+import functools\n from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes\n from django.utils.regex_helper import _lazy_re_compile, normalize\n from django.utils.translation import get_language\n@@ -20,6 +21,10 @@ from .utils import get_callable\n class ResolverMatch:\n     def __init__(self, func, args, kwargs, url_name=None, app_names=None, namespaces=None, route=None, tried=None):\n         self.func = func\n+        if isinstance(func, functools.partial):\n+            self.func = func.func\n+            self.args = func.args + tuple(args)\n+            self.kwargs = {**func.keywords, **kwargs}\n         self.args = args\n         self.kwargs = kwargs\n         self.url_name = url_name\n@@ -38,7 +43,10 @@ class ResolverMatch:\n     def __getitem__(self, index):\n         return (self.func, self.args, self.kwargs)[index]\n     def __repr__(self):\n-        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (self._func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n+        func_path = self._func_path\n+        if isinstance(self.func, functools.partial):\n+            func_path = self.func.func.__module__ + '.' + self.func.func.__name__\n+        return 'ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)' % (func_path, self.args, self.kwargs, self.url_name, self.app_names, self.namespaces, self.route)\n def get_resolver(urlconf=None):\n     if urlconf is None:\n         urlconf = settings.ROOT_URLCONF\n", "normalized_occurrence": 1}
