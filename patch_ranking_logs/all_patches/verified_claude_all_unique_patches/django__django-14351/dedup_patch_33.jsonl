{"model_name_or_path": "agentless_claude", "instance_id": "django__django-14351", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 9591387..eea491d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1175,6 +1175,12 @@ class Query(BaseExpression):\n             lookup_class = lhs.get_lookup(lookup_name)\n             if not lookup_class:\n                 return\n+        \n+        # For __in lookups with querysets, ensure we only select the PK to avoid \n+        # \"subquery must return only one column\" errors\n+        if lookup_name == 'in' and hasattr(rhs, 'query'):\n+            rhs.query.clear_select_clause()\n+            rhs.query.add_fields([rhs.model._meta.pk.name])\n \n         lookup = lookup_class(lhs, rhs)\n         # Interpret '__exact=None' as the sql 'is NULL'; otherwise, reject all\n", "normalized_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ec726d6..e19dfa7 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -645,6 +645,9 @@ class Query(BaseExpression):\n             lookup_class = lhs.get_lookup(lookup_name)\n             if not lookup_class:\n                 return\n+        if lookup_name == 'in' and hasattr(rhs, 'query'):\n+            rhs.query.clear_select_clause()\n+            rhs.query.add_fields([rhs.model._meta.pk.name])\n         lookup = lookup_class(lhs, rhs)\n         if lookup.rhs is None and (not lookup.can_use_none_as_rhs):\n             if lookup_name not in ('exact', 'iexact'):\n", "normalized_occurrence": 1}
