{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13660", "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 34fafcb..ba445c0 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -84,13 +84,18 @@ class Command(BaseCommand):\n     def handle(self, **options):\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            globals_dict = {}\n+            # Include all builtins by default\n+            globals_dict.update(__builtins__.__dict__)\n+            exec(options['command'], globals_dict)\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            globals_dict = {}\n+            globals_dict.update(__builtins__.__dict__)\n+            exec(sys.stdin.read(), globals_dict)\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n@@ -100,4 +105,4 @@ class Command(BaseCommand):\n                 return getattr(self, shell)(options)\n             except ImportError:\n                 pass\n-        raise CommandError(\"Couldn't import {} interface.\".format(shell))\n+        raise CommandError(\"Couldn't import {} interface.\".format(shell))\n", "normalized_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex f25e76c..066d87e 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -48,10 +48,14 @@ class Command(BaseCommand):\n         code.interact(local=imported_objects)\n     def handle(self, **options):\n         if options['command']:\n-            exec(options['command'])\n+            globals_dict = {}\n+            globals_dict.update(__builtins__.__dict__)\n+            exec(options['command'], globals_dict)\n             return\n         if sys.platform != 'win32' and (not sys.stdin.isatty()) and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            globals_dict = {}\n+            globals_dict.update(__builtins__.__dict__)\n+            exec(sys.stdin.read(), globals_dict)\n             return\n         available_shells = [options['interface']] if options['interface'] else self.shells\n         for shell in available_shells:\n", "normalized_occurrence": 1}
