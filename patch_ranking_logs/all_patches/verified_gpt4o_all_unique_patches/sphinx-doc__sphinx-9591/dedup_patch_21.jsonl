{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-9591", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 51811ca..619f241 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -33,6 +33,13 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n+\n+            # Handle properties specifically\n+            if inspect.isdatadescriptor(obj):\n+                if hasattr(obj, 'fget'):\n+                    fget_sig = inspect.signature(obj.fget, type_aliases=app.config.autodoc_type_aliases)\n+                    if fget_sig.return_annotation is not fget_sig.empty:\n+                        annotation['return'] = typing.stringify(fget_sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n \n@@ -61,7 +68,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_lists.append(field_list)\n \n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == \"all\":\n+            if app.config.autodoc_typehints_description_target == \"all\" or objtype == \"property\":\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 03a755b..3369f12 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -17,6 +17,11 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n                     annotation[param.name] = typing.stringify(param.annotation)\n             if sig.return_annotation is not sig.empty:\n                 annotation['return'] = typing.stringify(sig.return_annotation)\n+            if inspect.isdatadescriptor(obj):\n+                if hasattr(obj, 'fget'):\n+                    fget_sig = inspect.signature(obj.fget, type_aliases=app.config.autodoc_type_aliases)\n+                    if fget_sig.return_annotation is not fget_sig.empty:\n+                        annotation['return'] = typing.stringify(fget_sig.return_annotation)\n     except (TypeError, ValueError):\n         pass\n def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element) -> None:\n@@ -39,7 +44,7 @@ def merge_typehints(app: Sphinx, domain: str, objtype: str, contentnode: Element\n             field_list = insert_field_list(contentnode)\n             field_lists.append(field_list)\n         for field_list in field_lists:\n-            if app.config.autodoc_typehints_description_target == 'all':\n+            if app.config.autodoc_typehints_description_target == 'all' or objtype == 'property':\n                 modify_field_list(field_list, annotations[fullname])\n             else:\n                 augment_descriptions_with_types(field_list, annotations[fullname])\n", "normalized_occurrence": 1}
