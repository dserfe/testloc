{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-12419", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 8f30d0d..6e301ae 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -476,10 +476,8 @@ class Identity(MatrixExpr):\n         return self\n \n     def _entry(self, i, j):\n-        if i == j:\n-            return S.One\n-        else:\n-            return S.Zero\n+        from sympy import Piecewise, Eq\n+        return Piecewise((S.One, Eq(i, j)), (S.Zero, True))\n \n     def _eval_determinant(self):\n         return S.One\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex 9ec3ea5..04621b4 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -281,10 +281,8 @@ class Identity(MatrixExpr):\n     def conjugate(self):\n         return self\n     def _entry(self, i, j):\n-        if i == j:\n-            return S.One\n-        else:\n-            return S.Zero\n+        from sympy import Piecewise, Eq\n+        return Piecewise((S.One, Eq(i, j)), (S.Zero, True))\n     def _eval_determinant(self):\n         return S.One\n class ZeroMatrix(MatrixExpr):\n", "normalized_occurrence": 1}
