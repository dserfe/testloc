{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-26323", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex eec24f1..75dde85 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -302,6 +302,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         )\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n+        if self.remainder not in {\"passthrough\", \"drop\"}:\n+            _safe_set_output(self.remainder, transform=transform)\n+            _safe_set_output(trans, transform=transform)\n \n         return self\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 7a9d391..967acba 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -47,6 +47,9 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         transformers = (trans for _, trans, _ in chain(self.transformers, getattr(self, 'transformers_', [])) if trans not in {'passthrough', 'drop'})\n         for trans in transformers:\n             _safe_set_output(trans, transform=transform)\n+        if self.remainder not in {'passthrough', 'drop'}:\n+            _safe_set_output(self.remainder, transform=transform)\n+            _safe_set_output(trans, transform=transform)\n         return self\n     def get_params(self, deep=True):\n         return self._get_params('_transformers', deep=deep)\n", "normalized_occurrence": 1}
