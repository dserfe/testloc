{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..4c9d1d4 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -893,29 +893,41 @@ class ModelAdminChecks(BaseModelAdminChecks):\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n+            \n+        # First try to get it as a model field\n         try:\n             field = obj.model._meta.get_field(item)\n+            return []\n         except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n-                return [\n-                    checks.Error(\n-                        \"The value of '%s' refers to '%s', which is not a \"\n-                        \"callable, an attribute of '%s', or an attribute or \"\n-                        \"method on '%s'.\"\n-                        % (\n-                            label,\n-                            item,\n-                            obj.__class__.__name__,\n-                            obj.model._meta.label,\n-                        ),\n-                        obj=obj.__class__,\n-                        id=\"admin.E108\",\n-                    )\n-                ]\n+            pass\n+            \n+        # Then try as a model attribute or property\n+        try:\n+            field = getattr(obj.model, item)\n+            if callable(field) or isinstance(field, property):\n+                return []\n+        except AttributeError:\n+            pass\n+            \n+        # Finally check if it's a valid admin attribute\n+        if hasattr(obj, item) and callable(getattr(obj, item)):\n+            return []\n+            \n+        return [\n+            checks.Error(\n+                \"The value of '%s' refers to '%s', which is not a \"\n+                \"callable, an attribute of '%s', or an attribute or \"\n+                \"method on '%s'.\"\n+                % (\n+                    label,\n+                    item,\n+                    obj.__class__.__name__,\n+                    obj.model._meta.label,\n+                ),\n+                obj=obj.__class__,\n+                id=\"admin.E108\",\n+            )\n+        ]\n         if isinstance(field, models.ManyToManyField) or (\n             getattr(field, \"rel\", None) and field.rel.field.many_to_one\n         ):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..f586e71 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -335,15 +335,20 @@ class ModelAdminChecks(BaseModelAdminChecks):\n     def _check_list_display_item(self, obj, item, label):\n         if callable(item):\n             return []\n-        elif hasattr(obj, item):\n-            return []\n         try:\n             field = obj.model._meta.get_field(item)\n+            return []\n         except FieldDoesNotExist:\n-            try:\n-                field = getattr(obj.model, item)\n-            except AttributeError:\n-                return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n+            pass\n+        try:\n+            field = getattr(obj.model, item)\n+            if callable(field) or isinstance(field, property):\n+                return []\n+        except AttributeError:\n+            pass\n+        if hasattr(obj, item) and callable(getattr(obj, item)):\n+            return []\n+        return [checks.Error(\"The value of '%s' refers to '%s', which is not a callable, an attribute of '%s', or an attribute or method on '%s'.\" % (label, item, obj.__class__.__name__, obj.model._meta.label), obj=obj.__class__, id='admin.E108')]\n         if isinstance(field, models.ManyToManyField) or (getattr(field, 'rel', None) and field.rel.field.many_to_one):\n             return [checks.Error(f\"The value of '{label}' must not be a many-to-many field or a reverse foreign key.\", obj=obj.__class__, id='admin.E109')]\n         return []\n", "normalized_occurrence": 1}
