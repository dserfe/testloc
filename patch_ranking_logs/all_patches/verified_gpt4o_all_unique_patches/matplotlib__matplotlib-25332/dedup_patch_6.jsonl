{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 973eb1a..053346a 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -3174,6 +3174,11 @@ None}, default: None\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        # Remove weak references to avoid pickling errors.\n+        state['_align_label_groups'] = dict(self._align_label_groups)\n+\n+        for key, val in state['_align_label_groups'].items():\n+            state['_align_label_groups'][key] = [r() for r in val if r() is not None]\n         return state\n \n     def __setstate__(self, state):\n@@ -3188,7 +3193,11 @@ None}, default: None\n         self.__dict__ = state\n \n         # re-initialise some of the unstored state information\n+        import weakref\n         FigureCanvasBase(self)  # Set self.canvas.\n+        if '_align_label_groups' in state:\n+            self._align_label_groups = {key: [weakref.ref(item) for item in val]\n+                                        for key, val in state['_align_label_groups'].items()}\n \n         if restore_to_pylab:\n             # lazy import to avoid circularity\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 7796fb8..e804655 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -951,6 +951,9 @@ class Figure(FigureBase):\n         from matplotlib import _pylab_helpers\n         if self.canvas.manager in _pylab_helpers.Gcf.figs.values():\n             state['_restore_to_pylab'] = True\n+        state['_align_label_groups'] = dict(self._align_label_groups)\n+        for key, val in state['_align_label_groups'].items():\n+            state['_align_label_groups'][key] = [r() for r in val if r() is not None]\n         return state\n     def __setstate__(self, state):\n         version = state.pop('__mpl_version__')\n@@ -958,7 +961,10 @@ class Figure(FigureBase):\n         if version != mpl.__version__:\n             _api.warn_external(f'This figure was saved with matplotlib version {version} and is unlikely to function correctly.')\n         self.__dict__ = state\n+        import weakref\n         FigureCanvasBase(self)\n+        if '_align_label_groups' in state:\n+            self._align_label_groups = {key: [weakref.ref(item) for item in val] for key, val in state['_align_label_groups'].items()}\n         if restore_to_pylab:\n             import matplotlib.pyplot as plt\n             import matplotlib._pylab_helpers as pylab_helpers\n", "normalized_occurrence": 1}
