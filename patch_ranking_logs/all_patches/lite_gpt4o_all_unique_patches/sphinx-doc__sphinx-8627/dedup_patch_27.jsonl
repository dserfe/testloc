{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8627", "model_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 5f20d3a..cc37515 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -10,6 +10,7 @@\n \n import re\n from collections import OrderedDict\n+import struct\n from typing import Any, Dict, Iterable, cast\n \n from docutils import nodes\n@@ -27,7 +28,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any,\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            sig = inspect.signature(obj, type_aliases={**app.config.autodoc_type_aliases, 'Struct': struct.Struct})\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/autodoc/typehints.py b/sphinx/ext/autodoc/typehints.py\nindex 80cd509..2d39ff4 100644\n--- a/sphinx/ext/autodoc/typehints.py\n+++ b/sphinx/ext/autodoc/typehints.py\n@@ -1,5 +1,6 @@\n import re\n from collections import OrderedDict\n+import struct\n from typing import Any, Dict, Iterable, cast\n from docutils import nodes\n from docutils.nodes import Element\n@@ -11,7 +12,7 @@ def record_typehints(app: Sphinx, objtype: str, name: str, obj: Any, options: Di\n         if callable(obj):\n             annotations = app.env.temp_data.setdefault('annotations', {})\n             annotation = annotations.setdefault(name, OrderedDict())\n-            sig = inspect.signature(obj, type_aliases=app.config.autodoc_type_aliases)\n+            sig = inspect.signature(obj, type_aliases={**app.config.autodoc_type_aliases, 'Struct': struct.Struct})\n             for param in sig.parameters.values():\n                 if param.annotation is not param.empty:\n                     annotation[param.name] = typing.stringify(param.annotation)\n", "normalized_occurrence": 1}
