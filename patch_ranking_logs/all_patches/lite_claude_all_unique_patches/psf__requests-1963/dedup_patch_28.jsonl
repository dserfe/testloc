{"model_name_or_path": "agentless_claude", "instance_id": "psf__requests-1963", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 7fdc4a9..ddef353 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -87,8 +87,10 @@ class SessionRedirectMixin(object):\n \n         i = 0\n \n+        # Store the original request to use as a base for the first redirect\n+        previous_request = req\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = previous_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -180,6 +182,8 @@ class SessionRedirectMixin(object):\n \n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n \n+            # Update previous_request to use as base for next redirect\n+            previous_request = prepared_request\n             i += 1\n             yield resp\n \n", "occurrence": 1, "normalized_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 3875307..852f7e7 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -35,8 +35,9 @@ def merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n class SessionRedirectMixin(object):\n     def resolve_redirects(self, resp, req, stream=False, timeout=None, verify=True, cert=None, proxies=None):\n         i = 0\n+        previous_request = req\n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = previous_request.copy()\n             resp.content\n             if i >= self.max_redirects:\n                 raise TooManyRedirects('Exceeded %s redirects.' % self.max_redirects)\n@@ -82,6 +83,7 @@ class SessionRedirectMixin(object):\n                 prepared_request.prepare_auth(new_auth)\n             resp = self.send(prepared_request, stream=stream, timeout=timeout, verify=verify, cert=cert, proxies=proxies, allow_redirects=False)\n             extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n+            previous_request = prepared_request\n             i += 1\n             yield resp\n class Session(SessionRedirectMixin):\n", "normalized_occurrence": 1}
