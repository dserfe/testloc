{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16631", "model_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 718fbb5..75261b0 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -136,10 +136,12 @@ class AbstractBaseUser(models.Model):\n         Return an HMAC of the password field.\n         \"\"\"\n         key_salt = \"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"\n+        # Use both current and fallback keys for backward compatibility\n         return salted_hmac(\n             key_salt,\n             self.password,\n             algorithm=\"sha256\",\n+            fallback_keys=settings.SECRET_KEY_FALLBACKS,\n         ).hexdigest()\n \n     @classmethod\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py\nindex 04240b6..dc09a7a 100644\n--- a/django/contrib/auth/base_user.py\n+++ b/django/contrib/auth/base_user.py\n@@ -64,7 +64,7 @@ class AbstractBaseUser(models.Model):\n         return is_password_usable(self.password)\n     def get_session_auth_hash(self):\n         key_salt = 'django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash'\n-        return salted_hmac(key_salt, self.password, algorithm='sha256').hexdigest()\n+        return salted_hmac(key_salt, self.password, algorithm='sha256', fallback_keys=settings.SECRET_KEY_FALLBACKS).hexdigest()\n     @classmethod\n     def get_email_field_name(cls):\n         try:\n", "normalized_occurrence": 3}
