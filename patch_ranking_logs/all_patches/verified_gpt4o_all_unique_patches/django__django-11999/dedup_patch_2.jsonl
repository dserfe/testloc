{"model_name_or_path": "agentless", "instance_id": "django__django-11999", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex e63da1b..1012371 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -938,7 +938,11 @@ class Model(metaclass=ModelBase):\n \n     delete.alters_data = True\n \n-    def _get_FIELD_display(self, field):\n+    def get_FIELD_display(self, field):\n+        # Check if there's an overridden method\n+        custom_method = getattr(self, f'get_{field.name}_display', None)\n+        if custom_method:\n+            return custom_method()\n         value = getattr(self, field.attname)\n         # force_str() to coerce lazy strings.\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex f4898c2..ee24196 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -496,7 +496,10 @@ class Model(metaclass=ModelBase):\n         collector.collect([self], keep_parents=keep_parents)\n         return collector.delete()\n     delete.alters_data = True\n-    def _get_FIELD_display(self, field):\n+    def get_FIELD_display(self, field):\n+        custom_method = getattr(self, f'get_{field.name}_display', None)\n+        if custom_method:\n+            return custom_method()\n         value = getattr(self, field.attname)\n         return force_str(dict(field.flatchoices).get(value, value), strings_only=True)\n     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):\n", "normalized_occurrence": 1}
