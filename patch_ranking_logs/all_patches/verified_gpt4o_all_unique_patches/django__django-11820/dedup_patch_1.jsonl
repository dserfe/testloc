{"model_name_or_path": "agentless", "instance_id": "django__django-11820", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4c7a87c..3af91a0 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1713,14 +1713,17 @@ class Model(metaclass=ModelBase):\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                 except (FieldDoesNotExist, AttributeError):\n                     if fld is None or fld.get_transform(part) is None:\n-                        errors.append(\n-                            checks.Error(\n-                                \"'ordering' refers to the nonexistent field, \"\n-                                \"related field, or lookup '%s'.\" % field,\n-                                obj=cls,\n-                                id='models.E015',\n+                        if part == 'pk':\n+                            continue\n+                        else:\n+                            errors.append(\n+                                checks.Error(\n+                                    \"'ordering' refers to the nonexistent field, \"\n+                                    \"related field, or lookup '%s'.\" % field,\n+                                    obj=cls,\n+                                    id='models.E015',\n+                                )\n                             )\n-                        )\n \n         # Skip ordering on pk. This is always a valid order_by field\n         # but is an alias and therefore won't be found by opts.get_field.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex d3d0e2f..3ee51ab 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -879,7 +879,10 @@ class Model(metaclass=ModelBase):\n                         _cls = fld.get_path_info()[-1].to_opts.model\n                 except (FieldDoesNotExist, AttributeError):\n                     if fld is None or fld.get_transform(part) is None:\n-                        errors.append(checks.Error(\"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field, obj=cls, id='models.E015'))\n+                        if part == 'pk':\n+                            continue\n+                        else:\n+                            errors.append(checks.Error(\"'ordering' refers to the nonexistent field, related field, or lookup '%s'.\" % field, obj=cls, id='models.E015'))\n         fields = {f for f in fields if f != 'pk'}\n         invalid_fields = []\n         opts = cls._meta\n", "normalized_occurrence": 1}
