{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16229", "model_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 216b4cc..6291dca 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -517,9 +517,14 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n-        if callable(value):\n-            value = value()\n+        value = self.initial.get(field_name)\n+        if value is None:\n+            if field_name in self.data:\n+                value = self.data[field_name]\n+            else:\n+                value = field.initial\n+                if callable(value):\n+                    value = value()\n         # If this is an auto-generated default date, nix the microseconds\n         # for standardized handling. See #22502.\n         if (\n@@ -536,4 +541,4 @@ class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):\n     # self.fields is specified. This class (Form) is the one that does the\n     # fancy metaclass stuff purely for the semantic sugar -- it allows one\n     # to define a form using declarative syntax.\n-    # BaseForm itself has no way of designating self.fields.\n+    # BaseForm itself has no way of designating self.fields.\n", "occurrence": 1, "normalized_patch": "diff --git a/django/forms/forms.py b/django/forms/forms.py\nindex 4c02ff9..b24850b 100644\n--- a/django/forms/forms.py\n+++ b/django/forms/forms.py\n@@ -367,9 +367,14 @@ class BaseForm(RenderableFormMixin):\n         Return initial data for field on form. Use initial data from the form\n         or the field, in that order. Evaluate callable values.\n         \"\"\"\n-        value = self.initial.get(field_name, field.initial)\n-        if callable(value):\n-            value = value()\n+        value = self.initial.get(field_name)\n+        if value is None:\n+            if field_name in self.data:\n+                value = self.data[field_name]\n+            else:\n+                value = field.initial\n+                if callable(value):\n+                    value = value()\n         if isinstance(value, (datetime.datetime, datetime.time)) and (not field.widget.supports_microseconds):\n             value = value.replace(microsecond=0)\n         return value\n", "normalized_occurrence": 1}
