{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25332", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex 8ce3360..ce6e70d 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -753,6 +753,9 @@ class _AxesBase(martist.Artist):\n             for name in self._axis_names if self in self._shared_axes[name]}\n         state[\"_twinned_axes\"] = (self._twinned_axes.get_siblings(self)\n                                   if self in self._twinned_axes else None)\n+        # Weak references (like those introduced by align_labels) cannot be pickled\n+        import weakref\n+        state = {k: (v() if isinstance(v, weakref.ReferenceType) else v) for k, v in state.items()}\n         return state\n \n     def __setstate__(self, state):\n@@ -760,7 +763,10 @@ class _AxesBase(martist.Artist):\n         shared_axes = state.pop(\"_shared_axes\")\n         for name, shared_siblings in shared_axes.items():\n             self._shared_axes[name].join(*shared_siblings)\n-        twinned_siblings = state.pop(\"_twinned_axes\")\n+        import weakref\n+        \n+        # Restore weak references if needed\n+        twinned_siblings = {k: (weakref.ref(v) if isinstance(v, weakref.ReferenceType) else v) for k, v in state.pop(\"_twinned_axes\").items()}\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n         self.__dict__ = state\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex c4b1d48..c93d245 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -345,12 +345,15 @@ class _AxesBase(martist.Artist):\n         state = super().__getstate__()\n         state['_shared_axes'] = {name: self._shared_axes[name].get_siblings(self) for name in self._axis_names if self in self._shared_axes[name]}\n         state['_twinned_axes'] = self._twinned_axes.get_siblings(self) if self in self._twinned_axes else None\n+        import weakref\n+        state = {k: v() if isinstance(v, weakref.ReferenceType) else v for k, v in state.items()}\n         return state\n     def __setstate__(self, state):\n         shared_axes = state.pop('_shared_axes')\n         for name, shared_siblings in shared_axes.items():\n             self._shared_axes[name].join(*shared_siblings)\n-        twinned_siblings = state.pop('_twinned_axes')\n+        import weakref\n+        twinned_siblings = {k: weakref.ref(v) if isinstance(v, weakref.ReferenceType) else v for k, v in state.pop('_twinned_axes').items()}\n         if twinned_siblings:\n             self._twinned_axes.join(*twinned_siblings)\n         self.__dict__ = state\n", "normalized_occurrence": 1}
