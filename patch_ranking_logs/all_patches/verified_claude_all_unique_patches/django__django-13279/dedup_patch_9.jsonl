{"model_name_or_path": "agentless_claude", "instance_id": "django__django-13279", "model_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 5b06482..4d24dc2 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -104,6 +104,9 @@ class SessionBase:\n     def _hash(self, value):\n         # RemovedInDjango40Warning: pre-Django 3.1 format will be invalid.\n         key_salt = \"django.contrib.sessions\" + self.__class__.__name__\n+        # Use legacy hash method when using sha1 for backwards compatibility\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            return salted_hmac(key_salt, value, algorithm='sha1').hexdigest()\n         return salted_hmac(key_salt, value).hexdigest()\n \n     def encode(self, session_dict):\n", "normalized_patch": "diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py\nindex 25789fc..5df626a 100644\n--- a/django/contrib/sessions/backends/base.py\n+++ b/django/contrib/sessions/backends/base.py\n@@ -62,6 +62,8 @@ class SessionBase:\n         del self[self.TEST_COOKIE_NAME]\n     def _hash(self, value):\n         key_salt = 'django.contrib.sessions' + self.__class__.__name__\n+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':\n+            return salted_hmac(key_salt, value, algorithm='sha1').hexdigest()\n         return salted_hmac(key_salt, value).hexdigest()\n     def encode(self, session_dict):\n         return signing.dumps(session_dict, salt=self.key_salt, serializer=self.serializer, compress=True)\n", "normalized_occurrence": 1}
