{"model_name_or_path": "agentless_claude", "instance_id": "mwaskom__seaborn-3069", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 1e10d58..93fdd58 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -177,11 +177,25 @@ class Nominal(Scale):\n             name = None  # To work around mpl<3.4 compat issues\n \n             def set_default_locators_and_formatters(self, axis):\n-                ...\n-                # axis.set_major_locator(major_locator)\n-                # if minor_locator is not None:\n-                #     axis.set_minor_locator(minor_locator)\n-                # axis.set_major_formatter(major_formatter)\n+                # Set up locators and formatters\n+                major_locator = mpl.category.StrCategoryLocator({})\n+                formatter = mpl.category.StrCategoryFormatter({})\n+                axis.set_major_locator(major_locator)\n+                axis.set_major_formatter(formatter)\n+                \n+                # Disable grid by default for nominal scales\n+                axis.grid(False)\n+                \n+                # Add invisible artist with sticky edges to control margins\n+                if hasattr(axis, 'figure'):  # Only for real axes, not PseudoAxis\n+                    dummy = axis.figure.add_artist(mpl.patches.Rectangle(\n+                        (0, 0), 0, 0, visible=False, sticky_edges=True))\n+                    dummy.sticky_edges.x = [0, len(units_seed) - 1]\n+                    dummy.sticky_edges.y = [0, len(units_seed) - 1]\n+                    \n+                    # Invert y-axis if this is a y-axis\n+                    if isinstance(axis, mpl.axis.YAxis):\n+                        axis.set_inverted(True)\n \n         mpl_scale = CatScale(data.name)\n         if axis is None:\n@@ -190,7 +204,8 @@ class Nominal(Scale):\n             # TODO Currently just used in non-Coordinate contexts, but should\n             # we use this to (A) set the padding we want for categorial plots\n             # and (B) allow the values parameter for a Coordinate to set xlim/ylim\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            # Set view interval with padding for categorical-style display\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n \n         new._matplotlib_scale = mpl_scale\n \n", "occurrence": 2, "normalized_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 58a2cdb..631f695 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -90,11 +90,21 @@ class Nominal(Scale):\n         class CatScale(mpl.scale.LinearScale):\n             name = None\n             def set_default_locators_and_formatters(self, axis):\n-                ...\n+                major_locator = mpl.category.StrCategoryLocator({})\n+                formatter = mpl.category.StrCategoryFormatter({})\n+                axis.set_major_locator(major_locator)\n+                axis.set_major_formatter(formatter)\n+                axis.grid(False)\n+                if hasattr(axis, 'figure'):\n+                    dummy = axis.figure.add_artist(mpl.patches.Rectangle((0, 0), 0, 0, visible=False, sticky_edges=True))\n+                    dummy.sticky_edges.x = [0, len(units_seed) - 1]\n+                    dummy.sticky_edges.y = [0, len(units_seed) - 1]\n+                    if isinstance(axis, mpl.axis.YAxis):\n+                        axis.set_inverted(True)\n         mpl_scale = CatScale(data.name)\n         if axis is None:\n             axis = PseudoAxis(mpl_scale)\n-            axis.set_view_interval(0, len(units_seed) - 1)\n+            axis.set_view_interval(-0.5, len(units_seed) - 0.5)\n         new._matplotlib_scale = mpl_scale\n         axis.update_units(stringify(np.array(units_seed)))\n         def convert_units(x):\n", "normalized_occurrence": 2}
