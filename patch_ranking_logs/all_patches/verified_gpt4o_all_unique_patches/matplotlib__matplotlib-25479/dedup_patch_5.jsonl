{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25479", "model_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex 79762f1..2de0cc2 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -127,7 +127,10 @@ class ColormapRegistry(Mapping):\n         \"\"\"\n         _api.check_isinstance(colors.Colormap, cmap=cmap)\n \n-        name = name or cmap.name\n+        if name is None:\n+            name = cmap.name\n+        else:\n+            cmap = cmap.reversed(name) if name.endswith(\"_r\") else LinearSegmentedColormap(name, cmap._segmentdata, cmap.N, cmap._gamma)\n         if name in self:\n             if not force:\n                 # don't allow registering an already existing cmap\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py\nindex aa7fbd0..e3f9c7d 100644\n--- a/lib/matplotlib/cm.py\n+++ b/lib/matplotlib/cm.py\n@@ -35,7 +35,10 @@ class ColormapRegistry(Mapping):\n         return list(self)\n     def register(self, cmap, *, name=None, force=False):\n         _api.check_isinstance(colors.Colormap, cmap=cmap)\n-        name = name or cmap.name\n+        if name is None:\n+            name = cmap.name\n+        else:\n+            cmap = cmap.reversed(name) if name.endswith('_r') else LinearSegmentedColormap(name, cmap._segmentdata, cmap.N, cmap._gamma)\n         if name in self:\n             if not force:\n                 raise ValueError(f'A colormap named \"{name}\" is already registered.')\n", "normalized_occurrence": 1}
