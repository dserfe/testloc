{"model_name_or_path": "agentless", "instance_id": "django__django-10880", "model_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f03a228..996ac6d 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -107,13 +107,26 @@ class Count(Aggregate):\n     output_field = IntegerField()\n     allow_distinct = True\n \n-    def __init__(self, expression, filter=None, **extra):\n+    def __init__(self, expression, distinct=False, filter=None, **extra):\n         if expression == '*':\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        self.distinct = distinct\n         super().__init__(expression, filter=filter, **extra)\n \n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT'\n+            distinct_end = ')'\n+        else:\n+            self.function = 'COUNT'\n+            distinct_end = ''\n+        sql, params = super().as_sql(compiler, connection)\n+        if distinct_end:\n+            sql = f'{sql}{distinct_end}'\n+        return sql, params\n+\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n \n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/aggregates.py b/django/db/models/aggregates.py\nindex f40a983..352c8ae 100644\n--- a/django/db/models/aggregates.py\n+++ b/django/db/models/aggregates.py\n@@ -76,12 +76,24 @@ class Count(Aggregate):\n     name = 'Count'\n     output_field = IntegerField()\n     allow_distinct = True\n-    def __init__(self, expression, filter=None, **extra):\n+    def __init__(self, expression, distinct=False, filter=None, **extra):\n         if expression == '*':\n             expression = Star()\n         if isinstance(expression, Star) and filter is not None:\n             raise ValueError('Star cannot be used with filter. Please specify a field.')\n+        self.distinct = distinct\n         super().__init__(expression, filter=filter, **extra)\n+    def as_sql(self, compiler, connection):\n+        if self.distinct:\n+            self.function = 'COUNT(DISTINCT'\n+            distinct_end = ')'\n+        else:\n+            self.function = 'COUNT'\n+            distinct_end = ''\n+        sql, params = super().as_sql(compiler, connection)\n+        if distinct_end:\n+            sql = f'{sql}{distinct_end}'\n+        return (sql, params)\n     def convert_value(self, value, expression, connection):\n         return 0 if value is None else value\n class Max(Aggregate):\n", "normalized_occurrence": 1}
