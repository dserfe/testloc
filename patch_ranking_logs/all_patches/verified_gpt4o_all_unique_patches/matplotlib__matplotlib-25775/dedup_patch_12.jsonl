{"model_name_or_path": "agentless", "instance_id": "matplotlib__matplotlib-25775", "model_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex c2b18d4..39589ff 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -101,6 +101,20 @@ class Text(Artist):\n     def __repr__(self):\n         return f\"Text({self._x}, {self._y}, {self._text!r})\"\n \n+    def get_antialiased(self):\n+        \"\"\"Return the antialiased state of the text.\"\"\"\n+        return self._antialiased\n+\n+    def set_antialiased(self, aa):\n+        \"\"\"Set the antialiased state of the text.\n+\n+        Parameters\n+        ----------\n+        aa : bool\n+        \"\"\"\n+        self._antialiased = bool(aa)\n+        self.stale = True\n+\n     def __init__(self,\n                  x=0, y=0, text='', *,\n                  color=None,           # defaults to rc params\n@@ -150,6 +164,7 @@ class Text(Artist):\n             linespacing=linespacing,\n             rotation_mode=rotation_mode,\n         )\n+        self._antialiased = mpl.rcParams[\"text.antialiased\"]\n         self.update(kwargs)\n \n     def _reset_visual_defaults(\n@@ -757,6 +772,8 @@ class Text(Artist):\n                 else:\n                     textrenderer = renderer\n \n+                gc.set_antialiased(self.get_antialiased())\n+\n                 if self.get_usetex():\n                     textrenderer.draw_tex(gc, x, y, clean_line,\n                                           self._fontproperties, angle,\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\nindex 5c973cb..690f280 100644\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -41,11 +41,17 @@ class Text(Artist):\n     _charsize_cache = dict()\n     def __repr__(self):\n         return f'Text({self._x}, {self._y}, {self._text!r})'\n+    def get_antialiased(self):\n+        return self._antialiased\n+    def set_antialiased(self, aa):\n+        self._antialiased = bool(aa)\n+        self.stale = True\n     def __init__(self, x=0, y=0, text='', *, color=None, verticalalignment='baseline', horizontalalignment='left', multialignment=None, fontproperties=None, rotation=None, linespacing=None, rotation_mode=None, usetex=None, wrap=False, transform_rotates_text=False, parse_math=None, **kwargs):\n         super().__init__()\n         self._x, self._y = (x, y)\n         self._text = ''\n         self._reset_visual_defaults(text=text, color=color, fontproperties=fontproperties, usetex=usetex, parse_math=parse_math, wrap=wrap, verticalalignment=verticalalignment, horizontalalignment=horizontalalignment, multialignment=multialignment, rotation=rotation, transform_rotates_text=transform_rotates_text, linespacing=linespacing, rotation_mode=rotation_mode)\n+        self._antialiased = mpl.rcParams['text.antialiased']\n         self.update(kwargs)\n     def _reset_visual_defaults(self, text='', color=None, fontproperties=None, usetex=None, parse_math=None, wrap=False, verticalalignment='baseline', horizontalalignment='left', multialignment=None, rotation=None, transform_rotates_text=False, linespacing=None, rotation_mode=None):\n         self.set_text(text)\n@@ -384,6 +390,7 @@ class Text(Artist):\n                     textrenderer = PathEffectRenderer(self.get_path_effects(), renderer)\n                 else:\n                     textrenderer = renderer\n+                gc.set_antialiased(self.get_antialiased())\n                 if self.get_usetex():\n                     textrenderer.draw_tex(gc, x, y, clean_line, self._fontproperties, angle, mtext=mtext)\n                 else:\n", "normalized_occurrence": 1}
