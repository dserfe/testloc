{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-13551", "model_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex 65aca3f..0d5dc5a 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -255,6 +255,11 @@ class Product(ExprWithIntLimits):\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n \n+        elif term.has(2**k) or any(arg.is_Pow and arg.base == 2 and arg.exp.has(k) for arg in term.atoms(Pow)):\n+            # Handle exponential terms like 2**k specially\n+            if term.is_Add:\n+                return sum(self._eval_product(arg, (k, a, n)) for arg in term.args)\n+            return Mul(*[term.subs(k, a + i) for i in range(n - a + 1)])\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/concrete/products.py b/sympy/concrete/products.py\nindex f5dda77..bc87971 100644\n--- a/sympy/concrete/products.py\n+++ b/sympy/concrete/products.py\n@@ -61,6 +61,10 @@ class Product(ExprWithIntLimits):\n         dif = n - a\n         if dif.is_Integer:\n             return Mul(*[term.subs(k, a + i) for i in range(dif + 1)])\n+        elif term.has(2 ** k) or any((arg.is_Pow and arg.base == 2 and arg.exp.has(k) for arg in term.atoms(Pow))):\n+            if term.is_Add:\n+                return sum((self._eval_product(arg, (k, a, n)) for arg in term.args))\n+            return Mul(*[term.subs(k, a + i) for i in range(n - a + 1)])\n         elif term.is_polynomial(k):\n             poly = term.as_poly(k)\n             A = B = Q = S.One\n", "normalized_occurrence": 1}
