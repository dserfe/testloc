{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-21379", "model_patch": "diff --git a/sympy/core/assumptions.py b/sympy/core/assumptions.py\nindex 2d8fb91..0382753 100644\n--- a/sympy/core/assumptions.py\n+++ b/sympy/core/assumptions.py\n@@ -350,6 +350,12 @@ def failing_assumptions(expr, **assumptions):\n \n \n def check_assumptions(expr, against=None, **assume):\n+    # If expr is a Piecewise, check each piece individually\n+    if isinstance(expr, Piecewise):\n+        for piece in expr.args:\n+            if not check_assumptions(piece.expr, against, **assume):\n+                return False\n+        return True\n     \"\"\"\n     Checks whether assumptions of ``expr`` match the T/F assumptions\n     given (or possessed by ``against``). True is returned if all\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/core/assumptions.py b/sympy/core/assumptions.py\nindex 9e735a8..83dccc9 100644\n--- a/sympy/core/assumptions.py\n+++ b/sympy/core/assumptions.py\n@@ -38,6 +38,12 @@ def failing_assumptions(expr, **assumptions):\n             failed[k] = test\n     return failed\n def check_assumptions(expr, against=None, **assume):\n+    if isinstance(expr, Piecewise):\n+        for piece in expr.args:\n+            if not check_assumptions(piece.expr, against, **assume):\n+                return False\n+        return True\n+    \"\\n    Checks whether assumptions of ``expr`` match the T/F assumptions\\n    given (or possessed by ``against``). True is returned if all\\n    assumptions match; False is returned if there is a mismatch and\\n    the assumption in ``expr`` is not None; else None is returned.\\n\\n    Explanation\\n    ===========\\n\\n    *assume* is a dict of assumptions with True or False values\\n\\n    Examples\\n    ========\\n\\n    >>> from sympy import Symbol, pi, I, exp, check_assumptions\\n    >>> check_assumptions(-5, integer=True)\\n    True\\n    >>> check_assumptions(pi, real=True, integer=False)\\n    True\\n    >>> check_assumptions(pi, real=True, negative=True)\\n    False\\n    >>> check_assumptions(exp(I*pi/7), real=False)\\n    True\\n    >>> x = Symbol('x', real=True, positive=True)\\n    >>> check_assumptions(2*x + 1, real=True, positive=True)\\n    True\\n    >>> check_assumptions(-2*x - 5, real=True, positive=True)\\n    False\\n\\n    To check assumptions of *expr* against another variable or expression,\\n    pass the expression or variable as ``against``.\\n\\n    >>> check_assumptions(2*x + 1, x)\\n    True\\n\\n    ``None`` is returned if ``check_assumptions()`` could not conclude.\\n\\n    >>> check_assumptions(2*x - 1, x)\\n\\n    >>> z = Symbol('z')\\n    >>> check_assumptions(z, real=True)\\n\\n    See Also\\n    ========\\n\\n    failing_assumptions\\n\\n    \"\n     expr = sympify(expr)\n     if against:\n         if against is not None and assume:\n", "normalized_occurrence": 1}
