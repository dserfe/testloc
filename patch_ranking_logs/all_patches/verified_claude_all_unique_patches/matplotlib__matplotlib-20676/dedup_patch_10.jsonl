{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-20676", "model_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex a6bed3c..412ff28 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -2170,6 +2170,12 @@ class SpanSelector(_SelectorWidget):\n             self._active_handle = None\n \n         if self._active_handle is None or not self._interactive:\n+            # Save current axis limits\n+            if self.direction == 'horizontal':\n+                orig_xlim = self.ax.get_xlim()\n+            else:\n+                orig_ylim = self.ax.get_ylim()\n+                \n             # Clear previous rectangle before drawing new rectangle.\n             self.update()\n \n@@ -2188,6 +2194,12 @@ class SpanSelector(_SelectorWidget):\n             # We need to set the visibility back, so the span selector will be\n             # drawn when necessary (span width > 0)\n             self.visible = True\n+            \n+            # Restore original axis limits\n+            if self.direction == 'horizontal':\n+                self.ax.set_xlim(orig_xlim)\n+            else:\n+                self.ax.set_ylim(orig_ylim)\n         else:\n             self.set_visible(True)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py\nindex b2dd641..bd64afb 100644\n--- a/lib/matplotlib/widgets.py\n+++ b/lib/matplotlib/widgets.py\n@@ -1778,6 +1778,10 @@ class SpanSelector(_SelectorWidget):\n         else:\n             self._active_handle = None\n         if self._active_handle is None or not self._interactive:\n+            if self.direction == 'horizontal':\n+                orig_xlim = self.ax.get_xlim()\n+            else:\n+                orig_ylim = self.ax.get_ylim()\n             self.update()\n         v = event.xdata if self.direction == 'horizontal' else event.ydata\n         self._pressv = v\n@@ -1786,6 +1790,10 @@ class SpanSelector(_SelectorWidget):\n             self.visible = False\n             self.extents = (v, v)\n             self.visible = True\n+            if self.direction == 'horizontal':\n+                self.ax.set_xlim(orig_xlim)\n+            else:\n+                self.ax.set_ylim(orig_ylim)\n         else:\n             self.set_visible(True)\n         return False\n", "normalized_occurrence": 1}
