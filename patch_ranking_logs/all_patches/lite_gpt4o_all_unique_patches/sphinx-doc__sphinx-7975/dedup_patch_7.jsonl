{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-7975", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 44ea73a..5018ed5 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -150,7 +150,7 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+            if key[0:1].isalpha():\n                 key = chr(127) + key\n             return key\n \n@@ -165,7 +165,7 @@ class IndexEntries:\n                 if k.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                     k = k[1:]\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n+                if letter.isalpha():\n                     return letter\n                 else:\n                     # get all other symbols under one heading\n@@ -173,4 +173,4 @@ class IndexEntries:\n             else:\n                 return v[2]\n         return [(key_, list(group))\n-                for (key_, group) in groupby(newlist, keyfunc3)]\n+                for (key_, group) in groupby(newlist, keyfunc3)]\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 665aa6b..b0998d1 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -99,7 +99,7 @@ class IndexEntries:\n             key = unicodedata.normalize('NFD', entry[0].lower())\n             if key.startswith('\\u200f'):\n                 key = key[1:]\n-            if key[0:1].isalpha() or key.startswith('_'):\n+            if key[0:1].isalpha():\n                 key = chr(127) + key\n             return key\n         def keyfunc3(item: Tuple[str, List]) -> str:\n@@ -109,7 +109,7 @@ class IndexEntries:\n                 if k.startswith('\\u200f'):\n                     k = k[1:]\n                 letter = unicodedata.normalize('NFD', k[0])[0].upper()\n-                if letter.isalpha() or letter == '_':\n+                if letter.isalpha():\n                     return letter\n                 else:\n                     return _('Symbols')\n", "normalized_occurrence": 1}
