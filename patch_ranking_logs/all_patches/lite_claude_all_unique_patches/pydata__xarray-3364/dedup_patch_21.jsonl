{"model_name_or_path": "agentless_claude", "instance_id": "pydata__xarray-3364", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 1ac1b8e..f503bf2 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -1,3 +1,4 @@\n+\n import pandas as pd\n \n from . import dtypes, utils\n@@ -16,6 +17,7 @@ def concat(\n     positions=None,\n     fill_value=dtypes.NA,\n     join=\"outer\",\n+    ignore_missing=False,\n ):\n     \"\"\"Concatenate xarray objects along a new or existing dimension.\n \n@@ -128,7 +130,7 @@ def concat(\n             \"can only concatenate xarray Dataset and DataArray \"\n             \"objects, got %s\" % type(first_obj)\n         )\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing)\n \n \n def _calc_concat_dim_coord(dim):\n@@ -301,7 +303,9 @@ def _dataset_concat(\n \n     # determine which variables to concatentate\n     concat_over, equals, concat_dim_lengths = _calc_concat_over(\n-        datasets, dim, dim_names, data_vars, coords, compat\n+        datasets, dim, dim_names, data_vars if not ignore_missing else \"all\", \n+        coords if not ignore_missing else \"all\", \n+        \"no_conflicts\" if ignore_missing else compat\n     )\n \n     # determine which variables to merge, and then merge them according to compat\n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex 06e5a50..596532e 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -4,7 +4,7 @@ from .alignment import align\n from .merge import _VALID_COMPAT, unique_variable\n from .variable import IndexVariable, Variable, as_variable\n from .variable import concat as concat_vars\n-def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer'):\n+def concat(objs, dim, data_vars='all', coords='different', compat='equals', positions=None, fill_value=dtypes.NA, join='outer', ignore_missing=False):\n     from .dataset import Dataset\n     from .dataarray import DataArray\n     try:\n@@ -19,7 +19,7 @@ def concat(objs, dim, data_vars='all', coords='different', compat='equals', posi\n         f = _dataset_concat\n     else:\n         raise TypeError('can only concatenate xarray Dataset and DataArray objects, got %s' % type(first_obj))\n-    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join)\n+    return f(objs, dim, data_vars, coords, compat, positions, fill_value, join, ignore_missing)\n def _calc_concat_dim_coord(dim):\n     from .dataarray import DataArray\n     if isinstance(dim, str):\n@@ -120,7 +120,7 @@ def _dataset_concat(datasets, dim, data_vars, coords, compat, positions, fill_va\n     dims_sizes.pop(dim, None)\n     if (dim in coord_names or dim in data_names) and dim not in dim_names:\n         datasets = [ds.expand_dims(dim) for ds in datasets]\n-    concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, dim, dim_names, data_vars, coords, compat)\n+    concat_over, equals, concat_dim_lengths = _calc_concat_over(datasets, dim, dim_names, data_vars if not ignore_missing else 'all', coords if not ignore_missing else 'all', 'no_conflicts' if ignore_missing else compat)\n     variables_to_merge = (coord_names | data_names) - concat_over - dim_names\n     result_vars = {}\n     if variables_to_merge:\n", "normalized_occurrence": 1}
