{"model_name_or_path": "agentless", "instance_id": "django__django-12856", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..05ac8af 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -218,6 +218,17 @@ class Options:\n         return new_objs\n \n     def _prepare(self, model):\n+        # Validate that fields in unique constraints exist in the model\n+        for constraint in self.constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                for field_name in constraint.fields:\n+                    try:\n+                        self.get_field(field_name)\n+                    except FieldDoesNotExist:\n+                        raise ImproperlyConfigured(\n+                            \"UniqueConstraint contains a non-existent field: %s\" % field_name\n+                        )\n+\n         if self.order_with_respect_to:\n             # The app registry will not be ready at this point, so we cannot\n             # use get_field().\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..ef5abc2 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -134,6 +134,13 @@ class Options:\n             new_objs.append(obj)\n         return new_objs\n     def _prepare(self, model):\n+        for constraint in self.constraints:\n+            if isinstance(constraint, UniqueConstraint):\n+                for field_name in constraint.fields:\n+                    try:\n+                        self.get_field(field_name)\n+                    except FieldDoesNotExist:\n+                        raise ImproperlyConfigured('UniqueConstraint contains a non-existent field: %s' % field_name)\n         if self.order_with_respect_to:\n             query = self.order_with_respect_to\n             try:\n", "normalized_occurrence": 1}
