{"model_name_or_path": "agentless_claude", "instance_id": "django__django-16816", "model_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex e2f5674..ad040ae 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -897,6 +897,17 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         try:\n             field = obj.model._meta.get_field(item)\n+            # Check if field is reverse relation or generic foreign key\n+            if (field.is_relation and ((field.many_to_one and not field.related_model) or field.one_to_many)):\n+                return [\n+                    checks.Error(\n+                        \"The value of '%s' refers to '%s', which is a reverse relation \"\n+                        \"or generic foreign key, and cannot be used in list_display.\"\n+                        % (label, item),\n+                        obj=obj.__class__,\n+                        id=\"admin.E108\",\n+                    )\n+                ]\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py\nindex 4734fd9..138f9d1 100644\n--- a/django/contrib/admin/checks.py\n+++ b/django/contrib/admin/checks.py\n@@ -339,6 +339,8 @@ class ModelAdminChecks(BaseModelAdminChecks):\n             return []\n         try:\n             field = obj.model._meta.get_field(item)\n+            if field.is_relation and (field.many_to_one and (not field.related_model) or field.one_to_many):\n+                return [checks.Error(\"The value of '%s' refers to '%s', which is a reverse relation or generic foreign key, and cannot be used in list_display.\" % (label, item), obj=obj.__class__, id='admin.E108')]\n         except FieldDoesNotExist:\n             try:\n                 field = getattr(obj.model, item)\n", "normalized_occurrence": 1}
