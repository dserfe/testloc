{"model_name_or_path": "agentless", "instance_id": "django__django-16901", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 4465765..ba40c02 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -72,7 +72,14 @@ class Q(tree.Node):\n         return self._combine(other, self.AND)\n \n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(other)\n+        combined = Q()\n+        for q in [self, other]:\n+            if not q:\n+                continue\n+            combined = (combined & ~q) | (~combined & q)\n+        return combined\n \n     def __invert__(self):\n         obj = self.copy()\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex 0f80339..d61fda1 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -36,7 +36,14 @@ class Q(tree.Node):\n     def __and__(self, other):\n         return self._combine(other, self.AND)\n     def __xor__(self, other):\n-        return self._combine(other, self.XOR)\n+        if not isinstance(other, Q):\n+            raise TypeError(other)\n+        combined = Q()\n+        for q in [self, other]:\n+            if not q:\n+                continue\n+            combined = combined & ~q | ~combined & q\n+        return combined\n     def __invert__(self):\n         obj = self.copy()\n         obj.negate()\n", "normalized_occurrence": 1}
