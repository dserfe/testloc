{"model_name_or_path": "agentless", "instance_id": "django__django-13128", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 215532d..1902909 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -443,6 +443,8 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n         self.lhs, self.rhs = exprs\n \n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         try:\n             lhs_type = self.lhs.output_field.get_internal_type()\n         except FieldError:\n@@ -494,6 +496,8 @@ class DurationExpression(CombinedExpression):\n         return compiler.compile(side)\n \n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         connection.ops.check_expression_support(self)\n         expressions = []\n         expression_params = []\n@@ -516,6 +520,8 @@ class TemporalSubtraction(CombinedExpression):\n         super().__init__(lhs, self.SUB, rhs)\n \n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         connection.ops.check_expression_support(self)\n         lhs = compiler.compile(self.lhs)\n         rhs = compiler.compile(self.rhs)\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex ae5c73e..fb86fb7 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -239,6 +239,8 @@ class CombinedExpression(SQLiteNumericMixin, Expression):\n     def set_source_expressions(self, exprs):\n         self.lhs, self.rhs = exprs\n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         try:\n             lhs_type = self.lhs.output_field.get_internal_type()\n         except FieldError:\n@@ -281,6 +283,8 @@ class DurationExpression(CombinedExpression):\n                 return (connection.ops.format_for_duration_arithmetic(sql), params)\n         return compiler.compile(side)\n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         connection.ops.check_expression_support(self)\n         expressions = []\n         expression_params = []\n@@ -298,6 +302,8 @@ class TemporalSubtraction(CombinedExpression):\n     def __init__(self, lhs, rhs):\n         super().__init__(lhs, self.SUB, rhs)\n     def as_sql(self, compiler, connection):\n+        if self.connector == self.SUB and isinstance(self.lhs.output_field, fields.DateTimeField) and isinstance(self.rhs.output_field, fields.DateTimeField):\n+            return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)\n         connection.ops.check_expression_support(self)\n         lhs = compiler.compile(self.lhs)\n         rhs = compiler.compile(self.rhs)\n", "normalized_occurrence": 1}
