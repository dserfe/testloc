{"model_name_or_path": "agentless", "instance_id": "sympy__sympy-14396", "model_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 57c950b..1d9fb95 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -406,6 +406,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_complexfield = re.compile(r\"^(C|CC)(_(\\d+))?$\")\n     _re_finitefield = re.compile(r\"^(FF|GF)\\((\\d+)\\)$\")\n     _re_polynomial = re.compile(r\"^(Z|ZZ|Q|QQ)\\[(.+)\\]$\")\n+    _re_polynomial_realfield = re.compile(r\"^(R|RR)\\[(.+)\\]$\")\n+    _re_polynomial_complexfield = re.compile(r\"^(C|CC)\\[(.+)\\]$\")\n     _re_fraction = re.compile(r\"^(Z|ZZ|Q|QQ)\\((.+)\\)$\")\n     _re_algebraic = re.compile(r\"^(Q|QQ)\\<(.+)\\>$\")\n \n@@ -462,6 +464,18 @@ class Domain(with_metaclass(OptionType, Option)):\n                 else:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n \n+            r = cls._re_polynomial_realfield.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+\n+            r = cls._re_polynomial_complexfield.match(domain)\n+\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.CC.poly_ring(*gens)\n+\n             r = cls._re_fraction.match(domain)\n \n             if r is not None:\n@@ -480,7 +494,7 @@ class Domain(with_metaclass(OptionType, Option)):\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n \n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError(f'Expected a valid domain specification, but got {domain}')\n \n     @classmethod\n     def postprocess(cls, options):\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py\nindex 904ae78..4fd1336 100644\n--- a/sympy/polys/polyoptions.py\n+++ b/sympy/polys/polyoptions.py\n@@ -232,6 +232,8 @@ class Domain(with_metaclass(OptionType, Option)):\n     _re_complexfield = re.compile('^(C|CC)(_(\\\\d+))?$')\n     _re_finitefield = re.compile('^(FF|GF)\\\\((\\\\d+)\\\\)$')\n     _re_polynomial = re.compile('^(Z|ZZ|Q|QQ)\\\\[(.+)\\\\]$')\n+    _re_polynomial_realfield = re.compile('^(R|RR)\\\\[(.+)\\\\]$')\n+    _re_polynomial_complexfield = re.compile('^(C|CC)\\\\[(.+)\\\\]$')\n     _re_fraction = re.compile('^(Z|ZZ|Q|QQ)\\\\((.+)\\\\)$')\n     _re_algebraic = re.compile('^(Q|QQ)\\\\<(.+)\\\\>$')\n     @classmethod\n@@ -272,6 +274,14 @@ class Domain(with_metaclass(OptionType, Option)):\n                     return sympy.polys.domains.ZZ.poly_ring(*gens)\n                 else:\n                     return sympy.polys.domains.QQ.poly_ring(*gens)\n+            r = cls._re_polynomial_realfield.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.RR.poly_ring(*gens)\n+            r = cls._re_polynomial_complexfield.match(domain)\n+            if r is not None:\n+                gens = list(map(sympify, r.groups()[1].split(',')))\n+                return sympy.polys.domains.CC.poly_ring(*gens)\n             r = cls._re_fraction.match(domain)\n             if r is not None:\n                 ground, gens = r.groups()\n@@ -284,7 +294,7 @@ class Domain(with_metaclass(OptionType, Option)):\n             if r is not None:\n                 gens = list(map(sympify, r.groups()[1].split(',')))\n                 return sympy.polys.domains.QQ.algebraic_field(*gens)\n-        raise OptionError('expected a valid domain specification, got %s' % domain)\n+        raise OptionError(f'Expected a valid domain specification, but got {domain}')\n     @classmethod\n     def postprocess(cls, options):\n         if 'gens' in options and 'domain' in options and options['domain'].is_Composite and set(options['domain'].symbols) & set(options['gens']):\n", "normalized_occurrence": 1}
