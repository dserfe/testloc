{"model_name_or_path": "agentless_claude", "instance_id": "sphinx-doc__sphinx-8638", "model_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex ec7a051..cf0626a 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -780,7 +780,22 @@ class PyAttribute(PyObject):\n     })\n \n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n-        fullname, prefix = super().handle_signature(sig, signode)\n+        fullname = sig\n+        prefix = None\n+        \n+        modname = self.options.get('module', self.env.temp_data.get('py:module'))\n+        classname = self.env.temp_data.get('py:class')\n+        \n+        if classname:\n+            # Add class name without creating a reference\n+            if modname:\n+                nodetext = '.'.join([modname, classname])\n+                signode += addnodes.desc_addname(nodetext + '.', nodetext + '.')\n+            else:\n+                signode += addnodes.desc_addname(classname + '.', classname + '.')\n+            \n+        # Add the attribute name without creating a reference\n+        signode += addnodes.desc_name(sig, sig)\n \n         typ = self.options.get('type')\n         if typ:\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\nindex 06b9e34..9a8c7d4 100644\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -479,7 +479,17 @@ class PyAttribute(PyObject):\n     option_spec = PyObject.option_spec.copy()\n     option_spec.update({'type': directives.unchanged, 'value': directives.unchanged})\n     def handle_signature(self, sig: str, signode: desc_signature) -> Tuple[str, str]:\n-        fullname, prefix = super().handle_signature(sig, signode)\n+        fullname = sig\n+        prefix = None\n+        modname = self.options.get('module', self.env.temp_data.get('py:module'))\n+        classname = self.env.temp_data.get('py:class')\n+        if classname:\n+            if modname:\n+                nodetext = '.'.join([modname, classname])\n+                signode += addnodes.desc_addname(nodetext + '.', nodetext + '.')\n+            else:\n+                signode += addnodes.desc_addname(classname + '.', classname + '.')\n+        signode += addnodes.desc_name(sig, sig)\n         typ = self.options.get('type')\n         if typ:\n             annotations = _parse_annotation(typ, self.env)\n", "normalized_occurrence": 1}
