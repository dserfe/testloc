{"model_name_or_path": "agentless", "instance_id": "django__django-12858", "model_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 1540a78..0fd34fd 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -217,7 +217,26 @@ class Options:\n             new_objs.append(obj)\n         return new_objs\n \n-    def _prepare(self, model):\n+    def _validate_ordering(self):\n+        \"\"\"\n+        Validate the ordering attribute in the Meta class.\n+        Allow lookups in ordering.\n+        \"\"\"\n+        def check_ordering(ordering):\n+            for field_name in ordering:\n+                if field_name.startswith('-'):\n+                    field_name = field_name[1:]\n+                if LOOKUP_SEP in field_name and field_name not in self._get_fields_cache:\n+                    raise FieldDoesNotExist(\n+                        \"%s has no field named '%s'\" % (self.object_name, field_name)\n+                    )\n+            return True\n+        \n+        if self.ordering:\n+            if isinstance(self.ordering, (list, tuple)):\n+                check_ordering(self.ordering)\n+            else:\n+                raise TypeError(\"Meta ordering must be a tuple or list\")\n         if self.order_with_respect_to:\n             # The app registry will not be ready at this point, so we cannot\n             # use get_field().\n@@ -859,4 +878,4 @@ class Options:\n         return [\n             field for field in self._get_fields(forward=True, reverse=False, include_parents=PROXY_PARENTS)\n             if getattr(field, 'db_returning', False)\n-        ]\n+        ]\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/models/options.py b/django/db/models/options.py\nindex 63c14d2..3a41cf0 100644\n--- a/django/db/models/options.py\n+++ b/django/db/models/options.py\n@@ -133,7 +133,19 @@ class Options:\n             obj.name = obj.name % {'app_label': cls._meta.app_label.lower(), 'class': cls.__name__.lower()}\n             new_objs.append(obj)\n         return new_objs\n-    def _prepare(self, model):\n+    def _validate_ordering(self):\n+        def check_ordering(ordering):\n+            for field_name in ordering:\n+                if field_name.startswith('-'):\n+                    field_name = field_name[1:]\n+                if LOOKUP_SEP in field_name and field_name not in self._get_fields_cache:\n+                    raise FieldDoesNotExist(\"%s has no field named '%s'\" % (self.object_name, field_name))\n+            return True\n+        if self.ordering:\n+            if isinstance(self.ordering, (list, tuple)):\n+                check_ordering(self.ordering)\n+            else:\n+                raise TypeError('Meta ordering must be a tuple or list')\n         if self.order_with_respect_to:\n             query = self.order_with_respect_to\n             try:\n", "normalized_occurrence": 1}
