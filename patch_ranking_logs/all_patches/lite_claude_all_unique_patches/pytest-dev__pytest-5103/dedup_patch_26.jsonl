{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-5103", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 4810cdd..d443d14 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -964,10 +964,73 @@ warn_explicit(\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return res, explanation\n \n-    def visit_Call_35(self, call):\n-        \"\"\"\n-        visit `ast.Call` nodes on Python3.5 and after\n-        \"\"\"\n+\n+        new_func, func_expl = self.visit(call.func)\n+        \n+        # Special handling for all() and any() calls\n+        if isinstance(new_func, ast.Name) and new_func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                # Get the iterator argument\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, ast.GeneratorExp) or isinstance(iter_arg, ast.ListComp):\n+                    # Create a for loop that checks each element\n+                    test_expr = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    \n+                    # Build the loop body\n+                    if new_func.id == 'all':\n+                        # for x in iter: assert pred(x)\n+                        loop_body = ast.Assert(test_expr, None)\n+                    else:  # any\n+                        # found = False\n+                        # for x in iter:\n+                        #     if pred(x):\n+                        #         found = True\n+                        #         break\n+                        # assert found\n+                        found_name = self.new_name()\n+                        loop_body = ast.If(\n+                            test_expr,\n+                            [ast.Assign([ast.Name(found_name, ast.Store())], ast.Constant(True)),\n+                             ast.Break()],\n+                            []\n+                        )\n+                        \n+                    loop = ast.For(target, iter_expr, [loop_body], [])\n+                    if new_func.id == 'any':\n+                        # Wrap in the found = False; try: ... finally: assert found\n+                        wrapper = [\n+                            ast.Assign([ast.Name(found_name, ast.Store())], ast.Constant(False)),\n+                            loop,\n+                            ast.Assert(ast.Name(found_name, ast.Load()), None)\n+                        ]\n+                        return ast.Module(wrapper), \"any() condition never met\"\n+                    \n+                    return loop, \"all() condition failed\"\n+        \n+        # Default handling for other calls\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + \"=\" + expl)\n+            else:  # **args have `arg` keywords with an .arg of None\n+                arg_expls.append(\"**\" + expl)\n+\n+        expl = \"%s(%s)\" % (func_expl, \", \".join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = \"%s\\n{%s = %s\\n}\" % (res_expl, res_expl, expl)\n+        return res, outer_expl\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 2ada5b2..286bf72 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -543,7 +543,44 @@ class AssertionRewriter(ast.NodeVisitor):\n         explanation = '(%s %s %s)' % (left_expl, symbol, right_expl)\n         res = self.assign(ast.BinOp(left_expr, binop.op, right_expr))\n         return (res, explanation)\n-    def visit_Call_35(self, call):\n+        new_func, func_expl = self.visit(call.func)\n+        if isinstance(new_func, ast.Name) and new_func.id in ('all', 'any'):\n+            if len(call.args) == 1 and len(call.keywords) == 0:\n+                iter_arg = call.args[0]\n+                if isinstance(iter_arg, ast.GeneratorExp) or isinstance(iter_arg, ast.ListComp):\n+                    test_expr = iter_arg.elt\n+                    target = iter_arg.generators[0].target\n+                    iter_expr = iter_arg.generators[0].iter\n+                    if new_func.id == 'all':\n+                        loop_body = ast.Assert(test_expr, None)\n+                    else:\n+                        found_name = self.new_name()\n+                        loop_body = ast.If(test_expr, [ast.Assign([ast.Name(found_name, ast.Store())], ast.Constant(True)), ast.Break()], [])\n+                    loop = ast.For(target, iter_expr, [loop_body], [])\n+                    if new_func.id == 'any':\n+                        wrapper = [ast.Assign([ast.Name(found_name, ast.Store())], ast.Constant(False)), loop, ast.Assert(ast.Name(found_name, ast.Load()), None)]\n+                        return (ast.Module(wrapper), 'any() condition never met')\n+                    return (loop, 'all() condition failed')\n+        arg_expls = []\n+        new_args = []\n+        new_kwargs = []\n+        for arg in call.args:\n+            res, expl = self.visit(arg)\n+            arg_expls.append(expl)\n+            new_args.append(res)\n+        for keyword in call.keywords:\n+            res, expl = self.visit(keyword.value)\n+            new_kwargs.append(ast.keyword(keyword.arg, res))\n+            if keyword.arg:\n+                arg_expls.append(keyword.arg + '=' + expl)\n+            else:\n+                arg_expls.append('**' + expl)\n+        expl = '%s(%s)' % (func_expl, ', '.join(arg_expls))\n+        new_call = ast.Call(new_func, new_args, new_kwargs)\n+        res = self.assign(new_call)\n+        res_expl = self.explanation_param(self.display(res))\n+        outer_expl = '%s\\n{%s = %s\\n}' % (res_expl, res_expl, expl)\n+        return (res, outer_expl)\n         new_func, func_expl = self.visit(call.func)\n         arg_expls = []\n         new_args = []\n", "normalized_occurrence": 1}
