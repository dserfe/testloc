{"model_name_or_path": "agentless", "instance_id": "django__django-13768", "model_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex ad86558..8570ecf 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -204,10 +204,14 @@ class Signal:\n         # Call each receiver with whatever arguments it can accept.\n         # Return a list of tuple pairs [(receiver, response), ... ].\n         responses = []\n+        import logging\n+        logger = logging.getLogger(__name__)\n+        \n         for receiver in self._live_receivers(sender):\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.exception(\"Error in receiver: %s\", receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n", "occurrence": 1, "normalized_patch": "diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py\nindex 0417315..bf14bf3 100644\n--- a/django/dispatch/dispatcher.py\n+++ b/django/dispatch/dispatcher.py\n@@ -67,10 +67,13 @@ class Signal:\n         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:\n             return []\n         responses = []\n+        import logging\n+        logger = logging.getLogger(__name__)\n         for receiver in self._live_receivers(sender):\n             try:\n                 response = receiver(signal=self, sender=sender, **named)\n             except Exception as err:\n+                logger.exception('Error in receiver: %s', receiver)\n                 responses.append((receiver, err))\n             else:\n                 responses.append((receiver, response))\n", "normalized_occurrence": 2}
