{"model_name_or_path": "agentless", "instance_id": "pytest-dev__pytest-7324", "model_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 6a19d2c..063176f 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -16,6 +16,7 @@ from _pytest.config.argparsing import Parser\n from _pytest.config.exceptions import UsageError\n from _pytest.nodes import Node\n from _pytest.reports import BaseReport\n+import sys\n \n if TYPE_CHECKING:\n     from _pytest.capture import CaptureManager\n@@ -23,6 +24,9 @@ if TYPE_CHECKING:\n \n \n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    import builtins\n+    if value in (\"None\", \"True\", \"False\"):\n+        raise argparse.ArgumentTypeError(f\"{value} is a reserved keyword and cannot be used.\")\n     \"\"\"Validate syntax of --pdbcls option.\"\"\"\n     try:\n         modname, classname = value.split(\":\")\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/debugging.py b/src/_pytest/debugging.py\nindex 04f3f1a..0e3e9fe 100644\n--- a/src/_pytest/debugging.py\n+++ b/src/_pytest/debugging.py\n@@ -14,10 +14,15 @@ from _pytest.config.argparsing import Parser\n from _pytest.config.exceptions import UsageError\n from _pytest.nodes import Node\n from _pytest.reports import BaseReport\n+import sys\n if TYPE_CHECKING:\n     from _pytest.capture import CaptureManager\n     from _pytest.runner import CallInfo\n def _validate_usepdb_cls(value: str) -> Tuple[str, str]:\n+    import builtins\n+    if value in ('None', 'True', 'False'):\n+        raise argparse.ArgumentTypeError(f'{value} is a reserved keyword and cannot be used.')\n+    'Validate syntax of --pdbcls option.'\n     try:\n         modname, classname = value.split(':')\n     except ValueError:\n", "normalized_occurrence": 1}
