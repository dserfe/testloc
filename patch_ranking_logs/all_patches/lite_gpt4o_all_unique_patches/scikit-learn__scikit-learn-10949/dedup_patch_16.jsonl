{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..78322e4 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -507,6 +507,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # dtype to the function converts complex to real dtype,\n         # thereby passing the test made in the lines following the scope\n         # of warnings context manager.\n+        if warn_on_dtype and hasattr(array, 'dtypes'):\n+            dtype_orig = array.dtypes\n+        else:\n+            dtype_orig = None\n+\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n@@ -515,6 +520,13 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 raise ValueError(\"Complex data not supported\\n\"\n                                  \"{}\\n\".format(array))\n \n+        if warn_on_dtype and dtype_orig is not None:\n+            dtype_new = array.dtype\n+            if not all(dtype_orig == dtype_new):\n+                msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                       % (dtype_orig, dtype_new, context))\n+                warnings.warn(msg, DataConversionWarning)\n+\n         # It is possible that the np.array(..) gave no warning. This happens\n         # when no dtype conversion happened, for example dtype = None. The\n         # result is that np.array(..) produces an array of complex dtype\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..39d4ad7 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,12 +152,21 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if warn_on_dtype and hasattr(array, 'dtypes'):\n+            dtype_orig = array.dtypes\n+        else:\n+            dtype_orig = None\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n                 array = np.asarray(array, dtype=dtype, order=order)\n             except ComplexWarning:\n                 raise ValueError('Complex data not supported\\n{}\\n'.format(array))\n+        if warn_on_dtype and dtype_orig is not None:\n+            dtype_new = array.dtype\n+            if not all(dtype_orig == dtype_new):\n+                msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, dtype_new, context)\n+                warnings.warn(msg, DataConversionWarning)\n         _ensure_no_complex_data(array)\n         if ensure_2d:\n             if array.ndim == 0:\n", "normalized_occurrence": 1}
