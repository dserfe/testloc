{"model_name_or_path": "agentless", "instance_id": "sphinx-doc__sphinx-8056", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f955f19..504a119 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -1095,12 +1095,14 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = line, ''\n         _name, _type = _name.strip(), _type.strip()\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(\n-            _type,\n+        _names = _name.split(\", \")\n+        _types = _type.split(\", \")\n+        _name = \", \".join(self._escape_args_and_kwargs(name) for name in _names)\n+        _type = \", \".join(_convert_numpy_type_spec(\n+            type_,\n             location=self._get_location(),\n             translations=self._config.napoleon_type_aliases or {},\n-        )\n+        ) for type_ in _types)\n \n         if prefer_type and not _type:\n             _type, _name = _name, _type\n", "occurrence": 1, "normalized_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex f69cdab..e78280f 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -665,8 +665,10 @@ class NumpyDocstring(GoogleDocstring):\n         else:\n             _name, _type = (line, '')\n         _name, _type = (_name.strip(), _type.strip())\n-        _name = self._escape_args_and_kwargs(_name)\n-        _type = _convert_numpy_type_spec(_type, location=self._get_location(), translations=self._config.napoleon_type_aliases or {})\n+        _names = _name.split(', ')\n+        _types = _type.split(', ')\n+        _name = ', '.join((self._escape_args_and_kwargs(name) for name in _names))\n+        _type = ', '.join((_convert_numpy_type_spec(type_, location=self._get_location(), translations=self._config.napoleon_type_aliases or {}) for type_ in _types))\n         if prefer_type and (not _type):\n             _type, _name = (_name, _type)\n         indent = self._get_indent(line) + 1\n", "normalized_occurrence": 1}
