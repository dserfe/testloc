{"model_name_or_path": "agentless_claude", "instance_id": "django__django-17087", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 941a5ed..d4be443 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -100,13 +100,26 @@ class DeconstructableSerializer(BaseSerializer):\n \n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit(\".\", 1)\n-        if module == \"django.db.models\":\n+        if path.startswith('django.db.models.'):\n             imports = {\"from django.db import models\"}\n-            name = \"models.%s\" % name\n+            name = \"models.%s\" % path[16:]  # len('django.db.models.') == 16\n         else:\n-            imports = {\"import %s\" % module}\n-            name = path\n+            module_path = path.split('.')\n+            # Find the module part by looking for the first component that exists as a module\n+            for i in range(len(module_path) - 1, 0, -1):\n+                module = '.'.join(module_path[:i])\n+                try:\n+                    __import__(module)\n+                    imports = {\"import %s\" % module}\n+                    name = path  # Keep the full path for nested classes\n+                    break\n+                except ImportError:\n+                    continue\n+            else:\n+                # Fallback to the old behavior if no module is found\n+                module, name = path.rsplit(\".\", 1)\n+                imports = {\"import %s\" % module}\n+                name = path\n         return name, imports\n \n     def serialize(self):\n", "occurrence": 1, "normalized_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex bd46ec1..43beb70 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -70,13 +70,24 @@ class DeconstructableSerializer(BaseSerializer):\n         return ('%s(%s)' % (name, ', '.join(strings)), imports)\n     @staticmethod\n     def _serialize_path(path):\n-        module, name = path.rsplit('.', 1)\n-        if module == 'django.db.models':\n+        if path.startswith('django.db.models.'):\n             imports = {'from django.db import models'}\n-            name = 'models.%s' % name\n+            name = 'models.%s' % path[16:]\n         else:\n-            imports = {'import %s' % module}\n-            name = path\n+            module_path = path.split('.')\n+            for i in range(len(module_path) - 1, 0, -1):\n+                module = '.'.join(module_path[:i])\n+                try:\n+                    __import__(module)\n+                    imports = {'import %s' % module}\n+                    name = path\n+                    break\n+                except ImportError:\n+                    continue\n+            else:\n+                module, name = path.rsplit('.', 1)\n+                imports = {'import %s' % module}\n+                name = path\n         return (name, imports)\n     def serialize(self):\n         return self.serialize_deconstructed(*self.value.deconstruct())\n", "normalized_occurrence": 1}
