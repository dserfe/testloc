{"model_name_or_path": "agentless_claude", "instance_id": "matplotlib__matplotlib-24627", "model_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex eec4e31..914324b 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -1403,12 +1403,24 @@ class _AxesBase(martist.Artist):\n \n     def cla(self):\n         \"\"\"Clear the Axes.\"\"\"\n+        # Get all artists before clearing\n+        artists = []\n+        for artist_list in (self.collections, self.patches, self.lines,\n+                           self.texts, self.artists, self.images):\n+            artists.extend(artist_list)\n+            \n         # Act as an alias, or as the superclass implementation depending on the\n         # subclass implementation.\n         if self._subclass_uses_cla:\n             self.__clear()\n         else:\n             self.clear()\n+            \n+        # Clean up artist references after clearing\n+        for artist in artists:\n+            artist.axes = None\n+            if hasattr(artist, 'figure'):\n+                artist.figure = None\n \n     class ArtistList(MutableSequence):\n         \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/lib/matplotlib/axes/_base.py b/lib/matplotlib/axes/_base.py\nindex ec4e745..d1bbe8f 100644\n--- a/lib/matplotlib/axes/_base.py\n+++ b/lib/matplotlib/axes/_base.py\n@@ -601,10 +601,17 @@ class _AxesBase(martist.Artist):\n         else:\n             self.__clear()\n     def cla(self):\n+        artists = []\n+        for artist_list in (self.collections, self.patches, self.lines, self.texts, self.artists, self.images):\n+            artists.extend(artist_list)\n         if self._subclass_uses_cla:\n             self.__clear()\n         else:\n             self.clear()\n+        for artist in artists:\n+            artist.axes = None\n+            if hasattr(artist, 'figure'):\n+                artist.figure = None\n     class ArtistList(MutableSequence):\n         def __init__(self, axes, prop_name, add_name, valid_types=None, invalid_types=None):\n             self._axes = axes\n", "normalized_occurrence": 1}
