{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14182", "model_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 00bbbaf..8a3f1ac 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,27 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n \n     def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n+        if self.header_rows:\n+            header_lines = []\n+            # Add the header row separator\n+            separator = self.splitter.join('=' * len(col.info.format) for col in self.cols)\n+            \n+            # Write each header row\n+            for row_type in self.header_rows:\n+                if row_type == 'name':\n+                    header_lines.append(self.splitter.join(col.info.name for col in self.cols))\n+                elif row_type == 'unit':\n+                    header_lines.append(self.splitter.join(col.info.unit.to_string() if col.info.unit else '' for col in self.cols))\n+            \n+            # Add separator lines\n+            lines = [separator] + header_lines + [separator] + lines[2:]\n+            return lines\n+        else:\n+            lines = super().write(lines)\n+            lines = [lines[1]] + lines + [lines[1]]\n+            return lines\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex 65d6c1d..50729e0 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -18,9 +18,21 @@ class RST(FixedWidth):\n     _description = 'reStructuredText simple table'\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows\n     def write(self, lines):\n-        lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n-        return lines\n\\ No newline at end of file\n+        if self.header_rows:\n+            header_lines = []\n+            separator = self.splitter.join(('=' * len(col.info.format) for col in self.cols))\n+            for row_type in self.header_rows:\n+                if row_type == 'name':\n+                    header_lines.append(self.splitter.join((col.info.name for col in self.cols)))\n+                elif row_type == 'unit':\n+                    header_lines.append(self.splitter.join((col.info.unit.to_string() if col.info.unit else '' for col in self.cols)))\n+            lines = [separator] + header_lines + [separator] + lines[2:]\n+            return lines\n+        else:\n+            lines = super().write(lines)\n+            lines = [lines[1]] + lines + [lines[1]]\n+            return lines\n\\ No newline at end of file\n", "normalized_occurrence": 1}
