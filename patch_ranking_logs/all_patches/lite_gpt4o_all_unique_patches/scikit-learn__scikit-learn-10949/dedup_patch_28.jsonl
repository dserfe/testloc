{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-10949", "model_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7e2fa63..d11e04b 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -502,6 +502,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                                       force_all_finite=force_all_finite,\n                                       accept_large_sparse=accept_large_sparse)\n     else:\n+        if warn_on_dtype and dtype_orig is not None and isinstance(array_orig, pd.DataFrame):\n+            msg = (\"Data with input dtype %s was converted to %s%s.\"\n+                   % (dtype_orig, np.float64, context))\n+            warnings.warn(msg, DataConversionWarning)\n+            \n         # If np.array(..) gives ComplexWarning, then we convert the warning\n         # to an error. This is needed because specifying a non complex\n         # dtype to the function converts complex to real dtype,\n@@ -547,7 +552,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n                 FutureWarning)\n \n         # make sure we actually converted to numeric:\n-        if dtype_numeric and array.dtype.kind == \"O\":\n+        if dtype_numeric and array.dtype.kind == \"O\" and not isinstance(array_orig, pd.DataFrame):\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError(\"Found array with dim %d. %s expected <= 2.\"\n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 7db8b51..0cb935d 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -152,6 +152,9 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n         _ensure_no_complex_data(array)\n         array = _ensure_sparse_format(array, accept_sparse=accept_sparse, dtype=dtype, copy=copy, force_all_finite=force_all_finite, accept_large_sparse=accept_large_sparse)\n     else:\n+        if warn_on_dtype and dtype_orig is not None and isinstance(array_orig, pd.DataFrame):\n+            msg = 'Data with input dtype %s was converted to %s%s.' % (dtype_orig, np.float64, context)\n+            warnings.warn(msg, DataConversionWarning)\n         with warnings.catch_warnings():\n             try:\n                 warnings.simplefilter('error', ComplexWarning)\n@@ -166,7 +169,7 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True, dtype='num\n                 raise ValueError('Expected 2D array, got 1D array instead:\\narray={}.\\nReshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.'.format(array))\n         if dtype_numeric and np.issubdtype(array.dtype, np.flexible):\n             warnings.warn(\"Beginning in version 0.22, arrays of strings will be interpreted as decimal numbers if parameter 'dtype' is 'numeric'. It is recommended that you convert the array to type np.float64 before passing it to check_array.\", FutureWarning)\n-        if dtype_numeric and array.dtype.kind == 'O':\n+        if dtype_numeric and array.dtype.kind == 'O' and (not isinstance(array_orig, pd.DataFrame)):\n             array = array.astype(np.float64)\n         if not allow_nd and array.ndim >= 3:\n             raise ValueError('Found array with dim %d. %s expected <= 2.' % (array.ndim, estimator_name))\n", "normalized_occurrence": 1}
