{"model_name_or_path": "agentless", "instance_id": "pydata__xarray-4695", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 81d2785..6d3db67 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1196,12 +1196,13 @@ class DataArray(AbstractArray, DataWithCoords):\n         DataArray.isel\n \n         \"\"\"\n+        # Ensure method is not overwritten by dimension name\n         ds = self._to_temp_dataset().sel(\n             indexers=indexers,\n             drop=drop,\n             method=method,\n             tolerance=tolerance,\n-            **indexers_kwargs,\n+            **{k: v for k, v in indexers_kwargs.items() if k != 'method'},\n         )\n         return self._from_temp_dataset(ds)\n \n", "occurrence": 1, "normalized_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex 4be0f90..a8145a1 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -439,7 +439,7 @@ class DataArray(AbstractArray, DataWithCoords):\n             coords[coord_name] = coord_value\n         return self._replace(variable=variable, coords=coords)\n     def sel(self, indexers: Mapping[Hashable, Any]=None, method: str=None, tolerance=None, drop: bool=False, **indexers_kwargs: Any) -> 'DataArray':\n-        ds = self._to_temp_dataset().sel(indexers=indexers, drop=drop, method=method, tolerance=tolerance, **indexers_kwargs)\n+        ds = self._to_temp_dataset().sel(indexers=indexers, drop=drop, method=method, tolerance=tolerance, **{k: v for k, v in indexers_kwargs.items() if k != 'method'})\n         return self._from_temp_dataset(ds)\n     def head(self, indexers: Union[Mapping[Hashable, int], int]=None, **indexers_kwargs: Any) -> 'DataArray':\n         ds = self._to_temp_dataset().head(indexers, **indexers_kwargs)\n", "normalized_occurrence": 1}
