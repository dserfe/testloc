{"model_name_or_path": "agentless_claude", "instance_id": "pytest-dev__pytest-8906", "model_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 6515102..6bddb41 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -128,15 +128,24 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    For skipping an entire module (especially when it contains syntax from newer Python\n+    versions), use ``skip(msg=\"reason\", allow_module_level=True)`` at the module level\n+    before any imports that could cause syntax errors.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only available in newer Python versions.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For conditional skipping of individual tests, it is better to use the\n+        :ref:`pytest.mark.skipif ref` marker when possible to declare a test\n+        to be skipped under certain conditions like mismatching platforms or\n+        dependencies. However, for module-level skips due to syntax compatibility,\n+        using ``skip()`` with ``allow_module_level=True`` is the recommended approach.\n+        \n+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "occurrence": 1, "normalized_patch": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 4e411e5..ea83c10 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -86,15 +86,24 @@ def skip(msg: str='', *, allow_module_level: bool=False) -> 'NoReturn':\n     during collection by using the ``allow_module_level`` flag.  This function can\n     be called in doctests as well.\n \n+    For skipping an entire module (especially when it contains syntax from newer Python\n+    versions), use ``skip(msg=\"reason\", allow_module_level=True)`` at the module level\n+    before any imports that could cause syntax errors.\n+\n     :param bool allow_module_level:\n         Allows this function to be called at module level, skipping the rest\n-        of the module. Defaults to False.\n+        of the module. This is particularly useful when the module contains\n+        syntax or imports that are only available in newer Python versions.\n+        Defaults to False.\n \n     .. note::\n-        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n-        possible to declare a test to be skipped under certain conditions\n-        like mismatching platforms or dependencies.\n-        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n+        For conditional skipping of individual tests, it is better to use the\n+        :ref:`pytest.mark.skipif ref` marker when possible to declare a test\n+        to be skipped under certain conditions like mismatching platforms or\n+        dependencies. However, for module-level skips due to syntax compatibility,\n+        using ``skip()`` with ``allow_module_level=True`` is the recommended approach.\n+        \n+        For doctests, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n         <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n         to skip a doctest statically.\n     \"\"\"\n", "normalized_occurrence": 1}
