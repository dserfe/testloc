{"model_name_or_path": "agentless_claude", "instance_id": "scikit-learn__scikit-learn-25570", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 36a655a..7793f40 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -862,13 +862,13 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 if not self.verbose_feature_names_out:\n                     return output\n \n-                transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n-                ]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(\n-                    list(zip(transformer_names, feature_names_outs))\n-                )\n+                # Only include names from transformers with non-empty outputs\n+                name_feature_pairs = []\n+                for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs):\n+                    name = t[0]\n+                    if not _is_empty_column_selection(t[2]):\n+                        name_feature_pairs.append((name, X.columns))\n+                names_out = self._add_prefix_for_feature_names_out(name_feature_pairs)\n                 output.columns = names_out\n                 return output\n \n", "occurrence": 1, "normalized_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex 03f51bb..8a6bd75 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -257,9 +257,12 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 output = pd.concat(Xs, axis=1)\n                 if not self.verbose_feature_names_out:\n                     return output\n-                transformer_names = [t[0] for t in self._iter(fitted=True, replace_strings=True)]\n-                feature_names_outs = [X.columns for X in Xs]\n-                names_out = self._add_prefix_for_feature_names_out(list(zip(transformer_names, feature_names_outs)))\n+                name_feature_pairs = []\n+                for t, X in zip(self._iter(fitted=True, replace_strings=True), Xs):\n+                    name = t[0]\n+                    if not _is_empty_column_selection(t[2]):\n+                        name_feature_pairs.append((name, X.columns))\n+                names_out = self._add_prefix_for_feature_names_out(name_feature_pairs)\n                 output.columns = names_out\n                 return output\n             return np.hstack(Xs)\n", "normalized_occurrence": 1}
