{"model_name_or_path": "agentless_claude", "instance_id": "sympy__sympy-20438", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex d2cbd5e..25c1cbd 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -388,6 +388,13 @@ class Set(Basic):\n         if ret is not None:\n             return ret\n \n+        # Check if the sets are equal by checking mutual subset relationship\n+        if other.is_subset(self):\n+            if self.intersect(other) == self:\n+                return True\n+            if other.intersect(self) == other:\n+                return True\n+        \n         # Fall back on computing the intersection\n         # XXX: We shouldn't do this. A query like this should be handled\n         # without evaluating new Set objects. It should be the other way round\n", "occurrence": 1, "normalized_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 48590ad..714f11a 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -137,6 +137,11 @@ class Set(Basic):\n         ret = is_subset_sets(self, other)\n         if ret is not None:\n             return ret\n+        if other.is_subset(self):\n+            if self.intersect(other) == self:\n+                return True\n+            if other.intersect(self) == other:\n+                return True\n         if self.intersect(other) == self:\n             return True\n     def _eval_is_subset(self, other):\n", "normalized_occurrence": 1}
