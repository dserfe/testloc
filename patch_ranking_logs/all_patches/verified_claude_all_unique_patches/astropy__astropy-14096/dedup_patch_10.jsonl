{"model_name_or_path": "agentless_claude", "instance_id": "astropy__astropy-14096", "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..530048a 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,12 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # Check for property in class first\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__:\n+                if isinstance(cls.__dict__[attr], property):\n+                    return cls.__dict__[attr].__get__(self, type(self))\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n", "occurrence": 1, "normalized_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex 7fb9e10..3bd0450 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -262,6 +262,10 @@ class SkyCoord(ShapedLikeNDArray):\n     def _is_name(self, string):\n         return self.frame.name == string or (isinstance(self.frame.name, list) and string in self.frame.name)\n     def __getattr__(self, attr):\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__:\n+                if isinstance(cls.__dict__[attr], property):\n+                    return cls.__dict__[attr].__get__(self, type(self))\n         if '_sky_coord_frame' in self.__dict__:\n             if self._is_name(attr):\n                 return self\n", "normalized_occurrence": 1}
