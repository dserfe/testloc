{"model_name_or_path": "agentless_claude", "instance_id": "pallets__flask-4992", "model_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex 73be34c..3b3eece 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"\",\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -244,8 +245,8 @@ class Config(dict):\n             import json\n             app.config.from_file(\"config.json\", load=json.load)\n \n-            import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            import tomllib\n+            app.config.from_file(\"config.toml\", load=tomllib.load, mode=\"b\")\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -254,6 +255,8 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which to open the file. The default\n+            is text mode. Use \"b\" for binary mode.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +264,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, f\"r{mode}\") as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "occurrence": 1, "normalized_patch": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex a095695..4d91cbb 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -71,10 +71,10 @@ class Config(dict):\n         for key in dir(obj):\n             if key.isupper():\n                 self[key] = getattr(obj, key)\n-    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool=False) -> bool:\n+    def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool=False, mode: str='') -> bool:\n         filename = os.path.join(self.root_path, filename)\n         try:\n-            with open(filename) as f:\n+            with open(filename, f'r{mode}') as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n", "normalized_occurrence": 18}
