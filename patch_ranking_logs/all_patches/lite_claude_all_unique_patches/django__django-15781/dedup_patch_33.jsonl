{"model_name_or_path": "agentless_claude", "instance_id": "django__django-15781", "model_patch": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex 778cb1c..eb76560 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -129,6 +129,37 @@ class DjangoHelpFormatter(HelpFormatter):\n \n     def add_arguments(self, actions):\n         super().add_arguments(self._reordered_actions(actions))\n+        \n+    def _format_text(self, text):\n+        \"\"\"\n+        Format help text to preserve newlines and indentation.\n+        \"\"\"\n+        if text:\n+            text = text.strip('\\n')\n+            return text + '\\n'\n+        return text\n+\n+    def _split_lines(self, text, width):\n+        \"\"\"\n+        Preserve newlines in help text while still wrapping when needed.\n+        \"\"\"\n+        if '\\n' in text:\n+            # For multiline text, split on newlines first\n+            lines = text.splitlines()\n+            # Then wrap each line individually if needed\n+            wrapped_lines = []\n+            for line in lines:\n+                # Preserve indentation for each line\n+                indent = len(line) - len(line.lstrip())\n+                wrapped = super()._split_lines(line, width)\n+                if wrapped:\n+                    # Add original indentation to wrapped lines\n+                    wrapped = [' ' * indent + l.lstrip() for l in wrapped]\n+                    wrapped_lines.extend(wrapped)\n+                else:\n+                    wrapped_lines.append(line)\n+            return wrapped_lines\n+        return super()._split_lines(text, width)\n \n \n class OutputWrapper(TextIOBase):\n", "occurrence": 1, "normalized_patch": "--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n+    def _format_text(self, text):\n+        if text:\n+            text = text.strip('\\n')\n+            return text + '\\n'\n+        return text\n+    def _split_lines(self, text, width):\n+        if '\\n' in text:\n+            lines = text.splitlines()\n+            wrapped_lines = []\n+            for line in lines:\n+                indent = len(line) - len(line.lstrip())\n+                wrapped = super()._split_lines(line, width)\n+                if wrapped:\n+                    wrapped = [' ' * indent + l.lstrip() for l in wrapped]\n+                    wrapped_lines.extend(wrapped)\n+                else:\n+                    wrapped_lines.append(line)\n+            return wrapped_lines\n+        return super()._split_lines(text, width)", "normalized_occurrence": 1}
